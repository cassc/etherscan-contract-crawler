{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StorageV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IMultiLogicProxy.sol\\\";\\r\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract StorageV3 is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using SafeCastUpgradeable for uint256;\\r\\n\\r\\n    //struct\\r\\n    struct DepositStruct {\\r\\n        mapping(address => uint256) amount;\\r\\n        mapping(address => int256) tokenTime; // 1: flag, 0: BNB\\r\\n        uint256 iterate;\\r\\n        uint256 balanceBLID;\\r\\n        mapping(address => uint256) depositIterate;\\r\\n    }\\r\\n\\r\\n    struct EarnBLID {\\r\\n        uint256 allBLID;\\r\\n        uint256 timestamp;\\r\\n        uint256 usd;\\r\\n        uint256 tdt;\\r\\n        mapping(address => uint256) rates;\\r\\n    }\\r\\n\\r\\n    struct BoostInfo {\\r\\n        uint256 blidDeposit;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 blidOverDeposit;\\r\\n    }\\r\\n\\r\\n    struct OracleLatestAnswerInfo {\\r\\n        int256 latestAnswer;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    struct LeaveTokenPolicy {\\r\\n        uint256 limit;\\r\\n        uint256 leavePercentage;\\r\\n        uint256 leaveFixed;\\r\\n    }\\r\\n\\r\\n    /*** events ***/\\r\\n\\r\\n    event Deposit(address depositor, address token, uint256 amount);\\r\\n    event Withdraw(address depositor, address token, uint256 amount);\\r\\n    event UpdateTokenBalance(uint256 balance, address token);\\r\\n    event TakeToken(address token, uint256 amount);\\r\\n    event ReturnToken(address token, uint256 amount);\\r\\n    event AddEarn(uint256 amount);\\r\\n    event UpdateBLIDBalance(uint256 balance);\\r\\n    event InterestFee(address depositor, uint256 amount);\\r\\n    event SetBLID(address blid);\\r\\n    event AddToken(address token, address oracle);\\r\\n    event SetMultiLogicProxy(address multiLogicProxy);\\r\\n    event SetBoostingInfo(\\r\\n        uint256 maxBlidPerUSD,\\r\\n        uint256 blidPerBlock,\\r\\n        uint256 maxActiveBLID\\r\\n    );\\r\\n    event DepositBLID(address depositor, uint256 amount);\\r\\n    event WithdrawBLID(address depositor, uint256 amount);\\r\\n    event ClaimBoostBLID(address depositor, uint256 amount);\\r\\n    event SetBoostingAddress(address boostingAddress);\\r\\n    event SetOracleDeviationLimit(uint256 setOracleDeviationLimit);\\r\\n    event SetOracleLatestAnswer(\\r\\n        address token,\\r\\n        int256 latestAnswer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event SetAdmin(address admin);\\r\\n    event UpgradeVersion(string version, string purpose);\\r\\n    event SetLeaveTokenPolicy(\\r\\n        uint256 limit,\\r\\n        uint256 leavePerentage,\\r\\n        uint256 leaveFixed\\r\\n    );\\r\\n\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() external initializer {\\r\\n        OwnableUpgradeable.__Ownable_init();\\r\\n        PausableUpgradeable.__Pausable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        // limit is 100% within 1 day, 50% within 1 day = (1 ether) * 50 / (100 * 86400)\\r\\n        // This value means deviation percentage per second (decimals = 18)\\r\\n        oracleDeviationLimit = (1 ether) / uint256(86400);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n        internal\\r\\n        override\\r\\n        onlyOwner\\r\\n    {}\\r\\n\\r\\n    mapping(uint256 => EarnBLID) private earnBLID;\\r\\n    uint256 private countEarns;\\r\\n    uint256 private countTokens;\\r\\n    mapping(uint256 => address) private tokens;\\r\\n    mapping(address => uint256) private tokenBalance;\\r\\n    mapping(address => address) private oracles;\\r\\n    mapping(address => bool) private tokensAdd;\\r\\n    mapping(address => DepositStruct) private deposits;\\r\\n    mapping(address => uint256) private tokenDeposited;\\r\\n    mapping(address => int256) private tokenTime;\\r\\n    uint256 private reserveBLID;\\r\\n    address public logicContract; // MultiLogicProxy : V3\\r\\n    address private BLID;\\r\\n    mapping(address => mapping(uint256 => uint256))\\r\\n        public accumulatedRewardsPerShare;\\r\\n\\r\\n    // ****** Add from V21 ******\\r\\n\\r\\n    // Boost2.0\\r\\n    mapping(address => BoostInfo) private userBoosts;\\r\\n    uint256 public maxBlidPerUSD;\\r\\n    uint256 public blidPerBlock;\\r\\n    uint256 public accBlidPerShare;\\r\\n    uint256 public lastRewardBlock;\\r\\n    address public boostingAddress;\\r\\n    uint256 public totalSupplyBLID;\\r\\n    uint256 public maxActiveBLID;\\r\\n    uint256 public activeSupplyBLID;\\r\\n\\r\\n    address private constant ZERO_ADDRESS = address(0);\\r\\n    address private constant ONE_ADDRESS = address(1);\\r\\n\\r\\n    // Oracle kill switch\\r\\n    uint256 public oracleDeviationLimit; // decimal = 18\\r\\n    mapping(address => OracleLatestAnswerInfo) private oracleLatestAnswerInfo;\\r\\n\\r\\n    // ****** Add from V3 ******\\r\\n\\r\\n    // Adminable, Versionable\\r\\n    address private _admin;\\r\\n    string private _version;\\r\\n    string private _purpose;\\r\\n\\r\\n    // Leave Token Policy\\r\\n    LeaveTokenPolicy private leaveTokenPolicy;\\r\\n\\r\\n    // Deactivate token\\r\\n    mapping(address => bool) private tokensActivate;\\r\\n\\r\\n    // ETH Strategy\\r\\n    receive() external payable {}\\r\\n\\r\\n    /*** modifiers ***/\\r\\n\\r\\n    modifier onlyUsedToken(address _token) {\\r\\n        require(tokensAdd[_token], \\\"E1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMultiLogicProxy() {\\r\\n        require(msg.sender == logicContract, \\\"E8\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isBLIDToken(address _token) {\\r\\n        require(BLID == _token, \\\"E1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == _admin, \\\"OA1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerAndAdmin() {\\r\\n        require(msg.sender == owner() || msg.sender == _admin, \\\"OA2\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*** Adminable/Versionable function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set admin\\r\\n     * @param newAdmin Addres of new admin\\r\\n     */\\r\\n    function setAdmin(address newAdmin) external onlyOwner {\\r\\n        _admin = newAdmin;\\r\\n        emit SetAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    function getVersion() external view returns (string memory) {\\r\\n        return _version;\\r\\n    }\\r\\n\\r\\n    function getPurpose() external view returns (string memory) {\\r\\n        return _purpose;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set version and purpose\\r\\n     * @param version Version string, ex : 1.2.0\\r\\n     * @param purpose Purpose string\\r\\n     */\\r\\n    function upgradeVersion(string memory version, string memory purpose)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(bytes(version).length != 0, \\\"OV1\\\");\\r\\n\\r\\n        _version = version;\\r\\n        _purpose = purpose;\\r\\n\\r\\n        emit UpgradeVersion(version, purpose);\\r\\n    }\\r\\n\\r\\n    /*** Owner functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set blid in contract\\r\\n     * @param _blid address of BLID\\r\\n     */\\r\\n    function setBLID(address _blid) external onlyOwner {\\r\\n        require(_blid != ZERO_ADDRESS, \\\"E16\\\");\\r\\n        BLID = _blid;\\r\\n\\r\\n        emit SetBLID(_blid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set blid in contract\\r\\n     * @param _boostingAddress address of expense\\r\\n     */\\r\\n    function setBoostingAddress(address _boostingAddress) external onlyOwner {\\r\\n        require(_boostingAddress != ZERO_ADDRESS, \\\"E16\\\");\\r\\n        boostingAddress = _boostingAddress;\\r\\n\\r\\n        emit SetBoostingAddress(boostingAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set boosting parameters\\r\\n     * @param _maxBlidperUSD max value of BLID per USD\\r\\n     * @param _blidperBlock blid per Block\\r\\n     * @param _maxActiveBLID max active BLID limit\\r\\n     */\\r\\n    function setBoostingInfo(\\r\\n        uint256 _maxBlidperUSD,\\r\\n        uint256 _blidperBlock,\\r\\n        uint256 _maxActiveBLID\\r\\n    ) external onlyOwner {\\r\\n        // Initialize lastRewardBlock\\r\\n        if (lastRewardBlock == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        _boostingUpdateAccBlidPerShare();\\r\\n\\r\\n        maxBlidPerUSD = _maxBlidperUSD;\\r\\n        blidPerBlock = _blidperBlock;\\r\\n        maxActiveBLID = _maxActiveBLID;\\r\\n\\r\\n        emit SetBoostingInfo(_maxBlidperUSD, _blidperBlock, _maxActiveBLID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Triggers stopped state.\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns to normal state.\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add token and token's oracle\\r\\n     * @param _token Address of Token\\r\\n     * @param _oracles Address of token's oracle(https://docs.chain.link/docs/binance-smart-chain-addresses/\\r\\n     */\\r\\n    function addToken(address _token, address _oracles) external onlyOwner {\\r\\n        require(_oracles != ZERO_ADDRESS, \\\"E16\\\");\\r\\n        require(!tokensAdd[_token], \\\"E6\\\");\\r\\n        require(\\r\\n            _token == ZERO_ADDRESS ||\\r\\n                (_token != ZERO_ADDRESS &&\\r\\n                    IERC20MetadataUpgradeable(_token).decimals() <= 18),\\r\\n            \\\"E17\\\"\\r\\n        );\\r\\n        oracles[_token] = _oracles;\\r\\n        tokens[countTokens++] = _token;\\r\\n        tokensAdd[_token] = true;\\r\\n        tokensActivate[_token] = true;\\r\\n\\r\\n        (, int256 latestAnswer, , , ) = AggregatorV3Interface(_oracles)\\r\\n            .latestRoundData();\\r\\n        OracleLatestAnswerInfo\\r\\n            storage _oracleLatestAnswerInfo = oracleLatestAnswerInfo[_token];\\r\\n\\r\\n        _oracleLatestAnswerInfo.latestAnswer = latestAnswer;\\r\\n        _oracleLatestAnswerInfo.timestamp = block.timestamp;\\r\\n\\r\\n        emit AddToken(_token, _oracles);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set token activate / deactivate\\r\\n     * @param _token Address of Token\\r\\n     * @param status true : token is activate, false : token is deactivate\\r\\n     */\\r\\n    function setTokenActivate(address _token, bool status) external onlyOwner {\\r\\n        tokensActivate[_token] = status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set MultiLogicProxy in contract(only for upgradebale contract,use only whith DAO)\\r\\n     * @param _multiLogicProxy Address of MultiLogicProxy Contract\\r\\n     */\\r\\n    function setMultiLogicProxy(address _multiLogicProxy) external onlyOwner {\\r\\n        require(_multiLogicProxy != ZERO_ADDRESS, \\\"E16\\\");\\r\\n        logicContract = _multiLogicProxy;\\r\\n\\r\\n        emit SetMultiLogicProxy(_multiLogicProxy);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set LeaveTokenPolicy\\r\\n     * @param limit Token limit USD amount for leavePercentage (decimal = 0)\\r\\n     * @param leavePercentage Leave percentage before limit (0 - 9999)\\r\\n     * @param leaveFixed Leave fixed USD amount after limit (decimal = 0)\\r\\n     */\\r\\n    function setLeaveTokenPolicy(\\r\\n        uint256 limit,\\r\\n        uint256 leavePercentage,\\r\\n        uint256 leaveFixed\\r\\n    ) external onlyOwner {\\r\\n        require((limit * leavePercentage) / 10000 <= leaveFixed, \\\"E15\\\");\\r\\n\\r\\n        leaveTokenPolicy.limit = limit;\\r\\n        leaveTokenPolicy.leavePercentage = leavePercentage;\\r\\n        leaveTokenPolicy.leaveFixed = leaveFixed;\\r\\n\\r\\n        emit SetLeaveTokenPolicy(limit, leavePercentage, leaveFixed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set OracleDeviationLimit\\r\\n     * @param _oracleDeviationLimit Oracle Diviation per seccond limit\\r\\n     */\\r\\n    function setOracleDeviationLimit(uint256 _oracleDeviationLimit)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        oracleDeviationLimit = _oracleDeviationLimit;\\r\\n\\r\\n        emit SetOracleDeviationLimit(_oracleDeviationLimit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Force update token's recent latestAnswer\\r\\n     * @param token address of token\\r\\n     * @param latestAnswer new latestAnswer\\r\\n     */\\r\\n    function setOracleLatestAnswer(address token, int256 latestAnswer)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        OracleLatestAnswerInfo\\r\\n            storage _oracleLatestAnswerInfo = oracleLatestAnswerInfo[token];\\r\\n\\r\\n        _oracleLatestAnswerInfo.latestAnswer = latestAnswer;\\r\\n        _oracleLatestAnswerInfo.timestamp = block.timestamp;\\r\\n\\r\\n        emit SetOracleLatestAnswer(token, latestAnswer, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /*** User functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit amount of token for msg.sender\\r\\n     * @param amount amount of token\\r\\n     * @param token address of token\\r\\n     */\\r\\n    function deposit(uint256 amount, address token)\\r\\n        external\\r\\n        payable\\r\\n        onlyUsedToken(token)\\r\\n        whenNotPaused\\r\\n    {\\r\\n        _depositInternal(amount, token, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit amount of token on behalf of depositor wallet\\r\\n     * @param amount amount of token\\r\\n     * @param token address of token\\r\\n     * @param accountAddress Address of depositor\\r\\n     */\\r\\n    function depositOnBehalf(\\r\\n        uint256 amount,\\r\\n        address token,\\r\\n        address accountAddress\\r\\n    ) external payable onlyUsedToken(token) whenNotPaused {\\r\\n        require(accountAddress != ZERO_ADDRESS, \\\"E16\\\");\\r\\n        _depositInternal(amount, token, accountAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw amount of token  from Strategy and receiving earned tokens.\\r\\n     * @param amount Amount of token\\r\\n     * @param token Address of token\\r\\n     */\\r\\n    function withdraw(uint256 amount, address token)\\r\\n        external\\r\\n        onlyUsedToken(token)\\r\\n        whenNotPaused\\r\\n    {\\r\\n        uint8 decimals = _getTokenDecimals(token);\\r\\n\\r\\n        uint256 countEarns_ = countEarns;\\r\\n        uint256 amountExp18 = amount * 10**(18 - decimals);\\r\\n        bool isEnoughBalance = false;\\r\\n        uint256 requireReturnAmount;\\r\\n        DepositStruct storage depositor = deposits[msg.sender];\\r\\n\\r\\n        require(depositor.amount[token] >= amountExp18 && amount > 0, \\\"E4\\\");\\r\\n\\r\\n        interestFee(msg.sender);\\r\\n        if (amountExp18 <= tokenBalance[token]) {\\r\\n            isEnoughBalance = true;\\r\\n            tokenBalance[token] -= amountExp18;\\r\\n        } else {\\r\\n            requireReturnAmount =\\r\\n                amount -\\r\\n                (tokenBalance[token] / (10**(18 - decimals)));\\r\\n\\r\\n            tokenBalance[token] = 0;\\r\\n        }\\r\\n        tokenTime[token] -= (block.timestamp * (amountExp18)).toInt256();\\r\\n        tokenDeposited[token] -= amountExp18;\\r\\n\\r\\n        // Boosting 2.0\\r\\n        if (depositor.depositIterate[token] == countEarns_) {\\r\\n            depositor.tokenTime[token] -= (block.timestamp * (amountExp18))\\r\\n                .toInt256();\\r\\n        } else {\\r\\n            depositor.tokenTime[token] =\\r\\n                (depositor.amount[token] * earnBLID[countEarns_ - 1].timestamp)\\r\\n                    .toInt256() -\\r\\n                (block.timestamp * (amountExp18)).toInt256();\\r\\n            depositor.depositIterate[token] = countEarns_;\\r\\n        }\\r\\n        depositor.amount[token] -= amountExp18;\\r\\n\\r\\n        // Claim BoostingRewardBLID\\r\\n        _claimBoostingRewardBLIDInternal(msg.sender, true);\\r\\n\\r\\n        // Interaction\\r\\n        if (isEnoughBalance) {\\r\\n            if (token == ZERO_ADDRESS) {\\r\\n                _send(payable(msg.sender), amount);\\r\\n            } else {\\r\\n                IERC20Upgradeable(token).safeTransfer(msg.sender, amount);\\r\\n            }\\r\\n\\r\\n            // Calculate requiredLeave and set available for strategy\\r\\n            uint256 requiredLeaveOld = _calcRequiredTokenLeave(\\r\\n                token,\\r\\n                tokenDeposited[token] + amountExp18\\r\\n            );\\r\\n            uint256 requiredLeaveNow = _calcRequiredTokenLeave(\\r\\n                token,\\r\\n                tokenDeposited[token]\\r\\n            );\\r\\n\\r\\n            if (requiredLeaveNow > (tokenBalance[token])) {\\r\\n                // If withdraw can't reach to requiredLeave, make Avaliable to be zero\\r\\n                IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                    0,\\r\\n                    token,\\r\\n                    2\\r\\n                );\\r\\n            } else {\\r\\n                // if withdraw can reach to requiredLeave\\r\\n                if (requiredLeaveOld <= requiredLeaveNow + amountExp18) {\\r\\n                    // In normal case, amount will be decreased the gap between old/new requiredLeave\\r\\n                    IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                        amount -\\r\\n                            (requiredLeaveOld - requiredLeaveNow) /\\r\\n                            10**(18 - decimals),\\r\\n                        token,\\r\\n                        0\\r\\n                    );\\r\\n                } else {\\r\\n                    // If requiredLeave is decreased too much, available will be increased\\r\\n                    IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                        (requiredLeaveOld - requiredLeaveNow) /\\r\\n                            10**(18 - decimals) -\\r\\n                            amount,\\r\\n                        token,\\r\\n                        1\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            IMultiLogicProxy(logicContract).releaseToken(\\r\\n                requireReturnAmount,\\r\\n                token\\r\\n            );\\r\\n\\r\\n            if (token == ZERO_ADDRESS) {\\r\\n                require(address(this).balance >= amount, \\\"E9\\\");\\r\\n                _send(payable(msg.sender), amount);\\r\\n            } else {\\r\\n                IERC20Upgradeable(token).safeTransferFrom(\\r\\n                    logicContract,\\r\\n                    address(this),\\r\\n                    requireReturnAmount\\r\\n                );\\r\\n                IERC20Upgradeable(token).safeTransfer(msg.sender, amount);\\r\\n            }\\r\\n\\r\\n            // Because balance = 0, set Available to be 0\\r\\n            IMultiLogicProxy(logicContract).setLogicTokenAvailable(0, token, 2);\\r\\n        }\\r\\n\\r\\n        emit UpdateTokenBalance(tokenBalance[token], token);\\r\\n        emit Withdraw(msg.sender, token, amountExp18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim BLID to accountAddress\\r\\n     * @param accountAddress account address for claim\\r\\n     */\\r\\n    function interestFee(address accountAddress) public {\\r\\n        require(accountAddress != ZERO_ADDRESS, \\\"E16\\\");\\r\\n\\r\\n        uint256 balanceUser = balanceEarnBLID(accountAddress);\\r\\n        require(reserveBLID >= balanceUser, \\\"E5\\\");\\r\\n        DepositStruct storage depositor = deposits[accountAddress];\\r\\n        depositor.iterate = countEarns;\\r\\n\\r\\n        if (balanceUser > 0) {\\r\\n            //unchecked is used because a check was made in require\\r\\n            unchecked {\\r\\n                reserveBLID -= balanceUser;\\r\\n                depositor.balanceBLID = 0;\\r\\n            }\\r\\n\\r\\n            // Interaction\\r\\n            IERC20Upgradeable(BLID).safeTransfer(accountAddress, balanceUser);\\r\\n\\r\\n            emit UpdateBLIDBalance(reserveBLID);\\r\\n            emit InterestFee(accountAddress, balanceUser);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** Boosting User function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit BLID token for boosting.\\r\\n     * @param amount amount of token\\r\\n     */\\r\\n    function depositBLID(uint256 amount) external whenNotPaused {\\r\\n        require(amount > 0, \\\"E3\\\");\\r\\n        uint256 usdDepositAmount = balanceOf(msg.sender);\\r\\n        require(usdDepositAmount > 0, \\\"E11\\\");\\r\\n\\r\\n        // Claim\\r\\n        _claimBoostingRewardBLIDInternal(msg.sender, false);\\r\\n\\r\\n        // Update userBoost\\r\\n        _boostingAdjustAmount(usdDepositAmount, msg.sender, amount, true);\\r\\n\\r\\n        // Interaction\\r\\n        IERC20Upgradeable(BLID).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        emit DepositBLID(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice WithDraw BLID token for boosting.\\r\\n     * @param amount amount of token\\r\\n     */\\r\\n    function withdrawBLID(uint256 amount) external whenNotPaused {\\r\\n        require(amount > 0, \\\"E3\\\");\\r\\n        BoostInfo storage userBoost = userBoosts[msg.sender];\\r\\n        uint256 usdDepositAmount = balanceOf(msg.sender);\\r\\n        require(\\r\\n            amount <= userBoost.blidDeposit + userBoost.blidOverDeposit,\\r\\n            \\\"E12\\\"\\r\\n        );\\r\\n\\r\\n        // Claim\\r\\n        _claimBoostingRewardBLIDInternal(msg.sender, false);\\r\\n\\r\\n        // Adjust userBoost\\r\\n        _boostingAdjustAmount(usdDepositAmount, msg.sender, amount, false);\\r\\n\\r\\n        // Interaction\\r\\n        IERC20Upgradeable(BLID).safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit WithdrawBLID(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim Boosting Reward BLID to msg.sender\\r\\n     */\\r\\n    function claimBoostingRewardBLID() external {\\r\\n        _claimBoostingRewardBLIDInternal(msg.sender, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get deposited Boosting BLID amount of user\\r\\n     * @param _user address of user\\r\\n     */\\r\\n    function getBoostingBLIDAmount(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        BoostInfo storage userBoost = userBoosts[_user];\\r\\n        uint256 amount = userBoost.blidDeposit + userBoost.blidOverDeposit;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /*** MultiLogicProxy function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer amount of token from Storage to Logic Contract.\\r\\n     * @param amount Amount of token\\r\\n     * @param token Address of token\\r\\n     */\\r\\n    function takeToken(uint256 amount, address token)\\r\\n        external\\r\\n        onlyMultiLogicProxy\\r\\n        onlyUsedToken(token)\\r\\n    {\\r\\n        uint8 decimals = _getTokenDecimals(token);\\r\\n\\r\\n        uint256 amountExp18 = amount * 10**(18 - decimals);\\r\\n\\r\\n        require(tokenBalance[token] >= amountExp18, \\\"E18\\\");\\r\\n        tokenBalance[token] = tokenBalance[token] - amountExp18;\\r\\n\\r\\n        // Interaction\\r\\n        if (token == ZERO_ADDRESS) {\\r\\n            _send(payable(msg.sender), amount);\\r\\n        } else {\\r\\n            IERC20Upgradeable(token).safeTransfer(msg.sender, amount);\\r\\n        }\\r\\n\\r\\n        emit UpdateTokenBalance(tokenBalance[token], token);\\r\\n        emit TakeToken(token, amountExp18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer amount of token from Logic to Storage Contract.\\r\\n     * @param amount Amount of token\\r\\n     * @param token Address of token\\r\\n     */\\r\\n    function returnToken(uint256 amount, address token)\\r\\n        external\\r\\n        onlyMultiLogicProxy\\r\\n        onlyUsedToken(token)\\r\\n    {\\r\\n        uint8 decimals = _getTokenDecimals(token);\\r\\n\\r\\n        uint256 amountExp18 = amount * 10**(18 - decimals);\\r\\n        tokenBalance[token] = tokenBalance[token] + amountExp18;\\r\\n\\r\\n        // Interaction\\r\\n        if (token != ZERO_ADDRESS) {\\r\\n            IERC20Upgradeable(token).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit UpdateTokenBalance(tokenBalance[token], token);\\r\\n        emit ReturnToken(token, amountExp18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all BLID(from strategy and boost) for user\\r\\n     */\\r\\n    function claimAllRewardBLID() external {\\r\\n        interestFee(msg.sender);\\r\\n        _claimBoostingRewardBLIDInternal(msg.sender, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Take amount BLID from Logic contract  and distributes earned BLID\\r\\n     * @param amount Amount of distributes earned BLID\\r\\n     */\\r\\n    function addEarn(uint256 amount) external onlyMultiLogicProxy {\\r\\n        reserveBLID += amount;\\r\\n        int256 _dollarTime = 0;\\r\\n        uint256 countTokens_ = countTokens;\\r\\n        uint256 countEarns_ = countEarns;\\r\\n        EarnBLID storage thisEarnBLID = earnBLID[countEarns_];\\r\\n        for (uint256 i = 0; i < countTokens_; ) {\\r\\n            address token = tokens[i];\\r\\n            AggregatorV3Interface oracle = AggregatorV3Interface(\\r\\n                oracles[token]\\r\\n            );\\r\\n            (, int256 latestAnswer, , , ) = oracle.latestRoundData();\\r\\n\\r\\n            // Oracle Kill Switch\\r\\n            OracleLatestAnswerInfo\\r\\n                storage _oracleLatestAnswerInfo = oracleLatestAnswerInfo[token];\\r\\n\\r\\n            // Calculate deviation percentage per second\\r\\n            int256 delta = _oracleLatestAnswerInfo.latestAnswer - latestAnswer;\\r\\n            int256 deltaTime = (block.timestamp -\\r\\n                _oracleLatestAnswerInfo.timestamp).toInt256();\\r\\n            if (delta < 0) delta = 0 - delta;\\r\\n\\r\\n            if (deltaTime == 0 || _oracleLatestAnswerInfo.latestAnswer == 0) {\\r\\n                delta = 0;\\r\\n            } else {\\r\\n                delta =\\r\\n                    (delta * (1 ether)) /\\r\\n                    _oracleLatestAnswerInfo.latestAnswer;\\r\\n            }\\r\\n            if (\\r\\n                deltaTime > 1200 ||\\r\\n                uint256(delta) >= (oracleDeviationLimit * 1200)\\r\\n            ) {\\r\\n                require(\\r\\n                    uint256(delta / deltaTime) <= oracleDeviationLimit,\\r\\n                    \\\"E19\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // Save latestAnswer\\r\\n            _oracleLatestAnswerInfo.latestAnswer = latestAnswer;\\r\\n            _oracleLatestAnswerInfo.timestamp = block.timestamp;\\r\\n\\r\\n            thisEarnBLID.rates[token] = (uint256(latestAnswer) *\\r\\n                10**(18 - oracle.decimals()));\\r\\n\\r\\n            // count all deposited token in usd\\r\\n            thisEarnBLID.usd +=\\r\\n                tokenDeposited[token] *\\r\\n                thisEarnBLID.rates[token];\\r\\n\\r\\n            // convert token time to dollar time\\r\\n            _dollarTime +=\\r\\n                tokenTime[token] *\\r\\n                thisEarnBLID.rates[token].toInt256();\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(_dollarTime != 0, \\\"E16\\\");\\r\\n        thisEarnBLID.allBLID = amount;\\r\\n        thisEarnBLID.timestamp = block.timestamp;\\r\\n        thisEarnBLID.tdt = uint256(\\r\\n            ((block.timestamp * thisEarnBLID.usd).toInt256() - _dollarTime) /\\r\\n                (1 ether)\\r\\n        ); // count delta of current token time and all user token time\\r\\n\\r\\n        for (uint256 i = 0; i < countTokens_; ) {\\r\\n            address token = tokens[i];\\r\\n            tokenTime[token] = (tokenDeposited[token] * block.timestamp)\\r\\n                .toInt256(); // count curent token time\\r\\n            _updateAccumulatedRewardsPerShareById(token, countEarns_);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        thisEarnBLID.usd /= (1 ether);\\r\\n        countEarns++;\\r\\n\\r\\n        // Interaction\\r\\n        IERC20Upgradeable(BLID).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        emit AddEarn(amount);\\r\\n        emit UpdateBLIDBalance(reserveBLID);\\r\\n    }\\r\\n\\r\\n    /*** External function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Counts the number of accrued \u0421SR\\r\\n     * @param account Address of Depositor\\r\\n     */\\r\\n    function _upBalance(address account) external {\\r\\n        DepositStruct storage depositor = deposits[account];\\r\\n\\r\\n        depositor.balanceBLID = balanceEarnBLID(account);\\r\\n        depositor.iterate = countEarns;\\r\\n    }\\r\\n\\r\\n    /***  Public View function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Return earned blid\\r\\n     * @param account Address of Depositor\\r\\n     */\\r\\n    function balanceEarnBLID(address account) public view returns (uint256) {\\r\\n        DepositStruct storage depositor = deposits[account];\\r\\n        if (depositor.tokenTime[ONE_ADDRESS] == 0 || countEarns == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (countEarns == depositor.iterate) return depositor.balanceBLID;\\r\\n\\r\\n        uint256 countTokens_ = countTokens;\\r\\n        uint256 sum = 0;\\r\\n        uint256 depositorIterate = depositor.iterate;\\r\\n        for (uint256 j = 0; j < countTokens_; ) {\\r\\n            address token = tokens[j];\\r\\n            //if iterate when user deposited\\r\\n            if (depositorIterate == depositor.depositIterate[token]) {\\r\\n                sum += _getEarnedInOneDepositedIterate(\\r\\n                    depositorIterate,\\r\\n                    token,\\r\\n                    account\\r\\n                );\\r\\n                sum += _getEarnedInOneNotDepositedIterate(\\r\\n                    depositorIterate,\\r\\n                    token,\\r\\n                    account\\r\\n                );\\r\\n            } else {\\r\\n                sum += _getEarnedInOneNotDepositedIterate(\\r\\n                    depositorIterate - 1,\\r\\n                    token,\\r\\n                    account\\r\\n                );\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++j;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sum + depositor.balanceBLID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return usd balance of account\\r\\n     * @param account Address of Depositor\\r\\n     */\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        uint256 countTokens_ = countTokens;\\r\\n        uint256 sum = 0;\\r\\n        for (uint256 j = 0; j < countTokens_; ) {\\r\\n            address token = tokens[j];\\r\\n            sum += _calcUSDPrice(token, deposits[account].amount[token]);\\r\\n\\r\\n            unchecked {\\r\\n                ++j;\\r\\n            }\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return sums of all distribution BLID.\\r\\n     */\\r\\n    function getBLIDReserve() external view returns (uint256) {\\r\\n        return reserveBLID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return deposited usd\\r\\n     */\\r\\n    function getTotalDeposit() external view returns (uint256) {\\r\\n        uint256 countTokens_ = countTokens;\\r\\n        uint256 sum = 0;\\r\\n        for (uint256 j = 0; j < countTokens_; ) {\\r\\n            address token = tokens[j];\\r\\n            sum += _calcUSDPrice(token, tokenDeposited[token]);\\r\\n\\r\\n            unchecked {\\r\\n                ++j;\\r\\n            }\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the balance of token on this contract\\r\\n     */\\r\\n    function getTokenBalance(address token) external view returns (uint256) {\\r\\n        return tokenBalance[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return deposited token from account\\r\\n     */\\r\\n    function getTokenDeposit(address account, address token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return deposits[account].amount[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return true if _token  is in token list\\r\\n     * @param _token Address of Token\\r\\n     */\\r\\n    function _isUsedToken(address _token) external view returns (bool) {\\r\\n        return tokensAdd[_token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return true if _token  is in activated\\r\\n     * @param _token Address of Token\\r\\n     */\\r\\n    function isActivatedToken(address _token) external view returns (bool) {\\r\\n        return (tokensAdd[_token] && tokensActivate[_token]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return count distribution BLID token.\\r\\n     */\\r\\n    function getCountEarns() external view returns (uint256) {\\r\\n        return countEarns;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return data on distribution BLID token.\\r\\n     * First return value is amount of distribution BLID token.\\r\\n     * Second return value is a timestamp when  distribution BLID token completed.\\r\\n     * Third return value is an amount of dollar depositedhen  distribution BLID token completed.\\r\\n     */\\r\\n    function getEarnsByID(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (earnBLID[id].allBLID, earnBLID[id].timestamp, earnBLID[id].usd);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return amount of all deposited token\\r\\n     * @param token Address of Token\\r\\n     */\\r\\n    function getTokenDeposited(address token) external view returns (uint256) {\\r\\n        return tokenDeposited[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all added tokens\\r\\n     */\\r\\n    function getUsedTokens() external view returns (address[] memory) {\\r\\n        uint256 countTokens_ = countTokens;\\r\\n        address[] memory ret = new address[](countTokens_);\\r\\n        for (uint256 i = 0; i < countTokens_; ) {\\r\\n            ret[i] = tokens[i];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get LeaveTokenPolicy\\r\\n     */\\r\\n    function getLeaveTokenPolicy()\\r\\n        external\\r\\n        view\\r\\n        returns (LeaveTokenPolicy memory)\\r\\n    {\\r\\n        return leaveTokenPolicy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return pending BLID amount for boost to see on frontend\\r\\n     * @param _user address of user\\r\\n     */\\r\\n\\r\\n    function getBoostingClaimableBLID(address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        BoostInfo storage userBoost = userBoosts[_user];\\r\\n        uint256 _accBLIDpershare = accBlidPerShare;\\r\\n        if (block.number > lastRewardBlock) {\\r\\n            uint256 passedBlockCount = block.number - lastRewardBlock + 1; // When claim, 1 block is added because of mining\\r\\n            _accBLIDpershare =\\r\\n                accBlidPerShare +\\r\\n                (\\r\\n                    activeSupplyBLID <= maxActiveBLID\\r\\n                        ? (passedBlockCount * blidPerBlock)\\r\\n                        : ((passedBlockCount * blidPerBlock * maxActiveBLID) /\\r\\n                            activeSupplyBLID)\\r\\n                );\\r\\n        }\\r\\n        uint256 calcAmount = (userBoost.blidDeposit * _accBLIDpershare) / 1e18;\\r\\n        return\\r\\n            calcAmount > userBoost.rewardDebt\\r\\n                ? calcAmount - userBoost.rewardDebt\\r\\n                : 0;\\r\\n    }\\r\\n\\r\\n    /*** Private Function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice deposit token\\r\\n     * @param amount Amount of deposit token\\r\\n     * @param token Address of token\\r\\n     * @param accountAddress Address of depositor\\r\\n     */\\r\\n    function _depositInternal(\\r\\n        uint256 amount,\\r\\n        address token,\\r\\n        address accountAddress\\r\\n    ) internal {\\r\\n        require(tokensActivate[token], \\\"E14\\\");\\r\\n        require(amount > 0, \\\"E3\\\");\\r\\n        require(token != ZERO_ADDRESS || msg.value >= amount, \\\"E9\\\");\\r\\n\\r\\n        uint256 countEarns_ = countEarns;\\r\\n        uint8 decimals = _getTokenDecimals(token);\\r\\n\\r\\n        // Boosting 2.0\\r\\n        DepositStruct storage depositor = deposits[accountAddress];\\r\\n\\r\\n        uint256 amountExp18 = amount * 10**(18 - decimals);\\r\\n        if (depositor.tokenTime[ONE_ADDRESS] == 0) {\\r\\n            depositor.iterate = countEarns_;\\r\\n            depositor.depositIterate[token] = countEarns_;\\r\\n            depositor.tokenTime[ONE_ADDRESS] = 1;\\r\\n            depositor.tokenTime[token] += (block.timestamp * (amountExp18))\\r\\n                .toInt256();\\r\\n        } else {\\r\\n            interestFee(accountAddress);\\r\\n            if (depositor.depositIterate[token] == countEarns_) {\\r\\n                depositor.tokenTime[token] += (block.timestamp * (amountExp18))\\r\\n                    .toInt256();\\r\\n            } else {\\r\\n                depositor.tokenTime[token] = (depositor.amount[token] *\\r\\n                    earnBLID[countEarns_ - 1].timestamp +\\r\\n                    block.timestamp *\\r\\n                    (amountExp18)).toInt256();\\r\\n\\r\\n                depositor.depositIterate[token] = countEarns_;\\r\\n            }\\r\\n        }\\r\\n        depositor.amount[token] += amountExp18;\\r\\n\\r\\n        uint256 tokenBalanceOld = tokenBalance[token];\\r\\n        uint256 tokenDepositedOld = tokenDeposited[token];\\r\\n\\r\\n        // Update balance, deposited\\r\\n        tokenTime[token] += (block.timestamp * (amountExp18)).toInt256();\\r\\n        tokenBalance[token] += amountExp18;\\r\\n        tokenDeposited[token] += amountExp18;\\r\\n\\r\\n        // Claim BoostingRewardBLID\\r\\n        _claimBoostingRewardBLIDInternal(accountAddress, true);\\r\\n\\r\\n        // Calculate requiredLeave and set available for strategy\\r\\n        uint256 requiredLeaveOld = _calcRequiredTokenLeave(\\r\\n            token,\\r\\n            tokenDepositedOld\\r\\n        );\\r\\n\\r\\n        uint256 requiredLeaveNow = _calcRequiredTokenLeave(\\r\\n            token,\\r\\n            tokenDepositedOld + amountExp18\\r\\n        );\\r\\n\\r\\n        if (requiredLeaveNow > (tokenBalanceOld + amountExp18)) {\\r\\n            // If deposit can't reach to requiredLeave, make Avaliable to be zero\\r\\n            IMultiLogicProxy(logicContract).setLogicTokenAvailable(0, token, 2);\\r\\n        } else {\\r\\n            // if deposit can to reach requiredLeave\\r\\n            if (tokenBalanceOld >= requiredLeaveOld) {\\r\\n                // If the previous balance is more then requiredLeave, amount will be decreased the gap between old/new requiredLeave\\r\\n                if (amountExp18 >= (requiredLeaveNow - requiredLeaveOld)) {\\r\\n                    IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                        amount -\\r\\n                            (requiredLeaveNow - requiredLeaveOld) /\\r\\n                            10**(18 - decimals),\\r\\n                        token,\\r\\n                        1\\r\\n                    );\\r\\n                } else {\\r\\n                    IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                        (requiredLeaveNow - requiredLeaveOld) /\\r\\n                            10**(18 - decimals) -\\r\\n                            amount,\\r\\n                        token,\\r\\n                        0\\r\\n                    );\\r\\n                }\\r\\n            } else {\\r\\n                // If the preivous balance is less than requiredLeave, amount will be decreased to reach to requiredLeaveNew\\r\\n                if (amountExp18 >= (requiredLeaveNow - tokenBalanceOld)) {\\r\\n                    IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                        amount -\\r\\n                            (requiredLeaveNow - tokenBalanceOld) /\\r\\n                            10**(18 - decimals),\\r\\n                        token,\\r\\n                        1\\r\\n                    );\\r\\n                } else {\\r\\n                    IMultiLogicProxy(logicContract).setLogicTokenAvailable(\\r\\n                        (requiredLeaveNow - tokenBalanceOld) /\\r\\n                            10**(18 - decimals) -\\r\\n                            amount,\\r\\n                        token,\\r\\n                        0\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Interaction\\r\\n        if (token != ZERO_ADDRESS) {\\r\\n            IERC20Upgradeable(token).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit UpdateTokenBalance(tokenBalance[token], token);\\r\\n        emit Deposit(accountAddress, token, amountExp18);\\r\\n    }\\r\\n\\r\\n    // Safe blid transfer function, just in case if rounding error causes pool to not have enough BLIDs.\\r\\n    function _safeBlidTransfer(address _to, uint256 _amount) internal {\\r\\n        IERC20Upgradeable(BLID).safeTransferFrom(boostingAddress, _to, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Count accumulatedRewardsPerShare\\r\\n     * @param token Address of Token\\r\\n     * @param id of accumulatedRewardsPerShare\\r\\n     */\\r\\n    function _updateAccumulatedRewardsPerShareById(address token, uint256 id)\\r\\n        private\\r\\n    {\\r\\n        EarnBLID storage thisEarnBLID = earnBLID[id];\\r\\n\\r\\n        if (id == 0) {\\r\\n            accumulatedRewardsPerShare[token][id] = 0;\\r\\n        } else {\\r\\n            //unchecked is used because if id > 0\\r\\n            unchecked {\\r\\n                accumulatedRewardsPerShare[token][id] =\\r\\n                    accumulatedRewardsPerShare[token][id - 1] +\\r\\n                    ((thisEarnBLID.allBLID *\\r\\n                        (thisEarnBLID.timestamp - earnBLID[id - 1].timestamp) *\\r\\n                        thisEarnBLID.rates[token]) / thisEarnBLID.tdt);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Count user rewards in one iterate, when he  deposited\\r\\n     * @param token Address of Token\\r\\n     * @param depositIterate iterate when deposit happened\\r\\n     * @param account Address of Depositor\\r\\n     */\\r\\n    function _getEarnedInOneDepositedIterate(\\r\\n        uint256 depositIterate,\\r\\n        address token,\\r\\n        address account\\r\\n    ) private view returns (uint256) {\\r\\n        EarnBLID storage thisEarnBLID = earnBLID[depositIterate];\\r\\n        DepositStruct storage thisDepositor = deposits[account];\\r\\n        return\\r\\n            (// all distibution BLID multiply to\\r\\n            thisEarnBLID.allBLID *\\r\\n                // delta of  user dollar time and user dollar time if user deposited in at the beginning distibution\\r\\n                uint256(\\r\\n                    (thisDepositor.amount[token] *\\r\\n                        thisEarnBLID.rates[token] *\\r\\n                        thisEarnBLID.timestamp).toInt256() -\\r\\n                        thisDepositor.tokenTime[token] *\\r\\n                        thisEarnBLID.rates[token].toInt256()\\r\\n                )) /\\r\\n            //div to delta of all users dollar time and all users dollar time if all users deposited in at the beginning distibution\\r\\n            thisEarnBLID.tdt /\\r\\n            (1 ether);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim Boosting Reward BLID to msg.sender\\r\\n     * @param userAccount address of account\\r\\n     * @param isAdjust true : adjust userBoost.blidDeposit, false : not update userBoost.blidDeposit\\r\\n     */\\r\\n    function _claimBoostingRewardBLIDInternal(\\r\\n        address userAccount,\\r\\n        bool isAdjust\\r\\n    ) private {\\r\\n        _boostingUpdateAccBlidPerShare();\\r\\n        BoostInfo storage userBoost = userBoosts[userAccount];\\r\\n        uint256 calcAmount;\\r\\n        bool transferAllowed = false;\\r\\n\\r\\n        if (userBoost.blidDeposit > 0) {\\r\\n            calcAmount = (userBoost.blidDeposit * accBlidPerShare) / 1e18;\\r\\n            if (calcAmount > userBoost.rewardDebt) {\\r\\n                calcAmount -= userBoost.rewardDebt;\\r\\n                transferAllowed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Adjust userBoost\\r\\n        if (isAdjust) {\\r\\n            uint256 usdDepositAmount = balanceOf(msg.sender);\\r\\n            _boostingAdjustAmount(usdDepositAmount, userAccount, 0, true);\\r\\n        }\\r\\n\\r\\n        // Interaction\\r\\n        if (transferAllowed) {\\r\\n            _safeBlidTransfer(userAccount, calcAmount);\\r\\n            emit ClaimBoostBLID(userAccount, calcAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update Accumulated BLID per share\\r\\n     */\\r\\n    function _boostingUpdateAccBlidPerShare() internal {\\r\\n        if (block.number <= lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 passedBlockCount = block.number - lastRewardBlock;\\r\\n        accBlidPerShare =\\r\\n            accBlidPerShare +\\r\\n            (\\r\\n                activeSupplyBLID <= maxActiveBLID\\r\\n                    ? (passedBlockCount * blidPerBlock)\\r\\n                    : ((passedBlockCount * blidPerBlock * maxActiveBLID) /\\r\\n                        activeSupplyBLID)\\r\\n            );\\r\\n        lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adjust depositBLID, depositOverBlid, totalSupplyBLID, totalActiveBLID\\r\\n     * @param usdDepositAmount deposit total for user in USD\\r\\n     * @param accountAddress address of user\\r\\n     * @param amount new amount\\r\\n     * @param flag true : deposit, false : withdraw\\r\\n     */\\r\\n    function _boostingAdjustAmount(\\r\\n        uint256 usdDepositAmount,\\r\\n        address accountAddress,\\r\\n        uint256 amount,\\r\\n        bool flag\\r\\n    ) internal {\\r\\n        BoostInfo storage userBoost = userBoosts[accountAddress];\\r\\n        uint256 oldBlidDeposit = userBoost.blidDeposit;\\r\\n        uint256 blidDepositLimit = (usdDepositAmount * maxBlidPerUSD) / 1e18;\\r\\n        uint256 totalAmount = oldBlidDeposit + userBoost.blidOverDeposit;\\r\\n\\r\\n        // Update totalSupply,\\r\\n        if (flag && amount != 0) {\\r\\n            totalAmount += amount;\\r\\n            totalSupplyBLID += amount;\\r\\n        } else {\\r\\n            totalAmount -= amount;\\r\\n            totalSupplyBLID -= amount;\\r\\n        }\\r\\n\\r\\n        // Adjust blidOvereDeposit\\r\\n        if (totalAmount > blidDepositLimit) {\\r\\n            userBoost.blidDeposit = blidDepositLimit;\\r\\n            userBoost.blidOverDeposit = totalAmount - blidDepositLimit;\\r\\n        } else {\\r\\n            userBoost.blidDeposit = totalAmount;\\r\\n            userBoost.blidOverDeposit = 0;\\r\\n        }\\r\\n\\r\\n        // Update activeSupply\\r\\n        activeSupplyBLID =\\r\\n            activeSupplyBLID +\\r\\n            userBoost.blidDeposit -\\r\\n            oldBlidDeposit;\\r\\n\\r\\n        // Save rewardDebt\\r\\n        userBoost.rewardDebt = (userBoost.blidDeposit * accBlidPerShare) / 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send ETH to address\\r\\n     * @param _to target address to receive ETH\\r\\n     * @param amount ETH amount (wei) to be sent\\r\\n     */\\r\\n    function _send(address payable _to, uint256 amount) private {\\r\\n        (bool sent, ) = _to.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"E10\\\");\\r\\n    }\\r\\n\\r\\n    /*** Private View Function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Count user rewards in one iterate, when he was not deposit\\r\\n     * @param token Address of Token\\r\\n     * @param depositIterate iterate when deposit happened\\r\\n     * @param account Address of Depositor\\r\\n     */\\r\\n    function _getEarnedInOneNotDepositedIterate(\\r\\n        uint256 depositIterate,\\r\\n        address token,\\r\\n        address account\\r\\n    ) private view returns (uint256) {\\r\\n        mapping(uint256 => uint256)\\r\\n            storage accumulatedRewardsPerShareForToken = accumulatedRewardsPerShare[\\r\\n                token\\r\\n            ];\\r\\n        return\\r\\n            ((accumulatedRewardsPerShareForToken[countEarns - 1] -\\r\\n                accumulatedRewardsPerShareForToken[depositIterate]) *\\r\\n                deposits[account].amount[token]) / (1 ether);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate price in USD\\r\\n     * returns USD in Exp18 format\\r\\n     * @param token Address of Token with Exp18 expression\\r\\n     * @param amountExp18 token amount with Exp18 expression\\r\\n     */\\r\\n    function _calcUSDPrice(address token, uint256 amountExp18)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        AggregatorV3Interface oracle = AggregatorV3Interface(oracles[token]);\\r\\n        (, int256 latestAnswer, , , ) = oracle.latestRoundData();\\r\\n        return ((amountExp18 *\\r\\n            uint256(latestAnswer) *\\r\\n            10**(18 - oracle.decimals())) / (1 ether));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate required leave token base on totalDeposit amount\\r\\n     * returns requiredTokenLeave balance in Exp18 expression\\r\\n     * @param token Address of Token\\r\\n     * @param depositTotalExp18 total token depositedwith Exp18 expression\\r\\n     */\\r\\n    function _calcRequiredTokenLeave(address token, uint256 depositTotalExp18)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        AggregatorV3Interface oracle = AggregatorV3Interface(oracles[token]);\\r\\n        (, int256 latestAnswer, , , ) = oracle.latestRoundData();\\r\\n        uint8 decimals = oracle.decimals();\\r\\n\\r\\n        uint256 limit = (leaveTokenPolicy.limit * 10**(decimals) * (1 ether)) /\\r\\n            uint256(latestAnswer);\\r\\n\\r\\n        // 0 - limit : return leavePerentage %\\r\\n        if (depositTotalExp18 <= limit)\\r\\n            return\\r\\n                (depositTotalExp18 * leaveTokenPolicy.leavePercentage) / 10000;\\r\\n\\r\\n        // > limit : return leaveFixed\\r\\n        return\\r\\n            (leaveTokenPolicy.leaveFixed * 10**(decimals) * (1 ether)) /\\r\\n            uint256(latestAnswer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the decimals of token\\r\\n     * for address(0), it can be considered as native token, decimals = 18\\r\\n     * @param token Address of Token\\r\\n     * @param decimals count of decimals\\r\\n     */\\r\\n    function _getTokenDecimals(address token)\\r\\n        private\\r\\n        view\\r\\n        returns (uint8 decimals)\\r\\n    {\\r\\n        if (token == ZERO_ADDRESS) {\\r\\n            decimals = 18; // For BNB we fix decimals as 18 - chainlink shows 8\\r\\n        } else {\\r\\n            decimals = IERC20MetadataUpgradeable(token).decimals();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiLogicProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMultiLogicProxy {\\r\\n    function releaseToken(uint256 amount, address token) external;\\r\\n\\r\\n    function takeToken(uint256 amount, address token) external;\\r\\n\\r\\n    function addEarn(uint256 amount, address blidToken) external;\\r\\n\\r\\n    function returnToken(uint256 amount, address token) external;\\r\\n\\r\\n    function setLogicTokenAvailable(\\r\\n        uint256 amount,\\r\\n        address token,\\r\\n        uint256 deposit_withdraw\\r\\n    ) external;\\r\\n\\r\\n    function getTokenAvailable(address _token, address _logicAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getTokenTaken(address _token, address _logicAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getUsedTokensStorage() external view returns (address[] memory);\\r\\n\\r\\n    function multiStrategyLength() external view returns (uint256);\\r\\n\\r\\n    function multiStrategyName(uint256) external view returns (string memory);\\r\\n\\r\\n    function strategyInfo(string memory)\\r\\n        external\\r\\n        view\\r\\n        returns (address, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function latestAnswer() external view returns (int256 answer);\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBoostBLID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositBLID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blid\",\"type\":\"address\"}],\"name\":\"SetBLID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"name\":\"SetBoostingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBlidPerUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blidPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxActiveBLID\",\"type\":\"uint256\"}],\"name\":\"SetBoostingInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leavePerentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaveFixed\",\"type\":\"uint256\"}],\"name\":\"SetLeaveTokenPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multiLogicProxy\",\"type\":\"address\"}],\"name\":\"SetMultiLogicProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setOracleDeviationLimit\",\"type\":\"uint256\"}],\"name\":\"SetOracleDeviationLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"latestAnswer\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetOracleLatestAnswer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"UpdateBLIDBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdateTokenBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"UpgradeVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBLID\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"_isUsedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_upBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBlidPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accumulatedRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSupplyBLID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addEarn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracles\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceEarnBLID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blidPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewardBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBoostingRewardBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"depositOnBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLIDReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBoostingBLIDAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBoostingClaimableBLID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCountEarns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getEarnsByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaveTokenPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leavePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leaveFixed\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageV3.LeaveTokenPolicy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurpose\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"interestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isActivatedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxActiveBLID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBlidPerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDeviationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"returnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blid\",\"type\":\"address\"}],\"name\":\"setBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boostingAddress\",\"type\":\"address\"}],\"name\":\"setBoostingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBlidperUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blidperBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxActiveBLID\",\"type\":\"uint256\"}],\"name\":\"setBoostingInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leavePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leaveFixed\",\"type\":\"uint256\"}],\"name\":\"setLeaveTokenPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiLogicProxy\",\"type\":\"address\"}],\"name\":\"setMultiLogicProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleDeviationLimit\",\"type\":\"uint256\"}],\"name\":\"setOracleDeviationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"latestAnswer\",\"type\":\"int256\"}],\"name\":\"setOracleLatestAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenActivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyBLID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"upgradeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StorageV3", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}