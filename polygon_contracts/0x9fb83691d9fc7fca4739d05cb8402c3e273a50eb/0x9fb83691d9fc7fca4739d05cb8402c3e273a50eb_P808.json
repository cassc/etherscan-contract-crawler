{"SourceCode": "/**\r\nNew808token ERC20 contract\r\nName          : New808token\r\nSymbol        : P808\r\nDecimals      : 8\r\nBlockchain    : Polygon\r\nOwner Account : 0x9BDD969B35b0BA80014A9Ba771a3842883Eac1bA\r\n(c) by Didar Metu  2022. MIT Licence.\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IAccessControl {\r\n\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n    mapping(bytes32 => RoleData) private _roles;\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n        _revokeRole(role, account);\r\n    }\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 8;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// contract-P808\r\npragma solidity ^0.8.2;\r\ncontract P808 is ERC20, AccessControl, ERC721Holder {\r\n    bytes32 public constant CONTRACT_ADMIN_ROLE = keccak256(\"CONTRACT_ADMIN_ROLE\");\r\n    address public owner;\r\n    bool public paused = false;\r\n    uint256 public maxSupply = 21000000 * 10 ** 8;\r\n    address public collectionAddressC1;\r\n    address public collectionAddressC2;\r\n    address public collectionAddressC3;\r\n\r\n    uint256 public numberOfBlocksPerRewardUnitC1;\r\n    uint256 public numberOfBlocksPerRewardUnitC2;\r\n    uint256 public numberOfBlocksPerRewardUnitC3;\r\n\r\n    uint256 public coinAmountPerRewardUnitC1;\r\n    uint256 public coinAmountPerRewardUnitC2;\r\n    uint256 public coinAmountPerRewardUnitC3;\r\n\r\n    uint256 public amountOfStakersC1;\r\n    uint256 public amountOfStakersC2;\r\n    uint256 public amountOfStakersC3;\r\n\r\n    uint256 public tokensStakedC1;\r\n    uint256 public tokensStakedC2;\r\n    uint256 public tokensStakedC3;\r\n\r\n    uint256 public stakingStartBlockC1;\r\n    uint256 public stakingStartBlockC2;\r\n    uint256 public stakingStartBlockC3;\r\n\r\n    struct StakeInfoC1 {\r\n        uint256 stakedAtBlock;\r\n        uint256 lastHarvestBlock;\r\n        bool currentlyStaked;\r\n    }\r\n    struct StakeInfoC2 {\r\n        uint256 stakedAtBlock;\r\n        uint256 lastHarvestBlock;\r\n        bool currentlyStaked;\r\n    }\r\n    struct StakeInfoC3 {\r\n        uint256 stakedAtBlock;\r\n        uint256 lastHarvestBlock;\r\n        bool currentlyStaked;\r\n    }\r\n    mapping (address => mapping(uint256 => StakeInfoC1)) public stakeLogC1;\r\n    mapping (address => mapping(uint256 => StakeInfoC2)) public stakeLogC2;\r\n    mapping (address => mapping(uint256 => StakeInfoC3)) public stakeLogC3;\r\n\r\n    mapping (address => uint256) public tokensStakedByUserC1;\r\n    mapping (address => uint256) public tokensStakedByUserC2;\r\n    mapping (address => uint256) public tokensStakedByUserC3;\r\n\r\n    mapping (address => uint256[]) public stakePortfolioByUserC1;\r\n    mapping (address => uint256[]) public stakePortfolioByUserC2;\r\n    mapping (address => uint256[]) public stakePortfolioByUserC3;\r\n\r\n    mapping(uint256 => uint256) public indexOfTokenIdInStakePortfolioC1;\r\n    mapping(uint256 => uint256) public indexOfTokenIdInStakePortfolioC2;\r\n    mapping(uint256 => uint256) public indexOfTokenIdInStakePortfolioC3;\r\n\r\n    event RewardsHarvestedC1 (address owner, uint256 amount);\r\n    event RewardsHarvestedC2 (address owner, uint256 amount);\r\n    event RewardsHarvestedC3 (address owner, uint256 amount);\r\n\r\n    event NFTStakedC1 (address owner, uint256 tokenId);\r\n    event NFTStakedC2 (address owner, uint256 tokenId);\r\n    event NFTStakedC3 (address owner, uint256 tokenId);\r\n\r\n    event NFTUnstakedC1 (address owner, uint256 tokenId);\r\n    event NFTUnstakedC2 (address owner, uint256 tokenId);\r\n    event NFTUnstakedC3 (address owner, uint256 tokenId);\r\n\r\n    constructor() ERC20(\"New808token\", \"P808\")AccessControl(){\r\n        owner = 0x9BDD969B35b0BA80014A9Ba771a3842883Eac1bA;\r\n        collectionAddressC1 = 0x0000000000000000000000000000000000000000;\r\n        collectionAddressC2 = 0x0000000000000000000000000000000000000000;\r\n        collectionAddressC3 = 0x0000000000000000000000000000000000000000;\r\n        _mint(owner, 1000000 * 10 ** 8);\r\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\r\n        _setupRole(CONTRACT_ADMIN_ROLE, owner);\r\n        stakingStartBlockC1 = block.number;\r\n        stakingStartBlockC2 = block.number;\r\n        stakingStartBlockC3 = block.number;\r\n        coinAmountPerRewardUnitC1 = 5 * 10 ** 8;\r\n        coinAmountPerRewardUnitC2 = 5 * 10 ** 8;\r\n        coinAmountPerRewardUnitC3 = 5 * 10 ** 8;\r\n        numberOfBlocksPerRewardUnitC1 = 24240; //808 minutes\r\n        numberOfBlocksPerRewardUnitC2 = 24240;\r\n        numberOfBlocksPerRewardUnitC3 = 24240;\r\n    }\r\n\r\n    function stakedNFTSByUserC1(address owner) external view returns (uint256[] memory){\r\n        return stakePortfolioByUserC1[owner];\r\n    }\r\n\r\n    function stakedNFTSByUserC2(address owner) external view returns (uint256[] memory){\r\n        return stakePortfolioByUserC2[owner];\r\n    }\r\n\r\n    function stakedNFTSByUserC3(address owner) external view returns (uint256[] memory){\r\n        return stakePortfolioByUserC3[owner];\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool success) {\r\n        super._burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function pendingRewardsC1(address owner, uint256 tokenId) public view returns (uint256){\r\n        StakeInfoC1 memory infoC1 = stakeLogC1[owner][tokenId];\r\n\r\n        if(infoC1.lastHarvestBlock < stakingStartBlockC1 || infoC1.currentlyStaked == false) {\r\n            return 0;\r\n        }\r\n        uint256 blocksPassedSinceLastHarvest = block.number - infoC1.lastHarvestBlock;\r\n        if (blocksPassedSinceLastHarvest < numberOfBlocksPerRewardUnitC1 * 2) {\r\n            return 0;\r\n        }\r\n        uint256 rewardAmount = blocksPassedSinceLastHarvest / numberOfBlocksPerRewardUnitC1 - 1;\r\n        return rewardAmount * coinAmountPerRewardUnitC1;\r\n    }\r\n    function pendingRewardsC2(address owner, uint256 tokenId) public view returns (uint256){\r\n        StakeInfoC2 memory infoC2 = stakeLogC2[owner][tokenId];\r\n\r\n        if(infoC2.lastHarvestBlock < stakingStartBlockC2 || infoC2.currentlyStaked == false) {\r\n            return 0;\r\n        }\r\n        uint256 blocksPassedSinceLastHarvest = block.number - infoC2.lastHarvestBlock;\r\n        if (blocksPassedSinceLastHarvest < numberOfBlocksPerRewardUnitC2 * 2) {\r\n            return 0;\r\n        }\r\n        uint256 rewardAmount = blocksPassedSinceLastHarvest / numberOfBlocksPerRewardUnitC2 - 1;\r\n        return rewardAmount * coinAmountPerRewardUnitC2;\r\n    }\r\n    function pendingRewardsC3(address owner, uint256 tokenId) public view returns (uint256){\r\n        StakeInfoC3 memory infoC3 = stakeLogC3[owner][tokenId];\r\n\r\n        if(infoC3.lastHarvestBlock < stakingStartBlockC3 || infoC3.currentlyStaked == false) {\r\n            return 0;\r\n        }\r\n        uint256 blocksPassedSinceLastHarvest = block.number - infoC3.lastHarvestBlock;\r\n        if (blocksPassedSinceLastHarvest < numberOfBlocksPerRewardUnitC3 * 2) {\r\n            return 0;\r\n        }\r\n        uint256 rewardAmount = blocksPassedSinceLastHarvest / numberOfBlocksPerRewardUnitC3 - 1;\r\n        return rewardAmount * coinAmountPerRewardUnitC3;\r\n    }\r\n\r\n    function stakeC1(uint256 tokenId) public {\r\n        require(!paused, \"The contract is paused\");\r\n        IERC721(collectionAddressC1).safeTransferFrom(_msgSender(), address(this), tokenId);\r\n        require(IERC721(collectionAddressC1).ownerOf(tokenId) == address(this), \"Error while transferring NFT\");\r\n        StakeInfoC1 storage infoC1 = stakeLogC1[_msgSender()][tokenId];\r\n        infoC1.stakedAtBlock = block.number;\r\n        infoC1.lastHarvestBlock = block.number;\r\n        infoC1.currentlyStaked = true;\r\n        if(tokensStakedByUserC1[_msgSender()] == 0){\r\n            amountOfStakersC1 += 1;\r\n        }\r\n        tokensStakedByUserC1[_msgSender()] += 1;\r\n        tokensStakedC1 += 1;\r\n        stakePortfolioByUserC1[_msgSender()].push(tokenId);\r\n        uint256 indexOfNewElementC1 = stakePortfolioByUserC1[_msgSender()].length - 1;\r\n        indexOfTokenIdInStakePortfolioC1[tokenId] = indexOfNewElementC1;\r\n        emit NFTStakedC1(_msgSender(), tokenId);\r\n    }\r\n\r\n    function stakeC2(uint256 tokenId) public {\r\n        require(!paused, \"The contract is paused\");\r\n        IERC721(collectionAddressC2).safeTransferFrom(_msgSender(), address(this), tokenId);\r\n        require(IERC721(collectionAddressC2).ownerOf(tokenId) == address(this), \"Error while transferring NFT\");\r\n        StakeInfoC2 storage infoC2 = stakeLogC2[_msgSender()][tokenId];\r\n        infoC2.stakedAtBlock = block.number;\r\n        infoC2.lastHarvestBlock = block.number;\r\n        infoC2.currentlyStaked = true;\r\n        if(tokensStakedByUserC2[_msgSender()] == 0){\r\n            amountOfStakersC2 += 1;\r\n        }\r\n        tokensStakedByUserC2[_msgSender()] += 1;\r\n        tokensStakedC2 += 1;\r\n        stakePortfolioByUserC2[_msgSender()].push(tokenId);\r\n        uint256 indexOfNewElementC2 = stakePortfolioByUserC2[_msgSender()].length - 1;\r\n        indexOfTokenIdInStakePortfolioC2[tokenId] = indexOfNewElementC2;\r\n        emit NFTStakedC2(_msgSender(), tokenId);\r\n    }\r\n\r\n    function stakeC3(uint256 tokenId) public {\r\n        require(!paused, \"The contract is paused\");\r\n        IERC721(collectionAddressC3).safeTransferFrom(_msgSender(), address(this), tokenId);\r\n        require(IERC721(collectionAddressC3).ownerOf(tokenId) == address(this), \"Error while transferring NFT\");\r\n        StakeInfoC3 storage infoC3 = stakeLogC3[_msgSender()][tokenId];\r\n        infoC3.stakedAtBlock = block.number;\r\n        infoC3.lastHarvestBlock = block.number;\r\n        infoC3.currentlyStaked = true;\r\n        if(tokensStakedByUserC3[_msgSender()] == 0){\r\n            amountOfStakersC3 += 1;\r\n        }\r\n        tokensStakedByUserC3[_msgSender()] += 1;\r\n        tokensStakedC3 += 1;\r\n        stakePortfolioByUserC3[_msgSender()].push(tokenId);\r\n        uint256 indexOfNewElementC3 = stakePortfolioByUserC3[_msgSender()].length - 1;\r\n        indexOfTokenIdInStakePortfolioC3[tokenId] = indexOfNewElementC3;\r\n        emit NFTStakedC3(_msgSender(), tokenId);\r\n    }\r\n\r\n    function stakeBatchC1(uint256[] memory tokenIds) external {\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            stakeC1(tokenIds[currentId]);\r\n        }\r\n    }\r\n\r\n    function stakeBatchC2(uint256[] memory tokenIds) external {\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            stakeC2(tokenIds[currentId]);\r\n        }\r\n    }\r\n\r\n    function stakeBatchC3(uint256[] memory tokenIds) external {\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            stakeC3(tokenIds[currentId]);\r\n        }\r\n    }\r\n\r\n    function harvestC1(uint256 tokenId) public {\r\n        require(!paused, \"The contract is paused\");\r\n        StakeInfoC1 storage infoC1 = stakeLogC1[_msgSender()][tokenId];\r\n        uint256 rewardAmountInP808 = pendingRewardsC1(_msgSender(), tokenId);\r\n        uint256 supply = totalSupply();\r\n        require(rewardAmountInP808 > 0, \"Reward amount is zero\" );\r\n        if(rewardAmountInP808 > 0) {\r\n            require(supply + rewardAmountInP808 <= maxSupply, \"Maximum Supply limit exceeded\");\r\n            infoC1.lastHarvestBlock = block.number;\r\n            _mint(_msgSender(), rewardAmountInP808);\r\n            emit RewardsHarvestedC1(_msgSender(), rewardAmountInP808);\r\n        }\r\n    }\r\n    function harvestC2(uint256 tokenId) public {\r\n        require(!paused, \"The contract is paused\");\r\n        StakeInfoC2 storage infoC2 = stakeLogC2[_msgSender()][tokenId];\r\n        uint256 rewardAmountInP808 = pendingRewardsC2(_msgSender(), tokenId);\r\n        uint256 supply = totalSupply();\r\n        require(rewardAmountInP808 > 0, \"Reward amount is zero\");\r\n        if(rewardAmountInP808 > 0) {\r\n            require(supply + rewardAmountInP808 <= maxSupply, \"Maximum Supply limit exceeded\");\r\n            infoC2.lastHarvestBlock = block.number;\r\n            _mint(_msgSender(), rewardAmountInP808);\r\n            emit RewardsHarvestedC2(_msgSender(), rewardAmountInP808);\r\n        }\r\n    }\r\n    function harvestC3(uint256 tokenId) public {\r\n        require(!paused, \"The contract is paused\");\r\n        StakeInfoC3 storage infoC3 = stakeLogC3[_msgSender()][tokenId];\r\n        uint256 rewardAmountInP808 = pendingRewardsC3(_msgSender(), tokenId);\r\n        uint256 supply = totalSupply();\r\n        require(rewardAmountInP808 > 0, \"Reward amount is zero\" );\r\n        if(rewardAmountInP808 > 0) {\r\n            require(supply + rewardAmountInP808 <= maxSupply, \"Maximum Supply limit exceeded\");\r\n            infoC3.lastHarvestBlock = block.number;\r\n            _mint(_msgSender(), rewardAmountInP808);\r\n            emit RewardsHarvestedC3(_msgSender(), rewardAmountInP808);\r\n        }\r\n    }\r\n\r\n    function harvestBatchC1(address user) external{\r\n        uint256[] memory tokenIds = stakePortfolioByUserC1[user];\r\n\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            harvestC1(tokenIds[currentId]);\r\n        }\r\n    }\r\n    function harvestBatchC2(address user) external{\r\n        uint256[] memory tokenIds = stakePortfolioByUserC2[user];\r\n\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            harvestC2(tokenIds[currentId]);\r\n        }\r\n    }\r\n    function harvestBatchC3(address user) external{\r\n        uint256[] memory tokenIds = stakePortfolioByUserC3[user];\r\n\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            harvestC3(tokenIds[currentId]);\r\n        }\r\n    }\r\n\r\n    function unstakeC1(uint256 tokenId) public {\r\n        if(pendingRewardsC1(_msgSender(), tokenId) > 0){\r\n            harvestC1(tokenId);\r\n        }\r\n        StakeInfoC1 storage infoC1 = stakeLogC1[_msgSender()][tokenId];\r\n        infoC1.currentlyStaked = false;\r\n        IERC721(collectionAddressC1).safeTransferFrom(address(this), _msgSender(), tokenId);\r\n        require(IERC721(collectionAddressC1).ownerOf(tokenId) == _msgSender(), \"Error while transferring NFT\");\r\n        if(tokensStakedByUserC1[_msgSender()] == 1){\r\n            amountOfStakersC1 -= 1;\r\n        }\r\n        tokensStakedByUserC1[_msgSender()] -= 1;\r\n        tokensStakedC1 -= 1;\r\n        stakePortfolioByUserC1[_msgSender()][indexOfTokenIdInStakePortfolioC1[tokenId]] = 0;\r\n        emit NFTUnstakedC1(_msgSender(), tokenId);\r\n    }\r\n\r\n    function unstakeC2(uint256 tokenId) public {\r\n        if(pendingRewardsC2(_msgSender(), tokenId) > 0){\r\n            harvestC2(tokenId);\r\n        }\r\n        StakeInfoC2 storage infoC2 = stakeLogC2[_msgSender()][tokenId];\r\n        infoC2.currentlyStaked = false;\r\n        IERC721(collectionAddressC2).safeTransferFrom(address(this), _msgSender(), tokenId);\r\n        require(IERC721(collectionAddressC2).ownerOf(tokenId) == _msgSender(), \"Error while transferring NFT\");\r\n        if(tokensStakedByUserC2[_msgSender()] == 1){\r\n            amountOfStakersC2 -= 1;\r\n        }\r\n        tokensStakedByUserC2[_msgSender()] -= 1;\r\n        tokensStakedC2 -= 1;\r\n        stakePortfolioByUserC2[_msgSender()][indexOfTokenIdInStakePortfolioC2[tokenId]] = 0;\r\n        emit NFTUnstakedC2(_msgSender(), tokenId);\r\n    }\r\n\r\n    function unstakeC3(uint256 tokenId) public {\r\n        if(pendingRewardsC3(_msgSender(), tokenId) > 0){\r\n            harvestC3(tokenId);\r\n        }\r\n        StakeInfoC3 storage infoC3 = stakeLogC3[_msgSender()][tokenId];\r\n        infoC3.currentlyStaked = false ;\r\n        IERC721(collectionAddressC3).safeTransferFrom(address(this), _msgSender(), tokenId);\r\n        require(IERC721(collectionAddressC3).ownerOf(tokenId) == _msgSender(), \"Error while transferring NFT\");\r\n        if(tokensStakedByUserC3[_msgSender()] == 1){\r\n            amountOfStakersC3 -= 1;\r\n        }\r\n        tokensStakedByUserC3[_msgSender()] -= 1;\r\n        tokensStakedC3 -= 1;\r\n        stakePortfolioByUserC3[_msgSender()][indexOfTokenIdInStakePortfolioC3[tokenId]] = 0;\r\n        emit NFTUnstakedC3(_msgSender(), tokenId);\r\n    }\r\n\r\n    function unstakeBatchC1(uint256[] memory tokenIds) external {\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            unstakeC1(tokenIds[currentId]);\r\n        }\r\n    }\r\n    function unstakeBatchC2(uint256[] memory tokenIds) external {\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            unstakeC2(tokenIds[currentId]);\r\n        }\r\n    }\r\n    function unstakeBatchC3(uint256[] memory tokenIds) external {\r\n        for(uint currentId = 0; currentId < tokenIds.length; currentId++) {\r\n            if(tokenIds[currentId] == 0) {\r\n                continue;\r\n            }\r\n            unstakeC3(tokenIds[currentId]);\r\n        }\r\n    }\r\n\r\n    function setNumberOfBlocksPerRewardUnitC1(uint256 numberOfBlocksC1) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        numberOfBlocksPerRewardUnitC1 = numberOfBlocksC1;\r\n    }\r\n    function setNumberOfBlocksPerRewardUnitC2(uint256 numberOfBlocksC2) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        numberOfBlocksPerRewardUnitC2 = numberOfBlocksC2;\r\n    }\r\n    function setNumberOfBlocksPerRewardUnitC3(uint256 numberOfBlocksC3) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        numberOfBlocksPerRewardUnitC3 = numberOfBlocksC3;\r\n    }\r\n\r\n    function setCoinAmountPerRewardUnitC1(uint256 coinAmountC1) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        coinAmountPerRewardUnitC1 = coinAmountC1;\r\n    }\r\n    function setCoinAmountPerRewardUnitC2(uint256 coinAmountC2) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        coinAmountPerRewardUnitC2 = coinAmountC2;\r\n    }\r\n    function setCoinAmountPerRewardUnitC3(uint256 coinAmountC3) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        coinAmountPerRewardUnitC3 = coinAmountC3;\r\n    }\r\n\r\n    function setCollectionAddressC1(address newAddressC1) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        require (newAddressC1 != address(0), \"Update to zero address not possible\");\r\n        collectionAddressC1 = newAddressC1;\r\n    }\r\n\r\n    function setCollectionAddressC2(address newAddressC2) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        require (newAddressC2 != address(0), \"Update to zero address not possible\");\r\n        collectionAddressC2 = newAddressC2;\r\n    }\r\n\r\n    function setCollectionAddressC3(address newAddressC3) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        require (newAddressC3 != address(0), \"Update to zero address not possible\");\r\n        collectionAddressC3 = newAddressC3;\r\n    }\r\n    function pause(bool _state) external onlyRole(CONTRACT_ADMIN_ROLE) {\r\n        paused = _state;\r\n    }\r\n    function setStakingStartBlockC1(uint256 newStakingStartBlockC1) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        stakingStartBlockC1 = newStakingStartBlockC1;\r\n    }\r\n    function setStakingStartBlockC2(uint256 newStakingStartBlockC2) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        stakingStartBlockC2 = newStakingStartBlockC2;\r\n    }\r\n    function setStakingStartBlockC3(uint256 newStakingStartBlockC3) external onlyRole(CONTRACT_ADMIN_ROLE){\r\n        stakingStartBlockC3 = newStakingStartBlockC3;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTStakedC1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTStakedC2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTStakedC3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTUnstakedC1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTUnstakedC2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTUnstakedC3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvestedC1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvestedC2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvestedC3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfStakersC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfStakersC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfStakersC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinAmountPerRewardUnitC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinAmountPerRewardUnitC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinAmountPerRewardUnitC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionAddressC1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionAddressC2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionAddressC3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"harvestBatchC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"harvestBatchC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"harvestBatchC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"harvestC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"harvestC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"harvestC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexOfTokenIdInStakePortfolioC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexOfTokenIdInStakePortfolioC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexOfTokenIdInStakePortfolioC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksPerRewardUnitC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksPerRewardUnitC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksPerRewardUnitC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinAmountC1\",\"type\":\"uint256\"}],\"name\":\"setCoinAmountPerRewardUnitC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinAmountC2\",\"type\":\"uint256\"}],\"name\":\"setCoinAmountPerRewardUnitC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinAmountC3\",\"type\":\"uint256\"}],\"name\":\"setCoinAmountPerRewardUnitC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddressC1\",\"type\":\"address\"}],\"name\":\"setCollectionAddressC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddressC2\",\"type\":\"address\"}],\"name\":\"setCollectionAddressC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddressC3\",\"type\":\"address\"}],\"name\":\"setCollectionAddressC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfBlocksC1\",\"type\":\"uint256\"}],\"name\":\"setNumberOfBlocksPerRewardUnitC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfBlocksC2\",\"type\":\"uint256\"}],\"name\":\"setNumberOfBlocksPerRewardUnitC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfBlocksC3\",\"type\":\"uint256\"}],\"name\":\"setNumberOfBlocksPerRewardUnitC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingStartBlockC1\",\"type\":\"uint256\"}],\"name\":\"setStakingStartBlockC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingStartBlockC2\",\"type\":\"uint256\"}],\"name\":\"setStakingStartBlockC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingStartBlockC3\",\"type\":\"uint256\"}],\"name\":\"setStakingStartBlockC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeBatchC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeBatchC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeBatchC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLogC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"currentlyStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLogC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"currentlyStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLogC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"currentlyStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePortfolioByUserC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePortfolioByUserC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePortfolioByUserC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedNFTSByUserC1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedNFTSByUserC2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedNFTSByUserC3\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartBlockC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartBlockC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartBlockC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStakedByUserC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStakedByUserC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStakedByUserC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStakedC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStakedC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStakedC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeBatchC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeBatchC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeBatchC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "P808", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b4ed2400b80be4babcc60f95c5d76cc88b4b82dc779b8264ef43d3b847630af"}