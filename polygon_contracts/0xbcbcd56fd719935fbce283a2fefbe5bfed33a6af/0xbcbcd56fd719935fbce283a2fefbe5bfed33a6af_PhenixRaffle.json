{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/PhenixRaffle.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract PhenixRaffle is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MAX_TICKET_COUNT = 100000;\r\n\r\n    mapping(address => bool) public adminMapping;\r\n    uint256 public adminFeePercentage;\r\n    uint256 public adminDiscountedFeePercentage;\r\n    uint256 public adminFeePercentageDenominator;\r\n    address public discountNFTAddress;\r\n    address public adminAddress;\r\n    uint256 public maxRaffleDuration;\r\n    bool public paused;\r\n\r\n    enum RaffleStatus {\r\n        OPEN,\r\n        CLAIMED,\r\n        REFUNDED\r\n    }\r\n\r\n    struct Entry {\r\n        uint256 raffleId;\r\n        address participant;\r\n        uint256 numberOfTickets;\r\n    }\r\n\r\n    struct Pricing {\r\n        uint256 ethTicketPrice;\r\n        uint256 tokenTicketPrice;\r\n        address tokenTicketAddress;\r\n    }\r\n\r\n    struct TimeFrame {\r\n        uint256 raffleStartTimestamp;\r\n        uint256 raffleEndTimestamp;\r\n    }\r\n\r\n    struct Rewards {\r\n        uint256 ethReward;\r\n        address tokenRewardAddress;\r\n        uint256 tokenReward;\r\n        address[] erc721Addresses;\r\n        uint256[] tokenIds;\r\n    }\r\n\r\n    struct Raffle {\r\n        uint256 raffleId;\r\n        Pricing pricing;\r\n        uint256 totalTickets;\r\n        uint256 soldTickets;\r\n        TimeFrame timeFrame;\r\n        Rewards rewards;\r\n        address host;\r\n        address winner;\r\n        uint256 totalCollectedETH;\r\n        uint256 totalCollectedTokens;\r\n        uint256 minTickets;\r\n        bool canCancel;\r\n        RaffleStatus status;\r\n    }\r\n\r\n    Raffle[] public raffles;\r\n    mapping(address => uint256[]) public userRaffles;\r\n    mapping(address => bool) public allowedTokenAddresses;\r\n    mapping(uint256 => Entry[]) public raffleEntries;\r\n    mapping(address => mapping(uint256 => uint256[])) public userRaffleEntries;\r\n    mapping(uint256 => mapping(address => uint256)) public totalEthSpent;\r\n    mapping(uint256 => mapping(address => uint256)) public totalTokensSpent;\r\n\r\n    constructor(address _discountNFTAddress, address _adminAddress) Ownable(msg.sender) {\r\n        adminFeePercentage = 50;\r\n        adminDiscountedFeePercentage = 25;\r\n        adminFeePercentageDenominator = 1000;\r\n        discountNFTAddress = _discountNFTAddress;\r\n        maxRaffleDuration = 2419804; // 4 Weeks\r\n        adminAddress = _adminAddress;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            adminMapping[msg.sender] || msg.sender == owner(),\r\n            \"Only admin can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canEnterRaffle(uint256 raffleId) {\r\n        require(\r\n            raffles[raffleId].status == RaffleStatus.OPEN &&\r\n                raffles[raffleId].timeFrame.raffleEndTimestamp >\r\n                block.timestamp &&\r\n                raffles[raffleId].winner == address(0),\r\n            \"Cannot Enter Raffle.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, \"Paused\");\r\n        _;\r\n    }\r\n\r\n    function setMaxRaffleDuration(uint256 _seconds) external onlyOwner {\r\n        maxRaffleDuration = _seconds;\r\n    }\r\n\r\n    function setAdminStatus(address _address, bool _status) external onlyOwner {\r\n        adminMapping[_address] = _status;\r\n    }\r\n\r\n    function setAllowedTokenAddresses(\r\n        address[] calldata _addresses,\r\n        bool status\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            allowedTokenAddresses[_addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function setPaused(bool status) external onlyAdmin {\r\n        paused = status;\r\n    }\r\n\r\n    function setAdminAddress(address _address) external onlyOwner {\r\n        adminAddress = _address;\r\n    }\r\n\r\n    function setAdminFeeSettings(\r\n        uint256 _adminFeePercentage,\r\n        uint256 _adminDiscountFeePercentage,\r\n        uint256 _adminFeePercentageDenominator\r\n    ) external onlyOwner {\r\n        require(\r\n            _adminFeePercentage < _adminFeePercentageDenominator &&\r\n                _adminDiscountFeePercentage < _adminFeePercentageDenominator,\r\n            \"Invalid Params\"\r\n        );\r\n\r\n        adminFeePercentage = _adminFeePercentage;\r\n        adminDiscountedFeePercentage = _adminDiscountFeePercentage;\r\n        adminFeePercentageDenominator = _adminFeePercentageDenominator;\r\n    }\r\n\r\n    function setDiscountNFTAddress(\r\n        address _discountNFTAddress\r\n    ) external onlyOwner {\r\n        discountNFTAddress = _discountNFTAddress;\r\n    }\r\n\r\n    function createRaffle(\r\n        Pricing memory _pricing,\r\n        uint256 _totalTickets,\r\n        uint256 _minTickets,\r\n        bool _canCancel,\r\n        TimeFrame memory _timeFrame,\r\n        Rewards memory _rewards\r\n    ) public payable notPaused {\r\n        require(\r\n            _timeFrame.raffleEndTimestamp.sub(\r\n                _timeFrame.raffleStartTimestamp\r\n            ) <= maxRaffleDuration,\r\n            \"Duration too long.\"\r\n        );\r\n        require(\r\n            (_pricing.tokenTicketAddress == address(0) ||\r\n                allowedTokenAddresses[_pricing.tokenTicketAddress]) &&\r\n                (_rewards.tokenRewardAddress == address(0) ||\r\n                    allowedTokenAddresses[_rewards.tokenRewardAddress]),\r\n            \"Token Address not permitted.\"\r\n        );\r\n        require(\r\n            _rewards.erc721Addresses.length == _rewards.tokenIds.length,\r\n            \"ERC721 Address and token ID length must match.\"\r\n        );\r\n\r\n        // Transfer ETH reward to the contract\r\n        if (_rewards.ethReward > 0) {\r\n            require(\r\n                msg.value == _rewards.ethReward,\r\n                \"ETH reward amount must match transaction value.\"\r\n            );\r\n        }\r\n\r\n        // Transfer token reward to the contract\r\n        if (_rewards.tokenReward > 0) {\r\n            require(\r\n                _rewards.tokenRewardAddress != address(0),\r\n                \"Token address must be set.\"\r\n            );\r\n            require(\r\n                IERC20(_rewards.tokenRewardAddress).transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    _rewards.tokenReward\r\n                ),\r\n                \"Token transfer failed.\"\r\n            );\r\n        }\r\n\r\n        // Transfer ERC721 rewards to the contract\r\n        if (_rewards.erc721Addresses.length > 0) {\r\n            for (uint256 i = 0; i < _rewards.erc721Addresses.length; i++) {\r\n                require(\r\n                    _rewards.erc721Addresses[i] != address(0),\r\n                    \"ERC721 address must be set.\"\r\n                );\r\n                require(\r\n                    IERC721(_rewards.erc721Addresses[i]).ownerOf(\r\n                        _rewards.tokenIds[i]\r\n                    ) == msg.sender,\r\n                    \"ERC721 token not owned by sender.\"\r\n                );\r\n                IERC721(_rewards.erc721Addresses[i]).transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    _rewards.tokenIds[i]\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 raffleId = raffles.length;\r\n        userRaffles[msg.sender].push(raffleId);\r\n        raffles.push(\r\n            Raffle({\r\n                raffleId: raffleId,\r\n                pricing: _pricing,\r\n                totalTickets: _totalTickets,\r\n                soldTickets: 0,\r\n                timeFrame: _timeFrame,\r\n                rewards: _rewards,\r\n                host: msg.sender,\r\n                winner: address(0),\r\n                totalCollectedETH: 0,\r\n                totalCollectedTokens: 0,\r\n                minTickets: _minTickets,\r\n                canCancel: _canCancel,\r\n                status: RaffleStatus.OPEN\r\n            })\r\n        );\r\n    }\r\n\r\n    function addTicketsToRaffle(\r\n        uint256 _raffleId,\r\n        uint256 _numTickets,\r\n        address _participant\r\n    ) external onlyAdmin {\r\n        _addTicketsToRaffle(_raffleId, _numTickets, _participant);\r\n    }\r\n\r\n    function _addTicketsToRaffle(\r\n        uint256 _raffleId,\r\n        uint256 _numTickets,\r\n        address _participant\r\n    ) internal {\r\n        // Check that the raffle is open for entries\r\n        require(_numTickets > 0, \"One or more tickets required.\");\r\n        require(\r\n            _participant != raffles[_raffleId].host,\r\n            \"Host cannot participate.\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp <= raffles[_raffleId].timeFrame.raffleEndTimestamp,\r\n            \"Raffle no longer accepting entries.\"\r\n        );\r\n\r\n        require(\r\n            raffles[_raffleId].totalTickets == 0 ||\r\n                raffles[_raffleId].soldTickets.add(_numTickets) <=\r\n                raffles[_raffleId].totalTickets,\r\n            \"Not enough tickets available for purchase.\"\r\n        );\r\n\r\n        // Add entry to raffle entries array\r\n        userRaffleEntries[_participant][_raffleId].push(\r\n            raffleEntries[_raffleId].length\r\n        );\r\n        raffleEntries[_raffleId].push(\r\n            Entry({\r\n                raffleId: _raffleId,\r\n                participant: _participant,\r\n                numberOfTickets: _numTickets\r\n            })\r\n        );\r\n\r\n        // Update raffle sold tickets\r\n        raffles[_raffleId].soldTickets = raffles[_raffleId].soldTickets.add(\r\n            _numTickets\r\n        );\r\n    }\r\n\r\n    function _getAdminFeeNumerator(\r\n        address _userAddress\r\n    ) internal view returns (uint256) {\r\n        if (\r\n            discountNFTAddress != address(0) &&\r\n            IERC721(discountNFTAddress).balanceOf(_userAddress) > 0\r\n        ) {\r\n            return adminDiscountedFeePercentage;\r\n        }\r\n\r\n        return adminFeePercentage;\r\n    }\r\n\r\n    function buyTicketsWithEth(\r\n        uint256 _raffleId,\r\n        uint256 _numTickets\r\n    ) external payable notPaused canEnterRaffle(_raffleId) {\r\n        require(\r\n            raffles[_raffleId].pricing.ethTicketPrice > 0,\r\n            \"ETH ticket price not set for this raffle.\"\r\n        );\r\n        require(\r\n            msg.value ==\r\n                raffles[_raffleId].pricing.ethTicketPrice.mul(_numTickets),\r\n            \"Incorrect amount of ETH sent.\"\r\n        );\r\n\r\n        _addTicketsToRaffle(_raffleId, _numTickets, msg.sender);\r\n\r\n        raffles[_raffleId].totalCollectedETH = raffles[_raffleId]\r\n            .totalCollectedETH\r\n            .add(msg.value);\r\n\r\n        totalEthSpent[_raffleId][msg.sender] = totalEthSpent[_raffleId][\r\n            msg.sender\r\n        ].add(msg.value);\r\n    }\r\n\r\n    function buyTicketsWithTokens(\r\n        uint256 _raffleId,\r\n        uint256 _numTickets\r\n    ) external notPaused canEnterRaffle(_raffleId) {\r\n        require(\r\n            raffles[_raffleId].pricing.tokenTicketPrice > 0,\r\n            \"Token ticket price not set for this raffle.\"\r\n        );\r\n\r\n        uint256 totalTokens = raffles[_raffleId].pricing.tokenTicketPrice.mul(\r\n            _numTickets\r\n        );\r\n\r\n        // Transfer tokens from participant to contract\r\n        require(\r\n            IERC20(raffles[_raffleId].pricing.tokenTicketAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                totalTokens\r\n            ),\r\n            \"Token transfer failed.\"\r\n        );\r\n\r\n        _addTicketsToRaffle(_raffleId, _numTickets, msg.sender);\r\n\r\n        raffles[_raffleId].totalCollectedTokens = raffles[_raffleId]\r\n            .totalCollectedTokens\r\n            .add(totalTokens);\r\n\r\n        totalTokensSpent[_raffleId][msg.sender] = totalTokensSpent[_raffleId][\r\n            msg.sender\r\n        ].add(totalTokens);\r\n    }\r\n\r\n    function _distributeFees(uint256 _raffleId) internal {\r\n        uint256 _adminFeePercentage = _getAdminFeeNumerator(msg.sender);\r\n\r\n        // Distribute ETH fees\r\n        if (\r\n            _adminFeePercentage > 0 && raffles[_raffleId].totalCollectedETH > 0\r\n        ) {\r\n            uint256 adminFeeETH = raffles[_raffleId]\r\n                .totalCollectedETH\r\n                .mul(_adminFeePercentage)\r\n                .div(adminFeePercentageDenominator);\r\n            (bool sent, ) = payable(adminAddress).call{value: adminFeeETH}(\"\");\r\n            require(sent, \"Failed to send ETH admin fee.\");\r\n            (bool sentHost, ) = payable(raffles[_raffleId].host).call{\r\n                value: raffles[_raffleId].totalCollectedETH.sub(adminFeeETH)\r\n            }(\"\");\r\n            require(sentHost, \"Failed to send ETH to host.\");\r\n        }\r\n\r\n        // Distribute token fees\r\n        if (\r\n            _adminFeePercentage > 0 &&\r\n            raffles[_raffleId].totalCollectedTokens > 0\r\n        ) {\r\n            uint256 adminFeeTokens = raffles[_raffleId]\r\n                .totalCollectedTokens\r\n                .mul(_adminFeePercentage)\r\n                .div(adminFeePercentageDenominator);\r\n            require(\r\n                IERC20(raffles[_raffleId].pricing.tokenTicketAddress).transfer(\r\n                    adminAddress,\r\n                    adminFeeTokens\r\n                ),\r\n                \"Failed to send token admin fee.\"\r\n            );\r\n            require(\r\n                IERC20(raffles[_raffleId].pricing.tokenTicketAddress).transfer(\r\n                    raffles[_raffleId].host,\r\n                    raffles[_raffleId].totalCollectedTokens.sub(adminFeeTokens)\r\n                ),\r\n                \"Failed to send tokens to host.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function selectWinner(\r\n        uint256 _raffleId,\r\n        address _winner\r\n    ) external onlyAdmin {\r\n        Raffle storage raffle = raffles[_raffleId];\r\n\r\n        require(\r\n            raffle.soldTickets > 0 &&\r\n                (raffle.soldTickets >= raffle.minTickets) &&\r\n                (block.timestamp > raffle.timeFrame.raffleEndTimestamp ||\r\n                    raffle.totalTickets == raffle.soldTickets),\r\n            \"Raffle is not yet closed, no tickets sold, or minTickets not reached.\"\r\n        );\r\n\r\n        require(raffle.winner == address(0), \"Winner has been selected.\");\r\n        raffle.winner = _winner;\r\n    }\r\n\r\n    function claimRafflePrize(uint256 _raffleId) external notPaused {\r\n        Raffle storage raffle = raffles[_raffleId];\r\n\r\n        require(raffle.winner != address(0), \"Winner has not been selected.\");\r\n\r\n        require(\r\n            raffle.status == RaffleStatus.OPEN,\r\n            \"Prize has already been claimed.\"\r\n        );\r\n\r\n        raffle.status = RaffleStatus.CLAIMED;\r\n\r\n        _distributeFees(_raffleId);\r\n        _distributePrizes(_raffleId, raffle.winner);\r\n    }\r\n\r\n    function cancelRaffle(uint256 _raffleId) external {\r\n        Raffle storage raffle = raffles[_raffleId];\r\n\r\n        require(\r\n            (msg.sender == raffle.host ||\r\n                adminMapping[msg.sender] ||\r\n                msg.sender == owner()) && raffle.status == RaffleStatus.OPEN,\r\n            \"Cannot Cancel Raffle\"\r\n        );\r\n\r\n        require(\r\n            raffle.canCancel ||\r\n                ((raffle.minTickets == 0 ||\r\n                    raffle.soldTickets < raffle.minTickets) &&\r\n                    block.timestamp > raffle.timeFrame.raffleEndTimestamp),\r\n            \"Cannot cancel due to minTickets, canCancel, or raffleEndTimestamp\"\r\n        );\r\n\r\n        raffle.status = RaffleStatus.REFUNDED;\r\n        _distributePrizes(_raffleId, raffle.host);\r\n    }\r\n\r\n    function refundTickets(uint256 _raffleId) external {\r\n        require(\r\n            raffles[_raffleId].status == RaffleStatus.REFUNDED,\r\n            \"Raffle must be cancelled.\"\r\n        );\r\n\r\n        uint256 ethRefundAmount = totalEthSpent[_raffleId][msg.sender];\r\n        uint256 tokenRefundAmount = totalTokensSpent[_raffleId][msg.sender];\r\n\r\n        // Check if there is any ETH to refund\r\n        if (ethRefundAmount > 0) {\r\n            // Update the mapping\r\n            totalEthSpent[_raffleId][msg.sender] = 0;\r\n\r\n            // Send the ETH back to the user\r\n            (bool sent, ) = payable(msg.sender).call{value: ethRefundAmount}(\r\n                \"\"\r\n            );\r\n            require(sent, \"Failed to send ETH refund.\");\r\n        }\r\n\r\n        // Check if there are any tokens to refund\r\n        if (tokenRefundAmount > 0) {\r\n            // Update the mapping\r\n            totalTokensSpent[_raffleId][msg.sender] = 0;\r\n\r\n            // Send the tokens back to the user\r\n            require(\r\n                IERC20(raffles[_raffleId].pricing.tokenTicketAddress).transfer(\r\n                    msg.sender,\r\n                    tokenRefundAmount\r\n                ),\r\n                \"Failed to send token refund.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _distributePrizes(uint256 _raffleId, address _recipient) internal {\r\n        // Send ETH reward\r\n        if (raffles[_raffleId].rewards.ethReward > 0) {\r\n            (bool sent, ) = payable(_recipient).call{\r\n                value: raffles[_raffleId].rewards.ethReward\r\n            }(\"\");\r\n            require(sent, \"Failed to send ETH reward.\");\r\n        }\r\n\r\n        // Send token reward\r\n        if (raffles[_raffleId].rewards.tokenReward > 0) {\r\n            require(\r\n                IERC20(raffles[_raffleId].rewards.tokenRewardAddress).transfer(\r\n                    _recipient,\r\n                    raffles[_raffleId].rewards.tokenReward\r\n                ),\r\n                \"Failed to send token reward.\"\r\n            );\r\n        }\r\n\r\n        // Send ERC721 rewards\r\n        for (\r\n            uint256 i = 0;\r\n            i < raffles[_raffleId].rewards.erc721Addresses.length;\r\n            i++\r\n        ) {\r\n            IERC721(raffles[_raffleId].rewards.erc721Addresses[i]).transferFrom(\r\n                    address(this),\r\n                    _recipient,\r\n                    raffles[_raffleId].rewards.tokenIds[i]\r\n                );\r\n        }\r\n    }\r\n\r\n    function getRaffles(\r\n        uint256 _startingIndex,\r\n        uint256 _lastIndex\r\n    ) external view returns (Raffle[] memory) {\r\n        if (_startingIndex == 0 && _lastIndex == 0) {\r\n            return raffles;\r\n        }\r\n\r\n        uint256 resultLength = _lastIndex - _startingIndex + 1;\r\n        Raffle[] memory result = new Raffle[](resultLength);\r\n\r\n        uint256 resultIndex = 0;\r\n        for (\r\n            uint256 i = _startingIndex;\r\n            i <= _lastIndex && i < raffles.length;\r\n            i++\r\n        ) {\r\n            result[resultIndex] = raffles[i];\r\n            resultIndex++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getUserRaffles(\r\n        address _address,\r\n        uint256 _startingIndex,\r\n        uint256 _lastIndex\r\n    ) external view returns (Raffle[] memory) {\r\n        uint256 resultLength = 0;\r\n\r\n        if (_startingIndex == 0 && _lastIndex == 0) {\r\n            resultLength = userRaffles[_address].length;\r\n            _lastIndex = resultLength;\r\n        } else {\r\n            resultLength = _lastIndex - _startingIndex + 1;\r\n        }\r\n\r\n        Raffle[] memory result = new Raffle[](resultLength);\r\n\r\n        uint256 resultIndex = 0;\r\n        for (\r\n            uint256 i = _startingIndex;\r\n            i <= _lastIndex && i < userRaffles[_address].length;\r\n            i++\r\n        ) {\r\n            result[resultIndex] = raffles[userRaffles[_address][i]];\r\n            resultIndex++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getRaffleEntries(\r\n        uint256 _raffleId,\r\n        uint256 _startingIndex,\r\n        uint256 _lastIndex\r\n    ) external view returns (Entry[] memory) {\r\n        if (_startingIndex == 0 && _lastIndex == 0) {\r\n            return raffleEntries[_raffleId];\r\n        }\r\n\r\n        uint256 resultLength = _lastIndex - _startingIndex + 1;\r\n        Entry[] memory result = new Entry[](resultLength);\r\n\r\n        uint256 resultIndex = 0;\r\n        Entry[] storage entries = raffleEntries[_raffleId];\r\n        for (\r\n            uint256 i = _startingIndex;\r\n            i <= _lastIndex && i < entries.length;\r\n            i++\r\n        ) {\r\n            result[resultIndex] = entries[i];\r\n            resultIndex++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getUserRaffleEntries(\r\n        address _address,\r\n        uint256 _raffleId,\r\n        uint256 _startingIndex,\r\n        uint256 _lastIndex\r\n    ) external view returns (Entry[] memory) {\r\n        uint256 resultLength = 0;\r\n\r\n        if (_startingIndex == 0 && _lastIndex == 0) {\r\n            resultLength = userRaffleEntries[_address][_raffleId].length;\r\n            _lastIndex = resultLength;\r\n        } else {\r\n            resultLength = _lastIndex - _startingIndex + 1;\r\n        }\r\n\r\n        Entry[] memory result = new Entry[](resultLength);\r\n\r\n        uint256 resultIndex = 0;\r\n        for (uint256 i = _startingIndex; i <= _lastIndex; i++) {\r\n            result[resultIndex] = raffleEntries[_raffleId][\r\n                userRaffleEntries[_address][_raffleId][i]\r\n            ];\r\n\r\n            resultIndex++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getRafflesCount() external view returns (uint256) {\r\n        return raffles.length;\r\n    }\r\n\r\n    function getRaffleEntryCount(\r\n        uint256 _raffleId\r\n    ) external view returns (uint256) {\r\n        return raffleEntries[_raffleId].length;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_discountNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TICKET_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTickets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"addTicketsToRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminDiscountedFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeePercentageDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokenAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTickets\",\"type\":\"uint256\"}],\"name\":\"buyTicketsWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTickets\",\"type\":\"uint256\"}],\"name\":\"buyTicketsWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"cancelRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"claimRafflePrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenTicketAddress\",\"type\":\"address\"}],\"internalType\":\"struct PhenixRaffle.Pricing\",\"name\":\"_pricing\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTickets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canCancel\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixRaffle.TimeFrame\",\"name\":\"_timeFrame\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReward\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc721Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PhenixRaffle.Rewards\",\"name\":\"_rewards\",\"type\":\"tuple\"}],\"name\":\"createRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIndex\",\"type\":\"uint256\"}],\"name\":\"getRaffleEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixRaffle.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getRaffleEntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIndex\",\"type\":\"uint256\"}],\"name\":\"getRaffles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenTicketAddress\",\"type\":\"address\"}],\"internalType\":\"struct PhenixRaffle.Pricing\",\"name\":\"pricing\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTickets\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixRaffle.TimeFrame\",\"name\":\"timeFrame\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReward\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc721Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PhenixRaffle.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalCollectedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollectedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTickets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canCancel\",\"type\":\"bool\"},{\"internalType\":\"enum PhenixRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct PhenixRaffle.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRafflesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIndex\",\"type\":\"uint256\"}],\"name\":\"getUserRaffleEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixRaffle.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIndex\",\"type\":\"uint256\"}],\"name\":\"getUserRaffles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenTicketAddress\",\"type\":\"address\"}],\"internalType\":\"struct PhenixRaffle.Pricing\",\"name\":\"pricing\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTickets\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixRaffle.TimeFrame\",\"name\":\"timeFrame\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReward\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc721Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PhenixRaffle.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalCollectedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollectedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTickets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canCancel\",\"type\":\"bool\"},{\"internalType\":\"enum PhenixRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct PhenixRaffle.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRaffleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenTicketAddress\",\"type\":\"address\"}],\"internalType\":\"struct PhenixRaffle.Pricing\",\"name\":\"pricing\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTickets\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixRaffle.TimeFrame\",\"name\":\"timeFrame\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReward\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc721Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PhenixRaffle.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalCollectedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollectedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTickets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canCancel\",\"type\":\"bool\"},{\"internalType\":\"enum PhenixRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"refundTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"selectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminDiscountFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setAdminFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAllowedTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_discountNFTAddress\",\"type\":\"address\"}],\"name\":\"setDiscountNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMaxRaffleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEthSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokensSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRaffleEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRaffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PhenixRaffle", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000752892900c197b9c5b10b93e6f19b0365c296f18000000000000000000000000216962ea72d9d13d44d9aba530b462b33d8d9af6", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70c048d5f6442edcefdf64a8622f0fad5d8f1ceff85ffc6704df17058212eeee"}