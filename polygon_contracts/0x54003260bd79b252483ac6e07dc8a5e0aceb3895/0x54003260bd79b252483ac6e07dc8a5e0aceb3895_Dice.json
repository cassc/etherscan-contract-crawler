{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 8000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bank/IBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/// @notice Minimal interface for Bank.\\n/// @author Romuald Hog.\\ninterface IBank {\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param token Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address token) external view returns (bool);\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address payable user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees\\n    ) external payable;\\n\\n    /// @notice Accounts a loss bet, and manage the balance overflow.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    function cashIn(address tokenAddress, uint256 amount) external payable;\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Harvests tokens dividends.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function harvestDividends()\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    /// @notice Get the available tokens dividends amounts.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function getDividends()\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/bank/IReferral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/// @notice Referral interface\\n/// @author Romuald Hog.\\ninterface IReferral {\\n    /// @notice Adds an address as referrer.\\n    /// @param user The address of the user.\\n    /// @param referrer The address would set as referrer of user.\\n    function addReferrer(address user, address referrer) external;\\n\\n    /// @notice Updates referrer's last active timestamp.\\n    /// @param user The address would like to update active time.\\n    function updateReferrerActivity(address user) external;\\n\\n    /// @notice Calculates and allocate referrer(s) credits to uplines.\\n    /// @param user Address of the gamer to find referrer(s).\\n    /// @param token The token to allocate.\\n    /// @param amount The number of tokens allocated for referrer(s).\\n    function payReferral(\\n        address user,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /// @notice Utils function for check whether an address has the referrer.\\n    /// @param user The address of the user.\\n    /// @return Whether user has a referrer.\\n    function hasReferrer(address user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/games/Dice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Game} from \\\"./Game.sol\\\";\\n\\n/// @title BetSwirl's Dice game\\n/// @notice The game is played with a 100 sided dice. The game's goal is to guess whether the lucky number will be above your chosen number.\\n/// @author Romuald Hog (based on Yakitori's Dice)\\ncontract Dice is Game {\\n    /// @notice Full dice bet information struct.\\n    /// @param bet The Bet struct information.\\n    /// @param diceBet The Dice bet struct information.\\n    /// @dev Used to package bet information for the front-end.\\n    struct FullDiceBet {\\n        Bet bet;\\n        DiceBet diceBet;\\n    }\\n\\n    /// @notice Dice bet information struct.\\n    /// @param cap The chosen dice number.\\n    /// @param rolled The rolled dice number.\\n    struct DiceBet {\\n        uint8 cap;\\n        uint8 rolled;\\n    }\\n\\n    /// @notice Maps bets IDs to chosen and rolled dice numbers.\\n    mapping(uint256 => DiceBet) public diceBets;\\n\\n    /// @notice Maximum dice number that a gamer can choose.\\n    /// @dev Dice cap 99 gives 1% chance.\\n    uint8 public constant MAX_CAP = 99;\\n\\n    /// @notice Maps the tokens addresses to the minimum cap\\n    /// @dev This is used to prevent a user from setting defavorable bet\\n    mapping(address => uint8) public tokensMinCap;\\n\\n    /// @notice Emitted after a bet is placed.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param cap The chosen dice number.\\n    event PlaceBet(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint8 cap\\n    );\\n\\n    /// @notice Emitted after a bet is rolled.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param cap The chosen dice number.\\n    /// @param rolled The rolled dice number.\\n    /// @param payout The payout amount.\\n    event Roll(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint8 cap,\\n        uint8 rolled,\\n        uint256 payout\\n    );\\n\\n    /// @notice Emitted after the minimum cap is set.\\n    /// @param token Address of the token.\\n    /// @param minCap The new minimum cap.\\n    event SetMinCap(address indexed token, uint256 minCap);\\n\\n    /// @notice Provided cap is under the minimum.\\n    /// @param cap The cap chosen by user.\\n    /// @param minCap is the minimum cap defined based on the house edge.\\n    /// @param maxCap is the maximum cap defined.\\n    error CapNotInRange(uint8 cap, uint8 minCap, uint8 maxCap);\\n\\n    /// @notice Initialize the game base contract.\\n    /// @param bankAddress The address of the bank.\\n    /// @param referralProgramAddress The address of the Referral program.\\n    /// @param chainlinkCoordinatorAddress Address of the Chainlink VRF Coordinator.\\n    /// @param LINK_ETH_feedAddress Address of the Chainlink LINK/ETH price feed.\\n    constructor(\\n        address bankAddress,\\n        address referralProgramAddress,\\n        address chainlinkCoordinatorAddress,\\n        address LINK_ETH_feedAddress\\n    )\\n        Game(\\n            bankAddress,\\n            referralProgramAddress,\\n            chainlinkCoordinatorAddress,\\n            1,\\n            LINK_ETH_feedAddress\\n        )\\n    {}\\n\\n    /// @notice Sets the game house edge rate for a specific token, and the minimum cap to prevent defavorable bets.\\n    /// @param token Address of the token.\\n    /// @param _houseEdge House edge rate.\\n    function setHouseEdgeAndMinCap(address token, uint16 _houseEdge)\\n        external\\n        onlyOwner\\n    {\\n        _setHouseEdge(token, _houseEdge);\\n\\n        uint8 oldMinCap = tokensMinCap[token];\\n        uint8 newMinCap;\\n        uint8 maxCap = MAX_CAP;\\n        uint256 amount = 10000;\\n        for (uint8 cap = 1; cap < maxCap; cap++) {\\n            uint256 payout = getPayout(amount, cap);\\n            uint256 fees = _getFees(token, payout);\\n            if (amount / (payout - fees) < 1) {\\n                newMinCap = tokensMinCap[token] = cap;\\n                break;\\n            }\\n        }\\n        if (oldMinCap != newMinCap) {\\n            emit SetMinCap(token, newMinCap);\\n        }\\n    }\\n\\n    /// @notice Creates a new bet and stores the chosen dice number.\\n    /// @param cap The chosen dice number.\\n    /// @param token Address of the token.\\n    /// @param tokenAmount The number of tokens bet.\\n    /// @param referrer Address of the referrer.\\n    function wager(\\n        uint8 cap,\\n        address token,\\n        uint256 tokenAmount,\\n        address referrer\\n    ) external payable whenNotPaused {\\n        if (cap < tokensMinCap[token] || cap > MAX_CAP) {\\n            revert CapNotInRange(cap, tokensMinCap[token], MAX_CAP);\\n        }\\n\\n        Bet memory bet = _newBet(\\n            token,\\n            tokenAmount,\\n            getPayout(10000, cap),\\n            referrer\\n        );\\n        diceBets[bet.id].cap = cap;\\n\\n        emit PlaceBet(bet.id, bet.user, bet.token, cap);\\n    }\\n\\n    /// @notice Resolves the bet using the Chainlink randomness.\\n    /// @param id The bet ID.\\n    /// @param randomWords Random words list. Contains only one for this game.\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    function fulfillRandomWords(uint256 id, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        DiceBet storage diceBet = diceBets[id];\\n        Bet storage bet = bets[id];\\n\\n        uint8 rolled = uint8((randomWords[0] % 100) + 1);\\n        diceBet.rolled = rolled;\\n        uint256 payout = _resolveBet(\\n            bet,\\n            rolled > diceBet.cap,\\n            getPayout(bet.amount, diceBet.cap)\\n        );\\n\\n        emit Roll(\\n            bet.id,\\n            bet.user,\\n            bet.token,\\n            bet.amount,\\n            diceBet.cap,\\n            rolled,\\n            payout\\n        );\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Dice bet.\\n    function getLastUserBets(address user, uint256 dataLength)\\n        external\\n        view\\n        returns (FullDiceBet[] memory)\\n    {\\n        Bet[] memory lastBets = _getLastUserBets(user, dataLength);\\n        FullDiceBet[] memory lastDiceBets = new FullDiceBet[](lastBets.length);\\n        for (uint256 i; i < lastBets.length; i++) {\\n            lastDiceBets[i] = FullDiceBet(\\n                lastBets[i],\\n                diceBets[lastBets[i].id]\\n            );\\n        }\\n        return lastDiceBets;\\n    }\\n\\n    /// @notice Calculates the target payout amount.\\n    /// @param betAmount Bet amount.\\n    /// @param cap The chosen dice number.\\n    /// @return The target payout amount.\\n    function getPayout(uint256 betAmount, uint8 cap)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return (betAmount * 100) / (100 - cap);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/games/Game.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport {IBank} from \\\"../bank/IBank.sol\\\";\\nimport {IReferral} from \\\"../bank/IReferral.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IVRFCoordinatorV2 is VRFCoordinatorV2Interface {\\n    function getFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint24,\\n            uint24,\\n            uint24,\\n            uint24\\n        );\\n}\\n\\n/// @title Game base contract\\n/// @author Romuald Hog\\n/// @notice This should be parent contract of each games.\\n/// It defines all the games common functions and state variables.\\n/// @dev All rates are in basis point. Chainlink VRF v2 is used.\\nabstract contract Game is\\n    Ownable,\\n    Pausable,\\n    Multicall,\\n    VRFConsumerBaseV2,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Bet information struct.\\n    /// @param resolved Whether the bet has been resolved.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param id Bet ID generated by Chainlink VRF.\\n    /// @param amount The bet amount.\\n    /// @param blockNumber Block number of the bet used to refund in case Chainlink's callback fail.\\n    /// @param payout The payout amount.\\n    /// @param vrfCost The Chainlink VRF cost paid by player.\\n    struct Bet {\\n        bool resolved;\\n        address payable user;\\n        address token;\\n        uint256 id;\\n        uint256 amount;\\n        uint256 blockNumber;\\n        uint256 payout;\\n        uint256 vrfCost;\\n    }\\n\\n    /// @notice Chainlink VRF configuration struct.\\n    /// @param subId Default subscription ID.\\n    /// @param callbackGasLimit How much gas you would like in your callback to do work with the random words provided.\\n    /// @param requestConfirmations How many confirmations the Chainlink node should wait before responding.\\n    /// @param keyHash Hash of the public key used to verify the VRF proof.\\n    struct ChainlinkConfig {\\n        uint64 subId;\\n        uint32 callbackGasLimit;\\n        uint16 requestConfirmations;\\n        bytes32 keyHash;\\n    }\\n\\n    /// @notice Chainlink VRF configuration state.\\n    ChainlinkConfig public chainlinkConfig;\\n\\n    /// @notice Reference to the VRFCoordinatorV2 deployed contract.\\n    IVRFCoordinatorV2 public chainlinkCoordinator;\\n\\n    /// @notice How many random words is needed to resolve a game's bet.\\n    uint16 private immutable _numRandomWords;\\n\\n    /// @notice Chainlink price feed.\\n    AggregatorV3Interface public immutable LINK_ETH_feed;\\n\\n    /// @notice Maps bets IDs to Bet information.\\n    mapping(uint256 => Bet) public bets;\\n\\n    /// @notice Maps users addresses to bets IDs\\n    mapping(address => uint256[]) internal _userBets;\\n\\n    /// @notice Token struct.\\n    /// @param houseEdge House edge rate.\\n    /// @param VRFSubId Chainlink's VRF subscription ID.\\n    /// @param partner Address of the partner to manage the token.\\n    /// @param minBetAmount Minimum bet amount.\\n    /// @param VRFFees Chainlink's VRF collected fees amount.\\n    struct Token {\\n        uint16 houseEdge;\\n        uint64 VRFSubId;\\n        address partner;\\n        uint256 minBetAmount;\\n        uint256 VRFFees;\\n    }\\n    /// @notice Maps tokens addresses to token configuration.\\n    mapping(address => Token) public tokens;\\n\\n    /// @notice The bank that manage to payout a won bet and collect a loss bet, and to interact with Referral program.\\n    IBank public bank;\\n\\n    /// @notice Referral program contract.\\n    IReferral public referralProgram;\\n\\n    /// @notice Emitted after the bank is set.\\n    /// @param bank Address of the bank contract.\\n    event SetBank(address bank);\\n\\n    /// @notice Emitted after the referral program is set.\\n    /// @param referralProgram The referral program address.\\n    event SetReferralProgram(address referralProgram);\\n\\n    /// @notice Emitted after the house edge is set for a token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    event SetHouseEdge(address indexed token, uint16 houseEdge);\\n\\n    /// @notice Emitted after the minimum bet amount is set for a token.\\n    /// @param token Address of the token.\\n    /// @param minBetAmount Minimum bet amount.\\n    event SetTokenMinBetAmount(address indexed token, uint256 minBetAmount);\\n\\n    /// @notice Emitted after the bet amount transfer to the user failed.\\n    /// @param id The bet ID.\\n    /// @param amount Number of tokens failed to transfer.\\n    /// @param reason The reason provided by the external call.\\n    event BetAmountTransferFail(uint256 id, uint256 amount, string reason);\\n\\n    /// @notice Emitted after the bet amount fee transfer to the bank failed.\\n    /// @param id The bet ID.\\n    /// @param amount Number of tokens failed to transfer.\\n    /// @param reason The reason provided by the external call.\\n    event BetAmountFeeTransferFail(uint256 id, uint256 amount, string reason);\\n\\n    /// @notice Emitted after the bet profit transfer to the user failed.\\n    /// @param id The bet ID.\\n    /// @param amount Number of tokens failed to transfer.\\n    /// @param reason The reason provided by the external call.\\n    event BetProfitTransferFail(uint256 id, uint256 amount, string reason);\\n\\n    /// @notice Emitted after the bet amount transfer to the bank failed.\\n    /// @param id The bet ID.\\n    /// @param amount Number of tokens failed to transfer.\\n    /// @param reason The reason provided by the external call.\\n    event BankCashInFail(uint256 id, uint256 amount, string reason);\\n\\n    /// @notice Emitted after the bet amount ERC20 transfer to the bank failed.\\n    /// @param id The bet ID.\\n    /// @param amount Number of tokens failed to transfer.\\n    /// @param reason The reason provided by the external call.\\n    event BankTransferFail(uint256 id, uint256 amount, string reason);\\n\\n    /// @notice Emitted after the bet amount is transfered to the user.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param amount Number of tokens refunded.\\n    event BetRefunded(uint256 id, address user, uint256 amount);\\n\\n    /// @notice Emitted after the bet resolution cost refund to user failed.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param chainlinkVRFCost The bet resolution cost amount.\\n    event BetCostRefundFail(uint256 id, address user, uint256 chainlinkVRFCost);\\n\\n    /// @notice Emitted after the token's VRF fees amount is transfered to the user.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens refunded.\\n    event DistributeTokenVRFFees(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after the token's VRF subscription ID is set.\\n    /// @param token Address of the token.\\n    /// @param subId Subscription ID.\\n    event SetTokenVRFSubId(address indexed token, uint64 subId);\\n\\n    /// @notice Emitted after a token partner is set.\\n    /// @param token Address of the token.\\n    /// @param partner Address of the partner.\\n    event SetTokenPartner(address indexed token, address partner);\\n\\n    /// @notice Insufficient bet amount.\\n    /// @param token Bet's token address.\\n    /// @param value Bet amount.\\n    error UnderMinBetAmount(address token, uint256 value);\\n\\n    /// @notice Bet provided doesn't exist or was already resolved.\\n    /// @param id Bet ID.\\n    error NotPendingBet(uint256 id);\\n\\n    /// @notice Bet isn't resolved yet.\\n    /// @param id Bet ID.\\n    error NotFulfilled(uint256 id);\\n\\n    /// @notice House edge is capped at 4%.\\n    /// @param houseEdge House edge rate.\\n    error ExcessiveHouseEdge(uint16 houseEdge);\\n\\n    /// @notice Token is not allowed.\\n    /// @param token Bet's token address.\\n    error ForbiddenToken(address token);\\n\\n    /// @notice Chainlink price feed not working\\n    /// @param linkWei LINK/ETH price returned.\\n    error InvalidLinkWeiPrice(int256 linkWei);\\n\\n    /// @notice The msg.value is not enough to cover Chainlink's fee.\\n    error WrongGasValueToCoverFee();\\n\\n    /// @notice Reverting error when sender isn't allowed.\\n    error AccessDenied();\\n\\n    /// @notice Modifier that checks that an account is allowed to interact.\\n    /// @param token The token address.\\n    modifier onlyTokenOwner(address token) {\\n        address partner = tokens[token].partner;\\n        if (\\n            partner == address(0)\\n                ? owner() != msg.sender\\n                : msg.sender != partner\\n        ) {\\n            revert AccessDenied();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initialize contract's state variables and VRF Consumer.\\n    /// @param bankAddress The address of the bank.\\n    /// @param chainlinkCoordinatorAddress Address of the Chainlink VRF Coordinator.\\n    /// @param numRandomWords How many random words is needed to resolve a game's bet.\\n    constructor(\\n        address bankAddress,\\n        address referralProgramAddress,\\n        address chainlinkCoordinatorAddress,\\n        uint16 numRandomWords,\\n        address LINK_ETH_feedAddress\\n    ) VRFConsumerBaseV2(chainlinkCoordinatorAddress) {\\n        setBank(IBank(bankAddress));\\n        setReferralProgram(IReferral(referralProgramAddress));\\n        chainlinkCoordinator = IVRFCoordinatorV2(chainlinkCoordinatorAddress);\\n        _numRandomWords = numRandomWords;\\n        LINK_ETH_feed = AggregatorV3Interface(LINK_ETH_feedAddress);\\n    }\\n\\n    /// @notice Sets the game house edge rate for a specific token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    /// @dev The house edge rate couldn't exceed 4%.\\n    function _setHouseEdge(address token, uint16 houseEdge) internal onlyOwner {\\n        if (houseEdge > 400) {\\n            revert ExcessiveHouseEdge(houseEdge);\\n        }\\n        tokens[token].houseEdge = houseEdge;\\n        emit SetHouseEdge(token, houseEdge);\\n    }\\n\\n    /// @notice Creates a new bet, request randomness to Chainlink, add the referrer,\\n    /// transfer the ERC20 tokens to the contract or refund the bet amount overflow if the bet amount exceed the maxBetAmount.\\n    /// @param token Address of the token.\\n    /// @param tokenAmount The number of tokens bet.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @param referrer Address of the referrer.\\n    /// @return A new Bet struct information.\\n    function _newBet(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 multiplier,\\n        address referrer\\n    ) internal whenNotPaused nonReentrant returns (Bet memory) {\\n        if (bank.isAllowedToken(token) == false) {\\n            revert ForbiddenToken(token);\\n        }\\n\\n        address user = msg.sender;\\n        bool isGasToken = token == address(0);\\n        uint256 fee = isGasToken ? (msg.value - tokenAmount) : msg.value;\\n        uint256 betAmount = isGasToken ? msg.value - fee : tokenAmount;\\n\\n        // Charge user for Chainlink VRF fee.\\n        {\\n            uint256 chainlinkVRFCost = getChainlinkVRFCost();\\n            if (fee < (chainlinkVRFCost - ((10 * chainlinkVRFCost) / 100))) {\\n                // 5% slippage.\\n                revert WrongGasValueToCoverFee();\\n            }\\n            tokens[token].VRFFees += fee;\\n        }\\n\\n        // Bet amount is capped.\\n        {\\n            if (\\n                betAmount < 10000 wei || betAmount < tokens[token].minBetAmount\\n            ) {\\n                revert UnderMinBetAmount(token, betAmount);\\n            }\\n\\n            uint256 maxBetAmount = bank.getMaxBetAmount(token, multiplier);\\n            if (betAmount > maxBetAmount) {\\n                if (isGasToken) {\\n                    Address.sendValue(payable(user), betAmount - maxBetAmount);\\n                }\\n                betAmount = maxBetAmount;\\n            }\\n        }\\n\\n        // Create bet\\n        uint256 id = chainlinkCoordinator.requestRandomWords(\\n            chainlinkConfig.keyHash,\\n            tokens[token].VRFSubId == 0\\n                ? chainlinkConfig.subId\\n                : tokens[token].VRFSubId,\\n            chainlinkConfig.requestConfirmations,\\n            chainlinkConfig.callbackGasLimit,\\n            _numRandomWords\\n        );\\n        Bet memory newBet = Bet(\\n            false,\\n            payable(user),\\n            token,\\n            id,\\n            betAmount,\\n            block.number,\\n            0,\\n            fee\\n        );\\n        _userBets[user].push(id);\\n        bets[id] = newBet;\\n\\n        // Add referrer\\n        if (\\n            referrer != address(0) &&\\n            _userBets[user].length == 1 &&\\n            !referralProgram.hasReferrer(user)\\n        ) {\\n            referralProgram.addReferrer(user, referrer);\\n        } else {\\n            referralProgram.updateReferrerActivity(user);\\n        }\\n\\n        // If ERC20, transfer the tokens\\n        if (!isGasToken) {\\n            IERC20(token).safeTransferFrom(user, address(this), betAmount);\\n        }\\n\\n        return newBet;\\n    }\\n\\n    /// @notice Resolves the bet based on the game child contract result.\\n    /// In case bet is won, the bet amount minus the house edge is transfered to user from the game contract, and the profit is transfered to the user from the Bank.\\n    /// In case bet is lost, the bet amount is transfered to the Bank from the game contract.\\n    /// @param bet The Bet struct information.\\n    /// @param wins Whether the bet is winning.\\n    /// @param payout What should be sent to the user in case of a won bet. Payout = bet amount + profit amount.\\n    /// @return The payout amount.\\n    /// @dev Should not revert as it resolves the bet with the randomness.\\n    function _resolveBet(\\n        Bet storage bet,\\n        bool wins,\\n        uint256 payout\\n    ) internal returns (uint256) {\\n        address payable user = bet.user;\\n        if (bet.resolved == true || user == address(0)) {\\n            revert NotPendingBet(bet.id);\\n        }\\n        address token = bet.token;\\n        uint256 betAmount = bet.amount;\\n        bool isGasToken = bet.token == address(0);\\n\\n        bet.resolved = true;\\n\\n        // Check for the result\\n        if (wins) {\\n            uint256 profit = payout - betAmount;\\n            uint256 betAmountFee = _getFees(token, betAmount);\\n            uint256 profitFee = _getFees(token, profit);\\n            uint256 fee = betAmountFee + profitFee;\\n\\n            payout -= fee;\\n\\n            uint256 betAmountPayout = betAmount - betAmountFee;\\n            uint256 profitPayout = profit - profitFee;\\n            // Transfer the bet amount from the contract\\n            if (isGasToken) {\\n                (bool success, ) = user.call{value: betAmountPayout}(\\\"\\\");\\n                if (!success) {\\n                    emit BetAmountTransferFail(\\n                        bet.id,\\n                        betAmount,\\n                        \\\"Missing gas token funds\\\"\\n                    );\\n                }\\n            } else {\\n                try\\n                    IERC20(token).transfer(user, betAmountPayout)\\n                {} catch Error(string memory reason) {\\n                    emit BetAmountTransferFail(bet.id, betAmountPayout, reason);\\n                }\\n                try\\n                    IERC20(token).transfer(address(bank), betAmountFee)\\n                {} catch Error(string memory reason) {\\n                    emit BetAmountFeeTransferFail(bet.id, betAmountFee, reason);\\n                }\\n            }\\n\\n            // Transfer the payout from the bank\\n            try\\n                bank.payout{value: isGasToken ? betAmountFee : 0}(\\n                    user,\\n                    token,\\n                    profitPayout,\\n                    fee\\n                )\\n            {} catch Error(string memory reason) {\\n                emit BetProfitTransferFail(bet.id, profitPayout, reason);\\n            }\\n        } else {\\n            payout = 0;\\n            if (!isGasToken) {\\n                try\\n                    IERC20(token).transfer(address(bank), betAmount)\\n                {} catch Error(string memory reason) {\\n                    emit BankTransferFail(bet.id, betAmount, reason);\\n                }\\n            }\\n            try\\n                bank.cashIn{value: isGasToken ? betAmount : 0}(token, betAmount)\\n            {} catch Error(string memory reason) {\\n                emit BankCashInFail(bet.id, betAmount, reason);\\n            }\\n        }\\n\\n        bet.payout = payout;\\n        return payout;\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Bet.\\n    function _getLastUserBets(address user, uint256 dataLength)\\n        internal\\n        view\\n        returns (Bet[] memory)\\n    {\\n        uint256[] memory userBetsIds = _userBets[user];\\n        uint256 betsLength = userBetsIds.length;\\n\\n        if (betsLength < dataLength) {\\n            dataLength = betsLength;\\n        }\\n\\n        Bet[] memory userBets = new Bet[](dataLength);\\n        if (dataLength > 0) {\\n            uint256 userBetsIndex = 0;\\n            for (uint256 i = betsLength; i > betsLength - dataLength; i--) {\\n                userBets[userBetsIndex] = bets[userBetsIds[i - 1]];\\n                userBetsIndex++;\\n            }\\n        }\\n\\n        return userBets;\\n    }\\n\\n    /// @notice Calculates the amount's fee based on the house edge.\\n    /// @param token Address of the token.\\n    /// @param amount From which the fee amount will be calculated.\\n    /// @return The fee amount.\\n    function _getFees(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (tokens[token].houseEdge * amount) / 10000;\\n    }\\n\\n    /// @notice Sets the Bank contract.\\n    /// @param _bank Address of the Bank contract.\\n    function setBank(IBank _bank) public onlyOwner {\\n        bank = _bank;\\n        emit SetBank(address(_bank));\\n    }\\n\\n    /// @notice Sets the new referral program.\\n    /// @param _referralProgram The referral program address.\\n    function setReferralProgram(IReferral _referralProgram) public onlyOwner {\\n        referralProgram = _referralProgram;\\n        emit SetReferralProgram(address(referralProgram));\\n    }\\n\\n    /// @notice Pauses the contract to disable new bets.\\n    function pause() external onlyOwner {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    /// @notice Sets the Chainlink VRF V2 configuration.\\n    /// @param subId Subscription ID.\\n    /// @param callbackGasLimit How much gas you would like in your callback to do work with the random words provided.\\n    /// @param requestConfirmations How many confirmations the Chainlink node should wait before responding.\\n    /// @param keyHash Hash of the public key used to verify the VRF proof.\\n    function setChainlinkConfig(\\n        uint64 subId,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations,\\n        bytes32 keyHash\\n    ) external onlyOwner {\\n        chainlinkConfig.subId = subId;\\n        chainlinkConfig.callbackGasLimit = callbackGasLimit;\\n        chainlinkConfig.requestConfirmations = requestConfirmations;\\n        chainlinkConfig.keyHash = keyHash;\\n    }\\n\\n    /// @notice Withdraws remaining tokens.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    /// @dev Useful in case some transfers failed during the bet resolution callback.\\n    function inCaseTokensGetStuck(address token, uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        if (token == address(0)) {\\n            Address.sendValue(payable(msg.sender), amount);\\n        } else {\\n            IERC20(token).safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Changes the token's partner address.\\n    /// @param token Address of the token.\\n    /// @param partner Address of the partner.\\n    function setTokenPartner(address token, address partner)\\n        external\\n        onlyTokenOwner(token)\\n    {\\n        tokens[token].partner = partner;\\n        emit SetTokenPartner(token, partner);\\n    }\\n\\n    /// @notice Sets the minimum bet amount for a specific token.\\n    /// @param token Address of the token.\\n    /// @param tokenMinBetAmount Minimum bet amount.\\n    function setTokenMinBetAmount(address token, uint256 tokenMinBetAmount)\\n        external\\n        onlyTokenOwner(token)\\n    {\\n        tokens[token].minBetAmount = tokenMinBetAmount;\\n        emit SetTokenMinBetAmount(token, tokenMinBetAmount);\\n    }\\n\\n    /// @notice Sets the Chainlink VRF subscription ID for a specific token.\\n    /// @param token Address of the token.\\n    /// @param subId Subscription ID.\\n    function setTokenVRFSubId(address token, uint64 subId)\\n        external\\n        onlyTokenOwner(token)\\n    {\\n        tokens[token].VRFSubId = subId;\\n        emit SetTokenVRFSubId(token, subId);\\n    }\\n\\n    /// @notice Distributes the token's collected Chainlink fees.\\n    /// @param token Address of the token.\\n    function withdrawTokensVRFFees(address token)\\n        external\\n        onlyTokenOwner(token)\\n    {\\n        uint256 tokenChainlinkFees = tokens[token].VRFFees;\\n        if (tokenChainlinkFees != 0) {\\n            tokens[token].VRFFees = 0;\\n            Address.sendValue(payable(msg.sender), tokenChainlinkFees);\\n            emit DistributeTokenVRFFees(token, tokenChainlinkFees);\\n        }\\n    }\\n\\n    /// @notice Refunds the bet to the user if the Chainlink VRF callback failed.\\n    /// @param id The Bet ID.\\n    function refundBet(uint256 id) external {\\n        Bet storage bet = bets[id];\\n        if (bet.resolved == true) {\\n            revert NotPendingBet(id);\\n        } else if (block.number < bet.blockNumber + 30) {\\n            revert NotFulfilled(id);\\n        }\\n\\n        bet.resolved = true;\\n        bet.payout = bet.amount;\\n\\n        if (bet.token == address(0)) {\\n            Address.sendValue(bet.user, bet.amount);\\n        } else {\\n            IERC20(bet.token).safeTransfer(bet.user, bet.amount);\\n        }\\n        emit BetRefunded(id, bet.user, bet.amount);\\n\\n        uint256 chainlinkVRFCost = bet.vrfCost;\\n        if (\\n            tokens[bet.token].VRFFees >= chainlinkVRFCost &&\\n            address(this).balance >= chainlinkVRFCost\\n        ) {\\n            tokens[bet.token].VRFFees -= chainlinkVRFCost;\\n            Address.sendValue(bet.user, chainlinkVRFCost);\\n        } else {\\n            emit BetCostRefundFail(id, bet.user, chainlinkVRFCost);\\n        }\\n    }\\n\\n    /// @notice Returns the amount of ETH that should be passed to the wager transaction\\n    /// to cover Chainlink VRF fee.\\n    /// @return The bet resolution cost amount.\\n    function getChainlinkVRFCost() public view returns (uint256) {\\n        (, int256 weiPerUnitLink, , , ) = LINK_ETH_feed.latestRoundData();\\n        if (weiPerUnitLink <= 0) {\\n            revert InvalidLinkWeiPrice(weiPerUnitLink);\\n        }\\n        // Get Chainlink VRF v2 fee amount.\\n        (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = chainlinkCoordinator.getFeeConfig();\\n        // 115000 gas is the average Verification gas of Chainlink VRF.\\n        return\\n            (tx.gasprice * (115000 + chainlinkConfig.callbackGasLimit)) +\\n            ((1e12 *\\n                uint256(fulfillmentFlatFeeLinkPPMTier1) *\\n                uint256(weiPerUnitLink)) / 1e18);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralProgramAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LINK_ETH_feedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minCap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxCap\",\"type\":\"uint8\"}],\"name\":\"CapNotInRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"ExcessiveHouseEdge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ForbiddenToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"linkWei\",\"type\":\"int256\"}],\"name\":\"InvalidLinkWeiPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NotFulfilled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NotPendingBet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnderMinBetAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongGasValueToCoverFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BankCashInFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BankTransferFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BetAmountFeeTransferFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BetAmountTransferFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainlinkVRFCost\",\"type\":\"uint256\"}],\"name\":\"BetCostRefundFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BetProfitTransferFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeTokenVRFFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rolled\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"SetHouseEdge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCap\",\"type\":\"uint256\"}],\"name\":\"SetMinCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralProgram\",\"type\":\"address\"}],\"name\":\"SetReferralProgram\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"SetTokenMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"SetTokenPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"SetTokenVRFSubId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_ETH_feed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vrfCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"diceBets\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rolled\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkVRFCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getLastUserBets\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vrfCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Game.Bet\",\"name\":\"bet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rolled\",\"type\":\"uint8\"}],\"internalType\":\"struct Dice.DiceBet\",\"name\":\"diceBet\",\"type\":\"tuple\"}],\"internalType\":\"struct Dice.FullDiceBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"}],\"name\":\"getPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralProgram\",\"outputs\":[{\"internalType\":\"contract IReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBank\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"setChainlinkConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_houseEdge\",\"type\":\"uint16\"}],\"name\":\"setHouseEdgeAndMinCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReferral\",\"name\":\"_referralProgram\",\"type\":\"address\"}],\"name\":\"setReferralProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMinBetAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"setTokenPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"setTokenVRFSubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"VRFSubId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VRFFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensMinCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"wager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokensVRFFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Dice", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "8000", "ConstructorArguments": "0000000000000000000000001a54574cbae9f8a4f9dd19d56687f2266d0c9d31000000000000000000000000d0b6d4503207588b677f79876cf12724baff70f8000000000000000000000000ae975071be8f8ee67addbc1a82488f1c248580670000000000000000000000005787befdc0ecd210dfa948264631cd53e68f7802", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}