{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EIP1559Burn.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    function withdraw(uint256 amount) external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external view returns (uint256);\\n}\\n\\ninterface IERC20Predicate {\\n    function startExitWithBurntTokens(bytes calldata data) external;\\n}\\n\\ninterface IWithdrawManager {\\n    function processExits(address _token) external;\\n}\\n\\ncontract EIP1559Burn {\\n    IERC20 public immutable maticRootToken;\\n    IERC20 public immutable maticChildToken = IERC20(0x0000000000000000000000000000000000001010);\\n    IWithdrawManager public immutable withdrawManager;\\n    uint24 public immutable rootChainId;\\n    uint24 public immutable childChainId;\\n\\n    constructor(\\n        IERC20 _maticRootToken,\\n        IWithdrawManager _withdrawManager,\\n        uint24 _rootChainId,\\n        uint24 _childChainId\\n        ) {\\n        maticRootToken = _maticRootToken;\\n        withdrawManager = _withdrawManager;\\n        rootChainId = _rootChainId;\\n        childChainId = _childChainId;\\n    }\\n\\n    modifier onlyRootChain() {\\n        require(block.chainid == rootChainId, \\\"ONLY_ROOT\\\");\\n        _;\\n    }\\n\\n    modifier onlyChildChain() {\\n        require(block.chainid == childChainId, \\\"ONLY_CHILD\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n\\n    }\\n\\n    function withdraw() external onlyChildChain payable {\\n        maticChildToken.withdraw{value: address(this).balance}(address(this).balance);\\n    }\\n\\n    function initiateExit(IERC20Predicate _erc20Predicate, bytes calldata data) external onlyRootChain {\\n        _erc20Predicate.startExitWithBurntTokens(data);\\n    }\\n\\n    function exit() external onlyRootChain {\\n        require(gasleft() > 370000, \\\"MORE_GAS_NEEDED\\\"); // WithdrawManager needs 300k, 65k for ERC20 transfer + leeway\\n        withdrawManager.processExits(address(maticRootToken));\\n        uint256 tokenBalance = maticRootToken.balanceOf(address(this));\\n        if (tokenBalance > 0) {\\n            maticRootToken.transfer(0x000000000000000000000000000000000000dEaD, tokenBalance);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_maticRootToken\",\"type\":\"address\"},{\"internalType\":\"contract IWithdrawManager\",\"name\":\"_withdrawManager\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_rootChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_childChainId\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"childChainId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Predicate\",\"name\":\"_erc20Predicate\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initiateExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticChildToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticRootToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawManager\",\"outputs\":[{\"internalType\":\"contract IWithdrawManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EIP1559Burn", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000007d1afa7b718fb893db30a3abc0cfc608aacfebb00000000000000000000000002a88696e0ffa76baa1338f2c74497cc01349592200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000089", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}