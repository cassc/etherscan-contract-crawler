{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract Polytrust is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    event regLevelEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _time\r\n    );\r\n    event buyLevelEvent(address indexed _user, uint256 _level, uint256 _time);\r\n\r\n    mapping(uint256 => uint256) public LEVEL_PRICE;\r\n    uint256 REFERRER_1_LEVEL_LIMIT;\r\n\r\n    uint256 directpercentage;\r\n    uint256 indirectpercentage;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerID;\r\n        uint256 currentLevel;\r\n        uint256 earnedAmount;\r\n        uint256 totalearnedAmount;\r\n        address[] referral;\r\n        address[] allDirect;\r\n        uint256 childCount;\r\n        uint256 upgradeAmount;\r\n        uint256 upgradePending;\r\n        mapping(uint256 => uint256) levelEarningmissed;\r\n    }\r\n\r\n    mapping(address => UserStruct) public users;\r\n\r\n    mapping(uint256 => address) public userList;\r\n\r\n    uint256 public currUserID;\r\n    uint256 public totalUsers;\r\n    address public ownerWallet;\r\n    uint256 public adminFee;\r\n    address[] public joinedAddress;\r\n    mapping(address => uint256) public userJoinTimestamps;\r\n    uint256 public totalProfit;\r\n    uint256 public totalDays;\r\n\r\n    uint256 public initialRoi;\r\n    uint256 public allRoi;\r\n    uint256 public roiLaunchTime;\r\n    mapping(address => uint256) public userUpgradetime;\r\n    mapping(address => uint256) public roiEndTime;\r\n    mapping(address => uint256) public roiStartTime;\r\n\r\n    Polytrust public oldPolytrust;\r\n    address public migrateOwner;\r\n\r\n    constructor() public{\r\n        ownerWallet = address(0xF24362C2be0E2d397d0fb7D5fb4269A2DBd0b8B2);\r\n        REFERRER_1_LEVEL_LIMIT = 2;\r\n        currUserID = 1;\r\n        totalUsers = 1;\r\n        directpercentage = 2000; //20%\r\n        indirectpercentage = 0; //12%\r\n        adminFee = 10 * 1e18; // 10Matic\r\n        initialRoi = 1500;\r\n        allRoi = 1500;\r\n        roiLaunchTime = 43406218;\r\n\r\n        LEVEL_PRICE[1] = 10 * 1e18;\r\n        LEVEL_PRICE[2] = 20 * 1e18;\r\n        LEVEL_PRICE[3] = 40 * 1e18;\r\n        LEVEL_PRICE[4] = 160 * 1e18;\r\n        LEVEL_PRICE[5] = 1280 * 1e18;\r\n        LEVEL_PRICE[6] = 20480 * 1e18;\r\n        LEVEL_PRICE[7] = 20480 * 1e18;\r\n        LEVEL_PRICE[8] = 40960 * 1e18;\r\n        LEVEL_PRICE[9] = 163840 * 1e18;\r\n        LEVEL_PRICE[10] = 1310720 * 1e18;\r\n\r\n        UserStruct storage user = users[ownerWallet];\r\n        user.isExist = true;\r\n        user.id = currUserID;\r\n        user.referrerID = 0;\r\n        user.currentLevel = 10;\r\n        user.earnedAmount = 0;\r\n        user.totalearnedAmount = 0;\r\n        user.referral = new address[](0);\r\n        user.allDirect = new address[](0);\r\n        user.childCount = 0;\r\n        user.upgradeAmount = 0;\r\n        user.upgradePending = 0;\r\n        user.levelEarningmissed[1] = 0;\r\n        user.levelEarningmissed[2] = 0;\r\n        user.levelEarningmissed[3] = 0;\r\n        user.levelEarningmissed[4] = 0;\r\n        user.levelEarningmissed[5] = 0;\r\n        user.levelEarningmissed[6] = 0;\r\n        user.levelEarningmissed[7] = 0;\r\n        user.levelEarningmissed[8] = 0;\r\n        user.levelEarningmissed[9] = 0;\r\n        user.levelEarningmissed[10] = 0;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        userUpgradetime[ownerWallet] = block.timestamp;\r\n        roiStartTime[ownerWallet] = block.timestamp;\r\n        roiEndTime[ownerWallet] = block.timestamp + 100 days;\r\n        oldPolytrust = Polytrust(0x21d8c29C908355989ef392676Af3DF29A71f9bA9);\r\n        migrateOwner = address(0xF24362C2be0E2d397d0fb7D5fb4269A2DBd0b8B2);\r\n    }\r\n\r\n    function regUser(address _referrer) public payable noReentrant {\r\n        require(!users[msg.sender].isExist, \"User exist\");\r\n        require(users[_referrer].isExist, \"Invalid referal\");\r\n\r\n        uint256 _referrerID = users[_referrer].id;\r\n\r\n        require(msg.value == LEVEL_PRICE[1] * 3, \"Incorrect Value\");\r\n\r\n        if (\r\n            users[userList[_referrerID]].referral.length >=\r\n            REFERRER_1_LEVEL_LIMIT\r\n        ) {\r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n        }\r\n\r\n        currUserID++;\r\n        totalUsers++;\r\n\r\n        UserStruct storage user = users[msg.sender];\r\n        user.isExist = true;\r\n        user.id = currUserID;\r\n        user.referrerID = _referrerID;\r\n        user.currentLevel = 1;\r\n        user.earnedAmount = 0;\r\n        user.totalearnedAmount = 0;\r\n        user.referral = new address[](0);\r\n        user.allDirect = new address[](0);\r\n        user.childCount = 0;\r\n        user.upgradeAmount = 0;\r\n        user.upgradePending = 0;\r\n        user.levelEarningmissed[2] = 0;\r\n        user.levelEarningmissed[3] = 0;\r\n        user.levelEarningmissed[4] = 0;\r\n        user.levelEarningmissed[5] = 0;\r\n        user.levelEarningmissed[6] = 0;\r\n        user.levelEarningmissed[7] = 0;\r\n        user.levelEarningmissed[8] = 0;\r\n        user.levelEarningmissed[9] = 0;\r\n        user.levelEarningmissed[10] = 0;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n        joinedAddress.push(msg.sender);\r\n        users[_referrer].allDirect.push(msg.sender);\r\n        users[_referrer].childCount = users[_referrer].childCount.add(1);\r\n        address refAddr = userList[_referrerID];\r\n        uint256 refId = users[refAddr].referrerID;\r\n        payReferal(_referrer, refId);\r\n        payForLevel(1, msg.sender);\r\n        userJoinTimestamps[msg.sender] = block.timestamp;\r\n        userUpgradetime[msg.sender] = block.timestamp;\r\n        roiStartTime[msg.sender] = block.timestamp;\r\n        roiEndTime[msg.sender] = block.timestamp + 100 days;\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], block.timestamp);\r\n    }\r\n\r\n    function payReferal(address _referrer, uint256 indirectRefId) internal {\r\n        address indirectRefAddr = userList[indirectRefId];\r\n        if (indirectRefAddr == 0x0000000000000000000000000000000000000000) {\r\n            indirectRefAddr = ownerWallet;\r\n        }\r\n        uint256 levelPrice = LEVEL_PRICE[1] * 3;\r\n        uint256 directAmount = (levelPrice * directpercentage) / 10000;\r\n        uint256 indirectAmount = (levelPrice * indirectpercentage) / 10000;\r\n        payable(ownerWallet).transfer(adminFee);\r\n        users[ownerWallet].totalearnedAmount += adminFee;\r\n\r\n        if (users[_referrer].currentLevel < 10) {\r\n            users[_referrer].earnedAmount += directAmount;\r\n        } else {\r\n            users[_referrer].earnedAmount += directAmount;\r\n        }\r\n        totalProfit += directAmount;\r\n\r\n        if (users[indirectRefAddr].currentLevel < 10) {\r\n            users[indirectRefAddr].earnedAmount += indirectAmount;\r\n        } else {\r\n            users[indirectRefAddr].earnedAmount += indirectAmount;\r\n        }\r\n\r\n        totalProfit += indirectAmount;\r\n    }\r\n\r\n    function payForLevel(uint256 _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n        if (_level == 1 || _level == 6) {\r\n            referer = userList[users[_user].referrerID];\r\n        } else if (_level == 2 || _level == 7) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if (_level == 3 || _level == 8) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if (_level == 4 || _level == 9) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        } else if (_level == 5 || _level == 10) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer = userList[users[referer4].referrerID];\r\n        }\r\n        uint256 upgradedAmount = 0;\r\n        if (users[_user].upgradePending >= LEVEL_PRICE[_level]) {\r\n            users[_user].currentLevel = _level;\r\n            uint256 oldupgrade = users[_user].upgradePending -\r\n                users[_user].upgradeAmount;\r\n            if (users[msg.sender].upgradePending > LEVEL_PRICE[_level]) {\r\n                users[_user].upgradeAmount =\r\n                    users[msg.sender].upgradePending -\r\n                    LEVEL_PRICE[_level];\r\n            } else {\r\n                users[_user].upgradeAmount = 0;\r\n            }\r\n            users[_user].upgradePending = 0;\r\n            upgradedAmount = LEVEL_PRICE[_level] - oldupgrade;\r\n\r\n            //update old Roi into earning\r\n            uint256 _checkRoiupto = checkRoiUpto(_user);\r\n            users[_user].earnedAmount += _checkRoiupto;\r\n            userUpgradetime[_user] = block.timestamp;\r\n            totalProfit += _checkRoiupto;\r\n        } else {\r\n            upgradedAmount = users[_user].upgradeAmount;\r\n            users[_user].upgradeAmount = 0;\r\n        }\r\n\r\n        if (\r\n            users[_user].levelEarningmissed[_level] > 0 &&\r\n            users[_user].currentLevel >= _level\r\n        ) {\r\n            users[_user].earnedAmount +=\r\n                users[_user].levelEarningmissed[_level] /\r\n                2;\r\n            users[_user].upgradeAmount +=\r\n                users[_user].levelEarningmissed[_level] /\r\n                2;\r\n            if (users[_user].upgradeAmount > 0) {\r\n                autoUpgrade(_user);\r\n            }\r\n            users[_user].levelEarningmissed[_level] = 0;\r\n            totalProfit += users[_user].levelEarningmissed[_level];\r\n        }\r\n        bool isSend = true;\r\n        if (!users[referer].isExist) {\r\n            isSend = false;\r\n        }\r\n        if (isSend) {\r\n            if (users[referer].currentLevel >= _level) {\r\n                if (users[referer].currentLevel < 10) {\r\n                    if (_level == 1) {\r\n                        users[referer].upgradeAmount += LEVEL_PRICE[_level];\r\n                        autoUpgrade(referer);\r\n                        totalProfit += LEVEL_PRICE[_level];\r\n                    } else {\r\n                        users[referer].upgradeAmount += upgradedAmount / 2;\r\n                        autoUpgrade(referer);\r\n                        users[referer].earnedAmount += upgradedAmount / 2;\r\n                        totalProfit += upgradedAmount;\r\n                    }\r\n                } else {\r\n                    uint256 missedAmount = (_level == 1)\r\n                        ? LEVEL_PRICE[_level]\r\n                        : upgradedAmount;\r\n                    users[referer].earnedAmount += missedAmount;\r\n                    totalProfit += missedAmount;\r\n                }\r\n            } else {\r\n                users[referer].levelEarningmissed[_level] += upgradedAmount;\r\n            }\r\n        } else {\r\n            uint256 missedAmount = (_level == 1)\r\n                ? LEVEL_PRICE[_level]\r\n                : upgradedAmount;\r\n            users[ownerWallet].earnedAmount += missedAmount;\r\n        }\r\n    }\r\n\r\n    function claimRewards() public noReentrant {\r\n        require(users[msg.sender].isExist, \"User not registered\");\r\n        uint256 _checkRoiupto = checkRoiUpto(msg.sender);\r\n        users[msg.sender].earnedAmount += _checkRoiupto;\r\n        totalProfit += _checkRoiupto;\r\n        userUpgradetime[msg.sender] = block.timestamp;\r\n        uint256 claimAmount = users[msg.sender].earnedAmount;\r\n        require(claimAmount > 0, \"Invalid Claim\");\r\n        payable(msg.sender).transfer(claimAmount);\r\n        users[msg.sender].totalearnedAmount += claimAmount;\r\n        users[msg.sender].earnedAmount = 0;\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns (address) {\r\n        if (users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) {\r\n            return _user;\r\n        }\r\n        address[] memory referrals = new address[](600);\r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for (uint256 i = 0; i < 600; i++) {\r\n            if (users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if (i < 120) {\r\n                    referrals[(i + 1) * 2] = users[referrals[i]].referral[0];\r\n                    referrals[(i + 1) * 2 + 1] = users[referrals[i]].referral[\r\n                        1\r\n                    ];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(\r\n        address _user\r\n    ) public view returns (address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function getmissedvalue(\r\n        address _userAddress,\r\n        uint256 _level\r\n    ) public view returns (uint256) {\r\n        return users[_userAddress].levelEarningmissed[_level];\r\n    }\r\n\r\n    function viewallDirectUserReferral(\r\n        address _user\r\n    ) public view returns (address[] memory) {\r\n        return users[_user].allDirect;\r\n    }\r\n\r\n    function getUsersJoinedLast24Hours() external view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < totalUsers; i++) {\r\n            address userAddress = userList[i];\r\n            if (\r\n                userJoinTimestamps[userAddress] != 0 &&\r\n                block.timestamp - userJoinTimestamps[userAddress] <= 86400\r\n            ) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == ownerWallet, \"Not an Owner\");\r\n    }\r\n\r\n    function checkTime(address _user) public view returns (uint256) {\r\n        uint256 startTime = userUpgradetime[_user];\r\n        uint256 endTime = roiEndTime[_user];\r\n        if (!users[_user].isExist) {\r\n            return 0;\r\n        }\r\n        if (userUpgradetime[_user] == 0) {\r\n            startTime = roiLaunchTime;\r\n        }\r\n        if (endTime == 0) {\r\n            endTime = startTime + 100 days;\r\n        }\r\n        uint diff = 0;\r\n\r\n        if (block.timestamp <= endTime) {\r\n            uint256 startDate = startTime;\r\n            uint256 endDate = block.timestamp;\r\n            diff = (endDate - startDate) / 60 / 60 / 24;\r\n        } else {\r\n            if (endTime > startTime) {\r\n                uint256 startDate = startTime;\r\n                uint256 endDate = endTime;\r\n                diff = (endDate - startDate) / 60 / 60 / 24;\r\n            }\r\n        }\r\n        return diff;\r\n    }\r\n\r\n    function checkRoiUpto(address _user) public view returns (uint256) {\r\n        uint256 startTime = userUpgradetime[_user];\r\n        uint256 endTime = roiEndTime[_user];\r\n        if (!users[_user].isExist) {\r\n            return 0;\r\n        }\r\n        if (userUpgradetime[_user] == 0) {\r\n            startTime = roiLaunchTime;\r\n        }\r\n        if (endTime == 0) {\r\n            endTime = startTime + 100 days;\r\n        }\r\n        uint256 dailyroi = 0;\r\n        uint diff = 0;\r\n        if (block.timestamp <= endTime) {\r\n            uint256 startDate = startTime;\r\n            uint256 endDate = block.timestamp;\r\n            diff = (endDate - startDate) / 60 / 60 / 24;\r\n        } else {\r\n            if (endTime > startTime) {\r\n                uint256 startDate = startTime;\r\n                uint256 endDate = endTime;\r\n                diff = (endDate - startDate) / 60 / 60 / 24;\r\n            }\r\n        }\r\n        // check user level\r\n\r\n        if (users[_user].currentLevel == 1) {\r\n            dailyroi = (LEVEL_PRICE[1] * initialRoi) / 100;\r\n        } else {\r\n            uint256 useramount = 0;\r\n            if (\r\n                users[_user].currentLevel > 1 && users[_user].currentLevel <= 2\r\n            ) {\r\n                useramount = LEVEL_PRICE[users[_user].currentLevel];\r\n            } else {\r\n                useramount = LEVEL_PRICE[2];\r\n            }\r\n            dailyroi = (useramount * allRoi) / 100;\r\n        }\r\n        uint256 uptoroi = diff.mul(dailyroi).div(1000);\r\n        return uptoroi;\r\n    }\r\n\r\n    function autoUpgrade(address _user) internal {\r\n        require(users[_user].isExist, \"User not registered\");\r\n        require(users[_user].upgradeAmount >= 0, \"Insufficient amount\");\r\n        uint256 currentLevel = users[_user].currentLevel;\r\n        uint256 nextLevel = currentLevel + 1;\r\n        if (nextLevel <= 10) {\r\n            users[_user].upgradePending += users[_user].upgradeAmount;\r\n            payForLevel(nextLevel, _user);\r\n        }\r\n    }\r\n\r\n    function depositToUpgrade() public payable noReentrant {\r\n        require(users[msg.sender].isExist, \"User Not exist\");\r\n        require(msg.value > 0, \"Not a valid Amount\");\r\n        users[msg.sender].upgradeAmount += msg.value;\r\n        autoUpgrade(msg.sender);\r\n    }\r\n\r\n    function safeWithDraw(uint256 _amount, address payable addr) public {\r\n        require(msg.sender == ownerWallet, \"Not an Owner\");\r\n        addr.transfer(_amount);\r\n    }\r\n\r\n    function oldPolytrustSync(uint256 oldId, uint limit) public {\r\n        require(address(oldPolytrust) != address(0), \"Initialize closed\");\r\n        require(msg.sender == migrateOwner, \"Access denied\");\r\n        for (uint i = 0; i < limit; i++) {\r\n            UserStruct memory olduser;\r\n            address oldusers = oldPolytrust.userList(oldId);\r\n\r\n            (\r\n                olduser.isExist,\r\n                olduser.id,\r\n                olduser.referrerID,\r\n                olduser.currentLevel,\r\n                ,\r\n                ,\r\n                olduser.childCount,\r\n                olduser.upgradeAmount,\r\n                olduser.upgradePending\r\n            ) = oldPolytrust.users(oldusers);\r\n\r\n            if (olduser.isExist) {\r\n                users[oldusers].isExist = olduser.isExist;\r\n                users[oldusers].id = olduser.id;\r\n                users[oldusers].referrerID = olduser.referrerID;\r\n                users[oldusers].currentLevel = olduser.currentLevel;\r\n                users[oldusers].earnedAmount = 0;\r\n                users[oldusers].totalearnedAmount = 0;\r\n                users[oldusers].referral = oldPolytrust.viewUserReferral(\r\n                    oldusers\r\n                );\r\n                users[oldusers].allDirect = oldPolytrust\r\n                    .viewallDirectUserReferral(oldusers);\r\n                users[oldusers].childCount = olduser.childCount;\r\n                users[oldusers].upgradeAmount = olduser.upgradeAmount;\r\n                users[oldusers].upgradePending = olduser.upgradePending;\r\n\r\n                for (uint256 level = 0; level < 10; level++) {\r\n                    users[oldusers].levelEarningmissed[\r\n                        level.add(1)\r\n                    ] = oldPolytrust.getmissedvalue(oldusers, level.add(1));\r\n                }\r\n                userList[oldId] = oldusers;\r\n                joinedAddress.push(oldusers);\r\n                userJoinTimestamps[oldusers] = oldPolytrust.userJoinTimestamps(\r\n                    oldusers\r\n                );\r\n                oldId++;\r\n            }\r\n        }\r\n        totalProfit = oldPolytrust.totalProfit();\r\n        totalUsers = oldPolytrust.totalUsers();\r\n        currUserID = oldPolytrust.currUserID();\r\n    }\r\n\r\n    function oldPolytrustSync1(uint256 oldId, uint limit) public {\r\n        require(address(oldPolytrust) != address(0), \"Initialize closed\");\r\n        require(msg.sender == migrateOwner, \"Access denied\");\r\n\r\n        for (uint i = 0; i < limit; i++) {\r\n            UserStruct memory olduser1;\r\n            address oldusers1 = oldPolytrust.userList(oldId);\r\n            (\r\n                olduser1.isExist,\r\n                ,\r\n                ,\r\n                ,\r\n                olduser1.earnedAmount,\r\n                olduser1.totalearnedAmount,\r\n                ,\r\n                ,\r\n\r\n            ) = oldPolytrust.users(oldusers1);\r\n            if (olduser1.isExist) {\r\n                users[oldusers1].earnedAmount = olduser1.earnedAmount;\r\n                users[oldusers1].totalearnedAmount = olduser1.totalearnedAmount;\r\n                userUpgradetime[oldusers1] = oldPolytrust.userUpgradetime(\r\n                    oldusers1\r\n                );\r\n                roiStartTime[oldusers1] = oldPolytrust.roiStartTime(oldusers1);\r\n                roiEndTime[oldusers1] = oldPolytrust.roiEndTime(oldusers1);\r\n                oldId++;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkRoiUpto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToUpgrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersJoinedLast24Hours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getmissedvalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"joinedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldPolytrust\",\"outputs\":[{\"internalType\":\"contract Polytrust\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"oldPolytrustSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"oldPolytrustSync1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"regUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roiEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roiLaunchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roiStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"safeWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userJoinTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpgradetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalearnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewallDirectUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Polytrust", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://078984c1ac9cb4cf0a3a03ba91b9bcef9cfac64a54e0daf30846210af6abd588"}