{"SourceCode": "{\"EvaverseHoverboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\n\\r\\ncontract EvaverseHoverboard is Proxy {\\r\\n    constructor (address logicAddress) {\\r\\n        _delegateAddress = logicAddress;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// We can\\u0027t use the default implementation of OpenZeppelin\\u0027s Ownable because it uses a constructor which doesn\\u0027t work with Proxy contracts\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address internal _owner;\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function SetOwner(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n// This is mostly lifted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\\r\\n// Honorably mentions should be: https://fravoll.github.io/solidity-patterns/proxy_delegate.html\\r\\n// which guided me to: https://github.com/fravoll/solidity-patterns/tree/master/ProxyDelegate\\r\\n\\r\\n// Good Info here: https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\r\\n\\r\\n// Sample ERC721 Upgradable contract: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/master/contracts/token/ERC721\\r\\n\\r\\nabstract contract Proxy is Ownable {\\r\\n\\r\\n    address internal _delegateAddress;\\r\\n    \\r\\n    function GetLogic() external view onlyOwner returns (address) {\\r\\n        return _delegateAddress;\\r\\n    }\\r\\n\\r\\n    function SetLogic(address delegate) external onlyOwner {\\r\\n        _delegateAddress = delegate;\\r\\n    }\\r\\n\\r\\n    fallback () external payable {\\r\\n        _delegate(_delegateAddress);\\r\\n    }\\r\\n\\r\\n    receive () external payable {\\r\\n        _delegate(_delegateAddress);\\r\\n    }\\r\\n    \\r\\n    function _delegate(address implementation) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            //Optional, if we wan\\u0027t to get rid of the param to this function, load from member variable\\r\\n            //let _target := sload(0)\\r\\n            \\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don\\u0027t know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ProxyTarget is Ownable {\\r\\n    address internal _delegateAddress;\\r\\n    \\r\\n    function GetLogicContract() external view onlyOwner returns (address) {\\r\\n        return _delegateAddress;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"GetLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"SetLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EvaverseHoverboard", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cee36bdd217b368858367b952d3cc578e2ee39b5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0xcee36bdd217b368858367b952d3cc578e2ee39b5", "SwarmSource": "ipfs://8115f82eda2813ef8788606d337a1ec391bc384a1afc70abd215b54bca5b1925"}