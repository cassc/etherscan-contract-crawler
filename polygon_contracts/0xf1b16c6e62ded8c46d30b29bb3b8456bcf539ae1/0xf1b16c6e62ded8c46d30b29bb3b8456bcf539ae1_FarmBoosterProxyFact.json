{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"FarmBoosterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IMasterChefV2.sol\\\";\\r\\nimport \\\"./IFarmBooster.sol\\\";\\r\\n\\r\\ncontract FarmBoosterProxy is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // The address of the farm booster proxy factory\\r\\n    address public immutable FARM_BOOSTER_PROXY_FACTORY;\\r\\n    IMasterChefV2 public masterchefV2;\\r\\n    IERC20 public cakeToken;\\r\\n    IFarmBooster public farmBooster;\\r\\n\\r\\n    address public admin;\\r\\n    // Whether it is initialized\\r\\n    bool public isInitialized;\\r\\n    // Record whether lp was approved\\r\\n    mapping(address =\\u003e bool) public lpApproved;\\r\\n\\r\\n    event DepositByProxy(address indexed user, address indexed proxy, uint256 indexed pid, uint256 amount);\\r\\n    event WithdrawByProxy(address indexed user, address indexed proxy, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdrawByProxy(address indexed user, address indexed proxy, uint256 indexed pid);\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     */\\r\\n    constructor() {\\r\\n        FARM_BOOSTER_PROXY_FACTORY = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the msg.sender is the admin address.\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"admin: wut?\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It initializes the contract\\r\\n     * @dev It can only be called once.\\r\\n     * @param _admin: the admin address\\r\\n     * @param _farmBooster: the farm booster address\\r\\n     * @param _masterchefV2: the address of the Masterchef V2\\r\\n     * @param _cakeToken: the address of the cake token\\r\\n     */\\r\\n    function initialize(\\r\\n        address _admin,\\r\\n        address _farmBooster,\\r\\n        address _masterchefV2,\\r\\n        address _cakeToken\\r\\n    ) external {\\r\\n        require(!isInitialized, \\\"Operations: Already initialized\\\");\\r\\n        require(msg.sender == FARM_BOOSTER_PROXY_FACTORY, \\\"Operations: Not factory\\\");\\r\\n\\r\\n        // Make this contract initialized\\r\\n        isInitialized = true;\\r\\n        admin = _admin;\\r\\n        farmBooster = IFarmBooster(_farmBooster);\\r\\n        masterchefV2 = IMasterChefV2(_masterchefV2);\\r\\n        cakeToken = IERC20(_cakeToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit LP tokens to pool.\\r\\n     * @dev It can only be called by admin.\\r\\n     * @param _pid The id of the pool.\\r\\n     * @param _amount Amount of LP tokens to deposit.\\r\\n     */\\r\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant onlyAdmin {\\r\\n        uint256 poolLength = masterchefV2.poolLength();\\r\\n        require(_pid \\u003c poolLength, \\\"Pool is not exist\\\");\\r\\n        address lpAddress = masterchefV2.lpToken(_pid);\\r\\n        IERC20(lpAddress).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        if (!lpApproved[lpAddress]) {\\r\\n            IERC20(lpAddress).approve(address(masterchefV2), type(uint256).max);\\r\\n            lpApproved[lpAddress] = true;\\r\\n        }\\r\\n        masterchefV2.deposit(_pid, _amount);\\r\\n        harvestCake();\\r\\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\\r\\n        emit DepositByProxy(msg.sender, address(this), _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw LP tokens from pool.\\r\\n     * @dev It can only be called by admin.\\r\\n     * @param _pid The id of the pool.\\r\\n     * @param _amount Amount of LP tokens to withdraw.\\r\\n     */\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant onlyAdmin {\\r\\n        uint256 poolLength = masterchefV2.poolLength();\\r\\n        require(_pid \\u003c poolLength, \\\"Pool is not exist\\\");\\r\\n        masterchefV2.withdraw(_pid, _amount);\\r\\n        address lpAddress = masterchefV2.lpToken(_pid);\\r\\n        IERC20(lpAddress).safeTransfer(msg.sender, _amount);\\r\\n        harvestCake();\\r\\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\\r\\n        emit WithdrawByProxy(msg.sender, address(this), _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\r\\n     * @dev It can only be called by admin.\\r\\n     * @param _pid The id of the pool.\\r\\n     */\\r\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant onlyAdmin {\\r\\n        uint256 poolLength = masterchefV2.poolLength();\\r\\n        require(_pid \\u003c poolLength, \\\"Pool is not exist\\\");\\r\\n        masterchefV2.emergencyWithdraw(_pid);\\r\\n        address lpAddress = masterchefV2.lpToken(_pid);\\r\\n        IERC20(lpAddress).safeTransfer(msg.sender, IERC20(lpAddress).balanceOf(address(this)));\\r\\n        harvestCake();\\r\\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\\r\\n        emit EmergencyWithdrawByProxy(msg.sender, address(this), _pid);\\r\\n    }\\r\\n\\r\\n    function harvestCake() internal {\\r\\n        uint256 cakeBalance = cakeToken.balanceOf(address(this));\\r\\n        if (cakeBalance \\u003e 0) {\\r\\n            cakeToken.safeTransfer(msg.sender, cakeBalance);\\r\\n        }\\r\\n    }\\r\\n}\"},\"FarmBoosterProxyFactory.sol\":{\"content\":\"/**\\r\\nplaxswap.io\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./IFarmBooster.sol\\\";\\r\\nimport \\\"./FarmBoosterProxy.sol\\\";\\r\\n\\r\\ncontract FarmBoosterProxyFactory {\\r\\n    address public immutable Farm_Booster;\\r\\n    address public immutable masterchefV2;\\r\\n    address public immutable cakeToken;\\r\\n    // Record the user proxy contract address\\r\\n    mapping(address =\\u003e address) public proxyContract;\\r\\n    // Record the user address corresponding to the proxy\\r\\n    mapping(address =\\u003e address) public proxyUser;\\r\\n    event NewFarmBoosterProxyContract(address indexed farmBoosterProxyAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _farmBooster: the address of the farm booster\\r\\n     * @param _masterchefV2: the address of the Masterchef V2\\r\\n     * @param _cakeToken: the address of the cake token\\r\\n     */\\r\\n    constructor(\\r\\n        address _farmBooster,\\r\\n        address _masterchefV2,\\r\\n        address _cakeToken\\r\\n    ) {\\r\\n        Farm_Booster = _farmBooster;\\r\\n        masterchefV2 = _masterchefV2;\\r\\n        cakeToken = _cakeToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It creates the farm booster Proxy contract and initializes the contract.\\r\\n     */\\r\\n    function createFarmBoosterProxy() external {\\r\\n        require(proxyContract[msg.sender] == address(0), \\\"The current user already has a proxy\\\");\\r\\n        bytes memory bytecode = type(FarmBoosterProxy).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(block.timestamp, block.number, msg.sender));\\r\\n        address farmBoosterProxyAddress;\\r\\n\\r\\n        assembly {\\r\\n            farmBoosterProxyAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        require(proxyUser[farmBoosterProxyAddress] == address(0), \\\"Proxy already exists\\\");\\r\\n\\r\\n        proxyContract[msg.sender] = farmBoosterProxyAddress;\\r\\n        proxyUser[farmBoosterProxyAddress] = msg.sender;\\r\\n\\r\\n        FarmBoosterProxy(farmBoosterProxyAddress).initialize(msg.sender, Farm_Booster, masterchefV2, cakeToken);\\r\\n        IFarmBooster(Farm_Booster).setProxy(msg.sender, farmBoosterProxyAddress);\\r\\n\\r\\n        emit NewFarmBoosterProxyContract(farmBoosterProxyAddress);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IFarmBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IFarmBooster {\\r\\n    function onCakePoolUpdate(\\r\\n        address _user,\\r\\n        uint256 _lockedAmount,\\r\\n        uint256 _lockedDuration,\\r\\n        uint256 _totalLockedAmount,\\r\\n        uint256 _maxLockDuration\\r\\n    ) external;\\r\\n\\r\\n    function updatePoolBoostMultiplier(address _user, uint256 _pid) external;\\r\\n\\r\\n    function setProxy(address _user, address _proxy) external;\\r\\n\\r\\n    function isBoosterPool(address _user, uint256 _pid) external view returns (bool);\\r\\n}\"},\"IMasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IMasterChefV2 {\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\r\\n\\r\\n    function userInfo(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) external;\\r\\n\\r\\n    function lpToken(uint256 _pid) external view returns (address);\\r\\n\\r\\n    function poolLength() external view returns (uint256 pools);\\r\\n\\r\\n    function getBoostMultiplier(address _user, uint256 _pid) external view returns (uint256);\\r\\n\\r\\n    function updateBoostMultiplier(\\r\\n        address _user,\\r\\n        uint256 _pid,\\r\\n        uint256 _newMultiplier\\r\\n    ) external;\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterchefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cakeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmBoosterProxyAddress\",\"type\":\"address\"}],\"name\":\"NewFarmBoosterProxyContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Farm_Booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createFarmBoosterProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FarmBoosterProxyFactory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000b31f9221916a0633151efde6391a3ce876766f2500000000000000000000000040747e35d159829bb26e4651a75c779b557bd305000000000000000000000000328801b0b580eadd83ea841638865ea41dc6fb25", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ef327f6bd66cc6a2ba8c57d10c0dcfbf0325039a2e21c92516126c733a2c24e"}