{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/misc/LensPeriphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC721Time} from '../core/base/IERC721Time.sol';\\nimport {ILensHub} from '../interfaces/ILensHub.sol';\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\nimport {Events} from '../libraries/Events.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/**\\n * @notice This is a peripheral contract that acts as a source of truth for profile metadata and allows\\n * for users to emit an event demonstrating whether or not they explicitly want a follow to be shown.\\n *\\n * @dev This is useful because it allows clients to filter out follow NFTs that were transferred to\\n * a recipient by another user (i.e. Not a mint) and not register them as \\\"following\\\" unless\\n * the recipient explicitly toggles the follow here.\\n */\\ncontract LensPeriphery {\\n    string public constant NAME = 'LensPeriphery';\\n    bytes32 internal constant EIP712_REVISION_HASH = keccak256('1');\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n        );\\n    bytes32 internal constant TOGGLE_FOLLOW_WITH_SIG_TYPEHASH =\\n        keccak256(\\n            'ToggleFollowWithSig(uint256[] profileIds,bool[] enables,uint256 nonce,uint256 deadline)'\\n        );\\n    bytes32 internal constant SET_PROFILE_METADATA_WITH_SIG_TYPEHASH =\\n        keccak256(\\n            'SetProfileMetadataURIWithSig(uint256 profileId,string metadata,uint256 nonce,uint256 deadline)'\\n        );\\n\\n    ILensHub public immutable HUB;\\n\\n    mapping(address => uint256) public sigNonces;\\n\\n    mapping(uint256 => string) internal _metadataByProfile;\\n\\n    constructor(ILensHub hub) {\\n        HUB = hub;\\n    }\\n\\n    /**\\n     * @notice Sets the profile metadata for a given profile.\\n     *\\n     * @param profileId The profile ID to set the metadata for.\\n     * @param metadata The metadata string to set for the profile.\\n     */\\n    function setProfileMetadataURI(uint256 profileId, string calldata metadata) external {\\n        _validateCallerIsProfileOwnerOrDispatcher(profileId);\\n        _setProfileMetadataURI(profileId, metadata);\\n    }\\n\\n    /**\\n     * @notice Sets the profile metadata for a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileMetadataWithSigData struct containingthe regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileMetadataURIWithSig(DataTypes.SetProfileMetadataWithSigData calldata vars)\\n        external\\n    {\\n        unchecked {\\n            address owner = IERC721Time(address(HUB)).ownerOf(vars.profileId);\\n            _validateRecoveredAddress(\\n                _calculateDigest(\\n                    keccak256(\\n                        abi.encode(\\n                            SET_PROFILE_METADATA_WITH_SIG_TYPEHASH,\\n                            vars.profileId,\\n                            keccak256(bytes(vars.metadata)),\\n                            sigNonces[owner]++,\\n                            vars.sig.deadline\\n                        )\\n                    )\\n                ),\\n                owner,\\n                vars.sig\\n            );\\n        }\\n        _setProfileMetadataURI(vars.profileId, vars.metadata);\\n    }\\n\\n    /**\\n     * @notice Toggle Follows on the given profiles, emiting toggle event for each FollowNFT.\\n     *\\n     * NOTE: `profileIds`, `followNFTIds` and `enables` arrays must be of the same length.\\n     *\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     */\\n    function toggleFollow(uint256[] calldata profileIds, bool[] calldata enables) external {\\n        _toggleFollow(msg.sender, profileIds, enables);\\n    }\\n\\n    /**\\n     * @notice Toggle Follows a given profiles via signature with the specified parameters.\\n     *\\n     * @param vars A ToggleFollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     */\\n    function toggleFollowWithSig(DataTypes.ToggleFollowWithSigData calldata vars) external {\\n        unchecked {\\n            _validateRecoveredAddress(\\n                _calculateDigest(\\n                    keccak256(\\n                        abi.encode(\\n                            TOGGLE_FOLLOW_WITH_SIG_TYPEHASH,\\n                            keccak256(abi.encodePacked(vars.profileIds)),\\n                            keccak256(abi.encodePacked(vars.enables)),\\n                            sigNonces[vars.follower]++,\\n                            vars.sig.deadline\\n                        )\\n                    )\\n                ),\\n                vars.follower,\\n                vars.sig\\n            );\\n        }\\n\\n        _toggleFollow(vars.follower, vars.profileIds, vars.enables);\\n    }\\n\\n    /**\\n     * @notice Returns the metadata URI of a profile.\\n     *\\n     * @param profileId The profile ID to query the metadata URI for.\\n     *\\n     * @return string The metadata associated with that profile ID, or an empty string if it is not set or the profile does not exist.\\n     */\\n    function getProfileMetadataURI(uint256 profileId) external view returns (string memory) {\\n        return _metadataByProfile[profileId];\\n    }\\n\\n    function _setProfileMetadataURI(uint256 profileId, string calldata metadata) internal {\\n        _metadataByProfile[profileId] = metadata;\\n        emit Events.ProfileMetadataSet(profileId, metadata, block.timestamp);\\n    }\\n\\n    function _toggleFollow(\\n        address follower,\\n        uint256[] calldata profileIds,\\n        bool[] calldata enables\\n    ) internal {\\n        if (profileIds.length != enables.length) revert Errors.ArrayMismatch();\\n        uint256 profileIdsLength = profileIds.length;\\n        for (uint256 i = 0; i < profileIdsLength; ) {\\n            address followNFT = HUB.getFollowNFT(profileIds[i]);\\n            if (followNFT == address(0)) revert Errors.FollowInvalid();\\n            if (!IERC721Time(address(HUB)).exists(profileIds[i])) revert Errors.TokenDoesNotExist();\\n            if (IERC721Time(followNFT).balanceOf(follower) == 0) revert Errors.FollowInvalid();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit Events.FollowsToggled(follower, profileIds, enables, block.timestamp);\\n    }\\n\\n    function _validateCallerIsProfileOwnerOrDispatcher(uint256 profileId) internal view {\\n        if (\\n            msg.sender == IERC721Time(address(HUB)).ownerOf(profileId) ||\\n            msg.sender == HUB.getDispatcher(profileId)\\n        ) {\\n            return;\\n        }\\n        revert Errors.NotProfileOwnerOrDispatcher();\\n    }\\n\\n    /**\\n     * @dev Wrapper for ecrecover to reduce code size, used in meta-tx specific functions.\\n     */\\n    function _validateRecoveredAddress(\\n        bytes32 digest,\\n        address expectedAddress,\\n        DataTypes.EIP712Signature memory sig\\n    ) internal view {\\n        if (sig.deadline < block.timestamp) revert Errors.SignatureExpired();\\n        address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\\n        if (recoveredAddress == address(0) || recoveredAddress != expectedAddress)\\n            revert Errors.SignatureInvalid();\\n    }\\n\\n    /**\\n     * @dev Calculates EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\\n     */\\n    function _calculateDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(NAME)),\\n                    EIP712_REVISION_HASH,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates EIP712 digest based on the current DOMAIN_SEPARATOR.\\n     *\\n     * @param hashedMessage The message hash from which the digest should be calculated.\\n     *\\n     * @return bytes32 A 32-byte output representing the EIP712 digest.\\n     */\\n    function _calculateDigest(bytes32 hashedMessage) internal view returns (bytes32) {\\n        bytes32 digest;\\n        unchecked {\\n            digest = keccak256(\\n                abi.encodePacked('\\\\x19\\\\x01', _calculateDomainSeparator(), hashedMessage)\\n            );\\n        }\\n        return digest;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/base/IERC721Time.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/**\\n * @title IERC721Time\\n * @author Lens Protocol\\n *\\n * @notice This is an expansion of the IERC721 interface that includes a struct for token data,\\n * which contains the token owner and the mint timestamp as well as associated getters.\\n */\\ninterface IERC721Time is IERC721 {\\n    /**\\n     * @notice Contains the owner address and the mint timestamp for every NFT.\\n     *\\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\\n     * _tokenData mapping, alongside the unchanging mintTimestamp.\\n     *\\n     * @param owner The token owner.\\n     * @param mintTimestamp The mint timestamp.\\n     */\\n    struct TokenData {\\n        address owner;\\n        uint96 mintTimestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the mint timestamp associated with a given NFT, stored only once upon initial mint.\\n     *\\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\\n     *\\n     * @return uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\\n     * padding.\\n     */\\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\\n     * mint timestamp in a single call.\\n     *\\n     * @param tokenId The token ID of the NFT to query the token data for.\\n     *\\n     * @return TokenData token data struct containing both the owner address and the mint timestamp.\\n     */\\n    function tokenDataOf(uint256 tokenId) external view returns (TokenData memory);\\n\\n    /**\\n     * @notice Returns whether a token with the given token ID exists.\\n     *\\n     * @param tokenId The token ID of the NFT to check existence for.\\n     *\\n     * @return bool True if the token exists.\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILensHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\n/**\\n * @title ILensHub\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface ILensHub {\\n    /**\\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\\n     * the LensNFTBase contract.\\n     *\\n     * @param name The name to set for the hub NFT.\\n     * @param symbol The symbol to set for the hub NFT.\\n     * @param newGovernance The governance address to set.\\n     */\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address newGovernance\\n    ) external;\\n\\n    /**\\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\\n     * address.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\\n     * can only be called by the governance address.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\\n     * can only be called by the governance address or the emergency admin address.\\n     *\\n     * Note that this reverts if the emergency admin calls it if:\\n     *      1. The emergency admin is attempting to unpause.\\n     *      2. The emergency admin is calling while the protocol is already paused.\\n     *\\n     * @param newState The state to set, as a member of the ProtocolState enum.\\n     */\\n    function setState(DataTypes.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\\n\\n    /**\\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param followModule The follow module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the follow module should be whitelisted.\\n     */\\n    function whitelistFollowModule(address followModule, bool whitelist) external;\\n\\n    /**\\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\\n     * @param whitelist Whether or not the reference module should be whitelisted.\\n     */\\n    function whitelistReferenceModule(address referenceModule, bool whitelist) external;\\n\\n    /**\\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the collect module should be whitelisted.\\n     */\\n    function whitelistCollectModule(address collectModule, bool whitelist) external;\\n\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\\n     * function must be called by a whitelisted profile creator.\\n     *\\n     * @param vars A CreateProfileData struct containing the following params:\\n     *      to: The address receiving the profile.\\n     *      handle: The handle to set for the profile, must be unique and non-empty.\\n     *      imageURI: The URI to set for the profile image.\\n     *      followModule: The follow module to use, can be the zero address.\\n     *      followModuleInitData: The follow module initialization data, if any.\\n     */\\n    function createProfile(DataTypes.CreateProfileData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity.\\n     *\\n     * @param profileId The token ID of the profile to set as the main profile identity.\\n     */\\n    function setDefaultProfile(uint256 profileId) external;\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\\n     *\\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDefaultProfileWithSig(DataTypes.SetDefaultProfileWithSigData calldata vars)\\n        external;\\n\\n    /**\\n     * @notice Sets a profile's follow module, must be called by the profile owner.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowModuleWithSig(DataTypes.SetFollowModuleWithSigData calldata vars) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the given profile ID.\\n     */\\n    function setDispatcher(uint256 profileId, address dispatcher) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\\n     *\\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDispatcherWithSig(DataTypes.SetDispatcherWithSigData calldata vars) external;\\n\\n    /**\\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile.\\n     */\\n    function setProfileImageURI(uint256 profileId, string calldata imageURI) external;\\n\\n    /**\\n     * @notice Sets a profile's URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileImageURIWithSig(DataTypes.SetProfileImageURIWithSigData calldata vars)\\n        external;\\n\\n    /**\\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     */\\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowNFTURIWithSig(DataTypes.SetFollowNFTURIWithSigData calldata vars) external;\\n\\n    /**\\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A PostData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function postWithSig(DataTypes.PostWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A CommentData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(DataTypes.CommentData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A MirrorData struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(DataTypes.MirrorData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\\n     *\\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\\n     *\\n     * @param profileIds The token ID array of the profiles to follow.\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Follows a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collect module if needed.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collect(\\n        uint256 profileId,\\n        uint256 pubId,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     *\\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\\n     * an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\\n     * followNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     */\\n    function emitFollowNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 followNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\\n     * collectNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\\n     * @param pubId The publication ID associated with the collect NFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     */\\n    function emitCollectNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 collectNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /// ************************\\n    /// *****VIEW FUNCTIONS*****\\n    /// ************************\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\\n\\n    /**\\n     * @notice Returns default profile for a given wallet address\\n     *\\n     * @param wallet The address to find the default mapping\\n     *\\n     * @return uint256 The default profile id, which will be 0 if not mapped.\\n     */\\n    function defaultProfile(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether or not a follow module is whitelisted.\\n     *\\n     * @param followModule The address of the follow module to check.\\n     *\\n     * @return bool True if the the follow module is whitelisted, false otherwise.\\n     */\\n    function isFollowModuleWhitelisted(address followModule) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a reference module is whitelisted.\\n     *\\n     * @param referenceModule The address of the reference module to check.\\n     *\\n     * @return bool True if the the reference module is whitelisted, false otherwise.\\n     */\\n    function isReferenceModuleWhitelisted(address referenceModule) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a collect module is whitelisted.\\n     *\\n     * @param collectModule The address of the collect module to check.\\n     *\\n     * @return bool True if the the collect module is whitelisted, false otherwise.\\n     */\\n    function isCollectModuleWhitelisted(address collectModule) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the dispatcher associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the dispatcher for.\\n     *\\n     * @return address The dispatcher address associated with the profile.\\n     */\\n    function getDispatcher(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the publication count for a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return uint256 The number of publications associated with the queried profile.\\n     */\\n    function getPubCount(uint256 profileId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the followNFT associated with a given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT for.\\n     *\\n     * @return address The followNFT associated with the given profile.\\n     */\\n    function getFollowNFT(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the followNFT URI associated with a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT URI for.\\n     *\\n     * @return string The followNFT URI associated with the given profile.\\n     */\\n    function getFollowNFTURI(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the collectNFT associated with a given publication, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collectNFT associated with the queried publication.\\n     */\\n    function getCollectNFT(uint256 profileId, uint256 pubId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the follow module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the follow module for.\\n     *\\n     * @return address The address of the follow module associated with the given profile.\\n     */\\n    function getFollowModule(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect module associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collect module associated with the queried publication.\\n     */\\n    function getCollectModule(uint256 profileId, uint256 pubId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the reference module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\\n     * @param pubId The publication ID of the publication to query the reference module for.\\n     *\\n     * @return address The address of the reference module associated with the given profile.\\n     */\\n    function getReferenceModule(uint256 profileId, uint256 pubId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the handle associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the handle for.\\n     *\\n     * @return string The handle associated with the profile.\\n     */\\n    function getHandle(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\\n     * @param pubId The publication ID of the publication to query the pointer for.\\n     *\\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\\n     * publication ID of the publication the current publication is pointing to.\\n     */\\n    function getPubPointer(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the profile token ID according to a given handle.\\n     *\\n     * @param handle The handle to resolve the profile token ID with.\\n     *\\n     * @return uint256 The profile ID the passed handle points to.\\n     */\\n    function getProfileIdByHandle(string calldata handle) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return ProfileStruct The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId) external view returns (DataTypes.ProfileStruct memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationStruct The publication struct associated with the queried publication.\\n     */\\n    function getPub(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PublicationStruct memory);\\n\\n    /**\\n     * @notice Returns the publication type associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\\n     */\\n    function getPubType(uint256 profileId, uint256 pubId) external view returns (DataTypes.PubType);\\n\\n    /**\\n     * @notice Returns the follow NFT implementation address.\\n     *\\n     * @return address The follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect NFT implementation address.\\n     *\\n     * @return address The collect NFT implementation address.\\n     */\\n    function getCollectNFTImpl() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from './DataTypes.sol';\\n\\nlibrary Events {\\n    /**\\n     * @dev Emitted when the NFT contract's name and symbol are set at initialization.\\n     *\\n     * @param name The NFT name set.\\n     * @param symbol The NFT symbol set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event BaseInitialized(string name, string symbol, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when the hub state is set.\\n     *\\n     * @param caller The caller who set the state.\\n     * @param prevState The previous protocol state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\\n     * @param newState The newly set state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event StateSet(\\n        address indexed caller,\\n        DataTypes.ProtocolState indexed prevState,\\n        DataTypes.ProtocolState indexed newState,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the governance address is changed. We emit the caller even though it should be the previous\\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\\n     *\\n     * @param caller The caller who set the governance address.\\n     * @param prevGovernance The previous governance address.\\n     * @param newGovernance The new governance address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event GovernanceSet(\\n        address indexed caller,\\n        address indexed prevGovernance,\\n        address indexed newGovernance,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the emergency admin is changed. We emit the caller even though it should be the previous\\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\\n     *\\n     * @param caller The caller who set the emergency admin address.\\n     * @param oldEmergencyAdmin The previous emergency admin address.\\n     * @param newEmergencyAdmin The new emergency admin address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event EmergencyAdminSet(\\n        address indexed caller,\\n        address indexed oldEmergencyAdmin,\\n        address indexed newEmergencyAdmin,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a profile creator is added to or removed from the whitelist.\\n     *\\n     * @param profileCreator The address of the profile creator.\\n     * @param whitelisted Whether or not the profile creator is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileCreatorWhitelisted(\\n        address indexed profileCreator,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a follow module is added to or removed from the whitelist.\\n     *\\n     * @param followModule The address of the follow module.\\n     * @param whitelisted Whether or not the follow module is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowModuleWhitelisted(\\n        address indexed followModule,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a reference module is added to or removed from the whitelist.\\n     *\\n     * @param referenceModule The address of the reference module.\\n     * @param whitelisted Whether or not the reference module is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ReferenceModuleWhitelisted(\\n        address indexed referenceModule,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a collect module is added to or removed from the whitelist.\\n     *\\n     * @param collectModule The address of the collect module.\\n     * @param whitelisted Whether or not the collect module is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectModuleWhitelisted(\\n        address indexed collectModule,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a profile is created.\\n     *\\n     * @param profileId The newly created profile's token ID.\\n     * @param creator The profile creator, who created the token with the given profile ID.\\n     * @param to The address receiving the profile with the given profile ID.\\n     * @param handle The handle set for the profile.\\n     * @param imageURI The image uri set for the profile.\\n     * @param followModule The profile's newly set follow module. This CAN be the zero address.\\n     * @param followModuleReturnData The data returned from the follow module's initialization. This is abi encoded\\n     * and totally depends on the follow module chosen.\\n     * @param followNFTURI The URI set for the profile's follow NFT.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileCreated(\\n        uint256 indexed profileId,\\n        address indexed creator,\\n        address indexed to,\\n        string handle,\\n        string imageURI,\\n        address followModule,\\n        bytes followModuleReturnData,\\n        string followNFTURI,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a a default profile is set for a wallet as its main identity\\n     *\\n     * @param wallet The wallet which set or unset its default profile.\\n     * @param profileId The token ID of the profile being set as default, or zero.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event DefaultProfileSet(address indexed wallet, uint256 indexed profileId, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a dispatcher is set for a specific profile.\\n     *\\n     * @param profileId The token ID of the profile for which the dispatcher is set.\\n     * @param dispatcher The dispatcher set for the given profile.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event DispatcherSet(uint256 indexed profileId, address indexed dispatcher, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a profile's URI is set.\\n     *\\n     * @param profileId The token ID of the profile for which the URI is set.\\n     * @param imageURI The URI set for the given profile.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileImageURISet(uint256 indexed profileId, string imageURI, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a follow NFT's URI is set.\\n     *\\n     * @param profileId The token ID of the profile for which the followNFT URI is set.\\n     * @param followNFTURI The follow NFT URI set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTURISet(uint256 indexed profileId, string followNFTURI, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a profile's follow module is set.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param followModule The profile's newly set follow module. This CAN be the zero address.\\n     * @param followModuleReturnData The data returned from the follow module's initialization. This is abi encoded\\n     * and totally depends on the follow module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowModuleSet(\\n        uint256 indexed profileId,\\n        address followModule,\\n        bytes followModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a \\\"post\\\" is published.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param pubId The new publication's ID.\\n     * @param contentURI The URI mapped to this new publication.\\n     * @param collectModule The collect module mapped to this new publication. This CANNOT be the zero address.\\n     * @param collectModuleReturnData The data returned from the collect module's initialization for this given\\n     * publication. This is abi encoded and totally depends on the collect module chosen.\\n     * @param referenceModule The reference module set for this publication.\\n     * @param referenceModuleReturnData The data returned from the reference module at initialization. This is abi\\n     * encoded and totally depends on the reference module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event PostCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        string contentURI,\\n        address collectModule,\\n        bytes collectModuleReturnData,\\n        address referenceModule,\\n        bytes referenceModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a \\\"comment\\\" is published.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param pubId The new publication's ID.\\n     * @param contentURI The URI mapped to this new publication.\\n     * @param profileIdPointed The profile token ID that this comment points to.\\n     * @param pubIdPointed The publication ID that this comment points to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module mapped to this new publication. This CANNOT be the zero address.\\n     * @param collectModuleReturnData The data returned from the collect module's initialization for this given\\n     * publication. This is abi encoded and totally depends on the collect module chosen.\\n     * @param referenceModule The reference module set for this publication.\\n     * @param referenceModuleReturnData The data returned from the reference module at initialization. This is abi\\n     * encoded and totally depends on the reference module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CommentCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        string contentURI,\\n        uint256 profileIdPointed,\\n        uint256 pubIdPointed,\\n        bytes referenceModuleData,\\n        address collectModule,\\n        bytes collectModuleReturnData,\\n        address referenceModule,\\n        bytes referenceModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a \\\"mirror\\\" is published.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param pubId The new publication's ID.\\n     * @param profileIdPointed The profile token ID that this mirror points to.\\n     * @param pubIdPointed The publication ID that this mirror points to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module set for this publication.\\n     * @param referenceModuleReturnData The data returned from the reference module at initialization. This is abi\\n     * encoded and totally depends on the reference module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event MirrorCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 profileIdPointed,\\n        uint256 pubIdPointed,\\n        bytes referenceModuleData,\\n        address referenceModule,\\n        bytes referenceModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a followNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The token ID of the profile to which this followNFT is associated.\\n     * @param followNFT The address of the newly deployed followNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTDeployed(\\n        uint256 indexed profileId,\\n        address indexed followNFT,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The publisher's profile token ID.\\n     * @param pubId The publication associated with the newly deployed collectNFT clone's ID.\\n     * @param collectNFT The address of the newly deployed collectNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTDeployed(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        address indexed collectNFT,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful collect action.\\n     *\\n     * @param collector The address collecting the publication.\\n     * @param profileId The token ID of the profile that the collect was initiated towards, useful to differentiate mirrors.\\n     * @param pubId The publication ID that the collect was initiated towards, useful to differentiate mirrors.\\n     * @param rootProfileId The profile token ID of the profile whose publication is being collected.\\n     * @param rootPubId The publication ID of the publication being collected.\\n     * @param collectModuleData The data passed to the collect module.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event Collected(\\n        address indexed collector,\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 rootProfileId,\\n        uint256 rootPubId,\\n        bytes collectModuleData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful follow action.\\n     *\\n     * @param follower The address following the given profiles.\\n     * @param profileIds The token ID array of the profiles being followed.\\n     * @param followModuleDatas The array of data parameters passed to each follow module.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event Followed(\\n        address indexed follower,\\n        uint256[] profileIds,\\n        bytes[] followModuleDatas,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted via callback when a followNFT is transferred.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTTransferred(\\n        uint256 indexed profileId,\\n        uint256 indexed followNFTId,\\n        address from,\\n        address to,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted via callback when a collectNFT is transferred.\\n     *\\n     * @param profileId The token ID of the profile associated with the collectNFT being transferred.\\n     * @param pubId The publication ID associated with the collectNFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTTransferred(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 indexed collectNFTId,\\n        address from,\\n        address to,\\n        uint256 timestamp\\n    );\\n\\n    // Collect/Follow NFT-Specific\\n\\n    /**\\n     * @dev Emitted when a newly deployed follow NFT is initialized.\\n     *\\n     * @param profileId The token ID of the profile connected to this follow NFT.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTInitialized(uint256 indexed profileId, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when delegation power in a FollowNFT is changed.\\n     *\\n     * @param delegate The delegate whose power has been changed.\\n     * @param newPower The new governance power mapped to the delegate.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTDelegatedPowerChanged(\\n        address indexed delegate,\\n        uint256 indexed newPower,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a newly deployed collect NFT is initialized.\\n     *\\n     * @param profileId The token ID of the profile connected to the publication mapped to this collect NFT.\\n     * @param pubId The publication ID connected to the publication mapped to this collect NFT.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTInitialized(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 timestamp\\n    );\\n\\n    // Module-Specific\\n\\n    /**\\n     * @notice Emitted when the ModuleGlobals governance address is set.\\n     *\\n     * @param prevGovernance The previous governance address.\\n     * @param newGovernance The new governance address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsGovernanceSet(\\n        address indexed prevGovernance,\\n        address indexed newGovernance,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when the ModuleGlobals treasury address is set.\\n     *\\n     * @param prevTreasury The previous treasury address.\\n     * @param newTreasury The new treasury address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsTreasurySet(\\n        address indexed prevTreasury,\\n        address indexed newTreasury,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when the ModuleGlobals treasury fee is set.\\n     *\\n     * @param prevTreasuryFee The previous treasury fee in BPS.\\n     * @param newTreasuryFee The new treasury fee in BPS.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsTreasuryFeeSet(\\n        uint16 indexed prevTreasuryFee,\\n        uint16 indexed newTreasuryFee,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a currency is added to or removed from the ModuleGlobals whitelist.\\n     *\\n     * @param currency The currency address.\\n     * @param prevWhitelisted Whether or not the currency was previously whitelisted.\\n     * @param whitelisted Whether or not the currency is whitelisted.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsCurrencyWhitelisted(\\n        address indexed currency,\\n        bool indexed prevWhitelisted,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a module inheriting from the `FeeModuleBase` is constructed.\\n     *\\n     * @param moduleGlobals The ModuleGlobals contract address used.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FeeModuleBaseConstructed(address indexed moduleGlobals, uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted when a module inheriting from the `ModuleBase` is constructed.\\n     *\\n     * @param hub The LensHub contract address used.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleBaseConstructed(address indexed hub, uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted when one or multiple addresses are approved (or disapproved) for following in\\n     * the `ApprovalFollowModule`.\\n     *\\n     * @param owner The profile owner who executed the approval.\\n     * @param profileId The profile ID that the follow approvals are granted/revoked for.\\n     * @param addresses The addresses that have had the follow approvals grnated/revoked.\\n     * @param approved Whether each corresponding address is now approved or disapproved.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowsApproved(\\n        address indexed owner,\\n        uint256 indexed profileId,\\n        address[] addresses,\\n        bool[] approved,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the user wants to enable or disable follows in the `LensPeriphery`.\\n     *\\n     * @param owner The profile owner who executed the toggle.\\n     * @param profileIds The array of token IDs of the profiles each followNFT is associated with.\\n     * @param enabled The array of whether each FollowNFT's follow is enabled/disabled.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowsToggled(\\n        address indexed owner,\\n        uint256[] profileIds,\\n        bool[] enabled,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the metadata associated with a profile is set in the `LensPeriphery`.\\n     *\\n     * @param profileId The profile ID the metadata is set for.\\n     * @param metadata The metadata set for the profile and user.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileMetadataSet(uint256 indexed profileId, string metadata, uint256 timestamp);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error CannotInitImplementation();\\n    error Initialized();\\n    error SignatureExpired();\\n    error ZeroSpender();\\n    error SignatureInvalid();\\n    error NotOwnerOrApproved();\\n    error NotHub();\\n    error TokenDoesNotExist();\\n    error NotGovernance();\\n    error NotGovernanceOrEmergencyAdmin();\\n    error EmergencyAdminCannotUnpause();\\n    error CallerNotWhitelistedModule();\\n    error CollectModuleNotWhitelisted();\\n    error FollowModuleNotWhitelisted();\\n    error ReferenceModuleNotWhitelisted();\\n    error ProfileCreatorNotWhitelisted();\\n    error NotProfileOwner();\\n    error NotProfileOwnerOrDispatcher();\\n    error NotDispatcher();\\n    error PublicationDoesNotExist();\\n    error HandleTaken();\\n    error HandleLengthInvalid();\\n    error HandleContainsInvalidCharacters();\\n    error HandleFirstCharInvalid();\\n    error ProfileImageURILengthInvalid();\\n    error CallerNotFollowNFT();\\n    error CallerNotCollectNFT();\\n    error BlockNumberInvalid();\\n    error ArrayMismatch();\\n    error CannotCommentOnSelf();\\n    error NotWhitelisted();\\n\\n    // Module Errors\\n    error InitParamsInvalid();\\n    error CollectExpired();\\n    error FollowInvalid();\\n    error ModuleDataMismatch();\\n    error FollowNotApproved();\\n    error MintLimitExceeded();\\n    error CollectNotAllowed();\\n\\n    // MultiState Errors\\n    error Paused();\\n    error PublishingPaused();\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"hub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FollowInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProfileOwnerOrDispatcher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HUB\",\"outputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getProfileMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setProfileMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.SetProfileMetadataWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"setProfileMetadataURIWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sigNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"enables\",\"type\":\"bool[]\"}],\"name\":\"toggleFollow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"follower\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"enables\",\"type\":\"bool[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.ToggleFollowWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"toggleFollowWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LensPeriphery", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000db46d1dc155634fbc732f92e853b10b288ad5a1d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}