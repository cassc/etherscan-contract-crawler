{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/ICreatorTokenTransferValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IEOARegistry.sol\\\";\\nimport \\\"./ITransferSecurityRegistry.sol\\\";\\nimport \\\"./ITransferValidator.sol\\\";\\n\\ninterface ICreatorTokenTransferValidator is ITransferSecurityRegistry, ITransferValidator, IEOARegistry {}\"\r\n    },\r\n    \"contracts/interfaces/IEOARegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IEOARegistry\\n * @author Limit Break, Inc.\\n * @notice Interface for a registry of verified EOA accounts.\\n */\\ninterface IEOARegistry is IERC165 {\\n\\n    /// @dev Returns true if the account has been verified as an EOA, false otherwise\\n    function isVerifiedEOA(address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITransferSecurityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/TransferPolicy.sol\\\";\\n\\ninterface ITransferSecurityRegistry {\\n    event AddedToAllowlist(AllowlistTypes indexed kind, uint256 indexed id, address indexed account);\\n    event CreatedAllowlist(AllowlistTypes indexed kind, uint256 indexed id, string indexed name);\\n    event ReassignedAllowlistOwnership(AllowlistTypes indexed kind, uint256 indexed id, address indexed newOwner);\\n    event RemovedFromAllowlist(AllowlistTypes indexed kind, uint256 indexed id, address indexed account);\\n    event SetAllowlist(AllowlistTypes indexed kind, address indexed collection, uint120 indexed id);\\n    event SetTransferSecurityLevel(address indexed collection, TransferSecurityLevels level);\\n\\n    function createOperatorWhitelist(string calldata name) external returns (uint120);\\n    function createPermittedContractReceiverAllowlist(string calldata name) external returns (uint120);\\n    function reassignOwnershipOfOperatorWhitelist(uint120 id, address newOwner) external;\\n    function reassignOwnershipOfPermittedContractReceiverAllowlist(uint120 id, address newOwner) external;\\n    function renounceOwnershipOfOperatorWhitelist(uint120 id) external;\\n    function renounceOwnershipOfPermittedContractReceiverAllowlist(uint120 id) external;\\n    function setTransferSecurityLevelOfCollection(address collection, TransferSecurityLevels level) external;\\n    function setOperatorWhitelistOfCollection(address collection, uint120 id) external;\\n    function setPermittedContractReceiverAllowlistOfCollection(address collection, uint120 id) external;\\n    function addOperatorToWhitelist(uint120 id, address operator) external;\\n    function addPermittedContractReceiverToAllowlist(uint120 id, address receiver) external;\\n    function removeOperatorFromWhitelist(uint120 id, address operator) external;\\n    function removePermittedContractReceiverFromAllowlist(uint120 id, address receiver) external;\\n    function getCollectionSecurityPolicy(address collection) external view returns (CollectionSecurityPolicy memory);\\n    function getWhitelistedOperators(uint120 id) external view returns (address[] memory);\\n    function getPermittedContractReceivers(uint120 id) external view returns (address[] memory);\\n    function isOperatorWhitelisted(uint120 id, address operator) external view returns (bool);\\n    function isContractReceiverPermitted(uint120 id, address receiver) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITransferValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/TransferPolicy.sol\\\";\\n\\ninterface ITransferValidator {\\n    function applyCollectionTransferPolicy(address caller, address from, address to) external view;\\n}\"\r\n    },\r\n    \"contracts/utils/CreatorTokenTransferValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./EOARegistry.sol\\\";\\nimport \\\"../interfaces/IOwnable.sol\\\";\\nimport \\\"../interfaces/ICreatorTokenTransferValidator.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title  CreatorTokenTransferValidator\\n * @author Limit Break, Inc.\\n * @notice The CreatorTokenTransferValidator contract is designed to provide a customizable and secure transfer \\n *         validation mechanism for NFT collections. This contract allows the owner of an NFT collection to configure \\n *         the transfer security level, operator whitelist, and permitted contract receiver allowlist for each \\n *         collection.\\n *\\n * @dev    <h4>Features</h4>\\n *         - Transfer security levels: Provides different levels of transfer security, \\n *           from open transfers to completely restricted transfers.\\n *         - Operator whitelist: Allows the owner of a collection to whitelist specific operator addresses permitted\\n *           to execute transfers on behalf of others.\\n *         - Permitted contract receiver allowlist: Enables the owner of a collection to allow specific contract \\n *           addresses to receive NFTs when otherwise disabled by security policy.\\n *\\n * @dev    <h4>Benefits</h4>\\n *         - Enhanced security: Allows creators to have more control over their NFT collections, ensuring the safety \\n *           and integrity of their assets.\\n *         - Flexibility: Provides collection owners the ability to customize transfer rules as per their requirements.\\n *         - Compliance: Facilitates compliance with regulations by enabling creators to restrict transfers based on \\n *           specific criteria.\\n *\\n * @dev    <h4>Intended Usage</h4>\\n *         - The CreatorTokenTransferValidator contract is intended to be used by NFT collection owners to manage and \\n *           enforce transfer policies. This contract is integrated with the following varations of creator token \\n *           NFT contracts to validate transfers according to the defined security policies.\\n *\\n *           - ERC721-C:   Creator token implenting OpenZeppelin's ERC-721 standard.\\n *           - ERC721-AC:  Creator token implenting Azuki's ERC-721A standard.\\n *           - ERC721-CW:  Creator token implementing OpenZeppelin's ERC-721 standard with opt-in staking to \\n *                         wrap/upgrade a pre-existing ERC-721 collection.\\n *           - ERC721-ACW: Creator token implementing Azuki's ERC721-A standard with opt-in staking to \\n *                         wrap/upgrade a pre-existing ERC-721 collection.\\n *           - ERC1155-C:  Creator token implenting OpenZeppelin's ERC-1155 standard.\\n *           - ERC1155-CW: Creator token implementing OpenZeppelin's ERC-1155 standard with opt-in staking to \\n *                         wrap/upgrade a pre-existing ERC-1155 collection.\\n *\\n *          <h4>Transfer Security Levels</h4>\\n *          - Level 0 (Zero): No transfer restrictions.\\n *            - Caller Constraints: None\\n *            - Receiver Constraints: None\\n *          - Level 1 (One): Only whitelisted operators can initiate transfers, with over-the-counter (OTC) trading enabled.\\n *            - Caller Constraints: OperatorWhitelistEnableOTC\\n *            - Receiver Constraints: None\\n *          - Level 2 (Two): Only whitelisted operators can initiate transfers, with over-the-counter (OTC) trading disabled.\\n *            - Caller Constraints: OperatorWhitelistDisableOTC\\n *            - Receiver Constraints: None\\n *          - Level 3 (Three): Only whitelisted operators can initiate transfers, with over-the-counter (OTC) trading enabled. Transfers to contracts with code are not allowed.\\n *            - Caller Constraints: OperatorWhitelistEnableOTC\\n *            - Receiver Constraints: NoCode\\n *          - Level 4 (Four): Only whitelisted operators can initiate transfers, with over-the-counter (OTC) trading enabled. Transfers are allowed only to Externally Owned Accounts (EOAs).\\n *            - Caller Constraints: OperatorWhitelistEnableOTC\\n *            - Receiver Constraints: EOA\\n *          - Level 5 (Five): Only whitelisted operators can initiate transfers, with over-the-counter (OTC) trading disabled. Transfers to contracts with code are not allowed.\\n *            - Caller Constraints: OperatorWhitelistDisableOTC\\n *            - Receiver Constraints: NoCode\\n *          - Level 6 (Six): Only whitelisted operators can initiate transfers, with over-the-counter (OTC) trading disabled. Transfers are allowed only to Externally Owned Accounts (EOAs).\\n *            - Caller Constraints: OperatorWhitelistDisableOTC\\n *            - Receiver Constraints: EOA\\n */\\ncontract CreatorTokenTransferValidator is EOARegistry, ICreatorTokenTransferValidator {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error CreatorTokenTransferValidator__AddressAlreadyAllowed();\\n    error CreatorTokenTransferValidator__AddressNotAllowed();\\n    error CreatorTokenTransferValidator__AllowlistDoesNotExist();\\n    error CreatorTokenTransferValidator__AllowlistOwnershipCannotBeTransferredToZeroAddress();\\n    error CreatorTokenTransferValidator__CallerDoesNotOwnAllowlist();\\n    error CreatorTokenTransferValidator__CallerMustBeWhitelistedOperator();\\n    error CreatorTokenTransferValidator__CallerMustHaveElevatedPermissionsForSpecifiedNFT();\\n    error CreatorTokenTransferValidator__ReceiverMustNotHaveDeployedCode();\\n    error CreatorTokenTransferValidator__ReceiverProofOfEOASignatureUnverified();\\n    \\n    bytes32 private constant DEFAULT_ACCESS_CONTROL_ADMIN_ROLE = 0x00;\\n    TransferSecurityLevels public constant DEFAULT_TRANSFER_SECURITY_LEVEL = TransferSecurityLevels.Zero;\\n\\n    uint120 private lastOperatorWhitelistId;\\n    uint120 private lastPermittedContractReceiverAllowlistId;\\n\\n    mapping (TransferSecurityLevels => TransferSecurityPolicy) public transferSecurityPolicies;\\n    mapping (address => CollectionSecurityPolicy) private collectionSecurityPolicies;\\n    mapping (uint120 => address) public operatorWhitelistOwners;\\n    mapping (uint120 => address) public permittedContractReceiverAllowlistOwners;\\n    mapping (uint120 => EnumerableSet.AddressSet) private operatorWhitelists;\\n    mapping (uint120 => EnumerableSet.AddressSet) private permittedContractReceiverAllowlists;\\n\\n    constructor(address defaultOwner) EOARegistry() {\\n        transferSecurityPolicies[TransferSecurityLevels.Zero] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.None,\\n            receiverConstraints: ReceiverConstraints.None\\n        });\\n\\n        transferSecurityPolicies[TransferSecurityLevels.One] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.OperatorWhitelistEnableOTC,\\n            receiverConstraints: ReceiverConstraints.None\\n        });\\n\\n        transferSecurityPolicies[TransferSecurityLevels.Two] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.OperatorWhitelistDisableOTC,\\n            receiverConstraints: ReceiverConstraints.None\\n        });\\n\\n        transferSecurityPolicies[TransferSecurityLevels.Three] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.OperatorWhitelistEnableOTC,\\n            receiverConstraints: ReceiverConstraints.NoCode\\n        });\\n\\n        transferSecurityPolicies[TransferSecurityLevels.Four] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.OperatorWhitelistEnableOTC,\\n            receiverConstraints: ReceiverConstraints.EOA\\n        });\\n\\n        transferSecurityPolicies[TransferSecurityLevels.Five] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.OperatorWhitelistDisableOTC,\\n            receiverConstraints: ReceiverConstraints.NoCode\\n        });\\n\\n        transferSecurityPolicies[TransferSecurityLevels.Six] = TransferSecurityPolicy({\\n            callerConstraints: CallerConstraints.OperatorWhitelistDisableOTC,\\n            receiverConstraints: ReceiverConstraints.EOA\\n        });\\n\\n        uint120 id = ++lastOperatorWhitelistId;\\n\\n        operatorWhitelistOwners[id] = defaultOwner;\\n\\n        emit CreatedAllowlist(AllowlistTypes.Operators, id, \\\"DEFAULT OPERATOR WHITELIST\\\");\\n        emit ReassignedAllowlistOwnership(AllowlistTypes.Operators, id, defaultOwner);\\n    }\\n\\n    /**\\n     * @notice Apply the collection transfer policy to a transfer operation of a creator token.\\n     *\\n     * @dev Throws when the receiver has deployed code but is not in the permitted contract receiver allowlist,\\n     *      if the ReceiverConstraints is set to NoCode.\\n     * @dev Throws when the receiver has never verified a signature to prove they are an EOA and the receiver\\n     *      is not in the permitted contract receiver allowlist, if the ReceiverConstraints is set to EOA.\\n     * @dev Throws when `msg.sender` is not a whitelisted operator, if CallerConstraints is OperatorWhitelistDisableOTC.\\n     * @dev Throws when `msg.sender` is neither a whitelisted operator nor the 'from' addresses,\\n     *      if CallerConstraints is OperatorWhitelistEnableOTC.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. Transfer is allowed or denied based on the applied transfer policy.\\n     *\\n     * @param caller The address initiating the transfer.\\n     * @param from   The address of the token owner.\\n     * @param to     The address of the token receiver.\\n     */\\n    function applyCollectionTransferPolicy(address caller, address from, address to) external view override {\\n        address collection = _msgSender();\\n        CollectionSecurityPolicy memory collectionSecurityPolicy = collectionSecurityPolicies[collection];\\n        TransferSecurityPolicy memory transferSecurityPolicy = \\n            transferSecurityPolicies[collectionSecurityPolicy.transferSecurityLevel];\\n        \\n        if (transferSecurityPolicy.receiverConstraints == ReceiverConstraints.NoCode) {\\n            if (to.code.length > 0) {\\n                if (!isContractReceiverPermitted(collectionSecurityPolicy.permittedContractReceiversId, to)) {\\n                    revert CreatorTokenTransferValidator__ReceiverMustNotHaveDeployedCode();\\n                }\\n            }\\n        } else if (transferSecurityPolicy.receiverConstraints == ReceiverConstraints.EOA) {\\n            if (!isVerifiedEOA(to)) {\\n                if (!isContractReceiverPermitted(collectionSecurityPolicy.permittedContractReceiversId, to)) {\\n                    revert CreatorTokenTransferValidator__ReceiverProofOfEOASignatureUnverified();\\n                }\\n            }\\n        }\\n\\n        if (transferSecurityPolicy.callerConstraints != CallerConstraints.None) {\\n            if(operatorWhitelists[collectionSecurityPolicy.operatorWhitelistId].length() > 0) {\\n                if (!isOperatorWhitelisted(collectionSecurityPolicy.operatorWhitelistId, caller)) {\\n                    if (transferSecurityPolicy.callerConstraints == CallerConstraints.OperatorWhitelistEnableOTC) {\\n                        if (caller != from) {\\n                            revert CreatorTokenTransferValidator__CallerMustBeWhitelistedOperator();\\n                        }\\n                    } else {\\n                        revert CreatorTokenTransferValidator__CallerMustBeWhitelistedOperator();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Create a new operator whitelist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. A new operator whitelist with the specified name is created.\\n     *      2. The caller is set as the owner of the new operator whitelist.\\n     *      3. A `CreatedAllowlist` event is emitted.\\n     *      4. A `ReassignedAllowlistOwnership` event is emitted.\\n     *\\n     * @param name The name of the new operator whitelist.\\n     * @return     The id of the new operator whitelist.\\n     */\\n    function createOperatorWhitelist(string calldata name) external override returns (uint120) {\\n        uint120 id = ++lastOperatorWhitelistId;\\n\\n        operatorWhitelistOwners[id] = _msgSender();\\n\\n        emit CreatedAllowlist(AllowlistTypes.Operators, id, name);\\n        emit ReassignedAllowlistOwnership(AllowlistTypes.Operators, id, _msgSender());\\n\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Create a new permitted contract receiver allowlist.\\n     * \\n     * @dev <h4>Postconditions:</h4>\\n     *      1. A new permitted contract receiver allowlist with the specified name is created.\\n     *      2. The caller is set as the owner of the new permitted contract receiver allowlist.\\n     *      3. A `CreatedAllowlist` event is emitted.\\n     *      4. A `ReassignedAllowlistOwnership` event is emitted.\\n     *\\n     * @param name The name of the new permitted contract receiver allowlist.\\n     * @return     The id of the new permitted contract receiver allowlist.\\n     */\\n    function createPermittedContractReceiverAllowlist(string calldata name) external override returns (uint120) {\\n        uint120 id = ++lastPermittedContractReceiverAllowlistId;\\n\\n        permittedContractReceiverAllowlistOwners[id] = _msgSender();\\n\\n        emit CreatedAllowlist(AllowlistTypes.PermittedContractReceivers, id, name);\\n        emit ReassignedAllowlistOwnership(AllowlistTypes.PermittedContractReceivers, id, _msgSender());\\n\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Transfer ownership of an operator whitelist to a new owner.\\n     *\\n     * @dev Throws when the new owner is the zero address.\\n     * @dev Throws when the caller does not own the specified operator whitelist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The operator whitelist ownership is transferred to the new owner.\\n     *      2. A `ReassignedAllowlistOwnership` event is emitted.\\n     *\\n     * @param id       The id of the operator whitelist.\\n     * @param newOwner The address of the new owner.\\n     */\\n    function reassignOwnershipOfOperatorWhitelist(uint120 id, address newOwner) external override {\\n        if(newOwner == address(0)) {\\n            revert CreatorTokenTransferValidator__AllowlistOwnershipCannotBeTransferredToZeroAddress();\\n        }\\n\\n        _reassignOwnershipOfOperatorWhitelist(id, newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfer ownership of a permitted contract receiver allowlist to a new owner.\\n     *\\n     * @dev Throws when the new owner is the zero address.\\n     * @dev Throws when the caller does not own the specified permitted contract receiver allowlist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The permitted contract receiver allowlist ownership is transferred to the new owner.\\n     *      2. A `ReassignedAllowlistOwnership` event is emitted.\\n     *\\n     * @param id       The id of the permitted contract receiver allowlist.\\n     * @param newOwner The address of the new owner.\\n     */\\n    function reassignOwnershipOfPermittedContractReceiverAllowlist(uint120 id, address newOwner) external override {\\n        if(newOwner == address(0)) {\\n            revert CreatorTokenTransferValidator__AllowlistOwnershipCannotBeTransferredToZeroAddress();\\n        }\\n\\n        _reassignOwnershipOfPermittedContractReceiverAllowlist(id, newOwner);\\n    }\\n\\n    /**\\n     * @notice Renounce the ownership of an operator whitelist, rendering the whitelist immutable.\\n     *\\n     * @dev Throws when the caller does not own the specified operator whitelist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The ownership of the specified operator whitelist is renounced.\\n     *      2. A `ReassignedAllowlistOwnership` event is emitted.\\n     *\\n     * @param id The id of the operator whitelist.\\n     */\\n    function renounceOwnershipOfOperatorWhitelist(uint120 id) external override {\\n        _reassignOwnershipOfOperatorWhitelist(id, address(0));\\n    }\\n\\n    /**\\n     * @notice Renounce the ownership of a permitted contract receiver allowlist, rendering the allowlist immutable.\\n     *\\n     * @dev Throws when the caller does not own the specified permitted contract receiver allowlist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The ownership of the specified permitted contract receiver allowlist is renounced.\\n     *      2. A `ReassignedAllowlistOwnership` event is emitted.\\n     *\\n     * @param id The id of the permitted contract receiver allowlist.\\n     */\\n    function renounceOwnershipOfPermittedContractReceiverAllowlist(uint120 id) external override {\\n        _reassignOwnershipOfPermittedContractReceiverAllowlist(id, address(0));\\n    }\\n\\n    /**\\n     * @notice Set the transfer security level of a collection.\\n     *\\n     * @dev Throws when the caller is neither collection contract, nor the owner or admin of the specified collection.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The transfer security level of the specified collection is set to the new value.\\n     *      2. A `SetTransferSecurityLevel` event is emitted.\\n     *\\n     * @param collection The address of the collection.\\n     * @param level      The new transfer security level to apply.\\n     */\\n    function setTransferSecurityLevelOfCollection(\\n        address collection, \\n        TransferSecurityLevels level) external override {\\n        _requireCallerIsNFTOrContractOwnerOrAdmin(collection);\\n        collectionSecurityPolicies[collection].transferSecurityLevel = level;\\n        emit SetTransferSecurityLevel(collection, level);\\n    }\\n\\n    /**\\n     * @notice Set the operator whitelist of a collection.\\n     * \\n     * @dev Throws when the caller is neither collection contract, nor the owner or admin of the specified collection.\\n     * @dev Throws when the specified operator whitelist id does not exist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The operator whitelist of the specified collection is set to the new value.\\n     *      2. A `SetAllowlist` event is emitted.\\n     *\\n     * @param collection The address of the collection.\\n     * @param id         The id of the operator whitelist.\\n     */\\n    function setOperatorWhitelistOfCollection(address collection, uint120 id) external override {\\n        _requireCallerIsNFTOrContractOwnerOrAdmin(collection);\\n\\n        if (id > lastOperatorWhitelistId) {\\n            revert CreatorTokenTransferValidator__AllowlistDoesNotExist();\\n        }\\n\\n        collectionSecurityPolicies[collection].operatorWhitelistId = id;\\n        emit SetAllowlist(AllowlistTypes.Operators, collection, id);\\n    }\\n\\n    /**\\n     * @notice Set the permitted contract receiver allowlist of a collection.\\n     *\\n     * @dev Throws when the caller does not own the specified collection.\\n     * @dev Throws when the specified permitted contract receiver allowlist id does not exist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The permitted contract receiver allowlist of the specified collection is set to the new value.\\n     *      2. A `PermittedContractReceiverAllowlistSet` event is emitted.\\n     *\\n     * @param collection The address of the collection.\\n     * @param id         The id of the permitted contract receiver allowlist.\\n     */\\n    function setPermittedContractReceiverAllowlistOfCollection(address collection, uint120 id) external override {\\n        _requireCallerIsNFTOrContractOwnerOrAdmin(collection);\\n\\n        if (id > lastPermittedContractReceiverAllowlistId) {\\n            revert CreatorTokenTransferValidator__AllowlistDoesNotExist();\\n        }\\n\\n        collectionSecurityPolicies[collection].permittedContractReceiversId = id;\\n        emit SetAllowlist(AllowlistTypes.PermittedContractReceivers, collection, id);\\n    }\\n\\n    /**\\n     * @notice Add an operator to an operator whitelist.\\n     *\\n     * @dev Throws when the caller does not own the specified operator whitelist.\\n     * @dev Throws when the operator address is already allowed.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The operator is added to the specified operator whitelist.\\n     *      2. An `AddedToAllowlist` event is emitted.\\n     *\\n     * @param id       The id of the operator whitelist.\\n     * @param operator The address of the operator to add.\\n     */\\n    function addOperatorToWhitelist(uint120 id, address operator) external override {\\n        _requireCallerOwnsOperatorWhitelist(id);\\n\\n        if (!operatorWhitelists[id].add(operator)) {\\n            revert CreatorTokenTransferValidator__AddressAlreadyAllowed();\\n        }\\n\\n        emit AddedToAllowlist(AllowlistTypes.Operators, id, operator);\\n    }\\n\\n    /**\\n     * @notice Add a contract address to a permitted contract receiver allowlist.\\n     *\\n     * @dev Throws when the caller does not own the specified permitted contract receiver allowlist.\\n     * @dev Throws when the contract address is already allowed.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The contract address is added to the specified permitted contract receiver allowlist.\\n     *      2. An `AddedToAllowlist` event is emitted.\\n     *\\n     * @param id              The id of the permitted contract receiver allowlist.\\n     * @param receiver The address of the contract to add.\\n     */\\n    function addPermittedContractReceiverToAllowlist(uint120 id, address receiver) external override {\\n        _requireCallerOwnsPermittedContractReceiverAllowlist(id);\\n\\n        if (!permittedContractReceiverAllowlists[id].add(receiver)) {\\n            revert CreatorTokenTransferValidator__AddressAlreadyAllowed();\\n        }\\n\\n        emit AddedToAllowlist(AllowlistTypes.PermittedContractReceivers, id, receiver);\\n    }\\n\\n    /**\\n     * @notice Remove an operator from an operator whitelist.\\n     *\\n     * @dev Throws when the caller does not own the specified operator whitelist.\\n     * @dev Throws when the operator is not in the specified operator whitelist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The operator is removed from the specified operator whitelist.\\n     *      2. A `RemovedFromAllowlist` event is emitted.\\n     *\\n     * @param id       The id of the operator whitelist.\\n     * @param operator The address of the operator to remove.\\n     */\\n    function removeOperatorFromWhitelist(uint120 id, address operator) external override {\\n        _requireCallerOwnsOperatorWhitelist(id);\\n\\n        if (!operatorWhitelists[id].remove(operator)) {\\n            revert CreatorTokenTransferValidator__AddressNotAllowed();\\n        }\\n\\n        emit RemovedFromAllowlist(AllowlistTypes.Operators, id, operator);\\n    }\\n\\n    /**\\n     * @notice Remove a contract address from a permitted contract receiver allowlist.\\n     * \\n     * @dev Throws when the caller does not own the specified permitted contract receiver allowlist.\\n     * @dev Throws when the contract address is not in the specified permitted contract receiver allowlist.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     *      1. The contract address is removed from the specified permitted contract receiver allowlist.\\n     *      2. A `RemovedFromAllowlist` event is emitted.\\n     *\\n     * @param id       The id of the permitted contract receiver allowlist.\\n     * @param receiver The address of the contract to remove.\\n     */\\n    function removePermittedContractReceiverFromAllowlist(uint120 id, address receiver) external override {\\n        _requireCallerOwnsPermittedContractReceiverAllowlist(id);\\n\\n        if (!permittedContractReceiverAllowlists[id].remove(receiver)) {\\n            revert CreatorTokenTransferValidator__AddressNotAllowed();\\n        }\\n\\n        emit RemovedFromAllowlist(AllowlistTypes.PermittedContractReceivers, id, receiver);\\n    }\\n\\n    /**\\n     * @notice Get the security policy of the specified collection.\\n     * @param collection The address of the collection.\\n     * @return           The security policy of the specified collection, which includes:\\n     *                   Transfer security level, operator whitelist id, permitted contract receiver allowlist id\\n     */\\n    function getCollectionSecurityPolicy(address collection) \\n        external view override returns (CollectionSecurityPolicy memory) {\\n        return collectionSecurityPolicies[collection];\\n    }\\n\\n    /**\\n     * @notice Get the whitelisted operators in an operator whitelist.\\n     * @param id The id of the operator whitelist.\\n     * @return   An array of whitelisted operator addresses.\\n     */\\n    function getWhitelistedOperators(uint120 id) external view override returns (address[] memory) {\\n        return operatorWhitelists[id].values();\\n    }\\n\\n    /**\\n     * @notice Get the permitted contract receivers in a permitted contract receiver allowlist.\\n     * @param id The id of the permitted contract receiver allowlist.\\n     * @return   An array of contract addresses is the permitted contract receiver allowlist.\\n     */\\n    function getPermittedContractReceivers(uint120 id) external view override returns (address[] memory) {\\n        return permittedContractReceiverAllowlists[id].values();\\n    }\\n\\n    /**\\n     * @notice Check if an operator is in a specified operator whitelist.\\n     * @param id       The id of the operator whitelist.\\n     * @param operator The address of the operator to check.\\n     * @return         True if the operator is in the specified operator whitelist, false otherwise.\\n     */\\n    function isOperatorWhitelisted(uint120 id, address operator) public view override returns (bool) {\\n        return operatorWhitelists[id].contains(operator);\\n    }\\n\\n    /**\\n     * @notice Check if a contract address is in a specified permitted contract receiver allowlist.\\n     * @param id       The id of the permitted contract receiver allowlist.\\n     * @param receiver The address of the contract to check.\\n     * @return         True if the contract address is in the specified permitted contract receiver allowlist, \\n     *                 false otherwise.\\n     */\\n    function isContractReceiverPermitted(uint120 id, address receiver) public view override returns (bool) {\\n        return permittedContractReceiverAllowlists[id].contains(receiver);\\n    }\\n\\n    /// @notice ERC-165 Interface Support\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(EOARegistry, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(ITransferValidator).interfaceId ||\\n            interfaceId == type(ITransferSecurityRegistry).interfaceId ||\\n            interfaceId == type(ICreatorTokenTransferValidator).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _requireCallerIsNFTOrContractOwnerOrAdmin(address tokenAddress) internal view {\\n        bool callerHasPermissions = false;\\n        if(tokenAddress.code.length > 0) {\\n            callerHasPermissions = _msgSender() == tokenAddress;\\n            if(!callerHasPermissions) {\\n\\n                try IOwnable(tokenAddress).owner() returns (address contractOwner) {\\n                    callerHasPermissions = _msgSender() == contractOwner;\\n                } catch {}\\n\\n                if(!callerHasPermissions) {\\n                    try IAccessControl(tokenAddress).hasRole(DEFAULT_ACCESS_CONTROL_ADMIN_ROLE, _msgSender()) \\n                        returns (bool callerIsContractAdmin) {\\n                        callerHasPermissions = callerIsContractAdmin;\\n                    } catch {}\\n                }\\n            }\\n        }\\n\\n        if(!callerHasPermissions) {\\n            revert CreatorTokenTransferValidator__CallerMustHaveElevatedPermissionsForSpecifiedNFT();\\n        }\\n    }\\n\\n    function _reassignOwnershipOfOperatorWhitelist(uint120 id, address newOwner) private {\\n        _requireCallerOwnsOperatorWhitelist(id);\\n        operatorWhitelistOwners[id] = newOwner;\\n        emit ReassignedAllowlistOwnership(AllowlistTypes.Operators, id, newOwner);\\n    }\\n\\n    function _reassignOwnershipOfPermittedContractReceiverAllowlist(uint120 id, address newOwner) private {\\n        _requireCallerOwnsPermittedContractReceiverAllowlist(id);\\n        permittedContractReceiverAllowlistOwners[id] = newOwner;\\n        emit ReassignedAllowlistOwnership(AllowlistTypes.PermittedContractReceivers, id, newOwner);\\n    }\\n\\n    function _requireCallerOwnsOperatorWhitelist(uint120 id) private view {\\n        if (_msgSender() != operatorWhitelistOwners[id]) {\\n            revert CreatorTokenTransferValidator__CallerDoesNotOwnAllowlist();\\n        }\\n    }\\n\\n    function _requireCallerOwnsPermittedContractReceiverAllowlist(uint120 id) private view {\\n        if (_msgSender() != permittedContractReceiverAllowlistOwners[id]) {\\n            revert CreatorTokenTransferValidator__CallerDoesNotOwnAllowlist();\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/EOARegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IEOARegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n\\nerror CallerDidNotSignTheMessage();\\nerror SignatureAlreadyVerified();\\n\\n/**\\n * @title EOARegistry\\n * @author Limit Break, Inc.\\n * @notice A registry that may be used globally by any smart contract that limits contract interactions to verified EOA addresses only.\\n * @dev Take care and carefully consider whether or not to use this. Restricting operations to EOA only accounts can break Defi composability, \\n * so if Defi composability is an objective, this is not a good option.  Be advised that in the future, EOA accounts might not be a thing\\n * but this is yet to be determined.  See https://eips.ethereum.org/EIPS/eip-4337 for more information.\\n */\\ncontract EOARegistry is Context, ERC165, IEOARegistry {\\n\\n    /// @dev A pre-cached signed message hash used for gas-efficient signature recovery\\n    bytes32 immutable private signedMessageHash;\\n\\n    /// @dev The plain text message to sign for signature verification\\n    string constant public MESSAGE_TO_SIGN = \\\"EOA\\\";\\n\\n    /// @dev Mapping of accounts that to signature verification status\\n    mapping (address => bool) private eoaSignatureVerified;\\n\\n    /// @dev Emitted whenever a user verifies that they are an EOA by submitting their signature.\\n    event VerifiedEOASignature(address indexed account);\\n\\n    constructor() {\\n        signedMessageHash = ECDSA.toEthSignedMessageHash(bytes(MESSAGE_TO_SIGN));\\n    }\\n\\n    /// @notice Allows a user to verify an ECDSA signature to definitively prove they are an EOA account.\\n    ///\\n    /// Throws when the caller has already verified their signature.\\n    /// Throws when the caller did not sign the message.\\n    ///\\n    /// Postconditions:\\n    /// ---------------\\n    /// The verified signature mapping has been updated to `true` for the caller.\\n    function verifySignature(bytes calldata signature) external {\\n        if(eoaSignatureVerified[_msgSender()]) {\\n            revert SignatureAlreadyVerified();\\n        }\\n\\n        if(_msgSender() != ECDSA.recover(signedMessageHash, signature)) {\\n            revert CallerDidNotSignTheMessage();\\n        }\\n\\n        eoaSignatureVerified[_msgSender()] = true;\\n\\n        emit VerifiedEOASignature(_msgSender());\\n    }\\n\\n    /// @notice Allows a user to verify an ECDSA signature to definitively prove they are an EOA account.\\n    /// This version is passed the v, r, s components of the signature, and is slightly more gas efficient than\\n    /// calculating the v, r, s components on-chain.\\n    ///\\n    /// Throws when the caller has already verified their signature.\\n    /// Throws when the caller did not sign the message.\\n    ///\\n    /// Postconditions:\\n    /// ---------------\\n    /// The verified signature mapping has been updated to `true` for the caller.\\n    function verifySignatureVRS(uint8 v, bytes32 r, bytes32 s) external {\\n        if(eoaSignatureVerified[msg.sender]) {\\n            revert SignatureAlreadyVerified();\\n        }\\n\\n        if(msg.sender != ECDSA.recover(signedMessageHash, v, r, s)) {\\n            revert CallerDidNotSignTheMessage();\\n        }\\n\\n        eoaSignatureVerified[msg.sender] = true;\\n\\n        emit VerifiedEOASignature(msg.sender);\\n    }\\n\\n    /// @notice Returns true if the specified account has verified a signature on this registry, false otherwise.\\n    function isVerifiedEOA(address account) public view override returns (bool) {\\n        return eoaSignatureVerified[account];\\n    }\\n\\n    /// @dev ERC-165 interface support\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IEOARegistry).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/TransferPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nenum AllowlistTypes {\\n    Operators,\\n    PermittedContractReceivers\\n}\\n\\nenum ReceiverConstraints {\\n    None,\\n    NoCode,\\n    EOA\\n}\\n\\nenum CallerConstraints {\\n    None,\\n    OperatorWhitelistEnableOTC,\\n    OperatorWhitelistDisableOTC\\n}\\n\\nenum StakerConstraints {\\n    None,\\n    CallerIsTxOrigin,\\n    EOA\\n}\\n\\nenum TransferSecurityLevels {\\n    Zero,\\n    One,\\n    Two,\\n    Three,\\n    Four,\\n    Five,\\n    Six\\n}\\n\\nstruct TransferSecurityPolicy {\\n    CallerConstraints callerConstraints;\\n    ReceiverConstraints receiverConstraints;\\n}\\n\\nstruct CollectionSecurityPolicy {\\n    TransferSecurityLevels transferSecurityLevel;\\n    uint120 operatorWhitelistId;\\n    uint120 permittedContractReceiversId;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc721a/=node_modules/erc721a/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerDidNotSignTheMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__AddressAlreadyAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__AddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__AllowlistDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__AllowlistOwnershipCannotBeTransferredToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__CallerDoesNotOwnAllowlist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__CallerMustBeWhitelistedOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__CallerMustHaveElevatedPermissionsForSpecifiedNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__ReceiverMustNotHaveDeployedCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenTransferValidator__ReceiverProofOfEOASignatureUnverified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureAlreadyVerified\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum AllowlistTypes\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum AllowlistTypes\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CreatedAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum AllowlistTypes\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ReassignedAllowlistOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum AllowlistTypes\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum AllowlistTypes\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"SetAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SetTransferSecurityLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VerifiedEOASignature\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_TRANSFER_SECURITY_LEVEL\",\"outputs\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_TO_SIGN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperatorToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"addPermittedContractReceiverToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"applyCollectionTransferPolicy\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createOperatorWhitelist\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createPermittedContractReceiverAllowlist\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionSecurityPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"transferSecurityLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversId\",\"type\":\"uint120\"}],\"internalType\":\"struct CollectionSecurityPolicy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"getPermittedContractReceivers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"getWhitelistedOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"isContractReceiverPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVerifiedEOA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"name\":\"operatorWhitelistOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"name\":\"permittedContractReceiverAllowlistOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"reassignOwnershipOfOperatorWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"reassignOwnershipOfPermittedContractReceiverAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperatorFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"removePermittedContractReceiverFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"renounceOwnershipOfOperatorWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"renounceOwnershipOfPermittedContractReceiverAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"setOperatorWhitelistOfCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint120\",\"name\":\"id\",\"type\":\"uint120\"}],\"name\":\"setPermittedContractReceiverAllowlistOfCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"setTransferSecurityLevelOfCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"transferSecurityPolicies\",\"outputs\":[{\"internalType\":\"enum CallerConstraints\",\"name\":\"callerConstraints\",\"type\":\"uint8\"},{\"internalType\":\"enum ReceiverConstraints\",\"name\":\"receiverConstraints\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifySignatureVRS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CreatorTokenTransferValidator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000067985b1f8b613b57077bbdb24a5defcdda458317", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}