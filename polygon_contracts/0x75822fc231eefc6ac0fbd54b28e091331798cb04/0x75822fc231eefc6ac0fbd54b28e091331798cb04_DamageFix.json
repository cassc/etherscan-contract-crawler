{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DamageFix.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Managable.sol\\\";\\n\\nimport \\\"./IBot.sol\\\";\\nimport \\\"./IERC20Burnable.sol\\\";\\nimport \\\"./IBotMetadata.sol\\\";\\nimport \\\"./Ships/IShip.sol\\\";\\nimport \\\"./Ships/IShipMetadata.sol\\\";\\nimport \\\"./ITokenPaymentSplitter.sol\\\";\\nimport \\\"./IRewardsSpender.sol\\\";\\n\\n\\ncontract DamageFix is Managable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    address public botAddress;\\n    address public botTeamAddress;\\n    address public botMetadataAddress;\\n    address public shipAddress;\\n    address public shipTeamAddress;\\n    address public shipMetadataAddress;\\n    address public oilAddress;\\n    address public treasuryAddress;\\n    address public rewardsSpenderAddress;\\n    uint256 public durabilityPrice;\\n    uint256 public shipCoefficient; // is equal to real coefficient * 10000\\n    uint256 public waitTime;\\n    uint256 public bitsOilRatio; // value of one BITS in Oil * 10000\\n    uint256 public commissionPercentage; // commission percentage * 10000\\n\\n    mapping(address => mapping(uint => FixedItem)) public fixedItems; //nft address -> nftId -> FixedItem details\\n\\n    address public immutable BITS_ADDRESS;\\n\\n    struct FixedItem {\\n        uint32 _nextFixTime;\\n        uint32 _fixEnd;\\n        uint192 oilPrice;\\n    }\\n\\n    event ChangedBotAddress(address _addr);\\n    event ChangedBotTeamAddress(address _addr);\\n    event ChangedBotMetadataAddress(address _addr);\\n    event ChangedShipAddress(address _addr);\\n    event ChangedShipTeamAddress(address _addr);\\n    event ChangedShipMetadataAddress(address _addr);\\n    event ChangedOilAddress(address _addr);\\n    event ChangedTreasuryAddress(address _addr);\\n    event ChangedRewardsSpenderAddress(address _addr);\\n    event ChangedDurabilityPrice(uint256 _price);\\n    event ChangedShipCoefficient(uint256 _coeff);\\n    event ChangedWaitTime(uint256 _waitTime);\\n    event ChangedBitsOilRatio(uint256 _ratio);\\n    event ChangedCommissionPercentage(uint256 _commissionPercentage);\\n    event EarlyClaimBreedAmounts (uint256 indexed _earlyClaimId, uint256 indexed _tokenId, uint256 _oilClaim, uint256 _bitsClaim);\\n\\n    event DurabilityFixed(\\n        address indexed _nft,\\n        uint indexed _nftId,\\n        address indexed _owner,\\n        uint _durabilityFixed,\\n        uint _oilPrice,\\n        uint _bitsCommission,\\n        uint _fixStart,\\n        uint _nextFixTime,\\n        uint _fixEnd\\n    );\\n\\n    event SpeedUp(\\n        address indexed _nft,\\n        uint indexed _nftId,\\n        address indexed _owner,\\n        uint _oilPrice,\\n        uint _bitsCommission,\\n        uint _nextFixTime,        \\n        uint _fixEnd\\n    );\\n\\n    /// @notice @param _shipCoefficient is equal to real coefficient * 10000\\n    /// @notice @param _bitsOilRatio is equal to value of one BITS in Oil * 10000\\n    /// @notice @param _comissionPercentage is equal to commision percentage * 10000\\n    constructor(\\n        address _botAddress,\\n        address _botMetadataAddress,\\n        address _shipAddress,\\n        address _shipMetadataAddress,\\n        address _oilAddress,\\n        address _bitAddress,\\n        address _treasuryAddress,\\n        uint _durabilityPrice,\\n        uint _shipCoefficient,\\n        uint _waitTime,\\n        uint _bitsOilRatio,\\n        uint _comissionPercentage\\n    ) {\\n        _setBotAddress(_botAddress);\\n        _setBotMetadataAddress(_botMetadataAddress);\\n        _setShipAddress(_shipAddress);\\n        _setShipMetadataAddress(_shipMetadataAddress);\\n        _setOilAddress(_oilAddress);\\n        BITS_ADDRESS = _bitAddress;\\n        _setTreasuryAddress(_treasuryAddress);\\n        _setDurabilityPrice(_durabilityPrice);\\n        _setShipCoefficient(_shipCoefficient);\\n        _setWaitTime(_waitTime);\\n        _setBitsOilRatio(_bitsOilRatio);\\n        _setComsissionPercentage(_comissionPercentage);\\n        _addManager(msg.sender);\\n    }\\n\\n    function fixDurability (address _owner, uint _durability, address _nft, uint _nftId, bool _speedUp) external whenNotPaused {\\n        (uint _oilPrice, uint _bitsPrice) = _fixDurability (_owner, _durability, _nft, _nftId, _speedUp);\\n\\n        IERC20Burnable(oilAddress).burnFrom(_owner, _oilPrice);\\n\\n        if(_bitsPrice > 0){\\n            require(IERC20(BITS_ADDRESS).transferFrom(msg.sender, address(this), _bitsPrice));\\n            IERC20(BITS_ADDRESS).approve(treasuryAddress, _bitsPrice);\\n            ITokenPaymentSplitter(treasuryAddress).split(BITS_ADDRESS, msg.sender, _bitsPrice);\\n        }\\n    }\\n\\n    function fixWithEarlyClaim (\\n        address _owner,\\n        uint _durability,\\n        address _nft,\\n        uint _nftId,\\n        bool _speedUp,\\n        IRewardsSpender.EarlyClaim calldata _earlyClaim,\\n        bytes calldata _signature\\n    ) external whenNotPaused {\\n        require(_earlyClaim.addr == msg.sender, \\\"not claim owner\\\");\\n        require(address(this) == _earlyClaim.contractAddr, \\\"not allowed\\\");\\n        require(_earlyClaim.parts.length == 1, \\\"wrong token number\\\");\\n    \\n        (uint _oilPrice, uint _bitsPrice) = _fixDurability (_owner, _durability, _nft, _nftId, _speedUp);\\n\\n        IRewardsSpender.Rewarder memory _rewarder1 = IRewardsSpender(rewardsSpenderAddress).rewarders(_earlyClaim.parts[0].name);\\n        require(_rewarder1.addr == oilAddress, \\\"wrong token\\\");\\n        require(( _earlyClaim.parts[0].amountUserWallet + _earlyClaim.parts[0].amountClaim) == _oilPrice, \\\"wrong ac\\\");\\n\\n        {\\n            try IRewardsSpender(rewardsSpenderAddress).earlyClaim(_earlyClaim, _signature) returns (bool result) {\\n                require(result, \\\"EarlyClaim fail\\\");\\n            } catch Error (string memory _reason) {\\n                revert(_reason);\\n            } catch {\\n                revert();\\n            }\\n        }\\n\\n        IERC20Burnable(oilAddress).burnFrom(_owner, _oilPrice);\\n\\n        if(_bitsPrice > 0){\\n            require(IERC20(BITS_ADDRESS).transferFrom(msg.sender, address(this), _bitsPrice));\\n            IERC20(BITS_ADDRESS).approve(treasuryAddress, _bitsPrice);\\n            ITokenPaymentSplitter(treasuryAddress).split(BITS_ADDRESS, msg.sender, _bitsPrice);\\n        }\\n    }\\n\\n    function _fixDurability (address _owner, uint _durability, address _nft, uint _nftId, bool _speedUp) internal returns (uint _oilPrice, uint _bitsPrice) {\\n        uint _fixEnd;\\n        uint _nextFixTime;\\n\\n        FixedItem memory _item = fixedItems[_nft][_nftId];\\n        require (_durability > 0, \\\"Durability fix is zero\\\");\\n        require(uint(_item._fixEnd) < block.timestamp, \\\"Item is being fixed\\\");\\n        require(uint(_item._nextFixTime) < block.timestamp, \\\"Fix Timeout not finished\\\");\\n\\n        if(_nft == botAddress){\\n            _checkGenes(true, _nftId);\\n            _oilPrice = _durability * durabilityPrice;\\n        } else if (_nft == shipAddress){\\n            _checkGenes(false, _nftId);\\n            _oilPrice = _durability * durabilityPrice * shipCoefficient / 10000;\\n        } else {\\n            revert(\\\"Incorrect NFT\\\");\\n        }\\n        \\n        if(_speedUp == true){\\n            _oilPrice *= 2;\\n            _nextFixTime = block.timestamp + 600;            \\n            _fixEnd = block.timestamp;\\n        } else {\\n            _nextFixTime = block.timestamp + waitTime;            \\n            _fixEnd = block.timestamp + waitTime;\\n        }\\n\\n        _bitsPrice = _getBitsPrice(_oilPrice);\\n\\n        fixedItems[_nft][_nftId] = FixedItem(uint32(_nextFixTime), uint32(_fixEnd), uint192(_oilPrice));\\n\\n        emit DurabilityFixed(_nft, _nftId, _owner, _durability, _oilPrice, _bitsPrice, block.timestamp,_nextFixTime, _fixEnd);\\n\\n        return (_oilPrice, _bitsPrice);\\n    }\\n\\n\\n    function speedUpFix (address _nft, uint _nftId) external whenNotPaused {\\n\\n        (uint _oilPrice, uint _bitsPrice) = _speedUpFix(_nft, _nftId);\\n\\n        IERC20Burnable(oilAddress).burnFrom(msg.sender, _oilPrice);\\n\\n        if(_bitsPrice > 0){\\n            require(IERC20(BITS_ADDRESS).transferFrom(msg.sender, address(this), _bitsPrice));\\n            IERC20(BITS_ADDRESS).approve(treasuryAddress, _bitsPrice);\\n            ITokenPaymentSplitter(treasuryAddress).split(BITS_ADDRESS, msg.sender, _bitsPrice);\\n        }\\n    }\\n\\n    function speedUpFixWithEarlyClaim (\\n        address _nft,\\n        uint _nftId,\\n        IRewardsSpender.EarlyClaim calldata _earlyClaim,\\n        bytes calldata _signature\\n    ) external whenNotPaused {\\n\\n        require(_earlyClaim.addr == msg.sender, \\\"not claim owner\\\");\\n        require(address(this) == _earlyClaim.contractAddr, \\\"not allowed\\\");\\n        require(_earlyClaim.parts.length == 1, \\\"wrong token number\\\");\\n\\n        (uint _oilPrice, uint _bitsPrice) = _speedUpFix(_nft, _nftId);\\n\\n        IRewardsSpender.Rewarder memory _rewarder1 = IRewardsSpender(rewardsSpenderAddress).rewarders(_earlyClaim.parts[0].name);\\n        require(_rewarder1.addr == oilAddress, \\\"wrong token\\\");\\n        require(( _earlyClaim.parts[0].amountUserWallet + _earlyClaim.parts[0].amountClaim) >= _oilPrice && ( _earlyClaim.parts[0].amountUserWallet + _earlyClaim.parts[0].amountClaim) <= _oilPrice + 100000000000000000 , \\\"wrong ac\\\");\\n\\n        {\\n            try IRewardsSpender(rewardsSpenderAddress).earlyClaim(_earlyClaim, _signature) returns (bool result) {\\n                require(result, \\\"EarlyClaim fail\\\");\\n            } catch Error (string memory _reason) {\\n                revert(_reason);\\n            } catch {\\n                revert();\\n            }\\n        }\\n\\n        IERC20Burnable(oilAddress).burnFrom(msg.sender, _oilPrice);\\n\\n        if(_bitsPrice > 0){\\n            require(IERC20(BITS_ADDRESS).transferFrom(msg.sender, address(this), _bitsPrice));\\n            IERC20(BITS_ADDRESS).approve(treasuryAddress, _bitsPrice);\\n            ITokenPaymentSplitter(treasuryAddress).split(BITS_ADDRESS, msg.sender, _bitsPrice);\\n        }\\n    }\\n\\n\\n    function _speedUpFix (address _nft, uint _nftId) internal returns (uint _oilPrice,uint _bitsPrice) {\\n        require(_nft == botAddress || _nft == shipAddress, \\\"Incorrect NFT\\\");\\n\\n        FixedItem memory _item = fixedItems[_nft][_nftId];\\n        require(uint(_item._fixEnd) > block.timestamp, \\\"No item Or Already Fixed\\\");\\n        uint _timeLeft = uint(_item._fixEnd) - block.timestamp;\\n        _oilPrice = (uint(_item.oilPrice) * _timeLeft) / waitTime;\\n\\n        uint _nextFixTime = block.timestamp + 600;\\n        _item._nextFixTime = uint32(_nextFixTime);\\n        _item._fixEnd = uint32(block.timestamp);\\n        _item.oilPrice += uint192(_oilPrice);\\n        fixedItems[_nft][_nftId] = _item;\\n\\n         _bitsPrice = _getBitsPrice(_oilPrice);\\n\\n        emit SpeedUp(_nft, _nftId, msg.sender, _oilPrice, _bitsPrice, _nextFixTime, block.timestamp);\\n\\n        return (_oilPrice, _bitsPrice);\\n    }\\n\\n\\n    function _checkToken(address _rewardedToken, uint _tokenPrice, uint _oilPrice, uint _amountUserWallet, uint _amountClaim, address _token) internal pure {\\n        if(_rewardedToken == _token){\\n            require(( _amountUserWallet + _amountClaim) == _tokenPrice, \\\"wrong ac\\\");\\n        } else {\\n            require(( _amountUserWallet + _amountClaim) == _oilPrice, \\\"wrong ac\\\");\\n        }\\n    }\\n\\n    function getFixedItemDetails(address _nft, uint _nftId) public view returns (uint _nextFixTime, uint _fixEnd, uint _oilPrice){\\n        FixedItem memory _item = fixedItems[_nft][_nftId];\\n        _nextFixTime = uint(_item._nextFixTime);\\n        _fixEnd = uint(_item._fixEnd);\\n        _oilPrice = uint(_item.oilPrice);\\n    }\\n\\n    function setBotAddress(address _addr) external onlyManager {\\n        _setBotAddress(_addr);\\n    }\\n\\n    function setBotMetadataAddress(address _addr) external onlyManager {\\n        _setBotMetadataAddress(_addr);\\n    }    \\n\\n    function setShipAddress(address _shipAddress) external onlyManager {\\n        _setShipAddress(_shipAddress);\\n    }\\n\\n    function setShipMetadataAddress(address _shipMetadataAddress) external onlyManager {\\n        _setShipMetadataAddress(_shipMetadataAddress);\\n    }\\n\\n    function setOilAddress(address _addr) external onlyManager {\\n        _setOilAddress(_addr);\\n    }\\n\\n    function setBotTeamAddress(address _addr) external onlyManager {\\n        _setBotTeamAddress(_addr);\\n    }     \\n\\n    function setShipTeamAddress(address _addr) external onlyManager {\\n        _setShipTeamAddress(_addr);\\n    }\\n\\n    function setTreasuryAddress(address _addr) external onlyManager {\\n        _setTreasuryAddress(_addr);\\n    }  \\n\\n    function setRewardsSpenderAddress(address _addr) external onlyManager {\\n        _setRewardsSpenderAddress(_addr);\\n    }\\n\\n    function setDurabilityPrice(uint256 _price) external onlyManager {\\n        _setDurabilityPrice(_price);\\n    }\\n\\n    /// @notice @param _coeff is equal to real coefficient * 10000\\n    function setShipCoefficient(uint256 _coeff) external onlyManager {\\n        _setShipCoefficient(_coeff);\\n    }\\n\\n    function setWaitTime(uint256 _waitTime) external onlyManager {\\n        _setWaitTime(_waitTime);\\n    }      \\n\\n    /// @notice @param _bitsOilRatio is equal to value of one BITS in Oil * 10000\\n    function setBitsOilRatio(uint256 _bitsOilRatio) external onlyManager {\\n        _setBitsOilRatio(_bitsOilRatio);\\n    }\\n\\n    /// @notice @param _commissionPercentage is equal to commission percentage * 10000\\n    function setComsissionPercentage(uint _commissionPercentage) external onlyManager {\\n        _setComsissionPercentage(_commissionPercentage);\\n    }\\n\\n    function togglePause() external onlyManager {\\n        if(paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    function _checkGenes (bool _isBot, uint _nftId) private view {\\n        uint genes;\\n        if(_isBot == true){\\n            genes = IBotMetadata(botMetadataAddress).getBot(_nftId).genes;\\n            require(genes != 0, \\\"No Bot\\\");\\n        } else {\\n            genes = IShipMetadata(shipMetadataAddress).getShip(_nftId).genes;\\n            require(genes != 0, \\\"No Ship\\\");\\n        }\\n    }\\n\\n    function _getBitsPrice(uint _oilPrice) private view  returns (uint _bitsPrice) {\\n        uint _bitsOilRatio = bitsOilRatio;\\n        _bitsPrice = (_oilPrice * 10000 / _bitsOilRatio) * commissionPercentage / (10000*100);\\n        return _bitsPrice;\\n    }     \\n\\n    function _setBotAddress(address _addr) internal {\\n        botAddress = _addr;\\n        emit ChangedBotAddress(_addr);\\n    }\\n\\n    function _setBotTeamAddress(address _addr) internal {\\n        botTeamAddress = _addr;\\n        emit ChangedBotTeamAddress(_addr);\\n    }\\n\\n    function _setBotMetadataAddress(address _addr) internal {\\n        botMetadataAddress = _addr;\\n        emit ChangedBotMetadataAddress(_addr);\\n    }    \\n\\n    function _setShipAddress(address _shipAddress) internal {\\n        shipAddress = _shipAddress;\\n        emit ChangedShipAddress(_shipAddress);\\n    }\\n\\n    function _setShipTeamAddress(address _addr) internal {\\n        shipTeamAddress = _addr;\\n        emit ChangedShipTeamAddress(_addr);\\n    }\\n\\n    function _setShipMetadataAddress(address _shipMetadataAddress) internal {\\n        shipMetadataAddress = _shipMetadataAddress;\\n        emit ChangedShipMetadataAddress(_shipMetadataAddress);\\n    }\\n\\n    function _setOilAddress(address _addr) internal {\\n       oilAddress = _addr;\\n       emit ChangedOilAddress(_addr);  \\n    }\\n\\n    function _setTreasuryAddress(address _addr) internal {\\n        treasuryAddress = _addr;\\n        emit ChangedTreasuryAddress(_addr);\\n    }   \\n\\n    function _setRewardsSpenderAddress(address _addr) internal {\\n        rewardsSpenderAddress = _addr;\\n        emit ChangedRewardsSpenderAddress(_addr);\\n    }\\n\\n    function _setDurabilityPrice(uint256 _price) internal {\\n        durabilityPrice = _price;\\n        emit ChangedDurabilityPrice(_price);\\n    }      \\n\\n    /// @notice @param _coeff is equal to real coefficient * 10000   \\n    function _setShipCoefficient(uint256 _coeff) internal {\\n        shipCoefficient = _coeff;\\n        emit ChangedShipCoefficient(_coeff);\\n    }\\n\\n    function _setWaitTime(uint256 _waitTime) internal {\\n        waitTime = _waitTime;\\n        emit ChangedWaitTime(_waitTime);\\n    }\\n\\n    /// @notice @param _bitsOilRatio is equal to value of one BITS in Oil * 10000\\n    function _setBitsOilRatio(uint256 _bitsOilRatio) internal {\\n        bitsOilRatio = _bitsOilRatio;\\n        emit ChangedBitsOilRatio(_bitsOilRatio);\\n    }  \\n\\n    /// @notice @param _commissionPercentage is equal to commission percentage * 10000\\n    function _setComsissionPercentage(uint _commissionPercentage) internal {\\n        commissionPercentage = _commissionPercentage;\\n        emit ChangedCommissionPercentage(_commissionPercentage);        \\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Managable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract Managable {\\n    mapping(address => bool) private managers;\\n    address[] private managersAddresses;\\n\\n    event AddedManager(address _address);\\n    event RemovedManager(address _address);\\n\\n    modifier onlyManager() {\\n        require(managers[msg.sender], \\\"caller is not manager\\\");\\n        _;\\n    }\\n\\n    function getManagers() public view returns (address[] memory) {\\n        return managersAddresses;\\n    }\\n\\n    function transferManager(address _manager) external onlyManager {\\n        _removeManager(msg.sender);\\n        _addManager(_manager);\\n    }\\n\\n    function addManager(address _manager) external onlyManager {\\n        _addManager(_manager);\\n    }\\n\\n    function removeManager(address _manager) external onlyManager {\\n        uint index;\\n        for(uint i = 0; i < managersAddresses.length; i++) {\\n            if(managersAddresses[i] == _manager) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        managersAddresses[index] = managersAddresses[managersAddresses.length - 1];\\n        managersAddresses.pop();\\n\\n        _removeManager(_manager);\\n    }\\n\\n    function _addManager(address _manager) internal {\\n        managers[_manager] = true;\\n        managersAddresses.push(_manager);\\n        emit AddedManager(_manager);\\n    }\\n\\n    function _removeManager(address _manager) internal {\\n        managers[_manager] = false;\\n        emit RemovedManager(_manager);\\n    }\\n}\"\r\n    },\r\n    \"contracts/IBot.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBot is IERC721 {\\n    function mint(address _to) external returns(uint256);\\n    function mintTokenId(address _to, uint256 _tokenId) external;\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20Burnable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IBotMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LibBot.sol\\\";\\n\\ninterface IBotMetadata {\\n    function setBot(uint256 _tokenId, LibBot.Bot calldata _bot) external;\\n    function getBot(uint256 _tokenId) external view returns(LibBot.Bot memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Ships/IShip.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IShip is IERC721 {\\n    function mint(address _to) external returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Ships/IShipMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LibShip.sol\\\";\\n\\ninterface IShipMetadata {\\n    function setShip(uint256 _tokenId, LibShip.Ship calldata _ship) external;\\n    function getShip(uint256 _tokenId) external view returns(LibShip.Ship memory);\\n}\\n\"\r\n    },\r\n    \"contracts/ITokenPaymentSplitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface ITokenPaymentSplitter {\\n    function split(address _token, address _sender, uint256 _amount) external payable ;\\n}\\n\"\r\n    },\r\n    \"contracts/IRewardsSpender.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsSpender {\\n\\n    struct EarlyClaim {\\n        uint256 id;\\n        address addr;\\n        address contractAddr;\\n        uint256 deadline;\\n        EarlyPart[] parts;\\n    }\\n\\n    struct EarlyPart {\\n        string name;\\n        uint256 id;\\n        uint256 amountUserWallet;\\n        uint256 amountClaim;\\n    }\\n\\n    struct Rewarder {\\n        address addr;\\n        RewardType typ;\\n    }\\n\\n    enum RewardType{ERC20, ERC1155}\\n\\n    function earlyClaim(EarlyClaim calldata _earlyClaim, bytes calldata _signature) external returns (bool);\\n\\n    function rewarders(string calldata _name) external view returns (Rewarder calldata);\\n        \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/LibBot.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary LibBot {\\n    struct Bot {\\n        uint256 id;\\n        uint256 genes;\\n        uint256 birthTime;\\n        uint64 matronId;\\n        uint64 sireId;\\n        uint8 generation;\\n        uint8 breedCount;\\n        uint256 lastBreed;\\n        uint256 revealCooldown;\\n    }\\n\\n    function from(Bot calldata bot) public pure returns (uint256[] memory) {\\n        uint256[] memory _data = new uint256[](9);\\n        _data[0] = bot.id;\\n        _data[1] = bot.genes;\\n        _data[2] = bot.birthTime;\\n        _data[3] = uint256(bot.matronId);\\n        _data[4] = uint256(bot.sireId);\\n        _data[5] = uint256(bot.generation);\\n        _data[6] = uint256(bot.breedCount);\\n        _data[7] = bot.lastBreed;\\n        _data[8] = bot.revealCooldown;\\n\\n        return _data;\\n    }\\n\\n    function into(uint256[] calldata data) public pure returns (Bot memory) {\\n        Bot memory bot = Bot({\\n            id: data[0],\\n            genes: data[1],\\n            birthTime: data[2],\\n            matronId: uint64(data[3]),\\n            sireId: uint64(data[4]),\\n            generation: uint8(data[5]),\\n            breedCount: uint8(data[6]),\\n            lastBreed: data[7],\\n            revealCooldown: data[8]      \\n        });\\n\\n        return bot;\\n    }    \\n}\"\r\n    },\r\n    \"contracts/Ships/LibShip.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary LibShip {\\n    struct Ship {\\n        uint256 genes;\\n        uint48 id;\\n        uint48 birthTime;\\n        uint48 var1;\\n        uint48 var2;\\n        uint32 var3;\\n        uint32 var4;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_botMetadataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shipAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shipMetadataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oilAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bitAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_durabilityPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shipCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waitTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitsOilRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_comissionPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"ChangedBitsOilRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedBotAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedBotMetadataAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedBotTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionPercentage\",\"type\":\"uint256\"}],\"name\":\"ChangedCommissionPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ChangedDurabilityPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedOilAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedRewardsSpenderAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedShipAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coeff\",\"type\":\"uint256\"}],\"name\":\"ChangedShipCoefficient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedShipMetadataAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedShipTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ChangedTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_waitTime\",\"type\":\"uint256\"}],\"name\":\"ChangedWaitTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_durabilityFixed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oilPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bitsCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fixStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nextFixTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fixEnd\",\"type\":\"uint256\"}],\"name\":\"DurabilityFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_earlyClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oilClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bitsClaim\",\"type\":\"uint256\"}],\"name\":\"EarlyClaimBreedAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oilPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bitsCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nextFixTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fixEnd\",\"type\":\"uint256\"}],\"name\":\"SpeedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BITS_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bitsOilRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botMetadataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botTeamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durabilityPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_durability\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_speedUp\",\"type\":\"bool\"}],\"name\":\"fixDurability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_durability\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_speedUp\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaim\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsSpender.EarlyPart[]\",\"name\":\"parts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRewardsSpender.EarlyClaim\",\"name\":\"_earlyClaim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"fixWithEarlyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fixedItems\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_nextFixTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_fixEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"oilPrice\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getFixedItemDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextFixTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oilPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oilAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSpenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bitsOilRatio\",\"type\":\"uint256\"}],\"name\":\"setBitsOilRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBotMetadataAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBotTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionPercentage\",\"type\":\"uint256\"}],\"name\":\"setComsissionPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDurabilityPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOilAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardsSpenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shipAddress\",\"type\":\"address\"}],\"name\":\"setShipAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coeff\",\"type\":\"uint256\"}],\"name\":\"setShipCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shipMetadataAddress\",\"type\":\"address\"}],\"name\":\"setShipMetadataAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setShipTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waitTime\",\"type\":\"uint256\"}],\"name\":\"setWaitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipMetadataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipTeamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"speedUpFix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaim\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsSpender.EarlyPart[]\",\"name\":\"parts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRewardsSpender.EarlyClaim\",\"name\":\"_earlyClaim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"speedUpFixWithEarlyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DamageFix", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000052fead50bb1e7e4f1144843da7938bf4446291cf00000000000000000000000035dc9adef7065768ec273f81ef7613489d8374aa000000000000000000000000cf5853ce6f6ceee0ff9df478b3e75e1ad654e4cf000000000000000000000000761cc3792e90d9d090a0e9478d2e0eb8730422bf000000000000000000000000ca80bfcb11937797896f6ea3fcc70a4d1e2528c600000000000000000000000010ef8736545726efdd086dde8311c4dddfbeb9f2000000000000000000000000ee2ef361fd698ea335c61026fbce3d9225fe98c3000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000a8c000000000000000000000000000000000000000000000000000000000000010de00000000000000000000000000000000000000000000000000000000000186a0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}