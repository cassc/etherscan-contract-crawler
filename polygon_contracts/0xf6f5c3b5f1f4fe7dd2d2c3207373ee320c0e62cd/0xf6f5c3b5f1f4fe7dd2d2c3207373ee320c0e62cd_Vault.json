{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/Tico/Desktop/Proyectos/XCRE/Stake/contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Vault is ReentrancyGuard, Pausable, Ownable {\\r\\n\\r\\n    //---------- Libraries ----------//\\r\\n    using Counters for Counters.Counter;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    //---------- Contracts ----------//\\r\\n    IERC20 private Token;\\r\\n\\r\\n    //---------- Variables ----------//\\r\\n    Counters.Counter public totalHolders;\\r\\n    uint256 constant pointMultiplier = 10e18;\\r\\n    uint256 constant day = 86400; // 1 Day Timestamp 86400\\r\\n    uint256 constant month = 2629743; // 1 Month Timestamp 2629743\\r\\n    uint256 constant year = 31556926; // 1 Year Timestamp 31556926 \\r\\n    uint256 private totalTokenPoints;\\r\\n    uint256 public totalToken;\\r\\n    uint256 public unclaimedToken;\\r\\n    uint256 public processedToken;\\r\\n    uint256 public totalStaked;\\r\\n    uint256 public lastPaused;\\r\\n    uint256 public lastUpdated;\\r\\n\\r\\n\\r\\n    //---------- Storage -----------//\\r\\n    struct Wallet {\\r\\n        uint256 stakedBal;\\r\\n        uint256 startTime;\\r\\n        uint256 lastTokenPoints;\\r\\n        uint256 pendingTokenbal;\\r\\n        bool inStake;\\r\\n    }\\r\\n\\r\\n    mapping(address => Wallet) private stakeHolders;\\r\\n\\r\\n    //---------- Events -----------//\\r\\n    event Deposited(address indexed payee, uint256 weiAmount, uint256 totalStaked);\\r\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\r\\n    event Staked(address indexed wallet, uint256 amount);\\r\\n    event UnStaked(address indexed wallet);\\r\\n    event ReStaked(address indexed wallet, uint256 amount);\\r\\n\\r\\n    //---------- Constructor ----------//\\r\\n    constructor(address token_) {\\r\\n        Token = IERC20(token_);\\r\\n    }\\r\\n\\r\\n    //---------- Deposits -----------//  \\r\\n\\r\\n    function depositTokens(address from_, uint256 amount_) external nonReentrant {\\r\\n        require(amount_ > 1000, 'Tokens too low');\\r\\n        require(from_ != address(0), 'Invalid address');\\r\\n        require(Token.transferFrom(from_, address(this), amount_)); \\r\\n        _disburseToken(amount_);      \\r\\n    }\\r\\n\\r\\n    //----------- Internal Functions -----------//\\r\\n    function _disburseToken(uint amount) internal {\\r\\n        if(totalStaked > 1000000 && amount > 9999) {      \\r\\n            totalTokenPoints = totalTokenPoints.add((amount.mul(pointMultiplier)).div(totalStaked));\\r\\n            unclaimedToken = unclaimedToken.add(amount);\\r\\n            totalToken = totalToken.add(amount);\\r\\n            emit Deposited(_msgSender(), amount, totalStaked);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _thisBalanceToken() internal view returns(uint256) {        \\r\\n        return Token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _recalculateBalances() internal virtual { \\r\\n        uint256 balanceToken = _thisBalanceToken().sub(totalStaked);\\r\\n        uint256 tprocessedToken = unclaimedToken.add(processedToken);\\r\\n        if(balanceToken > tprocessedToken) {      \\r\\n            uint256 pending = balanceToken.sub(tprocessedToken);\\r\\n            if(pending > 1000000) {\\r\\n                _disburseToken(pending);\\r\\n            }\\r\\n        }\\r\\n    }  \\r\\n    \\r\\n    function _processRewardsToken(address account) internal virtual returns(bool) {\\r\\n        uint256 rewards = getRewardsToken(account);\\r\\n        if(rewards > 0) {        \\r\\n            unclaimedToken = unclaimedToken.sub(rewards);\\r\\n            processedToken = processedToken.add(rewards);\\r\\n            stakeHolders[account].lastTokenPoints = totalTokenPoints;\\r\\n            stakeHolders[account].pendingTokenbal = stakeHolders[account].pendingTokenbal.add(rewards);    \\r\\n            return true;\\r\\n        }\\r\\n        return false;                 \\r\\n    }\\r\\n    \\r\\n    function _initWithdrawnToken(address account) internal virtual returns(bool) {\\r\\n        uint256 pendingRewards = getRewardsToken(account);\\r\\n        if(pendingRewards > 0) {\\r\\n            require(_processRewardsToken(account));\\r\\n        }     \\r\\n        uint256 amount = stakeHolders[account].pendingTokenbal;\\r\\n        require(amount > 0, \\\"Balance too low\\\");\\r\\n        stakeHolders[account].pendingTokenbal = 0;\\r\\n        processedToken = processedToken.sub(amount);\\r\\n        bool success = Token.transfer(account, amount);\\r\\n        emit Withdrawn(account, amount);\\r\\n        return success;  \\r\\n    }\\r\\n    \\r\\n    \\r\\n    function _reStakeToken(address account) internal virtual returns(bool) {\\r\\n        _recalculateBalances();\\r\\n        if(getRewardsToken(account) > 0) {\\r\\n            require(_processRewardsToken(account));\\r\\n        }      \\r\\n        uint256 amount = stakeHolders[account].pendingTokenbal;\\r\\n        require(amount > 0, \\\"Balance too low\\\");\\r\\n        stakeHolders[account].pendingTokenbal = 0;\\r\\n        processedToken = processedToken.sub(amount);\\r\\n        stakeHolders[account].stakedBal = stakeHolders[account].stakedBal.add(amount);\\r\\n        totalStaked = totalStaked.add(amount);\\r\\n        emit ReStaked(account, amount);\\r\\n        return true;                \\r\\n    }\\r\\n\\r\\n    function _initStake(address account_, uint256 amount_) internal virtual returns(bool) { \\r\\n        _recalculateBalances();        \\r\\n        if(Token.transferFrom(account_, address(this), amount_)) {\\r\\n            stakeHolders[account_].startTime = block.timestamp;\\r\\n            stakeHolders[account_].lastTokenPoints = totalTokenPoints;  \\r\\n            stakeHolders[account_].inStake = true;\\r\\n            stakeHolders[account_].stakedBal = amount_;\\r\\n            totalStaked = totalStaked.add(amount_);\\r\\n            totalHolders.increment();\\r\\n            return true;  \\r\\n        }\\r\\n        return false;    \\r\\n    }\\r\\n\\r\\n    function _initStake(address account_, uint256 amount_, address operator_) internal virtual returns(bool) {  \\r\\n        _recalculateBalances();       \\r\\n        if(Token.transferFrom(operator_, address(this), amount_)) {\\r\\n            stakeHolders[account_].startTime = block.timestamp;\\r\\n            stakeHolders[account_].lastTokenPoints = totalTokenPoints;  \\r\\n            stakeHolders[account_].inStake = true;\\r\\n            stakeHolders[account_].stakedBal = amount_;\\r\\n            totalStaked = totalStaked.add(amount_);\\r\\n            totalHolders.increment();\\r\\n            return true;  \\r\\n        }\\r\\n        return false;    \\r\\n    }\\r\\n\\r\\n    function _addStake(address account_, uint256 amount_) internal virtual returns(bool) {\\r\\n        _recalculateBalances();\\r\\n        if(getRewardsToken(account_) > 0) {\\r\\n            require(_processRewardsToken(account_));\\r\\n        } \\r\\n        if(Token.transferFrom(account_, address(this), amount_)) {\\r\\n            stakeHolders[account_].stakedBal = stakeHolders[account_].stakedBal.add(amount_);\\r\\n            totalStaked = totalStaked.add(amount_);\\r\\n            return true;\\r\\n        }        \\r\\n        return false; \\r\\n    }\\r\\n\\r\\n    function _addStake(address account_, uint256 amount_, address operator_) internal virtual returns(bool) {\\r\\n        _recalculateBalances();\\r\\n        if(getRewardsToken(account_) > 0) {\\r\\n            require(_processRewardsToken(account_));\\r\\n        } \\r\\n        if(Token.transferFrom(operator_, address(this), amount_)) {\\r\\n            stakeHolders[account_].stakedBal = stakeHolders[account_].stakedBal.add(amount_);\\r\\n            totalStaked = totalStaked.add(amount_);\\r\\n            return true;\\r\\n        }        \\r\\n        return false; \\r\\n    }\\r\\n\\r\\n    function _unStakeBal(address account_) internal virtual returns(uint256) {\\r\\n        uint256 accumulated = block.timestamp.sub(stakeHolders[account_].startTime);\\r\\n        uint256 balance = stakeHolders[account_].stakedBal;\\r\\n        uint minPercent = 88; \\r\\n        if(accumulated >= year) {\\r\\n            return balance;\\r\\n        }\\r\\n        balance = balance.mul(pointMultiplier);        \\r\\n        if(accumulated < month) {\\r\\n            balance = (balance.mul(minPercent)).div(100);\\r\\n            return balance.div(pointMultiplier);\\r\\n        }\\r\\n        for(uint m = 1; m < 12; m++) {\\r\\n            if(accumulated >= month.mul(m) && accumulated < month.mul(m + 1)) {\\r\\n                minPercent = minPercent.add(m);\\r\\n                balance = (balance.mul(minPercent)).div(100);\\r\\n                return balance.div(pointMultiplier);\\r\\n            }\\r\\n\\r\\n        }\\r\\n        return 0;\\r\\n    } \\r\\n\\r\\n    //----------- External Functions -----------// \\r\\n    function isInStake(address account_) external view returns(bool) {\\r\\n        return stakeHolders[account_].inStake;\\r\\n    }   \\r\\n    \\r\\n    function getRewardsToken(address account) public view returns(uint256) {\\r\\n        uint256 newTokenPoints = totalTokenPoints.sub(stakeHolders[account].lastTokenPoints);\\r\\n        return (stakeHolders[account].stakedBal.mul(newTokenPoints)).div(pointMultiplier);\\r\\n    }   \\r\\n    \\r\\n    function getWalletInfo(address _wallet) public view returns(Wallet memory) {       \\r\\n        return stakeHolders[_wallet];\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function stakeFor(address account_, uint256 amount_) external whenNotPaused nonReentrant returns(bool) {\\r\\n        require(amount_ > 0);\\r\\n        if(stakeHolders[account_].inStake) {\\r\\n            require(_addStake(account_, amount_, _msgSender()));\\r\\n\\r\\n        } else {\\r\\n            require(amount_ > 1000000);\\r\\n            require(_initStake(account_, amount_, _msgSender()));\\r\\n        }     \\r\\n        emit Staked(account_, amount_);\\r\\n        return true;               \\r\\n    }  \\r\\n    \\r\\n    function Stake(uint256 amount_) external whenNotPaused nonReentrant  {\\r\\n        require(amount_ > 1000000);\\r\\n        require(!stakeHolders[_msgSender()].inStake, \\\"You are already in stake, do addStake\\\");\\r\\n        require(Token.allowance(_msgSender(), address(this)) >= amount_, \\\"Amount not allowed\\\");\\r\\n        require(_initStake(_msgSender(), amount_));\\r\\n        emit Staked(_msgSender(), amount_);               \\r\\n    } \\r\\n    \\r\\n    function addStake(uint256 amount_) external whenNotPaused nonReentrant  {\\r\\n        require(amount_ > 0);\\r\\n        require(stakeHolders[_msgSender()].inStake, \\\"Not in stake\\\");\\r\\n        require(Token.allowance(_msgSender(), address(this)) >= amount_, \\\"Amount not allowed\\\");\\r\\n        require(_addStake(_msgSender(), amount_));\\r\\n        emit ReStaked(_msgSender(), amount_);               \\r\\n    }\\r\\n    \\r\\n    function reStake() external whenNotPaused nonReentrant  {\\r\\n        require(stakeHolders[_msgSender()].inStake, \\\"Not in stake\\\");\\r\\n        require(_reStakeToken(_msgSender()));        \\r\\n    } \\r\\n    \\r\\n    function withdrawnToken() external nonReentrant {\\r\\n        require(stakeHolders[_msgSender()].inStake, \\\"Not in stake\\\");\\r\\n        require(_initWithdrawnToken(_msgSender()));\\r\\n    }\\r\\n\\r\\n    function unStake() external nonReentrant {\\r\\n        require(stakeHolders[_msgSender()].inStake, \\\"Not in stake\\\");\\r\\n        if(getRewardsToken(_msgSender()) > 0) {\\r\\n            require(_initWithdrawnToken(_msgSender()));\\r\\n        } \\r\\n        uint256 stakedBal = stakeHolders[_msgSender()].stakedBal;\\r\\n        uint256 balance = _unStakeBal(_msgSender());\\r\\n        uint256 balanceDiff = stakedBal.sub(balance);\\r\\n        if(balance > 0) {\\r\\n            require(Token.transfer(_msgSender(), balance));            \\r\\n        }\\r\\n        totalStaked = totalStaked.sub(stakedBal);\\r\\n        delete stakeHolders[_msgSender()];\\r\\n        totalHolders.decrement();\\r\\n        if(balanceDiff > 0) {\\r\\n            _disburseToken(balanceDiff);            \\r\\n        }\\r\\n        emit UnStaked(_msgSender());\\r\\n    }\\r\\n\\r\\n    function safeUnStake() external whenPaused nonReentrant {\\r\\n        require(stakeHolders[_msgSender()].inStake, \\\"Not in stake\\\");\\r\\n        uint256 stakedBal = stakeHolders[_msgSender()].stakedBal;\\r\\n        delete stakeHolders[_msgSender()];\\r\\n        require(Token.transfer(_msgSender(), stakedBal));          \\r\\n        totalStaked = totalStaked.sub(stakedBal);\\r\\n        totalHolders.decrement();\\r\\n    }       \\r\\n\\r\\n    function rescueBalances(address to_) external whenPaused onlyOwner {\\r\\n        require(block.timestamp.sub(lastPaused) > year);\\r\\n        if(_thisBalanceToken() > 0) {\\r\\n            Token.transfer(to_, _thisBalanceToken());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n        lastPaused = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function updateBalances() external whenNotPaused nonReentrant {\\r\\n        if(lastUpdated.add(day) < block.timestamp) {\\r\\n            _recalculateBalances();\\r\\n            lastUpdated = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWalletInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTokenbal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inStake\",\"type\":\"bool\"}],\"internalType\":\"struct Vault.Wallet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isInStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPaused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"rescueBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeUnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fa3c05c2023918a4324fde7163591fe6bebd1692", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}