{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Diamond/facets/ChargeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {LibBusinessId} from \\\"contracts/Diamond/libraries/LibBusinessId.sol\\\";\\nimport {LibReentrancyGuard} from \\\"contracts/Diamond/libraries/LibReentrancyGuard.sol\\\";\\nimport {LibFactory} from \\\"contracts/Diamond/libraries/LibFactory.sol\\\";\\n\\nimport {IChargeFacet} from \\\"contracts/Diamond/interfaces/IChargeFacet.sol\\\";\\n\\ncontract ChargeFacet is IChargeFacet {\\n    function charge(bytes32 businessId, address token, uint256 amount) external {\\n        LibBusinessId.checkIn(businessId);\\n\\n        LibReentrancyGuard.nonReentrantBefore();\\n        {\\n            LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n            address receiver = fs.feeSplitter;\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, receiver, amount);\\n            emit Charge(businessId, token, amount, receiver);\\n        }\\n        LibReentrancyGuard.nonReentrantAfter();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibBusinessId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibBusinessId {\\n    bytes32 internal constant BUSINESS_ID_SLOT = keccak256(\\\"diamond.standard.businessid.businessid\\\");\\n\\n    struct BusinessIdStorage {\\n        mapping(bytes32 => bool) businessIdSBook;\\n    }\\n\\n    function getStorage() internal pure returns (BusinessIdStorage storage rs) {\\n        bytes32 position = BUSINESS_ID_SLOT;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n\\n    function checkIn(bytes32 businessId) internal {\\n        BusinessIdStorage storage rs = getStorage();\\n        if (rs.businessIdSBook[businessId]) {\\n            revert(\\\"businessId already exists\\\");\\n        } else {\\n            rs.businessIdSBook[businessId] = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibReentrancyGuard {\\n    bytes32 internal constant REENTRANCY_GUARD_SLOT =\\n        keccak256(\\\"diamond.standard.reentrancyguard.reentrancyguard\\\");\\n\\n    uint256 internal constant _NOT_ENTERED = 1;\\n    uint256 internal constant _ENTERED = 2;\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function getStorage()\\n        internal\\n        pure\\n        returns (ReentrancyGuardStorage storage rs)\\n    {\\n        bytes32 position = REENTRANCY_GUARD_SLOT;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n\\n    function setInitStatus() internal {\\n        ReentrancyGuardStorage storage rs = getStorage();\\n        rs._status = _NOT_ENTERED;\\n    }\\n\\n    function nonReentrantBefore() internal {\\n        LibReentrancyGuard.ReentrancyGuardStorage\\n            storage rs = LibReentrancyGuard.getStorage();\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(\\n            rs._status != LibReentrancyGuard._ENTERED,\\n            \\\"ReentrancyGuard: reentrant call\\\"\\n        );\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rs._status = LibReentrancyGuard._ENTERED;\\n    }\\n\\n    function nonReentrantAfter() internal {\\n        LibReentrancyGuard.ReentrancyGuardStorage\\n            storage rs = LibReentrancyGuard.getStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rs._status = LibReentrancyGuard._NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IController} from \\\"contracts/Diamond/interfaces/IController.sol\\\";\\nimport {IOperatorResolver} from \\\"contracts/Diamond/interfaces/IOperatorResolver.sol\\\";\\nimport {IRecord} from \\\"contracts/Diamond/interfaces/IRecord.sol\\\";\\nimport {IReserve} from \\\"contracts/Diamond/interfaces/IReserve.sol\\\";\\nimport {IAutoCoffer} from \\\"contracts/Diamond/interfaces/IAutomationCoffer.sol\\\";\\n\\nlibrary LibFactory {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 constant FACTORY_POSITION = keccak256(\\\"factory.storage\\\");\\n\\n    struct FactoryStorage {\\n        IController controller;\\n        IOperatorResolver operatorResolver;\\n        address feeSplitter;\\n        IRecord record;\\n        IReserve reserve;\\n        IAutoCoffer autoCoffer;\\n        address autoMeta;\\n        /// @dev Address of the contract that when create a NFT, it will charge a fee\\n        address createFeeToken;\\n        /// @dev Fees when NFT are created\\n        /// createFees is a fixed amount\\n        uint256 createFees;\\n        /// @dev Fees when NFT are replicated\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 replicateFeeRatio;\\n        /// @dev Fees when funds stay in portfolios\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 entryFeeRatio;\\n        /// @dev Fees when funds are withdrawed\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 exitFeeRatio;\\n        /// @dev Max royalty ratio\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 maxRoyaltyRatio;\\n        /// @dev The ratio of the royalty fee\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 royaltyFeeRatio;\\n        /// @dev The ratio of the investment fee\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 investmentFeeRatio;\\n    }\\n\\n    function getStorage() internal pure returns (FactoryStorage storage fs) {\\n        bytes32 position = FACTORY_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * _controller = someAddresses[0] The address of the controller\\n     * _operatorResolver = someAddresses[1] The address of the operator resolver\\n     * _feeSplitter = someAddresses[2] The address of the fee splitter\\n     * _record = someAddresses[3] The address of the record\\n     * _reserve = someAddresses[4] The address of the reserve\\n     * _autoMeta = someAddresses[5] The address of the auto meta\\n     * _autoCoffer = someAddresses[6] The address of the auto coffer\\n     * _createFeeToken = someAddresses[7]\uff0cThe address of the create fee token\\n     * _createFees = someUint256s[0], The fees when NFT are created\\n     * _replicateFees = someUint256s[1], The fees when NFT are replicated\\n     * _entryFees = someUint256s[2], The fees when funds stay in budgets\\n     * _exitFees = someUint256s[3], The fees when funds are withdrawed from budgets\\n     * _maxRoyaltyRatio = someUint256s[4], The max royalty ratio\\n     * _royaltyFeeRatio = someUint256s[5], The ratio of the royalty fee\\n     * _investmentFeeRatio = someUint256s[6], The ratio of the investment fee\\n     */\\n    function setInitStatus(address[] calldata someAddresses, uint256[] calldata someUint256s) internal {\\n        require(someAddresses.length == 8, \\\"SCF: INVALID_ADDRESSES_LENGTH\\\");\\n\\n        FactoryStorage storage fs = getStorage();\\n        fs.controller = IController(someAddresses[0]);\\n        fs.operatorResolver = IOperatorResolver(someAddresses[1]);\\n        fs.feeSplitter = someAddresses[2];\\n        fs.record = IRecord(someAddresses[3]);\\n        fs.reserve = IReserve(payable(someAddresses[4]));\\n        fs.autoMeta = someAddresses[5];\\n        fs.autoCoffer = IAutoCoffer(someAddresses[6]);\\n        fs.createFeeToken = someAddresses[7];\\n        fs.createFees = someUint256s[0];\\n        fs.replicateFeeRatio = someUint256s[1];\\n        fs.entryFeeRatio = someUint256s[2];\\n        fs.exitFeeRatio = someUint256s[3];\\n        fs.maxRoyaltyRatio = someUint256s[4];\\n        fs.royaltyFeeRatio = someUint256s[5];\\n        fs.investmentFeeRatio = someUint256s[6];\\n    }\\n\\n    function charge(address _from, address _recipient, address _tokenAddr, uint256 _tokenAmount) internal {\\n        if (_tokenAmount > 0) {\\n            if (_tokenAddr == address(0)) {\\n                // never happen\\n                require(msg.value == _tokenAmount, \\\"SCF: INVALID_ETH_VALUE\\\");\\n                (bool success,) = payable(_recipient).call{value: _tokenAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert(\\\"SCF: FEE_SPLITTER_CALL_FAILED\\\");\\n                }\\n            } else {\\n                uint256 balanceBefore = IERC20(_tokenAddr).balanceOf(address(_recipient));\\n                if (_from == address(this)) {\\n                    IERC20(_tokenAddr).safeTransfer(_recipient, _tokenAmount);\\n                } else {\\n                    IERC20(_tokenAddr).safeTransferFrom(_from, address(_recipient), _tokenAmount);\\n                }\\n\\n                uint256 balanceAfter = IERC20(_tokenAddr).balanceOf(address(_recipient));\\n                if (balanceAfter != balanceBefore + _tokenAmount) {\\n                    revert(\\\"SCF: SAFE_TRANSFERFROM_Failed\\\");\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IChargeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IChargeFacet {\\n    event Charge(bytes32 indexed businessId, address token, uint256 amount, address receiver);\\n\\n    function charge(bytes32 businessId, address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nstruct Module {\\n    address addr;\\n    bytes defaultParams;\\n}\\n\\ninterface IController {\\n    function isModule(address _module) external view returns (bool);\\n\\n    function addModule(address[] memory _modules) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IOperatorResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IOperatorResolver {\\n    function initialize() external;\\n    function addOperator(address _operator) external;\\n\\n    function removeOperator(address _operator) external;\\n\\n    function isOperator(address _operator) external view returns (bool);\\n\\n    function getOperators() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IRecord.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\ninterface IRecord {\\n    function initialize() external;\\n    function getTokenAmount(address _nftAddr, uint256 _nftId, address _token, bool _isBudget)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function myBudget(address _nftAddr, uint256 _nftId) external view returns (address, uint256);\\n\\n    function getPortfolio(address _nftAddr, uint256 _nftId)\\n        external\\n        view\\n        returns (address[] memory portfolios, uint256[] memory amounts);\\n\\n    function getRecord(address _nftAddr, uint256 _nftId) external view returns (address[] memory);\\n\\n    function getBudget() external view returns (address[] memory);\\n\\n    function addBudgetToken(address _token) external;\\n\\n    function removeBudgetToken(address _token) external;\\n\\n    function myBudgetToken(address _nftAddr, uint256 _nftId) external view returns (address);\\n\\n    function setNFTBudget(address _nftAddr, uint256 _nftId, address _BudgetToken) external;\\n\\n    function isBudget(address token) external view returns (bool);\\n\\n    function add(bool _isBudget, address _nftAddr, uint256 _nftId, address _token, uint256 _amount, address _reserve)\\n        external;\\n\\n    function sub(bool _isBudget, address _nftAddr, uint256 _nftId, address _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve {\\n    receive() external payable;\\n\\n    function transfer(address _recipient, IERC20 _token, uint256 _amount) external;\\n\\n    function withdraw(IERC20 _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IAutomationCoffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IAutoCoffer {\\n    event Deposit(bytes32 indexed businessId, address indexed NFTAddr, uint256 indexed NFTId, uint256 amount);\\n\\n    event Withdraw(\\n        bytes32 indexed businessId,\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        address feeSplitter,\\n        uint256 feeAmount,\\n        address receiver,\\n        uint256 amount\\n    );\\n\\n    event FeeRatioUpdated(uint256 oldFeeRatio, uint256 newFeeRatio);\\n\\n    event FeeSplitterUpdated(address oldFeeSplitter, address newFeeSplitter);\\n\\n    error NotEnoughFunds(uint256 value);\\n\\n    error WithdrawFailed(bytes err);\\n\\n    function setFeeRatio(uint256 _feeRatio) external;\\n\\n    function setFeeSplitter(address _feeSplitter) external;\\n\\n    function feeRatio() external view returns (uint256);\\n\\n    function feeSplitter() external view returns (address);\\n\\n    function balanceOf(address NFTAddr, uint256 NFTId) external view returns (uint256);\\n\\n    function deposit(bytes32 businessId, address NFTAddr, uint256 NFTId) external payable;\\n\\n    function withdraw(bytes32 businessId, address NFTAddr, uint256 NFTId, uint256 amount, address payable receiver)\\n        external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/src/=lib/prb-math/src/\",\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"@uniswap/lib/=lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/v2-core/\",\r\n      \"@uniswap/v2-periphery/=lib/v2-periphery/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/src/=lib/prb-math/src/\",\r\n      \"solidity-lib/=lib/solidity-lib/contracts/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"businessId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Charge\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"businessId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChargeFacet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}