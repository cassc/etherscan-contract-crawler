{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IHunter {\r\n    function lockHunter(address account, uint256 id) external;\r\n    function unlockHunter(address account, uint256 id) external;\r\n    function isHunterLocked(uint256 id) external view returns (bool);\r\n}\r\n\r\ncontract BatchHunterOperations {\r\n    IHunter public hunterContract;\r\n    \r\n    mapping(address => bool) public isOwner;\r\n\r\n    // Only allow owners to perform certain actions\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"You are not an owner\");\r\n        _;\r\n    }\r\n\r\n    // Initialize the contract and set the initial owner\r\n    constructor(address _hunterContractAddress, address[] memory _owners) {\r\n        hunterContract = IHunter(_hunterContractAddress);\r\n\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n    }\r\n\r\n    // Function to add a new owner. Can only be called by an existing owner\r\n    function addOwner(address newOwner) external onlyOwner {\r\n        isOwner[newOwner] = true;\r\n    }\r\n\r\n    // Function to remove an owner. Can only be called by an existing owner\r\n    function removeOwner(address existingOwner) external onlyOwner {\r\n        require(msg.sender != existingOwner, \"You cannot remove yourself\");\r\n        isOwner[existingOwner] = false;\r\n    }\r\n\r\n    function batchLockHunters(address[] memory accounts, uint256[] memory ids) external onlyOwner {\r\n        require(accounts.length == ids.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            hunterContract.lockHunter(accounts[i], ids[i]);\r\n        }\r\n    }\r\n\r\n    function batchUnlockHunters(address[] memory accounts, uint256[] memory ids) external onlyOwner {\r\n        require(accounts.length == ids.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            hunterContract.unlockHunter(accounts[i], ids[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hunterContractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchLockHunters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchUnlockHunters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hunterContract\",\"outputs\":[{\"internalType\":\"contract IHunter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"existingOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchHunterOperations", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000020b807b9af56977ef475c089a0e797754074356000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a7acaddc6f976890fba436c003f13f31f6290b5d0000000000000000000000005b5cb86e3bd5e49536de0e3b6e0efc28f42a9dab", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://768ac5ecc9867c45b9ce6e2737d9542d6226ac10fd2ad65032dc852733691032"}