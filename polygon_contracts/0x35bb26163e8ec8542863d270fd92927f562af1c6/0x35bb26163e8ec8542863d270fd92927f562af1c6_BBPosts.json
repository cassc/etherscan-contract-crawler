{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BBPosts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./BBErrorsV01.sol\\\";\\r\\nimport \\\"./interfaces/IBBProfiles.sol\\\";\\r\\nimport \\\"./interfaces/IBBPosts.sol\\\";\\r\\n\\r\\ncontract BBPosts is IBBPosts {\\r\\n    event NewPost(\\r\\n        uint256 profileId,\\r\\n        uint256 postId,\\r\\n        string cid\\r\\n    );\\r\\n\\r\\n    event EditPost(\\r\\n        uint256 profileId,\\r\\n        uint256 postId,\\r\\n        string cid\\r\\n    );\\r\\n\\r\\n    // Profile ID => Index => Post\\r\\n    mapping(uint256 => mapping(uint256 => string)) internal _posts;\\r\\n    // Profile ID => Total posts\\r\\n    mapping(uint256 => uint256) internal _profilesTotalPosts;\\r\\n\\r\\n    IBBProfiles internal immutable _bbProfiles;\\r\\n\\r\\n    constructor(address bbProfiles) {\\r\\n        _bbProfiles = IBBProfiles(bbProfiles);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev Reverts if msg.sender is not profile IDs owner\\r\\n\\r\\n        @param Profile ID\\r\\n    */\\r\\n    modifier onlyProfileOwner(uint256 profileId) {\\r\\n        (address profileOwner,,) = _bbProfiles.getProfile(profileId);\\r\\n        require(profileOwner == msg.sender, BBErrorCodesV01.NOT_OWNER);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev Reverts if post ID does not exist\\r\\n\\r\\n        @param Profile ID\\r\\n        @param Post ID\\r\\n    */\\r\\n    modifier postExists(uint256 profileId, uint256 postId) {\\r\\n        require(postId < _profilesTotalPosts[profileId], BBErrorCodesV01.POST_NOT_EXIST);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Creates a new post\\r\\n\\r\\n        @param Profile ID\\r\\n        @param Post CID\\r\\n\\r\\n        @return Instantiated posts ID\\r\\n    */\\r\\n    function createPost(uint256 profileId, string calldata cid) external override onlyProfileOwner(profileId) returns(uint256 postId){\\r\\n        postId = _profilesTotalPosts[profileId];\\r\\n\\r\\n        _posts[profileId][postId] = cid;\\r\\n\\r\\n        // Increment profiles total posts\\r\\n        _profilesTotalPosts[profileId]++;\\r\\n\\r\\n        emit NewPost(profileId, postId, cid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Set an existing posts variables\\r\\n\\r\\n        @param Profile ID\\r\\n        @param Post ID\\r\\n        @param Post CID\\r\\n    */\\r\\n    function editPost(uint256 profileId, uint postId, string calldata cid) external override onlyProfileOwner(profileId) postExists(profileId, postId) {\\r\\n        _posts[profileId][postId] = cid;\\r\\n\\r\\n        emit EditPost(profileId, postId, cid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Get a posts CID\\r\\n\\r\\n        @param Profile ID\\r\\n        @param Post ID\\r\\n\\r\\n        @return Post CID\\r\\n    */\\r\\n    function getPost(uint256 profileId, uint256 postId) external view override postExists(profileId, postId) returns (string memory) {\\r\\n        return (_posts[profileId][postId]);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Gets the total number of posts in a profile\\r\\n\\r\\n        @param Profile ID\\r\\n\\r\\n        @return Total number of posts in a profile\\r\\n    */\\r\\n    function profilesTotalPosts(uint256 profileId) external view override returns (uint256) {\\r\\n        return _profilesTotalPosts[profileId];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBBPosts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IBBPosts {\\r\\n    function createPost(uint256 profileId, string calldata cid) external returns(uint256 postId);\\r\\n    function editPost(uint256 profileId, uint256 postId, string calldata cid) external;\\r\\n    \\r\\n    function getPost(uint256 profileId, uint256 postId) external view returns (string memory cid);\\r\\n    function profilesTotalPosts(uint256 profileId) external view returns (uint256 total);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBBProfiles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IBBProfiles {\\r\\n    function createProfile(address owner, address receiver, string calldata cid) external returns(uint256 profileId);\\r\\n    function editProfile(uint256 profileId, address owner, address receiver, string calldata cid) external; \\r\\n\\r\\n    function totalProfiles() external view returns (uint256 total);\\r\\n    function getProfile(uint256 profileId) external view returns (address owner, address receiver, string memory cid);\\r\\n\\r\\n    function getOwnersProfiles(address account) external view returns (uint256[] memory profileIds);\\r\\n    function ownersTotalProfiles(address owner) external view returns (uint256 total);\\r\\n}\"\r\n    },\r\n    \"contracts/BBErrorsV01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary BBErrorCodesV01 {\\r\\n    string public constant NOT_OWNER = \\\"1\\\";\\r\\n    string public constant OUT_OF_BOUNDS = \\\"2\\\";\\r\\n    string public constant NOT_SUBSCRIPTION_OWNER = \\\"3\\\";\\r\\n    string public constant POST_NOT_EXIST = \\\"4\\\";\\r\\n    string public constant PROFILE_NOT_EXIST = \\\"5\\\";\\r\\n    string public constant TIER_SET_NOT_EXIST = \\\"6\\\";\\r\\n    string public constant TIER_NOT_EXIST = \\\"7\\\";\\r\\n    string public constant SUBSCRIPTION_NOT_EXIST = \\\"8\\\";\\r\\n    string public constant ZERO_ADDRESS = \\\"9\\\";\\r\\n    string public constant SUBSCRIPTION_NOT_EXPIRED = \\\"10\\\";\\r\\n    string public constant SUBSCRIPTION_CANCELLED = \\\"11\\\";\\r\\n    string public constant UPKEEP_FAIL = \\\"12\\\";\\r\\n    string public constant INSUFFICIENT_PREPAID_GAS = \\\"13\\\";\\r\\n    string public constant INSUFFICIENT_ALLOWANCE = \\\"14\\\";\\r\\n    string public constant INSUFFICIENT_BALANCE = \\\"15\\\";\\r\\n    string public constant SUBSCRIPTION_ACTIVE = \\\"16\\\";\\r\\n    string public constant INVALID_LENGTH = \\\"17\\\";\\r\\n    string public constant UNSUPPORTED_CURRENCY = \\\"18\\\";\\r\\n    string public constant SUBSCRIPTION_PROFILE_ALREADY_EXISTS = \\\"19\\\";\\r\\n    string public constant INVALID_PRICE = \\\"20\\\";\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bbProfiles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"EditPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"NewPost\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"editPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"profilesTotalPosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BBPosts", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000096741579bac68b4044bbb4966d390e51081c7dc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35593e8dcba73abec3ca3862e2d84d088f833d8c9d664d00d66ec80378dba40d"}