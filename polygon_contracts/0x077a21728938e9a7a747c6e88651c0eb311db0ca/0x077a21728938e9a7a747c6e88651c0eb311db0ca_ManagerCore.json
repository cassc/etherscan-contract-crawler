{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@amun/amun-protocol/contracts/interfaces/external/aave-v2/IAToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ninterface IAToken is IERC20 {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/external/aave-v2/ILendingPool.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"./lib/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n  \\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/external/aave-v2/IProtocolDataProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface IProtocolDataProvider {\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n  function getAllATokens() external view returns (TokenData[] memory);\\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/external/aave-v2/IVariableDebtToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20 {}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/external/aave-v2/lib/DataTypes.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IController {\\n    \\n   /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when the number of resources and resourceIds mismatch.\\n    error Controller__ArrayLengthMismatch(uint256 resourcesLength, uint256 resourcesIdsLength);\\n    /// @notice Emitted when the caller is not a factory.\\n    error Controller__CallerNotFactory(address caller);\\n    /// @notice Emitted when a factory already exists on the Controller.\\n    error Controller__FactoryExists();\\n    /// @notice Emitted when a factory does not exist on the Controller.\\n    error Controller__FactoryInvalid();\\n    /// @notice Emitted when a fee type already exists on the Controller.\\n    error Controller__FeeTypeExists();\\n    /// @notice Emitted when a fee type does not exist on the Controller.\\n    error Controller__FeeTypeInvalid();\\n    /// @notice Emitted when the Controller is already initialized.\\n    error Controller__IsInitialized();\\n    /// @notice Emitted when a module is already enabled on the Controller.\\n    error Controller__ModuleExists();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error Controller__ModuleInvalid();\\n    /// @notice Emitted when a resource or resourceId is already enabled on the Controller.\\n    error Controller__ResourceExists();\\n    /// @notice Emitted when a resource is not enabled on the Controller.\\n    error Controller__ResourceInvalid();\\n    /// @notice Emitted when a SetToken is already enabled on the Controller. \\n    error Controller__SetExists();\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error Controller__SetInvalid();\\n    /// @notice Emitted when the Controller is not initialized.\\n    error Controller__Uninitialized();\\n    /// @notice Emitted when a zero address is provided.\\n    error Controller__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IExchangeAdapter {\\n    function getSpender() external view returns(address);\\n    function getTradeCalldata(\\n        address _fromToken,\\n        address _toToken,\\n        address _toAddress,\\n        uint256 _fromQuantity,\\n        uint256 _minToQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory);\\n    function isDynamicDataAdapter() external view returns(bool);\\n    function getTradeMetadata(\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (bytes4 signature, address fromToken, address toToken, uint256 inputAmount, uint256 minAmountOut);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IIntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IIntegrationRegistry {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an adapter already exists on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationExists();\\n    /// @notice Emitted when an adapter does not exist on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationInvalid();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error IntegrationRegistry__ModuleInvalid();\\n    /// @notice Emitted when the modules and adapters length mismatch.\\n    error IntegrationRegistry__ModulesAdaptersLengthMismatch(uint256 numModules, uint256 numAdapters);\\n    /// @notice Emitted when the modules length is zero.\\n    error IntegrationRegistry__ModulesEmpty();\\n    /// @notice Emitted when the modules and names length mismatch.\\n    error IntegrationRegistry__ModulesNamesLengthMismatch(uint256 numModules, uint256 numNames);\\n    /// @notice Emitted when a zero address is provided.\\n    error IntegrationRegistry__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n    \\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * @title IIssuanceModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Issuance module interface.\\n */\\ninterface IIssuanceModule {\\n    function updateIssueFee(ISetToken _setToken, uint256 _newIssueFee) external;\\n    function updateRedeemFee(ISetToken _setToken, uint256 _newRedeemFee) external;\\n    function updateFeeRecipient(ISetToken _setToken, address _newRedeemFee) external;\\n\\n    function initialize(\\n        ISetToken _setToken,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an invalid adapter is provided for a specific integration hash.\\n    error Module__AdapterInvalid(address emitter, bytes32 integrationHash);\\n    /// @notice Emitted when the caller is not an initialized module.\\n    error Module__CallerNotInitializedModule(address emitter, address caller);\\n    /// @notice Emitted when the caller is not the set manager.\\n    error Module__CallerNotManager(address emitter, address caller, address setToken);\\n    /// @notice Emitted when a the calling module (msg.sender) is not enabled on the Controller.\\n    error Module__ModuleInvalid(address emitter, address moduleAndCaller);\\n    /// @notice Emitted when an invalid SetToken address is provided.\\n    error Module__SetTokenInvalid(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is both invalid and uninitialized.\\n    error Module__SetTokenInvalidAndUninitialized(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is not a pending module.\\n    error Module__SetTokenNotPending(address emitter, address setToken);\\n\\n    /* ============ Functions ============ */\\n\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IPriceOracle\\n * @author Set Protocol\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the number of assets ones, asset twos, and oracles mismatch. \\n    error PriceOracle__ArrayLengthsMismatch(uint256 assetsOnesLength, uint256 assetsTwosLength, uint256 oraclesLength);\\n    /// @notice Emitted when the caller is the Controller or the caller is not a set, \\n    ///         module, resource, or factory enabled on the Controller.\\n    error PriceOracle__CallerNotSystemContract(address caller);\\n    /// @notice Emitted when a price is not found direct or inverse, from master, and from adapters.\\n    error PriceOracle__PriceNotFound();\\n    /// @notice Emitted when an asset pair already exists on the PriceOracle.\\n    error PriceOracle__PairExists();\\n    /// @notice Emitted when an asset pair does not exist on the PriceOracle.\\n    error PriceOracle__PairInvalid();\\n    /// @notice Emitted when an adapter already exists on the PriceOracle.\\n    error PriceOracle__AdapterExists();\\n    /// @notice Emitted when an adapter does not exist on the PriceOracle.\\n    error PriceOracle__AdapterInvalid();\\n\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n    function masterQuoteAsset() external view returns (address);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not the SetToken locker.\\n    error SetToken__CallerNotLocker(address caller, address locker);\\n    /// @notice Emitted when the caller is not the SetToken manager.\\n    error SetToken__CallerNotManager(address caller, address manager);\\n    /// @notice Emitted when the external position module already exists on the SetToken.\\n    error SetToken__ExternalPositionModuleExists();\\n    /// @notice Emitted when the component already exists on the SetToken.\\n    error SetToken__IsComponent();\\n    /// @notice Emitted when the SetToken is already locked.\\n    error SetToken__IsLocked();\\n    /// @notice Emitted when the SetToken is already unlocked.\\n    error SetToken__IsUnlocked();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetToken__ModuleInvalid(address module);\\n    /// @notice Emitted when the actual state of a module is not as expected.\\n    error SetToken__ModuleStateInvalid(address module, ISetToken.ModuleState actualState, ISetToken.ModuleState expectedState);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit is equal to zero.\\n    error SetToken__RealToVirtualUnitConversionInvalid(int256 realUnit, int256 virtualUnit);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit converted is equal to zero.\\n    error SetToken__VirtualToRealUnitConversionInvalid(int256 realUnit, int256 virtualConverted);\\n    /// @notice Emitted when the calculated multiplier is equal to zero.\\n    error SetToken__ZeroMultiplier();\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and \\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex            \\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n    \\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n    \\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n    \\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/ISetTokenCreator.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2022 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface ISetTokenCreator {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the number of components and units mismatch.\\n    error SetTokenCreator__ArrayLengthMismatch(uint256 componentsLength, uint256 unitsLength);\\n    /// @notice Emitted when the components provided contains duplicates.\\n    error SetTokenCreator__ComponentsContainDuplicates();\\n    /// @notice Emitted when the components provided contains a zero address.\\n    error SetTokenCreator__ComponentsContainZeroAddress();\\n    /// @notice Emitted when an the components provided does not contain elements.\\n    error SetTokenCreator__ComponentsEmpty();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetTokenCreator__ModuleInvalid(address module);\\n    /// @notice Emitted when the modules provided does not contain elements.\\n    error SetTokenCreator__ModulesEmpty();\\n    /// @notice Emitted when a unit provided is less than or equal to zero.\\n    error SetTokenCreator__UnitsLessThanOrEqualToZero(int256 unit, uint256 positionInArray);\\n    /// @notice Emitted when a zero address is provided.\\n    error SetTokenCreator__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function create(\\n        address[] memory _components,\\n        int256[] memory _units,\\n        address[] memory _modules,\\n        address _manager,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/ISetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/IStreamingFeeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IStreamingFeeModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the specified fee exceeds the maximum allowable limit.\\n    error StreamingFeeModule__FeeTooHigh(uint256 maxFee);\\n    /// @notice Emitted when a zero address is provided.\\n    error StreamingFeeModule__ZeroAddress();\\n\\n    struct FeeState {\\n        uint256 maxStreamingFeePercentage;\\n        uint256 streamingFeePercentage;\\n        uint256 lastStreamingFeeTimestamp;\\n        address feeRecipient;\\n    }\\n\\n    /* ============ Functions ============ */\\n\\n    function feeStates(ISetToken _setToken) external view returns (FeeState memory);\\n    function getFee(ISetToken _setToken) external view returns (uint256);\\n    function accrueFee(ISetToken _setToken) external;\\n    function updateStreamingFee(ISetToken _setToken, uint256 _newFee) external;\\n    function updateFeeRecipient(ISetToken _setToken, address _newFeeRecipient) external;\\n    function initialize(ISetToken _setToken, FeeState memory _settings) external;\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n/* solhint-disable var-name-mixedcase */\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG\\n * - 4/21/21: Added validatePairsWithArray methods\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\\n */\\nlibrary AddressArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the array contains duplicate addresses.\\n    error AddressArrayUtils__ArrayContainsDuplicates();\\n    /// @notice Emitted when the provided index is out of the bounds of the array.\\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the array is empty.\\n    error AddressArrayUtils__ArrayIsEmpty();\\n    /// @notice Emitted when a target address is not found within the array.\\n    error AddressArrayUtils__ArrayItemNotFound(address target);\\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n\\n        uint256 length = A.length;\\n        for (uint256 i; i < length - 1; ) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < length;) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i; i < index; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j = index + 1; j < length;) {\\n            newAddresses[j - 1] = A[j];\\n            unchecked { ++j; }\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i; i < aLength; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j; j < bLength;) {\\n            newAddresses[aLength + j] = B[j];\\n            unchecked { ++j; }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\\n    }\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/lib/ExplicitERC20.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n * @author Set Protocol\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary ExplicitERC20 {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a token transfer doesn't match the expected balance.\\n    error ExplicitERC20__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(\\n                _token,\\n                _from,\\n                _to,\\n                _quantity\\n            );\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            uint256 transferQuantity = existingBalance + _quantity;\\n            if (newBalance != transferQuantity) revert ExplicitERC20__PostTransferBalanceInvalid(address(this), newBalance, transferQuantity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n * - 4/14/23: Removed safePower function\\n * - 4/18/23: Upgrade OZ\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PreciseUnitMath {\\n    using SafeCast for int256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an attempt is made to divide by zero.\\n    error PreciseUnitMath__DivisionByZero();\\n    /// @notice Emitted when the inputs provided are invalid for the operation.\\n    error PreciseUnitMath__InvalidInput(int256 inputA, int256 inputB);\\n    /// @notice Emitted when there's an overflow during the inversion operation.\\n    error PreciseUnitMath__InversionOverflow(int256 input);\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (((a * b) - 1) / PRECISE_UNIT) + 1;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISE_UNIT) / b;\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * PRECISE_UNIT_INT) / b;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        return a > 0 ? (((a * PRECISE_UNIT) - 1) / b) + 1 : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        a = a * PRECISE_UNIT_INT;\\n        int256 c = a / b;\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n        if (a == MIN_INT_256 && b == -1) revert PreciseUnitMath__InvalidInput(a, b);\\n\\n        int256 result = a / b;\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * b, PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * PRECISE_UNIT_INT, b);\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b + range && a >= b - range;\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a > -1 ? a.toUint256() : (a * -1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        if (a == MIN_INT_256) revert PreciseUnitMath__InversionOverflow(a);\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/lib/StringArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @title StringArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle String Arrays\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary StringArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when a target string is not found within the array.\\n    error StringsArrayUtils__ArrayItemNotFound(address emitter, string target);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input string to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The string to remove\\n     */\\n    function removeStorage(string[] storage A, string memory a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert StringsArrayUtils__ArrayItemNotFound(address(this), a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/protocol/lib/Invoke.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title Invoke\\n * @author Set Protocol\\n *\\n * A collection of common utility functions for interacting with the SetToken's invoke function\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Invoke {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a transfer doesn't match the expected balance.\\n    error Invoke__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the SetToken's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _spender, _quantity);\\n        _setToken.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            bytes memory callData = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _quantity);\\n            _setToken.invoke(_token, 0, callData);\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     * The new SetToken balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the SetToken\\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for SetToken\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            // Verify only the transfer quantity is subtracted\\n            uint256 expectedBalance = existingBalance - _quantity;\\n            if (newBalance != expectedBalance) {\\n                revert Invoke__PostTransferBalanceInvalid(address(this), newBalance, expectedBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to unwrap the passed quantity of WETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _setToken.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to wrap the passed quantity of ETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _setToken.invoke(_weth, _quantity, callData);\\n    }\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/protocol/lib/ModuleBase.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { Position } from \\\"./Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"./ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title ModuleBase\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG\\n * - 4/21/21: Delegated modifier logic to internal helpers to reduce contract size\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nabstract contract ModuleBase is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        _validateOnlyManagerAndValidSet(_setToken);\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        _validateOnlySetManager(_setToken, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        _validateOnlyValidAndInitializedSet(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        _validateOnlyModule(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        _validateOnlyValidAndPendingSet(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        if (adapter == address(0)) revert Module__AdapterInvalid(address(this), _integrationHash);\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller \\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\\n        return controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must SetToken manager and SetToken must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(ISetToken _setToken) internal view {\\n       if (!isSetManager(_setToken, msg.sender)) revert Module__CallerNotManager(address(this), msg.sender, address(_setToken));\\n       if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must SetToken manager\\n     */\\n    function _validateOnlySetManager(ISetToken _setToken, address _caller) internal view {\\n       if (!isSetManager(_setToken, _caller)) revert Module__CallerNotManager(address(this), _caller, address(_setToken));\\n    }\\n\\n    /**\\n     * SetToken must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(ISetToken _setToken) internal view {\\n        if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(ISetToken _setToken) internal view {\\n        if (_setToken.moduleStates(msg.sender) != ISetToken.ModuleState.INITIALIZED)\\n            revert Module__CallerNotInitializedModule(address(this), msg.sender);\\n\\n        if (!controller.isModule(msg.sender))\\n            revert Module__ModuleInvalid(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * SetToken must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(ISetToken _setToken) internal view {\\n        if (!controller.isSet(address(_setToken))) revert Module__SetTokenInvalid(address(this), address(_setToken));\\n        if (!isSetPendingInitialization(_setToken)) revert Module__SetTokenNotPending(address(this), address(_setToken));\\n    }\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/protocol/lib/Position.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title Position\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions\\n *\\n * CHANGELOG\\n * - Updated editExternalPosition to work when no external position is associated with module\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when unexpected data is passed where zero data is expected.\\n    error Position__DataNotNull(address emitter, bytes passed);\\n    /// @notice Emitted when the first module in positions isn't the expected module, \\n    ///         indicating potential unexpected external positions.\\n    error Position__UnexpectedModuleInFirstPosition(address emitter, address moduleInPosition);\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n    \\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position. \\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        internal\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            if (_data.length != 0) revert Position__DataNotNull(address(this), _data);\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    if (positionModules[0] != _module) revert Position__UnexpectedModuleInFirstPosition(address(this), positionModules[0]);\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component); \\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        internal\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional - _prePositionUnit.preciseMul(_setTokenSupply);\\n        return (_postTotalNotional - airdroppedAmount).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/protocol/lib/ResourceIdentifier.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n * @author Set Protocol\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\nlibrary ResourceIdentifier {\\n\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/AaveLeverageStrategyExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { BaseGlobalExtension } from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport { ILeverageModule } from \\\"../interfaces/ILeverageModule.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IChainlinkAggregatorV3 } from \\\"../interfaces/IChainlinkAggregatorV3.sol\\\";\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\\\";\\nimport { StringArrayUtils } from \\\"@amun/amun-protocol/contracts/lib/StringArrayUtils.sol\\\";\\nimport {\\n    ILendingPool\\n} from \\\"@amun/amun-protocol/contracts/interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"@amun/amun-protocol/contracts/interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title AaveLeverageStrategyExtension\\n * @author Set Protocol\\n *\\n * Smart contract that enables trustless leverage tokens. This extension is paired with the AaveLeverageModule\\n * from Set protocol where module interactions are invoked via the IDelegatedManager contract. Any leveraged\\n * token can be constructed as long as the collateral and borrow asset is available on Aave.\\n *\\n */\\ncontract AaveLeverageStrategyExtension is BaseGlobalExtension {\\n    using Address for address;\\n    using PreciseUnitMath for uint256;\\n    using SafeCast for int256;\\n    using StringArrayUtils for string[];\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the cooldown period hasn't elapsed AND the leverage ratio is invalid.\\n    error AaveLeverageStrategyExtension__CooldownNotElapsedANDLeverageRatioInvalid(\\n        uint256 currentPeriod,\\n        uint256 coolDown,\\n        uint256 currentLeverageRatio,\\n        uint256 minLeverageRatio,\\n        uint256 maxLeverageRatio\\n    );\\n    /// @notice Emitted when there's remaining debt after an operation.\\n    error AaveLeverageStrategyExtension__DebtRemains(uint256 remainingDebt);\\n    /// @notice Emitted when an exchange adapter already exists.\\n    error AaveLeverageStrategyExtension__ExchangeExists();\\n    /// @notice Emitted when an exchange adapter is invalid or missing.\\n    error AaveLeverageStrategyExtension__ExchangeInvalid();\\n    /// @notice Emitted when an exchange adapter is not enabled.\\n    error AaveLeverageStrategyExtension__ExchangeNotEnabled();\\n    /// @notice Emitted when the system is already in the process of rebalancing.\\n    error AaveLeverageStrategyExtension__IsRebalancing(uint256 twapLeverageRatio);\\n    /// @notice Emitted when the provided leverage bounds are invalid.\\n    error AaveLeverageStrategyExtension__LeverageBoundsInvalid(\\n        uint256 providedMinLeverage,\\n        uint256 maximumMinLeverage,\\n        uint256 providedMaxLeverage,\\n        uint256 mininmumMaxLeverage\\n    );\\n    /// @notice Emitted when the current leverage ratio is outside the valid bounds.\\n    /// @notice Emitted when the provided max leverage value is invalid.\\n    error AaveLeverageStrategyExtension__MaxLeverageInvalid(uint256 provided, uint256 minimum);\\n    /// @notice Emitted when the provided min leverage value is invalid.\\n    error AaveLeverageStrategyExtension__MinLeverageInvalid(uint256 provided, uint256 maximum);\\n    /// @notice Emitted when the iterate function needs to be called.\\n    error AaveLeverageStrategyExtension__MustCallIterate();\\n    /// @notice Emitted when an operation isn't within a valid TWAP (Time-Weighted Average Price) window.\\n    error AaveLeverageStrategyExtension__NotInTwap();\\n    /// @notice Emitted when the ripcord slippage tolerance exceeds 100%.\\n    error AaveLeverageStrategyExtension__Over100RipcordSlippageTolerance();\\n    /// @notice Emitted when the slippage tolerance exceeds 100%.\\n    error AaveLeverageStrategyExtension__Over100SlippageTolerance();\\n    /// @notice Emitted when the unutilized leverage exceeds 100%.\\n    error AaveLeverageStrategyExtension__Over100Unutilized();\\n    /// @notice Emitted when the recentering speed surpasses 100%.\\n    error AaveLeverageStrategyExtension__Over100RecenteringSpeed();\\n    /// @notice Emitted when the provided rebalance interval is invalid.\\n    error AaveLeverageStrategyExtension__RebalanceIntervalInvalid(uint256 provided, uint256 minimum);\\n    /// @notice Emitted when the current leverage ratio exceeds the ripcord's maximum limit.\\n    error AaveLeverageStrategyExtension__RipcordLeverageExceeded(uint256 currentLeverageRatio, uint256 maximum);\\n    /// @notice Emitted when the current leverage ratio is below the ripcord's minimum limit.\\n    error AaveLeverageStrategyExtension__RipcordLeverageInsufficient(uint256 currentLeverageRatio, uint256 minimum);\\n    /// @notice Emitted when the ripcord leverage provided is invalid.\\n    error AaveLeverageStrategyExtension__RipcordLeverageInvalid(uint256 provided, uint256 minimum);\\n    /// @notice Emitted when the provided TWAP cooldown is invalid.\\n    error AaveLeverageStrategyExtension__TwapCooldownInvalid(uint256 provided, uint256 minimum);\\n    /// @notice Emitted when the TWAP cooldown period hasn't elapsed yet.\\n    error AaveLeverageStrategyExtension__TwapCooldownNotElapsed(uint256 blockTimestamp, uint256 coolDown);\\n    /// @notice Emitted when there's a zero balance for borrowing.\\n    error AaveLeverageStrategyExtension__ZeroBorrowBalance();\\n    /// @notice Emitted when there's a zero balance for collateral.\\n    error AaveLeverageStrategyExtension__ZeroCollateralBalance();\\n    /// @notice Emitted when the total supply is zero.\\n    error AaveLeverageStrategyExtension__ZeroTotalSupply();\\n    /// @notice Emitted when the TWAP max trade size is set to zero.\\n    error AaveLeverageStrategyExtension__ZeroTwapMaxTradeSize();\\n\\n    /* ============ Enums ============ */\\n\\n    enum ShouldRebalance {\\n        NONE,                   // Indicates no rebalance action can be taken\\n        REBALANCE,              // Indicates rebalance() function can be successfully called\\n        ITERATE_REBALANCE,      // Indicates iterateRebalance() function can be successfully called\\n        RIPCORD                 // Indicates ripcord() function can be successfully called\\n    }\\n\\n    /* ============ Structs ============ */\\n\\n    struct ActionInfo {\\n        uint256 collateralBalance;       // Balance of underlying held in Aave in base units (e.g. USDC 10e6)\\n        uint256 borrowBalance;           // Balance of underlying borrowed from Aave in base units\\n        uint256 collateralValue;         // Valuation in USD adjusted for decimals in precise units (10e18)\\n        uint256 borrowValue;             // Valuation in USD adjusted for decimals in precise units (10e18)\\n        uint256 collateralPrice;         // Offchain/onchain price of collateral in precise units (10e18)\\n        uint256 borrowPrice;             // Offchain/onchain price of borrow asset in precise units (10e18)\\n        uint256 setTotalSupply;          // Total supply of SetToken\\n    }\\n\\n    struct StrategySettings {\\n        MethodologySettings methodology;                     // Methodology settings\\n        ExecutionSettings execution;                         // Execution settings\\n        RipcordSettings ripcordSettings;                     // Ripcord settings\\n        mapping(string => ExchangeSettings) exchangeSettings;// Mapping between exchange name and its settings\\n        string[] enabledExchanges;                           // Supported exchanges\\n        uint256 twapLeverageRatio;                           // Stored target LR to keep track between TWAP rebalances\\n        uint256 globalLastTradeTimestamp;                    // Last time a trade was executed\\n        uint256 collateralDecimalAdjustment;                 // Decimal adjustment for collateral asset\\n        uint256 borrowDecimalAdjustment;                     // Decimal adjustment for borrow asset\\n        IChainlinkAggregatorV3 collateralPriceOracle;        // Chainlink oracle feed with 8 decimals\\n        IChainlinkAggregatorV3 borrowPriceOracle;            // Chainlink oracle feed with 8 decimals\\n    }\\n\\n    struct LeverageInfo {\\n        ISetToken setToken;\\n        ActionInfo action;\\n        uint256 currentLeverageRatio;        // Current leverage ratio of Set\\n        uint256 slippageTolerance;           // Allowable percent trade slippage in preciseUnits (1% = 10^16)\\n        uint256 twapMaxTradeSize;            // Max trade size in collateral units allowed for rebalance action\\n        string exchangeName;                 // Exchange to use for trade\\n    }\\n\\n    struct MethodologySettings {\\n        uint256 targetLeverageRatio;// Long term target ratio in precise units (10e18)\\n        uint256 minLeverageRatio;   // In precise units (10e18). If current leverage is below, target is this ratio\\n        uint256 maxLeverageRatio;   // In precise units (10e18). If current leverage is above, target is this ratio\\n        uint256 recenteringSpeed;   // % at which to rebalance back to target leverage in precise units (10e18)\\n        uint256 rebalanceInterval;  // Period of time required since last rebalance timestamp in seconds\\n    }\\n\\n    struct ExecutionSettings {\\n        uint256 unutilizedLeveragePercentage;// % of max borrow left unutilized in precise units (1% = 10e16)\\n        uint256 slippageTolerance;           // % in precise units to price min received tokens from trade quantities\\n        uint256 twapCooldownPeriod;          // Cooldown period required since last trade timestamp in seconds\\n    }\\n\\n    struct RipcordSettings {\\n        uint256 ripcordLeverageRatio;                    // Leverage ratio for ripcord calls\\n        uint256 ripcordSlippageTolerance;                // Slippage tolerance percentage for ripcord calls\\n        uint256 ripcordTwapCooldownPeriod;               // TWAP cooldown in seconds for ripcord calls\\n    }\\n\\n    struct ExchangeSettings {\\n        uint256 twapMaxTradeSize;          // Max trade size in collateral base units\\n        uint256 exchangeLastTradeTimestamp;// Timestamp of last trade made with this exchange\\n        uint256 ripcordTwapMaxTradeSize;   // Max trade size for ripcord calls in collateral base units\\n        bytes leverExchangeData;           // Arbitrary exchange data passed into rebalance function for levering up\\n        bytes deleverExchangeData;         // Arbitrary exchange data passed into rebalance function for delevering\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event Engaged(\\n        uint256 _currentLeverageRatio,\\n        uint256 _newLeverageRatio,\\n        uint256 _chunkRebalanceNotional,\\n        uint256 _totalRebalanceNotional\\n    );\\n    event Rebalanced(\\n        uint256 _currentLeverageRatio,\\n        uint256 _newLeverageRatio,\\n        uint256 _chunkRebalanceNotional,\\n        uint256 _totalRebalanceNotional\\n    );\\n    event RebalanceIterated(\\n        uint256 _currentLeverageRatio,\\n        uint256 _newLeverageRatio,\\n        uint256 _chunkRebalanceNotional,\\n        uint256 _totalRebalanceNotional\\n    );\\n    event RipcordCalled(\\n        uint256 _currentLeverageRatio,\\n        uint256 _newLeverageRatio,\\n        uint256 _rebalanceNotional\\n    );\\n    event Disengaged(\\n        uint256 _currentLeverageRatio,\\n        uint256 _newLeverageRatio,\\n        uint256 _chunkRebalanceNotional,\\n        uint256 _totalRebalanceNotional\\n    );\\n    event MethodologySettingsUpdated(\\n        uint256 _targetLeverageRatio,\\n        uint256 _minLeverageRatio,\\n        uint256 _maxLeverageRatio,\\n        uint256 _recenteringSpeed,\\n        uint256 _rebalanceInterval\\n    );\\n    event ExecutionSettingsUpdated(\\n        uint256 _unutilizedLeveragePercentage,\\n        uint256 _twapCooldownPeriod,\\n        uint256 _slippageTolerance\\n    );\\n    event RipcordSettingsUpdated(\\n        uint256 _ripcordLeverageRatio,\\n        uint256 _ripcordSlippageTolerance,\\n        uint256 _ripcordTwapCooldownPeriod\\n    );\\n    event ExchangeUpdated(\\n        string _exchangeName,\\n        uint256 twapMaxTradeSize,\\n        uint256 exchangeLastTradeTimestamp,\\n        uint256 ripcordTwapMaxTradeSize,\\n        bytes leverExchangeData,\\n        bytes deleverExchangeData\\n    );\\n    event ExchangeAdded(\\n        string _exchangeName,\\n        uint256 twapMaxTradeSize,\\n        uint256 exchangeLastTradeTimestamp,\\n        uint256 ripcordTwapMaxTradeSize,\\n        bytes leverExchangeData,\\n        bytes deleverExchangeData\\n    );\\n    event ExchangeRemoved(\\n        string _exchangeName\\n    );\\n    event AaveLeverageStrategyExtensionInitialized(\\n        address indexed _setToken,\\n        address indexed _delegatedManager\\n    );\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if rebalance is currently in TWAP`\\n     */\\n    modifier noRebalanceInProgress(ISetToken _setToken) virtual {\\n        uint256 twapLeverageRatio = strategy[_setToken].twapLeverageRatio;\\n\\n        if (twapLeverageRatio != 0) \\n            revert AaveLeverageStrategyExtension__IsRebalancing(twapLeverageRatio);\\n\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    ILeverageModule public immutable LEVERAGE_MODULE;      // LeverageModule associated to the extension\\n    mapping(ISetToken => StrategySettings) public strategy;// Mapping between supported setTokens and their params\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Instantiate addresses, methodology parameters, execution parameters, and ripcord parameters.\\n     *\\n     * @param _managerCore              Address of ManagerCore contract\\n     * @param _leverageModule           Address of LeverageModule contract\\n     */\\n    constructor(\\n        IManagerCore _managerCore,\\n        ILeverageModule _leverageModule\\n    )\\n        BaseGlobalExtension(_managerCore)\\n    {\\n        LEVERAGE_MODULE = _leverageModule;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * OPERATOR ONLY: Engage to target leverage ratio for the first time. SetToken will borrow debt position from\\n     * Aave and trade for collateral asset. If target leverage ratio is above max borrow or max trade size, then\\n     * TWAP is kicked off. To complete engage if TWAP, any valid caller must call iterateRebalance until target is met.\\n     *\\n     * @param _setToken                     SetToken to engage\\n     * @param _exchangeName                 The exchange used for trading\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     */\\n    function engage(\\n        ISetToken _setToken,\\n        string calldata _exchangeName,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    ) external onlyOperator(_setToken) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        ActionInfo memory engageInfo = _createActionInfo(\\n            _setToken,\\n            _offchainCollateralPrice,\\n            _offchainBorrowPrice\\n        );\\n\\n        if (engageInfo.setTotalSupply == 0) revert AaveLeverageStrategyExtension__ZeroTotalSupply();\\n        if (engageInfo.collateralBalance == 0) revert AaveLeverageStrategyExtension__ZeroCollateralBalance();\\n        if (engageInfo.borrowBalance != 0) revert AaveLeverageStrategyExtension__DebtRemains(engageInfo.borrowBalance);\\n\\n        LeverageInfo memory leverageInfo = LeverageInfo({\\n            setToken: _setToken,\\n            action: engageInfo,\\n            currentLeverageRatio: PreciseUnitMath.preciseUnit(), // 1x leverage in precise units\\n            slippageTolerance: myStrategy.execution.slippageTolerance,\\n            twapMaxTradeSize: myStrategy.exchangeSettings[_exchangeName].twapMaxTradeSize,\\n            exchangeName: _exchangeName\\n        });\\n\\n        uint256 targetLeverageRatio = myStrategy.methodology.targetLeverageRatio;\\n\\n        // Calculate total rebalance units and kick off TWAP if above max borrow or max trade size\\n        (\\n            uint256 chunkRebalanceNotional,\\n            uint256 totalRebalanceNotional\\n        ) = _calculateChunkRebalanceNotional(leverageInfo, targetLeverageRatio, true);\\n\\n        _lever(leverageInfo, chunkRebalanceNotional);\\n\\n        _updateRebalanceState(\\n            _setToken,\\n            chunkRebalanceNotional,\\n            totalRebalanceNotional,\\n            targetLeverageRatio,\\n            _exchangeName\\n        );\\n\\n        emit Engaged(\\n            leverageInfo.currentLeverageRatio,\\n            targetLeverageRatio,\\n            chunkRebalanceNotional,\\n            totalRebalanceNotional\\n        );\\n    }\\n\\n    /**\\n     * OPERATOR ONLY: Rebalance product. If current leverage ratio is between the max and min bounds, then\\n     * rebalance can only be called once the rebalance interval has elapsed since last timestamp. If outside the\\n     * max and min, rebalance can be called anytime to bring leverage ratio back to the max or min bounds. The\\n     * methodology will determine whether to delever or lever.\\n     *\\n     * Note: If the calculated current leverage ratio is above the ripcord leverage ratio or in TWAP then rebalance\\n     * cannot be called. Instead, you must call ripcord() or iterateRebalance().\\n     *\\n     * @param _setToken                     SetToken to rebalance\\n     * @param _exchangeName                 The exchange used for trading\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     */\\n    function rebalance(\\n        ISetToken _setToken,\\n        string calldata _exchangeName,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    ) external onlyOperator(_setToken) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(\\n            _setToken,\\n            myStrategy.execution.slippageTolerance,\\n            myStrategy.exchangeSettings[_exchangeName].twapMaxTradeSize,\\n            _exchangeName,\\n            _offchainCollateralPrice,\\n            _offchainBorrowPrice\\n        );\\n\\n        _validateNonTWAP(_setToken);\\n        // use globalLastTradeTimestamps to prevent multiple rebalances being called with different exchanges during\\n        // the epoch rebalance\\n        _validateNormalRebalance(\\n            leverageInfo,\\n            myStrategy.methodology.rebalanceInterval,\\n            myStrategy.globalLastTradeTimestamp)\\n        ;\\n\\n        uint256 newLeverageRatio = _calculateNewLeverageRatio(_setToken, leverageInfo.currentLeverageRatio);\\n\\n        (\\n            uint256 chunkRebalanceNotional,\\n            uint256 totalRebalanceNotional\\n        ) = _handleRebalance(leverageInfo, newLeverageRatio);\\n\\n        _updateRebalanceState(\\n            _setToken,\\n            chunkRebalanceNotional,\\n            totalRebalanceNotional,\\n            newLeverageRatio,\\n            _exchangeName\\n        );\\n\\n        emit Rebalanced(\\n            leverageInfo.currentLeverageRatio,\\n            newLeverageRatio,\\n            chunkRebalanceNotional,\\n            totalRebalanceNotional\\n        );\\n    }\\n\\n    /**\\n     * OPERATOR ONLY: Iterate a rebalance when in TWAP. TWAP cooldown period must have elapsed.\\n     * If price moves advantageously, then exit without rebalancing and clear TWAP state.\\n     * This function can only be called when below ripcord leverage ratio and in TWAP state.\\n     *\\n     * @param _setToken                     SetToken to iterate rebalance\\n     * @param _exchangeName                 The exchange used for trading\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     */\\n    function iterateRebalance(\\n        ISetToken _setToken,\\n        string calldata _exchangeName,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    ) external onlyOperator(_setToken) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n        ExecutionSettings storage execution = myStrategy.execution;\\n        ExchangeSettings storage exchangeSettings = myStrategy.exchangeSettings[_exchangeName];\\n\\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(\\n            _setToken,\\n            execution.slippageTolerance,\\n            exchangeSettings.twapMaxTradeSize,\\n            _exchangeName,\\n            _offchainCollateralPrice,\\n            _offchainBorrowPrice\\n        );\\n\\n        _validateTWAP(_setToken);\\n        // Use the exchangeLastTradeTimestamp since cooldown periods are measured on a per-exchange basis,\\n        // allowing it to rebalance multiple time in quick succession with different exchanges\\n        _validateNormalRebalance(\\n            leverageInfo,\\n            execution.twapCooldownPeriod,\\n            exchangeSettings.exchangeLastTradeTimestamp\\n        );\\n\\n        uint256 twapLeverageRatio = myStrategy.twapLeverageRatio;\\n        uint256 chunkRebalanceNotional;\\n        uint256 totalRebalanceNotional;\\n        if (!_isAdvantageousTWAP(_setToken, leverageInfo.currentLeverageRatio)) {\\n            (chunkRebalanceNotional, totalRebalanceNotional) = _handleRebalance(leverageInfo, twapLeverageRatio);\\n        }\\n\\n        // If not advantageous, then rebalance is skipped and chunk and total rebalance notional are both 0,\\n        // which means TWAP state is cleared\\n        _updateIterateState(_setToken, chunkRebalanceNotional, totalRebalanceNotional, _exchangeName);\\n\\n        emit RebalanceIterated(\\n            leverageInfo.currentLeverageRatio,\\n            twapLeverageRatio,\\n            chunkRebalanceNotional,\\n            totalRebalanceNotional\\n        );\\n    }\\n\\n    /**\\n     * OPERATOR ONLY: In case the current leverage ratio exceeds the ripcord leverage threshold, the ripcord\\n     * function can be called by the operator to return leverage ratio back to the max leverage ratio. This function\\n     * typically would only be called during times of high downside volatility and / or normal keeper malfunctions.\\n     * The ripcord function uses it's own TWAP cooldown period, slippage tolerance and TWAP max trade size which are\\n     * typically looser than in regular rebalances.\\n     *\\n     * @param _setToken                     SetToken to ripcord\\n     * @param _exchangeName                 The exchange used for trading\\n     */\\n    function ripcord(\\n        ISetToken _setToken,\\n        string calldata _exchangeName\\n    ) external onlyOperator(_setToken) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n        ExchangeSettings storage exchangeSettings = myStrategy.exchangeSettings[_exchangeName];\\n        (uint256 collateralPrice, uint256 borrowPrice) = _getChainlinkPrices(_setToken);\\n\\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(\\n            _setToken,\\n            myStrategy.ripcordSettings.ripcordSlippageTolerance,\\n            exchangeSettings.ripcordTwapMaxTradeSize,\\n            _exchangeName,\\n            collateralPrice,\\n            borrowPrice\\n        );\\n\\n        // Use the exchangeLastTradeTimestamp so it can ripcord quickly with multiple exchanges\\n        _validateRipcord(leverageInfo, exchangeSettings.exchangeLastTradeTimestamp);\\n\\n        uint256 maxLeverageRatio = myStrategy.methodology.maxLeverageRatio;\\n        ( uint256 chunkRebalanceNotional, ) = _calculateChunkRebalanceNotional(leverageInfo, maxLeverageRatio, false);\\n\\n        _delever(leverageInfo, chunkRebalanceNotional);\\n\\n        _updateRipcordState(_setToken, _exchangeName);\\n\\n        emit RipcordCalled(\\n            leverageInfo.currentLeverageRatio,\\n            maxLeverageRatio,\\n            chunkRebalanceNotional\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Return leverage ratio to 1x and delever to repay loan. This can be used for\\n     * upgrading or shutting down the strategy. SetToken will redeem collateral position and trade for debt position\\n     * to repay Aave. If the chunk rebalance size is less than the total notional size, then this function will delever\\n     * and repay entire borrow balance on Aave. If chunk rebalance size is above max borrow or max trade size, then\\n     * operator must continue to call this function to complete repayment of loan. The function iterateRebalance\\n     * will not work.\\n     *\\n     * Note: Delever to 0 will likely result in additional units of the borrow asset added as equity on the SetToken\\n     * due to oracle price / market price mismatch\\n     *\\n     * @param _setToken                     SetToken to disengage\\n     * @param _exchangeName                 The exchange used for trading\\n     */\\n    function disengage(\\n        ISetToken _setToken,\\n        string calldata _exchangeName\\n    ) external onlyOwnerAndValidManager(_manager(_setToken)) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        (uint256 collateralPrice, uint256 borrowPrice) = _getChainlinkPrices(_setToken);\\n\\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(\\n            _setToken,\\n            myStrategy.execution.slippageTolerance,\\n            myStrategy.exchangeSettings[_exchangeName].twapMaxTradeSize,\\n            _exchangeName,\\n            collateralPrice,\\n            borrowPrice\\n        );\\n\\n        uint256 newLeverageRatio = PreciseUnitMath.preciseUnit();\\n\\n        (\\n            uint256 chunkRebalanceNotional,\\n            uint256 totalRebalanceNotional\\n        ) = _calculateChunkRebalanceNotional(leverageInfo, newLeverageRatio, false);\\n\\n        if (totalRebalanceNotional > chunkRebalanceNotional) {\\n            _delever(leverageInfo, chunkRebalanceNotional);\\n        } else {\\n            _deleverToZeroBorrowBalance(leverageInfo, totalRebalanceNotional);\\n        }\\n\\n        emit Disengaged(\\n            leverageInfo.currentLeverageRatio,\\n            newLeverageRatio,\\n            chunkRebalanceNotional,\\n            totalRebalanceNotional\\n        );\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Set methodology settings and check new settings are valid.\\n     *\\n     * Note: Need to pass in existing parameters if only changing a few settings. Must not be in a rebalance.\\n     *\\n     * @param _setToken                        SetToken to set methodology settings\\n     * @param _newMethodologySettings          Struct containing methodology parameters\\n     */\\n    function setMethodologySettings(\\n        ISetToken _setToken,\\n        MethodologySettings calldata _newMethodologySettings\\n    ) external onlyMethodologist(_setToken) noRebalanceInProgress(_setToken) {\\n        _validateNonExchangeSettings(\\n            _newMethodologySettings,\\n            strategy[_setToken].execution,\\n            strategy[_setToken].ripcordSettings\\n        );\\n\\n        strategy[_setToken].methodology = _newMethodologySettings;\\n\\n        emit MethodologySettingsUpdated(\\n            _newMethodologySettings.targetLeverageRatio,\\n            _newMethodologySettings.minLeverageRatio,\\n            _newMethodologySettings.maxLeverageRatio,\\n            _newMethodologySettings.recenteringSpeed,\\n            _newMethodologySettings.rebalanceInterval\\n        );\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST Set execution settings and check new settings are valid.\\n     *\\n     * Note: Need to pass in existing parameters if only changing a few settings. Must not be in a rebalance.\\n     *\\n     * @param _setToken                      SetToken to set execution settings\\n     * @param _newExecutionSettings          Struct containing execution parameters\\n     */\\n    function setExecutionSettings(\\n        ISetToken _setToken,\\n        ExecutionSettings calldata _newExecutionSettings\\n    ) external onlyMethodologist(_setToken) noRebalanceInProgress(_setToken) {\\n        _validateNonExchangeSettings(\\n            strategy[_setToken].methodology,\\n            _newExecutionSettings,\\n            strategy[_setToken].ripcordSettings\\n        );\\n\\n        strategy[_setToken].execution = _newExecutionSettings;\\n\\n        emit ExecutionSettingsUpdated(\\n            _newExecutionSettings.unutilizedLeveragePercentage,\\n            _newExecutionSettings.twapCooldownPeriod,\\n            _newExecutionSettings.slippageTolerance\\n        );\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Set ripcord settings and check new settings are valid.\\n     *\\n     * Note: Need to pass in existing parameters if only changing a few settings. Must not be in a rebalance.\\n     *\\n     * @param _setToken                    SetToken to set ripcord settings\\n     * @param _newRipcordSettings          Struct containing ripcord parameters\\n     */\\n    function setRipcordSettings(\\n        ISetToken _setToken,\\n        RipcordSettings calldata _newRipcordSettings\\n    ) external onlyMethodologist(_setToken) noRebalanceInProgress(_setToken) {\\n        _validateNonExchangeSettings(\\n            strategy[_setToken].methodology,\\n            strategy[_setToken].execution,\\n            _newRipcordSettings\\n        );\\n\\n        strategy[_setToken].ripcordSettings = _newRipcordSettings;\\n\\n        emit RipcordSettingsUpdated(\\n            _newRipcordSettings.ripcordLeverageRatio,\\n            _newRipcordSettings.ripcordSlippageTolerance,\\n            _newRipcordSettings.ripcordTwapCooldownPeriod\\n        );\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Add a new enabled exchange for trading during rebalances. New exchanges will have their\\n     * exchangeLastTradeTimestamp set to 0. Adding exchanges during rebalances is allowed, as it is not possible to\\n     * enter an unexpected state while doing so.\\n     *\\n     * @param _setToken             SetToken to add enabled exchange\\n     * @param _exchangeName         Name of the exchange\\n     * @param _exchangeSettings     Struct containing exchange parameters\\n     */\\n    function addEnabledExchange(\\n        ISetToken _setToken,\\n        string calldata _exchangeName,\\n        ExchangeSettings calldata _exchangeSettings\\n    ) external onlyMethodologist(_setToken) {\\n        if (strategy[_setToken].exchangeSettings[_exchangeName].twapMaxTradeSize != 0) \\n            revert AaveLeverageStrategyExtension__ExchangeExists();\\n        _validateExchangeSettings(_exchangeSettings);\\n\\n        strategy[_setToken].exchangeSettings[_exchangeName] = _exchangeSettings;\\n\\n        strategy[_setToken].enabledExchanges.push(_exchangeName);\\n\\n        emit ExchangeAdded(\\n            _exchangeName,\\n            _exchangeSettings.twapMaxTradeSize,\\n            _exchangeSettings.exchangeLastTradeTimestamp,\\n            _exchangeSettings.ripcordTwapMaxTradeSize,\\n            _exchangeSettings.leverExchangeData,\\n            _exchangeSettings.deleverExchangeData\\n        );\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Removes an exchange. Reverts if the exchange is not already enabled. Removing exchanges\\n     * during rebalances is allowed, as it is not possible to enter an unexpected state while doing so.\\n     *\\n     * @param _setToken             SetToken to remove exchange\\n     * @param _exchangeName         Name of exchange to remove\\n     */\\n    function removeEnabledExchange(\\n        ISetToken _setToken,\\n        string calldata _exchangeName\\n    ) external onlyMethodologist(_setToken) {\\n        if (strategy[_setToken].exchangeSettings[_exchangeName].twapMaxTradeSize == 0) \\n            revert AaveLeverageStrategyExtension__ExchangeNotEnabled();\\n\\n        delete strategy[_setToken].exchangeSettings[_exchangeName];\\n        strategy[_setToken].enabledExchanges.removeStorage(_exchangeName);\\n\\n        emit ExchangeRemoved(_exchangeName);\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Updates the settings of an exchange. Reverts if exchange is not already added. When updating\\n     * an exchange, exchangeLastTradeTimestamp is preserved. Updating exchanges during rebalances is allowed, as it is\\n     * not possible to enter an unexpected state while doing so.\\n     *\\n     * Note: Need to pass in all existing parameters even if only changing a few settings.\\n     *\\n     * @param _setToken             SetToken to update exchange\\n     * @param _exchangeName         Name of the exchange\\n     * @param _exchangeSettings     Struct containing exchange parameters\\n     */\\n    function updateEnabledExchange(\\n        ISetToken _setToken,\\n        string calldata _exchangeName,\\n        ExchangeSettings calldata _exchangeSettings\\n    ) external onlyMethodologist(_setToken) {\\n        if (strategy[_setToken].exchangeSettings[_exchangeName].twapMaxTradeSize == 0)\\n            revert AaveLeverageStrategyExtension__ExchangeNotEnabled();\\n        _validateExchangeSettings(_exchangeSettings);\\n\\n        strategy[_setToken].exchangeSettings[_exchangeName] = _exchangeSettings;\\n\\n        emit ExchangeUpdated(\\n            _exchangeName,\\n            _exchangeSettings.twapMaxTradeSize,\\n            _exchangeSettings.exchangeLastTradeTimestamp,\\n            _exchangeSettings.ripcordTwapMaxTradeSize,\\n            _exchangeSettings.leverExchangeData,\\n            _exchangeSettings.deleverExchangeData\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize the IssuanceModule for\\n     * @param _collateralAssets             Underlying tokens to be enabled as collateral in the SetToken\\n     * @param _borrowAssets                 Underlying tokens to be enabled as borrow in the SetToken\\n     */\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager,\\n        address[] memory _collateralAssets,\\n        address[] memory _borrowAssets\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isInitializedExtension(address(this)))\\n            revert GlobalExtension__ExtensionUninitialized(address(this));\\n\\n        _initializeModule(\\n            _delegatedManager.SET_TOKEN(),\\n            _delegatedManager,\\n            _collateralAssets,\\n            _borrowAssets\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes AaveLeverageStrategyExtension to the DelegatedManager and adds\\n     * its associated setToken to extension's supported tokens\\n     *\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize\\n     * @param _collateralPriceOracle;       Chainlink oracle feed that returns prices in 8 decimals for collateral asset\\n     * @param _borrowPriceOracle;           Chainlink oracle feed that returns prices in 8 decimals for borrow asset\\n     * @param _collateralDecimalAdjustment  Decimal adjustment for collateral asset\\n     * @param _borrowDecimalAdjustment      Decimal adjustment for borrow asset\\n     * @param _methodology                  Methodology settings\\n     * @param _execution                    Execution settings\\n     * @param _ripcordSettings              Ripcord settings\\n     */\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager,\\n        IChainlinkAggregatorV3 _collateralPriceOracle,\\n        IChainlinkAggregatorV3 _borrowPriceOracle,\\n        uint256 _collateralDecimalAdjustment,\\n        uint256 _borrowDecimalAdjustment,\\n        MethodologySettings memory _methodology,\\n        ExecutionSettings memory _execution,\\n        RipcordSettings memory _ripcordSettings\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        _validateNonExchangeSettings(\\n            _methodology,\\n            _execution,\\n            _ripcordSettings\\n        );\\n        ISetToken _setToken = _delegatedManager.SET_TOKEN();\\n\\n        strategy[_setToken].collateralPriceOracle = _collateralPriceOracle;\\n        strategy[_setToken].borrowPriceOracle = _borrowPriceOracle;\\n        strategy[_setToken].collateralDecimalAdjustment = _collateralDecimalAdjustment;\\n        strategy[_setToken].borrowDecimalAdjustment = _borrowDecimalAdjustment;\\n        strategy[_setToken].methodology = _methodology;\\n        strategy[_setToken].execution = _execution;\\n        strategy[_setToken].ripcordSettings = _ripcordSettings;\\n\\n        _initializeExtension(_setToken, _delegatedManager);\\n\\n        emit AaveLeverageStrategyExtensionInitialized(\\n            address(_setToken),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Remove an existing SetToken and DelegatedManager tracked by the AaveLeverageStrategyExtension\\n     *\\n     */\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        ISetToken setToken = delegatedManager.SET_TOKEN();\\n\\n        _removeExtension(setToken, _manager(delegatedManager.SET_TOKEN()));\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Get current leverage ratio. Current leverage ratio is defined as the USD value of the collateral divided\\n     * by the USD value of the SetToken. Prices for collateral and borrow asset are retrieved from Aave Price Oracle.\\n     *\\n     * @return currentLeverageRatio         Current leverage ratio in precise units (10e18)\\n     */\\n    function getCurrentLeverageRatio(\\n        ISetToken _setToken\\n    ) public view returns(uint256) {\\n        (uint256 collateralPrice, uint256 borrowPrice) = _getChainlinkPrices(_setToken);\\n\\n        ActionInfo memory currentLeverageInfo = _createActionInfo(_setToken, collateralPrice, borrowPrice);\\n\\n        return _calculateCurrentLeverageRatio(currentLeverageInfo.collateralValue, currentLeverageInfo.borrowValue);\\n    }\\n\\n    /**\\n     * Get current leverage ratio. Current leverage ratio is defined as the USD value of the collateral divided by the\\n     * USD value of the SetToken. Prices for collateral and borrow asset are computed using offchain pricing passed as\\n     * arguments\\n     *\\n     * @param _setToken                     SetToken to get current leverage ratio from\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     *\\n     * @return currentLeverageRatio         Current leverage ratio in precise units (10e18)\\n     */\\n    function getCurrentLeverageRatio(\\n        ISetToken _setToken,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    ) public view returns(uint256) {\\n        ActionInfo memory currentLeverageInfo = _createActionInfo(\\n            _setToken,\\n            _offchainCollateralPrice,\\n            _offchainBorrowPrice\\n        );\\n\\n        return _calculateCurrentLeverageRatio(currentLeverageInfo.collateralValue, currentLeverageInfo.borrowValue);\\n    }\\n\\n    /**\\n     * Calculates the chunk rebalance size according to offchain prices specified by the caller.\\n     * This can be used by external contracts and keeper bots to calculate the optimal exchange to rebalance with.\\n     *\\n     * Note: this function does not take into account timestamps, so it may return a nonzero value even when\\n     * shouldRebalance would return ShouldRebalance.NONE for all exchanges (since minimum delays have not elapsed)\\n     *\\n     * @param _setToken                     SetToken to get chunk rebalance notional from\\n     * @param _exchangeNames                Array of exchange names to get rebalance sizes for\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     *\\n     * @return sizes            Array of total notional chunk size. Measured in the asset that would be sold\\n     * @return sellAsset        Asset that would be sold during a rebalance\\n     * @return buyAsset         Asset that would be purchased during a rebalance\\n     */\\n    function getChunkRebalanceNotional(\\n        ISetToken _setToken,\\n        string[] calldata _exchangeNames,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    )\\n        external\\n        view\\n        returns(uint256[] memory sizes, address sellAsset, address buyAsset)\\n    {\\n        LeverageInfo memory leverageInfo = LeverageInfo({\\n            setToken: _setToken,\\n            action: _createActionInfo(_setToken, _offchainCollateralPrice, _offchainBorrowPrice),\\n            currentLeverageRatio: getCurrentLeverageRatio(_setToken, _offchainCollateralPrice, _offchainBorrowPrice),\\n            slippageTolerance: 0,\\n            twapMaxTradeSize: 0,\\n            exchangeName: \\\"\\\"\\n        });\\n\\n        StrategySettings storage myStrategy = strategy[leverageInfo.setToken];\\n        uint256 newLeverageRatio;\\n        bool isRipcord = false;\\n\\n        // if over ripcord leverage ratio, always ripcord\\n        if (leverageInfo.currentLeverageRatio > myStrategy.ripcordSettings.ripcordLeverageRatio) {\\n            newLeverageRatio = myStrategy.methodology.maxLeverageRatio;\\n            isRipcord = true;\\n        // if we are in an ongoing twap, use the cached twapLeverageRatio as our target leverage\\n        } else if (myStrategy.twapLeverageRatio > 0) {\\n            newLeverageRatio = myStrategy.twapLeverageRatio;\\n        // if all else is false, then we would just use the normal rebalance new leverage ratio calculation\\n        } else {\\n            newLeverageRatio = _calculateNewLeverageRatio(leverageInfo.setToken, leverageInfo.currentLeverageRatio);\\n        }\\n\\n        bool isLever = newLeverageRatio > leverageInfo.currentLeverageRatio;\\n        leverageInfo.slippageTolerance = isRipcord \\n            ? myStrategy.ripcordSettings.ripcordSlippageTolerance \\n            : myStrategy.execution.slippageTolerance;\\n\\n        uint256 exchanNameLengh = _exchangeNames.length;\\n        sizes = new uint256[](exchanNameLengh);\\n        for (uint256 i; i < exchanNameLengh;) {\\n            leverageInfo.exchangeName = _exchangeNames[i];\\n\\n            leverageInfo.twapMaxTradeSize = isRipcord ?\\n                myStrategy.exchangeSettings[_exchangeNames[i]].ripcordTwapMaxTradeSize \\n                : myStrategy.exchangeSettings[_exchangeNames[i]].twapMaxTradeSize;\\n\\n            (uint256 collateralNotional, ) = _calculateChunkRebalanceNotional(leverageInfo, newLeverageRatio, isLever);\\n\\n            // _calculateBorrowUnits can convert both unit and notional values\\n            sizes[i] = isLever ? _calculateBorrowUnits(collateralNotional, leverageInfo.action) : collateralNotional;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        (\\n            address[] memory collaterals,\\n            address[] memory borrows\\n        ) = LEVERAGE_MODULE.getEnabledAssets(leverageInfo.setToken);\\n\\n        sellAsset = isLever ? borrows[0] : collaterals[0];\\n        buyAsset = isLever ? collaterals[0] : borrows[0];\\n    }\\n\\n    /**\\n     * Helper that checks if conditions are met for rebalance or ripcord.\\n     * Returns an enum with 0 = no rebalance, 1 = call rebalance(), 2 = call iterateRebalance() 3 = call ripcord()\\n     *\\n     *\\n     * @return (string[] memory, ShouldRebalance[] memory)      List of exchanges & list of enums with rebalance state\\n     */\\n    function shouldRebalance(\\n        ISetToken _setToken\\n    ) external view returns(string[] memory, ShouldRebalance[] memory) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        return _shouldRebalance(\\n            _setToken,\\n            getCurrentLeverageRatio(_setToken),\\n            myStrategy.methodology.minLeverageRatio,\\n            myStrategy.methodology.maxLeverageRatio\\n        );\\n    }\\n\\n    /**\\n     * Helper that checks if conditions are met for rebalance or ripcord with custom offchain prices\\n     * specified by the caller.\\n     * Returns an enum with 0 = no rebalance, 1 = call rebalance(), 2 = call iterateRebalance() 3 = call ripcord()\\n     *\\n     * @param _setToken                     SetToken to check rebalance state from\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     *\\n     * @return (string[] memory, ShouldRebalance[] memory)      List of exchanges & list of enums with rebalance state\\n     */\\n    function shouldRebalance(\\n        ISetToken _setToken,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    ) external view returns(string[] memory, ShouldRebalance[] memory) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        return _shouldRebalance(\\n            _setToken,\\n            getCurrentLeverageRatio(_setToken, _offchainCollateralPrice, _offchainBorrowPrice),\\n            myStrategy.methodology.minLeverageRatio,\\n            myStrategy.methodology.maxLeverageRatio\\n        );\\n    }\\n\\n    /**\\n     * Helper that checks if conditions are met for rebalance or ripcord with custom max and min bounds specified\\n     * by caller. This function simplifies the logic for off-chain keeper bots to determine what threshold to call\\n     * rebalance when leverage exceeds max or drops below min.\\n     * Returns an enum with 0 = no rebalance, 1 = call rebalance(), 2 = call iterateRebalance(), 3 = call ripcord()\\n     *\\n     * @param _customMinLeverageRatio       Min leverage ratio passed in by caller\\n     * @param _customMaxLeverageRatio       Max leverage ratio passed in by caller\\n     *\\n     * @return (string[] memory, ShouldRebalance[] memory)      List of exchanges & list of enums with rebalance state\\n     */\\n    function shouldRebalanceWithBounds(\\n        ISetToken _setToken,\\n        uint256 _customMinLeverageRatio,\\n        uint256 _customMaxLeverageRatio\\n    )\\n        external\\n        view\\n        returns(string[] memory, ShouldRebalance[] memory)\\n    {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        if (\\n            _customMinLeverageRatio > myStrategy.methodology.minLeverageRatio\\n            || _customMaxLeverageRatio < myStrategy.methodology.maxLeverageRatio\\n        )\\n            revert AaveLeverageStrategyExtension__LeverageBoundsInvalid(\\n                _customMinLeverageRatio,\\n                myStrategy.methodology.minLeverageRatio,\\n                _customMaxLeverageRatio,\\n                myStrategy.methodology.maxLeverageRatio\\n            );\\n\\n        return _shouldRebalance(\\n            _setToken,\\n            getCurrentLeverageRatio(_setToken),\\n            _customMinLeverageRatio,\\n            _customMaxLeverageRatio\\n        );\\n    }\\n\\n    /**\\n     * Helper that checks if conditions are met for rebalance or ripcord with custom max and min bounds, and offchain\\n     * prices specified by caller. This function simplifies the logic for off-chain keeper bots to determine what \\n     * threshold to call rebalance when leverage exceeds max or drops below min.\\n     * Returns an enum with 0 = no rebalance, 1 = call rebalance(), 2 = call iterateRebalance(), 3 = call ripcord()\\n     *\\n     * @param _customMinLeverageRatio       Min leverage ratio passed in by caller\\n     * @param _customMaxLeverageRatio       Max leverage ratio passed in by caller\\n     * @param _offchainCollateralPrice      Offchain collateral price\\n     * @param _offchainBorrowPrice          Offchain borrow price\\n     *\\n     * @return (string[] memory, ShouldRebalance[] memory)      List of exchanges & list of enums with rebalance state\\n     */\\n    function shouldRebalanceWithBounds(\\n        ISetToken _setToken,\\n        uint256 _customMinLeverageRatio,\\n        uint256 _customMaxLeverageRatio,\\n        uint256 _offchainCollateralPrice,\\n        uint256 _offchainBorrowPrice\\n    ) external view returns(string[] memory, ShouldRebalance[] memory) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        if (\\n            _customMinLeverageRatio > myStrategy.methodology.minLeverageRatio\\n            || _customMaxLeverageRatio < myStrategy.methodology.maxLeverageRatio\\n        )\\n            revert AaveLeverageStrategyExtension__LeverageBoundsInvalid(\\n                _customMinLeverageRatio,\\n                myStrategy.methodology.minLeverageRatio,\\n                _customMaxLeverageRatio,\\n                myStrategy.methodology.maxLeverageRatio\\n            );\\n\\n        return _shouldRebalance(\\n            _setToken,\\n            getCurrentLeverageRatio(_setToken, _offchainCollateralPrice, _offchainBorrowPrice),\\n            _customMinLeverageRatio,\\n            _customMaxLeverageRatio\\n        );\\n    }\\n\\n    /**\\n     * Gets the list of enabled exchanges\\n     *\\n     * @param _setToken     SetToken to get enable exchange\\n     */\\n    function getEnabledExchanges(\\n        ISetToken _setToken\\n    ) external view returns (string[] memory) {\\n        return strategy[_setToken].enabledExchanges;\\n    }\\n\\n    function getMethodology(\\n        ISetToken _setToken\\n    ) external view returns (MethodologySettings memory) { return strategy[_setToken].methodology; }\\n    function getExecution(\\n        ISetToken _setToken\\n    ) external view returns (ExecutionSettings memory) { return strategy[_setToken].execution; }\\n    function getRipcordSettings(\\n        ISetToken _setToken\\n    ) external view returns (RipcordSettings memory) { return strategy[_setToken].ripcordSettings; }\\n    function getExchangeSettings(\\n        ISetToken _setToken,\\n        string calldata _exchangeName\\n    ) external view returns (ExchangeSettings memory) {\\n        return strategy[_setToken].exchangeSettings[_exchangeName];\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Internal function to initialize IssuanceModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _setToken                     Instance of the SetToken corresponding to the DelegatedManager\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize the TradeModule for\\n     */\\n    function _initializeModule(\\n        ISetToken _setToken,\\n        IDelegatedManager _delegatedManager,\\n        address[] memory _collateralAssets,\\n        address[] memory _borrowAssets\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"initialize(address,address[],address[])\\\",\\n            _setToken,\\n            _collateralAssets,\\n            _borrowAssets\\n        );\\n        _invokeManager(_delegatedManager, address(LEVERAGE_MODULE), callData);\\n    }\\n\\n    /**\\n     * Calculate notional rebalance quantity, whether to chunk rebalance based on max trade size and max borrow\\n     * and invoke lever on AaveLeverageModule\\n     */\\n    function _lever(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _chunkRebalanceNotional\\n    )\\n        internal\\n    {\\n        uint256 collateralRebalanceUnits = _chunkRebalanceNotional.preciseDiv(_leverageInfo.action.setTotalSupply);\\n\\n        (\\n            address[] memory collaterals,\\n            address[] memory borrows\\n        ) = LEVERAGE_MODULE.getEnabledAssets(_leverageInfo.setToken);\\n\\n        bytes memory leverCallData = abi.encodeWithSignature(\\n            \\\"lever(address,address,address,uint256,uint256,string,bytes)\\\",\\n            address(_leverageInfo.setToken),\\n            borrows[0],\\n            collaterals[0],\\n            _calculateBorrowUnits(collateralRebalanceUnits, _leverageInfo.action),\\n            _calculateMinCollateralReceiveUnits(collateralRebalanceUnits, _leverageInfo.slippageTolerance),\\n            _leverageInfo.exchangeName,\\n            strategy[_leverageInfo.setToken].exchangeSettings[_leverageInfo.exchangeName].leverExchangeData\\n        );\\n\\n        _invokeManager(_manager(_leverageInfo.setToken), address(LEVERAGE_MODULE), leverCallData);\\n    }\\n\\n    /**\\n     * Calculate delever units Invoke delever on AaveLeverageModule.\\n     */\\n    function _delever(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _chunkRebalanceNotional\\n    )\\n        internal\\n    {\\n        uint256 collateralRebalanceUnits = _chunkRebalanceNotional.preciseDiv(_leverageInfo.action.setTotalSupply);\\n\\n        (\\n            address[] memory collaterals,\\n            address[] memory borrows\\n        ) = LEVERAGE_MODULE.getEnabledAssets(_leverageInfo.setToken);\\n\\n        bytes memory deleverCallData = abi.encodeWithSignature(\\n            \\\"delever(address,address,address,uint256,uint256,string,bytes)\\\",\\n            address(_leverageInfo.setToken),\\n            collaterals[0],\\n            borrows[0],\\n            collateralRebalanceUnits,\\n            _calculateMinRepayUnits(collateralRebalanceUnits, _leverageInfo.slippageTolerance, _leverageInfo.action),\\n            _leverageInfo.exchangeName,\\n            strategy[_leverageInfo.setToken].exchangeSettings[_leverageInfo.exchangeName].deleverExchangeData);\\n\\n        _invokeManager(_manager(_leverageInfo.setToken), address(LEVERAGE_MODULE), deleverCallData);\\n    }\\n\\n    /**\\n     * Invoke deleverToZeroBorrowBalance on AaveLeverageModule.\\n     */\\n    function _deleverToZeroBorrowBalance(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _chunkRebalanceNotional\\n    )\\n        internal\\n    {\\n        StrategySettings storage myStrategy = strategy[_leverageInfo.setToken];\\n\\n        // Account for slippage tolerance in redeem quantity for the deleverToZeroBorrowBalance function\\n        uint256 maxCollateralRebalanceUnits = _chunkRebalanceNotional\\n            .preciseMul(PreciseUnitMath.preciseUnit() + myStrategy.execution.slippageTolerance)\\n            .preciseDiv(_leverageInfo.action.setTotalSupply);\\n\\n        (\\n            address[] memory collaterals,\\n            address[] memory borrows\\n        ) = LEVERAGE_MODULE.getEnabledAssets(_leverageInfo.setToken);\\n\\n        bytes memory deleverToZeroBorrowBalanceCallData = abi.encodeWithSignature(\\n            \\\"deleverToZeroBorrowBalance(address,address,address,uint256,string,bytes)\\\",\\n            address(_leverageInfo.setToken),\\n            collaterals[0],\\n            borrows[0],\\n            maxCollateralRebalanceUnits,\\n            _leverageInfo.exchangeName,\\n            myStrategy.exchangeSettings[_leverageInfo.exchangeName].deleverExchangeData\\n        );\\n\\n        _invokeManager(_manager(_leverageInfo.setToken), address(LEVERAGE_MODULE), deleverToZeroBorrowBalanceCallData);\\n    }\\n\\n    /**\\n     * Check whether to delever or lever based on the current vs new leverage ratios.\\n     * Used in the rebalance() and iterateRebalance() functions\\n     *\\n     * return uint256           Calculated notional to trade\\n     * return uint256           Total notional to rebalance over TWAP\\n     */\\n    function _handleRebalance(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _newLeverageRatio\\n    ) internal returns(uint256, uint256) {\\n        uint256 chunkRebalanceNotional;\\n        uint256 totalRebalanceNotional;\\n        if (_newLeverageRatio < _leverageInfo.currentLeverageRatio) {\\n            (\\n                chunkRebalanceNotional,\\n                totalRebalanceNotional\\n            ) = _calculateChunkRebalanceNotional(_leverageInfo, _newLeverageRatio, false);\\n\\n            _delever(_leverageInfo, chunkRebalanceNotional);\\n        } else {\\n            (\\n                chunkRebalanceNotional,\\n                totalRebalanceNotional\\n            ) = _calculateChunkRebalanceNotional(_leverageInfo, _newLeverageRatio, true);\\n\\n            _lever(_leverageInfo, chunkRebalanceNotional);\\n        }\\n\\n        return (chunkRebalanceNotional, totalRebalanceNotional);\\n    }\\n\\n    /**\\n     * Create the leverage info struct to be used in internal functions\\n     *\\n     * return LeverageInfo                Struct containing ActionInfo and other data\\n     */\\n    function _getAndValidateLeveragedInfo(\\n        ISetToken _setToken,\\n        uint256 _slippageTolerance,\\n        uint256 _maxTradeSize,\\n        string calldata _exchangeName,\\n        uint256 _collateralPrice,\\n        uint256 _borrowPrice\\n    ) internal view returns(LeverageInfo memory) {\\n        // Assume if maxTradeSize is 0, then the exchange is not enabled.\\n        // This is enforced by addEnabledExchange and updateEnabledExchange\\n        if (_maxTradeSize == 0) revert AaveLeverageStrategyExtension__ExchangeInvalid();\\n\\n        ActionInfo memory actionInfo = _createActionInfo(_setToken, _collateralPrice, _borrowPrice);\\n\\n        if (actionInfo.setTotalSupply == 0)\\n            revert AaveLeverageStrategyExtension__ZeroTotalSupply(); // SetToken must have > 0 supply\\n        if (actionInfo.collateralBalance == 0)\\n            revert AaveLeverageStrategyExtension__ZeroCollateralBalance(); // Collateral balance must be > 0\\n        if (actionInfo.borrowBalance == 0)\\n            revert AaveLeverageStrategyExtension__ZeroBorrowBalance(); // Borrow balance must exist\\n\\n        return LeverageInfo({\\n            setToken: _setToken,\\n            action: actionInfo,\\n            currentLeverageRatio: _calculateCurrentLeverageRatio(\\n                actionInfo.collateralValue,\\n                actionInfo.borrowValue\\n            ),\\n            slippageTolerance: _slippageTolerance,\\n            twapMaxTradeSize: _maxTradeSize,\\n            exchangeName: _exchangeName\\n        });\\n    }\\n\\n    /**\\n     * Retrieve constituent prices from Chainlink oracle\\n     *\\n     * @return collateralPrice      Collateral asset price\\n     * @return borrowPrice          Borrow asset price\\n     */\\n    function _getChainlinkPrices(\\n        ISetToken _setToken\\n    )\\n        internal\\n        view\\n        returns (uint256 collateralPrice ,uint256 borrowPrice)\\n    {\\n        return (\\n            strategy[_setToken].collateralPriceOracle.latestAnswer().toUint256(),\\n            strategy[_setToken].borrowPriceOracle.latestAnswer().toUint256()\\n        );\\n    }\\n\\n    /**\\n     * Create the action info struct to be used in internal functions\\n     *\\n     * return ActionInfo                Struct containing data used by internal lever and delever functions\\n     */\\n    function _createActionInfo(\\n        ISetToken _setToken,\\n        uint256 _collateralPrice,\\n        uint256 _borrowPrice\\n    ) internal view virtual returns(ActionInfo memory) {\\n        ActionInfo memory rebalanceInfo;\\n\\n        (address[] memory collaterals, address[] memory borrows) = LEVERAGE_MODULE.getEnabledAssets(_setToken);\\n\\n        (address aToken, ,) = LEVERAGE_MODULE.PROTOCOL_DATA_PROVIDER().getReserveTokensAddresses(collaterals[0]);\\n        (\\n            ,\\n            ,\\n            address variableDebtToken\\n        ) = LEVERAGE_MODULE.PROTOCOL_DATA_PROVIDER().getReserveTokensAddresses(borrows[0]);\\n\\n        // Calculate prices from chainlink. Chainlink returns prices with 8 decimal places, but we need\\n        // 36 - underlyingDecimals decimal places. This is so that when the underlying amount is multiplied\\n        // by the received price, the collateral valuation is normalized to 36 decimals.\\n        // To perform this adjustment, we multiply by 10^(36 - 8 - underlyingDecimals)\\n        rebalanceInfo.collateralPrice = _collateralPrice * (10 ** strategy[_setToken].collateralDecimalAdjustment);\\n        rebalanceInfo.borrowPrice = _borrowPrice * (10 ** strategy[_setToken].borrowDecimalAdjustment);\\n        rebalanceInfo.collateralBalance = IERC20(aToken).balanceOf(address(_setToken));\\n        rebalanceInfo.borrowBalance = IERC20(variableDebtToken).balanceOf(address(_setToken));\\n        rebalanceInfo.collateralValue = rebalanceInfo.collateralPrice.preciseMul(rebalanceInfo.collateralBalance);\\n        rebalanceInfo.borrowValue = rebalanceInfo.borrowPrice.preciseMul(rebalanceInfo.borrowBalance);\\n        rebalanceInfo.setTotalSupply = _setToken.totalSupply();\\n\\n        return rebalanceInfo;\\n    }\\n\\n    /**\\n     * Validate non-exchange settings in constructor and setters when updating.\\n     */\\n    function _validateNonExchangeSettings(\\n        MethodologySettings memory _methodology,\\n        ExecutionSettings memory _execution,\\n        RipcordSettings memory _ripcordSettings\\n    \\n    ) internal virtual view {\\n        uint256 minLeverageRatio = _methodology.minLeverageRatio;\\n        uint256 targetLeverageRatio = _methodology.targetLeverageRatio;\\n        if (minLeverageRatio > targetLeverageRatio || minLeverageRatio == 0) // TODO: Separate error\\n            revert AaveLeverageStrategyExtension__MinLeverageInvalid(minLeverageRatio, targetLeverageRatio);\\n        \\n        uint256 maxLeverageRatio = _methodology.maxLeverageRatio;\\n        if (maxLeverageRatio < targetLeverageRatio)\\n            revert AaveLeverageStrategyExtension__MaxLeverageInvalid(maxLeverageRatio, targetLeverageRatio);\\n        \\n        uint256 ripcordLeverageRatio = _ripcordSettings.ripcordLeverageRatio;\\n        if (ripcordLeverageRatio < maxLeverageRatio)\\n            revert AaveLeverageStrategyExtension__RipcordLeverageInvalid(ripcordLeverageRatio, maxLeverageRatio);\\n        \\n        uint256 rebalanceInterval = _methodology.rebalanceInterval;\\n        uint256 twapCooldownPeriod = _execution.twapCooldownPeriod;\\n        if (rebalanceInterval < twapCooldownPeriod)\\n            revert AaveLeverageStrategyExtension__RebalanceIntervalInvalid(rebalanceInterval, twapCooldownPeriod);\\n        \\n        uint256 ripcordTwapCooldownPeriod = _ripcordSettings.ripcordTwapCooldownPeriod;\\n        if (twapCooldownPeriod < ripcordTwapCooldownPeriod)\\n            revert AaveLeverageStrategyExtension__TwapCooldownInvalid(twapCooldownPeriod, ripcordTwapCooldownPeriod);\\n        \\n        uint256 preciseUnit = PreciseUnitMath.preciseUnit();\\n        if (_execution.unutilizedLeveragePercentage > preciseUnit)\\n            revert AaveLeverageStrategyExtension__Over100Unutilized();\\n        if (_execution.slippageTolerance > preciseUnit)\\n            revert AaveLeverageStrategyExtension__Over100SlippageTolerance();\\n        if (_ripcordSettings.ripcordSlippageTolerance > preciseUnit)\\n            revert AaveLeverageStrategyExtension__Over100RipcordSlippageTolerance();\\n\\n        uint256 recenteringSpeed = _methodology.recenteringSpeed;\\n        if (recenteringSpeed > preciseUnit || recenteringSpeed == 0) // TODO: Separate error\\n            revert AaveLeverageStrategyExtension__Over100RecenteringSpeed();\\n    }\\n\\n    /**\\n     * Validate an ExchangeSettings struct when adding or updating an exchange. Does not validate that\\n     * twapMaxTradeSize < ripcordMaxTradeSize since it may be useful to disable exchanges for ripcord\\n     * by setting ripcordMaxTradeSize to 0.\\n     */\\n     function _validateExchangeSettings(\\n        ExchangeSettings calldata _settings\\n    ) internal pure {\\n        if (_settings.twapMaxTradeSize == 0) revert AaveLeverageStrategyExtension__ZeroTwapMaxTradeSize();\\n     }\\n\\n    /**\\n     * Validate that current leverage is below ripcord leverage ratio and cooldown / rebalance period\\n     * has elapsed or outsize max/min bounds. Used in rebalance() and iterateRebalance() functions\\n     */\\n    function _validateNormalRebalance(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _coolDown,\\n        uint256 _lastTradeTimestamp\\n    ) internal view {\\n        uint256 ripcordLeverageRatio = strategy[_leverageInfo.setToken].ripcordSettings.ripcordLeverageRatio;\\n        if (_leverageInfo.currentLeverageRatio >= ripcordLeverageRatio)\\n            revert AaveLeverageStrategyExtension__RipcordLeverageExceeded(\\n                _leverageInfo.currentLeverageRatio,\\n                ripcordLeverageRatio\\n            );\\n        /* solhint-disable-next-line not-rely-on-time */\\n        uint256 currentPeriod = block.timestamp - _lastTradeTimestamp;\\n        uint256 minLeverageRatio = strategy[_leverageInfo.setToken].methodology.minLeverageRatio;\\n        uint256 maxLeverageRatio = strategy[_leverageInfo.setToken].methodology.maxLeverageRatio;\\n        if (currentPeriod <= _coolDown) {\\n            if (_leverageInfo.currentLeverageRatio <= maxLeverageRatio) {\\n                if (_leverageInfo.currentLeverageRatio >= minLeverageRatio) {\\n                    revert AaveLeverageStrategyExtension__CooldownNotElapsedANDLeverageRatioInvalid(\\n                        currentPeriod,\\n                        _coolDown,\\n                        _leverageInfo.currentLeverageRatio,\\n                        minLeverageRatio,\\n                        maxLeverageRatio\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Validate that current leverage is above ripcord leverage ratio and ripcord cooldown period\\n     * has elapsed in ripcord()\\n     */\\n    function _validateRipcord(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _lastTradeTimestamp\\n    ) internal view {\\n        StrategySettings storage myStrategy = strategy[_leverageInfo.setToken];\\n        uint256 ripcordLeverageRatio = myStrategy.ripcordSettings.ripcordLeverageRatio;\\n\\n        if (_leverageInfo.currentLeverageRatio < ripcordLeverageRatio)\\n            revert AaveLeverageStrategyExtension__RipcordLeverageInsufficient(\\n                _leverageInfo.currentLeverageRatio,\\n                ripcordLeverageRatio\\n            );\\n\\n        // If currently in the midst of a TWAP rebalance, ensure that the cooldown period has elapsed\\n        uint256 coolDown = _lastTradeTimestamp + myStrategy.ripcordSettings.ripcordTwapCooldownPeriod;\\n        if (coolDown >= block.timestamp) /* solhint-disable-line not-rely-on-time */\\n            revert AaveLeverageStrategyExtension__TwapCooldownNotElapsed(\\n                block.timestamp, /* solhint-disable-line not-rely-on-time */\\n                coolDown\\n            );\\n    }\\n\\n    /**\\n     * Validate TWAP in the iterateRebalance() function\\n     */\\n    function _validateTWAP(\\n        ISetToken _setToken\\n    ) internal view {\\n        if (strategy[_setToken].twapLeverageRatio == 0)\\n            revert AaveLeverageStrategyExtension__NotInTwap();\\n    }\\n\\n    /**\\n     * Validate not TWAP in the rebalance() function\\n     */\\n    function _validateNonTWAP(\\n        ISetToken _setToken\\n    ) internal view {\\n        if (strategy[_setToken].twapLeverageRatio != 0)\\n            revert AaveLeverageStrategyExtension__MustCallIterate();\\n    }\\n\\n    /**\\n     * Check if price has moved advantageously while in the midst of the TWAP rebalance. This means the\\n     * current leverage ratio has moved over/under the stored TWAP leverage ratio on lever/delever so there\\n     * is no need to execute a rebalance. Used in iterateRebalance()\\n     */\\n    function _isAdvantageousTWAP(\\n        ISetToken _setToken,\\n        uint256 _currentLeverageRatio\\n    ) internal view returns (bool) {\\n        uint256 twapLeverageRatio = strategy[_setToken].twapLeverageRatio;\\n        uint256 targetLeverageRatio = strategy[_setToken].methodology.targetLeverageRatio;\\n\\n        return (\\n            (twapLeverageRatio < targetLeverageRatio && _currentLeverageRatio >= twapLeverageRatio)\\n            || (twapLeverageRatio > targetLeverageRatio && _currentLeverageRatio <= twapLeverageRatio)\\n        );\\n    }\\n\\n    /**\\n     * Calculate the current leverage ratio given a valuation of the collateral and borrow asset,\\n     * which is calculated as collateral USD valuation / SetToken USD valuation\\n     *\\n     * return uint256            Current leverage ratio\\n     */\\n    function _calculateCurrentLeverageRatio(\\n        uint256 _collateralValue,\\n        uint256 _borrowValue\\n    )\\n        internal\\n        pure\\n        returns(uint256)\\n    {\\n        if (_collateralValue <= _borrowValue) {\\n            return type(uint256).max;\\n        }\\n        return _collateralValue.preciseDiv(_collateralValue - _borrowValue);\\n    }\\n\\n    /**\\n     * Calculate the new leverage ratio. The methodology reduces the size of each rebalance by weighting\\n     * the current leverage ratio against the target leverage ratio by the recentering speed percentage.\\n     * The lower the recentering speed, the slower the leverage token will move towards the target leverage\\n     * each rebalance.\\n     *\\n     * return uint256          New leverage ratio\\n     */\\n    function _calculateNewLeverageRatio(\\n        ISetToken _setToken,\\n        uint256 _currentLeverageRatio\\n    ) internal view returns(uint256) {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n        uint256 recenteringSpeed = myStrategy.methodology.recenteringSpeed;\\n\\n        // CLRt+1 = max(MINLR, min(MAXLR, CLRt * (1 - RS) + TLR * RS))\\n        // a: TLR * RS\\n        // b: (1- RS) * CLRt\\n        // c: (1- RS) * CLRt + TLR * RS\\n        // d: min(MAXLR, CLRt * (1 - RS) + TLR * RS)\\n        uint256 a = myStrategy.methodology.targetLeverageRatio.preciseMul(recenteringSpeed);\\n        uint256 b = (PreciseUnitMath.preciseUnit() - recenteringSpeed).preciseMul(_currentLeverageRatio);\\n        uint256 c = a + b;\\n        uint256 d = Math.min(c, myStrategy.methodology.maxLeverageRatio);\\n        return Math.max(myStrategy.methodology.minLeverageRatio, d);\\n    }\\n\\n    /**\\n     * Calculate total notional rebalance quantity and chunked rebalance quantity in collateral units.\\n     *\\n     * return uint256          Chunked rebalance notional in collateral units\\n     * return uint256          Total rebalance notional in collateral units\\n     */\\n    function _calculateChunkRebalanceNotional(\\n        LeverageInfo memory _leverageInfo,\\n        uint256 _newLeverageRatio,\\n        bool _isLever\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (uint256, uint256)\\n    {\\n        uint256 currentLeverageRatio = _leverageInfo.currentLeverageRatio;\\n\\n        // Calculate absolute value of difference between new and current leverage ratio\\n        uint256 leverageRatioDifference = _isLever\\n            ? _newLeverageRatio - currentLeverageRatio\\n            : currentLeverageRatio - _newLeverageRatio;\\n\\n        uint256 totalRebalanceNotional = leverageRatioDifference\\n            .preciseMul(_leverageInfo.action.collateralBalance)\\n            .preciseDiv(currentLeverageRatio);\\n\\n        (,,uint256 availableBorrowsETH,,,) = ILendingPool(\\n                ILendingPoolAddressesProvider(\\n                    LEVERAGE_MODULE.LENDING_POOL_ADDRESSES_PROVIDER()\\n                ).getLendingPool()\\n            ).getUserAccountData(address(_leverageInfo.setToken));\\n\\n        uint256 maxBorrow = _calculateMaxBorrowCollateral(_leverageInfo.setToken, _leverageInfo.action, _isLever);\\n\\n        uint256 chunkRebalanceNotional = Math.min(\\n            Math.min(\\n                Math.min(availableBorrowsETH, maxBorrow)\\n                , totalRebalanceNotional\\n            ),\\n            _leverageInfo.twapMaxTradeSize\\n        );\\n\\n        return (chunkRebalanceNotional, totalRebalanceNotional);\\n    }\\n\\n    /**\\n     * Calculate the max borrow / repay amount allowed in base units for lever / delever.\\n     * This is due to overcollateralization requirements on assets deposited in lending protocols for borrowing.\\n     *\\n     * For lever, max borrow is calculated as:\\n     * (Net borrow limit in USD - existing borrow value in USD) / collateral asset price adjusted for decimals\\n     *\\n     * For delever, max repay is calculated as:\\n     * Collateral balance in base units\\n     *          * (net borrow limit in USD - existing borrow value in USD)\\n     *          / net borrow limit in USD\\n     *\\n     * Net borrow limit for levering is calculated as:\\n     * The collateral value in USD * Aave collateral factor * (1 - unutilized leverage %)\\n     *\\n     * Net repay limit for delevering is calculated as:\\n     * The collateral value in USD * Aave liquiditon threshold * (1 - unutilized leverage %)\\n     *\\n     * return uint256          Max borrow notional denominated in collateral asset\\n     */\\n    function _calculateMaxBorrowCollateral(\\n        ISetToken _setToken,\\n        ActionInfo memory _actionInfo,\\n        bool _isLever\\n    ) internal virtual view returns(uint256) {\\n        uint256 unutilizedLeveragePercentage = strategy[_setToken].execution.unutilizedLeveragePercentage;\\n        \\n        (address[] memory collaterals, ) = LEVERAGE_MODULE.getEnabledAssets(_setToken);\\n\\n        // Retrieve collateral factor and liquidation threshold for the collateral asset in precise units (1e16 = 1%)\\n        (\\n            ,\\n            uint256 maxLtvRaw,\\n            uint256 liquidationThresholdRaw,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n        ) = LEVERAGE_MODULE.PROTOCOL_DATA_PROVIDER().getReserveConfigurationData(collaterals[0]);\\n\\n        // Normalize LTV and liquidation threshold to precise units.\\n        // LTV is measured in 4 decimals in Aave which is why we must multiply by 1e14\\n        // for example ETH has an LTV value of 8000 which represents 80%\\n        if (_isLever) {\\n            uint256 netBorrowLimit = _actionInfo.collateralValue\\n                .preciseMul(maxLtvRaw * (10 ** 14))\\n                .preciseMul(PreciseUnitMath.preciseUnit() - unutilizedLeveragePercentage);\\n\\n            return (netBorrowLimit - _actionInfo.borrowValue)\\n                .preciseDiv(_actionInfo.collateralPrice);\\n        } else {\\n            uint256 netRepayLimit = _actionInfo.collateralValue\\n                .preciseMul(liquidationThresholdRaw * (10 ** 14))\\n                .preciseMul(PreciseUnitMath.preciseUnit() - unutilizedLeveragePercentage);\\n\\n            return _actionInfo.collateralBalance\\n                .preciseMul(netRepayLimit - _actionInfo.borrowValue)\\n                .preciseDiv(netRepayLimit);\\n        }\\n    }\\n\\n    /**\\n     * Derive the borrow units for lever. The units are calculated by the collateral units multiplied\\n     * by collateral / borrow asset price. Output is measured to borrow unit decimals.\\n     *\\n     * return uint256           Position units to borrow\\n     */\\n    function _calculateBorrowUnits(\\n        uint256 _collateralRebalanceUnits,\\n        ActionInfo memory _actionInfo\\n    ) internal pure returns (uint256) {\\n        return _collateralRebalanceUnits\\n            .preciseMul(_actionInfo.collateralPrice)\\n            .preciseDiv(_actionInfo.borrowPrice);\\n    }\\n\\n    /**\\n     * Calculate the min receive units in collateral units for lever. Units are calculated as target\\n     * collateral rebalance units multiplied by slippage tolerance Output is measured in collateral asset decimals.\\n     *\\n     * return uint256           Min position units to receive after lever trade\\n     */\\n    function _calculateMinCollateralReceiveUnits(\\n        uint256 _collateralRebalanceUnits,\\n        uint256 _slippageTolerance\\n    ) internal pure returns (uint256) {\\n        return _collateralRebalanceUnits\\n            .preciseMul(PreciseUnitMath.preciseUnit() - _slippageTolerance);\\n    }\\n\\n    /**\\n     * Derive the min repay units from collateral units for delever. Units are calculated as target collateral\\n     * rebalance units multiplied by slippage tolerance and pair price (collateral oracle price / borrow oracle price).\\n     * Output is measured in borrow unit decimals.\\n     *\\n     * return uint256           Min position units to repay in borrow asset\\n     */\\n    function _calculateMinRepayUnits(\\n        uint256 _collateralRebalanceUnits,\\n        uint256 _slippageTolerance,\\n        ActionInfo memory _actionInfo\\n    ) internal virtual pure returns (uint256) {\\n        return _collateralRebalanceUnits\\n            .preciseMul(_actionInfo.collateralPrice)\\n            .preciseMul(PreciseUnitMath.preciseUnit() - _slippageTolerance)\\n            .preciseDiv(_actionInfo.borrowPrice);\\n    }\\n\\n    /**\\n     * Update last trade timestamp and if chunk rebalance size is less than total rebalance notional,\\n     * store new leverage ratio to kick off TWAP. Used in the engage() and rebalance() functions\\n     */\\n    function _updateRebalanceState(\\n        ISetToken _setToken,\\n        uint256 _chunkRebalanceNotional,\\n        uint256 _totalRebalanceNotional,\\n        uint256 _newLeverageRatio,\\n        string calldata _exchangeName\\n    )\\n        internal\\n    {\\n        _updateLastTradeTimestamp(_setToken, _exchangeName);\\n\\n        if (_chunkRebalanceNotional < _totalRebalanceNotional) {\\n            strategy[_setToken].twapLeverageRatio = _newLeverageRatio;\\n        }\\n    }\\n\\n    /**\\n     * Update last trade timestamp and if chunk rebalance size is equal to the total rebalance notional,\\n     * *end TWAP by clearing state. This function is used in iterateRebalance()\\n     */\\n    function _updateIterateState(\\n        ISetToken _setToken,\\n        uint256 _chunkRebalanceNotional,\\n        uint256 _totalRebalanceNotional,\\n        string calldata _exchangeName\\n    ) internal {\\n        _updateLastTradeTimestamp(_setToken, _exchangeName);\\n\\n        // If the chunk size is equal to the total notional meaning that rebalances are not chunked,\\n        // then clear TWAP state.\\n        if (_chunkRebalanceNotional == _totalRebalanceNotional) {\\n            delete strategy[_setToken].twapLeverageRatio;\\n        }\\n    }\\n\\n    /**\\n     * Update last trade timestamp and if currently in a TWAP, delete the TWAP state. Used in the ripcord() function.\\n     */\\n    function _updateRipcordState(\\n        ISetToken _setToken,\\n        string calldata _exchangeName\\n    ) internal {\\n        _updateLastTradeTimestamp(_setToken, _exchangeName);\\n\\n        // If TWAP leverage ratio is stored, then clear state. This may happen if we are currently in a TWAP rebalance,\\n        // and the leverage ratio moves above the ripcord threshold for ripcord.\\n        if (strategy[_setToken].twapLeverageRatio > 0)\\n            delete strategy[_setToken].twapLeverageRatio;\\n    }\\n\\n    /**\\n     * Update globalLastTradeTimestamp and exchangeLastTradeTimestamp values. This function updates both the\\n     * exchange-specific and global timestamp so that the epoch rebalance can use the global timestamp (since the global\\n     * timestamp is always equal to the most recently used exchange timestamp). This allows for multiple rebalances to\\n     * occur simultaneously since only the exchange-specific timestamp is checked for non-epoch rebalances.\\n     */\\n    function _updateLastTradeTimestamp(\\n        ISetToken _setToken,\\n        string calldata _exchangeName\\n    ) internal {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        myStrategy.globalLastTradeTimestamp =\\n            /* solhint-disable-next-line not-rely-on-time */\\n            myStrategy.exchangeSettings[_exchangeName].exchangeLastTradeTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * Internal function returning the ShouldRebalance enum used in shouldRebalance and shouldRebalanceWithBounds\\n     * external getter functions\\n     *\\n     * return ShouldRebalance         Enum detailing whether to rebalance, iterateRebalance, ripcord or no action\\n     */\\n    function _shouldRebalance(\\n        ISetToken _setToken,\\n        uint256 _currentLeverageRatio,\\n        uint256 _minLeverageRatio,\\n        uint256 _maxLeverageRatio\\n    )\\n        internal\\n        view\\n        returns(string[] memory, ShouldRebalance[] memory)\\n    {\\n        StrategySettings storage myStrategy = strategy[_setToken];\\n\\n        uint256 enabledExchangesLen = myStrategy.enabledExchanges.length;\\n        uint256 exchangeLastTradeTimestamp;\\n\\n        ShouldRebalance[] memory shouldRebalanceEnums = new ShouldRebalance[](enabledExchangesLen);\\n\\n        for (uint256 i; i < enabledExchangesLen;) {\\n            exchangeLastTradeTimestamp =\\n                myStrategy.exchangeSettings[myStrategy.enabledExchanges[i]].exchangeLastTradeTimestamp;\\n            if (\\n                // If above ripcord threshold, then check if ripcord cooldown period has elapsed\\n                _currentLeverageRatio >= myStrategy.ripcordSettings.ripcordLeverageRatio\\n            ) {\\n                if (\\n                    exchangeLastTradeTimestamp + myStrategy.ripcordSettings.ripcordTwapCooldownPeriod\\n                    < block.timestamp /* solhint-disable-line not-rely-on-time */\\n                ) {\\n                    shouldRebalanceEnums[i] = ShouldRebalance.RIPCORD;\\n                }\\n            } else if (\\n                // If TWAP, then check if the cooldown period has elapsed\\n                myStrategy.twapLeverageRatio != 0\\n            ) {\\n                if (\\n                    exchangeLastTradeTimestamp + myStrategy.execution.twapCooldownPeriod \\n                    < block.timestamp /* solhint-disable-line not-rely-on-time */\\n                ) {\\n                    shouldRebalanceEnums[i] = ShouldRebalance.ITERATE_REBALANCE;\\n                }\\n            } else if (\\n                // If not TWAP, then check if the rebalance interval has elapsed\\n                // OR current leverage is above max leverage\\n                // OR current leverage is below min leverage\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp - myStrategy.globalLastTradeTimestamp > myStrategy.methodology.rebalanceInterval\\n                || _currentLeverageRatio > _maxLeverageRatio\\n                || _currentLeverageRatio < _minLeverageRatio\\n            ) {\\n                shouldRebalanceEnums[i] = ShouldRebalance.REBALANCE;\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        return (myStrategy.enabledExchanges, shouldRebalanceEnums);\\n    }\\n}\"\r\n    },\r\n    \"contracts/extensions/IssuanceExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { IIssuanceModule } from \\\"@amun/amun-protocol/contracts/interfaces/IIssuanceModule.sol\\\";\\nimport { PreciseUnitMath } from \\\"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\\\";\\n\\nimport { BaseGlobalExtension } from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\n\\n/**\\n * @title IssuanceExtension\\n * @author Set Protocol\\n *\\n * Smart contract global extension which provides DelegatedManager owner and methodologist the ability\\n * to accrue and split issuance and redemption fees. Owner may configure the fee split percentages.\\n *\\n * Notes\\n * - the fee split is set on the Delegated Manager contract\\n * - when fees distributed via this contract will be inclusive of all fee types that have already been accrued\\n *\\n * CHANGELOG\\n * - 4/24/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n */\\ncontract IssuanceExtension is BaseGlobalExtension {\\n    using Address for address;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event IssuanceExtensionInitialized(\\n        address indexed _setToken,\\n        address indexed _delegatedManager\\n    );\\n\\n    event FeesDistributed(\\n        address _setToken,\\n        address indexed _ownerFeeRecipient,\\n        address indexed _methodologist,\\n        uint256 _ownerTake,\\n        uint256 _methodologistTake\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of IssuanceModule\\n    IIssuanceModule public immutable ISSUANCE_MODULE;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IManagerCore _managerCore,\\n        IIssuanceModule _issuanceModule\\n    )\\n        BaseGlobalExtension(_managerCore)\\n    {\\n        ISSUANCE_MODULE = _issuanceModule;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ANYONE CALLABLE: Distributes fees accrued to the DelegatedManager. Calculates fees for\\n     * owner and methodologist, and sends to owner fee recipient and methodologist respectively.\\n     */\\n    function distributeFees(ISetToken _setToken) external {\\n        IDelegatedManager delegatedManager = _manager(_setToken);\\n\\n        uint256 totalFees = _setToken.balanceOf(address(delegatedManager));\\n\\n        address methodologist = delegatedManager.methodologist();\\n        address ownerFeeRecipient = delegatedManager.ownerFeeRecipient();\\n\\n        uint256 ownerTake = totalFees.preciseMul(delegatedManager.ownerFeeSplit());\\n        uint256 methodologistTake = totalFees - ownerTake;\\n\\n        if (ownerTake != 0) {\\n            delegatedManager.transferTokens(address(_setToken), ownerFeeRecipient, ownerTake);\\n        }\\n\\n        if (methodologistTake != 0) {\\n            delegatedManager.transferTokens(address(_setToken), methodologist, methodologistTake);\\n        }\\n\\n        emit FeesDistributed(address(_setToken), ownerFeeRecipient, methodologist, ownerTake, methodologistTake);\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize the IssuanceModule for\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the contract with the Pre-Issuance Hook function\\n     */\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isInitializedExtension(address(this)))\\n            revert GlobalExtension__ExtensionUninitialized(address(this));\\n\\n        _initializeModule(\\n            _delegatedManager.SET_TOKEN(),\\n            _delegatedManager,\\n            _maxManagerFee,\\n            _managerIssueFee,\\n            _managerRedeemFee,\\n            _feeRecipient,\\n            _managerIssuanceHook\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceExtension to the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n\\n        emit IssuanceExtensionInitialized(address(setToken), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceExtension to the DelegatedManager and IssuanceModule\\n     * to the SetToken\\n     *\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the contract with the Pre-Issuance Hook function\\n     */\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n        _initializeModule(\\n            setToken,\\n            _delegatedManager,\\n            _maxManagerFee,\\n            _managerIssueFee,\\n            _managerRedeemFee,\\n            _feeRecipient,\\n            _managerIssuanceHook\\n        );\\n\\n        emit IssuanceExtensionInitialized(address(setToken), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Remove an existing SetToken and DelegatedManager tracked by the IssuanceExtension\\n     */\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        ISetToken setToken = delegatedManager.SET_TOKEN();\\n\\n        _removeExtension(setToken, delegatedManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates issuance fee on IssuanceModule.\\n     *\\n     * @param _setToken     Instance of the SetToken to update issue fee for\\n     * @param _newFee       New issue fee percentage in precise units (1% = 1e16, 100% = 1e18)\\n     */\\n    function updateIssueFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\\"updateIssueFee(address,uint256)\\\", _setToken, _newFee);\\n        _invokeManager(_manager(_setToken), address(ISSUANCE_MODULE), callData);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates redemption fee on IssuanceModule.\\n     *\\n     * @param _setToken     Instance of the SetToken to update redeem fee for\\n     * @param _newFee       New redeem fee percentage in precise units (1% = 1e16, 100% = 1e18)\\n     */\\n    function updateRedeemFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\\"updateRedeemFee(address,uint256)\\\", _setToken, _newFee);\\n        _invokeManager(_manager(_setToken), address(ISSUANCE_MODULE), callData);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates fee recipient on IssuanceModule\\n     *\\n     * @param _setToken         Instance of the SetToken to update fee recipient for\\n     * @param _newFeeRecipient  Address of new fee recipient. This should be the address of the DelegatedManager\\n     */\\n    function updateFeeRecipient(\\n        ISetToken _setToken,\\n        address _newFeeRecipient\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"updateFeeRecipient(address,address)\\\",\\n            _setToken,\\n            _newFeeRecipient\\n        );\\n        _invokeManager(_manager(_setToken), address(ISSUANCE_MODULE), callData);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Internal function to initialize IssuanceModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _setToken                     Instance of the SetToken corresponding to the DelegatedManager\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize the TradeModule for\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the contract with the Pre-Issuance Hook function\\n     */\\n    function _initializeModule(\\n        ISetToken _setToken,\\n        IDelegatedManager _delegatedManager,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"initialize(address,uint256,uint256,uint256,address,address)\\\",\\n            _setToken,\\n            _maxManagerFee,\\n            _managerIssueFee,\\n            _managerRedeemFee,\\n            _feeRecipient,\\n            _managerIssuanceHook\\n        );\\n        _invokeManager(_delegatedManager, address(ISSUANCE_MODULE), callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/extensions/StreamingFeeSplitExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { IStreamingFeeModule } from \\\"@amun/amun-protocol/contracts/interfaces/IStreamingFeeModule.sol\\\";\\nimport { PreciseUnitMath } from \\\"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\\\";\\n\\nimport { BaseGlobalExtension } from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\n\\n/**\\n * @title StreamingFeeSplitExtension\\n * @author Set Protocol\\n *\\n * Smart contract global extension which provides DelegatedManager owner and methodologist the ability\\n * to accrue and split streaming fees. Owner may configure the fee split percentages.\\n *\\n * Notes\\n * - the fee split is set on the Delegated Manager contract\\n * - when fees distributed via this contract will be inclusive of all fee types\\n *\\n * CHANGELOG\\n * - 4/24/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n * - 9/29/23: Updated _initializeModule function signature\\n */\\ncontract StreamingFeeSplitExtension is BaseGlobalExtension {\\n    using Address for address;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event StreamingFeeSplitExtensionInitialized(\\n        address indexed _setToken,\\n        address indexed _delegatedManager\\n    );\\n\\n    event FeesDistributed(\\n        address _setToken,\\n        address indexed _ownerFeeRecipient,\\n        address indexed _methodologist,\\n        uint256 _ownerTake,\\n        uint256 _methodologistTake\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of StreamingFeeModule\\n    IStreamingFeeModule public immutable STREAMING_FEE_MODULE;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IManagerCore _managerCore,\\n        IStreamingFeeModule _streamingFeeModule\\n    )\\n        BaseGlobalExtension(_managerCore)\\n    {\\n        STREAMING_FEE_MODULE = _streamingFeeModule;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ANYONE CALLABLE: Accrues fees from streaming fee module. Gets resulting balance after fee accrual,\\n     * calculates fees for owner and methodologist, and sends to owner fee recipient and methodologist respectively.\\n     */\\n    function accrueFeesAndDistribute(ISetToken _setToken) external {\\n        // Emits a FeeActualized event\\n        STREAMING_FEE_MODULE.accrueFee(_setToken);\\n\\n        IDelegatedManager delegatedManager = _manager(_setToken);\\n\\n        uint256 totalFees = _setToken.balanceOf(address(delegatedManager));\\n\\n        address methodologist = delegatedManager.methodologist();\\n        address ownerFeeRecipient = delegatedManager.ownerFeeRecipient();\\n\\n        uint256 ownerTake = totalFees.preciseMul(delegatedManager.ownerFeeSplit());\\n        uint256 methodologistTake = totalFees - ownerTake;\\n\\n        if (ownerTake != 0) {\\n            delegatedManager.transferTokens(address(_setToken), ownerFeeRecipient, ownerTake);\\n        }\\n\\n        if (methodologistTake != 0) {\\n            delegatedManager.transferTokens(address(_setToken), methodologist, methodologistTake);\\n        }\\n\\n        emit FeesDistributed(address(_setToken), ownerFeeRecipient, methodologist, ownerTake, methodologistTake);\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes StreamingFeeModule on the SetToken associated with the\\n     * DelegatedManager\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize the StreamingFeeModule for\\n     * @param _settings             FeeState struct defining fee parameters for StreamingFeeModule initialization\\n     */\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager,\\n        IStreamingFeeModule.FeeState calldata _settings\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isInitializedExtension(address(this)))\\n            revert GlobalExtension__ExtensionUninitialized(address(this));\\n\\n        _initializeModule(_delegatedManager.SET_TOKEN(), _delegatedManager, _settings);\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes StreamingFeeSplitExtension to the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n\\n        emit StreamingFeeSplitExtensionInitialized(address(setToken), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes StreamingFeeSplitExtension to the DelegatedManager and\\n     * StreamingFeeModule to the SetToken\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     * @param _settings             FeeState struct defining fee parameters for StreamingFeeModule initialization\\n     */\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager,\\n        IStreamingFeeModule.FeeState calldata _settings\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n        _initializeModule(setToken, _delegatedManager, _settings);\\n\\n        emit StreamingFeeSplitExtensionInitialized(address(setToken), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Remove an existing SetToken and DelegatedManager tracked by the StreamingFeeSplitExtension\\n     */\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        ISetToken setToken = delegatedManager.SET_TOKEN();\\n\\n        _removeExtension(setToken, delegatedManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates streaming fee on StreamingFeeModule.\\n     *\\n     * NOTE: This will accrue streaming fees though not send to owner fee recipient and methodologist.\\n     *\\n     * @param _setToken     Instance of the SetToken to update streaming fee for\\n     * @param _newFee       Percent of Set accruing to fee extension annually (1% = 1e16, 100% = 1e18)\\n     */\\n    function updateStreamingFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\\"updateStreamingFee(address,uint256)\\\", _setToken, _newFee);\\n        _invokeManager(_manager(_setToken), address(STREAMING_FEE_MODULE), callData);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates fee recipient on StreamingFeeModule\\n     *\\n     * @param _setToken         Instance of the SetToken to update fee recipient for\\n     * @param _newFeeRecipient  Address of new fee recipient. This should be the address of the DelegatedManager\\n     */\\n    function updateFeeRecipient(\\n        ISetToken _setToken,\\n        address _newFeeRecipient\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"updateFeeRecipient(address,address)\\\",\\n            _setToken,\\n            _newFeeRecipient\\n        );\\n        _invokeManager(_manager(_setToken), address(STREAMING_FEE_MODULE), callData);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Internal function to initialize StreamingFeeModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _setToken                     Instance of the SetToken corresponding to the DelegatedManager\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize the TradeModule for\\n     * @param _settings             FeeState struct defining fee parameters for StreamingFeeModule initialization\\n     */\\n    function _initializeModule(\\n        ISetToken _setToken,\\n        IDelegatedManager _delegatedManager,\\n        IStreamingFeeModule.FeeState calldata _settings\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"initialize(address,(uint256,uint256,uint256,address))\\\",\\n            _setToken,\\n            _settings);\\n        _invokeManager(_delegatedManager, address(STREAMING_FEE_MODULE), callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/factories/DelegatedManagerFactory.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport {AddressArrayUtils} from \\\"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\\\";\\nimport {IController} from \\\"@amun/amun-protocol/contracts/interfaces/IController.sol\\\";\\nimport {ISetToken} from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport {ISetTokenCreator} from \\\"@amun/amun-protocol/contracts/interfaces/ISetTokenCreator.sol\\\";\\n\\nimport {DelegatedManager} from \\\"../manager/DelegatedManager.sol\\\";\\nimport {IDelegatedManager} from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport {IManagerCore} from \\\"../interfaces/IManagerCore.sol\\\";\\n\\n/**\\n * @title DelegatedManagerFactory\\n * @author Set Protocol\\n *\\n * Factory smart contract which gives asset managers the ability to:\\n * > create a Set Token managed with a DelegatedManager contract\\n * > create a DelegatedManager contract for an existing Set Token to migrate to\\n * > initialize extensions and modules for SetTokens using the DelegatedManager system\\n *\\n * CHANGELOG\\n * - 4/21/23: Add Ownable\\n * - 9/12/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n */\\ncontract DelegatedManagerFactory is Ownable2Step {\\n    using AddressArrayUtils for address[];\\n    using Address for address;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when a component is missing from the provided asset list.\\n    error DelegatedManagerFactory__AssetListMissingComponent(address missingComponent);\\n    /// @notice Emitted when the caller is not the deployer.\\n    error DelegatedManagerFactory__CallerNotDeployer(address caller, address deployer);\\n    /// @notice Emitted when the provided extension is not enabled on the ManagerCore.\\n    error DelegatedManagerFactory__ExtensionInvalid(address extension);\\n    /// @notice Emitted when the provided extensions are empty.\\n    error DelegatedManagerFactory__ExtensionsEmpty();\\n    /// @notice Emitted when the provided bytecode doesn't contain the correct manager.\\n    error DelegatedManagerFactory__ManagerInBytecodeIncorrect(address providedManager, address expectedManager);\\n    /// @notice Emitted when the provided SetToken's manager is not in the pending state.\\n    error DelegatedManagerFactory__ManagerNotPending();\\n\\n\\n    /* ============ Structs ============ */\\n\\n    struct InitializeParams {\\n        address deployer;\\n        bool isPending;\\n        address owner;\\n        address methodologist;\\n        IDelegatedManager manager;\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @dev Emitted on DelegatedManager creation\\n     * @param _setToken             Instance of the SetToken being created\\n     * @param _manager              Address of the DelegatedManager\\n     * @param _deployer             Address of the deployer\\n     */\\n    event DelegatedManagerCreated(\\n        ISetToken indexed _setToken,\\n        DelegatedManager indexed _manager,\\n        address _deployer\\n    );\\n\\n    /**\\n     * @dev Emitted on DelegatedManager initialization\\n     * @param _setToken             Instance of the SetToken being initialized\\n     * @param _manager              Address of the DelegatedManager owner\\n     */\\n    event DelegatedManagerInitialized(\\n        ISetToken indexed _setToken,\\n        IDelegatedManager indexed _manager\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // ManagerCore address\\n    IManagerCore public immutable MANAGER_CORE;\\n\\n    // Controller address\\n    IController public immutable CONTROLLER;\\n\\n    // SetTokenFactory address\\n    ISetTokenCreator public immutable SET_TOKEN_FACTORY;\\n\\n    // Mapping which stores manager creation metadata between creation and initialization steps\\n    mapping(ISetToken => InitializeParams) public initializeState;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @dev Sets ManagerCore and SetTokenFactory address.\\n     * @param _managerCore                      Address of ManagerCore protocol contract\\n     * @param _controller                       Address of Controller protocol contract\\n     * @param _setTokenFactory                  Address of SetTokenFactory protocol contract\\n     */\\n    constructor(\\n        IManagerCore _managerCore,\\n        IController _controller,\\n        ISetTokenCreator _setTokenFactory\\n    ) {\\n        MANAGER_CORE = _managerCore;\\n        CONTROLLER = _controller;\\n        SET_TOKEN_FACTORY = _setTokenFactory;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY OWNER: Deploys a new SetToken and DelegatedManager. Sets some temporary metadata about\\n     * the deployment which will be read during a subsequent intialization step which wires everything\\n     * together.\\n     *\\n     * @param _components       List of addresses of components for initial Positions\\n     * @param _units            List of units. Each unit is the # of components per 10^18 of a SetToken\\n     * @param _name             Name of the SetToken\\n     * @param _symbol           Symbol of the SetToken\\n     * @param _owner            Address to set as the DelegateManager's `owner` role\\n     * @param _methodologist    Address to set as the DelegateManager's methodologist role\\n     * @param _modules          List of modules to enable. All modules must be approved by the Controller\\n     * @param _operators        List of operators authorized for the DelegateManager\\n     * @param _assets           List of assets DelegateManager can trade. When empty, asset allow list is not enforced\\n     * @param _extensions       List of extensions authorized for the DelegateManager\\n     *\\n     * @return (ISetToken, address) The created SetToken and DelegatedManager addresses, respectively\\n     */\\n    function createSetAndManager(\\n        address[] memory _components,\\n        int256[] memory _units,\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner,\\n        address _methodologist,\\n        address[] memory _modules,\\n        address[] memory _operators,\\n        address[] memory _assets,\\n        address[] memory _extensions\\n    ) external onlyOwner returns (ISetToken, address) {\\n        _validateManagerParameters(_components, _extensions, _assets);\\n\\n        ISetToken setToken = _deploySet(\\n            _components,\\n            _units,\\n            _modules,\\n            _name,\\n            _symbol\\n        );\\n\\n        DelegatedManager manager = _deployManager(\\n            setToken,\\n            _extensions,\\n            _operators,\\n            _assets\\n        );\\n\\n        _setInitializationState(\\n            setToken,\\n            address(manager),\\n            _owner,\\n            _methodologist\\n        );\\n\\n        return (setToken, address(manager));\\n    }\\n\\n    /**\\n     * ONLY DEPLOYER: Wires SetToken, DelegatedManager, global manager extensions, and modules together\\n     * into a functioning package.\\n     *\\n     * NOTE: When migrating to this manager system from an existing SetToken, the SetToken's current manager address\\n     * must be reset to point at the newly deployed DelegatedManager contract in a separate, final transaction.\\n     *\\n     * @param  _setToken                      Instance of the SetToken\\n     * @param  _ownerFeeSplit                 Fees in precise units (10^16 = 1%) sent to owner, rest to methodologist\\n     * @param  _ownerFeeRecipient             Address which receives owner's share of fees when they're distributed\\n     * @param  _extensions                    List of addresses of extensions which need to be initialized\\n     * @param  _initializeExtensionsBytecode  List of bytecode encoded calls to relevant extensions' initialize function\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        uint256 _ownerFeeSplit,\\n        address _ownerFeeRecipient,\\n        address[] calldata _extensions,\\n        bytes[] calldata _initializeExtensionsBytecode\\n    ) external {\\n        if (!initializeState[_setToken].isPending)\\n            revert DelegatedManagerFactory__ManagerNotPending();\\n        if (msg.sender != initializeState[_setToken].deployer) \\n            revert DelegatedManagerFactory__CallerNotDeployer(msg.sender, initializeState[_setToken].deployer);\\n        _extensions.validatePairsWithArray(_initializeExtensionsBytecode);\\n\\n        IDelegatedManager manager = initializeState[_setToken].manager;\\n\\n        // If the SetToken was factory-deployed & factory is its current `manager`, transfer\\n        // managership to the new DelegatedManager\\n        if (_setToken.manager() == address(this)) {\\n            _setToken.setManager(address(manager));\\n        }\\n\\n        _initializeExtensions(\\n            manager,\\n            _extensions,\\n            _initializeExtensionsBytecode\\n        );\\n\\n        _setManagerState(\\n            manager,\\n            initializeState[_setToken].owner,\\n            initializeState[_setToken].methodologist,\\n            _ownerFeeSplit,\\n            _ownerFeeRecipient\\n        );\\n\\n        delete initializeState[_setToken];\\n\\n        emit DelegatedManagerInitialized(_setToken, manager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Deploys a SetToken, setting this factory as its manager temporarily, pending initialization.\\n     * Managership is transferred to a newly created DelegatedManager during `initialize`\\n     *\\n     * @param _components       List of addresses of components for initial Positions\\n     * @param _units            List of units. Each unit is the # of components per 10^18 of a SetToken\\n     * @param _modules          List of modules to enable. All modules must be approved by the Controller\\n     * @param _name             Name of the SetToken\\n     * @param _symbol           Symbol of the SetToken\\n     *\\n     * @return Address of created SetToken;\\n     */\\n    function _deploySet(\\n        address[] memory _components,\\n        int256[] memory _units,\\n        address[] memory _modules,\\n        string memory _name,\\n        string memory _symbol\\n    ) internal returns (ISetToken) {\\n        address setToken = SET_TOKEN_FACTORY.create(\\n            _components,\\n            _units,\\n            _modules,\\n            address(this),\\n            _name,\\n            _symbol\\n        );\\n\\n        return ISetToken(setToken);\\n    }\\n\\n    /**\\n     * Deploys a DelegatedManager. Sets owner and methodologist roles to address(this) and the resulting manager\\n     * address is saved to the ManagerCore.\\n     *\\n     * @param  _setToken         Instance of SetToken to migrate to the DelegatedManager system\\n     * @param  _extensions       List of extensions authorized for the DelegateManager\\n     * @param  _operators        List of operators authorized for the DelegateManager\\n     * @param  _assets           List of assets DelegateManager can trade. When empty, asset allow list is not enforced\\n     *\\n     * @return Address of created DelegatedManager\\n     */\\n    function _deployManager(\\n        ISetToken _setToken,\\n        address[] memory _extensions,\\n        address[] memory _operators,\\n        address[] memory _assets\\n    ) internal returns (DelegatedManager) {\\n        // If asset array is empty, manager's useAssetAllowList will be set to false\\n        // and the asset allow list is not enforced\\n        bool useAssetAllowlist = _assets.length != 0;\\n\\n        DelegatedManager newManager = new DelegatedManager(\\n            _setToken,\\n            address(this),\\n            address(this),\\n            _extensions,\\n            _operators,\\n            _assets,\\n            useAssetAllowlist\\n        );\\n\\n        // Registers manager with ManagerCore\\n        MANAGER_CORE.addManager(address(newManager));\\n\\n        emit DelegatedManagerCreated(_setToken, newManager, msg.sender);\\n\\n        return newManager;\\n    }\\n\\n    /**\\n     * Initialize extensions on the DelegatedManager. Checks that extensions are tracked on the ManagerCore and that the\\n     * provided bytecode targets the input manager.\\n     *\\n     * @param  _manager                  Instance of DelegatedManager\\n     * @param  _extensions               List of addresses of extensions to initialize\\n     * @param  _initializeBytecode       List of bytecode encoded calls to relevant extensions's initialize function\\n     */\\n    function _initializeExtensions(\\n        IDelegatedManager _manager,\\n        address[] memory _extensions,\\n        bytes[] memory _initializeBytecode\\n    ) internal {\\n        uint256 extensionsLen = _extensions.length;\\n        for (uint256 i; i < extensionsLen;) {\\n            address extension = _extensions[i];\\n            if (!MANAGER_CORE.isExtension(extension))\\n                revert DelegatedManagerFactory__ExtensionInvalid(extension);\\n\\n            bytes memory initializeBytecode = _initializeBytecode[i];\\n\\n            // Each input initializeBytecode is a varible length bytes array which consists of a 32 byte prefix for the\\n            // length parameter, a 4 byte function selector, a 32 byte DelegatedManager address, and any additional\\n            // parameters as shown below:\\n            // [32bytes - length, 4bytes - function selector, 32bytes - DelegatedManager address, additional parameters]\\n            // Input DelegatedManager address required as the DelegatedManager address corresponding to the caller\\n            address inputManager;\\n            /* solhint-disable-next-line no-inline-assembly */\\n            assembly {\\n                inputManager := mload(add(initializeBytecode, 36))\\n            }\\n            if (inputManager != address(_manager))\\n                revert DelegatedManagerFactory__ManagerInBytecodeIncorrect(inputManager, address(_manager));\\n\\n            // Because we validate uniqueness of _extensions only one transaction can be sent to each extension during\\n            // this transaction. Due to this no extension can be used for any SetToken transactions other than\\n            // initializing these contracts\\n            extension.functionCallWithValue(initializeBytecode, 0);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Stores temporary creation metadata during the contract creation step. Data is retrieved, read and\\n     * finally deleted during `initialize`.\\n     *\\n     * @param  _setToken         Instance of SetToken\\n     * @param  _manager          Address of DelegatedManager created for SetToken\\n     * @param  _owner            Given address to the `owner` DelegatedManager's role on initialization\\n     * @param  _methodologist    Given address to the `methodologist` DelegatedManager's role on initialization\\n     */\\n    function _setInitializationState(\\n        ISetToken _setToken,\\n        address _manager,\\n        address _owner,\\n        address _methodologist\\n    ) internal {\\n        initializeState[_setToken] = InitializeParams({\\n            deployer: msg.sender,\\n            owner: _owner,\\n            methodologist: _methodologist,\\n            manager: IDelegatedManager(_manager),\\n            isPending: true\\n        });\\n    }\\n\\n    /**\\n     * Initialize fee settings on DelegatedManager and transfer `owner` and `methodologist` roles.\\n     *\\n     * @param  _manager                 Instance of DelegatedManager\\n     * @param  _owner                   Address that will be given the `owner` DelegatedManager's role\\n     * @param  _methodologist           Address that will be given the `methodologist` DelegatedManager's role\\n     * @param  _ownerFeeSplit           Fees in precise units (10^16 = 1%) sent to owner, rest to methodologist\\n     * @param  _ownerFeeRecipient       Address which receives owner's share of fees when they're distributed\\n     */\\n    function _setManagerState(\\n        IDelegatedManager _manager,\\n        address _owner,\\n        address _methodologist,\\n        uint256 _ownerFeeSplit,\\n        address _ownerFeeRecipient\\n    ) internal {\\n        _manager.updateOwnerFeeSplit(_ownerFeeSplit);\\n        _manager.updateOwnerFeeRecipient(_ownerFeeRecipient);\\n\\n        _manager.transferOwnership(_owner);\\n        _manager.setMethodologist(_methodologist);\\n    }\\n\\n    /**\\n     * Validates that all components currently held by the Set are on the asset allow list. Validate that the manager is\\n     * deployed with at least one extension in the PENDING state.\\n     *\\n     * @param  _components       List of addresses of components for initial/current Set positions\\n     * @param  _extensions       List of extensions authorized for the DelegateManager\\n     * @param  _assets           List of assets DelegateManager can trade. When empty, asset allow list is not enforced\\n     */\\n    function _validateManagerParameters(\\n        address[] memory _components,\\n        address[] memory _extensions,\\n        address[] memory _assets\\n    ) internal pure {\\n        if (_extensions.length == 0) revert DelegatedManagerFactory__ExtensionsEmpty();\\n\\n        if (_assets.length != 0) {\\n            _validateComponentsIncludedInAssetsList(_components, _assets);\\n        }\\n    }\\n\\n    /**\\n     * Validates that all SetToken components are included in the assets whitelist. This prevents the\\n     * DelegatedManager from being initialized with some components in an untrade-able state.\\n     *\\n     * @param _components       List of addresses of components for initial Positions\\n     * @param  _assets          List of assets DelegateManager can trade.\\n     */\\n    function _validateComponentsIncludedInAssetsList(\\n        address[] memory _components,\\n        address[] memory _assets\\n    ) internal pure {\\n        uint256 componentsLen = _components.length;\\n        for (uint256 i; i < componentsLen;) {\\n            if (!_assets.contains(_components[i])) \\n                revert DelegatedManagerFactory__AssetListMissingComponent(_components[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n/************\\n@title IPriceOracleGetter interface\\n@notice Interface for the Aave price oracle.*/\\ninterface IPriceOracleGetter {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external view returns(address);\\n    function getFallbackOracle() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IChainlinkAggregatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IChainlinkAggregatorV3 {\\n    function latestAnswer() external view returns (int256);\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDelegatedManager.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\n\\ninterface IDelegatedManager {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the asset was already added to the allow list.\\n    error DelegatedManager__AssetExists(address asset);\\n    /// @notice Emitted when the asset does not exist on the allow list.\\n    error DelegatedManager__AssetNotAllowed();\\n    /// @notice Emitted when the caller is not the methodologist.\\n    error DelegatedManager__CallerNotMethodologist(address caller, address methodologist);\\n    /// @notice Emitted when an extension tries to call/interact with a SetToken on the DelegatedManager.\\n    error DelegatedManager__CallingSetTokenForbidden();\\n    /// @notice Emitted when the extension was already added to the allow list.\\n    error DelegatedManager__ExtensionExists(address extension);\\n    /// @notice Emitted when the extension is not in the pending state.\\n    error DelegatedManager__ExtensionNotPending(address extension);\\n    /// @notice Emitted when the extension is not in the initialized state on the allow list.\\n    error DelegatedManager__ExtensionUninitialized(address extension);\\n    /// @notice Emitted when there are existing extensions on the DelegatedManager.\\n    error DelegatedManager__ExtensionsExist(uint256 numExtensions);\\n    /// @notice Emitted when the new fee split amount is invalid.\\n    error DelegatedManager__FeeSplitInvalid();\\n    /// @notice Emitted when the operator was already added to the allow list.\\n    error DelegatedManager__OperatorExists(address operator);\\n    /// @notice Emitted when the operator does not exist on the allow list.\\n    error DelegatedManager__OperatorNotAllowed(address operator);\\n    /// @notice Emitted when a zero address is provided.\\n    error DelegatedManager__ZeroAddress();\\n\\n\\n    /* ============ Events ============ */\\n\\n    event MethodologistChanged(\\n        address indexed _newMethodologist\\n    );\\n\\n    event ExtensionAdded(\\n        address indexed _extension\\n    );\\n\\n    event ExtensionRemoved(\\n        address indexed _extension\\n    );\\n\\n    event ExtensionInitialized(\\n        address indexed _extension\\n    );\\n\\n    event OperatorAdded(\\n        address indexed _operator\\n    );\\n\\n    event OperatorRemoved(\\n        address indexed _operator\\n    );\\n\\n    event AllowedAssetAdded(\\n        address indexed _asset\\n    );\\n\\n    event AllowedAssetRemoved(\\n        address indexed _asset\\n    );\\n\\n    event UseAssetAllowlistUpdated(\\n        bool _status\\n    );\\n\\n    event OwnerFeeSplitUpdated(\\n        uint256 _newFeeSplit\\n    );\\n\\n    event OwnerFeeRecipientUpdated(\\n        address indexed _newFeeRecipient\\n    );\\n\\n    /* ============ Functions ============ */\\n    \\n    function interactManager(address _module, bytes calldata _encoded) external;\\n\\n    function initializeExtension() external;\\n\\n    function transferTokens(address _token, address _destination, uint256 _amount) external;\\n\\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external;\\n\\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external;\\n\\n    function setMethodologist(address _newMethodologist) external;\\n\\n    function transferOwnership(address _owner) external;\\n\\n    function SET_TOKEN() external view returns(ISetToken); /* solhint-disable-line func-name-mixedcase */\\n    function owner() external view returns(address);\\n    function methodologist() external view returns(address);\\n    function operatorAllowlist(address _operator) external view returns(bool);\\n    function assetAllowlist(address _asset) external view returns(bool);\\n    function useAssetAllowlist() external view returns(bool);\\n    function isAllowedAsset(address _asset) external view returns(bool);\\n    function isPendingExtension(address _extension) external view returns(bool);\\n    function isInitializedExtension(address _extension) external view returns(bool);\\n    function getExtensions() external view returns(address[] memory);\\n    function getOperators() external view returns(address[] memory);\\n    function getAllowedAssets() external view returns(address[] memory);\\n    function ownerFeeRecipient() external view returns(address);\\n    function ownerFeeSplit() external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGlobalExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IGlobalExtension {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an asset is not approved on the DelegatedManager.\\n    error GlobalExtension__AssetForbidden(address emitter, address asset);\\n    /// @notice Emitted when the caller is not an approved operator.\\n    error GlobalExtension__CallerNotApprovedOperator(address emitter, address caller);\\n    /// @notice Emitted when the caller is not an externally owned account.\\n    error GlobalExtension__CallerNotEOA(address emitter, address msgSender, address txOrigin);\\n    /// @notice Emitted when the caller is not enabled on the ManagerCore.\\n    error GlobalExtension__CallerNotManagerOnCore(address emitter, address caller);\\n    /// @notice Emitted when the caller is not the specified methodologist.\\n    error GlobalExtension__CallerNotMethodologist(\\n        address emitter, \\n        address caller, \\n        address methodologist\\n    );\\n    /// @notice Emitted when the caller is not the specified manager of the SetToken.\\n    error GlobalExtension__CallerNotSetTokenManager(\\n        address emitter, \\n        address caller, \\n        address manager\\n    );\\n    /// @notice Emitted when the caller is not the specified owner.\\n    error GlobalExtension__CallerNotOwner(\\n        address emitter, \\n        address caller, \\n        address owner\\n    );\\n    /// @notice Emitted when the extension is not initialized.\\n    error GlobalExtension__ExtensionUninitialized(address emittingExtension);\\n    /// @notice Emitted when the extension is not pending.\\n    error GlobalExtension__ExtensionNotPending(address emittingExtension);\\n\\n    /* ============ Events ============ */\\n\\n    event ExtensionRemoved(\\n        address indexed _setToken,\\n        address indexed _delegatedManager\\n    );\\n\\n    /* ============ Functions ============ */\\n\\n    function removeExtension() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILeverageModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IAToken } from \\\"@amun/amun-protocol/contracts/interfaces/external/aave-v2/IAToken.sol\\\";\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { \\n    IVariableDebtToken\\n} from \\\"@amun/amun-protocol/contracts/interfaces/external/aave-v2/IVariableDebtToken.sol\\\";\\nimport {\\n    IProtocolDataProvider\\n} from \\\"@amun/amun-protocol/contracts/interfaces/external/aave-v2/IProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"@amun/amun-protocol/contracts/interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface ILeverageModule {\\n    \\n    struct ReserveTokens {\\n        IAToken aToken;                         // Reserve's aToken instance\\n        IVariableDebtToken variableDebtToken;   // Reserve's variable debt token instance\\n    }\\n\\n    function sync(\\n        ISetToken _setToken\\n    ) external;\\n\\n    function lever(\\n        ISetToken _setToken,\\n        address _borrowAsset,\\n        address _collateralAsset,\\n        uint256 _borrowQuantity,\\n        uint256 _minReceiveQuantity,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    ) external;\\n\\n    function delever(\\n        ISetToken _setToken,\\n        address _collateralAsset,\\n        address _repayAsset,\\n        uint256 _redeemQuantity,\\n        uint256 _minRepayQuantity,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    ) external;\\n\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function LENDING_POOL_ADDRESSES_PROVIDER() external pure returns(ILendingPoolAddressesProvider);\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function PROTOCOL_DATA_PROVIDER() external pure returns(IProtocolDataProvider);\\n    function getEnabledAssets(ISetToken _setToken) external view returns(address[] memory, address[] memory);\\n    function underlyingToReserveTokens(IERC20) external view returns(ReserveTokens calldata);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IManagerCore.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IManagerCore {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not a valid factory.\\n    error ManagerCore__CallerNotFactory(address caller);\\n    /// @notice Emitted when the ManagerCore is already initialized.\\n    error ManagerCore__ContractIsInitialized();\\n    /// @notice Emitted when performing an operation before initialization of the ManagerCore.\\n    error ManagerCore__ContractUninitialized();\\n    /// @notice Emitted when an extension already exists on the ManagerCore.\\n    error ManagerCore__ExtensionExists();\\n    /// @notice Emitted when the provided extension is not valid.\\n    error ManagerCore__ExtensionInvalid();\\n    /// @notice Emitted when the factory already exists on the ManagerCore.\\n    error ManagerCore__FactoryExists();\\n    /// @notice Emitted when the provided factory is not valid.\\n    error ManagerCore__FactoryInvalid();\\n    /// @notice Emitted when the manager already exists on the ManagerCore.\\n    error ManagerCore__ManagerExists();\\n    /// @notice Emitted when the provided manager is not valid.\\n    error ManagerCore__ManagerInvalid();\\n    /// @notice Emitted when a zero address is provided.\\n    error ManagerCore__ZeroAddress();\\n\\n\\n    /* ============ Events ============ */\\n\\n    event ExtensionAdded(address indexed _extension);\\n    event ExtensionRemoved(address indexed _extension);\\n    event FactoryAdded(address indexed _factory);\\n    event FactoryRemoved(address indexed _factory);\\n    event ManagerAdded(address indexed _manager, address indexed _factory);\\n    event ManagerRemoved(address indexed _manager);\\n\\n    /* ============ Functions ============ */\\n\\n    function addManager(address _manager) external;\\n    function isExtension(address _extension) external view returns(bool);\\n    function isFactory(address _factory) external view returns(bool);\\n    function isManager(address _manager) external view returns(bool);\\n    function owner() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    /// @param interval The interval represents twap interval.\\n    function getPrice(uint256 interval) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProtocolDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.21;\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function ADDRESSES_PROVIDER() external view returns (address);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(\\n        address asset,\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/lib/BaseGlobalExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressArrayUtils } from \\\"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\\\";\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\n\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\nimport { IGlobalExtension } from \\\"../interfaces/IGlobalExtension.sol\\\";\\n\\n/**\\n * @title BaseGlobalExtension\\n * @author Set Protocol\\n *\\n * Abstract class that houses common global extension-related functions. Global extensions must\\n * also have their own initializeExtension function (not included here because interfaces will vary).\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n * - 10/10/23: Added IGlobalExtension interface\\n */\\nabstract contract BaseGlobalExtension is IGlobalExtension {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the ManagerCore\\n    IManagerCore public immutable MANAGER_CORE;\\n\\n    // Mapping from Set Token to DelegatedManager\\n    mapping(ISetToken => IDelegatedManager) public setManagers;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not the SetToken manager contract owner\\n     */\\n    modifier onlyOwner(ISetToken _setToken) {\\n        _onlyOwner(_setToken);\\n        _;\\n    }\\n    function _onlyOwner(ISetToken _setToken) internal view {\\n        address owner = _manager(_setToken).owner();\\n        if (msg.sender != owner) revert GlobalExtension__CallerNotOwner(address(this), msg.sender, owner);\\n    }\\n\\n    /**\\n     * Throws if the sender is not the SetToken methodologist\\n     */\\n    modifier onlyMethodologist(ISetToken _setToken) {\\n        _onlyMethodologist(_setToken);\\n        _;\\n    }\\n    function _onlyMethodologist(ISetToken _setToken) internal view {\\n        address methodologist = _manager(_setToken).methodologist();\\n        if (msg.sender != methodologist)\\n            revert GlobalExtension__CallerNotMethodologist(address(this), msg.sender, methodologist);\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken operator\\n     */\\n    modifier onlyOperator(ISetToken _setToken) {\\n        _onlyOperator(_setToken);\\n        _;\\n    }\\n    function _onlyOperator(ISetToken _setToken) internal view {\\n        if (!_manager(_setToken).operatorAllowlist(msg.sender))\\n            revert GlobalExtension__CallerNotApprovedOperator(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * Throws if the sender is not the SetToken manager contract owner or\\n     * if the manager is not enabled on the ManagerCore\\n     */\\n    modifier onlyOwnerAndValidManager(IDelegatedManager _delegatedManager) {\\n        _onlyOwnerAndValidManager(_delegatedManager);\\n        _;\\n    }\\n    function _onlyOwnerAndValidManager(IDelegatedManager _delegatedManager) internal view {\\n        address owner = _delegatedManager.owner();\\n        if (msg.sender != owner) revert GlobalExtension__CallerNotOwner(address(this), msg.sender, owner);\\n        if (!MANAGER_CORE.isManager(address(_delegatedManager)))\\n            revert GlobalExtension__CallerNotManagerOnCore(address(this), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * Throws if asset is not allowed to be held by the Set\\n     */\\n    modifier onlyAllowedAsset(ISetToken _setToken, address _asset) {\\n        _onlyAllowedAsset(_setToken, _asset);\\n        _;\\n    }\\n    function _onlyAllowedAsset(ISetToken _setToken, address _asset) internal view {\\n        if (!_manager(_setToken).isAllowedAsset(_asset))\\n            revert GlobalExtension__AssetForbidden(address(this), _asset);\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _managerCore             Address of ManagerCore contract\\n     */\\n    constructor(IManagerCore _managerCore) {\\n        MANAGER_CORE = _managerCore;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY MANAGER: Deletes SetToken/Manager state from extension. Must only be callable by manager!\\n     */\\n    function removeExtension() external virtual;\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Invoke call from manager\\n     *\\n     * @param _delegatedManager      Manager to interact with\\n     * @param _module                Module to interact with\\n     * @param _encoded               Encoded byte data\\n     */\\n    function _invokeManager(IDelegatedManager _delegatedManager, address _module, bytes memory _encoded) internal {\\n        _delegatedManager.interactManager(_module, _encoded);\\n    }\\n\\n    /**\\n     * Internal function to grab manager of passed SetToken from extensions data structure.\\n     *\\n     * @param _setToken         SetToken who's manager is needed\\n     */\\n    function _manager(ISetToken _setToken) internal view returns (IDelegatedManager) {\\n        return setManagers[_setToken];\\n    }\\n\\n    /**\\n     * Internal function to initialize extension to the DelegatedManager.\\n     *\\n     * @param _setToken             Instance of the SetToken corresponding to the DelegatedManager\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function _initializeExtension(ISetToken _setToken, IDelegatedManager _delegatedManager) internal {\\n        setManagers[_setToken] = _delegatedManager;\\n\\n        _delegatedManager.initializeExtension();\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Internal function to delete SetToken/Manager state from extension\\n     */\\n    function _removeExtension(ISetToken _setToken, IDelegatedManager _delegatedManager) internal {\\n        address manager = address(_manager(_setToken));\\n        if (msg.sender != manager)\\n            revert GlobalExtension__CallerNotSetTokenManager(address(this), msg.sender, manager);\\n\\n        delete setManagers[_setToken];\\n\\n        emit ExtensionRemoved(address(_setToken), address(_delegatedManager));\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/MutualUpgrade.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title MutualUpgrade\\n * @author Set Protocol\\n *\\n * The MutualUpgrade contract contains a modifier for handling mutual upgrades between two parties\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n */\\ncontract MutualUpgrade {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not an authorized signer.\\n    error MutualUpgrade__CallerNotAuthorizedSigner(address caller, address signerOne, address signerTwo);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of upgradable units and if upgrade has been initialized by other party\\n    mapping(bytes32 => bool) public mutualUpgrades;\\n\\n    /* ============ Events ============ */\\n\\n    event MutualUpgradeRegistered(\\n        bytes32 _upgradeHash\\n    );\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier mutualUpgrade(address _signerOne, address _signerTwo) {\\n        if (msg.sender != _signerOne)\\n            if (msg.sender != _signerTwo) {\\n                revert MutualUpgrade__CallerNotAuthorizedSigner(msg.sender, _signerOne, _signerTwo);\\n            }\\n\\n        address nonCaller = _getNonCaller(_signerOne, _signerTwo);\\n\\n        // The upgrade hash is defined by the hash of the transaction call data and sender of msg,\\n        // which uniquely identifies the function, arguments, and sender.\\n        bytes32 expectedHash = keccak256(abi.encodePacked(msg.data, nonCaller));\\n\\n        if (!mutualUpgrades[expectedHash]) {\\n            bytes32 newHash = keccak256(abi.encodePacked(msg.data, msg.sender));\\n\\n            mutualUpgrades[newHash] = true;\\n\\n            emit MutualUpgradeRegistered(newHash);\\n\\n            return;\\n        }\\n\\n        delete mutualUpgrades[expectedHash];\\n\\n        // Run the rest of the upgrades\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getNonCaller(address _signerOne, address _signerTwo) internal view returns(address) {\\n        return msg.sender == _signerOne ? _signerTwo : _signerOne;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MutualUpgradeV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title MutualUpgradeV2\\n * @author Set Protocol\\n *\\n * The MutualUpgradeV2 contract contains a modifier for handling mutual upgrades between two parties\\n *\\n * CHANGELOG\\n * - Update mutualUpgrade to allow single transaction execution if the two signing addresses are the same\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n */\\ncontract MutualUpgradeV2 {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not an authorized signer.\\n    error MutualUpgradeV2__CallerNotAuthorizedSigner(address caller, address signerOne, address signerTwo);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of upgradable units and if upgrade has been initialized by other party\\n    mapping(bytes32 => bool) public mutualUpgrades;\\n\\n    /* ============ Events ============ */\\n\\n    event MutualUpgradeRegistered(\\n        bytes32 _upgradeHash\\n    );\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier mutualUpgrade(address _signerOne, address _signerTwo) {\\n        if (msg.sender != _signerOne)\\n            if(msg.sender != _signerTwo) {\\n                revert MutualUpgradeV2__CallerNotAuthorizedSigner(msg.sender, _signerOne, _signerTwo);\\n            }\\n\\n        // If the two signing addresses are the same, skip upgrade hash step\\n        if (_signerOne == _signerTwo) {\\n            _;\\n        }\\n\\n        address nonCaller = _getNonCaller(_signerOne, _signerTwo);\\n\\n        // The upgrade hash is defined by the hash of the transaction call data and sender of msg,\\n        // which uniquely identifies the function, arguments, and sender.\\n        bytes32 expectedHash = keccak256(abi.encodePacked(msg.data, nonCaller));\\n\\n        if (!mutualUpgrades[expectedHash]) {\\n            bytes32 newHash = keccak256(abi.encodePacked(msg.data, msg.sender));\\n\\n            mutualUpgrades[newHash] = true;\\n\\n            emit MutualUpgradeRegistered(newHash);\\n\\n            return;\\n        }\\n\\n        delete mutualUpgrades[expectedHash];\\n\\n        // Run the rest of the upgrades\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getNonCaller(address _signerOne, address _signerTwo) internal view returns(address) {\\n        return msg.sender == _signerOne ? _signerTwo : _signerOne;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/DelegatedManager.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\\\";\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\\\";\\n\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IGlobalExtension } from \\\"../interfaces/IGlobalExtension.sol\\\";\\nimport { MutualUpgradeV2 } from \\\"../lib/MutualUpgradeV2.sol\\\";\\n\\n/**\\n * @title DelegatedManager\\n * @author Set Protocol\\n *\\n * Smart contract manager that maintains permissions and SetToken admin functionality via owner role. Owner\\n * works alongside methodologist to ensure business agreements are kept. Owner is able to delegate maintenance\\n * operations to operator(s). There can be more than one operator, however they have a global role so once\\n * delegated to they can perform any operator delegated roles. The owner is able to set restrictions on what\\n * operators can do in the form of asset whitelists. Operators cannot trade/wrap/claim/etc. an asset that is not\\n * a part of the asset whitelist, hence they are a semi-trusted party. It is recommended that the owner address\\n * be managed by a multi-sig or some form of permissioning system.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n * - 9/28/23: Switch from Ownable to Ownable2Step\\n */\\ncontract DelegatedManager is MutualUpgradeV2, IDelegatedManager, Ownable2Step {\\n    using Address for address;\\n    using AddressArrayUtils for address[];\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Enums ============ */\\n\\n    enum ExtensionState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not the SetToken methodologist\\n     */\\n    modifier onlyMethodologist() {\\n        if (msg.sender != methodologist) revert DelegatedManager__CallerNotMethodologist(msg.sender, methodologist);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not an initialized extension\\n     */\\n    modifier onlyExtension() {\\n        if (extensionAllowlist[msg.sender] != ExtensionState.INITIALIZED)\\n            revert DelegatedManager__ExtensionUninitialized(msg.sender);\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of SetToken\\n    ISetToken public immutable SET_TOKEN;\\n\\n    // Address of factory contract used to deploy contract\\n    address public immutable FACTORY;\\n\\n    // Mapping to check which ExtensionState a given extension is in\\n    mapping(address => ExtensionState) public extensionAllowlist;\\n\\n    // Array of initialized extensions\\n    address[] internal extensions;\\n\\n    // Mapping indicating if address is an approved operator\\n    mapping(address=>bool) public operatorAllowlist;\\n\\n    // List of approved operators\\n    address[] internal operators;\\n\\n    // Mapping indicating if asset is approved to be traded for, wrapped into, claimed, etc.\\n    mapping(address=>bool) public assetAllowlist;\\n\\n    // List of allowed assets\\n    address[] internal allowedAssets;\\n\\n    // Global owner fee split that can be referenced by Extensions\\n    uint256 public ownerFeeSplit;\\n\\n    // Address owners portions of fees get sent to\\n    address public ownerFeeRecipient;\\n\\n    // Toggle if asset allow list is being enforced\\n    bool public useAssetAllowlist;\\n\\n    // Address of methodologist which serves as providing methodology for the index and receives fee splits\\n    address public methodologist;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        ISetToken _setToken,\\n        address _factory,\\n        address _methodologist,\\n        address[] memory _extensions,\\n        address[] memory _operators,\\n        address[] memory _allowedAssets,\\n        bool _useAssetAllowlist\\n    )\\n    {\\n        SET_TOKEN = _setToken;\\n        FACTORY = _factory;\\n        methodologist = _methodologist;\\n        useAssetAllowlist = _useAssetAllowlist;\\n        emit UseAssetAllowlistUpdated(_useAssetAllowlist);\\n\\n        // Add extensions to allow list\\n        uint256 extensionsLen = _extensions.length;\\n        for (uint256 i; i < extensionsLen;) {\\n            address extension = _extensions[i];\\n            extensionAllowlist[extension] = ExtensionState.PENDING;\\n            emit ExtensionAdded(extension);\\n            unchecked { ++i; }\\n        }\\n\\n        // Add operators to allow list\\n        operators = _operators;\\n        uint256 operatorsLen = _operators.length;\\n        for (uint256 i; i < operatorsLen;) {\\n            address operator = _operators[i];\\n            operatorAllowlist[operator] = true;\\n            emit OperatorAdded(operator);\\n            unchecked { ++i; }\\n        }\\n        \\n        // Add assets to allow list\\n        allowedAssets = _allowedAssets;\\n        uint256 assetsLen = _allowedAssets.length;\\n        for (uint256 i; i < assetsLen;) {\\n            address asset = _allowedAssets[i];\\n            assetAllowlist[asset] = true;\\n            emit AllowedAssetAdded(asset);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /* ============ Override Functions ============ */\\n\\n    // Overriding owner() function from IDelegatedManager to use Ownable's owner\\n    function owner() public view override(IDelegatedManager, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    // Overriding transferOwnership() function from IDelegatedManager to use Ownable2Step's transferOwnership\\n    function transferOwnership(address newOwner) public override(IDelegatedManager, Ownable2Step) onlyOwner {\\n        Ownable2Step.transferOwnership(newOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY EXTENSION: Interact with a module registered on the SetToken. In order to ensure SetToken admin\\n     * functions can only be changed from this contract no calls to the SetToken can originate from Extensions.\\n     * To transfer SetTokens use the `transferTokens` function.\\n     *\\n     * @param _module           Module to interact with\\n     * @param _data             Byte data of function to call in module\\n     */\\n    function interactManager(address _module, bytes calldata _data) external onlyExtension {\\n        if (_module == address(SET_TOKEN)) revert DelegatedManager__CallingSetTokenForbidden();\\n        // Invoke call to module, assume value will always be 0\\n        _module.functionCallWithValue(_data, 0);\\n    }\\n\\n    /**\\n     * ONLY EXTENSION: Transfers _tokens held by the manager to _destination. Can be used to\\n     * distribute fees or recover anything sent here accidentally.\\n     *\\n     * @param _token           ERC20 token to send\\n     * @param _destination     Address receiving the tokens\\n     * @param _amount          Quantity of tokens to send\\n     */\\n    function transferTokens(address _token, address _destination, uint256 _amount) external onlyExtension {\\n        IERC20(_token).safeTransfer(_destination, _amount);\\n    }\\n\\n    /**\\n     * ANYONE CALLABLE: Initializes an added extension from PENDING to INITIALIZED state and adds to extension array. An\\n     * address can only enter a PENDING state if it is an enabled extension added by the manager. Only\\n     * callable by the extension itself, hence msg.sender is the subject of update.\\n     */\\n    function initializeExtension() external {\\n        if (extensionAllowlist[msg.sender] != ExtensionState.PENDING)\\n            revert DelegatedManager__ExtensionNotPending(msg.sender);\\n\\n        extensionAllowlist[msg.sender] = ExtensionState.INITIALIZED;\\n        extensions.push(msg.sender);\\n\\n        emit ExtensionInitialized(msg.sender);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add new extension(s) that the DelegatedManager can call. Puts extensions into PENDING\\n     * state, each must be initialized in order to be used.\\n     *\\n     * @param _extensions           New extension(s) to add\\n     */\\n    function addExtensions(address[] calldata _extensions) external onlyOwner {\\n        uint256 extensionsLen = _extensions.length;\\n        for (uint256 i; i < extensionsLen;) {\\n            address extension = _extensions[i];\\n\\n            if (extensionAllowlist[extension] != ExtensionState.NONE)\\n                revert DelegatedManager__ExtensionExists(extension);\\n\\n            extensionAllowlist[extension] = ExtensionState.PENDING;\\n\\n            emit ExtensionAdded(extension);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove existing extension(s) tracked by the DelegatedManager. Removed extensions are\\n     * placed in NONE state.\\n     *\\n     * @param _extensions           Old extension to remove\\n     */\\n    function removeExtensions(address[] calldata _extensions) external onlyOwner {\\n        uint256 extensionsLen = _extensions.length;\\n        for (uint256 i; i < extensionsLen;) {\\n            address extension = _extensions[i];\\n\\n            if (extensionAllowlist[extension] != ExtensionState.INITIALIZED)\\n                revert DelegatedManager__ExtensionUninitialized(extension);\\n\\n            extensions.removeStorage(extension);\\n\\n            extensionAllowlist[extension] = ExtensionState.NONE;\\n\\n            IGlobalExtension(extension).removeExtension();\\n\\n            emit ExtensionRemoved(extension);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add new operator(s) address(es)\\n     *\\n     * @param _operators           New operator(s) to add\\n     */\\n    function addOperators(address[] calldata _operators) external onlyOwner {\\n        uint256 operatorsLen = _operators.length;\\n        for (uint256 i; i < operatorsLen;) {\\n            address operator = _operators[i];\\n\\n            if (operatorAllowlist[operator]) revert DelegatedManager__OperatorExists(operator);\\n\\n            operators.push(operator);\\n\\n            operatorAllowlist[operator] = true;\\n\\n            emit OperatorAdded(operator);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove operator(s) from the allowlist\\n     *\\n     * @param _operators           New operator(s) to remove\\n     */\\n    function removeOperators(address[] calldata _operators) external onlyOwner {\\n        uint256 operatorsLen = _operators.length;\\n        for (uint256 i; i < operatorsLen;) {\\n            address operator = _operators[i];\\n\\n            if (!operatorAllowlist[operator]) revert DelegatedManager__OperatorNotAllowed(operator);\\n\\n            operators.removeStorage(operator);\\n\\n            operatorAllowlist[operator] = false;\\n\\n            emit OperatorRemoved(operator);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add new asset(s) that can be traded to, wrapped to, or claimed\\n     *\\n     * @param _assets           New asset(s) to add\\n     */\\n    function addAllowedAssets(address[] calldata _assets) external onlyOwner {\\n        uint256 assetsLen = _assets.length;\\n        for (uint256 i; i < assetsLen;) {\\n            address asset = _assets[i];\\n\\n            if (assetAllowlist[asset]) revert DelegatedManager__AssetExists(asset);\\n\\n            allowedAssets.push(asset);\\n\\n            assetAllowlist[asset] = true;\\n\\n            emit AllowedAssetAdded(asset);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove asset(s) so that it/they can't be traded to, wrapped to, or claimed\\n     *\\n     * @param _assets           Asset(s) to remove\\n     */\\n    function removeAllowedAssets(address[] calldata _assets) external onlyOwner {\\n        uint256 assetsLen = _assets.length;\\n        for (uint256 i; i < assetsLen;) {\\n            address asset = _assets[i];\\n\\n            if (!assetAllowlist[asset]) revert DelegatedManager__AssetNotAllowed();\\n\\n            allowedAssets.removeStorage(asset);\\n\\n            assetAllowlist[asset] = false;\\n\\n            emit AllowedAssetRemoved(asset);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Toggle useAssetAllowlist on and off. When false asset allowlist is ignored\\n     * when true it is enforced.\\n     *\\n     * @param _useAssetAllowlist           Bool indicating whether to use asset allow list\\n     */\\n    function updateUseAssetAllowlist(bool _useAssetAllowlist) external onlyOwner {\\n        useAssetAllowlist = _useAssetAllowlist;\\n\\n        emit UseAssetAllowlistUpdated(_useAssetAllowlist);\\n    }\\n\\n    /**\\n     * MUTUAL UPGRADE: Update percent of fees that are sent to owner.\\n     * Owner and Methodologist must each call this function to execute the update.\\n     * If Owner and Methodologist point to the same address, the update can be executed in a single call.\\n     *\\n     * @param _newFeeSplit           Percent in precise units (100% = 10**18) of fees that accrue to owner\\n     */\\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external mutualUpgrade(owner(), methodologist) {\\n        if (_newFeeSplit > PreciseUnitMath.preciseUnit()) revert DelegatedManager__FeeSplitInvalid();\\n\\n        ownerFeeSplit = _newFeeSplit;\\n\\n        emit OwnerFeeSplitUpdated(_newFeeSplit);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Update address owner receives fees at\\n     *\\n     * @param _newFeeRecipient           Address to send owner fees to\\n     */\\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external onlyOwner {\\n        if (_newFeeRecipient == address(0)) revert DelegatedManager__ZeroAddress();\\n\\n        ownerFeeRecipient = _newFeeRecipient;\\n\\n        emit OwnerFeeRecipientUpdated(_newFeeRecipient);\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Update the methodologist address\\n     *\\n     * @param _newMethodologist           New methodologist address\\n     */\\n    function setMethodologist(address _newMethodologist) external onlyMethodologist {\\n        if (_newMethodologist == address(0)) revert DelegatedManager__ZeroAddress();\\n\\n        methodologist = _newMethodologist;\\n\\n        emit MethodologistChanged(_newMethodologist);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Update the SetToken manager address.\\n     *\\n     * @param _newManager           New manager address\\n     */\\n    function setManager(address _newManager) external onlyOwner {\\n        if (_newManager == address(0)) revert DelegatedManager__ZeroAddress();\\n        uint256 extensionsLength = extensions.length;\\n        if(extensionsLength != 0) revert DelegatedManager__ExtensionsExist(extensionsLength);\\n        SET_TOKEN.setManager(_newManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add a new module to the SetToken.\\n     *\\n     * @param _module           New module to add\\n     */\\n    function addModule(address _module) external onlyOwner {\\n        SET_TOKEN.addModule(_module);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove a module from the SetToken.\\n     *\\n     * @param _module           Module to remove\\n     */\\n    function removeModule(address _module) external onlyOwner {\\n        SET_TOKEN.removeModule(_module);\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    function isAllowedAsset(address _asset) external view returns(bool) {\\n        return !useAssetAllowlist || assetAllowlist[_asset];\\n    }\\n\\n    function isPendingExtension(address _extension) external view returns(bool) {\\n        return extensionAllowlist[_extension] == ExtensionState.PENDING;\\n    }\\n\\n    function isInitializedExtension(address _extension) external view returns(bool) {\\n        return extensionAllowlist[_extension] == ExtensionState.INITIALIZED;\\n    }\\n\\n    function getExtensions() external view returns(address[] memory) {\\n        return extensions;\\n    }\\n\\n    function getOperators() external view returns(address[] memory) {\\n        return operators;\\n    }\\n\\n    function getAllowedAssets() external view returns(address[] memory) {\\n        return allowedAssets;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ManagerCore.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\\\";\\nimport { IManagerCore } from \\\"./interfaces/IManagerCore.sol\\\";\\n\\n/**\\n * @title ManagerCore\\n * @author Set Protocol\\n *\\n *  Registry for governance approved GlobalExtensions, DelegatedManagerFactories, and DelegatedManagers.\\n *\\n * CHANGELOG\\n * - 9/12/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n */\\ncontract ManagerCore is IManagerCore, Ownable2Step {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if function is called by any address other than a valid factory.\\n     */\\n    modifier onlyFactory() {\\n        if (!isFactory[msg.sender]) revert ManagerCore__CallerNotFactory(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        if (!isInitialized) revert ManagerCore__ContractUninitialized();\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // List of enabled extensions\\n    address[] public extensions;\\n    // List of enabled factories of managers\\n    address[] public factories;\\n    // List of enabled managers\\n    address[] public managers;\\n\\n    // Mapping to check whether address is valid Extension, Factory, or Manager\\n    mapping(address => bool) public isExtension;\\n    mapping(address => bool) public isFactory;\\n    mapping(address => bool) public isManager;\\n\\n\\n    // Return true if the ManagerCore is initialized\\n    bool public isInitialized;\\n\\n    /* ============ Override Functions ============ */\\n\\n    // Overriding owner() function from IManagerCore to use Ownable2Step's owner from Ownable\\n    function owner() public view override(IManagerCore, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY OWNER: Initializes any predeployed factories. Note: This function can only be called by\\n     * the owner once to batch initialize the initial system contracts.\\n     *\\n     * @param _extensions            List of extensions to add\\n     * @param _factories             List of factories to add\\n     */\\n    function initialize(\\n        address[] calldata _extensions,\\n        address[] calldata _factories\\n    ) external onlyOwner {\\n        if (isInitialized) revert ManagerCore__ContractIsInitialized();\\n\\n        extensions = _extensions;\\n        factories = _factories;\\n\\n        // Loop through and initialize isExtension and isFactory mapping\\n        uint256 extensionsLen = _extensions.length;\\n        for (uint256 i; i < extensionsLen;) {\\n            _addExtension(_extensions[i]);\\n            unchecked { ++i; }\\n        }\\n        uint256 factoriesLen = _factories.length;\\n        for (uint256 i; i < factoriesLen;) {\\n            _addFactory(_factories[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        // Set to true to only allow initialization once\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * ONLY OWNER: Allows governance to add an extension\\n     *\\n     * @param _extension               Address of the extension contract to add\\n     */\\n    function addExtension(address _extension) external onlyInitialized onlyOwner {\\n        if (isExtension[_extension]) revert ManagerCore__ExtensionExists();\\n\\n        _addExtension(_extension);\\n\\n        extensions.push(_extension);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Allows governance to remove an extension\\n     *\\n     * @param _extension               Address of the extension contract to remove\\n     */\\n    function removeExtension(address _extension) external onlyInitialized onlyOwner {\\n        if (!isExtension[_extension]) revert ManagerCore__ExtensionInvalid();\\n\\n        extensions.removeStorage(_extension);\\n\\n        isExtension[_extension] = false;\\n\\n        emit ExtensionRemoved(_extension);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Allows governance to add a factory\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function addFactory(address _factory) external onlyInitialized onlyOwner {\\n        if (isFactory[_factory]) revert ManagerCore__FactoryExists();\\n\\n        _addFactory(_factory);\\n\\n        factories.push(_factory);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Allows governance to remove a factory\\n     *\\n     * @param _factory               Address of the factory contract to remove\\n     */\\n    function removeFactory(address _factory) external onlyInitialized onlyOwner {\\n        if (!isFactory[_factory]) revert ManagerCore__FactoryInvalid();\\n\\n        factories.removeStorage(_factory);\\n\\n        isFactory[_factory] = false;\\n\\n        emit FactoryRemoved(_factory);\\n    }\\n\\n    /**\\n     * ONLY FACTORY: Adds a newly deployed manager as an enabled manager.\\n     *\\n     * @param _manager               Address of the manager contract to add\\n     */\\n    function addManager(address _manager) external onlyInitialized onlyFactory {\\n        if (isManager[_manager]) revert ManagerCore__ManagerExists();\\n\\n        isManager[_manager] = true;\\n\\n        managers.push(_manager);\\n\\n        emit ManagerAdded(_manager, msg.sender);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Allows governance to remove a manager\\n     *\\n     * @param _manager               Address of the manager contract to remove\\n     */\\n    function removeManager(address _manager) external onlyInitialized onlyOwner {\\n        if (!isManager[_manager]) revert ManagerCore__ManagerInvalid();\\n\\n        managers.removeStorage(_manager);\\n\\n        isManager[_manager] = false;\\n\\n        emit ManagerRemoved(_manager);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getExtensions() external view returns (address[] memory) {\\n        return extensions;\\n    }\\n\\n    function getFactories() external view returns (address[] memory) {\\n        return factories;\\n    }\\n\\n    function getManagers() external view returns (address[] memory) {\\n        return managers;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Add an extension tracked on the ManagerCore\\n     *\\n     * @param _extension               Address of the extension contract to add\\n     */\\n    function _addExtension(address _extension) internal {\\n        if (_extension == address(0)) revert ManagerCore__ZeroAddress();\\n\\n        isExtension[_extension] = true;\\n\\n        emit ExtensionAdded(_extension);\\n    }\\n\\n    /**\\n     * Add a factory tracked on the ManagerCore\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function _addFactory(address _factory) internal {\\n        if (_factory == address(0)) revert ManagerCore__ZeroAddress();\\n\\n        isFactory[_factory] = true;\\n\\n        emit FactoryAdded(_factory);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/BaseGlobalExtensionMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\n\\nimport { BaseGlobalExtension } from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\nimport { ModuleMock } from \\\"./ModuleMock.sol\\\";\\n\\ncontract BaseGlobalExtensionMock is BaseGlobalExtension {\\n\\n    /* ============ State Variables ============ */\\n\\n    ModuleMock public immutable MODULE;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IManagerCore _managerCore,\\n        ModuleMock _module\\n    )\\n        BaseGlobalExtension(_managerCore)\\n    {\\n        MODULE = _module;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    )\\n        external\\n        onlyOwnerAndValidManager(_delegatedManager)\\n    {\\n        require(_delegatedManager.isPendingExtension(address(this)), \\\"Extension must be pending\\\");\\n\\n        _initializeExtension(_delegatedManager.SET_TOKEN(), _delegatedManager);\\n    }\\n\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager\\n    )\\n        external\\n        onlyOwnerAndValidManager(_delegatedManager)\\n    {\\n        require(_delegatedManager.isPendingExtension(address(this)), \\\"Extension must be pending\\\");\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n\\n        bytes memory callData = abi.encodeWithSignature(\\\"initialize(address)\\\", setToken);\\n        _invokeManager(_delegatedManager, address(MODULE), callData);\\n    }\\n\\n    function testInvokeManager(ISetToken _setToken, address _module, bytes calldata _encoded) external {\\n        _invokeManager(_manager(_setToken), _module, _encoded);\\n    }\\n\\n    function testOnlyOwner(ISetToken _setToken)\\n        external\\n        onlyOwner(_setToken)\\n    {}\\n\\n    function testOnlyMethodologist(ISetToken _setToken)\\n        external\\n        onlyMethodologist(_setToken)\\n    {}\\n\\n    function testOnlyOperator(ISetToken _setToken)\\n        external\\n        onlyOperator(_setToken)\\n    {}\\n\\n    function testOnlyOwnerAndValidManager(IDelegatedManager _delegatedManager)\\n        external\\n        onlyOwnerAndValidManager(_delegatedManager)\\n    {}\\n\\n    function testOnlyAllowedAsset(ISetToken _setToken, address _asset)\\n        external\\n        onlyAllowedAsset(_setToken, _asset)\\n    {}\\n\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        ISetToken setToken = delegatedManager.SET_TOKEN();\\n\\n        _removeExtension(setToken, delegatedManager);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/ChainlinkAggregatorV3Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ncontract ChainlinkAggregatorV3Mock {\\n\\n    int256 private latestPrice;\\n    uint256 private priceAge;\\n\\n    constructor() {\\n        latestPrice = 0;\\n    }\\n\\n    function setPrice(int256 _price) external {\\n        latestPrice = _price;\\n    }\\n\\n    function latestAnswer() external view returns (int256) {\\n        return latestPrice;\\n    }\\n\\n    function setPriceAge(uint256 _priceAge) external {\\n        priceAge = _priceAge;\\n    }\\n\\n    function latestRoundData() external view returns (\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt\\n    ) {\\n        answer = latestPrice;\\n        updatedAt = block.timestamp - priceAge;\\n        startedAt = updatedAt - 1;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/DynamicDataTradeAdapterMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IExchangeAdapter } from \\\"@amun/amun-protocol/contracts/interfaces/IExchangeAdapter.sol\\\";\\n\\n/**\\n * Dynamic Data Trade Adapter that doubles as a mock exchange with fixed input amount passed from off-chain\\n */\\ncontract DynamicDataTradeAdapterMock is IExchangeAdapter {\\n\\n    event Trade(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    function isDynamicDataAdapter() override external pure returns(bool) {\\n        return true;\\n    }\\n\\n    function getTradeMetadata(\\n        bytes memory _data\\n    )\\n        override\\n        external\\n        pure\\n        returns (bytes4 signature, address fromToken, address toToken, uint256 inputAmount, uint256 minAmountOut) {\\n            // Parse calldata and validate parameters match expected inputs\\n            // solium-disable-next-line security/no-inline-assembly\\n            assembly {            \\n                // Shift pointer by 32 bytes in order to account for bytes length \\n                signature := mload(add(_data, 32))\\n                fromToken := mload(add(_data, 36))\\n                toToken := mload(add(_data, 68))\\n                inputAmount := mload(add(_data, 132))\\n                minAmountOut := mload(add(_data, 164))\\n            }\\n\\n    }\\n    \\n    /* ============ Helper Functions ============ */\\n\\n    function withdraw(address _token)\\n        external\\n    {\\n        uint256 balance = ERC20(_token).balanceOf(address(this));\\n        require(ERC20(_token).transfer(msg.sender, balance), \\\"ERC20 transfer failed\\\");\\n    }\\n\\n    /* ============ Trade Functions ============ */\\n\\n    function trade(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity\\n    )\\n        external\\n    {\\n        uint256 destinationBalance = ERC20(_destinationToken).balanceOf(address(this));\\n        require(ERC20(_sourceToken).transferFrom(_destinationAddress, address(this), _sourceQuantity), \\\"ERC20 TransferFrom failed\\\");\\n\\n        if (_minDestinationQuantity == 1) { // byte revert case, min nonzero uint256 minimum receive quantity\\n            bytes memory data = abi.encodeWithSelector(\\n                bytes4(keccak256(\\\"trade(address,address,address,uint256,uint256)\\\")),\\n                _sourceToken,\\n                _destinationToken,\\n                _destinationAddress,\\n                _sourceQuantity,\\n                _minDestinationQuantity\\n            );\\n            assembly { revert(add(data, 32), mload(data)) }\\n        }\\n        if (destinationBalance >= _minDestinationQuantity) { // normal case\\n            require(ERC20(_destinationToken).transfer(_destinationAddress, destinationBalance), \\\"ERC20 transfer failed\\\");\\n            emit Trade(_sourceToken, _destinationToken, _sourceQuantity, destinationBalance);\\n        }\\n        else { // string revert case, minimum destination quantity not in exchange\\n            revert(\\\"Insufficient funds in exchange\\\");\\n        }\\n    }\\n\\n    /* ============ Adapter Functions ============ */\\n\\n    function getSpender()\\n        override\\n        external\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory /* _data */\\n    )\\n        override\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n        // Encode method data for SetToken to invoke\\n        bytes memory methodData = abi.encodeWithSignature(\\n            \\\"trade(address,address,address,uint256,uint256)\\\",\\n            _sourceToken,\\n            _destinationToken,\\n            _destinationAddress,\\n            _sourceQuantity,\\n            _minDestinationQuantity\\n        );\\n\\n        return (address(this), 0, methodData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/ManagerMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\n\\nimport { IGlobalExtension } from \\\"../interfaces/IGlobalExtension.sol\\\";\\n\\ncontract ManagerMock {\\n    ISetToken public immutable SET_TOKEN;\\n\\n    constructor(\\n        ISetToken _setToken\\n    )\\n    {\\n        SET_TOKEN = _setToken;\\n    }\\n\\n    function removeExtensions(address[] memory _extensions) external {\\n        uint256 extensionsLen = _extensions.length;\\n        for (uint256 i; i < extensionsLen;) {\\n            address extension = _extensions[i];\\n            IGlobalExtension(extension).removeExtension();\\n            unchecked { ++i; }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/ModuleMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"@amun/amun-protocol/contracts/interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { ModuleBase } from \\\"@amun/amun-protocol/contracts/protocol/lib/ModuleBase.sol\\\";\\n\\ncontract ModuleMock is ModuleBase {\\n\\n    bool public removed;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) ModuleBase(_controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    function initialize(\\n        ISetToken _setToken\\n    )\\n        external\\n        onlyValidAndPendingSet(_setToken)\\n        onlySetManager(_setToken, msg.sender)\\n    {\\n        _setToken.initializeModule();\\n    }\\n\\n    function removeModule() external override {\\n        removed = true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/MutualUpgradeMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { MutualUpgrade } from \\\"../lib/MutualUpgrade.sol\\\";\\n\\n\\n// Mock contract implementation of MutualUpgrade functions\\ncontract MutualUpgradeMock is\\n    MutualUpgrade\\n{\\n    uint256 public testUint;\\n    address public owner;\\n    address public methodologist;\\n\\n    constructor(address _owner, address _methodologist) {\\n        owner = _owner;\\n        methodologist = _methodologist;\\n    }\\n\\n    function testMutualUpgrade(\\n        uint256 _testUint\\n    )\\n        external\\n        mutualUpgrade(owner, methodologist)\\n    {\\n        testUint = _testUint;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/MutualUpgradeV2Mock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { MutualUpgradeV2 } from \\\"../lib/MutualUpgradeV2.sol\\\";\\n\\n\\n// Mock contract implementation of MutualUpgradeV2 functions\\ncontract MutualUpgradeV2Mock is\\n    MutualUpgradeV2\\n{\\n    uint256 public testUint;\\n    address public owner;\\n    address public methodologist;\\n\\n    constructor(address _owner, address _methodologist) {\\n        owner = _owner;\\n        methodologist = _methodologist;\\n    }\\n\\n    function testMutualUpgrade(\\n        uint256 _testUint\\n    )\\n        external\\n        mutualUpgrade(owner, methodologist)\\n    {\\n        testUint = _testUint;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/TradeAdapterMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * Trade Adapter that doubles as a mock exchange\\n */\\ncontract TradeAdapterMock {\\n\\n    /* ============ Helper Functions ============ */\\n\\n    function withdraw(address _token)\\n        external\\n    {\\n        uint256 balance = ERC20(_token).balanceOf(address(this));\\n        require(ERC20(_token).transfer(msg.sender, balance), \\\"ERC20 transfer failed\\\");\\n    }\\n\\n    /* ============ Trade Functions ============ */\\n\\n    function trade(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity\\n    )\\n        external\\n    {\\n        uint256 destinationBalance = ERC20(_destinationToken).balanceOf(address(this));\\n        require(ERC20(_sourceToken).transferFrom(_destinationAddress, address(this), _sourceQuantity), \\\"ERC20 TransferFrom failed\\\");\\n        if (_minDestinationQuantity == 1) { // byte revert case, min nonzero uint256 minimum receive quantity\\n            bytes memory data = abi.encodeWithSelector(\\n                bytes4(keccak256(\\\"trade(address,address,address,uint256,uint256)\\\")),\\n                _sourceToken,\\n                _destinationToken,\\n                _destinationAddress,\\n                _sourceQuantity,\\n                _minDestinationQuantity\\n            );\\n            assembly { revert(add(data, 32), mload(data)) }\\n        }\\n        require(destinationBalance >= _minDestinationQuantity, \\\"Insufficient funds in exchange\\\");\\n        require(ERC20(_destinationToken).transfer(_destinationAddress, destinationBalance), \\\"ERC20 transfer failed\\\");\\n    }\\n\\n    /* ============ Adapter Functions ============ */\\n\\n    function getSpender()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory /* _data */\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n        // Encode method data for SetToken to invoke\\n        bytes memory methodData = abi.encodeWithSignature(\\n            \\\"trade(address,address,address,uint256,uint256)\\\",\\n            _sourceToken,\\n            _destinationToken,\\n            _destinationAddress,\\n            _sourceQuantity,\\n            _minDestinationQuantity\\n        );\\n\\n        return (address(this), 0, methodData);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressArrayUtils__ArrayItemNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ManagerCore__CallerNotFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ContractIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ContractUninitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ExtensionExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ExtensionInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__FactoryExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__FactoryInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ManagerExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ManagerInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCore__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"}],\"name\":\"ExtensionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"}],\"name\":\"ExtensionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"}],\"name\":\"addExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extensions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtensions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_extensions\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"}],\"name\":\"removeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManagerCore", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ff59ab5256abed040f5c58487630d05ea2f240ff4df4a08b5a99c2b1465f904"}