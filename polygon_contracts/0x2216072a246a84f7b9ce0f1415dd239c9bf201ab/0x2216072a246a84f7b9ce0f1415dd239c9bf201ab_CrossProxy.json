{"SourceCode": "/**\n *Submitted for verification at moonriver.moonscan.io on 2021-11-09\n*/\n\n/**\n *Submitted for verification at BscScan.com on 2021-03-26\n*/\n\n/**\n *Submitted for verification at BscScan.com on 2021-03-25\n*/\n\n// File: contracts/components/Proxy.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.24;\n\n/**\n * Math operations with safety checks\n */\n\n\ncontract Proxy {\n\n    event Upgraded(address indexed implementation);\n\n    address internal _implementation;\n\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n\n    function () external payable {\n        address _impl = _implementation;\n        require(_impl != address(0), \"implementation contract not set\");\n\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize)\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n            let size := returndatasize\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\n// File: contracts/components/Owned.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.24;\n\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n///  later changed\ncontract Owned {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    address public owner;\n\n    /// @notice The Constructor assigns the message sender to be `owner`\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    address public newOwner;\n\n    function transferOwner(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0), \"New owner is the zero address\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n    ///  an unowned neutral vault, however that cannot be undone\n    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }\n    }\n\n    function renounceOwnership() public onlyOwner {\n        owner = address(0);\n    }\n}\n\n// File: contracts/components/Halt.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.24;\n\n\ncontract Halt is Owned {\n\n    bool public halted = false;\n\n    modifier notHalted() {\n        require(!halted, \"Smart contract is halted\");\n        _;\n    }\n\n    modifier isHalted() {\n        require(halted, \"Smart contract is not halted\");\n        _;\n    }\n\n    /// @notice function Emergency situation that requires\n    /// @notice contribution period to stop or not.\n    function setHalt(bool halt)\n        public\n        onlyOwner\n    {\n        halted = halt;\n    }\n}\n\n// File: contracts/components/ReentrancyGuard.sol\n\npragma solidity 0.4.26;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\n// File: contracts/lib/BasicStorageLib.sol\n\npragma solidity ^0.4.24;\n\nlibrary BasicStorageLib {\n\n    struct UintData {\n        mapping(bytes => mapping(bytes => uint))           _storage;\n    }\n\n    struct BoolData {\n        mapping(bytes => mapping(bytes => bool))           _storage;\n    }\n\n    struct AddressData {\n        mapping(bytes => mapping(bytes => address))        _storage;\n    }\n\n    struct BytesData {\n        mapping(bytes => mapping(bytes => bytes))          _storage;\n    }\n\n    struct StringData {\n        mapping(bytes => mapping(bytes => string))         _storage;\n    }\n\n    /* uintStorage */\n\n    function setStorage(UintData storage self, bytes memory key, bytes memory innerKey, uint value) internal {\n        self._storage[key][innerKey] = value;\n    }\n\n    function getStorage(UintData storage self, bytes memory key, bytes memory innerKey) internal view returns (uint) {\n        return self._storage[key][innerKey];\n    }\n\n    function delStorage(UintData storage self, bytes memory key, bytes memory innerKey) internal {\n        delete self._storage[key][innerKey];\n    }\n\n    /* boolStorage */\n\n    function setStorage(BoolData storage self, bytes memory key, bytes memory innerKey, bool value) internal {\n        self._storage[key][innerKey] = value;\n    }\n\n    function getStorage(BoolData storage self, bytes memory key, bytes memory innerKey) internal view returns (bool) {\n        return self._storage[key][innerKey];\n    }\n\n    function delStorage(BoolData storage self, bytes memory key, bytes memory innerKey) internal {\n        delete self._storage[key][innerKey];\n    }\n\n    /* addressStorage */\n\n    function setStorage(AddressData storage self, bytes memory key, bytes memory innerKey, address value) internal {\n        self._storage[key][innerKey] = value;\n    }\n\n    function getStorage(AddressData storage self, bytes memory key, bytes memory innerKey) internal view returns (address) {\n        return self._storage[key][innerKey];\n    }\n\n    function delStorage(AddressData storage self, bytes memory key, bytes memory innerKey) internal {\n        delete self._storage[key][innerKey];\n    }\n\n    /* bytesStorage */\n\n    function setStorage(BytesData storage self, bytes memory key, bytes memory innerKey, bytes memory value) internal {\n        self._storage[key][innerKey] = value;\n    }\n\n    function getStorage(BytesData storage self, bytes memory key, bytes memory innerKey) internal view returns (bytes memory) {\n        return self._storage[key][innerKey];\n    }\n\n    function delStorage(BytesData storage self, bytes memory key, bytes memory innerKey) internal {\n        delete self._storage[key][innerKey];\n    }\n\n    /* stringStorage */\n\n    function setStorage(StringData storage self, bytes memory key, bytes memory innerKey, string memory value) internal {\n        self._storage[key][innerKey] = value;\n    }\n\n    function getStorage(StringData storage self, bytes memory key, bytes memory innerKey) internal view returns (string memory) {\n        return self._storage[key][innerKey];\n    }\n\n    function delStorage(StringData storage self, bytes memory key, bytes memory innerKey) internal {\n        delete self._storage[key][innerKey];\n    }\n\n}\n\n// File: contracts/components/BasicStorage.sol\n\npragma solidity ^0.4.24;\n\n\ncontract BasicStorage {\n    /************************************************************\n     **\n     ** VARIABLES\n     **\n     ************************************************************/\n\n    //// basic variables\n    using BasicStorageLib for BasicStorageLib.UintData;\n    using BasicStorageLib for BasicStorageLib.BoolData;\n    using BasicStorageLib for BasicStorageLib.AddressData;\n    using BasicStorageLib for BasicStorageLib.BytesData;\n    using BasicStorageLib for BasicStorageLib.StringData;\n\n    BasicStorageLib.UintData    internal uintData;\n    BasicStorageLib.BoolData    internal boolData;\n    BasicStorageLib.AddressData internal addressData;\n    BasicStorageLib.BytesData   internal bytesData;\n    BasicStorageLib.StringData  internal stringData;\n}\n\n// File: contracts/interfaces/IRC20Protocol.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.26;\n\ninterface IRC20Protocol {\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function balanceOf(address _owner) external view returns (uint);\n}\n\n// File: contracts/interfaces/IQuota.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity 0.4.26;\n\ninterface IQuota {\n  function userLock(uint tokenId, bytes32 storemanGroupId, uint value) external;\n  function userBurn(uint tokenId, bytes32 storemanGroupId, uint value) external;\n\n  function smgRelease(uint tokenId, bytes32 storemanGroupId, uint value) external;\n  function smgMint(uint tokenId, bytes32 storemanGroupId, uint value) external;\n\n  function upgrade(bytes32 storemanGroupId) external;\n\n  function transferAsset(bytes32 srcStoremanGroupId, bytes32 dstStoremanGroupId) external;\n  function receiveDebt(bytes32 srcStoremanGroupId, bytes32 dstStoremanGroupId) external;\n\n  function getUserMintQuota(uint tokenId, bytes32 storemanGroupId) external view returns (uint);\n  function getSmgMintQuota(uint tokenId, bytes32 storemanGroupId) external view returns (uint);\n\n  function getUserBurnQuota(uint tokenId, bytes32 storemanGroupId) external view returns (uint);\n  function getSmgBurnQuota(uint tokenId, bytes32 storemanGroupId) external view returns (uint);\n\n  function getAsset(uint tokenId, bytes32 storemanGroupId) external view returns (uint asset, uint asset_receivable, uint asset_payable);\n  function getDebt(uint tokenId, bytes32 storemanGroupId) external view returns (uint debt, uint debt_receivable, uint debt_payable);\n\n  function isDebtClean(bytes32 storemanGroupId) external view returns (bool);\n}\n\n// File: contracts/interfaces/IStoremanGroup.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.24;\n\ninterface IStoremanGroup {\n    function getSelectedSmNumber(bytes32 groupId) external view returns(uint number);\n    function getStoremanGroupConfig(bytes32 id) external view returns(bytes32 groupId, uint8 status, uint deposit, uint chain1, uint chain2, uint curve1, uint curve2,  bytes gpk1, bytes gpk2, uint startTime, uint endTime);\n    function getDeposit(bytes32 id) external view returns(uint);\n    function getStoremanGroupStatus(bytes32 id) external view returns(uint8 status, uint startTime, uint endTime);\n    function setGpk(bytes32 groupId, bytes gpk1, bytes gpk2) external;\n    function setInvalidSm(bytes32 groupId, uint[] indexs, uint8[] slashTypes) external returns(bool isContinue);\n    function getThresholdByGrpId(bytes32 groupId) external view returns (uint);\n    function getSelectedSmInfo(bytes32 groupId, uint index) external view returns(address wkAddr, bytes PK, bytes enodeId);\n    function recordSmSlash(address wk) public;\n}\n\n// File: contracts/interfaces/ITokenManager.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity 0.4.26;\n\ninterface ITokenManager {\n    function getTokenPairInfo(uint id) external view\n      returns (uint origChainID, bytes tokenOrigAccount, uint shadowChainID, bytes tokenShadowAccount);\n\n    function getTokenPairInfoSlim(uint id) external view \n      returns (uint origChainID, bytes tokenOrigAccount, uint shadowChainID);\n\n    function getAncestorInfo(uint id) external view\n      returns (bytes account, string name, string symbol, uint8 decimals, uint chainId);\n\n    function mintToken(address tokenAddress, address to, uint value) external;\n\n    function burnToken(address tokenAddress, address from, uint value) external;\n}\n\n// File: contracts/interfaces/ISignatureVerifier.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity 0.4.26;\n\ninterface ISignatureVerifier {\n  function verify(\n        uint curveId,\n        bytes32 signature,\n        bytes32 groupKeyX,\n        bytes32 groupKeyY,\n        bytes32 randomPointX,\n        bytes32 randomPointY,\n        bytes32 message\n    ) external returns (bool);\n}\n\n// File: contracts/lib/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath mul overflow\");\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath div 0\"); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath sub b > a\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath add overflow\");\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath mod 0\");\n        return a % b;\n    }\n}\n\n// File: contracts/crossApproach/lib/HTLCTxLib.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.26;\npragma experimental ABIEncoderV2;\n\n\nlibrary HTLCTxLib {\n    using SafeMath for uint;\n\n    /**\n     *\n     * ENUMS\n     *\n     */\n\n    /// @notice tx info status\n    /// @notice uninitialized,locked,redeemed,revoked\n    enum TxStatus {None, Locked, Redeemed, Revoked, AssetLocked, DebtLocked}\n\n    /**\n     *\n     * STRUCTURES\n     *\n     */\n\n    /// @notice struct of HTLC user mint lock parameters\n    struct HTLCUserParams {\n        bytes32 xHash;                  /// hash of HTLC random number\n        bytes32 smgID;                  /// ID of storeman group which user has selected\n        uint tokenPairID;               /// token pair id on cross chain\n        uint value;                     /// exchange token value\n        uint lockFee;                   /// exchange token value\n        uint lockedTime;                /// HTLC lock time\n    }\n\n    /// @notice HTLC(Hashed TimeLock Contract) tx info\n    struct BaseTx {\n        bytes32 smgID;                  /// HTLC transaction storeman ID\n        uint lockedTime;                /// HTLC transaction locked time\n        uint beginLockedTime;           /// HTLC transaction begin locked time\n        TxStatus status;                /// HTLC transaction status\n    }\n\n    /// @notice user  tx info\n    struct UserTx {\n        BaseTx baseTx;\n        uint tokenPairID;\n        uint value;\n        uint fee;\n        address userAccount;            /// HTLC transaction sender address for the security check while user's revoke\n    }\n    /// @notice storeman  tx info\n    struct SmgTx {\n        BaseTx baseTx;\n        uint tokenPairID;\n        uint value;\n        address  userAccount;          /// HTLC transaction user address for the security check while user's redeem\n    }\n    /// @notice storeman  debt tx info\n    struct DebtTx {\n        BaseTx baseTx;\n        bytes32 srcSmgID;              /// HTLC transaction sender(source storeman) ID\n    }\n\n    struct Data {\n        /// @notice mapping of hash(x) to UserTx -- xHash->htlcUserTxData\n        mapping(bytes32 => UserTx) mapHashXUserTxs;\n\n        /// @notice mapping of hash(x) to SmgTx -- xHash->htlcSmgTxData\n        mapping(bytes32 => SmgTx) mapHashXSmgTxs;\n\n        /// @notice mapping of hash(x) to DebtTx -- xHash->htlcDebtTxData\n        mapping(bytes32 => DebtTx) mapHashXDebtTxs;\n\n    }\n\n    /**\n     *\n     * MANIPULATIONS\n     *\n     */\n\n    /// @notice                     add user transaction info\n    /// @param params               parameters for user tx\n    function addUserTx(Data storage self, HTLCUserParams memory params)\n        public\n    {\n        UserTx memory userTx = self.mapHashXUserTxs[params.xHash];\n        // UserTx storage userTx = self.mapHashXUserTxs[params.xHash];\n        // require(params.value != 0, \"Value is invalid\");\n        require(userTx.baseTx.status == TxStatus.None, \"User tx exists\");\n\n        userTx.baseTx.smgID = params.smgID;\n        userTx.baseTx.lockedTime = params.lockedTime;\n        userTx.baseTx.beginLockedTime = now;\n        userTx.baseTx.status = TxStatus.Locked;\n        userTx.tokenPairID = params.tokenPairID;\n        userTx.value = params.value;\n        userTx.fee = params.lockFee;\n        userTx.userAccount = msg.sender;\n\n        self.mapHashXUserTxs[params.xHash] = userTx;\n    }\n\n    /// @notice                     refund coins from HTLC transaction, which is used for storeman redeem(outbound)\n    /// @param x                    HTLC random number\n    function redeemUserTx(Data storage self, bytes32 x)\n        external\n        returns(bytes32 xHash)\n    {\n        xHash = sha256(abi.encodePacked(x));\n\n        UserTx storage userTx = self.mapHashXUserTxs[xHash];\n        require(userTx.baseTx.status == TxStatus.Locked, \"Status is not locked\");\n        require(now < userTx.baseTx.beginLockedTime.add(userTx.baseTx.lockedTime), \"Redeem timeout\");\n\n        userTx.baseTx.status = TxStatus.Redeemed;\n\n        return xHash;\n    }\n\n    /// @notice                     revoke user transaction\n    /// @param  xHash               hash of HTLC random number\n    function revokeUserTx(Data storage self, bytes32 xHash)\n        external\n    {\n        UserTx storage userTx = self.mapHashXUserTxs[xHash];\n        require(userTx.baseTx.status == TxStatus.Locked, \"Status is not locked\");\n        require(now >= userTx.baseTx.beginLockedTime.add(userTx.baseTx.lockedTime), \"Revoke is not permitted\");\n\n        userTx.baseTx.status = TxStatus.Revoked;\n    }\n\n    /// @notice                    function for get user info\n    /// @param xHash               hash of HTLC random number\n    /// @return smgID              ID of storeman which user has selected\n    /// @return tokenPairID        token pair ID of cross chain\n    /// @return value              exchange value\n    /// @return fee                exchange fee\n    /// @return userAccount        HTLC transaction sender address for the security check while user's revoke\n    function getUserTx(Data storage self, bytes32 xHash)\n        external\n        view\n        returns (bytes32, uint, uint, uint, address)\n    {\n        UserTx storage userTx = self.mapHashXUserTxs[xHash];\n        return (userTx.baseTx.smgID, userTx.tokenPairID, userTx.value, userTx.fee, userTx.userAccount);\n    }\n\n    /// @notice                     add storeman transaction info\n    /// @param  xHash               hash of HTLC random number\n    /// @param  smgID               ID of the storeman which user has selected\n    /// @param  tokenPairID         token pair ID of cross chain\n    /// @param  value               HTLC transfer value of token\n    /// @param  userAccount            user account address on the destination chain, which is used to redeem token\n    function addSmgTx(Data storage self, bytes32 xHash, bytes32 smgID, uint tokenPairID, uint value, address userAccount, uint lockedTime)\n        external\n    {\n        SmgTx memory smgTx = self.mapHashXSmgTxs[xHash];\n        // SmgTx storage smgTx = self.mapHashXSmgTxs[xHash];\n        require(value != 0, \"Value is invalid\");\n        require(smgTx.baseTx.status == TxStatus.None, \"Smg tx exists\");\n\n        smgTx.baseTx.smgID = smgID;\n        smgTx.baseTx.status = TxStatus.Locked;\n        smgTx.baseTx.lockedTime = lockedTime;\n        smgTx.baseTx.beginLockedTime = now;\n        smgTx.tokenPairID = tokenPairID;\n        smgTx.value = value;\n        smgTx.userAccount = userAccount;\n\n        self.mapHashXSmgTxs[xHash] = smgTx;\n    }\n\n    /// @notice                     refund coins from HTLC transaction, which is used for users redeem(inbound)\n    /// @param x                    HTLC random number\n    function redeemSmgTx(Data storage self, bytes32 x)\n        external\n        returns(bytes32 xHash)\n    {\n        xHash = sha256(abi.encodePacked(x));\n\n        SmgTx storage smgTx = self.mapHashXSmgTxs[xHash];\n        require(smgTx.baseTx.status == TxStatus.Locked, \"Status is not locked\");\n        require(now < smgTx.baseTx.beginLockedTime.add(smgTx.baseTx.lockedTime), \"Redeem timeout\");\n\n        smgTx.baseTx.status = TxStatus.Redeemed;\n\n        return xHash;\n    }\n\n    /// @notice                     revoke storeman transaction\n    /// @param  xHash               hash of HTLC random number\n    function revokeSmgTx(Data storage self, bytes32 xHash)\n        external\n    {\n        SmgTx storage smgTx = self.mapHashXSmgTxs[xHash];\n        require(smgTx.baseTx.status == TxStatus.Locked, \"Status is not locked\");\n        require(now >= smgTx.baseTx.beginLockedTime.add(smgTx.baseTx.lockedTime), \"Revoke is not permitted\");\n\n        smgTx.baseTx.status = TxStatus.Revoked;\n    }\n\n    /// @notice                     function for get smg info\n    /// @param xHash                hash of HTLC random number\n    /// @return smgID               ID of storeman which user has selected\n    /// @return tokenPairID         token pair ID of cross chain\n    /// @return value               exchange value\n    /// @return userAccount            user account address for redeem\n    function getSmgTx(Data storage self, bytes32 xHash)\n        external\n        view\n        returns (bytes32, uint, uint, address)\n    {\n        SmgTx storage smgTx = self.mapHashXSmgTxs[xHash];\n        return (smgTx.baseTx.smgID, smgTx.tokenPairID, smgTx.value, smgTx.userAccount);\n    }\n\n    /// @notice                     add storeman transaction info\n    /// @param  xHash               hash of HTLC random number\n    /// @param  srcSmgID            ID of source storeman group\n    /// @param  destSmgID           ID of the storeman which will take over of the debt of source storeman group\n    /// @param  lockedTime          HTLC lock time\n    /// @param  status              Status, should be 'Locked' for asset or 'DebtLocked' for debt\n    function addDebtTx(Data storage self, bytes32 xHash, bytes32 srcSmgID, bytes32 destSmgID, uint lockedTime, TxStatus status)\n        external\n    {\n        DebtTx memory debtTx = self.mapHashXDebtTxs[xHash];\n        // DebtTx storage debtTx = self.mapHashXDebtTxs[xHash];\n        require(debtTx.baseTx.status == TxStatus.None, \"Debt tx exists\");\n\n        debtTx.baseTx.smgID = destSmgID;\n        debtTx.baseTx.status = status;//TxStatus.Locked;\n        debtTx.baseTx.lockedTime = lockedTime;\n        debtTx.baseTx.beginLockedTime = now;\n        debtTx.srcSmgID = srcSmgID;\n\n        self.mapHashXDebtTxs[xHash] = debtTx;\n    }\n\n    /// @notice                     refund coins from HTLC transaction\n    /// @param x                    HTLC random number\n    /// @param status               Status, should be 'Locked' for asset or 'DebtLocked' for debt\n    function redeemDebtTx(Data storage self, bytes32 x, TxStatus status)\n        external\n        returns(bytes32 xHash)\n    {\n        xHash = sha256(abi.encodePacked(x));\n\n        DebtTx storage debtTx = self.mapHashXDebtTxs[xHash];\n        // require(debtTx.baseTx.status == TxStatus.Locked, \"Status is not locked\");\n        require(debtTx.baseTx.status == status, \"Status is not locked\");\n        require(now < debtTx.baseTx.beginLockedTime.add(debtTx.baseTx.lockedTime), \"Redeem timeout\");\n\n        debtTx.baseTx.status = TxStatus.Redeemed;\n\n        return xHash;\n    }\n\n    /// @notice                     revoke debt transaction, which is used for source storeman group\n    /// @param  xHash               hash of HTLC random number\n    /// @param  status              Status, should be 'Locked' for asset or 'DebtLocked' for debt\n    function revokeDebtTx(Data storage self, bytes32 xHash, TxStatus status)\n        external\n    {\n        DebtTx storage debtTx = self.mapHashXDebtTxs[xHash];\n        // require(debtTx.baseTx.status == TxStatus.Locked, \"Status is not locked\");\n        require(debtTx.baseTx.status == status, \"Status is not locked\");\n        require(now >= debtTx.baseTx.beginLockedTime.add(debtTx.baseTx.lockedTime), \"Revoke is not permitted\");\n\n        debtTx.baseTx.status = TxStatus.Revoked;\n    }\n\n    /// @notice                     function for get debt info\n    /// @param xHash                hash of HTLC random number\n    /// @return srcSmgID            ID of source storeman\n    /// @return destSmgID           ID of destination storeman\n    function getDebtTx(Data storage self, bytes32 xHash)\n        external\n        view\n        returns (bytes32, bytes32)\n    {\n        DebtTx storage debtTx = self.mapHashXDebtTxs[xHash];\n        return (debtTx.srcSmgID, debtTx.baseTx.smgID);\n    }\n\n    function getLeftTime(uint endTime) private view returns (uint) {\n        if (now < endTime) {\n            return endTime.sub(now);\n        }\n        return 0;\n    }\n\n    /// @notice                     function for get debt info\n    /// @param xHash                hash of HTLC random number\n    /// @return leftTime            the left lock time\n    function getLeftLockedTime(Data storage self, bytes32 xHash)\n        external\n        view\n        returns (uint)\n    {\n        UserTx storage userTx = self.mapHashXUserTxs[xHash];\n        if (userTx.baseTx.status != TxStatus.None) {\n            return getLeftTime(userTx.baseTx.beginLockedTime.add(userTx.baseTx.lockedTime));\n        }\n        SmgTx storage smgTx = self.mapHashXSmgTxs[xHash];\n        if (smgTx.baseTx.status != TxStatus.None) {\n            return getLeftTime(smgTx.baseTx.beginLockedTime.add(smgTx.baseTx.lockedTime));\n        }\n        DebtTx storage debtTx = self.mapHashXDebtTxs[xHash];\n        if (debtTx.baseTx.status != TxStatus.None) {\n            return getLeftTime(debtTx.baseTx.beginLockedTime.add(debtTx.baseTx.lockedTime));\n        }\n        require(false, 'invalid xHash');\n    }\n}\n\n// File: contracts/crossApproach/lib/RapidityTxLib.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.26;\n\nlibrary RapidityTxLib {\n\n    /**\n     *\n     * ENUMS\n     *\n     */\n\n    /// @notice tx info status\n    /// @notice uninitialized,Redeemed\n    enum TxStatus {None, Redeemed}\n\n    /**\n     *\n     * STRUCTURES\n     *\n     */\n    struct Data {\n        /// @notice mapping of uniqueID to TxStatus -- uniqueID->TxStatus\n        mapping(bytes32 => TxStatus) mapTxStatus;\n\n    }\n\n    /**\n     *\n     * MANIPULATIONS\n     *\n     */\n\n    /// @notice                     add user transaction info\n    /// @param  uniqueID            Rapidity random number\n    function addRapidityTx(Data storage self, bytes32 uniqueID)\n        internal\n    {\n        TxStatus status = self.mapTxStatus[uniqueID];\n        require(status == TxStatus.None, \"Rapidity tx exists\");\n        self.mapTxStatus[uniqueID] = TxStatus.Redeemed;\n    }\n}\n\n// File: contracts/crossApproach/lib/CrossTypes.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.26;\n\n\n\n\n\n\n\n\nlibrary CrossTypes {\n    using SafeMath for uint;\n\n    /**\n     *\n     * STRUCTURES\n     *\n     */\n\n    struct Data {\n\n        /// map of the htlc transaction info\n        HTLCTxLib.Data htlcTxData;\n\n        /// map of the rapidity transaction info\n        RapidityTxLib.Data rapidityTxData;\n\n        /// quota data of storeman group\n        IQuota quota;\n\n        /// token manager instance interface\n        ITokenManager tokenManager;\n\n        /// storemanGroup admin instance interface\n        IStoremanGroup smgAdminProxy;\n\n        /// storemanGroup fee admin instance address\n        address smgFeeProxy;\n\n        ISignatureVerifier sigVerifier;\n\n        /// @notice transaction fee, smgID => fee\n        mapping(bytes32 => uint) mapStoremanFee;\n\n        /// @notice transaction fee, origChainID => shadowChainID => fee\n        mapping(uint => mapping(uint =>uint)) mapLockFee;\n\n        /// @notice transaction fee, origChainID => shadowChainID => fee\n        mapping(uint => mapping(uint =>uint)) mapRevokeFee;\n\n    }\n\n    /**\n     *\n     * MANIPULATIONS\n     *\n     */\n\n    // /// @notice       convert bytes32 to address\n    // /// @param b      bytes32\n    // function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n    //     return address(uint160(bytes20(b))); // high\n    //     // return address(uint160(uint256(b))); // low\n    // }\n\n    /// @notice       convert bytes to address\n    /// @param b      bytes\n    function bytesToAddress(bytes b) internal pure returns (address addr) {\n        assembly {\n            addr := mload(add(b,20))\n        }\n    }\n\n    function transfer(address tokenScAddr, address to, uint value)\n        internal\n        returns(bool)\n    {\n        uint beforeBalance;\n        uint afterBalance;\n        beforeBalance = IRC20Protocol(tokenScAddr).balanceOf(to);\n        // IRC20Protocol(tokenScAddr).transfer(to, value);\n        tokenScAddr.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, value);\n        afterBalance = IRC20Protocol(tokenScAddr).balanceOf(to);\n        return afterBalance == beforeBalance.add(value);\n    }\n\n    function transferFrom(address tokenScAddr, address from, address to, uint value)\n        internal\n        returns(bool)\n    {\n        uint beforeBalance;\n        uint afterBalance;\n        beforeBalance = IRC20Protocol(tokenScAddr).balanceOf(to);\n        // IRC20Protocol(tokenScAddr).transferFrom(from, to, value);\n        tokenScAddr.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), from, to, value);\n        afterBalance = IRC20Protocol(tokenScAddr).balanceOf(to);\n        return afterBalance == beforeBalance.add(value);\n    }\n}\n\n// File: contracts/crossApproach/CrossStorage.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.26;\n\n\n\n\n\ncontract CrossStorage is BasicStorage {\n    using HTLCTxLib for HTLCTxLib.Data;\n    using RapidityTxLib for RapidityTxLib.Data;\n\n    /************************************************************\n     **\n     ** VARIABLES\n     **\n     ************************************************************/\n\n    CrossTypes.Data internal storageData;\n\n    /// @notice locked time(in seconds)\n    uint public lockedTime = uint(3600*36);\n\n    /// @notice Since storeman group admin receiver address may be changed, system should make sure the new address\n    /// @notice can be used, and the old address can not be used. The solution is add timestamp.\n    /// @notice unit: second\n    uint public smgFeeReceiverTimeout = uint(10*60);\n\n    enum GroupStatus { none, initial, curveSeted, failed, selected, ready, unregistered, dismissed }\n\n}\n\n// File: contracts/crossApproach/CrossProxy.sol\n\n/*\n\n  Copyright 2019 Wanchain Foundation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n//                            _           _           _\n//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n//\n//\n\npragma solidity ^0.4.26;\n\n/**\n * Math operations with safety checks\n */\n\n\n\n\n\n\ncontract CrossProxy is CrossStorage, ReentrancyGuard, Halt, Proxy {\n\n    ///@dev                   update the address of CrossDelegate contract\n    ///@param impl            the address of the new CrossDelegate contract\n    function upgradeTo(address impl) public onlyOwner {\n        require(impl != address(0), \"Cannot upgrade to invalid address\");\n        require(impl != _implementation, \"Cannot upgrade to the same implementation\");\n        _implementation = impl;\n        emit Upgraded(impl);\n    }\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smgFeeReceiverTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "CrossProxy", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x6a60b5099b68ac80b28f44eb30894c7d165a72f6", "SwarmSource": ""}