{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/core/BasePaymaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable reason-string */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IPaymaster.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Helper class for creating a paymaster.\\n * provides helper methods for staking.\\n * Validates that the postOp is called only by the entryPoint.\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable {\\n  IEntryPoint public immutable entryPoint;\\n\\n  constructor(IEntryPoint _entryPoint) {\\n    entryPoint = _entryPoint;\\n  }\\n\\n  /// @inheritdoc IPaymaster\\n  function validatePaymasterUserOp(\\n    UserOperation calldata userOp,\\n    bytes32 userOpHash,\\n    uint256 maxCost\\n  ) external override returns (bytes memory context, uint256 validationData) {\\n    _requireFromEntryPoint();\\n    return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\\n  }\\n\\n  /**\\n   * Validate a user operation.\\n   * @param userOp     - The user operation.\\n   * @param userOpHash - The hash of the user operation.\\n   * @param maxCost    - The maximum cost of the user operation.\\n   */\\n  function _validatePaymasterUserOp(\\n    UserOperation calldata userOp,\\n    bytes32 userOpHash,\\n    uint256 maxCost\\n  ) internal virtual returns (bytes memory context, uint256 validationData);\\n\\n  /// @inheritdoc IPaymaster\\n  function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external override {\\n    _requireFromEntryPoint();\\n    _postOp(mode, context, actualGasCost);\\n  }\\n\\n  /**\\n   * Post-operation handler.\\n   * (verified to be called only through the entryPoint)\\n   * @dev If subclass returns a non-empty context from validatePaymasterUserOp,\\n   *      it must also implement this method.\\n   * @param mode          - Enum with the following options:\\n   *                        opSucceeded - User operation succeeded.\\n   *                        opReverted  - User op reverted. still has to pay for gas.\\n   *                        postOpReverted - User op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n   *                                         Now this is the 2nd call, after user's op was deliberately reverted.\\n   * @param context       - The context value returned by validatePaymasterUserOp\\n   * @param actualGasCost - Actual gas used so far (without this postOp call).\\n   */\\n  function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal virtual {\\n    (mode, context, actualGasCost); // unused params\\n    // subclass must override this method if validatePaymasterUserOp returns a context\\n    revert(\\\"must override\\\");\\n  }\\n\\n  /**\\n   * Add a deposit for this paymaster, used for paying for transaction fees.\\n   */\\n  function deposit() public payable {\\n    entryPoint.depositTo{ value: msg.value }(address(this));\\n  }\\n\\n  /**\\n   * Withdraw value from the deposit.\\n   * @param withdrawAddress - Target to send to.\\n   * @param amount          - Amount to withdraw.\\n   */\\n  function withdrawTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\n    entryPoint.withdrawTo(withdrawAddress, amount);\\n  }\\n\\n  /**\\n   * Add stake for this paymaster.\\n   * This method can also carry eth value to add to the current stake.\\n   * @param unstakeDelaySec - The unstake delay for this paymaster. Can only be increased.\\n   */\\n  function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\\n    entryPoint.addStake{ value: msg.value }(unstakeDelaySec);\\n  }\\n\\n  /**\\n   * Return current paymaster's deposit on the entryPoint.\\n   */\\n  function getDeposit() public view returns (uint256) {\\n    return entryPoint.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * Unlock the stake, in order to withdraw it.\\n   * The paymaster can't serve requests once unlocked, until it calls addStake again\\n   */\\n  function unlockStake() external onlyOwner {\\n    entryPoint.unlockStake();\\n  }\\n\\n  /**\\n   * Withdraw the entire paymaster's stake.\\n   * stake must be unlocked first (and then wait for the unstakeDelay to be over)\\n   * @param withdrawAddress - The address to send withdrawn value.\\n   */\\n  function withdrawStake(address payable withdrawAddress) external onlyOwner {\\n    entryPoint.withdrawStake(withdrawAddress);\\n  }\\n\\n  /**\\n   * Validate the call is made from a valid entrypoint\\n   */\\n  function _requireFromEntryPoint() internal virtual {\\n    require(msg.sender == address(entryPoint), \\\"Sender not EntryPoint\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * Returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and\\n * parsed by `_parseValidationData`.\\n * @param aggregator  - address(0) - The account validated the signature by itself.\\n *                      address(1) - The account failed to validate the signature.\\n *                      otherwise - This is an address of a signature aggregator that must\\n *                                  be used to validate the signature.\\n * @param validAfter  - This UserOp is valid only after this timestamp.\\n * @param validaUntil - This UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n  address aggregator;\\n  uint48 validAfter;\\n  uint48 validUntil;\\n}\\n\\n/**\\n * Extract sigFailed, validAfter, validUntil.\\n * Also convert zero validUntil to type(uint48).max.\\n * @param validationData - The packed validation data.\\n */\\nfunction _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n  address aggregator = address(uint160(validationData));\\n  uint48 validUntil = uint48(validationData >> 160);\\n  if (validUntil == 0) {\\n    validUntil = type(uint48).max;\\n  }\\n  uint48 validAfter = uint48(validationData >> (48 + 160));\\n  return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * Intersect account and paymaster ranges.\\n * @param validationData          - The packed validation data of the account.\\n * @param paymasterValidationData - The packed validation data of the paymaster.\\n */\\nfunction _intersectTimeRange(\\n  uint256 validationData,\\n  uint256 paymasterValidationData\\n) pure returns (ValidationData memory) {\\n  ValidationData memory accountValidationData = _parseValidationData(validationData);\\n  ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n  address aggregator = accountValidationData.aggregator;\\n  if (aggregator == address(0)) {\\n    aggregator = pmValidationData.aggregator;\\n  }\\n  uint48 validAfter = accountValidationData.validAfter;\\n  uint48 validUntil = accountValidationData.validUntil;\\n  uint48 pmValidAfter = pmValidationData.validAfter;\\n  uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n  if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n  if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n  return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * Helper to pack the return value for validateUserOp.\\n * @param data - The ValidationData to pack.\\n */\\nfunction _packValidationData(ValidationData memory data) pure returns (uint256) {\\n  return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * Helper to pack the return value for validateUserOp, when not using an aggregator.\\n * @param sigFailed  - True for signature failure, false for success.\\n * @param validUntil - Last timestamp this UserOperation is valid (or zero for infinite).\\n * @param validAfter - First timestamp this UserOperation is valid.\\n */\\nfunction _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n  return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n}\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\nfunction calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n  assembly {\\n    let mem := mload(0x40)\\n    let len := data.length\\n    calldatacopy(mem, data.offset, len)\\n    ret := keccak256(mem, len)\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n  /**\\n   * Validate aggregated signature.\\n   * Revert if the aggregated signature does not match the given list of operations.\\n   * @param userOps   - Array of UserOperations to validate the signature for.\\n   * @param signature - The aggregated signature.\\n   */\\n  function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n  /**\\n   * Validate signature of a single userOp.\\n   * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n   * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n   * @param userOp        - The userOperation received from the user.\\n   * @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\\n   *                        (usually empty, unless account and aggregator support some kind of \\\"multisig\\\".\\n   */\\n  function validateUserOpSignature(UserOperation calldata userOp) external view returns (bytes memory sigForUserOp);\\n\\n  /**\\n   * Aggregate multiple signatures into a single value.\\n   * This method is called off-chain to calculate the signature to pass with handleOps()\\n   * bundler MAY use optimized custom code perform this aggregation.\\n   * @param userOps              - Array of UserOperations to collect the signatures from.\\n   * @return aggregatedSignature - The aggregated signature.\\n   */\\n  function aggregateSignatures(\\n    UserOperation[] calldata userOps\\n  ) external view returns (bytes memory aggregatedSignature);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEntryPoint.sol\": {\r\n      \"content\": \"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n  /***\\n   * An event emitted after each successful request.\\n   * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\\n   * @param sender        - The account that generates this request.\\n   * @param paymaster     - If non-null, the paymaster that pays for this request.\\n   * @param nonce         - The nonce value from the request.\\n   * @param success       - True if the sender transaction succeeded, false if reverted.\\n   * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\\n   * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\\n   *                        validation and execution).\\n   */\\n  event UserOperationEvent(\\n    bytes32 indexed userOpHash,\\n    address indexed sender,\\n    address indexed paymaster,\\n    uint256 nonce,\\n    bool success,\\n    uint256 actualGasCost,\\n    uint256 actualGasUsed\\n  );\\n\\n  /**\\n   * Account \\\"sender\\\" was deployed.\\n   * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\\n   * @param sender     - The account that is deployed\\n   * @param factory    - The factory used to deploy this account (in the initCode)\\n   * @param paymaster  - The paymaster used by this UserOp\\n   */\\n  event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n  /**\\n   * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length.\\n   * @param userOpHash   - The request unique identifier.\\n   * @param sender       - The sender of this request.\\n   * @param nonce        - The nonce used in the request.\\n   * @param revertReason - The return bytes from the (reverted) call to \\\"callData\\\".\\n   */\\n  event UserOperationRevertReason(\\n    bytes32 indexed userOpHash,\\n    address indexed sender,\\n    uint256 nonce,\\n    bytes revertReason\\n  );\\n\\n  /**\\n   * An event emitted by handleOps(), before starting the execution loop.\\n   * Any event emitted before this event, is part of the validation.\\n   */\\n  event BeforeExecution();\\n\\n  /**\\n   * Signature aggregator used by the following UserOperationEvents within this bundle.\\n   * @param aggregator - The aggregator used for the following UserOperationEvents.\\n   */\\n  event SignatureAggregatorChanged(address indexed aggregator);\\n\\n  /**\\n   * A custom revert error of handleOps, to identify the offending op.\\n   * Should be caught in off-chain handleOps simulation and not happen on-chain.\\n   * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n   * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n   * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\\n   * @param reason  - Revert reason. The string starts with a unique code \\\"AAmn\\\",\\n   *                  where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n   *                  so a failure can be attributed to the correct entity.\\n   */\\n  error FailedOp(uint256 opIndex, string reason);\\n\\n  /**\\n   * Error case when a signature aggregator fails to verify the aggregated signature it had created.\\n   * @param aggregator The aggregator that failed to verify the signature\\n   */\\n  error SignatureValidationFailed(address aggregator);\\n\\n  // Return value of getSenderAddress.\\n  error SenderAddressResult(address sender);\\n\\n  // UserOps handled, per aggregator.\\n  struct UserOpsPerAggregator {\\n    UserOperation[] userOps;\\n    // Aggregator address\\n    IAggregator aggregator;\\n    // Aggregated signature\\n    bytes signature;\\n  }\\n\\n  /**\\n   * Execute a batch of UserOperations.\\n   * No signature aggregator is used.\\n   * If any account requires an aggregator (that is, it returned an aggregator when\\n   * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n   * @param ops         - The operations to execute.\\n   * @param beneficiary - The address to receive the fees.\\n   */\\n  function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n  /**\\n   * Execute a batch of UserOperation with Aggregators\\n   * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\\n   * @param beneficiary      - The address to receive the fees.\\n   */\\n  function handleAggregatedOps(UserOpsPerAggregator[] calldata opsPerAggregator, address payable beneficiary) external;\\n\\n  /**\\n   * Generate a request Id - unique identifier for this request.\\n   * The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n   * @param userOp - The user operation to generate the request ID for.\\n   */\\n  function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n  /**\\n   * Gas and return values during simulation.\\n   * @param preOpGas         - The gas used for validation (including preValidationGas)\\n   * @param prefund          - The required prefund for this operation\\n   * @param sigFailed        - ValidateUserOp's (or paymaster's) signature check failed\\n   * @param validAfter       - First timestamp this UserOp is valid (merging account and paymaster time-range)\\n   * @param validUntil       - Last timestamp this UserOp is valid (merging account and paymaster time-range)\\n   * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\\n   */\\n  struct ReturnInfo {\\n    uint256 preOpGas;\\n    uint256 prefund;\\n    bool sigFailed;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n    bytes paymasterContext;\\n  }\\n\\n  /**\\n   * Returned aggregated signature info:\\n   * The aggregator returned by the account, and its current stake.\\n   */\\n  struct AggregatorStakeInfo {\\n    address aggregator;\\n    StakeInfo stakeInfo;\\n  }\\n\\n  /**\\n   * Get counterfactual sender address.\\n   * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n   * This method always revert, and returns the address in SenderAddressResult error\\n   * @param initCode - The constructor code to be passed into the UserOperation.\\n   */\\n  function getSenderAddress(bytes memory initCode) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INonceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n  /**\\n   * Return the next nonce for this sender.\\n   * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n   * But UserOp with different keys can come with arbitrary order.\\n   *\\n   * @param sender the account address\\n   * @param key the high 192 bit of the nonce\\n   * @return nonce a full nonce to pass for next UserOp with this sender.\\n   */\\n  function getNonce(address sender, uint192 key) external view returns (uint256 nonce);\\n\\n  /**\\n   * Manually increment the nonce of the sender.\\n   * This method is exposed just for completeness..\\n   * Account does NOT need to call it, neither during validation, nor elsewhere,\\n   * as the EntryPoint will update the nonce regardless.\\n   * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n   * UserOperations will not pay extra for the first transaction with a given key.\\n   */\\n  function incrementNonce(uint192 key) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPaymaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * The interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * A paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n  enum PostOpMode {\\n    // User op succeeded.\\n    opSucceeded,\\n    // User op reverted. Still has to pay for gas.\\n    opReverted,\\n    // User op succeeded, but caused postOp to revert.\\n    // Now it's a 2nd call, after user's op was deliberately reverted.\\n    postOpReverted\\n  }\\n\\n  /**\\n   * Payment validation: check if paymaster agrees to pay.\\n   * Must verify sender is the entryPoint.\\n   * Revert to reject this request.\\n   * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted).\\n   * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n   * @param userOp          - The user operation.\\n   * @param userOpHash      - Hash of the user's request data.\\n   * @param maxCost         - The maximum cost of this transaction (based on maximum gas and gas price from userOp).\\n   * @return context        - Value to send to a postOp. Zero length to signify postOp is not required.\\n   * @return validationData - Signature and time-range of this operation, encoded the same as the return\\n   *                          value of validateUserOperation.\\n   *                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n   *                                                    otherwise, an address of an \\\"authorizer\\\" contract.\\n   *                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n   *                          <6-byte> validAfter - first timestamp this operation is valid\\n   *                          Note that the validation code cannot use block.timestamp (or block.number) directly.\\n   */\\n  function validatePaymasterUserOp(\\n    UserOperation calldata userOp,\\n    bytes32 userOpHash,\\n    uint256 maxCost\\n  ) external returns (bytes memory context, uint256 validationData);\\n\\n  /**\\n   * Post-operation handler.\\n   * Must verify sender is the entryPoint.\\n   * @param mode          - Enum with the following options:\\n   *                        opSucceeded - User operation succeeded.\\n   *                        opReverted  - User op reverted. still has to pay for gas.\\n   *                        postOpReverted - User op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n   *                                         Now this is the 2nd call, after user's op was deliberately reverted.\\n   * @param context       - The context value returned by validatePaymasterUserOp\\n   * @param actualGasCost - Actual gas used so far (without this postOp call).\\n   */\\n  function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * Manage deposits and stakes.\\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\\n * Stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n  event Deposited(address indexed account, uint256 totalDeposit);\\n\\n  event Withdrawn(address indexed account, address withdrawAddress, uint256 amount);\\n\\n  // Emitted when stake or unstake delay are modified.\\n  event StakeLocked(address indexed account, uint256 totalStaked, uint256 unstakeDelaySec);\\n\\n  // Emitted once a stake is scheduled for withdrawal.\\n  event StakeUnlocked(address indexed account, uint256 withdrawTime);\\n\\n  event StakeWithdrawn(address indexed account, address withdrawAddress, uint256 amount);\\n\\n  /**\\n   * @param deposit         - The entity's deposit.\\n   * @param staked          - True if this entity is staked.\\n   * @param stake           - Actual amount of ether staked for this entity.\\n   * @param unstakeDelaySec - Minimum delay to withdraw the stake.\\n   * @param withdrawTime    - First block timestamp where 'withdrawStake' will be callable, or zero if already locked.\\n   * @dev Sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n   *      and the rest fit into a 2nd cell.\\n   *      - 112 bit allows for 10^15 eth\\n   *      - 48 bit for full timestamp\\n   *      - 32 bit allows 150 years for unstake delay\\n   */\\n  struct DepositInfo {\\n    uint112 deposit;\\n    bool staked;\\n    uint112 stake;\\n    uint32 unstakeDelaySec;\\n    uint48 withdrawTime;\\n  }\\n\\n  // API struct used by getStakeInfo and simulateValidation.\\n  struct StakeInfo {\\n    uint256 stake;\\n    uint256 unstakeDelaySec;\\n  }\\n\\n  /**\\n   * Get deposit info.\\n   * @param account - The account to query.\\n   * @return info   - Full deposit information of given account.\\n   */\\n  function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n  /**\\n   * Get account balance.\\n   * @param account - The account to query.\\n   * @return        - The deposit (for gas payment) of the account.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * Add to the deposit of the given account.\\n   * @param account - The account to add to.\\n   */\\n  function depositTo(address account) external payable;\\n\\n  /**\\n   * Add to the account's stake - amount and delay\\n   * any pending unstake is first cancelled.\\n   * @param _unstakeDelaySec - The new lock duration before the deposit can be withdrawn.\\n   */\\n  function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n  /**\\n   * Attempt to unlock the stake.\\n   * The value can be withdrawn (using withdrawStake) after the unstake delay.\\n   */\\n  function unlockStake() external;\\n\\n  /**\\n   * Withdraw from the (unlocked) stake.\\n   * Must first call unlockStake and wait for the unstakeDelay to pass.\\n   * @param withdrawAddress - The address to send withdrawn value.\\n   */\\n  function withdrawStake(address payable withdrawAddress) external;\\n\\n  /**\\n   * Withdraw from the deposit.\\n   * @param withdrawAddress - The address to send withdrawn value.\\n   * @param withdrawAmount  - The amount to withdraw.\\n   */\\n  function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UserOperation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport { calldataKeccak } from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender                - The sender account of this request.\\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\\n * @param initCode              - If set, the account contract will be created by this constructor/\\n * @param callData              - The method call to execute on this account.\\n * @param callGasLimit          - The gas limit passed to the callData method call.\\n * @param verificationGasLimit  - Gas used for validateUserOp and validatePaymasterUserOp.\\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\\n *                                Covers batch overhead.\\n * @param maxFeePerGas          - Same as EIP-1559 gas parameter.\\n * @param maxPriorityFeePerGas  - Same as EIP-1559 gas parameter.\\n * @param paymasterAndData      - If set, this field holds the paymaster address and paymaster-specific data.\\n *                                The paymaster will pay for the transaction instead of the sender.\\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct UserOperation {\\n  address sender;\\n  uint256 nonce;\\n  bytes initCode;\\n  bytes callData;\\n  uint256 callGasLimit;\\n  uint256 verificationGasLimit;\\n  uint256 preVerificationGas;\\n  uint256 maxFeePerGas;\\n  uint256 maxPriorityFeePerGas;\\n  bytes paymasterAndData;\\n  bytes signature;\\n}\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n  /**\\n   * Get sender from user operation data.\\n   * @param userOp - The user operation data.\\n   */\\n  function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n    address data;\\n    //read sender from userOp, which is first userOp member (saves 800 gas...)\\n    assembly {\\n      data := calldataload(userOp)\\n    }\\n    return address(uint160(data));\\n  }\\n\\n  /**\\n   * Relayer/block builder might submit the TX with higher priorityFee,\\n   * but the user should not pay above what he signed for.\\n   * @param userOp - The user operation data.\\n   */\\n  function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n      uint256 maxFeePerGas = userOp.maxFeePerGas;\\n      uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n      if (maxFeePerGas == maxPriorityFeePerGas) {\\n        //legacy mode (for networks that don't support basefee opcode)\\n        return maxFeePerGas;\\n      }\\n      return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n  }\\n\\n  /**\\n   * Pack the user operation data into bytes for hashing.\\n   * @param userOp - The user operation data.\\n   */\\n  function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n    address sender = getSender(userOp);\\n    uint256 nonce = userOp.nonce;\\n    bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n    bytes32 hashCallData = calldataKeccak(userOp.callData);\\n    uint256 callGasLimit = userOp.callGasLimit;\\n    uint256 verificationGasLimit = userOp.verificationGasLimit;\\n    uint256 preVerificationGas = userOp.preVerificationGas;\\n    uint256 maxFeePerGas = userOp.maxFeePerGas;\\n    uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n    bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n    return\\n      abi.encode(\\n        sender,\\n        nonce,\\n        hashInitCode,\\n        hashCallData,\\n        callGasLimit,\\n        verificationGasLimit,\\n        preVerificationGas,\\n        maxFeePerGas,\\n        maxPriorityFeePerGas,\\n        hashPaymasterAndData\\n      );\\n  }\\n\\n  /**\\n   * Hash the user operation data.\\n   * @param userOp - The user operation data.\\n   */\\n  function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n    return keccak256(pack(userOp));\\n  }\\n\\n  /**\\n   * The minimum of two numbers.\\n   * @param a - First number.\\n   * @param b - Second number.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Paymaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n// Import the required libraries and contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IEntryPoint.sol\\\";\\nimport \\\"./core/BasePaymaster.sol\\\";\\nimport \\\"./utils/UniswapHelper.sol\\\";\\nimport \\\"./utils/OracleHelper.sol\\\";\\nimport \\\"./utils/IOracle.sol\\\";\\n\\nstruct PaymasterParams {\\n  address signer;\\n  IEntryPoint entryPoint;\\n  IERC20Metadata wrappedNative;\\n  ISwapRouter uniswap;\\n  IOracle nativeOracle;\\n  address treasury;\\n}\\n\\nstruct PaymasterAndData {\\n  address paymaster;\\n  IERC20Metadata token;\\n  bool postTransfer;\\n  bool userCheck;\\n  uint48 validUntil;\\n  uint48 validAfter;\\n  uint256 preCharge;\\n  uint256 preFee;\\n  uint256 userBalance;\\n}\\n\\ncontract Paymaster is BasePaymaster, UniswapHelper, OracleHelper, ReentrancyGuard {\\n  using ECDSA for bytes32;\\n  using UserOperationLib for UserOperation;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  enum TokenStatus {\\n    ADDED,\\n    REMOVED\\n  }\\n\\n  struct TokenPaymasterConfig {\\n    /// @notice The price markup percentage applied to the token price (1e6 = 100%)\\n    uint256 priceMarkup;\\n    /// @notice Estimated gas cost for refunding tokens after the transaction is completed\\n    uint256 refundPostopCost;\\n    /// @notice Transactions are only valid as long as the cached price is not older than this value\\n    uint256 priceMaxAge;\\n    /// @notice The Oracle contract used to fetch the latest Token prices\\n    IOracle oracle;\\n    bool toNative;\\n  }\\n\\n  /// @notice The fee percentage (1e6 = 100%)\\n  uint256 private constant FEE = 300;\\n\\n  /// @notice All 'price' variables are multiplied by this value to avoid rounding up\\n  uint256 private constant PRICE_DENOMINATOR = 1e26;\\n\\n  uint256 private constant FEE_DENOMINATOR = 1e6;\\n\\n  uint256 private constant TOKEN_OFFSET = 20;\\n\\n  uint256 private constant VALID_TIMESTAMP_OFFSET = 40;\\n\\n  uint256 private constant SIGNATURE_OFFSET = 264;\\n\\n  IOracle private constant NULL_ORACLE = IOracle(address(0));\\n\\n  address public verifyingSigner;\\n  address public treasury;\\n\\n  IERC20Metadata[] public tokenList;\\n\\n  mapping(IERC20Metadata => TokenPaymasterConfig) public configs;\\n\\n  /// @notice The balance (in token/eth) represent the debts or the remaining of the balance\\n  mapping(IERC20Metadata => mapping(address => int256)) public balances;\\n\\n  event PostOpReverted(address indexed user, uint256 preCharge, uint256 actualGasCost, int256 debt, uint256 fee, uint256 actualChargeNative);\\n\\n  event Pay(address indexed user, IERC20Metadata token, uint256 actualTokenCharge, uint256 fee);\\n\\n  event Token(IERC20Metadata indexed token, TokenStatus status);\\n\\n  event Debug1(uint256 cachedPriceWithMarkup, uint256 actualTokenNeeded, uint256 preCharge, uint256 preFee, bool postTrasfer);\\n  event Debug2(uint256 allowance);\\n  event Debug3(uint256 cachedPriceWithMarkup, uint256 actualTokenNeeded, uint256 preCharge, uint256 preFee, bool postTrasfer);\\n\\n  /// @notice Initializes the Paymaster contract with the given parameters.\\n  constructor(\\n    PaymasterParams memory params\\n  )\\n    BasePaymaster(params.entryPoint)\\n    UniswapHelper(params.wrappedNative, params.uniswap)\\n    OracleHelper(params.nativeOracle)\\n  {\\n    verifyingSigner = params.signer;\\n    treasury = params.treasury;\\n  }\\n\\n  function setVerifyingSigner(address _verifyingSigner) external onlyOwner {\\n    verifyingSigner = _verifyingSigner;\\n  }\\n\\n  function setTresury(address _treasury) external {\\n    require(treasury == msg.sender, \\\"Invalid sender\\\");\\n\\n    for (uint16 i = 0; i < tokenList.length; i++) {\\n      IERC20Metadata token = tokenList[i];\\n      int256 tmpBalance = balances[token][treasury];\\n\\n      if (tmpBalance > 0) {\\n        balances[token][treasury] = 0;\\n        balances[token][_treasury] = tmpBalance;\\n      }\\n    }\\n\\n    treasury = _treasury;\\n  }\\n\\n  /// @notice Allows the contract owner to add a new tokens.\\n  /// @param tokens The token to deposit.\\n  function addTokens(\\n    IERC20Metadata[] calldata tokens,\\n    TokenPaymasterConfig[] calldata tokenPaymasterConfigs\\n  ) external onlyOwner {\\n    require(tokens.length == tokenPaymasterConfigs.length, \\\"Invalid tokens and configs length\\\");\\n\\n    for (uint i = 0; i < tokens.length; i++) {\\n      IOracle oracle = configs[tokens[i]].oracle;\\n      if (oracle != NULL_ORACLE) continue;\\n\\n      IERC20Metadata token = tokens[i];\\n      TokenPaymasterConfig memory config = tokenPaymasterConfigs[i];\\n\\n      if (config.oracle == NULL_ORACLE) continue;\\n      if (config.priceMarkup <= 2 * PRICE_DENOMINATOR && config.priceMarkup >= PRICE_DENOMINATOR) {\\n        configs[token] = config;\\n        tokenList.push(token);\\n\\n        emit Token(token, TokenStatus.ADDED);\\n      }\\n    }\\n  }\\n\\n  /// @notice Allows the contract owner to delete the token.\\n  /// @param tokens The tokens to be removed.\\n  function removeTokens(IERC20Metadata[] calldata tokens) external onlyOwner {\\n    for (uint i = 0; i < tokens.length; i++) {\\n      IERC20Metadata token = tokens[i];\\n      int tokenIndex = _tokenIndex(token);\\n\\n      if (tokenIndex >= 0 && configs[token].oracle != NULL_ORACLE) {\\n        tokenList[uint256(tokenIndex)] = tokenList[tokenList.length - 1];\\n\\n        delete configs[token];\\n        tokenList.pop();\\n        emit Token(token, TokenStatus.REMOVED);\\n      }\\n    }\\n  }\\n\\n  /// @notice Allows the user to withdraw a specified amount of tokens from the contract.\\n  /// @param token The token to withdraw.\\n  /// @param amount The amount of tokens to transfer.\\n  function withdrawToken(IERC20Metadata token, uint256 amount) external nonReentrant {\\n    require(address(token) != address(0), \\\"Invalid token contract\\\");\\n\\n    int256 balance = balances[token][msg.sender];\\n\\n    require(int(amount) <= balance, \\\"Insufficient balance\\\");\\n\\n    balances[token][msg.sender] = balance - int(amount);\\n\\n    token.transfer(msg.sender, amount);\\n  }\\n\\n  function depositToken(IERC20Metadata token, uint256 amount, address to) external payable nonReentrant {\\n    require(address(token) != address(0), \\\"Invalid token contract\\\");\\n\\n    int256 balance = balances[token][to];\\n    int256 debts = type(int256).max;\\n\\n    if (balance < 0) {\\n      debts = -balance;\\n    }\\n\\n    if (int(amount) > debts) {\\n      balances[token][owner()] += debts;\\n    } else if (int(amount) < debts) {\\n      balances[token][owner()] += int(amount);\\n    }\\n\\n    balances[token][to] = balance + int(amount);\\n\\n    token.transferFrom(msg.sender, address(this), amount);\\n  }\\n\\n  /// @notice Allows the contract owner to refill entry point deposit with a specified amount of tokens\\n  function refillEntryPointDeposit(IERC20Metadata token, uint256 amount) external canSwap onlyOwner {\\n    require(address(token) != address(0), \\\"Invalid token contract\\\");\\n\\n    int256 balance = balances[token][owner()];\\n\\n    require(amount <= uint256(balance), \\\"Insufficient balance\\\");\\n\\n    balances[token][owner()] = balance - int256(amount);\\n\\n    TokenPaymasterConfig memory config = configs[token];\\n    IOracle oracle = config.oracle;\\n    uint256 swappedWNative = amount;\\n\\n    if (token != wrappedNative) {\\n      require(oracle != NULL_ORACLE, \\\"Unsupported token\\\");\\n\\n      uint256 cachedPrice = _updateCachedPrice(token, oracle, config.toNative, false);\\n      swappedWNative = _maybeSwapTokenToWNative(token, amount, cachedPrice);\\n    }\\n\\n    unwrapWeth(swappedWNative);\\n\\n    entryPoint.depositTo{ value: address(this).balance }(address(this));\\n  }\\n\\n  function updateTokenPrice(IERC20Metadata token) external {\\n    TokenPaymasterConfig memory config = configs[token];\\n    require(config.oracle != NULL_ORACLE, \\\"Invalid oracle address\\\");\\n    _updateCachedPrice(token, config.oracle, config.toNative, true);\\n  }\\n\\n  receive() external payable {}\\n\\n  /// @notice Validates a paymaster user operation and calculates the required token amount for the transaction.\\n  /// @param userOp The user operation data.\\n  /// @param requiredPreFund The amount of tokens required for pre-funding.\\n  /// @return context The context containing the token amount and user sender address (if applicable).\\n  /// @return validationResult A uint256 value indicating the result of the validation (always 0 in this implementation).\\n  function _validatePaymasterUserOp(\\n    UserOperation calldata userOp,\\n    bytes32,\\n    uint256 requiredPreFund\\n  ) internal override returns (bytes memory context, uint256 validationResult) {\\n    (bool verified, PaymasterAndData memory paymasterAndData) = _verifySignature(userOp);\\n\\n    IERC20Metadata token = paymasterAndData.token;\\n\\n    require(address(token) != address(0), \\\"Invalid token address\\\");\\n\\n    TokenPaymasterConfig memory config = configs[token];\\n\\n    require(config.oracle != NULL_ORACLE, \\\"Invalid oracle address\\\");\\n    require(balances[token][userOp.sender] >= 0, \\\"Still have debts\\\");\\n\\n    uint48 validUntil = paymasterAndData.validUntil;\\n    uint48 validAfter = paymasterAndData.validAfter;\\n\\n    if (!verified) {\\n      return (\\\"\\\", _packValidationData(true, validUntil, validAfter));\\n    }\\n\\n    // Could be in eth or token\\n    uint256 preCharge = paymasterAndData.preCharge;\\n    uint256 preFee = paymasterAndData.preFee;\\n    uint256 totalPreCharge = preCharge + preFee;\\n\\n    if (paymasterAndData.preCharge <= 0) {\\n      uint256 preChargeNative = requiredPreFund + (config.refundPostopCost * userOp.maxFeePerGas);\\n\\n      if (token != wrappedNative) {\\n        uint256 cachedPriceWithMarkup = _cachedPriceWithMarkup(token, config);\\n\\n        preCharge = weiToToken(token, preChargeNative, cachedPriceWithMarkup);\\n        preFee = (preCharge * FEE) / FEE_DENOMINATOR;\\n        totalPreCharge = preCharge + preFee;\\n        validUntil = uint48(getCachedPriceTimestamp(token) + config.priceMaxAge);\\n        validAfter = 0;\\n      }\\n    }\\n\\n    validationResult = _packValidationData(false, validUntil, validAfter);\\n    context = abi.encode(\\n      token,\\n      paymasterAndData.postTransfer,\\n      preCharge,\\n      preFee,\\n      totalPreCharge,\\n      userOp.maxFeePerGas,\\n      userOp.maxPriorityFeePerGas,\\n      config.refundPostopCost,\\n      userOp.sender\\n    );\\n\\n    // Charge the user/sender on postOp()\\n    if (paymasterAndData.postTransfer) {\\n      uint256 balance = paymasterAndData.userCheck ? token.balanceOf(userOp.sender) : paymasterAndData.userBalance;\\n      require(balance >= totalPreCharge, \\\"Insufficient balance\\\");\\n\\n      return (context, validationResult);\\n    }\\n\\n    token.safeTransferFrom(userOp.sender, address(this), totalPreCharge);\\n\\n    balances[token][treasury] += int256(preFee);\\n  }\\n\\n  /// @notice Performs post-operation tasks, such as updating the token price and refunding excess tokens.\\n  /// @dev This function is called after a user operation has been executed or reverted.\\n  /// @param mode The post-operation mode (either successful or reverted).\\n  /// @param context The context containing the token amount and user sender address.\\n  /// @param actualGasCost The actual gas cost of the transaction.\\n  function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal override {\\n    (\\n      address tokenAddress,\\n      bool postTransfer,\\n      uint256 preCharge,\\n      uint256 preFee,\\n      uint256 totalPreCharge,\\n      uint256 maxFeePerGas,\\n      uint256 maxPriorityFeePerGas,\\n      uint256 refundPostopCost,\\n      address userOpSender\\n    ) = abi.decode(context, (address, bool, uint256, uint256, uint256, uint256, uint256, uint256, address));\\n\\n    IERC20Metadata token = IERC20Metadata(tokenAddress);\\n    uint256 gasPrice = _gasPrice(maxFeePerGas, maxPriorityFeePerGas);\\n    uint256 actualChargeNative = actualGasCost + (refundPostopCost * gasPrice);\\n\\n    if (mode == PostOpMode.postOpReverted) {\\n      int256 debt = _tokenDebt(token, postTransfer, preCharge, actualChargeNative, preFee);\\n      balances[token][userOpSender] -= debt;\\n\\n      emit PostOpReverted(userOpSender, totalPreCharge, actualGasCost, debt, preFee, actualChargeNative);\\n    } else {\\n      _payWithToken(token, userOpSender, postTransfer, preCharge, preFee, actualChargeNative);\\n    }\\n  }\\n\\n  function _verifySignature(\\n    UserOperation calldata userOp\\n  ) internal view returns (bool verified, PaymasterAndData memory data) {\\n    require(userOp.paymasterAndData.length >= SIGNATURE_OFFSET, \\\"Invalid paymaster and data length\\\");\\n\\n    (PaymasterAndData memory paymasterAndData, bytes calldata signature) = _parsePaymasterAndData(\\n      userOp.paymasterAndData\\n    );\\n\\n    require(signature.length == 64 || signature.length == 65, \\\"Invalid signature length in paymasterAndData\\\");\\n\\n    bytes32 hash = ECDSA.toEthSignedMessageHash(_hash(userOp, paymasterAndData));\\n\\n    verified = verifyingSigner == ECDSA.recover(hash, signature);\\n    data = paymasterAndData;\\n  }\\n\\n  function _parsePaymasterAndData(\\n    bytes calldata data\\n  ) internal pure returns (PaymasterAndData memory paymasterAndData, bytes calldata signature) {\\n    address paymaster = address(bytes20(data[:TOKEN_OFFSET]));\\n    IERC20Metadata token = IERC20Metadata(address(bytes20(data[TOKEN_OFFSET:VALID_TIMESTAMP_OFFSET])));\\n\\n    (\\n      bool postTransfer,\\n      bool userCheck,\\n      uint48 validUntil,\\n      uint48 validAfter,\\n      uint256 preCharge,\\n      uint256 preFee,\\n      uint256 userBalance\\n    ) = abi.decode(\\n        data[VALID_TIMESTAMP_OFFSET:SIGNATURE_OFFSET],\\n        (bool, bool, uint48, uint48, uint256, uint256, uint256)\\n      );\\n\\n    signature = data[SIGNATURE_OFFSET:];\\n    paymasterAndData = PaymasterAndData(\\n      paymaster,\\n      token,\\n      postTransfer,\\n      userCheck,\\n      validUntil,\\n      validAfter,\\n      preCharge,\\n      preFee,\\n      userBalance\\n    );\\n  }\\n\\n  function _hash(\\n    UserOperation calldata userOp,\\n    PaymasterAndData memory paymasterAndData\\n  ) internal view returns (bytes32) {\\n    address sender = userOp.getSender();\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          sender,\\n          userOp.nonce,\\n          keccak256(userOp.initCode),\\n          keccak256(userOp.callData),\\n          userOp.callGasLimit,\\n          userOp.verificationGasLimit,\\n          userOp.preVerificationGas,\\n          userOp.maxFeePerGas,\\n          userOp.maxPriorityFeePerGas,\\n          block.chainid,\\n          paymasterAndData.paymaster,\\n          paymasterAndData.token,\\n          paymasterAndData.postTransfer,\\n          paymasterAndData.validUntil,\\n          paymasterAndData.validAfter,\\n          paymasterAndData.preCharge,\\n          paymasterAndData.preFee\\n        )\\n      );\\n  }\\n\\n  function _cachedPriceWithMarkup(IERC20Metadata token, TokenPaymasterConfig memory config) internal returns (uint256) {\\n    uint256 cachedPrice = _updateCachedPrice(token, config.oracle, config.toNative, false);\\n    return (cachedPrice * PRICE_DENOMINATOR) / config.priceMarkup;\\n  }\\n\\n  function _gasPrice(uint256 maxFeePerGas, uint256 maxPriorityFeePerGas) internal view returns (uint256) {\\n    if (maxFeePerGas == maxPriorityFeePerGas) {\\n      //legacy mode (for networks that don't support basefee opcode)\\n      return maxFeePerGas;\\n    }\\n    return _min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n  }\\n\\n  function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function _payWithToken(\\n    IERC20Metadata token,\\n    address sender,\\n    bool postTransfer,\\n    uint256 preCharge,\\n    uint256 preFee,\\n    uint256 actualGas\\n  ) internal {\\n    int256 balance = balances[token][sender];\\n\\n    require(balance >= 0, \\\"Still have debts\\\");\\n\\n    TokenPaymasterConfig memory config = configs[token];\\n\\n    uint256 cachedPriceWithMarkup = _cachedPriceWithMarkup(token, config);\\n    uint256 actualTokenNeeded = weiToToken(token, actualGas, cachedPriceWithMarkup);\\n\\n    emit Debug1(cachedPriceWithMarkup, actualTokenNeeded, preCharge, preFee, postTransfer);\\n\\n    uint256 allowance = token.allowance(sender, address(this));\\n\\n    emit Debug2(allowance);\\n\\n    if (postTransfer) {\\n      token.safeTransferFrom(sender, address(this), actualTokenNeeded + preFee);\\n      balances[token][treasury] += int256(preFee);\\n    } else {\\n      if (preCharge > actualTokenNeeded) {\\n        balances[token][sender] += int256(preCharge - actualTokenNeeded);\\n      } else if (actualTokenNeeded > preCharge) {\\n        token.safeTransferFrom(sender, address(this), actualTokenNeeded - preCharge);\\n      }\\n    }\\n\\n    emit Pay(sender, token, actualTokenNeeded, preFee);\\n\\n    balances[token][owner()] += int256(actualTokenNeeded);\\n  }\\n\\n  function _tokenDebt(\\n    IERC20Metadata token,\\n    bool postTransfer,\\n    uint256 preCharge,\\n    uint256 actualGas,\\n    uint256 preFee\\n  ) internal returns (int256 debts) {\\n    TokenPaymasterConfig memory config = configs[token];\\n\\n    uint256 cachedPriceWithMarkup = _cachedPriceWithMarkup(token, config);\\n    uint256 actualTokenNeeded = weiToToken(token, actualGas, cachedPriceWithMarkup);\\n\\n    emit Debug3(cachedPriceWithMarkup, actualTokenNeeded, preCharge, preFee, postTransfer);\\n\\n    if (postTransfer) {\\n      debts = int256(actualTokenNeeded + preFee);\\n    } else {\\n      if (actualTokenNeeded > preCharge) {\\n        debts = int256(actualTokenNeeded - preCharge);\\n      }\\n    }\\n  }\\n\\n  function _tokenIndex(IERC20Metadata token) internal view returns (int index) {\\n    index = -1;\\n\\n    IERC20Metadata[] memory _tokenList = tokenList;\\n\\n    for (uint i; i < _tokenList.length; i++) {\\n      if (_tokenList[i] == token) {\\n        return int(i);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n  /**\\n   * return amount of tokens that are required to receive that much eth.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/OracleHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable not-rely-on-time */\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IOracle.sol\\\";\\n\\n/// @title Helper functions for dealing with various forms of price feed oracles.\\n/// @notice Maintains a price cache and updates the current price if needed.\\n/// In the best case scenario we have a direct oracle from the token to the native asset.\\n/// Also support tokens that have no direct price oracle to the native asset.\\n/// Sometimes oracles provide the price in the opposite direction of what we need in the moment.\\nabstract contract OracleHelper {\\n  struct TokenPrice {\\n    /// @notice The cached token price from the Oracle, always in (ether-per-token) * PRICE_DENOMINATOR format\\n    uint256 cachedPrice;\\n    /// @notice The timestamp of a block when the cached price was updated\\n    uint256 cachedPriceTimestamp;\\n  }\\n\\n  uint256 private constant PRICE_DENOMINATOR = 1e26;\\n\\n  /// @notice The price cache will be returned without even fetching the oracles for this number of seconds\\n  uint256 private constant cacheTimeToLive = 1 days;\\n\\n  /// @notice The Oracle contract used to fetch the latest ETH prices\\n  IOracle private nativeOracle;\\n\\n  mapping(IERC20 => TokenPrice) public prices;\\n\\n  event TokenPriceUpdated(uint256 currentPrice, uint256 previousPrice, uint256 cachedPriceTimestamp);\\n\\n  constructor(IOracle _nativeOracle) {\\n    nativeOracle = _nativeOracle;\\n  }\\n\\n  /// @notice Updates the token price by fetching the latest price from the Oracle.\\n  function _updateCachedPrice(\\n    IERC20 token,\\n    IOracle tokenOracle,\\n    bool toNative,\\n    bool force\\n  ) public returns (uint256 newPrice) {\\n    TokenPrice memory tokenPrice = prices[token];\\n\\n    uint256 oldPrice = tokenPrice.cachedPrice;\\n    uint256 cacheAge = block.timestamp - tokenPrice.cachedPriceTimestamp;\\n\\n    if (!force && cacheAge <= cacheTimeToLive) {\\n      return oldPrice;\\n    }\\n\\n    uint256 price = calculatePrice(tokenOracle, toNative);\\n\\n    newPrice = price;\\n    tokenPrice.cachedPrice = newPrice;\\n    tokenPrice.cachedPriceTimestamp = block.timestamp;\\n\\n    prices[token] = tokenPrice;\\n\\n    emit TokenPriceUpdated(newPrice, oldPrice, tokenPrice.cachedPriceTimestamp);\\n  }\\n\\n  function _removeTokenPrice(IERC20 token) internal {\\n    delete prices[token];\\n  }\\n\\n  function calculatePrice(IOracle tokenOracle, bool toNative) public view returns (uint256 price) {\\n    // dollar per token (or native per token)\\n    uint256 tokenPrice = fetchPrice(tokenOracle);\\n    uint256 tokenOracleDecimalPower = 10 ** tokenOracle.decimals();\\n\\n    if (toNative) {\\n      return (PRICE_DENOMINATOR * tokenPrice) / tokenOracleDecimalPower;\\n    }\\n\\n    // dollar per native\\n    uint256 nativePrice = fetchPrice(nativeOracle);\\n    uint256 nativeOracleDecimalPower = 10 ** nativeOracle.decimals();\\n\\n    // nativePrice is normalized as native per dollar\\n    nativePrice = (PRICE_DENOMINATOR * nativeOracleDecimalPower) / nativePrice;\\n\\n    // multiplying by nativeAssetPrice that is  ethers-per-dollar\\n    // => result = (native / dollar) * (dollar / token) = native / token\\n    price = (nativePrice * tokenPrice) / tokenOracleDecimalPower;\\n  }\\n\\n  /// @notice Fetches the latest price from the given Oracle.\\n  /// @dev This function is used to get the latest price from the tokenOracle or nativeOracle.\\n  /// @param _oracle The Oracle contract to fetch the price from.\\n  /// @return price The latest price fetched from the Oracle.\\n  function fetchPrice(IOracle _oracle) internal view returns (uint256 price) {\\n    (uint80 roundId, int256 answer, , uint256 updatedAt, uint80 answeredInRound) = _oracle.latestRoundData();\\n    require(answer > 0, \\\"TPM: Chainlink price <= 0\\\");\\n    // 2 days old price is considered stale since the price is updated every 24 hours\\n    require(updatedAt >= block.timestamp - 60 * 60 * 24 * 2, \\\"TPM: Incomplete round\\\");\\n    require(answeredInRound >= roundId, \\\"TPM: Stale price\\\");\\n    price = uint256(answer);\\n  }\\n\\n  function getCachedPrice(IERC20 token) internal view returns (uint256 price) {\\n    return prices[token].cachedPrice;\\n  }\\n\\n  function getCachedPriceTimestamp(IERC20 token) internal view returns (uint256) {\\n    return prices[token].cachedPriceTimestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/UniswapHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable not-rely-on-time */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\n\\nabstract contract UniswapHelper {\\n  event UniswapReverted(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMin);\\n\\n  uint256 private constant PRICE_DENOMINATOR = 1e26;\\n\\n  /// @notice 0.3% of pool fee\\n  uint24 private constant poolFee = 3000;\\n\\n  uint8 private constant slippage = 50;\\n\\n  /// @notice Minimum native asset amount to receive from a single swap, 0.01 wei\\n  uint256 private constant minSwapAmount = 1e16;\\n\\n  /// @notice The Uniswap V3 SwapRouter contract\\n  ISwapRouter public immutable uniswap;\\n\\n  /// @notice The ERC-20 token that wraps the native asset for current chain\\n  IERC20Metadata public immutable wrappedNative;\\n\\n  constructor(IERC20Metadata _wrappedNative, ISwapRouter _uniswap) {\\n    wrappedNative = _wrappedNative;\\n    uniswap = _uniswap;\\n  }\\n\\n  modifier canSwap() {\\n    require(address(uniswap) != address(0), \\\"Not supported to swap\\\");\\n    _;\\n  }\\n\\n  function _maybeSwapTokenToWNative(IERC20Metadata tokenIn, uint256 amount, uint256 quote) internal returns (uint256) {\\n    tokenIn.approve(address(uniswap), amount);\\n\\n    IERC20Metadata token = IERC20Metadata(address(tokenIn));\\n    uint256 amountOutMin = addSlippage(tokenToWei(token, amount, quote), slippage);\\n    if (amountOutMin < minSwapAmount) {\\n      return 0;\\n    }\\n    // note: calling 'swapToToken' but destination token is Wrapped Ether\\n    return swapToToken(address(tokenIn), address(wrappedNative), amount, amountOutMin, poolFee);\\n  }\\n\\n  function addSlippage(uint256 amount, uint8 _slippage) private pure returns (uint256) {\\n    return (amount * (1000 - _slippage)) / 1000;\\n  }\\n\\n  function tokenToWei(IERC20Metadata token, uint256 amount, uint256 price) public view returns (uint256) {\\n    uint256 nativeDecimal = 10 ** 18;\\n    uint256 tokenDecimal = 10 ** token.decimals();\\n    return (amount * nativeDecimal * price) / (PRICE_DENOMINATOR * tokenDecimal);\\n  }\\n\\n  function weiToToken(IERC20Metadata token, uint256 amount, uint256 price) public view returns (uint256) {\\n    uint256 nativeDecimal = 10 ** 18;\\n    uint256 tokenDecimal = 10 ** token.decimals();\\n    return (amount * tokenDecimal * PRICE_DENOMINATOR) / (price * nativeDecimal);\\n  }\\n\\n  // turn ERC-20 tokens into wrapped ETH at market price\\n  function swapToWeth(\\n    address tokenIn,\\n    address wethOut,\\n    uint256 amountOut,\\n    uint24 fee\\n  ) internal returns (uint256 amountIn) {\\n    ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams(\\n      tokenIn,\\n      wethOut, //tokenOut\\n      fee,\\n      address(uniswap), //recipient - keep WETH at SwapRouter for withdrawal\\n      block.timestamp, //deadline\\n      amountOut,\\n      type(uint256).max,\\n      0\\n    );\\n    amountIn = uniswap.exactOutputSingle(params);\\n  }\\n\\n  function unwrapWeth(uint256 amount) internal {\\n    IPeripheryPayments(address(uniswap)).unwrapWETH9(amount, address(this));\\n  }\\n\\n  // swap ERC-20 tokens at market price\\n  function swapToToken(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    uint24 fee\\n  ) internal returns (uint256 amountOut) {\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams(\\n      tokenIn, //tokenIn\\n      tokenOut, //tokenOut\\n      fee,\\n      address(uniswap),\\n      block.timestamp, //deadline\\n      amountIn,\\n      amountOutMin,\\n      0\\n    );\\n    try uniswap.exactInputSingle(params) returns (uint256 _amountOut) {\\n      amountOut = _amountOut;\\n    } catch {\\n      emit UniswapReverted(tokenIn, tokenOut, amountIn, amountOutMin);\\n      amountOut = 0;\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"wrappedNative\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniswap\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"nativeOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"internalType\":\"struct PaymasterParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cachedPriceWithMarkup\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualTokenNeeded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"postTrasfer\",\"type\":\"bool\"}],\"name\":\"Debug1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"Debug2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cachedPriceWithMarkup\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualTokenNeeded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"postTrasfer\",\"type\":\"bool\"}],\"name\":\"Debug3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualTokenCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"debt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualChargeNative\",\"type\":\"uint256\"}],\"name\":\"PostOpReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Paymaster.TokenStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cachedPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokenPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"UniswapReverted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"tokenOracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"_updateCachedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"priceMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundPostopCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMaxAge\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"internalType\":\"struct Paymaster.TokenPaymasterConfig[]\",\"name\":\"tokenPaymasterConfigs\",\"type\":\"tuple[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"tokenOracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"configs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundPostopCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMaxAge\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cachedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cachedPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refillEntryPointDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTresury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifyingSigner\",\"type\":\"address\"}],\"name\":\"setVerifyingSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"tokenToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyingSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"weiToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Paymaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000009499c43e9bf1544a8280ba8f7319fa55ff5ae0b50000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d27890000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000ab594600376ec9fd91f8e885dadf0ce036862de0000000000000000000000000734ba751701ac1ae38c96e78b43b55351ccac2f6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}