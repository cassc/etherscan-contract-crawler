{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ArkreenBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\r\\n\\r\\nimport './ArkreenBuilderStorage.sol';\\r\\nimport \\\"./interfaces/IPausable.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IERC20Permit.sol\\\";\\r\\nimport \\\"./ArkreenBuilderTypes.sol\\\";\\r\\nimport \\\"./interfaces/IArkreenRECBank.sol\\\";\\r\\nimport \\\"./interfaces/IFeSwapRouter.sol\\\";\\r\\nimport \\\"./interfaces/IArkreenRECToken.sol\\\";\\r\\n\\r\\n// Import this file to use console.log\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract ArkreenBuilder is\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    ArkreenBuilderStorage\\r\\n{\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    // Public variables\\r\\n    string public constant NAME = 'Arkreen Climate Actor';\\r\\n\\r\\n    // Events\\r\\n\\r\\n    // Modifiers\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'ARB: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n  \\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address router, address sales, address native) external virtual initializer {\\r\\n        __Ownable_init_unchained();\\r\\n        __UUPSUpgradeable_init();     \\r\\n        routerSwap = router;\\r\\n        artBank = sales;\\r\\n        tokenNative = native;\\r\\n    }   \\r\\n\\r\\n    function postUpdate(address sales) external onlyProxy onlyOwner {\\r\\n        artBank = sales;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\\r\\n    {}\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == tokenNative); // only accept WMATIC via fallback from the WMATIC contract\\r\\n    }  \\r\\n\\r\\n    /** \\r\\n     * @dev Offset the specified amount of ART tokens to create a climate action.\\r\\n     * @param tokenART Address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountART Amount of the ART token to offset.\\r\\n     * @param deadline Deadline to handle the transaction.\\r\\n     */\\r\\n    function actionBuilderWithART(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        uint256             deadline\\r\\n    ) external ensure(deadline) {\\r\\n\\r\\n        // Transfer payement: bytes4(keccak256(bytes('transferFrom(address from ,address to ,uint256 amount)')));\\r\\n        bytes memory data1 = abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), amountART);\\r\\n        (bool success, bytes memory data) = tokenART.call(abi.encodePacked(data1, address(this)));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n\\r\\n        // commitOffset(uint256 amount): 0xe8fef571\\r\\n        bytes memory callData = abi.encodeWithSelector(0xe8fef571, amountART);\\r\\n\\r\\n        _offsetART(tokenART, abi.encodePacked(callData, _msgSender()));\\r\\n    }\\r\\n   \\r\\n\\r\\n    /** \\r\\n     * @dev Buy the ART token with specified token, then offset the bought ART to create a climate action.\\r\\n     * @param tokenPay The address of the token to pay for the ART token.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountPay The amount of the payment token. \\r\\n     *                  if modeAction bit0 is true, amountPay should be paid to swap tokenART.\\r\\n     *                  if modeAction bit0 is false, amountPay means the maximum amount to pay. \\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\\r\\n     * @param modeAction Which amount is the exact amount, and which source to get ART\\r\\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\\r\\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\\r\\n     *                  bit1 = 0, Swap ART from Dex\\r\\n     *                  bit1 = 1, But ART from art sales bank\\r\\n     */\\r\\n    function actionBuilder(\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        uint256             deadline\\r\\n    ) external {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\\r\\n\\r\\n        // Transfer payement \\r\\n        TransferHelper.safeTransferFrom(tokenPay, msg.sender, address(this), amountPay);\\r\\n        _actionBuilder (tokenPay, tokenART, amountPay, amountART, modeAction, deadline);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Buy the ART token with Native token, then offset the bought ART.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in the AREC ecosystem.\\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\\r\\n     * @param modeAction Which amount is the exact amount, and which source to get ART\\r\\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\\r\\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\\r\\n     *                  bit1 = 0, Swap ART from Dex\\r\\n     *                  bit1 = 1, But ART from art sales bank\\r\\n     */\\r\\n    function actionBuilderNative(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        uint256             deadline\\r\\n    ) external payable {               // Deadline will be checked by router, no need to check here.\\r\\n\\r\\n        // Wrap MATIC to WMATIC  \\r\\n        IWETH(tokenNative).deposit{value: msg.value}();\\r\\n        _actionBuilder(tokenNative, tokenART, msg.value, amountART, modeAction, deadline);\\r\\n    }   \\r\\n\\r\\n   /** \\r\\n     * @dev Buy the ART token with specified token, then offset the bought ART.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\\r\\n     * @param modeAction Which amount is the exact amount, and which source to get ART\\r\\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\\r\\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\\r\\n     *                  bit1 = 0, Swap ART from Dex\\r\\n     *                  bit1 = 1, But ART from art sales bank\\r\\n     * @param permitToPay The permit information to approve the payment token to swap for ART token \\r\\n     */\\r\\n    function actionBuilderWithPermit(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        Signature calldata  permitToPay\\r\\n    ) external  {                       // Deadline will be checked by router, no need to check here.\\r\\n        // Permit payment token\\r\\n        address payer = _msgSender();\\r\\n        IERC20Permit(permitToPay.token).permit(payer, address(this), \\r\\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\\r\\n\\r\\n        // Transfer payement \\r\\n        TransferHelper.safeTransferFrom(permitToPay.token, payer, address(this), permitToPay.value);\\r\\n        _actionBuilder(permitToPay.token, tokenART, permitToPay.value, amountART, modeAction, permitToPay.deadline);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Offset the specified amount of ART tokens to create a climate action.\\r\\n     * @param tokenART Address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountART Amount of the ART token to offset.\\r\\n     * @param deadline Deadline to handle the transaction.\\r\\n     * @param badgeInfo The information to be included for climate badge.\\r\\n     */\\r\\n    function actionBuilderBadgeWithART(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        uint256             deadline,\\r\\n        BadgeInfo calldata  badgeInfo\\r\\n    ) external ensure(deadline) {\\r\\n\\r\\n        // Transfer payement: bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        bytes memory data1 = abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), amountART);\\r\\n        (bool success, bytes memory data) = tokenART.call(abi.encodePacked(data1, address(this)));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n\\r\\n        // offsetAndMintCertificate(address beneficiary,string offsetEntityID,string beneficiaryID,string offsetMessage,uint256 amount)\\r\\n        // offsetAndMintCertificate(address,string,string,string,uint256): signature = 0x0fba6a8d\\r\\n        bytes memory callData = abi.encodeWithSelector(0x0fba6a8d, badgeInfo.beneficiary, badgeInfo.offsetEntityID, \\r\\n                                            badgeInfo.beneficiaryID, badgeInfo.offsetMessage, amountART);\\r\\n\\r\\n        _offsetART(tokenART, abi.encodePacked(callData, _msgSender()));\\r\\n    }    \\r\\n\\r\\n    /** \\r\\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\\r\\n     * @param tokenPay The address of the token to pay for the ART token.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountPay The amount of the payment token. \\r\\n     *                  if modeAction bit0 is true, amountPay should be same as the value in permitToPay.\\r\\n     *                  if modeAction bit0 is false, amountPay means the maximum amount available to pay, if it not zero. \\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\\r\\n     * @param modeAction Which amount is the exact amount, and which source to get ART\\r\\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\\r\\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\\r\\n     *                  bit1 = 0, Swap ART from Dex\\r\\n     *                  bit1 = 1, But ART from art sales bank     \\r\\n     * @param badgeInfo The information to be included for climate badge.\\r\\n     */\\r\\n    function actionBuilderBadge(\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        uint256             deadline,\\r\\n        BadgeInfo calldata  badgeInfo\\r\\n    ) external {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\\r\\n\\r\\n        // Transfer payement\\r\\n        TransferHelper.safeTransferFrom(tokenPay, msg.sender, address(this), amountPay);\\r\\n\\r\\n        _actionBuilderBadge (tokenPay, tokenART, amountPay, amountART, modeAction, deadline, badgeInfo);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\\r\\n     * @param modeAction Which amount is the exact amount, and which source to get ART\\r\\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\\r\\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\\r\\n     *                  bit1 = 0, Swap ART from Dex\\r\\n     *                  bit1 = 1, But ART from art sales bank   \\r\\n     * @param badgeInfo The information to be included for climate badge.\\r\\n     */\\r\\n    function actionBuilderBadgeNative(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        uint256             deadline,\\r\\n        BadgeInfo calldata  badgeInfo\\r\\n    ) external payable {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\\r\\n\\r\\n        // Wrap MATIC to WMATIC  \\r\\n        IWETH(tokenNative).deposit{value: msg.value}();\\r\\n        _actionBuilderBadge(tokenNative, tokenART, msg.value, amountART, modeAction, deadline, badgeInfo);\\r\\n    }\\r\\n\\r\\n   /** \\r\\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\\r\\n     * @param modeAction Which amount is the exact amount, and which source to get ART\\r\\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\\r\\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\\r\\n     *                  bit1 = 0, Swap ART from Dex\\r\\n     *                  bit1 = 1, But ART from art sales bank   \\r\\n     * @param badgeInfo The information to be included for climate badge.\\r\\n     * @param permitToPay The permit information to approve the payment token to swap for ART token \\r\\n     */\\r\\n    function actionBuilderBadgeWithPermit(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        BadgeInfo calldata  badgeInfo,\\r\\n        Signature calldata  permitToPay\\r\\n    ) external  {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\\r\\n\\r\\n        // Permit payment token\\r\\n        address payer = _msgSender();\\r\\n        IERC20Permit(permitToPay.token).permit(payer, address(this), \\r\\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\\r\\n\\r\\n        // Transfer payement \\r\\n        TransferHelper.safeTransferFrom(permitToPay.token, payer, address(this), permitToPay.value);\\r\\n        _actionBuilderBadge(permitToPay.token, tokenART, permitToPay.value, amountART, modeAction, permitToPay.deadline, badgeInfo);\\r\\n    }\\r\\n\\r\\n    function _actionBuilder(\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        uint256             deadline\\r\\n    ) internal {\\r\\n\\r\\n        bool isExact = (modeAction&0x01) == 0x01;\\r\\n        if(modeAction & 0x02 != 0x00) {\\r\\n            IArkreenRECBank(artBank).buyART(tokenPay, tokenART, amountPay, amountART, isExact);\\r\\n        } else {\\r\\n          address[] memory swapPath = new address[](2);\\r\\n          swapPath[0] = tokenPay;\\r\\n          swapPath[1] = tokenART;\\r\\n\\r\\n          if(isExact) {\\r\\n              IFeSwapRouter(routerSwap).swapExactTokensForTokens(amountPay, amountART, swapPath, address(this), deadline);\\r\\n          } else {\\r\\n              IFeSwapRouter(routerSwap).swapTokensForExactTokens(amountART, amountPay, swapPath, address(this), deadline);\\r\\n          }\\r\\n        }\\r\\n\\r\\n        uint256 amountOffset = amountART;  \\r\\n        if(isExact)  amountOffset = IERC20(tokenART).balanceOf(address(this));    // Pleae do not send ART to this contract\\r\\n \\r\\n        // commitOffset(uint256 amount): 0xe8fef571\\r\\n        bytes memory callData = abi.encodeWithSelector(0xe8fef571, amountOffset);\\r\\n\\r\\n        address payer = _msgSender();\\r\\n        _offsetART(tokenART, abi.encodePacked(callData, payer));\\r\\n \\r\\n        // Repay more payment back  \\r\\n        if(modeAction & 0x01 == 0x00) {        \\r\\n            uint256 amountPayLeft = IERC20(tokenPay).balanceOf(address(this));\\r\\n            if(amountPayLeft > 0) {\\r\\n                if(tokenPay == tokenNative) {\\r\\n                    IWETH(tokenNative).withdraw(amountPayLeft);\\r\\n                    TransferHelper.safeTransferETH(payer, amountPayLeft);               \\r\\n                } else {\\r\\n                    TransferHelper.safeTransfer(tokenPay, payer, amountPayLeft);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _actionBuilderBadge(\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        uint256             modeAction,\\r\\n        uint256             deadline,\\r\\n        BadgeInfo calldata  badgeInfo\\r\\n    ) internal {\\r\\n\\r\\n        bool isExact = (modeAction&0x01) == 0x01;\\r\\n        if(modeAction & 0x02 != 0x00) {\\r\\n            IArkreenRECBank(artBank).buyART(tokenPay, tokenART, amountPay, amountART, isExact);\\r\\n        } else {\\r\\n          address[] memory swapPath = new address[](2);\\r\\n          swapPath[0] = tokenPay;\\r\\n          swapPath[1] = tokenART;\\r\\n\\r\\n          if(modeAction & 0x01 != 0x00) {\\r\\n              IFeSwapRouter(routerSwap).swapExactTokensForTokens(amountPay, amountART, swapPath, address(this), deadline);\\r\\n          } else {\\r\\n              IFeSwapRouter(routerSwap).swapTokensForExactTokens(amountART, amountPay, swapPath, address(this), deadline);\\r\\n          }\\r\\n        }\\r\\n\\r\\n        uint256 amountOffset = amountART;  \\r\\n        if(isExact)  amountOffset = IERC20(tokenART).balanceOf(address(this));        \\r\\n\\r\\n        // offsetAndMintCertificate(address beneficiary,string offsetEntityID,string beneficiaryID,string offsetMessage,uint256 amount)\\r\\n        // offsetAndMintCertificate(address,string,string,string,uint256): signature = 0x0fba6a8d\\r\\n        bytes memory callData = abi.encodeWithSelector(0x0fba6a8d, badgeInfo.beneficiary, badgeInfo.offsetEntityID, \\r\\n                                            badgeInfo.beneficiaryID, badgeInfo.offsetMessage, amountOffset);\\r\\n\\r\\n        address payer = _msgSender();\\r\\n        _offsetART(tokenART, abi.encodePacked(callData, payer));\\r\\n  \\r\\n        // Repay more payment back  \\r\\n        if(modeAction & 0x01 == 0x00) {      \\r\\n            uint256 amountPayLeft = IERC20(tokenPay).balanceOf(address(this));\\r\\n            if(amountPayLeft > 0) {\\r\\n                if(tokenPay == tokenNative) {\\r\\n                    IWETH(tokenNative).withdraw(amountPayLeft);\\r\\n                    TransferHelper.safeTransferETH(payer, amountPayLeft);               \\r\\n                } else {\\r\\n                    TransferHelper.safeTransfer(tokenPay, payer, amountPayLeft);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Call ART token contract to offset the ART token, and optoinally mint the climate badge according to calldata.\\r\\n     * @param tokenART Address of the ART token contract. \\r\\n     * @param callData Calldata to call ART token.\\r\\n     */\\r\\n    function _offsetART(\\r\\n        address         tokenART,\\r\\n        bytes   memory  callData\\r\\n    ) internal {\\r\\n\\r\\n        (bool success, bytes memory returndata) = tokenART.call(abi.encodePacked(callData, _msgSender()));\\r\\n\\r\\n        if (!success) {\\r\\n            if (returndata.length > 0) {\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(\\\"BLD: Error Call to offsetAndMintCertificate\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal override view returns (address signer) {\\r\\n        signer = msg.sender;\\r\\n        if (msg.data.length>=20 && trustedForwarders[signer]) {\\r\\n            assembly {\\r\\n                signer := shr(96,calldataload(sub(calldatasize(),20)))\\r\\n            }\\r\\n        }    \\r\\n    }    \\r\\n\\r\\n    function mangeTrustedForwarder(address forwarder, bool addOrRemove) external onlyOwner {\\r\\n        require(forwarder != address(0), \\\"BLD: Zero Forwarder\\\");\\r\\n        trustedForwarders[forwarder] = addOrRemove;\\r\\n    }      \\r\\n \\r\\n    function approveRouter(address[] memory tokens) external onlyOwner {\\r\\n        require(routerSwap != address(0), \\\"BLD: No Router\\\");\\r\\n        for(uint256 i = 0; i < tokens.length; i++) {\\r\\n            TransferHelper.safeApprove(tokens[i], routerSwap, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function approveArtBank(address[] memory tokens) external onlyOwner {\\r\\n        require(artBank != address(0), \\\"BLD: No Banker\\\");\\r\\n        for(uint256 i = 0; i < tokens.length; i++) {\\r\\n            TransferHelper.safeApprove(tokens[i], artBank, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getVersion() external pure virtual returns (string memory) {\\r\\n        return \\\"0.2.0\\\";\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ArkreenBuilderStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./ArkreenBuilderTypes.sol\\\";  \\r\\n\\r\\nabstract contract ArkreenBuilderStorage {\\r\\n\\r\\n    address public routerSwap;            // Address of the DEX router\\r\\n    address public tokenNative;           // The wrapped token of the Native token, such as WETH, WMATIC\\r\\n\\r\\n    mapping(address => bool) public trustedForwarders;         // List of trusted Forwarders\\r\\n    address public artBank;               // Address of the ART sales bank contract\\r\\n\\r\\n//  mapping(address => mapping(address => twinPair)) public pools;             // ART token => (pair token => two LP pools) \\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/ArkreenBuilderTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct twinPair {\\r\\n    address     poolAB;\\r\\n    address     poolBA;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    address     token;\\r\\n    uint256     value;\\r\\n    uint256     deadline;  \\r\\n    uint8       v;\\r\\n    bytes32     r;\\r\\n    bytes32     s;              \\r\\n}\\r\\n\\r\\nstruct SigRegister {\\r\\n    uint8       v;\\r\\n    bytes32     r;\\r\\n    bytes32     s;              \\r\\n}\\r\\n\\r\\nstruct BadgeInfo {\\r\\n        address     beneficiary;\\r\\n        string      offsetEntityID;\\r\\n        string      beneficiaryID;\\r\\n        string      offsetMessage;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IArkreenRECBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IArkreenRECBank {\\r\\n\\r\\n    struct Signature {\\r\\n        address     token;\\r\\n        uint256     value;\\r\\n        uint256     deadline;  \\r\\n        uint8       v;\\r\\n        bytes32     r;\\r\\n        bytes32     s;              \\r\\n    }\\r\\n\\r\\n    function buyART(\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay\\r\\n    ) external;\\r\\n\\r\\n    function buyARTNative(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay\\r\\n    ) external payable; \\r\\n\\r\\n\\r\\n    function buyARTWithPermit(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay,\\r\\n        Signature calldata  permitToPay\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IArkreenRECToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IArkreenRECToken {\\r\\n    function commitOffset(uint256) external returns (uint256); \\r\\n    function commitOffsetFrom(address, uint256) external returns (uint256);     \\r\\n    function offsetAndMintCertificate(  address beneficiary, string calldata offsetEntityID,\\r\\n                                        string calldata beneficiaryID, string calldata offsetMessage, uint256 amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as th xe allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IFeSwapRouter {\\r\\n\\r\\n    struct AddLiquidityParams {\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        uint    amountADesired;\\r\\n        uint    amountBDesired;\\r\\n        uint    amountAMin;\\r\\n        uint    amountBMin;\\r\\n        uint    ratio;\\r\\n    }\\r\\n\\r\\n    struct AddLiquidityETHParams {\\r\\n        address token;\\r\\n        uint    amountTokenDesired;\\r\\n        uint    amountTokenMin;\\r\\n        uint    amountETHMin;\\r\\n        uint    ratio;\\r\\n    }\\r\\n\\r\\n    struct RemoveLiquidityParams {\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        uint    liquidityAAB;\\r\\n        uint    liquidityABB;        \\r\\n        uint    amountAMin;\\r\\n        uint    amountBMin;\\r\\n    }\\r\\n\\r\\n    struct Signature {\\r\\n        uint8       v;\\r\\n        bytes32     r;\\r\\n        bytes32     s;\\r\\n    }\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        AddLiquidityParams calldata addParams,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidityAAB, uint liquidityABB);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        AddLiquidityETHParams calldata addParams,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidityTTE, uint liquidityTEE);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        RemoveLiquidityParams calldata removeParams,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        RemoveLiquidityParams calldata removeParams,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        RemoveLiquidityParams calldata removeParams,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, \\r\\n        Signature   calldata sigAAB,\\r\\n        Signature   calldata sigABB\\r\\n    ) external returns (uint amountA, uint amountB);        \\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        RemoveLiquidityParams calldata removeParams,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, \\r\\n        Signature   calldata sigTTE,\\r\\n        Signature   calldata sigTEE\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHFeeOnTransfer(\\r\\n        RemoveLiquidityParams calldata removeParams,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitFeeOnTransfer(\\r\\n        RemoveLiquidityParams calldata removeParams,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, \\r\\n        Signature   calldata sigTTE,\\r\\n        Signature   calldata sigTEE\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin, \\r\\n        address[] calldata path, \\r\\n        address to, \\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);     \\r\\n\\r\\n    function swapExactTokensForTokensFeeOnTransfer(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensFeeOnTransfer(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHFeeOnTransfer(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    \\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function estimateAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function estimateAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IPausable {\\r\\n    function paused() external view returns (bool);\\r\\n    function pause() external;\\r\\n    function unpause() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"actionBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"offsetEntityID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offsetMessage\",\"type\":\"string\"}],\"internalType\":\"struct BadgeInfo\",\"name\":\"badgeInfo\",\"type\":\"tuple\"}],\"name\":\"actionBuilderBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"offsetEntityID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offsetMessage\",\"type\":\"string\"}],\"internalType\":\"struct BadgeInfo\",\"name\":\"badgeInfo\",\"type\":\"tuple\"}],\"name\":\"actionBuilderBadgeNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"offsetEntityID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offsetMessage\",\"type\":\"string\"}],\"internalType\":\"struct BadgeInfo\",\"name\":\"badgeInfo\",\"type\":\"tuple\"}],\"name\":\"actionBuilderBadgeWithART\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeAction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"offsetEntityID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offsetMessage\",\"type\":\"string\"}],\"internalType\":\"struct BadgeInfo\",\"name\":\"badgeInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"permitToPay\",\"type\":\"tuple\"}],\"name\":\"actionBuilderBadgeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"actionBuilderNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"actionBuilderWithART\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeAction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"permitToPay\",\"type\":\"tuple\"}],\"name\":\"actionBuilderWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"approveArtBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"approveRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"native\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"addOrRemove\",\"type\":\"bool\"}],\"name\":\"mangeTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"}],\"name\":\"postUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedForwarders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ArkreenBuilder", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}