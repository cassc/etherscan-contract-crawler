{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IRelayRecipient.sol\r\n\r\n/**\r\n * a contract must implement this interface in order to support relayed transaction.\r\n * It is better to inherit the BaseRelayRecipient as its implementation.\r\n */\r\nabstract contract IRelayRecipient {\r\n\r\n    /**\r\n     * return if the forwarder is trusted to forward relayed transactions to us.\r\n     * the forwarder is required to verify the sender's signature, and verify\r\n     * the call is not a replay.\r\n     */\r\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\r\n\r\n    /**\r\n     * return the sender of this call.\r\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\r\n     * of the msg.data.\r\n     * otherwise, return `msg.sender`\r\n     * should be used in the contract anywhere instead of msg.sender\r\n     */\r\n    function _msgSender() internal virtual view returns (address payable);\r\n\r\n    function versionRecipient() external virtual view returns (string memory);\r\n}\r\n\r\n// File: contracts/common/BaseRelayRecipient.sol\r\n\r\n/**\r\n * A base contract to be inherited by any contract that want to receive relayed transactions\r\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\r\n */\r\nabstract contract BaseRelayRecipient is IRelayRecipient {\r\n\r\n    /*\r\n     * Forwarder we accept calls from\r\n     */\r\n    function _trustedForwarder() internal virtual view returns(address);\r\n\r\n    /*\r\n     * require a function to be called through GSN only\r\n     */\r\n    modifier trustedForwarderOnly() {\r\n        require(msg.sender == _trustedForwarder(), \"Function can only be called through the trusted Forwarder\");\r\n        _;\r\n    }\r\n\r\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\r\n        return forwarder == _trustedForwarder();\r\n    }\r\n\r\n    /**\r\n     * return the sender of this call.\r\n     * if the call came through our trusted forwarder, return the original sender.\r\n     * otherwise, return `msg.sender`.\r\n     * should be used in the contract anywhere instead of msg.sender\r\n     */\r\n    function _msgSender() internal override virtual view returns (address payable ret) {\r\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\r\n            // At this point we know that the sender is a trusted forwarder,\r\n            // so we trust that the last bytes of msg.data are the verified sender address.\r\n            // extract sender address from the end of msg.data\r\n            assembly {\r\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\r\n            }\r\n        } else {\r\n            return msg.sender;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IMigratable.sol\r\n\r\ninterface IMigratable {\r\n    function approveMigration(IMigratable migrateTo_) external;\r\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\r\n}\r\n\r\n// File: contracts/common/Migratable.sol\r\n\r\nabstract contract Migratable is IMigratable {\r\n\r\n    IMigratable public migrateTo;\r\n\r\n    function _migrationCaller() internal virtual view returns(address);\r\n\r\n    function approveMigration(IMigratable migrateTo_) external override {\r\n        require(msg.sender == _migrationCaller(), \"Only _migrationCaller() can call\");\r\n        require(address(migrateTo_) != address(0) &&\r\n                address(migrateTo_) != address(this), \"Invalid migrateTo_\");\r\n        migrateTo = migrateTo_;\r\n    }\r\n\r\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external virtual override {\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/common/NonReentrancy.sol\r\n\r\ncontract NonReentrancy {\r\n\r\n    uint256 private unlocked = 1;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Tidal: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n}\r\n\r\n// File: contracts/common/WeekManaged.sol\r\n\r\nabstract contract WeekManaged {\r\n\r\n    uint256 public offset = 4 days;\r\n\r\n    function getCurrentWeek() public view returns(uint256) {\r\n        return (now + offset) / (7 days);\r\n    }\r\n\r\n    function getNow() public view returns(uint256) {\r\n        return now;\r\n    }\r\n\r\n    function getUnlockWeek() public view returns(uint256) {\r\n        return getCurrentWeek() + 2;\r\n    }\r\n\r\n    function getUnlockTime(uint256 time_) public view returns(uint256) {\r\n        require(time_ + offset > (7 days), \"Time not large enough\");\r\n        return ((time_ + offset) / (7 days) + 2) * (7 days) - offset;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IAssetManager.sol\r\n\r\ninterface IAssetManager {\r\n    function getCategoryLength() external view returns(uint8);\r\n    function getAssetLength() external view returns(uint256);\r\n    function getAssetToken(uint16 index_) external view returns(address);\r\n    function getAssetCategory(uint16 index_) external view returns(uint8);\r\n    function getIndexesByCategory(uint8 category_, uint256 categoryIndex_) external view returns(uint16);\r\n    function getIndexesByCategoryLength(uint8 category_) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IBuyer.sol\r\n\r\ninterface IBuyer is IMigratable {\r\n    function premiumForGuarantor(uint16 assetIndex_) external view returns(uint256);\r\n    function premiumForSeller(uint16 assetIndex_) external view returns(uint256);\r\n    function weekToUpdate() external view returns(uint256);\r\n    function currentSubscription(uint16 assetIndex_) external view returns(uint256);\r\n    function futureSubscription(uint16 assetIndex_) external view returns(uint256);\r\n    function assetUtilization(uint16 assetIndex_) external view returns(uint256);\r\n    function isUserCovered(address who_) external view returns(bool);\r\n}\r\n\r\n// File: contracts/interfaces/IGuarantor.sol\r\n\r\ninterface IGuarantor is IMigratable {\r\n    function updateBonus(uint16 assetIndex_, uint256 amount_) external;\r\n    function update(address who_) external;\r\n    function startPayout(uint16 assetIndex_, uint256 payoutId_) external;\r\n    function setPayout(uint16 assetIndex_, uint256 payoutId_, address toAddress_, uint256 total_) external;\r\n}\r\n\r\n// File: contracts/interfaces/IRegistry.sol\r\n\r\ninterface IRegistry {\r\n\r\n    function PERCENTAGE_BASE() external pure returns(uint256);\r\n    function UTILIZATION_BASE() external pure returns(uint256);\r\n    function PREMIUM_BASE() external pure returns(uint256);\r\n    function UNIT_PER_SHARE() external pure returns(uint256);\r\n\r\n    function buyer() external view returns(address);\r\n    function seller() external view returns(address);\r\n    function guarantor() external view returns(address);\r\n    function staking() external view returns(address);\r\n    function bonus() external view returns(address);\r\n\r\n    function tidalToken() external view returns(address);\r\n    function baseToken() external view returns(address);\r\n    function assetManager() external view returns(address);\r\n    function premiumCalculator() external view returns(address);\r\n    function platform() external view returns(address);\r\n\r\n    function guarantorPercentage() external view returns(uint256);\r\n    function platformPercentage() external view returns(uint256);\r\n\r\n    function depositPaused() external view returns(bool);\r\n\r\n    function stakingWithdrawWaitTime() external view returns(uint256);\r\n\r\n    function governor() external view returns(address);\r\n    function committee() external view returns(address);\r\n\r\n    function trustedForwarder() external view returns(address);\r\n}\r\n\r\n// File: contracts/Guarantor.sol\r\n\r\n// This contract is not Ownable.\r\ncontract Guarantor is IGuarantor, WeekManaged, Migratable, NonReentrancy, BaseRelayRecipient {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    string public override versionRecipient = \"1.0.0\";\r\n\r\n    IRegistry public registry;\r\n\r\n    struct WithdrawRequest {\r\n        uint256 amount;\r\n        uint256 time;\r\n        bool executed;\r\n    }\r\n\r\n    // who => week => assetIndex => WithdrawRequest\r\n    mapping(address => mapping(uint256 => mapping(uint16 => WithdrawRequest))) public withdrawRequestMap;\r\n\r\n    struct PoolInfo {\r\n        uint256 weekOfPremium;\r\n        uint256 weekOfBonus;\r\n        uint256 premiumPerShare;\r\n        uint256 bonusPerShare;\r\n    }\r\n\r\n    mapping(uint16 => PoolInfo) public poolInfo;\r\n\r\n    struct UserBalance {\r\n        uint256 currentBalance;\r\n        uint256 futureBalance;\r\n    }\r\n\r\n    mapping(address => mapping(uint16 => UserBalance)) public userBalance;\r\n\r\n    struct UserInfo {\r\n        uint256 week;\r\n        uint256 premium;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    // Balance here not withdrawn yet, and are good for staking bonus.\r\n    // assetIndex => amount\r\n    mapping(uint16 => uint256) public assetBalance;\r\n\r\n    struct PayoutInfo {\r\n        address toAddress;\r\n        uint256 total;\r\n        uint256 unitPerShare;\r\n        uint256 paid;\r\n        bool finished;\r\n    }\r\n\r\n    // assetIndex => payoutId => PayoutInfo\r\n    mapping(uint16 => mapping(uint256 => PayoutInfo)) public payoutInfo;\r\n\r\n    // assetIndex => payoutId\r\n    mapping(uint16 => uint256) public payoutIdMap;\r\n\r\n    // who => assetIndex => payoutId\r\n    mapping(address => mapping(uint16 => uint256)) public userPayoutIdMap;\r\n\r\n    event Update(address indexed who_);\r\n    event Deposit(address indexed who_, uint16 indexed assetIndex_, uint256 amount_);\r\n    event ReduceDeposit(address indexed who_, uint16 indexed assetIndex_, uint256 amount_);\r\n    event Withdraw(address indexed who_, uint16 indexed assetIndex_, uint256 amount_);\r\n    event WithdrawReady(address indexed who_, uint16 indexed assetIndex_, uint256 amount_);\r\n    event ClaimPremium(address indexed who_, uint256 amount_);\r\n    event ClaimBonus(address indexed who_, uint256 amount_);\r\n    event StartPayout(uint16 indexed assetIndex_, uint256 indexed payoutId_);\r\n    event SetPayout(uint16 indexed assetIndex_, uint256 indexed payoutId_, address toAddress_, uint256 total_);\r\n    event DoPayout(address indexed who_, uint16 indexed assetIndex_, uint256 indexed payoutId_, uint256 amount_);\r\n    event FinishPayout(uint16 indexed assetIndex_, uint256 indexed payoutId_);\r\n\r\n    constructor (IRegistry registry_) public {\r\n        registry = registry_;\r\n    }\r\n\r\n    function _trustedForwarder() internal override view returns(address) {\r\n        return registry.trustedForwarder();\r\n    }\r\n\r\n    function _migrationCaller() internal override view returns(address) {\r\n        return address(registry);\r\n    }\r\n\r\n    function migrate(uint16 assetIndex_) external lock {\r\n        uint256 balance = userBalance[_msgSender()][assetIndex_].futureBalance;\r\n\r\n        require(address(migrateTo) != address(0), \"Destination not set\");\r\n        require(balance > 0, \"No balance\");\r\n\r\n        userBalance[_msgSender()][assetIndex_].currentBalance = 0;\r\n        userBalance[_msgSender()][assetIndex_].futureBalance = 0;\r\n\r\n        address token = IAssetManager(registry.assetManager()).getAssetToken(assetIndex_);\r\n\r\n        IERC20(token).safeTransfer(address(migrateTo), balance);\r\n        migrateTo.onMigration(_msgSender(), balance, abi.encodePacked(assetIndex_));\r\n    }\r\n\r\n    // Update and pay last week's premium.\r\n    function updatePremium(uint16 assetIndex_) external lock {\r\n        uint256 week = getCurrentWeek();\r\n        require(IBuyer(registry.buyer()).weekToUpdate() == week, \"buyer not ready\");\r\n        require(poolInfo[assetIndex_].weekOfPremium < week, \"already updated\");\r\n\r\n        uint256 amount = IBuyer(registry.buyer()).premiumForGuarantor(assetIndex_);\r\n\r\n        if (assetBalance[assetIndex_] > 0 &&\r\n                IAssetManager(registry.assetManager()).getAssetToken(assetIndex_) != address(0)) {\r\n            IERC20(registry.baseToken()).safeTransferFrom(registry.buyer(), address(this), amount);\r\n            poolInfo[assetIndex_].premiumPerShare =\r\n                amount.mul(registry.UNIT_PER_SHARE()).div(assetBalance[assetIndex_]);\r\n        } else {\r\n            poolInfo[assetIndex_].premiumPerShare = 0;\r\n        }\r\n\r\n        poolInfo[assetIndex_].weekOfPremium = week;\r\n    }\r\n\r\n    // Update and pay last week's bonus.\r\n    function updateBonus(uint16 assetIndex_, uint256 amount_) external lock override {\r\n        require(msg.sender == registry.bonus(), \"Only Bonus can call\");\r\n\r\n        uint256 week = getCurrentWeek();\r\n\r\n        require(poolInfo[assetIndex_].weekOfBonus < week, \"already updated\");\r\n\r\n        if (assetBalance[assetIndex_] > 0 && \r\n                IAssetManager(registry.assetManager()).getAssetToken(assetIndex_) != address(0)) {\r\n            IERC20(registry.tidalToken()).safeTransferFrom(msg.sender, address(this), amount_);\r\n            poolInfo[assetIndex_].bonusPerShare =\r\n                amount_.mul(registry.UNIT_PER_SHARE()).div(assetBalance[assetIndex_]);\r\n        } else {\r\n            poolInfo[assetIndex_].bonusPerShare = 0;\r\n        }\r\n\r\n        poolInfo[assetIndex_].weekOfBonus = week;\r\n    }\r\n\r\n    // Called for every user every week.\r\n    function update(address who_) public override {\r\n        uint256 week = getCurrentWeek();\r\n\r\n        require(userInfo[who_].week < week, \"Already updated\");\r\n\r\n        uint16 index;\r\n        // Assert if premium or bonus not updated, or user already updated.\r\n        for (index = 0; index < IAssetManager(registry.assetManager()).getAssetLength(); ++index) {\r\n            require(poolInfo[index].weekOfPremium == week &&\r\n                poolInfo[index].weekOfBonus == week, \"Not ready\");\r\n        }\r\n\r\n        // For every asset\r\n        for (index = 0; index < IAssetManager(registry.assetManager()).getAssetLength(); ++index) {\r\n            uint256 currentBalance = userBalance[who_][index].currentBalance;\r\n            uint256 futureBalance = userBalance[who_][index].futureBalance;\r\n\r\n            // Update premium.\r\n            userInfo[who_].premium = userInfo[who_].premium.add(currentBalance.mul(\r\n                poolInfo[index].premiumPerShare).div(registry.UNIT_PER_SHARE()));\r\n\r\n            // Update bonus.\r\n            userInfo[who_].bonus = userInfo[who_].bonus.add(currentBalance.mul(\r\n                poolInfo[index].bonusPerShare).div(registry.UNIT_PER_SHARE()));\r\n\r\n            // Update balances and baskets if no claims.\r\n            if (!isAssetLocked(index)) {\r\n                assetBalance[index] = assetBalance[index].add(futureBalance).sub(currentBalance);\r\n                userBalance[who_][index].currentBalance = futureBalance;\r\n            }\r\n        }\r\n\r\n        // Update week.\r\n        userInfo[who_].week = week;\r\n\r\n        emit Update(who_);\r\n    }\r\n\r\n    function isFirstTime(address who_) public view returns(bool) {\r\n        return userInfo[who_].week == 0;\r\n    }\r\n\r\n    function isAssetLocked(uint16 assetIndex_) public view returns(bool) {\r\n        uint256 payoutId = payoutIdMap[assetIndex_];\r\n        return payoutId > 0 && !payoutInfo[assetIndex_][payoutId].finished;\r\n    }\r\n\r\n    function deposit(uint16 assetIndex_, uint256 amount_) external lock {\r\n        require(!isAssetLocked(assetIndex_), \"Is asset locked\");\r\n\r\n        if (isFirstTime(_msgSender())) {\r\n            update(_msgSender());\r\n        }\r\n\r\n        require(userInfo[_msgSender()].week == getCurrentWeek(), \"Not updated yet\");\r\n\r\n        address token = IAssetManager(registry.assetManager()).getAssetToken(assetIndex_);\r\n        require(token != address(0), \"No token address\");\r\n\r\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), amount_);\r\n\r\n        userBalance[_msgSender()][assetIndex_].futureBalance = userBalance[_msgSender()][assetIndex_].futureBalance.add(amount_);\r\n\r\n        emit Deposit(_msgSender(), assetIndex_, amount_);\r\n    }\r\n\r\n    function reduceDeposit(uint16 assetIndex_, uint256 amount_) external lock {\r\n        // Even asset locked, user can still reduce.\r\n\r\n        require(userInfo[_msgSender()].week == getCurrentWeek(), \"Not updated yet\");\r\n        require(amount_ <= userBalance[_msgSender()][assetIndex_].futureBalance.sub(\r\n            userBalance[_msgSender()][assetIndex_].currentBalance), \"Not enough future balance\");\r\n\r\n        address token = IAssetManager(registry.assetManager()).getAssetToken(assetIndex_);\r\n        require(token != address(0), \"No token address\");\r\n\r\n        IERC20(token).safeTransfer(_msgSender(), amount_);\r\n\r\n        userBalance[_msgSender()][assetIndex_].futureBalance = userBalance[_msgSender()][assetIndex_].futureBalance.sub(amount_);\r\n\r\n        emit ReduceDeposit(_msgSender(), assetIndex_, amount_);\r\n    }\r\n\r\n    function withdraw(uint16 assetIndex_, uint256 amount_) external {\r\n        require(IAssetManager(registry.assetManager()).getAssetToken(assetIndex_) != address(0), \"No token address\");\r\n        require(!isAssetLocked(assetIndex_), \"Is asset locked\");\r\n\r\n        require(userInfo[_msgSender()].week == getCurrentWeek(), \"Not updated yet\");\r\n\r\n        require(amount_ > 0, \"Requires positive amount\");\r\n        require(amount_ <= userBalance[_msgSender()][assetIndex_].currentBalance, \"Not enough user balance\");\r\n\r\n        WithdrawRequest memory request;\r\n        request.amount = amount_;\r\n        request.time = getNow();\r\n        request.executed = false;\r\n        withdrawRequestMap[_msgSender()][getUnlockWeek()][assetIndex_] = request;\r\n\r\n        emit Withdraw(_msgSender(), assetIndex_, amount_);\r\n    }\r\n\r\n    function withdrawReady(address who_, uint16 assetIndex_) external lock {\r\n        WithdrawRequest storage request = withdrawRequestMap[who_][getCurrentWeek()][assetIndex_];\r\n\r\n        require(!isAssetLocked(assetIndex_), \"Is asset locked\");\r\n        require(userInfo[who_].week == getCurrentWeek(), \"Not updated yet\");\r\n        require(!request.executed, \"already executed\");\r\n        require(request.time > 0, \"No request\");\r\n\r\n        uint256 unlockTime = getUnlockTime(request.time);\r\n        require(getNow() > unlockTime, \"Not ready to withdraw yet\");\r\n\r\n        address token = IAssetManager(registry.assetManager()).getAssetToken(assetIndex_);\r\n        IERC20(token).safeTransfer(who_, request.amount);\r\n\r\n        assetBalance[assetIndex_] = assetBalance[assetIndex_].sub(request.amount);\r\n        userBalance[who_][assetIndex_].currentBalance = userBalance[who_][assetIndex_].currentBalance.sub(request.amount);\r\n        userBalance[who_][assetIndex_].futureBalance = userBalance[who_][assetIndex_].futureBalance.sub(request.amount);\r\n\r\n        request.executed = true;\r\n\r\n        emit WithdrawReady(_msgSender(), assetIndex_, request.amount);\r\n    }\r\n\r\n    function claimPremium() external lock {\r\n        IERC20(registry.baseToken()).safeTransfer(_msgSender(), userInfo[_msgSender()].premium);\r\n        emit ClaimPremium(_msgSender(), userInfo[_msgSender()].premium);\r\n\r\n        userInfo[_msgSender()].premium = 0;\r\n    }\r\n\r\n    function claimBonus() external lock {\r\n        IERC20(registry.tidalToken()).safeTransfer(_msgSender(), userInfo[_msgSender()].bonus);\r\n        emit ClaimBonus(_msgSender(), userInfo[_msgSender()].bonus);\r\n\r\n        userInfo[_msgSender()].bonus = 0;\r\n    }\r\n\r\n    function startPayout(uint16 assetIndex_, uint256 payoutId_) external override {\r\n        require(msg.sender == registry.committee(), \"Only commitee can call\");\r\n\r\n        require(payoutId_ == payoutIdMap[assetIndex_] + 1, \"payoutId should be increasing\");\r\n        payoutIdMap[assetIndex_] = payoutId_;\r\n\r\n        emit StartPayout(assetIndex_, payoutId_);\r\n    }\r\n\r\n    function setPayout(uint16 assetIndex_, uint256 payoutId_, address toAddress_, uint256 total_) external override {\r\n        require(msg.sender == registry.committee(), \"Only commitee can call\");\r\n\r\n        require(payoutId_ == payoutIdMap[assetIndex_], \"payoutId should be started\");\r\n        require(payoutInfo[assetIndex_][payoutId_].toAddress == address(0), \"already set\");\r\n        require(total_ <= assetBalance[assetIndex_], \"More than asset\");\r\n\r\n        // total_ can be 0.\r\n\r\n        payoutInfo[assetIndex_][payoutId_].toAddress = toAddress_;\r\n        payoutInfo[assetIndex_][payoutId_].total = total_;\r\n        payoutInfo[assetIndex_][payoutId_].unitPerShare = total_.mul(registry.UNIT_PER_SHARE()).div(assetBalance[assetIndex_]);\r\n        payoutInfo[assetIndex_][payoutId_].paid = 0;\r\n        payoutInfo[assetIndex_][payoutId_].finished = false;\r\n\r\n        emit SetPayout(assetIndex_, payoutId_, toAddress_, total_);\r\n    }\r\n\r\n    // This function can be called by anyone.\r\n    function doPayout(address who_, uint16 assetIndex_) external {\r\n        uint256 payoutId = payoutIdMap[assetIndex_];\r\n        \r\n        require(payoutInfo[assetIndex_][payoutId].toAddress != address(0), \"not set\");\r\n        require(userPayoutIdMap[who_][assetIndex_] < payoutId, \"Already paid\");\r\n\r\n        userPayoutIdMap[who_][assetIndex_] = payoutId;\r\n\r\n        if (payoutInfo[assetIndex_][payoutId].finished) {\r\n            // In case someone paid for the difference.\r\n            return;\r\n        }\r\n\r\n        uint256 amountToPay = userBalance[who_][assetIndex_].currentBalance.mul(\r\n            payoutInfo[assetIndex_][payoutId].unitPerShare).div(registry.UNIT_PER_SHARE());\r\n\r\n        userBalance[who_][assetIndex_].currentBalance = userBalance[who_][assetIndex_].currentBalance.sub(amountToPay);\r\n        userBalance[who_][assetIndex_].futureBalance = userBalance[who_][assetIndex_].futureBalance.sub(amountToPay);\r\n        assetBalance[assetIndex_] = assetBalance[assetIndex_].sub(amountToPay);\r\n        payoutInfo[assetIndex_][payoutId].paid = payoutInfo[assetIndex_][payoutId].paid.add(amountToPay);\r\n\r\n        emit DoPayout(who_, assetIndex_, payoutId, amountToPay);\r\n    }\r\n\r\n    // This function can be called by anyone as long as he will pay for the difference.\r\n    function finishPayout(uint16 assetIndex_, uint256 payoutId_) external lock {\r\n        require(payoutId_ <= payoutIdMap[assetIndex_], \"payoutId should be valid\");\r\n        require(!payoutInfo[assetIndex_][payoutId_].finished, \"already finished\");\r\n\r\n        address token = IAssetManager(registry.assetManager()).getAssetToken(assetIndex_);\r\n\r\n        if (payoutInfo[assetIndex_][payoutId_].paid < payoutInfo[assetIndex_][payoutId_].total) {\r\n            // In case there is still small error.\r\n            IERC20(token).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                payoutInfo[assetIndex_][payoutId_].total.sub(payoutInfo[assetIndex_][payoutId_].paid));\r\n            payoutInfo[assetIndex_][payoutId_].paid = payoutInfo[assetIndex_][payoutId_].total;\r\n        }\r\n\r\n        if (token != address(0)) {\r\n            IERC20(token).safeTransfer(payoutInfo[assetIndex_][payoutId_].toAddress,\r\n                                       payoutInfo[assetIndex_][payoutId_].total);\r\n        }\r\n\r\n        payoutInfo[assetIndex_][payoutId_].finished = true;\r\n\r\n        emit FinishPayout(assetIndex_, payoutId_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"ClaimBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"ClaimPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"DoPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"}],\"name\":\"FinishPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"ReduceDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"}],\"name\":\"SetPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"}],\"name\":\"StartPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"WithdrawReady\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMigratable\",\"name\":\"migrateTo_\",\"type\":\"address\"}],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"assetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"}],\"name\":\"doPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"}],\"name\":\"finishPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"}],\"name\":\"isAssetLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"isFirstTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTo\",\"outputs\":[{\"internalType\":\"contract IMigratable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"onMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payoutIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoutInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weekOfPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekOfBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"}],\"name\":\"setPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"payoutId_\",\"type\":\"uint256\"}],\"name\":\"startPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"updateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"}],\"name\":\"updatePremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"userPayoutIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"assetIndex_\",\"type\":\"uint16\"}],\"name\":\"withdrawReady\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"withdrawRequestMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Guarantor", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a1603ca01b9884d0a4462e29e57a298282515e19", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26fa53d4fde9b4830a54b9ffa9d2f06bfa44bd2dd7f95f6c34aa0ef39e1710eb"}