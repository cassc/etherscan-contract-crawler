{"SourceCode": "/**\r\n *Submitted for verification at moonbeam.moonscan.io on 2022-02-18\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IWETH.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/Babylonian.sol@v1.1.1\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Pickle_UniV2_ZapIn_V1.sol\r\n\r\n///@author Pickle\r\n///@notice This contract adds liquidity to Uniswap V2 pools using ETH or any ERC20 Token and then adds this lp token to desired jar in a single txn.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IPickleJar {\r\n    function token() external view returns (address);\r\n\r\n    function deposit(uint256 amount) external;\r\n}\r\n\r\nabstract contract ZapBaseV2 is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    bool public stopped = false;\r\n    // swapTarget => approval status\r\n    mapping(address => bool) public approvedTargets;\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency() {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function _getBalance(address token)\r\n        internal\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        if (token == address(0)) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = IERC20(token).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _approveToken(address token, address spender) internal {\r\n        IERC20 _token = IERC20(token);\r\n        if (_token.allowance(address(this), spender) > 0) return;\r\n        else {\r\n            _token.safeApprove(spender, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function _approveToken(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20 _token = IERC20(token);\r\n        _token.safeApprove(spender, 0);\r\n        _token.safeApprove(spender, amount);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    function setApprovedTargets(\r\n        address[] calldata targets,\r\n        bool[] calldata isApproved\r\n    ) external onlyOwner {\r\n        require(targets.length == isApproved.length, \"Invalid Input length\");\r\n\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            approvedTargets[targets[i]] = isApproved[i];\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\r\n    }\r\n}\r\n\r\ncontract Pickle_UniV2_ZapIn_V1 is ZapBaseV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 private constant deadline =\r\n        0xf000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    address public wethTokenAddress;\r\n\r\n    constructor(address[] memory targets, address wnative)\r\n    {\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            approvedTargets[targets[i]] = true;\r\n        }\r\n\r\n        wethTokenAddress = wnative;\r\n    }\r\n\r\n    event zapIn(address sender, address jar, uint256 tokensRec);\r\n\r\n    /**\r\n    @notice This function is used to invest in given Uniswap V2 pair through ETH/ERC20 Tokens\r\n    @param _FromTokenContractAddress The ERC20 token used for investment (address(0x00) if ether)\r\n    @param _amount The amount of fromToken to invest\r\n    @param _pairAddress The Uniswap pair address or the PJar token\r\n    @param _toPJar Pickle vault address\r\n    @param _minPJarTokens The minimum acceptable quantity vault tokens to receive. Reverts otherwise\r\n    @param _swapTarget Excecution target for the first swap\r\n    @param _swapData DEX quote data\r\n    @param _transferResidual Set false to save gas by donating the residual remaining after a Zap\r\n    @param _uniswapRouter Protocol's uniswap router address\r\n    @param _shouldSellEntireBalance Checks the total allowance of input token to zapin instead of the _amount, if true\r\n    @return tokensReceived Quantity of Vault tokens received\r\n     */\r\n    function ZapIn(\r\n        address _FromTokenContractAddress,\r\n        uint256 _amount,\r\n        address _pairAddress,\r\n        address _toPJar,\r\n        uint256 _minPJarTokens,\r\n        address _swapTarget,\r\n        bytes calldata _swapData,\r\n        bool _transferResidual,\r\n        address _uniswapRouter,\r\n        bool _shouldSellEntireBalance\r\n    ) external payable stopInEmergency returns (uint256 tokensReceived) {\r\n        uint256 _toInvest = _pullTokens(\r\n            _FromTokenContractAddress,\r\n            _amount,\r\n            _shouldSellEntireBalance\r\n        );\r\n\r\n        uint256 LPBought = _performZapIn(\r\n            _FromTokenContractAddress,\r\n            _pairAddress,\r\n            _toInvest,\r\n            _swapTarget,\r\n            _swapData,\r\n            _transferResidual,\r\n            _uniswapRouter\r\n        );\r\n\r\n        tokensReceived = _vaultDeposit(LPBought, _toPJar, _minPJarTokens);\r\n    }\r\n\r\n    function _pullTokens(\r\n        address _from,\r\n        uint256 _amount,\r\n        bool _shouldSellEntireBalance\r\n    ) internal returns (uint256) {\r\n        if (_from != address(0)) {\r\n            require(_amount > 0, \"Invalid token amount\");\r\n            require(msg.value == 0, \"Eth sent with token\");\r\n\r\n            //transfer token\r\n            if (_shouldSellEntireBalance) {\r\n                require(\r\n                    Address.isContract(msg.sender),\r\n                    \"ERR: shouldSellEntireBalance is true for EOA\"\r\n                );\r\n                _amount = IERC20(_from).allowance(msg.sender, address(this));\r\n            }\r\n            IERC20(_from).safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    function _vaultDeposit(\r\n        uint256 amount,\r\n        address toVault,\r\n        uint256 minTokensRec\r\n    ) internal returns (uint256 tokensReceived) {\r\n        address underlyingVaultToken = IPickleJar(toVault).token();\r\n\r\n        _approveToken(underlyingVaultToken, toVault);\r\n\r\n        uint256 iniYVaultBal = IERC20(toVault).balanceOf(address(this));\r\n        IPickleJar(toVault).deposit(amount);\r\n        tokensReceived =\r\n            IERC20(toVault).balanceOf(address(this)) -\r\n            iniYVaultBal;\r\n        require(tokensReceived >= minTokensRec, \"Err: High Slippage\");\r\n\r\n        IERC20(toVault).safeTransfer(msg.sender, tokensReceived);\r\n        emit zapIn(msg.sender, toVault, tokensReceived);\r\n    }\r\n\r\n    function _getPairTokens(address _pairAddress)\r\n        internal\r\n        view\r\n        returns (address token0, address token1)\r\n    {\r\n        IUniswapV2Pair uniPair = IUniswapV2Pair(_pairAddress);\r\n        token0 = uniPair.token0();\r\n        token1 = uniPair.token1();\r\n    }\r\n\r\n    function _performZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _pairAddress,\r\n        uint256 _amount,\r\n        address _swapTarget,\r\n        bytes memory swapData,\r\n        bool transferResidual,\r\n        address _uniswapRouter\r\n    ) internal returns (uint256) {\r\n        uint256 intermediateAmt;\r\n        address intermediateToken;\r\n        (address _ToUniswapToken0, address _ToUniswapToken1) = _getPairTokens(\r\n            _pairAddress\r\n        );\r\n\r\n        if (\r\n            _FromTokenContractAddress != _ToUniswapToken0 &&\r\n            _FromTokenContractAddress != _ToUniswapToken1\r\n        ) {\r\n            // swap to intermediate\r\n            (intermediateAmt, intermediateToken) = _fillQuote(\r\n                _FromTokenContractAddress,\r\n                _pairAddress,\r\n                _amount,\r\n                _swapTarget,\r\n                swapData\r\n            );\r\n        } else {\r\n            intermediateToken = _FromTokenContractAddress;\r\n            intermediateAmt = _amount;\r\n        }\r\n\r\n        // divide intermediate into appropriate amount to add liquidity\r\n        (uint256 token0Bought, uint256 token1Bought) = _swapIntermediate(\r\n            intermediateToken,\r\n            _ToUniswapToken0,\r\n            _ToUniswapToken1,\r\n            intermediateAmt,\r\n            _uniswapRouter\r\n        );\r\n\r\n        return\r\n            _uniDeposit(\r\n                _ToUniswapToken0,\r\n                _ToUniswapToken1,\r\n                token0Bought,\r\n                token1Bought,\r\n                transferResidual,\r\n                _uniswapRouter\r\n            );\r\n    }\r\n\r\n    function _uniDeposit(\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 token0Bought,\r\n        uint256 token1Bought,\r\n        bool transferResidual,\r\n        address _uniswapRouter\r\n    ) internal returns (uint256) {\r\n        _approveToken(_ToUnipoolToken0, _uniswapRouter, token0Bought);\r\n        _approveToken(_ToUnipoolToken1, _uniswapRouter, token1Bought);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 LP) = IUniswapV2Router02(\r\n            _uniswapRouter\r\n        ).addLiquidity(\r\n                _ToUnipoolToken0,\r\n                _ToUnipoolToken1,\r\n                token0Bought,\r\n                token1Bought,\r\n                1,\r\n                1,\r\n                address(this),\r\n                deadline\r\n            );\r\n\r\n        if (transferResidual) {\r\n            //Returning Residue in token0, if any.\r\n            if (token0Bought - amountA > 0) {\r\n                IERC20(_ToUnipoolToken0).safeTransfer(\r\n                    msg.sender,\r\n                    token0Bought - amountA\r\n                );\r\n            }\r\n\r\n            //Returning Residue in token1, if any\r\n            if (token1Bought - amountB > 0) {\r\n                IERC20(_ToUnipoolToken1).safeTransfer(\r\n                    msg.sender,\r\n                    token1Bought - amountB\r\n                );\r\n            }\r\n        }\r\n\r\n        return LP;\r\n    }\r\n\r\n    function _fillQuote(\r\n        address _fromTokenAddress,\r\n        address _pairAddress,\r\n        uint256 _amount,\r\n        address _swapTarget,\r\n        bytes memory swapData\r\n    ) internal returns (uint256 amountBought, address intermediateToken) {\r\n        if (_swapTarget == wethTokenAddress) {\r\n            require(_amount > 0 && msg.value == _amount, \"Invalid _amount: Input ETH mismatch\");\r\n            IWETH(wethTokenAddress).deposit{ value: _amount }();\r\n            return (_amount, wethTokenAddress);\r\n        }\r\n\r\n        uint256 valueToSend;\r\n        if (_fromTokenAddress == address(0)) {\r\n            require(_amount > 0 && msg.value == _amount, \"Invalid _amount: Input ETH mismatch\");\r\n            valueToSend = _amount;\r\n        } else {\r\n            _approveToken(_fromTokenAddress, _swapTarget, _amount);\r\n        }\r\n\r\n        (address _token0, address _token1) = _getPairTokens(_pairAddress);\r\n        IERC20 token0 = IERC20(_token0);\r\n        IERC20 token1 = IERC20(_token1);\r\n        uint256 initialBalance0 = token0.balanceOf(address(this));\r\n        uint256 initialBalance1 = token1.balanceOf(address(this));\r\n\r\n        require(approvedTargets[_swapTarget], \"Target not Authorized\");\r\n        (bool success, ) = _swapTarget.call{value: valueToSend}(swapData);\r\n        require(success, \"Error Swapping Tokens 1\");\r\n\r\n        uint256 finalBalance0 = token0.balanceOf(address(this)) -\r\n            initialBalance0;\r\n        uint256 finalBalance1 = token1.balanceOf(address(this)) -\r\n            initialBalance1;\r\n\r\n        if (finalBalance0 > finalBalance1) {\r\n            amountBought = finalBalance0;\r\n            intermediateToken = _token0;\r\n        } else {\r\n            amountBought = finalBalance1;\r\n            intermediateToken = _token1;\r\n        }\r\n\r\n        require(amountBought > 0, \"Swapped to Invalid Intermediate\");\r\n    }\r\n\r\n    function _swapIntermediate(\r\n        address _toContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount,\r\n        address _uniswapRouter\r\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\r\n        IUniswapV2Factory uniV2Factory = IUniswapV2Factory(\r\n            IUniswapV2Router02(_uniswapRouter).factory()\r\n        );\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(\r\n            uniV2Factory.getPair(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        );\r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n        if (_toContractAddress == _ToUnipoolToken0) {\r\n            uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\r\n            token1Bought = _token2Token(\r\n                _toContractAddress,\r\n                _ToUnipoolToken1,\r\n                amountToSwap,\r\n                _uniswapRouter,\r\n                uniV2Factory\r\n            );\r\n            token0Bought = _amount - amountToSwap;\r\n        } else {\r\n            uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\r\n            token0Bought = _token2Token(\r\n                _toContractAddress,\r\n                _ToUnipoolToken0,\r\n                amountToSwap,\r\n                _uniswapRouter,\r\n                uniV2Factory\r\n            );\r\n            token1Bought = _amount - amountToSwap;\r\n        }\r\n    }\r\n\r\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (Babylonian.sqrt(\r\n                reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))\r\n            ) - (reserveIn * 1997)) / 1994;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to swap ERC20 <> ERC20\r\n    @param _FromTokenContractAddress The token address to swap from.\r\n    @param _ToTokenContractAddress The token address to swap to. \r\n    @param tokens2Trade The amount of tokens to swap\r\n    @return tokenBought The quantity of tokens bought\r\n    */\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        address _uniswapRouter,\r\n        IUniswapV2Factory uniV2Factory\r\n    ) internal returns (uint256 tokenBought) {\r\n        if (_FromTokenContractAddress == _ToTokenContractAddress) {\r\n            return tokens2Trade;\r\n        }\r\n\r\n        _approveToken(_FromTokenContractAddress, _uniswapRouter, tokens2Trade);\r\n\r\n        address pair = uniV2Factory.getPair(\r\n            _FromTokenContractAddress,\r\n            _ToTokenContractAddress\r\n        );\r\n        require(pair != address(0), \"No Swap Available\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = _FromTokenContractAddress;\r\n        path[1] = _ToTokenContractAddress;\r\n\r\n        tokenBought = IUniswapV2Router02(_uniswapRouter)\r\n            .swapExactTokensForTokens(\r\n                tokens2Trade,\r\n                1,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[path.length - 1];\r\n\r\n        require(tokenBought > 0, \"Error Swapping Tokens 2\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"wnative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRec\",\"type\":\"uint256\"}],\"name\":\"zapIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toPJar\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPJarTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_transferResidual\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_shouldSellEntireBalance\",\"type\":\"bool\"}],\"name\":\"ZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isApproved\",\"type\":\"bool[]\"}],\"name\":\"setApprovedTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pickle_UniV2_ZapIn_V1", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000000000000000000000000000000000000000000300000000000000000000000093bcdc45f7e62f89a8e901dc4a0e2c6c427d9f250000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c1346dff28a0d738f027157c8131af15af9fae997d42d9f8020e3e99fc7b709"}