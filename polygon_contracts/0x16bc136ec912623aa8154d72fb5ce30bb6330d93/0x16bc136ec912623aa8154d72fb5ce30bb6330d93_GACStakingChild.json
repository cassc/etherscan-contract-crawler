{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IGACXP.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n/**\r\n * Author: Cory Cherven (Animalmix55/ToxicPizza)\r\n */\r\ninterface IGACXP is IERC20 {\r\n    /**\r\n     * Mints to the given account from the sender provided the sender is authorized.\r\n     */\r\n    function mint(uint256 amount, address to) external;\r\n\r\n    /**\r\n     * Mints to the given accounts from the sender provided the sender is authorized.\r\n     */\r\n    function bulkMint(uint256[] calldata amounts, address[] calldata to) external;\r\n\r\n    /**\r\n     * Burns the given amount for the user provided the sender is authorized.\r\n     */\r\n    function burn(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * Gets the amount of mints the user is entitled to.\r\n     */\r\n    function getMintAllowance(address user) external view returns (uint256);\r\n\r\n    /**\r\n     * Updates the allowance for the given user to mint. Set to zero to revoke.\r\n     *\r\n     * @dev This functionality programatically enables allowing other platforms to\r\n     *      distribute the token on our behalf.\r\n     */\r\n    function updateMintAllowance(address user, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/fx-portal/tunnel/FxBaseChildTunnel.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// IFxMessageProcessor represents interface to process message\r\ninterface IFxMessageProcessor {\r\n    function processMessageFromRoot(\r\n        uint256 stateId,\r\n        address rootMessageSender,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @notice Mock child tunnel contract to receive and send message from L2\r\n */\r\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\r\n    // MessageTunnel on L1 will get data from this event\r\n    event MessageSent(bytes message);\r\n\r\n    // fx child\r\n    address public fxChild;\r\n\r\n    // fx root tunnel\r\n    address public fxRootTunnel;\r\n\r\n    constructor(address _fxChild) {\r\n        fxChild = _fxChild;\r\n    }\r\n\r\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\r\n    modifier validateSender(address sender) {\r\n        require(sender == fxRootTunnel, \"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\");\r\n        _;\r\n    }\r\n\r\n    // set fxRootTunnel if not set already\r\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\r\n        require(fxRootTunnel == address(0x0), \"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\");\r\n        fxRootTunnel = _fxRootTunnel;\r\n    }\r\n\r\n    function processMessageFromRoot(\r\n        uint256 stateId,\r\n        address rootMessageSender,\r\n        bytes calldata data\r\n    ) external override {\r\n        require(msg.sender == fxChild, \"FxBaseChildTunnel: INVALID_SENDER\");\r\n        _processMessageFromRoot(stateId, rootMessageSender, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Emit message that can be received on Root Tunnel\r\n     * @dev Call the internal function when need to emit message\r\n     * @param message bytes message that will be sent to Root Tunnel\r\n     * some message examples -\r\n     *   abi.encode(tokenId);\r\n     *   abi.encode(tokenId, tokenMetadata);\r\n     *   abi.encode(messageType, messageData);\r\n     */\r\n    function _sendMessageToRoot(bytes memory message) internal {\r\n        emit MessageSent(message);\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from Root Tunnel\r\n     * @dev function needs to be implemented to handle message as per requirement\r\n     * This is called by onStateReceive function.\r\n     * Since it is called via a system call, any event will not be emitted during its execution.\r\n     * @param stateId unique state id\r\n     * @param sender root message sender\r\n     * @param message bytes message that was sent from Root Tunnel\r\n     */\r\n    function _processMessageFromRoot(\r\n        uint256 stateId,\r\n        address sender,\r\n        bytes memory message\r\n    ) internal virtual;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/access/DeveloperAccess.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an developer) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the developer account will be the one that deploys the contract. This\r\n * can later be changed with {transferDevelopership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyDeveloper`, which can be applied to your functions to restrict their use to\r\n * the developer.\r\n */\r\nabstract contract DeveloperAccess is Context {\r\n    address private _developer;\r\n\r\n    event DevelopershipTransferred(address indexed previousDeveloper, address indexed newDeveloper);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial developer.\r\n     */\r\n    constructor(address dev) {\r\n        _setDeveloper(dev);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current developer.\r\n     */\r\n    function developer() public view virtual returns (address) {\r\n        return _developer;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the developer.\r\n     */\r\n    modifier onlyDeveloper() {\r\n        require(developer() == _msgSender(), \"Ownable: caller is not the developer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without developer. It will not be possible to call\r\n     * `onlyDeveloper` functions anymore. Can only be called by the current developer.\r\n     *\r\n     * NOTE: Renouncing developership will leave the contract without an developer,\r\n     * thereby removing any functionality that is only available to the developer.\r\n     */\r\n    function renounceDevelopership() public virtual onlyDeveloper {\r\n        _setDeveloper(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers developership of the contract to a new account (`newDeveloper`).\r\n     * Can only be called by the current developer.\r\n     */\r\n    function transferDevelopership(address newDeveloper) public virtual onlyDeveloper {\r\n        require(newDeveloper != address(0), \"Ownable: new developer is the zero address\");\r\n        _setDeveloper(newDeveloper);\r\n    }\r\n\r\n    function _setDeveloper(address newDeveloper) private {\r\n        address oldDeveloper = _developer;\r\n        _developer = newDeveloper;\r\n        emit DevelopershipTransferred(oldDeveloper, newDeveloper);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/GACStakingChild.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The staking contract designated to exist on the Polygon (MATIC) chain,\r\n * briged via FX-Portal.\r\n *\r\n * Author: Cory Cherven (Animalmix55/ToxicPizza)\r\n */\r\ncontract GACStakingChild is FxBaseChildTunnel, Ownable, DeveloperAccess {\r\n    uint256 constant YIELD_PERIOD = 1 days;\r\n    IGACXP public GACXP;\r\n    uint256 public firstTimeBonus = 80000000000000000000;\r\n\r\n    struct Reward {\r\n        uint128 amount;\r\n        uint128 nextTier;\r\n    }\r\n\r\n    struct Stake {\r\n        uint128 amount;\r\n        uint120 lastUpdated;\r\n        bool hasClaimed;\r\n    }\r\n\r\n    /**\r\n     * A linked list of reward tiers based on holdings\r\n     */\r\n    mapping(uint128 => Reward) public rewards;\r\n\r\n    /**\r\n     * Users' stakes mapped from their address\r\n     */\r\n    mapping(address => Stake) public stakes;\r\n\r\n    constructor(\r\n        address fxChild,\r\n        address devAddress,\r\n        address tokenAddress\r\n    ) FxBaseChildTunnel(fxChild) DeveloperAccess(devAddress) {\r\n        GACXP = IGACXP(tokenAddress);\r\n\r\n        // configure default reward scheme\r\n        uint128[] memory amounts = new uint128[](16);\r\n        uint128[] memory newRewards = new uint128[](16);\r\n\r\n        amounts[0] = 1;\r\n        newRewards[0] = 80000000000000000000;\r\n\r\n        amounts[1] = 2;\r\n        newRewards[1] = 90000000000000000000;\r\n\r\n        amounts[2] = 3;\r\n        newRewards[2] = 110000000000000000000;\r\n\r\n        amounts[3] = 4;\r\n        newRewards[3] = 140000000000000000000;\r\n\r\n        amounts[4] = 5;\r\n        newRewards[4] = 180000000000000000000;\r\n\r\n        amounts[5] = 7;\r\n        newRewards[5] = 250000000000000000000;\r\n\r\n        amounts[6] = 10;\r\n        newRewards[6] = 350000000000000000000;\r\n\r\n        amounts[7] = 15;\r\n        newRewards[7] = 460000000000000000000;\r\n\r\n        amounts[8] = 20;\r\n        newRewards[8] = 590000000000000000000;\r\n\r\n        amounts[9] = 25;\r\n        newRewards[9] = 730000000000000000000;\r\n\r\n        amounts[10] = 30;\r\n        newRewards[10] = 880000000000000000000;\r\n\r\n        amounts[11] = 40;\r\n        newRewards[11] = 1090000000000000000000;\r\n\r\n        amounts[12] = 50;\r\n        newRewards[12] = 1310000000000000000000;\r\n\r\n        amounts[13] = 60;\r\n        newRewards[13] = 1540000000000000000000;\r\n\r\n        amounts[14] = 75;\r\n        newRewards[14] = 1835000000000000000000;\r\n\r\n        amounts[15] = 100;\r\n        newRewards[15] = 2235000000000000000000;\r\n\r\n        setRewards(amounts, newRewards);\r\n    }\r\n\r\n    // -------------------------------------------- ADMIN FUNCTIONS --------------------------------------------------\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the developer/owner.\r\n     */\r\n    modifier onlyOwnerOrDeveloper() {\r\n        require(\r\n            developer() == _msgSender() || owner() == _msgSender(),\r\n            \"Ownable: caller is not the owner or developer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sets/updates the address for the root tunnel\r\n     * @param _fxRootTunnel - the fxRootTunnel address\r\n     */\r\n    function setFxRootTunnel(address _fxRootTunnel)\r\n        external\r\n        override\r\n        onlyOwnerOrDeveloper\r\n    {\r\n        fxRootTunnel = _fxRootTunnel;\r\n    }\r\n\r\n    /**\r\n     * A manual override functionality to allow an admit to update a user's stake.\r\n     * @param user - the user whose stake is being updated.\r\n     * @param amount - the amount to set the user's stake to.\r\n     * @dev this will claim any existing rewards and reset timers.\r\n     */\r\n    function manuallyUpdateStake(address user, uint128 amount)\r\n        public\r\n        onlyOwnerOrDeveloper\r\n    {\r\n        _manuallyUpdateStake(user, amount);\r\n    }\r\n\r\n    /**\r\n     * A manual override functionality to allow an admit to update many users' stakes.\r\n     * @param users - the users whose stakes are being updated.\r\n     * @param amounts - the amounts to set the associated user's stake to.\r\n     * @dev this will claim any existing rewards and reset timers.\r\n     */\r\n    function manuallyUpdateBulkStakes(\r\n        address[] calldata users,\r\n        uint128[] calldata amounts\r\n    ) external onlyOwnerOrDeveloper {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            _manuallyUpdateStake(users[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets/updates the bonus for claiming for the first time.\r\n     * @param _bonus - the new bonus\r\n     */\r\n    function setFirstTimeBonus(uint256 _bonus) external onlyOwnerOrDeveloper {\r\n        firstTimeBonus = _bonus;\r\n    }\r\n\r\n    /**\r\n     * Resets the reward calculation schema.\r\n     * @param amounts - a list of held amounts in increasing order.\r\n     * @param newRewards - a parallel list to amounts containing the summative yields per period for the respective amount.\r\n     */\r\n    function setRewards(uint128[] memory amounts, uint128[] memory newRewards)\r\n        public\r\n        onlyOwnerOrDeveloper\r\n    {\r\n        require(amounts.length == newRewards.length, \"Length mismatch\");\r\n        require(amounts.length > 0, \"Too few rewards\");\r\n        require(amounts[0] == 1, \"Must begin with one\");\r\n\r\n        uint128 lastAmount;\r\n        for (uint256 i; i < amounts.length; i++) {\r\n            require(amounts[i] > lastAmount, \"Not in order\");\r\n            lastAmount = amounts[i];\r\n\r\n            Reward memory currentReward;\r\n            currentReward.amount = newRewards[i];\r\n            if (amounts.length > i + 1) currentReward.nextTier = amounts[i + 1];\r\n\r\n            rewards[amounts[i]] = currentReward;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------- PUBLIC FUNCTIONS -----------------------------------------------\r\n\r\n    /**\r\n     * Claims the pending reward for the transaction sender.\r\n     */\r\n    function claimReward() external {\r\n        _updateBalance(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Gets the pending reward for the provided user.\r\n     * @param user - the user whose reward is being sought.\r\n     */\r\n    function getReward(address user) external view returns (uint256) {\r\n        return _currentReward(stakes[user]);\r\n    }\r\n\r\n    /**\r\n     * Tricks collab.land and other ERC721 balance checkers into believing that the user has a balance.\r\n     * @dev a duplicate stakes(user).amount.\r\n     * @param user - the user to get the balance of.\r\n     */\r\n    function balanceOf(address user) external view returns (uint256) {\r\n        return stakes[user].amount;\r\n    }\r\n\r\n    /**\r\n     * Dumps the rewards currently programmed in per tier as two parallel arrays\r\n     * defining (amount, yield) pairs.\r\n     *\r\n     * @return (uint128[] holdingAmounts, uint128[] rewardAmounts)\r\n     */\r\n    function dumpRewards()\r\n        external\r\n        view\r\n        returns (uint128[] memory, uint128[] memory)\r\n    {\r\n        uint128 numTiers = _countRewardsTiers();\r\n\r\n        uint128[] memory holdingAmounts = new uint128[](numTiers);\r\n        uint128[] memory rewardAmounts = new uint128[](numTiers);\r\n\r\n        uint128 nextTier = 1;\r\n        uint128 index = 0;\r\n\r\n        while (nextTier != 0) {\r\n            holdingAmounts[index] = nextTier;\r\n            rewardAmounts[index] = rewards[nextTier].amount;\r\n\r\n            nextTier = rewards[nextTier].nextTier;\r\n            index++;\r\n        }\r\n\r\n        return (holdingAmounts, rewardAmounts);\r\n    }\r\n\r\n    // -------------------------------------------- INTERNAL FUNCTIONS ----------------------------------------------\r\n\r\n    /**\r\n     * Counts the number of rewards tiers in the linked list starting at 1.\r\n     */\r\n    function _countRewardsTiers() internal view returns (uint128) {\r\n        uint128 count = 0;\r\n        uint128 nextTier = 1;\r\n\r\n        while (nextTier != 0) {\r\n            count++;\r\n            nextTier = rewards[nextTier].nextTier;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from FxChild\r\n     * @param sender root message sender\r\n     * @param message bytes message that was sent from Root Tunnel\r\n     */\r\n    function _processMessageFromRoot(\r\n        uint256,\r\n        address sender,\r\n        bytes memory message\r\n    ) internal override validateSender(sender) {\r\n        (address from, uint256 count, bool isInbound) = abi.decode(\r\n            message,\r\n            (address, uint256, bool)\r\n        );\r\n\r\n        if (isInbound) _stake(from, uint128(count));\r\n        else _unstake(from, uint128(count));\r\n    }\r\n\r\n    /**\r\n     * Updates the stake to represent new tokens, starts over the current period.\r\n     */\r\n    function _stake(address user, uint128 amount) internal {\r\n        _updateBalance(user);\r\n\r\n        stakes[user].amount += amount;\r\n    }\r\n\r\n    /**\r\n     * Updates the stake to represent new tokens, starts over the current period.\r\n     */\r\n    function _unstake(address user, uint128 amount) internal {\r\n        _updateBalance(user);\r\n\r\n        stakes[user].amount -= amount;\r\n    }\r\n\r\n    /**\r\n     * A manual override functionality to allow an admit to update a user's stake.\r\n     * @param user - the user whose stake is being updated.\r\n     * @param amount - the amount to set the user's stake to.\r\n     * @dev this will claim any existing rewards and reset timers.\r\n     */\r\n    function _manuallyUpdateStake(address user, uint128 amount) internal {\r\n        _updateBalance(user);\r\n\r\n        stakes[user].amount = amount;\r\n    }\r\n\r\n    /**\r\n     * To be called on stake/unstake, evaluates the user's current balance\r\n     * and resets any timers.\r\n     * @param user - the user to update for.\r\n     */\r\n    function _updateBalance(address user) internal {\r\n        Stake storage stake = stakes[user];\r\n\r\n        uint256 reward = _currentReward(stake);\r\n        stake.lastUpdated = uint120(block.timestamp);\r\n\r\n        if (reward > 0) {\r\n            if (!stake.hasClaimed) stake.hasClaimed = true;\r\n            GACXP.mint(reward, user);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the current pending reward based on the inputted stake struct.\r\n     * @param stake - the stake for the user to calculate upon.\r\n     */\r\n    function _currentReward(Stake memory stake)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 periodicYield = _calculateReward(stake.amount);\r\n        uint256 periodsPassed = (block.timestamp - stake.lastUpdated) /\r\n            YIELD_PERIOD;\r\n\r\n        uint256 reward = periodicYield * periodsPassed;\r\n        if (reward != 0 && !stake.hasClaimed) reward += firstTimeBonus;\r\n\r\n        return reward;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the current reward for having staked the given amount of tokens.\r\n     * @param amount - the amount of tokens staked.\r\n     * @return reward - the dividend per day.\r\n     */\r\n    function _calculateReward(uint128 amount) internal view returns (uint256) {\r\n        if (amount == 0) return 0;\r\n\r\n        uint256 reward;\r\n        uint128 next = 1;\r\n\r\n        do {\r\n            Reward memory currentReward = rewards[next];\r\n            reward += currentReward.amount;\r\n            next = currentReward.nextTier;\r\n        } while (next != 0 && next <= amount);\r\n\r\n        return reward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDeveloper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"DevelopershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GACXP\",\"outputs\":[{\"internalType\":\"contract IGACXP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpRewards\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstTimeBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"manuallyUpdateBulkStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"manuallyUpdateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceDevelopership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nextTier\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setFirstTimeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"newRewards\",\"type\":\"uint128[]\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint120\",\"name\":\"lastUpdated\",\"type\":\"uint120\"},{\"internalType\":\"bool\",\"name\":\"hasClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"transferDevelopership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GACStakingChild", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "0000000000000000000000008397259c983751daf40400790063935a11afa28a0000000000000000000000001569ab627df0c74e55b8e099a3f2b7d133665186000000000000000000000000ac2a6706285b91143eaded25d946ff17a60a6512", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b151631af68b4d9bf21757cd9067872d628db148a4824668bb834aa4f6f97128"}