{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakingStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n   Storage Liquidity Staing. \\n*/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract LiquidStaking is Context {\\n    \\n    address public lp_token_address;\\n    address public reward_token_address;\\n    address public contract_owner;\\n\\n    uint public positionCounter = 0;\\n    uint public reward_credit = 0;\\n\\n    struct Position {\\n        uint id;\\n        address owner;\\n        uint amount;\\n        uint startTime;\\n        uint endTime;\\n        uint period;\\n        uint totalReward;\\n        uint payed;\\n    }\\n\\n    mapping(uint => Position) public positions;\\n    mapping(address => uint[]) public ownerPositions;  // To Store data for each address\\n\\n    event LiquidityAdded(uint indexed positionId, address indexed owner, uint amount, uint period);\\n    event RewardClaimed(uint indexed positionId, address indexed owner);\\n    event PositionClosed(uint indexed positionId, address indexed owner);\\n\\n    constructor(address _lp_token_address, address _reward_token_address) {\\n        lp_token_address = _lp_token_address;\\n        reward_token_address = _reward_token_address;\\n        contract_owner = _msgSender();\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == contract_owner, \\\"Not the contract owner\\\");\\n        _;\\n    }\\n\\n    function emergency_stop() public onlyOwner {\\n        uint not_vested_balance = IERC20(reward_token_address).balanceOf(address(this));\\n        IERC20(reward_token_address).transfer(contract_owner, not_vested_balance);\\n    }\\n\\n    function end_staking() public onlyOwner {\\n         IERC20(reward_token_address).transfer(contract_owner, reward_balance());\\n    }\\n\\n    function transfer_owner(address new_owner) public onlyOwner {\\n        contract_owner =new_owner;\\n    }\\n\\n    function reward_balance () public view returns (uint) {\\n        uint cur_balance = IERC20(reward_token_address).balanceOf(address(this));\\n        \\n        if (cur_balance > reward_credit) {\\n            return cur_balance - reward_credit;\\n        }\\n        \\n        return 0;\\n    }\\n\\n    function total_in_balancer() public view returns (uint) {\\n        return IERC20(lp_token_address).totalSupply();\\n    }\\n\\n    function calc_full_reward(uint amount, uint period) public view  returns (uint) {\\n        return  (reward_balance() * amount * period ) / (total_in_balancer() * 365 days);\\n    }\\n\\n    function add_liquidity(uint amount, uint period) external {\\n        require(period >= 1 days && period <= 90 days , \\\"Invalid period\\\");\\n        \\n        // Store Balance before deposit\\n        uint initialBalance = IERC20(lp_token_address).balanceOf(address(this));\\n\\n        IERC20(lp_token_address).transferFrom(_msgSender(), address(this), amount);\\n        \\n        // Check aactual balance\\n        uint actualAmount = IERC20(lp_token_address).balanceOf(address(this)) - initialBalance;\\n        \\n        // Veritfy Actual balance == amount (if trenafer less, but not crashed)\\n        // require(actualAmount == amount, \\\"Transferred amount mismatch\\\");\\n\\n        require(actualAmount >= 1 * 1e18 && actualAmount <= 10_000 * 1e18, \\\"Invalid amount\\\");\\n        \\n\\n        positionCounter++;\\n        Position memory newPosition = Position({\\n            id: positionCounter,\\n            owner: _msgSender(),\\n            amount: actualAmount,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + period,\\n            period: period,\\n            totalReward: calc_full_reward(actualAmount, period),\\n            payed: 0\\n        });\\n        \\n        positions[positionCounter] = newPosition;\\n        reward_credit = reward_credit + newPosition.totalReward;\\n\\n        ownerPositions[_msgSender()].push(positionCounter);\\n        \\n        emit LiquidityAdded(positionCounter, _msgSender(), actualAmount, period);\\n    }\\n\\n    function getPositionsOfOwner(address owner) external view returns (uint[] memory) {\\n        return ownerPositions[owner];\\n    }\\n\\n    function claim_reward(uint positionId) external {\\n        Position storage position = positions[positionId];\\n        require(position.owner == _msgSender(), \\\"Not the owner of the position\\\");\\n        require(block.timestamp >= position.startTime, \\\"Staking period not yet started\\\");\\n\\n        uint elapsedTime = block.timestamp - position.startTime;\\n        uint totalVestingTime = position.endTime - position.startTime;\\n        \\n        // Prevent division by zero and ensure that elapsed time does not exceed total vesting time\\n        require(totalVestingTime > 0, \\\"Vesting time cannot be 0\\\");\\n        elapsedTime = elapsedTime > totalVestingTime ? totalVestingTime : elapsedTime;\\n\\n        uint vestedReward = (position.totalReward * elapsedTime) / totalVestingTime;\\n        uint claimableReward = vestedReward - position.payed;\\n\\n        require(claimableReward > 0, \\\"No rewards to claim\\\");\\n        \\n        position.payed += claimableReward;  // Update the payed amount\\n\\n        IERC20(reward_token_address).transfer(position.owner, claimableReward);  // Transfer the claimable reward tokens to the position owner\\n        reward_credit = reward_credit - claimableReward;\\n        emit RewardClaimed(positionId, _msgSender());\\n    }\\n\\n    function close_position(uint positionId, bool ignoreReward) external {\\n        Position storage position = positions[positionId];\\n        require(position.owner == _msgSender(), \\\"Not the owner of the position\\\");\\n        require(block.timestamp >= position.endTime, \\\"Staking period not yet ended\\\");\\n        \\n        uint remainingReward = position.totalReward - position.payed;\\n\\n        if (remainingReward > 0 && !ignoreReward) {\\n            position.payed += remainingReward;  // Update the payed amount to avoid double claim\\n            \\n            IERC20(reward_token_address).transfer(position.owner, remainingReward);  // Transfer the remaining reward tokens to the position owner\\n            reward_credit = reward_credit - remainingReward;\\n        }\\n        if (ignoreReward) {\\n            reward_credit = reward_credit - remainingReward;\\n        }\\n\\n        IERC20(lp_token_address).transfer(position.owner, position.amount);  // Transfer the staked tokens back to the position owner\\n        \\n        delete positions[positionId];  // Delete the position        \\n        emit PositionClosed(positionId, _msgSender());\\n    }\\n\\n    function get_position(uint positionId) external view returns(Position memory) {\\n        return positions[positionId];\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reward_token_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"add_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"calc_full_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"claim_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ignoreReward\",\"type\":\"bool\"}],\"name\":\"close_position\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency_stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPositionsOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"get_position\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidStaking.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_credit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_in_balancer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"transfer_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiquidStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000093a97f352c8be88d1468b8f7e0c24ce535be9eae000000000000000000000000081ec4c0e30159c8259bad8f4887f83010a681dc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}