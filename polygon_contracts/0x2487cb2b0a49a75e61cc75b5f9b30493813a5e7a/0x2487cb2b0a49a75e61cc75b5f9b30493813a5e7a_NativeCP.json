{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Impl/BhavishPrediction/Crypto/NativeCP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport { AbstractCP, IBhavishAdministrator, IPriceManager, BhavishPredictionStorage } from \\\"./AbstractCP.sol\\\";\\nimport { AbstractNative, BhavishSwap } from \\\"../AbstractNative.sol\\\";\\n\\n/**\\n * @title BhavishPrediction\\n */\\ncontract NativeCP is AbstractCP, AbstractNative {\\n    constructor(\\n        uint256 _minPredictAmount,\\n        uint256 _treasuryFee,\\n        IBhavishAdministrator _bhavishAdmin,\\n        IPriceManager _bhavishPriceManager,\\n        BhavishPredictionStorage _bhavishPredictionStorage,\\n        BhavishSwap _bhavishSwap,\\n        uint256 _roundTime,\\n        bytes32 _underlying,\\n        bytes32 _strike\\n    )\\n        AbstractCP(\\n            _minPredictAmount,\\n            _treasuryFee,\\n            _bhavishAdmin,\\n            _bhavishPriceManager,\\n            _bhavishPredictionStorage,\\n            _roundTime,\\n            _underlying,\\n            _strike\\n        )\\n        AbstractNative(_bhavishSwap)\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/Impl/BhavishPrediction/AbstractNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport { AbstractPrediction, Address } from \\\"./AbstractPrediction.sol\\\";\\nimport { IBhavishPredictionNative } from \\\"../../Interface/IBhavishPredictionNative.sol\\\";\\nimport { BhavishSwap } from \\\"../../Integrations/Swap/BhavishSwap.sol\\\";\\n\\nabstract contract AbstractNative is AbstractPrediction, IBhavishPredictionNative {\\n    // Implementation for IBhavishPredictionNative methods -------\\n    using Address for address;\\n\\n    BhavishSwap public bhavishSwap;\\n\\n    constructor(BhavishSwap _bhavishSwap) {\\n        require(address(_bhavishSwap).isContract(), \\\"Swapper is not a contract\\\");\\n        bhavishSwap = _bhavishSwap;\\n    }\\n\\n    function predictUp(uint256 _predictRoundId, address _userAddress) external payable whenNotPaused nonReentrant {\\n        _predictUp(_predictRoundId, _userAddress, msg.value);\\n    }\\n\\n    function predictDown(uint256 _predictRoundId, address _userAddress) external payable whenNotPaused nonReentrant {\\n        _predictDown(_predictRoundId, _userAddress, msg.value);\\n    }\\n\\n    function claim(\\n        uint256[] calldata _roundIds,\\n        address _userAddress,\\n        SwapParams memory _swapParams\\n    ) external nonReentrant returns (uint256 reward) {\\n        (reward, ) = _claim(_roundIds, _userAddress);\\n        if (_swapParams.convert && reward > 0) {\\n            BhavishSwap.SwapStruct memory swapStruct = BhavishSwap.SwapStruct({\\n                deadline: block.timestamp + (roundTime * 2),\\n                fromAsset: bytes32(\\\"MATIC\\\"),\\n                toAsset: _swapParams.toAsset,\\n                amountIn: 0\\n            });\\n            bhavishSwap.swapExactETHForTokens{ value: reward }(swapStruct, _userAddress, _swapParams.slippage);\\n        } else if (reward > 0) _amountTransfer(_userAddress, reward);\\n    }\\n\\n    function _setAmountDispersed(\\n        uint256 _roundId,\\n        address _user,\\n        uint256 _reward,\\n        uint256 _betAmount\\n    ) internal override {\\n        bhavishPredictionStorage.setBetAmountDispersed(_roundId, _user, _reward);\\n    }\\n\\n    // Implementation for Abstract Crupto Prediction virtual methods -------\\n\\n    function _updateCalculateRewards(uint256 _burn, uint256 _mint) internal override {}\\n\\n    function _getRoundRewardAmount(Round memory _round) internal pure override returns (uint256 rewardAmount) {\\n        rewardAmount = _round.totalAmount;\\n    }\\n\\n    function _calcRewardsForUser(Round memory _round, BetInfo memory _betInfo)\\n        internal\\n        view\\n        override\\n        returns (uint256 addedReward, uint256 winningBetAmount)\\n    {\\n        //check's for a tie\\n        if (_round.endPrice == _round.startPrice) {\\n            uint256 betAmount = _betInfo.upPredictAmount + _betInfo.downPredictAmount;\\n            if (_refundable(_round)) addedReward = betAmount - ((betAmount * treasuryFee) / 10**decimals);\\n        } else if (_round.endPrice > _round.startPrice) {\\n            winningBetAmount = _betInfo.upPredictAmount;\\n            addedReward = (_betInfo.upPredictAmount * _round.rewardAmount) / _round.rewardBaseCalAmount;\\n        } else if (_round.endPrice < _round.startPrice) {\\n            winningBetAmount = _betInfo.downPredictAmount;\\n            addedReward = (_betInfo.downPredictAmount * _round.rewardAmount) / _round.rewardBaseCalAmount;\\n        }\\n    }\\n\\n    function _amountTransfer(address _user, uint256 _amount) internal override {\\n        (bool success, ) = _user.call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function _treasuryFeeTransfer(address _user, uint256 _amount) internal override {\\n        _amountTransfer(_user, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Impl/BhavishPrediction/Crypto/AbstractCP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport {\\n    AbstractPrediction,\\n    IBhavishAdministrator,\\n    IPriceManager,\\n    BhavishPredictionStorage\\n} from \\\"../AbstractPrediction.sol\\\";\\n\\n/**\\n * @title BhavishPrediction\\n */\\nabstract contract AbstractCP is AbstractPrediction {\\n    constructor(\\n        uint256 _minPredictAmount,\\n        uint256 _treasuryFee,\\n        IBhavishAdministrator _bhavishAdmin,\\n        IPriceManager _bhavishPriceManager,\\n        BhavishPredictionStorage _bhavishPredictionStorage,\\n        uint256 _roundTime,\\n        bytes32 _underlying,\\n        bytes32 _strike\\n    )\\n        AbstractPrediction(\\n            _minPredictAmount,\\n            _treasuryFee,\\n            _bhavishAdmin,\\n            _bhavishPriceManager,\\n            _bhavishPredictionStorage,\\n            _roundTime,\\n            _underlying,\\n            _strike\\n        )\\n    {}\\n\\n    /**\\n     * @notice Create Round Zero round\\n     * @dev callable by Operator\\n     * @param _roundzeroStartTimestamp round zero round start timestamp\\n     */\\n    function createPredictionMarket(uint256 _roundzeroStartTimestamp)\\n        external\\n        override\\n        whenNotPaused\\n        onlyOperator(msg.sender)\\n    {\\n        require(!marketStatus.createPredictionMarketOnce, \\\"Can only run roundzeroCreateRound once\\\");\\n        currentRoundId = currentRoundId + 1;\\n        roundzeroStartTimestamp = _roundzeroStartTimestamp;\\n        _createRound(currentRoundId, _roundzeroStartTimestamp);\\n        marketStatus.createPredictionMarketOnce = true;\\n\\n        //create next 3 rounds to be able to bet by users\\n        _createRound(currentRoundId + 1, roundzeroStartTimestamp + roundTime);\\n        _createRound(currentRoundId + 2, roundzeroStartTimestamp + roundTime + roundTime);\\n        _createRound(currentRoundId + 3, roundzeroStartTimestamp + roundTime + roundTime + roundTime);\\n    }\\n\\n    /**\\n     * @notice Execute round\\n     * @dev Callable by Operator\\n     */\\n    function executeRound() external override whenNotPaused {\\n        require(\\n            marketStatus.createPredictionMarketOnce && marketStatus.startPredictionMarketOnce,\\n            \\\"Can only run after roundzeroStartRound\\\"\\n        );\\n        Round memory curRound = bhavishPredictionStorage.getPredictionRound(currentRoundId);\\n        Round memory roundPlusThree = bhavishPredictionStorage.getPredictionRound(currentRoundId + 3);\\n\\n        // currentRoundId refers to current round n\\n        // fetch price to end current round and start new round\\n        (uint256 price, ) = bhavishPriceManager.getPrice(\\n            assetPair.underlying,\\n            assetPair.strike,\\n            curRound.roundEndTimestamp\\n        );\\n\\n        // End and Disperse current round\\n        if (curRound.roundState != RoundState.CANCELLED && price != 0) {\\n            _endRound(currentRoundId, price);\\n\\n            _calculateRewards(currentRoundId);\\n        } else if (curRound.roundState != RoundState.CANCELLED && price == 0) {\\n            _cancelRound(currentRoundId);\\n        }\\n\\n        // Start next round\\n        _startRound(currentRoundId + 1, price);\\n\\n        // Create a new round n+3\\n        _createRound(currentRoundId + 4, roundPlusThree.roundEndTimestamp);\\n\\n        // Point currentRoundId to next round\\n        currentRoundId = currentRoundId + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishPredictionNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\nimport \\\"./IBhavishPrediction.sol\\\";\\n\\ninterface IBhavishPredictionNative is IBhavishPrediction {\\n    struct SwapParams {\\n        uint256 slippage;\\n        bytes32 toAsset;\\n        bool convert;\\n    }\\n\\n    /**\\n     * @notice Bet Bull position\\n     * @param roundId: Round Id\\n     * @param userAddress: Address of the user\\n     */\\n    function predictUp(uint256 roundId, address userAddress) external payable;\\n\\n    /**\\n     * @notice Bet Bear position\\n     * @param roundId: Round Id\\n     * @param userAddress: Address of the user\\n     */\\n    function predictDown(uint256 roundId, address userAddress) external payable;\\n\\n    function claim(\\n        uint256[] calldata _roundIds,\\n        address _userAddress,\\n        SwapParams memory _swapParams\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Impl/BhavishPrediction/AbstractPrediction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IBhavishAdministrator } from \\\"../../Interface/IBhavishAdministrator.sol\\\";\\nimport { IPriceManager } from \\\"../../Interface/IPriceManager.sol\\\";\\nimport { IBhavishPrediction } from \\\"../../Interface/IBhavishPrediction.sol\\\";\\nimport { BhavishPredictionStorage, Address } from \\\"./BhavishPredictionStorage.sol\\\";\\n\\n/**\\n * @title BhavishPrediction\\n */\\nabstract contract AbstractPrediction is IBhavishPrediction, AccessControl, Pausable, ReentrancyGuard {\\n    using Address for address;\\n\\n    uint256 public currentRoundId;\\n    uint256 public roundTime; //10 mintues of round\\n    uint256 public roundzeroStartTimestamp;\\n\\n    PredictionMarketStatus public marketStatus;\\n\\n    uint256 public treasuryFee;\\n    uint256 public vaultDiscountPerc;\\n    uint256 public constant MAX_TREASURY_FEE = 100; // 10%\\n    uint256 public minPredictAmount; // minimum prediction amount (denominated in wei)\\n    uint256 public treasuryAmount; // funds in treasury collected from fee\\n    uint256 public decimals = 3;\\n    address public bhavishSDK;\\n\\n    // State variables for storing the underlying and strike asset names -- Need to revisit this logic in later versions\\n    AssetPair public assetPair;\\n\\n    IBhavishAdministrator public bhavishAdmin;\\n    IPriceManager public bhavishPriceManager;\\n    BhavishPredictionStorage public bhavishPredictionStorage;\\n    mapping(address => bool) public isVault;\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    event PausedMarket(uint256 currentRoundId);\\n    event UnPausedMarket(uint256 currentRoundId);\\n\\n    event CreateRound(uint256 indexed roundId);\\n    event StartRound(uint256 indexed roundId);\\n    event EndRound(uint256 indexed roundId);\\n    event CancelRound(uint256 indexed roundId);\\n    event NewBhvaishSDK(address indexed _sdk);\\n    event PredictUp(address indexed sender, uint256 indexed roundId, uint256 amount);\\n    event PredictDown(address indexed sender, uint256 indexed roundId, uint256 amount);\\n    event RewardsCalculated(\\n        uint256 indexed roundId,\\n        uint256 rewardBaseCalAmount,\\n        uint256 rewardAmount,\\n        uint256 treasuryAmount\\n    );\\n    event Refund(uint256 indexed roundId, address indexed recipient, uint256 refundDispersed, uint256 timestamp);\\n\\n    event NewMinPredictAmount(uint256 minPredictAmount);\\n    event NewTreasuryFee(uint256 treasuryFee);\\n    event NewVaultDiscountPercentage(uint256 vaultDiscountPerc);\\n    event NewOperator(address indexed operator);\\n    event NewAdmin(address indexed admin);\\n    event TransferToAdmin(address indexed bhavishAdmin, uint256 amount);\\n    event Claim(address indexed sender, uint256 indexed roundId, uint256 amount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _minPredictAmount minimum bet amounts (in wei)\\n     * @param _treasuryFee treasury fee (1000 = 10%)\\n     * @param _bhavishAdmin Bhavish Administrator\\n     * @param _bhavishPriceManager Price Manager\\n     * @param _underlying Name of the underlying asset\\n     * @param _strike Name of the strike asset\\n     */\\n    constructor(\\n        uint256 _minPredictAmount,\\n        uint256 _treasuryFee,\\n        IBhavishAdministrator _bhavishAdmin,\\n        IPriceManager _bhavishPriceManager,\\n        BhavishPredictionStorage _bhavishPredictionStorage,\\n        uint256 _roundTime,\\n        bytes32 _underlying,\\n        bytes32 _strike\\n    ) {\\n        require(_minPredictAmount > 0, \\\"Invalid Min Predict amount\\\");\\n        require(_treasuryFee > 0 && _treasuryFee < MAX_TREASURY_FEE, \\\"Treasury fee is too high\\\");\\n        require(0 < _roundTime && _roundTime <= 86400, \\\"Round Time should be between 1 sec to 3600 sec\\\");\\n\\n        minPredictAmount = _minPredictAmount;\\n        treasuryFee = _treasuryFee;\\n        vaultDiscountPerc = 100;\\n        bhavishAdmin = _bhavishAdmin;\\n        bhavishPriceManager = _bhavishPriceManager;\\n        bhavishPredictionStorage = _bhavishPredictionStorage;\\n        AssetPair memory pair = AssetPair(_underlying, _strike);\\n        assetPair = pair;\\n        roundTime = _roundTime;\\n        currentRoundId = bhavishPredictionStorage.latestRoundId();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // Implement virtual methods ---------\\n\\n    function _getRoundRewardAmount(Round memory _round) internal pure virtual returns (uint256 rewardAmount);\\n\\n    function _updateCalculateRewards(uint256 _burn, uint256 _mint) internal virtual;\\n\\n    function _calcRewardsForUser(Round memory _round, BetInfo memory _betInfo)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 addedReward, uint256 betAmount);\\n\\n    function _amountTransfer(address _user, uint256 _amount) internal virtual;\\n\\n    function _treasuryFeeTransfer(address _user, uint256 _amount) internal virtual;\\n\\n    function _setAmountDispersed(\\n        uint256 _roundId,\\n        address _user,\\n        uint256 _reward,\\n        uint256 _amount\\n    ) internal virtual;\\n\\n    // Modifiers go here --------\\n\\n    modifier onlyAdmin(address _address) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _address), \\\"Address not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator(address _address) {\\n        require(hasRole(OPERATOR_ROLE, _address), \\\"Address not an operator\\\");\\n        _;\\n    }\\n\\n    modifier validateUser(address _userAddress) {\\n        if (msg.sender != _userAddress) {\\n            require(msg.sender == bhavishSDK, \\\"Invalid Caller\\\");\\n        }\\n        _;\\n    }\\n\\n    // Roles granting goes here --------\\n\\n    /**\\n     * @notice Set operator\\n     * @dev callable by Admin of the contract\\n     * @param _operator new operator address\\n     */\\n    function setOperator(address _operator) external onlyAdmin(msg.sender) {\\n        require(!address(_operator).isContract(), \\\"Operator cannot be a contract\\\");\\n        require(_operator != address(0), \\\"Cannot be zero address\\\");\\n        grantRole(OPERATOR_ROLE, _operator);\\n\\n        emit NewOperator(_operator);\\n    }\\n\\n    /**\\n     * @notice Set the bhavish administrator\\n     * @param _bhavishAdministrator Address of the bhavish admin contract\\n     */\\n    function setBhavishAdministrator(IBhavishAdministrator _bhavishAdministrator) external onlyAdmin(msg.sender) {\\n        require(address(_bhavishAdministrator).isContract(), \\\"Not Bhavish Administrator\\\");\\n        bhavishAdmin = _bhavishAdministrator;\\n    }\\n\\n    function addVault(address _vault) external onlyAdmin(msg.sender) {\\n        require(_vault.isContract(), \\\"invalid vault\\\");\\n        isVault[_vault] = true;\\n    }\\n\\n    /**\\n     * @notice Remove operator\\n     * @dev callable by Admin of the contract\\n     * @param _address current operator\\n     */\\n    function removeOperator(address _address) external onlyAdmin(msg.sender) {\\n        revokeRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    // This is need for this contract to accept native currency\\n\\n    /**\\n     * @notice Add funds\\n     */\\n    receive() external payable {}\\n\\n    // Pause/Unpause the contract logic goes here --------\\n\\n    /**\\n     * @notice Pause the contract\\n     * @dev Callable by admin\\n     */\\n    function pause() external whenNotPaused onlyAdmin(msg.sender) {\\n        _pause();\\n        for (\\n            uint256 tempRoundId = currentRoundId;\\n            tempRoundId <= bhavishPredictionStorage.latestRoundId();\\n            tempRoundId++\\n        ) {\\n            Round memory round = bhavishPredictionStorage.getPredictionRound(tempRoundId);\\n            if (round.roundState != RoundState.CANCELLED) {\\n                _cancelRound(tempRoundId);\\n            }\\n        }\\n\\n        emit PausedMarket(currentRoundId);\\n    }\\n\\n    /**\\n     * @notice Unpuase the contract\\n     * @dev Callable by admin\\n     */\\n    function unPause() external whenPaused onlyAdmin(msg.sender) {\\n        marketStatus.createPredictionMarketOnce = false;\\n        marketStatus.startPredictionMarketOnce = false;\\n        currentRoundId = bhavishPredictionStorage.latestRoundId();\\n        _unpause();\\n\\n        emit UnPausedMarket(currentRoundId);\\n    }\\n\\n    // Set the min reqs for the contract goes here ---------\\n\\n    /**\\n     * @notice Set minPredictAmount\\n     * @dev Callable by admin\\n     * @param _minPredictAmount minimum Predict amount to be set\\n     */\\n    function setMinPredictAmount(uint256 _minPredictAmount) external whenPaused onlyAdmin(msg.sender) {\\n        require(_minPredictAmount > 0, \\\"Must be superior to 0\\\");\\n        minPredictAmount = _minPredictAmount;\\n\\n        emit NewMinPredictAmount(_minPredictAmount);\\n    }\\n\\n    /**\\n     * @notice Set Treasury Fee\\n     * @dev Callable by admin\\n     * @param _treasuryFee new treasury fee\\n     */\\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin(msg.sender) {\\n        require(_treasuryFee > 0 && _treasuryFee < MAX_TREASURY_FEE, \\\"Treasury fee is too high\\\");\\n        treasuryFee = _treasuryFee;\\n\\n        emit NewTreasuryFee(_treasuryFee);\\n    }\\n\\n    /**\\n     * @notice Set Treasury Fee\\n     * @dev Callable by admin\\n     * @param _discountPerc new vault discount percentage\\n     */\\n    function setVaultDiscountPerc(uint256 _discountPerc) external whenPaused onlyAdmin(msg.sender) {\\n        require(_discountPerc <= 100, \\\"Vault discount perc is too high\\\");\\n        vaultDiscountPerc = _discountPerc;\\n\\n        emit NewVaultDiscountPercentage(_discountPerc);\\n    }\\n\\n    /**\\n     * @notice Set Bhavish SDK\\n     * @dev Callable by admin\\n     * @param _sdk new _sdk\\n     */\\n    function setBhavishSDK(address _sdk) external onlyAdmin(msg.sender) {\\n        require(_sdk.isContract(), \\\"invalid address\\\");\\n        bhavishSDK = _sdk;\\n\\n        emit NewBhvaishSDK(_sdk);\\n    }\\n\\n    /**\\n     * @notice Set the round time\\n     * @dev Callable by operator\\n     * @param _roundTime round time\\n     */\\n    function setRoundTime(uint256 _roundTime) external whenPaused onlyOperator(msg.sender) {\\n        require(0 < _roundTime && _roundTime <= 86400, \\\"Round Time should be between 1 sec to 3600 sec\\\");\\n        roundTime = _roundTime;\\n    }\\n\\n    // Prediction logic goes here --------\\n\\n    /**\\n     * @notice Create Round\\n     * @param roundId round Id\\n     * @param _startTimestamp Round start timestamp\\n     */\\n    function _createRound(uint256 roundId, uint256 _startTimestamp) internal {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(roundId);\\n        require(round.roundId == 0, \\\"Round already exists\\\");\\n        require(_startTimestamp - roundTime >= block.timestamp, \\\"Round time is too short\\\");\\n        round.roundId = roundId;\\n        round.roundStartTimestamp = _startTimestamp;\\n        round.roundEndTimestamp = round.roundStartTimestamp + roundTime;\\n        round.roundState = RoundState.CREATED;\\n\\n        bhavishPredictionStorage.createPredictionRound(round);\\n\\n        emit CreateRound(roundId);\\n    }\\n\\n    /**\\n     * @notice Start Round\\n     * @param _predictRoundId round Id\\n     * @param _price Price of the asset\\n     */\\n    function _startRound(uint256 _predictRoundId, uint256 _price) internal {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n        if (_price == 0) {\\n            _cancelRound(_predictRoundId);\\n        } else {\\n            require(round.roundState == RoundState.CREATED, \\\"Round should be created\\\");\\n            require(round.roundStartTimestamp <= block.timestamp, \\\"Too early to start the round\\\");\\n\\n            bhavishPredictionStorage.setRoundState(_predictRoundId, RoundState.STARTED, _price, true);\\n\\n            emit StartRound(_predictRoundId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancel the round\\n     * @param _predictRoundId Round id of the round that needs to be cancelled\\n     */\\n    function _cancelRound(uint256 _predictRoundId) internal {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n        require(round.roundState != RoundState.CANCELLED, \\\"Cannot cancel already cancelled round\\\");\\n\\n        bhavishPredictionStorage.cancelRound(_predictRoundId);\\n        emit CancelRound(_predictRoundId);\\n    }\\n\\n    /**\\n     * @notice End Round\\n     * @param _predictRoundId round Id\\n     * @param _price Price of the asset\\n     */\\n    function _endRound(uint256 _predictRoundId, uint256 _price) internal {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n        require(round.roundState == RoundState.STARTED, \\\"Round is not started yet\\\");\\n        require(round.roundEndTimestamp <= block.timestamp, \\\"Too early to end the round\\\");\\n\\n        bhavishPredictionStorage.setRoundState(_predictRoundId, RoundState.ENDED, _price, false);\\n\\n        emit EndRound(_predictRoundId);\\n    }\\n\\n    /**\\n     * @notice Calculate Rewards for the round\\n     * @param _predictRoundId round Id\\n     */\\n    function _calculateRewards(uint256 _predictRoundId) internal {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n        require(round.roundState == RoundState.ENDED, \\\"Round is not ended\\\");\\n\\n        uint256 rewardAmount = _getRoundRewardAmount(round);\\n        uint256 treasuryAmt = (round.totalAmount * treasuryFee) / (10**decimals);\\n\\n        uint256 rewardBaseCalAmount;\\n        // Bull wins\\n        if (round.endPrice > round.startPrice) {\\n            rewardBaseCalAmount = round.upPredictAmount;\\n            // reward amount can be zero while treasury can be greater than reward for few cases\\n            if (rewardAmount > 0 && rewardAmount > treasuryAmt) rewardAmount = rewardAmount - treasuryAmt;\\n            // case when there are no bets on winning side. loosing side bets should be moved to treasury\\n            if (rewardBaseCalAmount == 0) {\\n                treasuryAmt = round.downPredictAmount;\\n                rewardAmount = 0;\\n            }\\n        }\\n        // Bear wins\\n        else if (round.endPrice < round.startPrice) {\\n            rewardBaseCalAmount = round.downPredictAmount;\\n            if (rewardAmount > 0 && rewardAmount > treasuryAmt) rewardAmount = rewardAmount - treasuryAmt;\\n            // case when there are no bets on winning side. loosing side bets should be moved to treasury\\n            if (rewardBaseCalAmount == 0) {\\n                treasuryAmt = round.upPredictAmount;\\n                rewardAmount = 0;\\n            }\\n        }\\n        // draw or tie\\n        else {\\n            rewardBaseCalAmount = 0;\\n            rewardAmount = 0;\\n        }\\n\\n        treasuryAmount += treasuryAmt;\\n        bhavishPredictionStorage.setRewardAmountForRound(_predictRoundId, rewardAmount, rewardBaseCalAmount);\\n\\n        _updateCalculateRewards(rewardAmount + treasuryAmt, treasuryAmt);\\n\\n        emit RewardsCalculated(_predictRoundId, rewardBaseCalAmount, rewardAmount, treasuryAmt);\\n    }\\n\\n    /**\\n     * @notice Check whether the round is refundable\\n     * @param _predictRound round details\\n     */\\n    function _refundable(Round memory _predictRound) internal pure returns (bool) {\\n        return\\n            _predictRound.rewardBaseCalAmount == 0 &&\\n            _predictRound.rewardAmount == 0 &&\\n            _predictRound.startPrice == _predictRound.endPrice;\\n    }\\n\\n    /**\\n     * @notice Transfer the funds to bhavish admin contract_predictRound\\n     * @param _amount Amount to be transfered\\n     */\\n    function transferToAdmin(uint256 _amount) external payable nonReentrant onlyAdmin(msg.sender) {\\n        require(_amount <= treasuryAmount, \\\"Transfer amount is too large\\\");\\n        treasuryAmount -= _amount;\\n        address bhavishAdminAddress = address(bhavishAdmin);\\n        _treasuryFeeTransfer(bhavishAdminAddress, _amount);\\n\\n        emit TransferToAdmin(bhavishAdminAddress, _amount);\\n    }\\n\\n    /**\\n     * @notice Bet Bull position\\n     * @param _predictRoundId Round Id\\n     * @param _userAddress Address of the user\\n     */\\n    function _predictUp(\\n        uint256 _predictRoundId,\\n        address _userAddress,\\n        uint256 _amount\\n    ) internal validateUser(_userAddress) {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n\\n        require(round.roundState == RoundState.CREATED && round.roundId != 0, \\\"Bet is too early/late\\\");\\n        require(block.timestamp <= round.roundStartTimestamp, \\\"round already started\\\");\\n        require(_amount >= minPredictAmount, \\\"Bet amount must be greater than minBetAmount\\\");\\n        // Update round data\\n        bhavishPredictionStorage.setAmount(_predictRoundId, _amount, true);\\n\\n        BetInfo memory betInfo = bhavishPredictionStorage.getBetInfo(_predictRoundId, _userAddress);\\n        // Update user data\\n        if (betInfo.upPredictAmount == 0 && betInfo.downPredictAmount == 0) {\\n            bhavishPredictionStorage.setLedgerInfo(_userAddress, _predictRoundId);\\n        }\\n        bhavishPredictionStorage.setBetInfo(_amount, _predictRoundId, _userAddress, true);\\n\\n        emit PredictUp(_userAddress, _predictRoundId, _amount);\\n    }\\n\\n    /**\\n     * @notice Bet Bear position\\n     * @param _predictRoundId Round Id\\n     * @param _userAddress Address of the user\\n     */\\n    function _predictDown(\\n        uint256 _predictRoundId,\\n        address _userAddress,\\n        uint256 _amount\\n    ) internal validateUser(_userAddress) {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n\\n        require(block.timestamp <= round.roundStartTimestamp, \\\"round already started\\\");\\n        require(round.roundState == RoundState.CREATED && round.roundId != 0, \\\"Bet is too early/late\\\");\\n        require(_amount >= minPredictAmount, \\\"Bet amount must be greater than minBetAmount\\\");\\n\\n        // Update round data\\n        bhavishPredictionStorage.setAmount(_predictRoundId, _amount, false);\\n\\n        // Update user data\\n        BetInfo memory betInfo = bhavishPredictionStorage.getBetInfo(_predictRoundId, _userAddress);\\n\\n        if (betInfo.upPredictAmount == 0 && betInfo.downPredictAmount == 0) {\\n            bhavishPredictionStorage.setLedgerInfo(_userAddress, _predictRoundId);\\n        }\\n\\n        bhavishPredictionStorage.setBetInfo(_amount, _predictRoundId, _userAddress, false);\\n\\n        emit PredictDown(_userAddress, _predictRoundId, _amount);\\n    }\\n\\n    /**\\n     * @notice Start Zero round\\n     * @dev callable by Operator\\n     */\\n    function startPredictionMarket() external override whenNotPaused onlyOperator(msg.sender) {\\n        require(marketStatus.createPredictionMarketOnce, \\\"Can only run after roundzeroCreateRound is triggered\\\");\\n        require(!marketStatus.startPredictionMarketOnce, \\\"Can only run roundzeroStartRound once\\\");\\n\\n        require(block.timestamp >= roundzeroStartTimestamp, \\\"Round cannot be started early\\\");\\n\\n        (uint256 price, ) = bhavishPriceManager.getPrice(\\n            assetPair.underlying,\\n            assetPair.strike,\\n            roundzeroStartTimestamp\\n        );\\n\\n        _startRound(currentRoundId, price);\\n\\n        marketStatus.startPredictionMarketOnce = true;\\n    }\\n\\n    /**\\n     * @notice Get the _claimable stats of specific round id and user account\\n     * @param _round: round details\\n     * @param _betInfo: bet info of a user\\n     */\\n    function _claimable(Round memory _round, BetInfo memory _betInfo) public pure returns (bool) {\\n        return\\n            (_betInfo.upPredictAmount != 0 || _betInfo.downPredictAmount != 0) &&\\n            _betInfo.amountDispersed == 0 &&\\n            ((_round.endPrice > _round.startPrice && _betInfo.upPredictAmount != 0) ||\\n                (_round.endPrice < _round.startPrice && _betInfo.downPredictAmount != 0) ||\\n                (_round.endPrice == _round.startPrice));\\n    }\\n\\n    /**\\n     * @notice claim reward\\n     * @param roundIds: round Ids\\n     */\\n    function _claim(uint256[] memory roundIds, address userAddress)\\n        internal\\n        validateUser(userAddress)\\n        returns (uint256 reward, uint256 bet)\\n    {\\n        for (uint256 i = 0; i < roundIds.length; i++) {\\n            Round memory round = bhavishPredictionStorage.getPredictionRound(roundIds[i]);\\n            BetInfo memory betInfo = bhavishPredictionStorage.getBetInfo(roundIds[i], userAddress);\\n\\n            require(round.roundState == RoundState.ENDED, \\\"Round not eligible for rewards\\\");\\n            require(round.totalAmount > 0, \\\"No bets in the round\\\");\\n\\n            if (round.startPrice == round.endPrice) require(_refundable(round), \\\"Not eligible for refund\\\");\\n\\n            if (_claimable(round, betInfo)) {\\n                (uint256 addedReward, uint256 betAmount) = _calcRewardsForUser(round, betInfo);\\n\\n                if (isVault[userAddress]) addedReward = _updateVaultReward(addedReward);\\n                _setAmountDispersed(round.roundId, userAddress, addedReward, betAmount);\\n                reward += addedReward;\\n                bet += betAmount;\\n\\n                emit Claim(userAddress, roundIds[i], addedReward);\\n            }\\n        }\\n    }\\n\\n    function _updateVaultReward(uint256 oldReward) private returns (uint256 reward) {\\n        // if Vault winning 20 Matic and considering 3% protocol fee for ease of calc\\n        // oldReward will be 19.4\\n        reward = oldReward;\\n        // 19.4 / (1 - protocol fee %) provides original winning amount before treasury fee\\n        // treasury fee can't be more than 10% as defined above\\n        uint256 oWin = (oldReward * 1e3) / (1e3 - treasuryFee);\\n        // tFeeCollected = oWin - reward;\\n        // NOTE: vaultDiscountPerc can't be greater than equal to 100\\n        // new fee will always be less or equal to old fee. We need to deduct this amount from treasuryFee\\n        // newDiscountedFee = (oWin * treasuryFee * (100 - vaultDiscountPerc)) / 1e5;\\n        // eg: 20 - ( 20 * 30 * (100 - 33) / 1e5 )\\n        reward = oWin - (oWin * treasuryFee * (100 - vaultDiscountPerc)) / 1e5;\\n        // old reward will always be higher or equal to new reward\\n        // subtract this new amount from original amount and provide that as addedReward\\n        if (treasuryAmount > reward - oldReward) treasuryAmount -= reward - oldReward;\\n        else reward = oldReward; // can't reduce reward as treasury amount is zero\\n    }\\n\\n    function getAverageBetAmount(uint256[] calldata roundIds, address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256 betAmount)\\n    {\\n        for (uint256 i = 0; i < roundIds.length; i++) {\\n            BetInfo memory betInfo = bhavishPredictionStorage.getBetInfo(roundIds[i], userAddress);\\n            betAmount += betInfo.downPredictAmount + betInfo.upPredictAmount;\\n        }\\n        if (roundIds.length > 0) betAmount /= roundIds.length;\\n    }\\n\\n    /**\\n     * @notice getRewards reward\\n     * @param roundIds: round Ids\\n     */\\n    function getRewards(uint256[] calldata roundIds, address userAddress) public view returns (uint256) {\\n        uint256 totalReward = 0;\\n        for (uint256 i = 0; i < roundIds.length; i++) {\\n            Round memory round = bhavishPredictionStorage.getPredictionRound(roundIds[i]);\\n            BetInfo memory betInfo = bhavishPredictionStorage.getBetInfo(roundIds[i], userAddress);\\n\\n            if (!_claimable(round, betInfo)) {\\n                continue;\\n            }\\n\\n            (uint256 reward, ) = _calcRewardsForUser(round, betInfo);\\n            totalReward += reward;\\n        }\\n\\n        return totalReward;\\n    }\\n\\n    /**\\n     * @notice Refund to users if a round is cancelled\\n     * @param _predictRoundId Round id of the cancelled round\\n     */\\n    function refundUsers(uint256 _predictRoundId, address userAddress) public override nonReentrant {\\n        Round memory round = bhavishPredictionStorage.getPredictionRound(_predictRoundId);\\n        require(round.roundState == RoundState.CANCELLED, \\\"User not eligible for refund\\\");\\n\\n        BetInfo memory betInfo = bhavishPredictionStorage.getBetInfo(_predictRoundId, userAddress);\\n        require(betInfo.amountDispersed == 0, \\\"Refund already claimed\\\");\\n        uint256 amtInvested = betInfo.upPredictAmount + betInfo.downPredictAmount;\\n        if (amtInvested > 0) {\\n            bhavishPredictionStorage.setBetAmountDispersed(_predictRoundId, userAddress, amtInvested);\\n            _amountTransfer(userAddress, amtInvested);\\n            emit Refund(_predictRoundId, userAddress, amtInvested, block.timestamp);\\n        }\\n    }\\n\\n    function getCurrentRoundDetails() external view returns (IBhavishPrediction.Round memory round) {\\n        round = bhavishPredictionStorage.getPredictionRound(currentRoundId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Integrations/Swap/BhavishSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../../Interface/IBhavishSDK.sol\\\";\\n\\npragma solidity ^0.8.13;\\n\\ncontract BhavishSwap is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    address public UNISWAP_FACTORY;\\n    address public UNISWAP_ROUTER;\\n    mapping(bytes32 => address[]) public pathMapper;\\n    uint256 public decimals = 3;\\n\\n    struct SwapStruct {\\n        uint256 amountIn;\\n        uint256 deadline;\\n        bytes32 fromAsset;\\n        bytes32 toAsset;\\n    }\\n\\n    modifier onlyAsset(bytes32 fromAsset, bytes32 toAsset) {\\n        address[] memory path = getPath(fromAsset, toAsset);\\n        require(path.length > 1, \\\"Asset swap not supported\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin(address _address) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _address), \\\"Address not an admin\\\");\\n        _;\\n    }\\n\\n    constructor(address uniswapFactory, address uniswapRouter) {\\n        UNISWAP_FACTORY = uniswapFactory;\\n        UNISWAP_ROUTER = uniswapRouter;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Add funds\\n     */\\n    receive() external payable {}\\n\\n    function setPath(\\n        bytes32 fromAsset,\\n        bytes32 toAsset,\\n        address[] memory path\\n    ) external onlyAdmin(msg.sender) {\\n        require(path.length > 1, \\\"Path cannot be empty or 1\\\");\\n        pathMapper[keccak256((abi.encode(fromAsset, toAsset)))] = path;\\n    }\\n\\n    function getPath(bytes32 fromAsset, bytes32 toAsset) public view returns (address[] memory) {\\n        return pathMapper[keccak256(abi.encode(fromAsset, toAsset))];\\n    }\\n\\n    // Get the amounts out for the specified path\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        bytes32 fromAsset,\\n        bytes32 toAsset\\n    ) public view onlyAsset(fromAsset, toAsset) returns (uint256[] memory amounts) {\\n        address[] memory path = getPath(fromAsset, toAsset);\\n        amounts = new uint256[](path.length);\\n        amounts = IUniswapV2Router02(UNISWAP_ROUTER).getAmountsOut(amountIn, path);\\n    }\\n\\n    function swapExactTokensForETH(\\n        SwapStruct memory _swapStruct,\\n        address to,\\n        uint256 slippage\\n    ) external onlyAsset(_swapStruct.fromAsset, _swapStruct.toAsset) returns (uint256[] memory amounts) {\\n        address[] memory path = getPath(_swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256[] memory amountsOut = getAmountsOut(_swapStruct.amountIn, _swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256 amountOut = amountsOut[amountsOut.length - 1] -\\n            ((amountsOut[amountsOut.length - 1] * slippage) / 10**decimals);\\n        IERC20(path[0]).safeApprove(UNISWAP_ROUTER, _swapStruct.amountIn);\\n        amounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForETH(\\n            _swapStruct.amountIn,\\n            amountOut,\\n            path,\\n            to,\\n            _swapStruct.deadline\\n        );\\n    }\\n\\n    function swapExactETHForTokens(\\n        SwapStruct memory _swapStruct,\\n        address to,\\n        uint256 slippage\\n    ) external payable onlyAsset(_swapStruct.fromAsset, _swapStruct.toAsset) returns (uint256[] memory amounts) {\\n        address[] memory path = getPath(_swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256[] memory amountsOut = getAmountsOut(msg.value, _swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256 amountOut = amountsOut[amountsOut.length - 1] -\\n            ((amountsOut[amountsOut.length - 1] * slippage) / 10**decimals);\\n        amounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactETHForTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            to,\\n            _swapStruct.deadline\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishPrediction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBhavishPrediction {\\n    enum RoundState {\\n        CREATED,\\n        STARTED,\\n        ENDED,\\n        CANCELLED\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        RoundState roundState;\\n        uint256 upPredictAmount;\\n        uint256 downPredictAmount;\\n        uint256 totalAmount;\\n        uint256 rewardBaseCalAmount;\\n        uint256 rewardAmount;\\n        uint256 startPrice;\\n        uint256 endPrice;\\n        uint256 roundStartTimestamp;\\n        uint256 roundEndTimestamp;\\n    }\\n\\n    struct BetInfo {\\n        uint256 upPredictAmount;\\n        uint256 downPredictAmount;\\n        uint256 amountDispersed;\\n    }\\n\\n    struct AssetPair {\\n        bytes32 underlying;\\n        bytes32 strike;\\n    }\\n\\n    struct PredictionMarketStatus {\\n        bool startPredictionMarketOnce;\\n        bool createPredictionMarketOnce;\\n    }\\n\\n    /**\\n     * @notice Create Round Zero round\\n     * @dev callable by Operator\\n     * @param _roundzeroStartTimestamp: round zero round start timestamp\\n     */\\n    function createPredictionMarket(uint256 _roundzeroStartTimestamp) external;\\n\\n    /**\\n     * @notice Start Zero round\\n     * @dev callable by Operator\\n     */\\n    function startPredictionMarket() external;\\n\\n    /**\\n     * @notice Execute round\\n     * @dev Callable by Operator\\n     */\\n    function executeRound() external;\\n\\n    function getCurrentRoundDetails() external view returns (IBhavishPrediction.Round memory);\\n\\n    function refundUsers(uint256 _predictRoundId, address userAddress) external;\\n\\n    function getAverageBetAmount(uint256[] calldata roundIds, address userAddress) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishAdministrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title IBhavishAdministrator\\n */\\n\\ninterface IBhavishAdministrator {\\n    /**\\n     * @dev Emitted when Treasury is claimed by the admin\\n     * @param admin Address of the admin\\n     * @param amount Amount claimed by the admin\\n     */\\n    event TreasuryClaim(address indexed admin, uint256 amount);\\n\\n    /**\\n     * @dev Claim the treasury amount. Can be performed only by admin\\n     */\\n    function claimTreasury() external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IPriceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriceManager {\\n    /**\\n     * @dev Emitted when the new Oracle aggregator data has been added.\\n     * @param _underlying Address of the underlying asset.\\n     * @param _strike Address of the strike asset.\\n     * @param _bhavishAggregator Address of the bhavish aggregator.\\n     * @param _aggregator Address of the aggregator.\\n     */\\n    event AddAssetPairAggregator(\\n        bytes32 indexed _underlying,\\n        bytes32 indexed _strike,\\n        address _bhavishAggregator,\\n        address _aggregator\\n    );\\n\\n    /**\\n     * @notice Function to add the price for an underlying, strike asset pair\\n     * @param _underlying Underlying Asset\\n     * @param _strike Strike Asset\\n     * @param _aggregator Address of the aggregator.\\n     */\\n    function setPairContract(\\n        bytes32 _underlying,\\n        bytes32 _strike,\\n        address _aggregator\\n    ) external;\\n\\n    /**\\n     * @notice Function to get the price for an underlying asset\\n     * @param _underlying Underlying Asset\\n     * @param _strike Strike Asset\\n     * @param _timestamp    Timestamp\\n     * @return price asset price\\n     * @return decimals asset price decimals\\n     */\\n    function getPrice(\\n        bytes32 _underlying,\\n        bytes32 _strike,\\n        uint256 _timestamp\\n    ) external view returns (uint256 price, uint8 decimals);\\n}\\n\"\r\n    },\r\n    \"contracts/Impl/BhavishPrediction/BhavishPredictionStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IBhavishPrediction } from \\\"../../Interface/IBhavishPrediction.sol\\\";\\n\\ncontract BhavishPredictionStorage is AccessControl {\\n    using Address for address;\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    mapping(uint256 => IBhavishPrediction.Round) public rounds;\\n    mapping(uint256 => mapping(address => IBhavishPrediction.BetInfo)) public ledger;\\n    mapping(address => uint256[]) public userRounds;\\n    mapping(uint256 => address[]) public usersInRounds;\\n\\n    uint256 public latestRoundId;\\n\\n    modifier onlyManager(address _address) {\\n        require(hasRole(MANAGER_ROLE, _address), \\\"caller has no access to the method\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setManager(address _address) external {\\n        require(_address != address(0) && _address.isContract(), \\\"Invalid manager address\\\");\\n        grantRole(MANAGER_ROLE, _address);\\n    }\\n\\n    function createPredictionRound(IBhavishPrediction.Round memory round) external onlyManager(msg.sender) {\\n        rounds[round.roundId] = round;\\n        latestRoundId = round.roundId;\\n    }\\n\\n    function updatePredictionRound(IBhavishPrediction.Round memory round) external onlyManager(msg.sender) {\\n        require(rounds[round.roundId].roundId != 0, \\\"Cannot overwrite non existing round\\\");\\n        rounds[round.roundId] = round;\\n    }\\n\\n    function getUsersInRounds(uint256 _predictRoundId) external view returns (address[] memory userAddresses) {\\n        userAddresses = usersInRounds[_predictRoundId];\\n    }\\n\\n    function getPredictionRound(uint256 roundId) external view returns (IBhavishPrediction.Round memory round) {\\n        round = rounds[roundId];\\n    }\\n\\n    function getArrayRounds(uint256 from, uint256 to)\\n        external\\n        view\\n        returns (IBhavishPrediction.Round[] memory arrayOfRounds)\\n    {\\n        require(to <= latestRoundId, \\\"Index out of bound\\\");\\n        require(from < to, \\\"From < To\\\");\\n        uint256 len = to - from + 1;\\n        arrayOfRounds = new IBhavishPrediction.Round[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            arrayOfRounds[i] = rounds[from];\\n            from += 1;\\n        }\\n    }\\n\\n    function setRoundState(\\n        uint256 roundId,\\n        IBhavishPrediction.RoundState state,\\n        uint256 price,\\n        bool start\\n    ) external onlyManager(msg.sender) {\\n        IBhavishPrediction.Round storage round = rounds[roundId];\\n        round.roundState = state;\\n        if (start) round.startPrice = price;\\n        else round.endPrice = price;\\n    }\\n\\n    function cancelRound(uint256 roundId) external onlyManager(msg.sender) {\\n        IBhavishPrediction.Round storage round = rounds[roundId];\\n        round.roundState = IBhavishPrediction.RoundState.CANCELLED;\\n    }\\n\\n    function setRewardAmountForRound(\\n        uint256 roundId,\\n        uint256 rewardAmount,\\n        uint256 rewardBaseCalAmount\\n    ) external onlyManager(msg.sender) {\\n        IBhavishPrediction.Round storage round = rounds[roundId];\\n        round.rewardAmount = rewardAmount;\\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\\n    }\\n\\n    function setAmount(\\n        uint256 roundId,\\n        uint256 amount,\\n        bool directionUp\\n    ) external onlyManager(msg.sender) {\\n        IBhavishPrediction.Round storage round = rounds[roundId];\\n        round.totalAmount = round.totalAmount + amount;\\n        if (directionUp) round.upPredictAmount += amount;\\n        else round.downPredictAmount += amount;\\n    }\\n\\n    function createBet(\\n        IBhavishPrediction.BetInfo memory betInfo,\\n        uint256 roundId,\\n        address userAddress\\n    ) external onlyManager(msg.sender) {\\n        ledger[roundId][userAddress] = betInfo;\\n    }\\n\\n    function getBetInfo(uint256 roundId, address userAddress)\\n        external\\n        view\\n        returns (IBhavishPrediction.BetInfo memory betInfo)\\n    {\\n        betInfo = ledger[roundId][userAddress];\\n    }\\n\\n    function setBetAmountDispersed(\\n        uint256 roundId,\\n        address userAddress,\\n        uint256 amountDispersed\\n    ) external onlyManager(msg.sender) {\\n        IBhavishPrediction.BetInfo storage betInfo = ledger[roundId][userAddress];\\n        betInfo.amountDispersed += amountDispersed;\\n    }\\n\\n    function setBetInfo(\\n        uint256 amount,\\n        uint256 roundId,\\n        address userAddress,\\n        bool directionUp\\n    ) external onlyManager(msg.sender) {\\n        IBhavishPrediction.BetInfo storage betInfo = ledger[roundId][userAddress];\\n        if (directionUp) betInfo.upPredictAmount += amount;\\n        else betInfo.downPredictAmount += amount;\\n    }\\n\\n    function setLedgerInfo(address userAddress, uint256 roundId) external onlyManager(msg.sender) {\\n        userRounds[userAddress].push(roundId);\\n        usersInRounds[roundId].push(userAddress);\\n    }\\n\\n    function getUserRoundHistory(address userAddress)\\n        external\\n        view\\n        returns (IBhavishPrediction.BetInfo[] memory userRoundHistory)\\n    {\\n        userRoundHistory = new IBhavishPrediction.BetInfo[](userRounds[userAddress].length);\\n        for (uint256 i = 0; i < userRounds[userAddress].length; i++) {\\n            uint256 roundId = userRounds[userAddress][i];\\n            userRoundHistory[i] = ledger[roundId][userAddress];\\n        }\\n    }\\n\\n    function getUserRounds(address userAddress) external view returns (uint256[] memory) {\\n        return userRounds[userAddress];\\n    }\\n\\n    function getUserInRounds(uint256 roundId) external view returns (address[] memory) {\\n        return usersInRounds[roundId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishSDK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBhavishSDK {\\n    event PredictionMarketProvider(uint256 indexed _month, address indexed _provider);\\n\\n    struct PredictionStruct {\\n        bytes32 underlying;\\n        bytes32 strike;\\n        uint256 roundId;\\n        bool directionUp;\\n    }\\n\\n    function minimumGaslessBetAmount() external returns (uint256);\\n\\n    function refundUsers(PredictionStruct memory _predStruct, uint256 roundId) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IBhavishAdministrator\",\"name\":\"_bhavishAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceManager\",\"name\":\"_bhavishPriceManager\",\"type\":\"address\"},{\"internalType\":\"contract BhavishPredictionStorage\",\"name\":\"_bhavishPredictionStorage\",\"type\":\"address\"},{\"internalType\":\"contract BhavishSwap\",\"name\":\"_bhavishSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strike\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"CancelRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"CreateRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sdk\",\"type\":\"address\"}],\"name\":\"NewBhvaishSDK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPredictAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinPredictAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultDiscountPerc\",\"type\":\"uint256\"}],\"name\":\"NewVaultDiscountPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRoundId\",\"type\":\"uint256\"}],\"name\":\"PausedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PredictDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PredictUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundDispersed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bhavishAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRoundId\",\"type\":\"uint256\"}],\"name\":\"UnPausedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBhavishPrediction.RoundState\",\"name\":\"roundState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"upPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBhavishPrediction.Round\",\"name\":\"_round\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"upPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDispersed\",\"type\":\"uint256\"}],\"internalType\":\"struct IBhavishPrediction.BetInfo\",\"name\":\"_betInfo\",\"type\":\"tuple\"}],\"name\":\"_claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPair\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bhavishAdmin\",\"outputs\":[{\"internalType\":\"contract IBhavishAdministrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bhavishPredictionStorage\",\"outputs\":[{\"internalType\":\"contract BhavishPredictionStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bhavishPriceManager\",\"outputs\":[{\"internalType\":\"contract IPriceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bhavishSDK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bhavishSwap\",\"outputs\":[{\"internalType\":\"contract BhavishSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_roundIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"toAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"convert\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishPredictionNative.SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundzeroStartTimestamp\",\"type\":\"uint256\"}],\"name\":\"createPredictionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"roundIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAverageBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBhavishPrediction.RoundState\",\"name\":\"roundState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"upPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBhavishPrediction.Round\",\"name\":\"round\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"roundIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"startPredictionMarketOnce\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"createPredictionMarketOnce\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPredictAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictRoundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"predictDown\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictRoundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"predictUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictRoundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"refundUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundzeroStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishAdministrator\",\"name\":\"_bhavishAdministrator\",\"type\":\"address\"}],\"name\":\"setBhavishAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdk\",\"type\":\"address\"}],\"name\":\"setBhavishSDK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPredictAmount\",\"type\":\"uint256\"}],\"name\":\"setMinPredictAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundTime\",\"type\":\"uint256\"}],\"name\":\"setRoundTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPerc\",\"type\":\"uint256\"}],\"name\":\"setVaultDiscountPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPredictionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDiscountPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NativeCP", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000f957700b17443b34debcc4343a1d82834f803518000000000000000000000000cce898265cbffb80edf12136a3b291d67569d452000000000000000000000000304a621a27ce67cea4e7e993310c150d6cbe35670000000000000000000000009e35ff8d63308d782904e3de925cb226c137ae49000000000000000000000000000000000000000000000000000000000000012c4d415449430000000000000000000000000000000000000000000000000000005553440000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}