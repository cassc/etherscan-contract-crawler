{"SourceCode": "//File\uff1a @openzeppelin/contracts/utils/Counters.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n//File\uff1a @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n//File\uff1a https://github.com/ErickQueiroz93/solidity/blob/main/EIP4973.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC1271 standard signature validation method for\r\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC1271 {\r\n    /**\r\n     * @dev Should return whether the signature provided is valid for the provided data\r\n     * @param hash      Hash of the data to be signed\r\n     * @param signature Signature byte array associated with _data\r\n     */\r\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\r\n}\r\n\r\n/**\r\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\r\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\r\n * Argent and Gnosis Safe.\r\n *\r\n * _Available since v4.1._\r\n */\r\nlibrary SignatureChecker {\r\n    /**\r\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\r\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\r\n     *\r\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\r\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\r\n     */\r\n    function isValidSignatureNow(\r\n        address signer,\r\n        bytes32 hash,\r\n        bytes memory signature\r\n    ) internal view returns (bool) {\r\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\r\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\r\n            return true;\r\n        }\r\n\r\n        (bool success, bytes memory result) = signer.staticcall(\r\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\r\n        );\r\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n    address private immutable _CACHED_THIS;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _CACHED_THIS = address(this);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 nameHash,\r\n        bytes32 versionHash\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\r\n\r\n/**\r\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\r\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\r\n */\r\nlibrary BitMaps {\r\n    struct BitMap {\r\n        mapping(uint256 => uint256) _data;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the bit at `index` is set.\r\n     */\r\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        return bitmap._data[bucket] & mask != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at `index` to the boolean `value`.\r\n     */\r\n    function setTo(\r\n        BitMap storage bitmap,\r\n        uint256 index,\r\n        bool value\r\n    ) internal {\r\n        if (value) {\r\n            set(bitmap, index);\r\n        } else {\r\n            unset(bitmap, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at `index`.\r\n     */\r\n    function set(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] |= mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets the bit at `index`.\r\n     */\r\n    function unset(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] &= ~mask;\r\n    }\r\n}\r\n\r\ninterface IERC721Metadata {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/// @title Account-bound tokens\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-4973\r\n/// Note: the ERC-165 identifier for this interface is 0x8d7bac72\r\ninterface IERC4973 {\r\n    /// @dev This emits when ownership of any ABT changes by any mechanism.\r\n    ///  This event emits when ABTs are given or equipped and unequipped\r\n    ///  (`to` == 0).\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    /// @notice Count all ABTs assigned to an owner\r\n    /// @dev ABTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param owner An address for whom to query the balance\r\n    /// @return The number of ABTs owned by `address owner`, possibly zero\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    /// @notice Find the address bound to an ERC4973 account-bound token\r\n    /// @dev ABTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param tokenId The identifier for an ABT.\r\n    /// @return The address of the owner bound to the ABT.\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    /// @notice Removes the `uint256 tokenId` from an account. At any time, an\r\n    ///  ABT receiver must be able to disassociate themselves from an ABT\r\n    ///  publicly through calling this function. After successfully executing this\r\n    ///  function, given the parameters for calling `function give` or\r\n    ///  `function take` a token must be re-equipable.\r\n    /// @dev Must emit a `event Transfer` with the `address to` field pointing to\r\n    ///  the zero address.\r\n    /// @param tokenId The identifier for an ABT.\r\n    function unequip(uint256 tokenId) external;\r\n    /// @notice Creates and transfers the ownership of an ABT from the\r\n    ///  transaction's `msg.sender` to `address to`.\r\n    /// @dev Throws unless `bytes signature` represents an EIP-2098 Compact\r\n    ///  Signature of the EIP-712 structured data hash\r\n    ///  `Agreement(address active,address passive,string tokenURI)` expressing\r\n    ///  `address to`'s explicit agreement to be publicly associated with\r\n    ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be\r\n    ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a\r\n    ///  `uint256`. If `bytes signature` is empty or `address to` is a contract,\r\n    ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must\r\n    ///  be made to `address to`. A successful execution must result in the\r\n    ///  `event Transfer(msg.sender, to, tokenId)`. Once an ABT exists as an\r\n    ///  `uint256 tokenId` in the contract, `function give(...)` must throw.\r\n    /// @param to The receiver of the ABT.\r\n    /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.\r\n    /// @param signature A EIP-2098-compatible Compact Signature of the EIP-712\r\n    ///  structured data hash\r\n    ///  `Agreement(address active,address passive,string tokenURI)` signed by\r\n    ///  `address to`.\r\n    /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`\r\n    ///  EIP-712 structured data hash to a `uint256`.\r\n    function give(address to, string calldata uri, bytes calldata signature) external returns (uint256);\r\n    /// @notice Creates and transfers the ownership of an ABT from an\r\n    /// `address from` to the transaction's `msg.sender`.\r\n    /// @dev Throws unless `bytes signature` represents an EIP-2098 Compact\r\n    ///  Signature of the EIP-712 structured data hash\r\n    ///  `Agreement(address active,address passive,string tokenURI)` expressing\r\n    ///  `address from`'s explicit agreement to be publicly associated with\r\n    ///  `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be\r\n    ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a\r\n    ///  `uint256`. If `bytes signature` is empty or `address from` is a contract,\r\n    ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must\r\n    ///  be made to `address from`. A successful execution must result in the\r\n    ///  emission of an `event Transfer(from, msg.sender, tokenId)`. Once an ABT\r\n    ///  exists as an `uint256 tokenId` in the contract, `function take(...)` must\r\n    ///  throw.\r\n    /// @param from The origin of the ABT.\r\n    /// @param uri A distinct Uniform Resource Identifier (URI) for a given ABT.\r\n    /// @param signature A EIP-2098-compatible Compact Signature of the EIP-712\r\n    ///  structured data hash\r\n    ///  `Agreement(address active,address passive,string tokenURI)` signed by\r\n    ///  `address from`.\r\n    /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`\r\n    ///  EIP-712 structured data hash to a `uint256`.\r\n    function take(address from, string calldata uri, bytes calldata signature) external returns (uint256);\r\n}\r\n\r\nbytes32 constant AGREEMENT_HASH = keccak256(\"Agreement(address active,address passive,string tokenURI)\");\r\n\r\n/// @notice Reference implementation of EIP-4973 tokens.\r\n/// @author Tim Daubensch\u00fctz, Rahul Rumalla (https://github.com/rugpullindex/ERC4973/blob/master/src/ERC4973.sol)\r\nabstract contract ERC4973 is EIP712, ERC165, IERC721Metadata, IERC4973 {\r\n    using BitMaps for BitMaps.BitMap;\r\n\r\n    BitMaps.BitMap private _usedHashes;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(uint256 => string) private _tokenURIs;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    constructor(string memory name_, string memory symbol_, string memory version) EIP712(name_, version) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC4973).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"tokenURI: token doesn't exist\");\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    function unequip(uint256 tokenId) public virtual override {\r\n        require(msg.sender == ownerOf(tokenId), \"unequip: sender must be owner\");\r\n        _usedHashes.unset(tokenId);\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"balanceOf: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ownerOf: token doesn't exist\");\r\n        return owner;\r\n    }\r\n\r\n    function give(address to, string calldata uri, bytes calldata signature) external virtual returns (uint256) {\r\n        require(msg.sender != to, \"give: cannot give from self\");\r\n        uint256 tokenId = _safeCheckAgreement(msg.sender, to, uri, signature);\r\n        _mint(msg.sender, to, tokenId, uri);\r\n        _usedHashes.set(tokenId);\r\n        return tokenId;\r\n    }\r\n\r\n    function take(address from, string calldata uri, bytes calldata signature) external virtual returns (uint256) {\r\n        require(msg.sender != from, \"take: cannot take from self\");\r\n        uint256 tokenId = _safeCheckAgreement(msg.sender, from, uri, signature);\r\n        _mint(from, msg.sender, tokenId, uri);\r\n        _usedHashes.set(tokenId);\r\n        return tokenId;\r\n    }\r\n\r\n    function _safeCheckAgreement(address active, address passive, string calldata uri, bytes calldata signature)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        bytes32 hash = _getHash(active, passive, uri);\r\n        uint256 tokenId = uint256(hash);\r\n\r\n        require(\r\n            SignatureChecker.isValidSignatureNow(passive, hash, signature), \"_safeCheckAgreement: invalid signature\"\r\n        );\r\n        require(!_usedHashes.get(tokenId), \"_safeCheckAgreement: already used\");\r\n        return tokenId;\r\n    }\r\n\r\n    function _getHash(address active, address passive, string calldata uri) internal view returns (bytes32) {\r\n        bytes32 structHash = keccak256(abi.encode(AGREEMENT_HASH, active, passive, keccak256(bytes(uri))));\r\n        return _hashTypedDataV4(structHash);\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _mint(address from, address to, uint256 tokenId, string memory uri) internal virtual returns (uint256) {\r\n        require(!_exists(tokenId), \"mint: tokenID exists\");\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        _tokenURIs[tokenId] = uri;\r\n        emit Transfer(from, to, tokenId);\r\n        return tokenId;\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory uri) internal virtual returns (uint256) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        _tokenURIs[tokenId] = uri;\r\n        return tokenId;\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n        delete _tokenURIs[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n}\r\n//File\uff1a @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n//File\uff1a https://github.com/ErickQueiroz93/solidity/blob/main/IERC4907.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC4907 {\r\n    // Logged when the user of a token assigns a new user or updates expires\r\n    /// @notice Emitted when the `user` of an NFT or the `expires` of the `user` is changed\r\n    /// The zero address for user indicates that there is no user address\r\n    event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires);\r\n\r\n    /// @notice set the user and expires of a NFT\r\n    /// @dev The zero address indicates there is no user \r\n    /// Throws if `tokenId` is not valid NFT\r\n    /// @param user  The new user of the NFT\r\n    /// @param expires  UNIX timestamp, The new user could use the NFT before expires\r\n    function setUser(uint256 tokenId, address user, uint64 expires) external ;\r\n\r\n    /// @notice Get the user address of an NFT\r\n    /// @dev The zero address indicates that there is no user or the user is expired\r\n    /// @param tokenId The NFT to get the user address for\r\n    /// @return The user address for this NFT\r\n    function userOf(uint256 tokenId) external view returns(address);\r\n\r\n    /// @notice Get the user expires of an NFT\r\n    /// @dev The zero value indicates that there is no user \r\n    /// @param tokenId The NFT to get the user expires for\r\n    /// @return The user expires for this NFT\r\n    function userExpires(uint256 tokenId) external view returns(uint256);\r\n    \r\n}\r\n//File\uff1a fs://6c7f03300d6d4c279513e7f9bb60a8fe/Hazim.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Hazim is ERC4973, IERC4907, Ownable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private id;\r\n\r\n    uint256 public totalSupplyNfts = 0;\r\n    bool public isPaused = false;\r\n    \r\n    string private _contractUri;\r\n\r\n    address _contractOwner;\r\n\r\n    uint256 private _royalties = 7;\r\n\r\n    mapping(address => uint256) private _addressLastMintedTokenId;\r\n\r\n    uint256 public _nftEtherValueQuarterly = 150000000000000000000;\r\n    uint256 public _nftEtherValueSemester  = 200000000000000000000;\r\n    uint256 public _nftEtherValueYearly    = 300000000000000000000;\r\n\r\n    uint256 public _nftEtherValueQuarterlyDiscount = 120000000000000000000;\r\n    uint256 public _nftEtherValueSemesterDiscount  = 160000000000000000000;\r\n    uint256 public _nftEtherValueYearlyDiscount    = 240000000000000000000;\r\n\r\n    uint64 private _timeQuarterly = 7862400;\r\n\tuint64 private _timeSemester = 15811200;\r\n\tuint64 private _timeYearly = 31622400;\r\n\r\n    uint256 public mintedQuarterly = 0;\r\n    uint256 public mintedSemester = 0;\r\n    uint256 public mintedYearly = 0;\r\n\r\n    uint256 private initSaleWaitList;\r\n    uint256 private endSaleWaitList;\r\n    uint256 private endSalePublic;\r\n\r\n    address private wMobiup = 0x2919771f951fd264445d4D4c682EE5D8326B93ec;\r\n    address private wHazim = 0x0f2e3E67cB000993d07E60261748963d3F4BD6d9;\r\n\r\n    uint256[] tokenIds;\r\n\r\n    mapping (address => uint) public mappedUsers;\r\n    mapping(uint256 => string) private uris;\r\n    address[] public addressIndices;\r\n\r\n    struct UserInfo {\r\n        address user;   // address of user role\r\n        uint64 expires; // unix timestamp, user expires\r\n    }\r\n\r\n    enum DiscountCode {\r\n        NO_DISCOUNT,\r\n        DISCOUNT_10,\r\n        DISCOUNT_20,\r\n        DISCOUNT_30,\r\n        DISCOUNT_40,\r\n        DISCOUNT_50,\r\n        DISCOUNT_60,\r\n        DISCOUNT_70,\r\n        DISCOUNT_80,\r\n        DISCOUNT_90,\r\n        DISCOUNT_100,\r\n        DISCOUNT_110,\r\n        DISCOUNT_120,\r\n        DISCOUNT_130,\r\n        DISCOUNT_140,\r\n        DISCOUNT_150,\r\n        DISCOUNT_160,\r\n        DISCOUNT_170,\r\n        DISCOUNT_180,\r\n        DISCOUNT_190,\r\n        DISCOUNT_200,\r\n        DISCOUNT_210,\r\n        DISCOUNT_220,\r\n        DISCOUNT_230,\r\n        DISCOUNT_240,\r\n        DISCOUNT_250,\r\n        DISCOUNT_260,\r\n        DISCOUNT_270,\r\n        DISCOUNT_280,\r\n        DISCOUNT_290,\r\n        DISCOUNT_300\r\n    }\r\n\r\n    mapping (uint256  => UserInfo) internal _users;\r\n    mapping(address => address) private walletsOwner;\r\n\r\n    constructor(\r\n        uint256 _initSaleWaitList,\r\n        uint256 _endSaleWaitList,\r\n        uint256 _endSalePublic\r\n    ) ERC4973(\"Zero Paralelo\", \"ZP\", \"ZP\") {\r\n        _contractUri     = \"https://gateway.pinata.cloud/ipfs/QmUuafJNoraYhgPGqYo4fYeoSWYYsyXTJ6Gp1PGA1LGmWJ\";\r\n        _contractOwner   = msg.sender;\r\n        initSaleWaitList = _initSaleWaitList;\r\n        endSaleWaitList  = _endSaleWaitList;\r\n        endSalePublic    = _endSalePublic;\r\n        walletsOwner[msg.sender] = msg.sender;\r\n    } \r\n\r\n    function setWalletPermission(address _owner) external onlyOwner {\r\n        walletsOwner[_owner] = _owner;\r\n    }\r\n\r\n    function setNewTimesSales(uint256 _initSaleWaitList, uint256 _endSaleWaitList, uint256 _endSalePublic) public {\r\n        require(walletsOwner[msg.sender] == msg.sender, \"Apenas wallets com permissao\");\r\n        require(_endSaleWaitList > _initSaleWaitList, \"Data Inicial de venda publica deve ser menor que da data de venda da WaitList\");\r\n        require(_endSalePublic > _endSaleWaitList, \"Data Final de venda publica deve ser menor que da data final de venda da WaitList\");\r\n        initSaleWaitList = _initSaleWaitList;\r\n        endSaleWaitList = _endSaleWaitList;\r\n        endSalePublic = _endSalePublic;\r\n    }\r\n\r\n    /// @notice set the user and expires of a NFT\r\n    /// @dev The zero address indicates there is no user\r\n    /// Throws if `tokenId` is not valid NFT\r\n    /// @param user  The new user of the NFT\r\n    /// @param expires  UNIX timestamp, The new user could use the NFT before expires\r\n    function setUser(uint256 tokenId, address user, uint64 expires) public virtual{\r\n        require(walletsOwner[msg.sender] == msg.sender, \"Apenas wallets com permissao\");\r\n        //UserInfo storage info = _users[tokenId];\r\n        //info.user = user;\r\n        //info.expires = expires;\r\n        _users[tokenId].expires = expires;\r\n        emit UpdateUser(tokenId, user, expires);\r\n    }\r\n\r\n    /// @notice Get the user address of an NFT\r\n    /// @dev The zero address indicates that there is no user or the user is expired\r\n    /// @param tokenId The NFT to get the user address for\r\n    /// @return The user address for this NFT\r\n    function userOf(uint256 tokenId) public view virtual returns(address) {\r\n        if (uint256(_users[tokenId].expires) >= block.timestamp) {\r\n            return _users[tokenId].user;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n        _exists(tokenId),\r\n        \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory currentBaseURI = uris[tokenId];\r\n        return bytes(currentBaseURI).length > 0\r\n            ? string(abi.encodePacked(currentBaseURI))\r\n            : \"\";\r\n    }\r\n\r\n    function setTokenMeta(uint256 tokenId, string memory uri) public {\r\n        require(walletsOwner[msg.sender] == msg.sender, \"Apenas wallets com permissao\");\r\n        uris[tokenId] = uri;\r\n        setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function balanceExpirationOf(address owner) public view returns (uint256) {\r\n        uint arrayLength = addressIndices.length;\r\n        for (uint i=0; i < arrayLength; i++) {\r\n            if (addressIndices[i] == owner) {\r\n                if (uint64(_users[getAddressLastMintedTokenId(owner)].expires) >=  block.timestamp) {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @notice Get the user expires of an NFT\r\n    /// @dev The zero value indicates that there is no user\r\n    /// @param tokenId The NFT to get the user expires for\r\n    /// @return The user expires for this NFT\r\n    function userExpires(uint256 tokenId) public view virtual returns(uint256){\r\n        return _users[tokenId].expires;\r\n    }\r\n\r\n    function pause(bool _state) public onlyOwner {\r\n        isPaused = _state;\r\n    }\r\n\r\n    function setNftEtherValueQuarterly(uint256 nftEtherValue) public onlyOwner {\r\n        _nftEtherValueQuarterly = nftEtherValue;\r\n    }\r\n\r\n    function setNftEtherValueSemester(uint256 nftEtherValue) public onlyOwner {\r\n        _nftEtherValueSemester = nftEtherValue;\r\n    }\r\n\r\n    function setNftEtherValueYearly(uint256 nftEtherValue) public onlyOwner {\r\n        _nftEtherValueYearly = nftEtherValue;\r\n    }\r\n\r\n    function setNftEtherValueQuarterlyDiscount(uint256 nftEtherValue) public onlyOwner {\r\n        _nftEtherValueQuarterlyDiscount = nftEtherValue;\r\n    }\r\n\r\n    function setNftEtherValueSemesterDiscount(uint256 nftEtherValue) public onlyOwner {\r\n        _nftEtherValueSemesterDiscount = nftEtherValue;\r\n    }\r\n\r\n    function setNftEtherValueYearlyDiscount(uint256 nftEtherValue) public onlyOwner {\r\n        _nftEtherValueYearlyDiscount = nftEtherValue;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyNfts;\r\n    }\r\n\r\n    function getAddressLastMintedTokenId(address wallet) public view returns (uint256) {\r\n        return _addressLastMintedTokenId[wallet];\r\n    }\r\n\r\n    function mint(\r\n        uint256 _mintAmount,\r\n        address payable _endUser,\r\n        uint64 _flat,\r\n        string memory uri, \r\n        uint8 _discountFlag\r\n    ) public payable {\r\n        require(phase() <= 1, \"Venda indisponivel no momento\");\r\n        require(!isPaused, \"O contrato pausado\");\r\n        require(_mintAmount > 0, \"Precisa mintar pelo menos 1 NFT\");\r\n        uint64 expires = uint64(block.timestamp);\r\n\r\n        if (msg.sender != _contractOwner) {\r\n            split(_mintAmount, _flat, _discountFlag);\r\n        }\r\n\r\n        if (_flat == 1) {\r\n            expires = expires + _timeQuarterly;\r\n        } else if (_flat == 2) {\r\n            expires = expires + _timeSemester;\r\n        } else {\r\n            expires = expires + _timeYearly;\r\n        }\r\n\r\n        for (uint256 i = 1; i <= _mintAmount; i++) {\r\n            id.increment();\r\n            uint256 Id = id.current();\r\n            _mint(msg.sender, _endUser, Id, uri);\r\n\r\n            _users[Id].user = _endUser;\r\n            _users[Id].expires = expires;\r\n            \r\n            _addressLastMintedTokenId[_endUser] = Id;\r\n            addressIndices.push(_endUser);\r\n            mappedUsers[_endUser] = Id;\r\n            uris[Id] = uri;\r\n            totalSupplyNfts++;\r\n            if (_flat == 1) {\r\n                mintedQuarterly++;\r\n            } else if (_flat == 2) {\r\n                mintedSemester++;\r\n            } else {\r\n                mintedYearly++;\r\n            }\r\n\r\n            emit UpdateUser(id.current(), _endUser, expires);\r\n        }\r\n    }\r\n\r\n    function airDrop(\r\n        uint256 _mintAmount,\r\n        address _endUser,\r\n        uint64 _flat,\r\n        string memory uri\r\n    ) public onlyOwner {\r\n        require(!isPaused, \"O contrato pausado\");\r\n        require(_mintAmount > 0, \"Precisa mintar pelo menos 1 NFT\");\r\n        uint64 expires = uint64(block.timestamp);\r\n\r\n        if (_flat == 1) {\r\n            expires = expires + _timeQuarterly;\r\n        } else if (_flat == 2) {\r\n            expires = expires + _timeSemester;\r\n        } else {\r\n            expires = expires + _timeYearly;\r\n        }\r\n\r\n        for (uint256 i = 1; i <= _mintAmount; i++) {\r\n            id.increment();\r\n            uint256 Id = id.current();\r\n            _mint(msg.sender, _endUser, Id, uri);\r\n            \r\n            _users[Id].user = _endUser;\r\n            _users[Id].expires = expires;\r\n\r\n            _addressLastMintedTokenId[_endUser] = Id;\r\n            addressIndices.push(_endUser);\r\n            mappedUsers[_endUser] = Id;\r\n            uris[Id] = uri;\r\n            totalSupplyNfts++;\r\n            if (_flat == 1) {\r\n                mintedQuarterly++;\r\n            } else if (_flat == 2) {\r\n                mintedSemester++;\r\n            } else {\r\n                mintedYearly++;\r\n            }\r\n\r\n            emit UpdateUser(id.current(), _endUser, expires);\r\n        }\r\n    }\r\n\r\n    function phase() public view returns (uint256) {\r\n        if (block.timestamp >= initSaleWaitList && block.timestamp <= endSaleWaitList) {\r\n            return 0; //with discount\r\n        }\r\n\r\n        if (block.timestamp >= endSaleWaitList && block.timestamp <= endSalePublic) {\r\n            return 1; //no discount\r\n        }\r\n\r\n        return 2; //Not Sale Available\r\n    }\r\n\r\n    function contractURI() external view returns (string memory) {\r\n        return _contractUri;\r\n    }\r\n\r\n    function setContractURI(string memory contractURI_) external onlyOwner {\r\n        _contractUri = contractURI_;\r\n    }\r\n\r\n    function split(uint256 _mintAmount, uint64 _flat, uint8 _discountFlag) public payable {\r\n        uint256 _nftEtherValueTemp = _nftEtherValueQuarterly;\r\n\r\n        if (phase() == 0) {\r\n            if (_flat == 1) {\r\n                _nftEtherValueTemp = _nftEtherValueQuarterlyDiscount;\r\n            } else if (_flat == 2) {\r\n                _nftEtherValueTemp = _nftEtherValueSemesterDiscount;\r\n            } else {\r\n                _nftEtherValueTemp = _nftEtherValueYearlyDiscount;\r\n            }\r\n        } else {\r\n            if (_flat == 1) {\r\n                _nftEtherValueTemp = _nftEtherValueQuarterly;\r\n            } else if (_flat == 2) {\r\n                _nftEtherValueTemp = _nftEtherValueSemester;\r\n            } else {\r\n                _nftEtherValueTemp = _nftEtherValueYearly;\r\n            }\r\n        }\r\n\r\n        DiscountCode verifyDiscount = DiscountCode.NO_DISCOUNT;\r\n\r\n        if (_discountFlag == 0) {\r\n            verifyDiscount = DiscountCode.NO_DISCOUNT;\r\n        } else if (_discountFlag == 1) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_10;\r\n        } else if (_discountFlag == 2) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_20;\r\n        } else if (_discountFlag == 3) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_30;\r\n        } else if (_discountFlag == 4) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_40;\r\n        } else if (_discountFlag == 5) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_50;\r\n        } else if (_discountFlag == 6) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_60;\r\n        } else if (_discountFlag == 7) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_70;\r\n        } else if (_discountFlag == 8) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_80;\r\n        } else if (_discountFlag == 9) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_90;\r\n        } else if (_discountFlag == 10) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_100;\r\n        } else if (_discountFlag == 11) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_110;\r\n        } else if (_discountFlag == 12) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_120;\r\n        } else if (_discountFlag == 13) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_130;\r\n        } else if (_discountFlag == 14) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_140;\r\n        } else if (_discountFlag == 15) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_150;\r\n        } else if (_discountFlag == 16) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_160;\r\n        } else if (_discountFlag == 17) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_170;\r\n        } else if (_discountFlag == 18) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_180;\r\n        } else if (_discountFlag == 19) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_190;\r\n        } else if (_discountFlag == 20) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_200;\r\n        } else if (_discountFlag == 21) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_210;\r\n        } else if (_discountFlag == 22) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_220;\r\n        } else if (_discountFlag == 23) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_230;\r\n        } else if (_discountFlag == 24) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_240;\r\n        } else if (_discountFlag == 25) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_250;\r\n        } else if (_discountFlag == 26) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_260;\r\n        } else if (_discountFlag == 27) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_270;\r\n        } else if (_discountFlag == 28) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_280;\r\n        } else if (_discountFlag == 29) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_290;\r\n        } else if (_discountFlag == 30) {\r\n            verifyDiscount = DiscountCode.DISCOUNT_300;\r\n        } else {\r\n            verifyDiscount = DiscountCode.NO_DISCOUNT;\r\n        }\r\n\r\n        uint256 discountTemp = applyDiscount(verifyDiscount);\r\n        if (discountTemp != 0) {\r\n            _nftEtherValueTemp = _nftEtherValueTemp * discountTemp / 100;\r\n        }\r\n\r\n        require(msg.value >= (_nftEtherValueTemp * _mintAmount), \"Valor da mintagem diferente do valor definido no contrato\");\r\n\r\n        uint ownerAmount = msg.value;\r\n\r\n        uint256 _splitPercentageM = _royalties;\r\n        uint256 amountM = msg.value * _splitPercentageM / 100;\r\n        \r\n        payable(wMobiup).transfer(amountM);\r\n        \r\n        ownerAmount = msg.value - amountM;\r\n        payable(wHazim).transfer(ownerAmount);\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        require(msg.sender == _contractOwner, \"Only the owner can destroy the contract\");\r\n        selfdestruct(payable(_contractOwner));\r\n    }\r\n\r\n    function burn(uint256 _tokenId) external {\r\n        require(ownerOf(_tokenId) == msg.sender || msg.sender == _contractOwner, \"You can't revoke this token\");\r\n        _burn(_tokenId);\r\n    }\r\n\r\n    function applyDiscount(DiscountCode discount) public pure returns (uint256) {\r\n        if (discount == DiscountCode.NO_DISCOUNT) {\r\n            return 0;\r\n        } else if (discount == DiscountCode.DISCOUNT_10) {\r\n            return 10;\r\n        } else if (discount == DiscountCode.DISCOUNT_20) {\r\n            return 20;\r\n        } else if (discount == DiscountCode.DISCOUNT_30) {\r\n            return 30;\r\n        } else if (discount == DiscountCode.DISCOUNT_40) {\r\n            return 40;\r\n        } else if (discount == DiscountCode.DISCOUNT_50) {\r\n            return 50;\r\n        } else if (discount == DiscountCode.DISCOUNT_60) {\r\n            return 60;\r\n        } else if (discount == DiscountCode.DISCOUNT_70) {\r\n            return 70;\r\n        } else if (discount == DiscountCode.DISCOUNT_80) {\r\n            return 80;\r\n        } else if (discount == DiscountCode.DISCOUNT_90) {\r\n            return 90;\r\n        } else if (discount == DiscountCode.DISCOUNT_100) {\r\n            return 100;\r\n        } else if (discount == DiscountCode.DISCOUNT_110) {\r\n            return 110;\r\n        } else if (discount == DiscountCode.DISCOUNT_120) {\r\n            return 120;\r\n        } else if (discount == DiscountCode.DISCOUNT_130) {\r\n            return 130;\r\n        } else if (discount == DiscountCode.DISCOUNT_140) {\r\n            return 140;\r\n        } else if (discount == DiscountCode.DISCOUNT_150) {\r\n            return 150;\r\n        } else if (discount == DiscountCode.DISCOUNT_160) {\r\n            return 160;\r\n        } else if (discount == DiscountCode.DISCOUNT_170) {\r\n            return 170;\r\n        } else if (discount == DiscountCode.DISCOUNT_180) {\r\n            return 180;\r\n        } else if (discount == DiscountCode.DISCOUNT_190) {\r\n            return 190;\r\n        } else if (discount == DiscountCode.DISCOUNT_200) {\r\n            return 200;\r\n        } else if (discount == DiscountCode.DISCOUNT_210) {\r\n            return 210;\r\n        } else if (discount == DiscountCode.DISCOUNT_220) {\r\n            return 220;\r\n        } else if (discount == DiscountCode.DISCOUNT_230) {\r\n            return 230;\r\n        } else if (discount == DiscountCode.DISCOUNT_240) {\r\n            return 240;\r\n        } else if (discount == DiscountCode.DISCOUNT_250) {\r\n            return 250;\r\n        } else if (discount == DiscountCode.DISCOUNT_260) {\r\n            return 260;\r\n        } else if (discount == DiscountCode.DISCOUNT_270) {\r\n            return 270;\r\n        } else if (discount == DiscountCode.DISCOUNT_280) {\r\n            return 280;\r\n        } else if (discount == DiscountCode.DISCOUNT_290) {\r\n            return 290;\r\n        } else if (discount == DiscountCode.DISCOUNT_300) {\r\n            return 300;\r\n        } else {\r\n            revert(\"Invalid discount code\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initSaleWaitList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endSaleWaitList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endSalePublic\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"UpdateUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_nftEtherValueQuarterly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftEtherValueQuarterlyDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftEtherValueSemester\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftEtherValueSemesterDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftEtherValueYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftEtherValueYearlyDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressIndices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_endUser\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_flat\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Hazim.DiscountCode\",\"name\":\"discount\",\"type\":\"uint8\"}],\"name\":\"applyDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceExpirationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAddressLastMintedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"give\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_endUser\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_flat\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_discountFlag\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedQuarterly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedSemester\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initSaleWaitList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endSaleWaitList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endSalePublic\",\"type\":\"uint256\"}],\"name\":\"setNewTimesSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftEtherValue\",\"type\":\"uint256\"}],\"name\":\"setNftEtherValueQuarterly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftEtherValue\",\"type\":\"uint256\"}],\"name\":\"setNftEtherValueQuarterlyDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftEtherValue\",\"type\":\"uint256\"}],\"name\":\"setNftEtherValueSemester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftEtherValue\",\"type\":\"uint256\"}],\"name\":\"setNftEtherValueSemesterDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftEtherValue\",\"type\":\"uint256\"}],\"name\":\"setNftEtherValueYearly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftEtherValue\",\"type\":\"uint256\"}],\"name\":\"setNftEtherValueYearlyDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setWalletPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_flat\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_discountFlag\",\"type\":\"uint8\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Hazim", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000648fc4b0000000000000000000000000000000000000000000000000000000006498ff2f0000000000000000000000000000000000000000000000000000000071c40aaf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://753625723140a73d070fb0ac55287697471bd04d053f2e0803a569eb15ef3609"}