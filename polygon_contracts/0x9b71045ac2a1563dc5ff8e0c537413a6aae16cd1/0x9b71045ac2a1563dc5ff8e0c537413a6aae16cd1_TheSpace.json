{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TheSpace/TheSpace.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ACLManager.sol\\\";\\nimport \\\"./TheSpaceRegistry.sol\\\";\\nimport \\\"./ITheSpaceRegistry.sol\\\";\\nimport \\\"./ITheSpace.sol\\\";\\n\\ncontract TheSpace is ITheSpace, Multicall, ReentrancyGuard, ACLManager {\\n    TheSpaceRegistry public registry;\\n\\n    // token image shared by all tokens\\n    string public tokenImageURI = \\\"ipfs://\\\";\\n\\n    constructor(\\n        address currencyAddress_,\\n        address registryAddress_,\\n        string memory tokenImageURI_,\\n        address aclManager_,\\n        address marketAdmin_,\\n        address treasuryAdmin_\\n    ) ACLManager(aclManager_, marketAdmin_, treasuryAdmin_) {\\n        // deploy logic contract only and upgrade later\\n        if (registryAddress_ != address(0)) {\\n            registry = TheSpaceRegistry(registryAddress_);\\n        }\\n        // deploy logic and registry contracts\\n        else {\\n            registry = new TheSpaceRegistry(\\n                \\\"Planck\\\", // property name\\n                \\\"PLK\\\", // property symbol\\n                1000000, // total supply\\n                12, // taxRate\\n                0, // treasuryShare\\n                1 * (10**uint256(ERC20(currencyAddress_).decimals())), // mintTax, 1 $SPACE\\n                currencyAddress_\\n            );\\n        }\\n\\n        tokenImageURI = tokenImageURI_;\\n    }\\n\\n    /**\\n     * @notice See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId_) external view virtual returns (bool) {\\n        return interfaceId_ == type(ITheSpace).interfaceId;\\n    }\\n\\n    //////////////////////////////\\n    /// Upgradability\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpace\\n    function upgradeTo(address newImplementation) external onlyRole(Role.aclManager) {\\n        registry.transferOwnership(newImplementation);\\n    }\\n\\n    //////////////////////////////\\n    /// Configuration / Admin\\n    //////////////////////////////\\n\\n    function setTotalSupply(uint256 totalSupply_) external onlyRole(Role.marketAdmin) {\\n        registry.setTotalSupply(totalSupply_);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function setTaxConfig(ITheSpaceRegistry.ConfigOptions option_, uint256 value_) external onlyRole(Role.marketAdmin) {\\n        registry.setTaxConfig(option_, value_);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function withdrawTreasury(address to_) external onlyRole(Role.treasuryAdmin) {\\n        (uint256 accumulatedUBI, uint256 accumulatedTreasury, uint256 treasuryWithdrawn) = registry.treasuryRecord();\\n\\n        // calculate available amount and transfer\\n        uint256 amount = accumulatedTreasury - treasuryWithdrawn;\\n        registry.transferCurrency(to_, amount);\\n        registry.emitTreasury(to_, amount);\\n\\n        // set `treasuryWithdrawn` to `accumulatedTreasury`\\n        registry.setTreasuryRecord(accumulatedUBI, accumulatedTreasury, accumulatedTreasury);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function setTokenImageURI(string memory uri_) external onlyRole(Role.aclManager) {\\n        tokenImageURI = uri_;\\n    }\\n\\n    //////////////////////////////\\n    /// Pixel\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpace\\n    function getPixel(uint256 tokenId_) external view returns (ITheSpaceRegistry.Pixel memory pixel) {\\n        return _getPixel(tokenId_);\\n    }\\n\\n    function _getPixel(uint256 tokenId_) internal view returns (ITheSpaceRegistry.Pixel memory pixel) {\\n        (, uint256 lastTaxCollection, ) = registry.tokenRecord(tokenId_);\\n\\n        pixel = ITheSpaceRegistry.Pixel(\\n            tokenId_,\\n            getPrice(tokenId_),\\n            lastTaxCollection,\\n            ubiAvailable(tokenId_),\\n            getOwner(tokenId_),\\n            registry.pixelColor(tokenId_)\\n        );\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function setPixel(\\n        uint256 tokenId_,\\n        uint256 bidPrice_,\\n        uint256 newPrice_,\\n        uint256 color_\\n    ) external {\\n        bid(tokenId_, bidPrice_);\\n        setPrice(tokenId_, newPrice_);\\n        _setColor(tokenId_, color_, msg.sender);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function setColor(uint256 tokenId_, uint256 color_) public {\\n        if (!registry.isApprovedOrOwner(msg.sender, tokenId_)) revert Unauthorized();\\n\\n        _setColor(tokenId_, color_, registry.ownerOf(tokenId_));\\n    }\\n\\n    function _setColor(\\n        uint256 tokenId_,\\n        uint256 color_,\\n        address owner_\\n    ) internal {\\n        if (registry.pixelColor(tokenId_) == color_) return;\\n\\n        registry.setColor(tokenId_, color_, owner_);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function getColor(uint256 tokenId) public view returns (uint256 color) {\\n        color = registry.pixelColor(tokenId);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function getPixelsByOwner(\\n        address owner_,\\n        uint256 limit_,\\n        uint256 offset_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 limit,\\n            uint256 offset,\\n            ITheSpaceRegistry.Pixel[] memory pixels\\n        )\\n    {\\n        uint256 _total = registry.balanceOf(owner_);\\n        if (limit_ == 0) {\\n            return (_total, limit_, offset_, new ITheSpaceRegistry.Pixel[](0));\\n        }\\n\\n        if (offset_ >= _total) {\\n            return (_total, limit_, offset_, new ITheSpaceRegistry.Pixel[](0));\\n        }\\n        uint256 left = _total - offset_;\\n        uint256 size = left > limit_ ? limit_ : left;\\n\\n        ITheSpaceRegistry.Pixel[] memory _pixels = new ITheSpaceRegistry.Pixel[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            uint256 tokenId = registry.tokenOfOwnerByIndex(owner_, i + offset_);\\n            _pixels[i] = _getPixel(tokenId);\\n        }\\n\\n        return (_total, limit_, offset_, _pixels);\\n    }\\n\\n    //////////////////////////////\\n    /// Trading\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpace\\n    function getPrice(uint256 tokenId_) public view returns (uint256 price) {\\n        return\\n            registry.exists(tokenId_)\\n                ? _getPrice(tokenId_)\\n                : registry.taxConfig(ITheSpaceRegistry.ConfigOptions.mintTax);\\n    }\\n\\n    function _getPrice(uint256 tokenId_) internal view returns (uint256) {\\n        (uint256 price, , ) = registry.tokenRecord(tokenId_);\\n        return price;\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function setPrice(uint256 tokenId_, uint256 price_) public {\\n        if (!(registry.isApprovedOrOwner(msg.sender, tokenId_))) revert Unauthorized();\\n        if (price_ == _getPrice(tokenId_)) return;\\n\\n        bool success = settleTax(tokenId_);\\n        if (success) _setPrice(tokenId_, price_);\\n    }\\n\\n    /**\\n     * @dev Internal function to set price without checking\\n     */\\n    function _setPrice(uint256 tokenId_, uint256 price_) private {\\n        _setPrice(tokenId_, price_, registry.ownerOf(tokenId_));\\n    }\\n\\n    function _setPrice(\\n        uint256 tokenId_,\\n        uint256 price_,\\n        address operator_\\n    ) private {\\n        // max price to prevent overflow of `_getTax`\\n        uint256 maxPrice = registry.currency().totalSupply();\\n        if (price_ > maxPrice) revert PriceTooHigh(maxPrice);\\n\\n        (, , uint256 ubiWithdrawn) = registry.tokenRecord(tokenId_);\\n\\n        registry.setTokenRecord(tokenId_, price_, block.number, ubiWithdrawn);\\n        registry.emitPrice(tokenId_, price_, operator_);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function getOwner(uint256 tokenId_) public view returns (address owner) {\\n        return registry.exists(tokenId_) ? registry.ownerOf(tokenId_) : address(0);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function bid(uint256 tokenId_, uint256 price_) public nonReentrant {\\n        address owner = getOwner(tokenId_);\\n        uint256 askPrice = _getPrice(tokenId_);\\n        uint256 mintTax = registry.taxConfig(ITheSpaceRegistry.ConfigOptions.mintTax);\\n\\n        // bid price and payee is calculated based on tax and token status\\n        uint256 bidPrice;\\n\\n        if (registry.exists(tokenId_)) {\\n            // skip if already own\\n            if (owner == msg.sender) return;\\n\\n            // clear tax\\n            bool success = _collectTax(tokenId_);\\n\\n            // proceed with transfer\\n            if (success) {\\n                // if tax fully paid, owner get paid normally\\n                bidPrice = askPrice;\\n\\n                // revert if price too low\\n                if (price_ < bidPrice) revert PriceTooLow();\\n\\n                // settle ERC20 token\\n                registry.transferCurrencyFrom(msg.sender, owner, bidPrice);\\n\\n                // settle ERC721 token\\n                registry.safeTransferByMarket(owner, msg.sender, tokenId_);\\n\\n                // emit deal event\\n                registry.emitDeal(tokenId_, owner, msg.sender, bidPrice);\\n\\n                return;\\n            } else {\\n                // if tax not fully paid, token is treated as defaulted and mint tax is collected and recorded\\n                registry.burn(tokenId_);\\n            }\\n        }\\n\\n        // mint tax is collected and recorded\\n        bidPrice = mintTax;\\n\\n        // revert if price too low\\n        if (price_ < bidPrice) revert PriceTooLow();\\n\\n        // settle ERC20 token\\n        registry.transferCurrencyFrom(msg.sender, address(registry), bidPrice);\\n\\n        // record as tax income\\n        _recordTax(tokenId_, msg.sender, mintTax);\\n\\n        // settle ERC721 token\\n        registry.mint(msg.sender, tokenId_);\\n\\n        // emit deal event\\n        registry.emitDeal(tokenId_, address(0), msg.sender, bidPrice);\\n    }\\n\\n    //////////////////////////////\\n    /// Tax & UBI\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpace\\n    function getTax(uint256 tokenId_) public view returns (uint256) {\\n        if (!registry.exists(tokenId_)) revert TokenNotExists();\\n\\n        return _getTax(tokenId_);\\n    }\\n\\n    function _getTax(uint256 tokenId_) internal view returns (uint256) {\\n        (uint256 price, uint256 lastTaxCollection, ) = registry.tokenRecord(tokenId_);\\n\\n        if (price == 0) return 0;\\n\\n        uint256 taxRate = registry.taxConfig(ITheSpaceRegistry.ConfigOptions.taxRate);\\n\\n        // `1000` for every `1000` blocks, `10000` for conversion from bps\\n        return ((price * taxRate * (block.number - lastTaxCollection)) / (1000 * 10000));\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function evaluateOwnership(uint256 tokenId_) public view returns (uint256 collectable, bool shouldDefault) {\\n        uint256 tax = getTax(tokenId_);\\n\\n        if (tax > 0) {\\n            // calculate collectable amount\\n            address taxpayer = registry.ownerOf(tokenId_);\\n            uint256 allowance = registry.currency().allowance(taxpayer, address(registry));\\n            uint256 balance = registry.currency().balanceOf(taxpayer);\\n            uint256 available = allowance < balance ? allowance : balance;\\n\\n            if (available >= tax) {\\n                // can pay tax fully and do not need to be defaulted\\n                return (tax, false);\\n            } else {\\n                // cannot pay tax fully and need to be defaulted\\n                return (available, true);\\n            }\\n        } else {\\n            // not tax needed\\n            return (0, false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect outstanding tax for a given token, put token on tax sale if obligation not met.\\n     * @dev Emits a {Tax} event\\n     * @dev Emits a {Price} event (when properties are put on tax sale).\\n     */\\n    function _collectTax(uint256 tokenId_) private returns (bool success) {\\n        (uint256 collectable, bool shouldDefault) = evaluateOwnership(tokenId_);\\n\\n        if (collectable > 0) {\\n            // collect and record tax\\n            address owner = registry.ownerOf(tokenId_);\\n            registry.transferCurrencyFrom(owner, address(registry), collectable);\\n            _recordTax(tokenId_, owner, collectable);\\n        }\\n\\n        return !shouldDefault;\\n    }\\n\\n    /**\\n     * @notice Update tax record and emit Tax event.\\n     */\\n    function _recordTax(\\n        uint256 tokenId_,\\n        address taxpayer_,\\n        uint256 amount_\\n    ) private {\\n        // calculate treasury change\\n        uint256 treasuryShare = registry.taxConfig(ITheSpaceRegistry.ConfigOptions.treasuryShare);\\n        uint256 treasuryAdded = (amount_ * treasuryShare) / 10000;\\n\\n        // set treasury record\\n        (uint256 accumulatedUBI, uint256 accumulatedTreasury, uint256 treasuryWithdrawn) = registry.treasuryRecord();\\n        registry.setTreasuryRecord(\\n            accumulatedUBI + (amount_ - treasuryAdded),\\n            accumulatedTreasury + treasuryAdded,\\n            treasuryWithdrawn\\n        );\\n\\n        // update lastTaxCollection and emit tax event\\n        (uint256 price, , uint256 ubiWithdrawn) = registry.tokenRecord(tokenId_);\\n        registry.setTokenRecord(tokenId_, price, block.number, ubiWithdrawn);\\n        registry.emitTax(tokenId_, taxpayer_, amount_);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function settleTax(uint256 tokenId_) public returns (bool success) {\\n        success = _collectTax(tokenId_);\\n        if (!success) registry.burn(tokenId_);\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function ubiAvailable(uint256 tokenId_) public view returns (uint256) {\\n        (uint256 accumulatedUBI, , ) = registry.treasuryRecord();\\n        (, , uint256 ubiWithdrawn) = registry.tokenRecord(tokenId_);\\n\\n        return accumulatedUBI / registry.totalSupply() - ubiWithdrawn;\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function withdrawUbi(uint256 tokenId_) external {\\n        uint256 amount = ubiAvailable(tokenId_);\\n\\n        if (amount > 0) {\\n            // transfer\\n            address recipient = registry.ownerOf(tokenId_);\\n            registry.transferCurrency(recipient, amount);\\n\\n            // record\\n            (uint256 price, uint256 lastTaxCollection, uint256 ubiWithdrawn) = registry.tokenRecord(tokenId_);\\n            registry.setTokenRecord(tokenId_, price, lastTaxCollection, ubiWithdrawn + amount);\\n\\n            // emit event\\n            registry.emitUBI(tokenId_, recipient, amount);\\n        }\\n    }\\n\\n    //////////////////////////////\\n    /// Registry backcall\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpace\\n    function _beforeTransferByRegistry(uint256 tokenId_) external returns (bool success) {\\n        if (msg.sender != address(registry)) revert Unauthorized();\\n\\n        // clear tax or default\\n        settleTax(tokenId_);\\n\\n        // proceed with transfer if tax settled\\n        if (registry.exists(tokenId_)) {\\n            // transfer is regarded as setting price to 0, then bid for free\\n            // this is to prevent transferring huge tax obligation as a form of attack\\n            _setPrice(tokenId_, 0);\\n\\n            success = true;\\n        } else {\\n            success = false;\\n        }\\n    }\\n\\n    /// @inheritdoc ITheSpace\\n    function _tokenURI(uint256 tokenId_) external view returns (string memory uri) {\\n        if (msg.sender != address(registry)) revert Unauthorized();\\n\\n        if (!registry.exists(tokenId_)) revert TokenNotExists();\\n\\n        string memory tokenName = string(abi.encodePacked(\\\"Planck #\\\", Strings.toString(tokenId_)));\\n        string memory description = \\\"One of 1 million pixels traded under Harberger Tax and UBI.\\\";\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"',\\n                        tokenName,\\n                        '\\\", \\\"description\\\": \\\"',\\n                        description,\\n                        '\\\", \\\"attributes\\\": [',\\n                        '], \\\"image\\\": \\\"',\\n                        tokenImageURI,\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        uri = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n            unchecked {\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\n            }\\n        }\\n\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TheSpace/ACLManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./IACLManager.sol\\\";\\n\\ncontract ACLManager is IACLManager, Context {\\n    mapping(Role => address) private _roles;\\n\\n    constructor(\\n        address aclManager_,\\n        address marketAdmin_,\\n        address treasuryAdmin_\\n    ) {\\n        if (aclManager_ == address(0)) revert ZeroAddress();\\n\\n        _transferRole(Role.aclManager, aclManager_);\\n        _transferRole(Role.marketAdmin, marketAdmin_);\\n        _transferRole(Role.treasuryAdmin, treasuryAdmin_);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any address other than the role address.\\n     */\\n    modifier onlyRole(Role role) {\\n        if (!_hasRole(role, _msgSender())) revert RoleRequired(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IACLManager\\n    function hasRole(Role role, address account) public view returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    function _hasRole(Role role, address account) internal view returns (bool) {\\n        return _roles[role] == account;\\n    }\\n\\n    /// @inheritdoc IACLManager\\n    function grantRole(Role role, address newAccount) public virtual onlyRole(Role.aclManager) {\\n        if (role == Role.aclManager) revert Forbidden();\\n        if (newAccount == address(0)) revert ZeroAddress();\\n\\n        _transferRole(role, newAccount);\\n    }\\n\\n    /// @inheritdoc IACLManager\\n    function transferRole(Role role, address newAccount) public virtual onlyRole(role) {\\n        if (newAccount == address(0)) revert ZeroAddress();\\n\\n        _transferRole(role, newAccount);\\n    }\\n\\n    /// @inheritdoc IACLManager\\n    function renounceRole(Role role) public virtual onlyRole(role) {\\n        if (role == Role.aclManager) revert Forbidden();\\n\\n        _transferRole(role, address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers role to a new account (`newAccount`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferRole(Role role, address newAccount) internal virtual {\\n        address oldAccount = _roles[role];\\n        _roles[role] = newAccount;\\n        emit RoleTransferred(role, oldAccount, newAccount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TheSpace/TheSpaceRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./ITheSpace.sol\\\";\\nimport \\\"./ITheSpaceRegistry.sol\\\";\\n\\ncontract TheSpaceRegistry is ITheSpaceRegistry, ERC721Enumerable, Ownable {\\n    /**\\n     * @dev Total possible number of ERC721 token\\n     */\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev ERC20 token used as currency\\n     */\\n    ERC20 public immutable currency;\\n\\n    /**\\n     * @dev Record for all tokens (tokenId => TokenRecord).\\n     */\\n    mapping(uint256 => TokenRecord) public tokenRecord;\\n\\n    /**\\n     * @dev Color of each token.\\n     */\\n    mapping(uint256 => uint256) public pixelColor;\\n\\n    /**\\n     * @dev Tax configuration of market.\\n     */\\n    mapping(ConfigOptions => uint256) public taxConfig;\\n\\n    /**\\n     * @dev Global state of tax and treasury.\\n     */\\n    TreasuryRecord public treasuryRecord;\\n\\n    /**\\n     * @dev Create Property contract, setup attached currency contract, setup tax rate.\\n     */\\n    constructor(\\n        string memory propertyName_,\\n        string memory propertySymbol_,\\n        uint256 totalSupply_,\\n        uint256 taxRate_,\\n        uint256 treasuryShare_,\\n        uint256 mintTax_,\\n        address currencyAddress_\\n    ) ERC721(propertyName_, propertySymbol_) {\\n        // initialize total supply\\n        _totalSupply = totalSupply_;\\n\\n        // initialize currency contract\\n        currency = ERC20(currencyAddress_);\\n\\n        // initialize tax config\\n        taxConfig[ConfigOptions.taxRate] = taxRate_;\\n        emit Config(ConfigOptions.taxRate, taxRate_);\\n        taxConfig[ConfigOptions.treasuryShare] = treasuryShare_;\\n        emit Config(ConfigOptions.treasuryShare, treasuryShare_);\\n        taxConfig[ConfigOptions.mintTax] = mintTax_;\\n        emit Config(ConfigOptions.mintTax, mintTax_);\\n    }\\n\\n    //////////////////////////////\\n    /// Getters & Setters\\n    //////////////////////////////\\n\\n    /**\\n     * @notice See {IERC20-totalSupply}.\\n     * @dev Always return total possible amount of supply, instead of current token in circulation.\\n     */\\n    function totalSupply() public view override(ERC721Enumerable, IERC721Enumerable) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    //////////////////////////////\\n    /// Setters for global variables\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function setTotalSupply(uint256 totalSupply_) external onlyOwner {\\n        emit TotalSupply(_totalSupply, totalSupply_);\\n\\n        _totalSupply = totalSupply_;\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function setTaxConfig(ConfigOptions option_, uint256 value_) external onlyOwner {\\n        taxConfig[option_] = value_;\\n\\n        emit Config(option_, value_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function setTreasuryRecord(\\n        uint256 accumulatedUBI_,\\n        uint256 accumulatedTreasury_,\\n        uint256 treasuryWithdrawn_\\n    ) external onlyOwner {\\n        treasuryRecord = TreasuryRecord(accumulatedUBI_, accumulatedTreasury_, treasuryWithdrawn_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function setTokenRecord(\\n        uint256 tokenId_,\\n        uint256 price_,\\n        uint256 lastTaxCollection_,\\n        uint256 ubiWithdrawn_\\n    ) external onlyOwner {\\n        tokenRecord[tokenId_] = TokenRecord(price_, lastTaxCollection_, ubiWithdrawn_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function setColor(\\n        uint256 tokenId_,\\n        uint256 color_,\\n        address owner_\\n    ) external onlyOwner {\\n        pixelColor[tokenId_] = color_;\\n        emit Color(tokenId_, color_, owner_);\\n    }\\n\\n    //////////////////////////////\\n    /// Event emission\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function emitTax(\\n        uint256 tokenId_,\\n        address taxpayer_,\\n        uint256 amount_\\n    ) external onlyOwner {\\n        emit Tax(tokenId_, taxpayer_, amount_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function emitPrice(\\n        uint256 tokenId_,\\n        uint256 price_,\\n        address operator_\\n    ) external onlyOwner {\\n        emit Price(tokenId_, price_, operator_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function emitUBI(\\n        uint256 tokenId_,\\n        address recipient_,\\n        uint256 amount_\\n    ) external onlyOwner {\\n        emit UBI(tokenId_, recipient_, amount_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function emitTreasury(address recipient_, uint256 amount_) external onlyOwner {\\n        emit Treasury(recipient_, amount_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function emitDeal(\\n        uint256 tokenId_,\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external onlyOwner {\\n        emit Deal(tokenId_, from_, to_, amount_);\\n    }\\n\\n    //////////////////////////////\\n    /// ERC721 property related\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function mint(address to_, uint256 tokenId_) external onlyOwner {\\n        if (tokenId_ > _totalSupply || tokenId_ < 1) revert InvalidTokenId(1, _totalSupply);\\n        _safeMint(to_, tokenId_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function burn(uint256 tokenId_) external onlyOwner {\\n        _burn(tokenId_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function safeTransferByMarket(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) external onlyOwner {\\n        _safeTransfer(from_, to_, tokenId_, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function exists(uint256 tokenId_) external view returns (bool) {\\n        return _exists(tokenId_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function isApprovedOrOwner(address spender_, uint256 tokenId_) external view returns (bool) {\\n        return _isApprovedOrOwner(spender_, tokenId_);\\n    }\\n\\n    /**\\n     * @notice See {IERC721-transferFrom}.\\n     * @dev Override to collect tax and set price before transfer.\\n     */\\n    function transferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) public override(ERC721, IERC721) {\\n        safeTransferFrom(from_, to_, tokenId_, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) public override(ERC721, IERC721) {\\n        // solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId_), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        ITheSpace market = ITheSpace(owner());\\n\\n        bool success = market._beforeTransferByRegistry(tokenId_);\\n\\n        if (success) {\\n            _safeTransfer(from_, to_, tokenId_, data_);\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IERC721-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId_) public view override returns (string memory uri) {\\n        ITheSpace market = ITheSpace(owner());\\n\\n        uri = market._tokenURI(tokenId_);\\n    }\\n\\n    //////////////////////////////\\n    /// ERC20 currency related\\n    //////////////////////////////\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function transferCurrency(address to_, uint256 amount_) external onlyOwner {\\n        currency.transfer(to_, amount_);\\n    }\\n\\n    /// @inheritdoc ITheSpaceRegistry\\n    function transferCurrencyFrom(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external onlyOwner {\\n        currency.transferFrom(from_, to_, amount_);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TheSpace/ITheSpaceRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @title The interface for `TheSpaceRegistry` contract.\\n * @notice Storage contract for `TheSpace` contract.\\n * @dev It stores all states related to the market, and is owned by the TheSpace contract.\\n * @dev The market contract can be upgraded by changing the owner of this contract to the new implementation contract.\\n */\\ninterface ITheSpaceRegistry is IERC721Enumerable {\\n    //////////////////////////////\\n    /// Error types\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Token id is out of range.\\n     * @param min Lower range of possible token id.\\n     * @param max Higher range of possible token id.\\n     */\\n    error InvalidTokenId(uint256 min, uint256 max);\\n\\n    //////////////////////////////\\n    /// Event types\\n    //////////////////////////////\\n\\n    /**\\n     * @notice A token updated price.\\n     * @param tokenId Id of token that updated price.\\n     * @param price New price after update.\\n     * @param owner Token owner during price update.\\n     */\\n    event Price(uint256 indexed tokenId, uint256 price, address indexed owner);\\n\\n    /**\\n     * @notice Global configuration is updated.\\n     * @param option Field of config been updated.\\n     * @param value New value after update.\\n     */\\n    event Config(ConfigOptions indexed option, uint256 value);\\n\\n    /**\\n     * @notice Total is updated.\\n     * @param previousSupply Total supply amount before update.\\n     * @param newSupply New supply amount after update.\\n     */\\n    event TotalSupply(uint256 previousSupply, uint256 newSupply);\\n\\n    /**\\n     * @notice Tax is collected for a token.\\n     * @param tokenId Id of token that has been taxed.\\n     * @param taxpayer user address who has paid the tax.\\n     * @param amount Amount of tax been collected.\\n     */\\n    event Tax(uint256 indexed tokenId, address indexed taxpayer, uint256 amount);\\n\\n    /**\\n     * @notice UBI (universal basic income) is withdrawn for a token.\\n     * @param tokenId Id of token that UBI has been withdrawn for.\\n     * @param recipient user address who got this withdrawn UBI.\\n     * @param amount Amount of UBI withdrawn.\\n     */\\n    event UBI(uint256 indexed tokenId, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Treasury is withdrawn.\\n     * @param recipient address who got this withdrawn treasury.\\n     * @param amount Amount of withdrawn.\\n     */\\n    event Treasury(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice A token has been succefully bid.\\n     * @param tokenId Id of token that has been bid.\\n     * @param from Original owner before bid.\\n     * @param to New owner after bid.\\n     * @param amount Amount of currency used for bidding.\\n     */\\n    event Deal(uint256 indexed tokenId, address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the color of a pixel is updated.\\n     * @param tokenId Id of token that has been bid.\\n     * @param color Color index defined by client.\\n     * @param owner Token owner.\\n     */\\n    event Color(uint256 indexed tokenId, uint256 indexed color, address indexed owner);\\n\\n    //////////////////////////////\\n    /// Data structure\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Options for global tax configuration.\\n     * @param taxRate: Tax rate in bps every 1000 blocks\\n     * @param treasuryShare: Share to treasury in bps.\\n     * @param mintTax: Tax to mint a token. It should be non-zero to prevent attacker constantly mint, default and mint token again.\\n     */\\n    enum ConfigOptions {\\n        taxRate,\\n        treasuryShare,\\n        mintTax\\n    }\\n\\n    /**\\n     * @notice Record of each token.\\n     * @param price Current price.\\n     * @param lastTaxCollection Block number of last tax collection.\\n     * @param ubiWithdrawn Amount of UBI been withdrawn.\\n     */\\n    struct TokenRecord {\\n        uint256 price;\\n        uint256 lastTaxCollection;\\n        uint256 ubiWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Global state of tax and treasury.\\n     * @param accumulatedUBI Total amount of currency allocated for UBI.\\n     * @param accumulatedTreasury Total amount of currency allocated for treasury.\\n     * @param treasuryWithdrawn Total amount of treasury been withdrawn.\\n     */\\n    struct TreasuryRecord {\\n        uint256 accumulatedUBI;\\n        uint256 accumulatedTreasury;\\n        uint256 treasuryWithdrawn;\\n    }\\n\\n    /**\\n     * @dev Packed pixel info.\\n     */\\n    struct Pixel {\\n        uint256 tokenId;\\n        uint256 price;\\n        uint256 lastTaxCollection;\\n        uint256 ubi;\\n        address owner;\\n        uint256 color;\\n    }\\n\\n    //////////////////////////////\\n    /// Getters & Setters\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Update total supply of ERC721 token.\\n     * @param totalSupply_ New amount of total supply.\\n     */\\n    function setTotalSupply(uint256 totalSupply_) external;\\n\\n    /**\\n     * @notice Update global tax settings.\\n     * @param option_ Tax config options, see {ConfigOptions} for detail.\\n     * @param value_ New value for tax setting.\\n     */\\n    function setTaxConfig(ConfigOptions option_, uint256 value_) external;\\n\\n    /**\\n     * @notice Update UBI and treasury.\\n     * @param accumulatedUBI_ Total amount of currency allocated for UBI.\\n     * @param accumulatedTreasury_ Total amount of currency allocated for treasury.\\n     * @param treasuryWithdrawn_ Total amount of treasury been withdrawn.\\n     */\\n    function setTreasuryRecord(\\n        uint256 accumulatedUBI_,\\n        uint256 accumulatedTreasury_,\\n        uint256 treasuryWithdrawn_\\n    ) external;\\n\\n    /**\\n     * @notice Set record for a given token.\\n     * @param tokenId_ Id of token to be set.\\n     * @param price_ Current price.\\n     * @param lastTaxCollection_ Block number of last tax collection.\\n     * @param ubiWithdrawn_ Amount of UBI been withdrawn.\\n     */\\n    function setTokenRecord(\\n        uint256 tokenId_,\\n        uint256 price_,\\n        uint256 lastTaxCollection_,\\n        uint256 ubiWithdrawn_\\n    ) external;\\n\\n    /**\\n     * @notice Set color for a given token.\\n     * @param tokenId_ Token id to be set.\\n     * @param color_ Color Id.\\n     * @param owner_ Token owner.\\n     */\\n    function setColor(\\n        uint256 tokenId_,\\n        uint256 color_,\\n        address owner_\\n    ) external;\\n\\n    //////////////////////////////\\n    /// Event emission\\n    //////////////////////////////\\n\\n    /**\\n     * @dev Emit {Tax} event\\n     */\\n    function emitTax(\\n        uint256 tokenId_,\\n        address taxpayer_,\\n        uint256 amount_\\n    ) external;\\n\\n    /**\\n     * @dev Emit {Price} event\\n     */\\n    function emitPrice(\\n        uint256 tokenId_,\\n        uint256 price_,\\n        address operator_\\n    ) external;\\n\\n    /**\\n     * @dev Emit {UBI} event\\n     */\\n    function emitUBI(\\n        uint256 tokenId_,\\n        address recipient_,\\n        uint256 amount_\\n    ) external;\\n\\n    /**\\n     * @dev Emit {Treasury} event\\n     */\\n    function emitTreasury(address recipient_, uint256 amount_) external;\\n\\n    /**\\n     * @dev Emit {Deal} event\\n     */\\n    function emitDeal(\\n        uint256 tokenId_,\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    //////////////////////////////\\n    /// ERC721 property related\\n    //////////////////////////////\\n\\n    /**\\n     * @dev Mint an ERC721 token.\\n     */\\n    function mint(address to_, uint256 tokenId_) external;\\n\\n    /**\\n     * @dev Burn an ERC721 token.\\n     */\\n    function burn(uint256 tokenId_) external;\\n\\n    /**\\n     * @dev Perform ERC721 token transfer by market contract.\\n     */\\n    function safeTransferByMarket(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) external;\\n\\n    /**\\n     * @dev If an ERC721 token has been minted.\\n     */\\n    function exists(uint256 tokenId_) external view returns (bool);\\n\\n    /**\\n     * @dev If an address is allowed to transfer an ERC721 token.\\n     */\\n    function isApprovedOrOwner(address spender_, uint256 tokenId_) external view returns (bool);\\n\\n    //////////////////////////////\\n    /// ERC20 currency related\\n    //////////////////////////////\\n\\n    /**\\n     * @dev Perform ERC20 token transfer by market contract.\\n     */\\n    function transferCurrency(address to_, uint256 amount_) external;\\n\\n    /**\\n     * @dev Perform ERC20 token transferFrom by market contract.\\n     */\\n    function transferCurrencyFrom(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/TheSpace/ITheSpace.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITheSpaceRegistry.sol\\\";\\n\\n/**\\n * @title The interface for `TheSpace` contract\\n * @notice _The Space_ is a pixel space owned by a decentralized autonomous organization (DAO), where members can tokenize, own, trade and color pixels.\\n *\\n * Pixels are tokenized as ERC721 tokens and traded under Harberger tax, while members receive dividend based on the share of pixels they own.\\n *\\n * #### Trading\\n * - User needs to call `approve` on currency contract before starting. If there is not sufficient allowance for taxing, the corresponding assets are defaulted.\\n * - User buy pixel: call [`bid` function](./ITheSpace.md).\\n * - User set pixel price: call [`setPrice` function](./ITheSpace.md).\\n *\\n * @dev This contract holds the logic of market place, while read from and write into {TheSpaceRegistry}, which is the storage contact.\\n * @dev This contract owns a {TheSpaceRegistry} contract for storage, and can be updated by transfering ownership to a new implementation contract.\\n */\\n\\ninterface ITheSpace {\\n    //////////////////////////////\\n    /// Error types\\n    //////////////////////////////\\n\\n    /**\\n     * @dev Price too low to bid the given token.\\n     */\\n    error PriceTooLow();\\n\\n    /**\\n     * @dev Price too high to set.\\n     */\\n    error PriceTooHigh(uint256 maxPrice);\\n\\n    /**\\n     * @dev Sender is not authorized for given operation.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * @dev The give token does not exist and needs to be minted first via bidding.\\n     */\\n    error TokenNotExists();\\n\\n    //////////////////////////////\\n    /// Upgradability\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Switch logic contract to another one.\\n     *\\n     * @dev Access: only `Role.aclManager`.\\n     * @dev Throws: `RoleRequired` error.\\n     *\\n     * @param newImplementation address of new logic contract.\\n     */\\n    function upgradeTo(address newImplementation) external;\\n\\n    //////////////////////////////\\n    /// Configuration / Admin\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Update total supply of ERC721 token.\\n     *\\n     * @dev Access: only `Role.marketAdmin`.\\n     * @dev Throws: `RoleRequired` error.\\n     *\\n     * @param totalSupply_ New amount of total supply.\\n     */\\n    function setTotalSupply(uint256 totalSupply_) external;\\n\\n    /**\\n     * @notice Update current tax configuration.\\n     *\\n     * @dev Access: only `Role.marketAdmin`.\\n     * @dev Emits: `Config` event.\\n     * @dev Throws: `RoleRequired` error.\\n     *\\n     * @param option_ Field of config been updated.\\n     * @param value_ New value after update.\\n     */\\n    function setTaxConfig(ITheSpaceRegistry.ConfigOptions option_, uint256 value_) external;\\n\\n    /**\\n     * @notice Withdraw all available treasury.\\n     *\\n     * @dev Access: only `Role.treasuryAdmin`.\\n     * @dev Throws: `RoleRequired` error.\\n     *\\n     * @param to_ address of DAO treasury.\\n     */\\n    function withdrawTreasury(address to_) external;\\n\\n    /**\\n     * @notice Set token image URI.\\n     *\\n     * @dev Access: only `Role.aclManager`.\\n     * @dev Throws: `RoleRequired` error.\\n     *\\n     * @param uri_ new URI\\n     */\\n    function setTokenImageURI(string memory uri_) external;\\n\\n    //////////////////////////////\\n    /// Pixel\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Get pixel info.\\n     * @param tokenId_ Token id to be queried.\\n     * @return pixel Packed pixel info.\\n     */\\n    function getPixel(uint256 tokenId_) external view returns (ITheSpaceRegistry.Pixel memory pixel);\\n\\n    /**\\n     * @notice Bid pixel, then set price and color.\\n     *\\n     * @dev Throws: inherits from `bid` and `setPrice`.\\n     *\\n     * @param tokenId_ Token id to be bid and set.\\n     * @param bidPrice_ Bid price.\\n     * @param newPrice_ New price to be set.\\n     * @param color_ Color to be set.\\n     */\\n    function setPixel(\\n        uint256 tokenId_,\\n        uint256 bidPrice_,\\n        uint256 newPrice_,\\n        uint256 color_\\n    ) external;\\n\\n    /**\\n     * @notice Set color for a pixel.\\n     *\\n     * @dev Access: only token owner or approved operator.\\n     * @dev Throws: `Unauthorized` or `ERC721: operator query for nonexistent token` error.\\n     * @dev Emits: `Color` event.\\n     *\\n     * @param tokenId_ Token id to be set.\\n     * @param color_ Color to be set.\\n     */\\n    function setColor(uint256 tokenId_, uint256 color_) external;\\n\\n    /**\\n     * @notice Get color for a pixel.\\n     * @param tokenId_ Token id to be queried.\\n     * @return color Color.\\n     */\\n    function getColor(uint256 tokenId_) external view returns (uint256 color);\\n\\n    /**\\n     * @notice Get pixels owned by a given address.\\n     * @param owner_ Owner address.\\n     * @param limit_ Limit of returned pixels.\\n     * @param offset_ Offset of returned pixels.\\n     * @return total Total number of pixels.\\n     * @return limit Limit of returned pixels.\\n     * @return offset Offset of returned pixels.\\n     * @return pixels Packed pixels.\\n     * @dev offset-based pagination\\n     */\\n    function getPixelsByOwner(\\n        address owner_,\\n        uint256 limit_,\\n        uint256 offset_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 limit,\\n            uint256 offset,\\n            ITheSpaceRegistry.Pixel[] memory pixels\\n        );\\n\\n    //////////////////////////////\\n    /// Trading\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Returns the current price of a token by id.\\n     * @param tokenId_ Token id to be queried.\\n     * @return price Current price.\\n     */\\n    function getPrice(uint256 tokenId_) external view returns (uint256 price);\\n\\n    /**\\n     * @notice Set the current price of a token with id. Triggers tax settle first, price is succefully updated after tax is successfully collected.\\n     *\\n     * @dev Access: only token owner or approved operator.\\n     * @dev Throws: `Unauthorized` or `ERC721: operator query for nonexistent token` error.\\n     * @dev Emits: `Price` event.\\n     *\\n     * @param tokenId_ Id of token been updated.\\n     * @param price_ New price to be updated.\\n     */\\n    function setPrice(uint256 tokenId_, uint256 price_) external;\\n\\n    /**\\n     * @notice Returns the current owner of an Harberger property with token id.\\n     * @dev If token does not exisit, return zero address and user can bid the token as usual.\\n     * @param tokenId_ Token id to be queried.\\n     * @return owner Current owner address.\\n     */\\n    function getOwner(uint256 tokenId_) external view returns (address owner);\\n\\n    /**\\n     * @notice Purchase property with bid higher than current price.\\n     * If bid price is higher than ask price, only ask price will be deducted.\\n     * @dev Clear tax for owner before transfer.\\n     *\\n     * @dev Throws: `PriceTooLow` or `InvalidTokenId` error.\\n     * @dev Emits: `Deal`, `Tax` events.\\n     *\\n     * @param tokenId_ Id of token been bid.\\n     * @param price_ Bid price.\\n     */\\n    function bid(uint256 tokenId_, uint256 price_) external;\\n\\n    //////////////////////////////\\n    /// Tax & UBI\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Calculate outstanding tax for a token.\\n     * @param tokenId_ Token id to be queried.\\n     * @return amount Current amount of tax that needs to be paid.\\n     */\\n    function getTax(uint256 tokenId_) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Calculate amount of tax that can be collected, and determine if token should be defaulted.\\n     * @param tokenId_ Token id to be queried.\\n     * @return collectable Amount of currency that can be collected, considering balance and allowance.\\n     * @return shouldDefault Whether current token should be defaulted.\\n     */\\n    function evaluateOwnership(uint256 tokenId_) external view returns (uint256 collectable, bool shouldDefault);\\n\\n    /**\\n     * @notice Collect outstanding tax of a token and default it if needed.\\n     * @dev Anyone can trigger this function. It could be desirable for the developer team to trigger it once a while to make sure all tokens meet their tax obligation.\\n     *\\n     * @dev Throws: `PriceTooLow` or `InvalidTokenId` error.\\n     * @dev Emits: `Tax` events.\\n     *\\n     * @param tokenId_ Id of token been settled.\\n     * @return success Whether tax is fully collected without token been defaulted.\\n     */\\n    function settleTax(uint256 tokenId_) external returns (bool success);\\n\\n    /**\\n     * @notice Amount of UBI available for withdraw on given token.\\n     * @param tokenId_ Token id to be queried.\\n     * @param amount Amount of UBI available to be collected\\n     */\\n    function ubiAvailable(uint256 tokenId_) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Withdraw all UBI on given token.\\n     *\\n     * @dev Emits: `UBI` event.\\n     *\\n     * @param tokenId_ Id of token been withdrawn.\\n     */\\n    function withdrawUbi(uint256 tokenId_) external;\\n\\n    //////////////////////////////\\n    /// Registry backcall\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Perform before `safeTransfer` and `safeTransferFrom` by registry contract.\\n     * @dev Collect tax and set price.\\n     *\\n     * @dev Access: only registry.\\n     * @dev Throws: `Unauthorized` error.\\n     *\\n     * @param tokenId_ Token id to be transferred.\\n     * @return success Whether tax is fully collected without token been defaulted.\\n     */\\n    function _beforeTransferByRegistry(uint256 tokenId_) external returns (bool success);\\n\\n    /**\\n     * @notice Get token URI by registry contract.\\n     *\\n     * @dev Access: only registry.\\n     * @dev Throws: `Unauthorized` or `TokenNotExists` error.\\n     *\\n     * @param tokenId_ Token id to be transferred.\\n     * @return uri Base64 encoded URI.\\n     */\\n    function _tokenURI(uint256 tokenId_) external view returns (string memory uri);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TheSpace/IACLManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title The interface for `ACLManager` contract to manage _The Space_ market.\\n * @notice Access Control List Manager is a role-based access control mechanism.\\n * @dev Each role can be granted to an address.\\n * @dev All available roles are defined in `Role` enum.\\n */\\ninterface IACLManager {\\n    //////////////////////////////\\n    /// Error types\\n    //////////////////////////////\\n\\n    /**\\n     * @dev Given operation is requires a given role.\\n     */\\n    error RoleRequired(Role role);\\n\\n    /**\\n     * @dev Given operation is forbidden.\\n     */\\n    error Forbidden();\\n\\n    /**\\n     * @dev Given a zero address.\\n     */\\n    error ZeroAddress();\\n\\n    //////////////////////////////\\n    /// Eevent types\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Role is transferred to a new address.\\n     * @param role Role transferred.\\n     * @param prevAccount Old address.\\n     * @param newAccount New address.\\n     */\\n    event RoleTransferred(Role indexed role, address indexed prevAccount, address indexed newAccount);\\n\\n    /**\\n     * @notice Available roles.\\n     * @param aclManager: responsible for assigning and revoking roles of other addresses\\n     * @param marketAdmin: responsible for updating configuration, e.g. tax rate or treasury rate.\\n     * @param treasuryAdmin: responsible for withdrawing treasury from contract.\\n     */\\n    enum Role {\\n        aclManager,\\n        marketAdmin,\\n        treasuryAdmin\\n    }\\n\\n    /**\\n     * @notice Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(Role role, address account) external returns (bool);\\n\\n    /**\\n     * @notice Grant role to a account (`newAccount`).\\n     * @dev Cannot grant `Role.aclManager`.\\n     *\\n     * @dev Access: only `Role.aclManager`.\\n     * @dev Throws: `RoleRequired`, `Forbidden` or `ZeroAddress` error.\\n     */\\n    function grantRole(Role role, address newAccount) external;\\n\\n    /**\\n     * @notice Transfers role to a new account (`newAccount`).\\n     * @dev Acces: only current role address.\\n     * @dev Throws: `RoleRequired`, or `ZeroAddress` error.\\n     */\\n    function transferRole(Role role, address newAccount) external;\\n\\n    /**\\n     * @notice Revokes role from the role address.\\n     * @dev `Role.aclManager` can not be revoked.\\n     *\\n     * @dev Access: only current role address.\\n     * @dev Throws: `RoleRequired` or `Forbidden` error.\\n     */\\n    function renounceRole(Role role) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currencyAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registryAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenImageURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"aclManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAdmin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAdmin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"PriceTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IACLManager.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IACLManager.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"_beforeTransferByRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"evaluateOwnership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldDefault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getPixel\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTaxCollection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ubi\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"internalType\":\"struct ITheSpaceRegistry.Pixel\",\"name\":\"pixel\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"}],\"name\":\"getPixelsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTaxCollection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ubi\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"internalType\":\"struct ITheSpaceRegistry.Pixel[]\",\"name\":\"pixels\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IACLManager.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IACLManager.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract TheSpaceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IACLManager.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color_\",\"type\":\"uint256\"}],\"name\":\"setColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color_\",\"type\":\"uint256\"}],\"name\":\"setPixel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ITheSpaceRegistry.ConfigOptions\",\"name\":\"option_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setTaxConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setTokenImageURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"settleTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IACLManager.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ubiAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"withdrawUbi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheSpace", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000264808855b0a6a5a318d238c6ee9f299179f27fc0000000000000000000000008da7a7a48ebbd870358f2fd824e52e5142f4425700000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000edc934329433f7d151bb38c56e91fe5a8d4a2c600000000000000000000000001d52e2b5b74420d3633d8690a60bb3ea0345b58600000000000000000000000011c37333c6204ae05e5450d8a304d22ee4ba8de80000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d5645514a3257675a556b574b7a666b486d4576377638444654526878775a47444868776f69323348766e70620000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}