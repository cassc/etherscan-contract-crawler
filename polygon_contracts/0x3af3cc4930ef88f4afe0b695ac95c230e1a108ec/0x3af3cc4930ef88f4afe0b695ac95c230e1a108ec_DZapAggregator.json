{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/DZapAggregator.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./SwapHandler.sol\\\";\\nimport \\\"./FeeModule.sol\\\";\\nimport \\\"../interfaces/IDZapAggregator.sol\\\";\\n\\ncontract DZapAggregator is SwapHandler, IDZapAggregator {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        uint256[3] memory fees_,\\n        address[] memory routers_,\\n        Router[] memory routerDetails_,\\n        address governor_,\\n        address aggregationRouter_,\\n        address wNative_,\\n        address protocolFeeVault_,\\n        address feeDiscountNft_\\n    )\\n        SwapHandler(routers_, routerDetails_, aggregationRouter_, wNative_)\\n        FeeModule(fees_, governor_, protocolFeeVault_, feeDiscountNft_)\\n    {}\\n\\n    function rescueFunds(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external onlyGovernance {\\n        require(to_ != address(0), \\\"DZ001\\\");\\n\\n        if (_isNative(token_)) {\\n            _safeNativeTransfer(to_, amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n\\n        emit TokensRescued(to_, address(token_), amount_);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDZapAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./ISwapHandler.sol\\\";\\n\\ninterface IDZapAggregator is ISwapHandler {\\n    /* ========= EVENTS ========= */\\n\\n    event TokensRescued(address indexed to, address indexed token, uint256 amount);\\n\\n    /* ========= RESTRICTED ========= */\\n\\n    function rescueFunds(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/FeeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Router, FeeType } from \\\"../common/Types.sol\\\";\\n\\nimport \\\"../utils/Governable.sol\\\";\\nimport \\\"../tokens/DZapDiscountNft.sol\\\";\\nimport \\\"../interfaces/IFeeModule.sol\\\";\\n\\nabstract contract FeeModule is Governable, IFeeModule {\\n    address public protocolFeeVault;\\n\\n    uint256 public nextProjectId;\\n\\n    DZapDiscountNft public feeDiscountNft;\\n\\n    mapping(FeeType => uint256) public protocolFeeBps;\\n    mapping(uint256 => mapping(FeeType => uint256)) public projectFeeBps; // projectId -> FeeBps\\n    mapping(uint256 => address) public projectFeeVault; // projectId -> fee vault\\n\\n    uint256 public constant MAX_FEE = 5000; // 5%, max project fee\\n    uint256 public constant BPS_DENOMINATOR = 10000;\\n\\n    /* ========= CONSTRUCTOR ========= */\\n\\n    constructor(\\n        uint256[3] memory fees_,\\n        address governor_,\\n        address protocolFeeVault_,\\n        address feeDiscountNft_\\n    ) Governable(governor_) {\\n        require(protocolFeeVault_ != address(0) && feeDiscountNft_ != address(0), \\\"DZF001\\\");\\n\\n        protocolFeeVault = protocolFeeVault_;\\n        feeDiscountNft = DZapDiscountNft(feeDiscountNft_);\\n\\n        protocolFeeBps[FeeType.BATCH_SWAP] = fees_[0];\\n        protocolFeeBps[FeeType.BATCH_SWAP_LP] = fees_[1];\\n        protocolFeeBps[FeeType.BATCH_TRANSFER] = fees_[2];\\n    }\\n\\n    /* ========= RESTRICTED ========= */\\n\\n    function updateProtocolFee(FeeType[] calldata feeTypes_, uint256[] calldata fees_) external onlyGovernance {\\n        for (uint256 i; i < feeTypes_.length; i++) {\\n            protocolFeeBps[feeTypes_[i]] = fees_[i];\\n        }\\n\\n        emit ProtocolFeeUpdated();\\n    }\\n\\n    function updateProtocolFeeVault(address newProtocolFeeVault_) external onlyGovernance {\\n        require(newProtocolFeeVault_ != address(0), \\\"DZF001\\\");\\n\\n        protocolFeeVault = newProtocolFeeVault_;\\n\\n        emit ProtocolFeeVaultUpdated();\\n    }\\n\\n    function addProject(uint256[3] calldata fees_, address feeVault_) external onlyGovernance {\\n        require(feeVault_ != address(0), \\\"DZF001\\\");\\n        require(fees_[0] <= MAX_FEE && fees_[1] <= MAX_FEE && fees_[2] <= MAX_FEE, \\\"DZF002\\\");\\n\\n        projectFeeBps[nextProjectId][FeeType.BATCH_SWAP] = fees_[0];\\n        projectFeeBps[nextProjectId][FeeType.BATCH_SWAP_LP] = fees_[1];\\n        projectFeeBps[nextProjectId][FeeType.BATCH_TRANSFER] = fees_[2];\\n\\n        projectFeeVault[nextProjectId] = feeVault_;\\n\\n        emit ProjectAdded(nextProjectId++);\\n    }\\n\\n    // make fee vault 0\\n    function disableProject(uint256 projectId_) external onlyGovernance {\\n        require(projectId_ < nextProjectId, \\\"DZF003\\\");\\n        require(projectFeeVault[projectId_] != address(0), \\\"DZF004\\\");\\n\\n        projectFeeVault[projectId_] = address(0);\\n\\n        emit ProjectStatusDisabled(projectId_);\\n    }\\n\\n    function updateProjectFee(\\n        uint256 projectId_,\\n        FeeType[] memory feeTypes_,\\n        uint256[] memory fees_\\n    ) external onlyGovernance {\\n        require(projectId_ < nextProjectId, \\\"DZF003\\\");\\n\\n        for (uint256 i; i < feeTypes_.length; i++) {\\n            projectFeeBps[projectId_][feeTypes_[i]] = fees_[i];\\n        }\\n\\n        emit ProjectFeeUpdated(projectId_);\\n    }\\n\\n    // enable a disabled project\\n    // update vault\\n    function updateProjectFeeVault(uint256 projectId_, address feeVault_) external onlyGovernance {\\n        require(projectId_ < nextProjectId, \\\"DZF003\\\");\\n        require(feeVault_ != address(0), \\\"DZF001\\\");\\n\\n        projectFeeVault[projectId_] = feeVault_;\\n\\n        emit ProjectFeeVaultUpdated(projectId_);\\n    }\\n\\n    /* ========= internal ========= */\\n\\n    function _getFeeDetail(\\n        uint256 projectId_,\\n        uint256 nftId_,\\n        FeeType feeType_\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256, // protocolFeeBps\\n            uint256, // projectFeeBps\\n            address // projectFeeVault\\n        )\\n    {\\n        require(projectId_ < nextProjectId && projectFeeVault[projectId_] != address(0), \\\"DZF003\\\");\\n\\n        uint256 protocolFee = protocolFeeBps[feeType_];\\n        if (nftId_ == 0 || protocolFee == 0) {\\n            return (protocolFee, projectFeeBps[projectId_][feeType_], projectFeeVault[projectId_]);\\n        }\\n\\n        require(feeDiscountNft.balanceOf(_msgSender(), nftId_) > 0, \\\"DZF005\\\");\\n\\n        (uint256 discountedFeeBps, uint256 expiry) = feeDiscountNft.discountDetails(nftId_);\\n\\n        if (block.timestamp < expiry) {\\n            protocolFee -= ((protocolFee * discountedFeeBps) / BPS_DENOMINATOR);\\n        }\\n\\n        // require(block.timestamp < expiry, \\\"Expired\\\");\\n        // protocolFee -= ((protocolFee * discountedFeeBps) / BPS_DENOMINATOR);\\n\\n        return (protocolFee, projectFeeBps[projectId_][feeType_], projectFeeVault[projectId_]);\\n    }\\n\\n    function _calculateFeeAmount(\\n        uint256 amount_,\\n        uint256 protocolFeeBps_,\\n        uint256 projectFeeBps_\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256, // returnAmount\\n            uint256, // protocolFee\\n            uint256 // projectFee\\n        )\\n    {\\n        uint256 protocolFee = (amount_ * protocolFeeBps_) / BPS_DENOMINATOR;\\n        uint256 projectFee = (amount_ * projectFeeBps_) / BPS_DENOMINATOR;\\n        return (amount_ - (protocolFee + projectFee), protocolFee, projectFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/SwapHandler.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAggregationRouterV4.sol\\\";\\nimport \\\"../interfaces/IWNATIVE.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./FeeModule.sol\\\";\\nimport \\\"../utils/Permitable.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../interfaces/ISwapHandler.sol\\\";\\n\\nimport { Router, FeeType, Token, SwapInfo, SwapDescription, SwapDetails, TransferDetails, TransferInfo, LpSwapDetails, WNativeSwapDetails, LPSwapInfo, OutputLp, UnoSwapDetails, InputTokenData } from \\\"../common/Types.sol\\\";\\n\\nabstract contract SwapHandler is FeeModule, Permitable, ISwapHandler {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => Router) public routers;\\n\\n    address public immutable wNative;\\n    address public immutable AGGREGATION_ROUTER;\\n\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    uint256 private constant _PARTIAL_FILL = 1 << 0;\\n\\n    /* ========= CONSTRUCTOR ========= */\\n\\n    constructor(\\n        address[] memory routers_,\\n        Router[] memory routerDetails_,\\n        address aggregationRouter_,\\n        address wNative_\\n    ) {\\n        require(wNative_ != address(0) && aggregationRouter_ != address(0), \\\"DZS0015\\\");\\n\\n        AGGREGATION_ROUTER = aggregationRouter_;\\n        wNative = wNative_;\\n\\n        for (uint256 i; i < routers_.length; ++i) {\\n            address router = routers_[i];\\n            require(router != address(0), \\\"DZS0016\\\");\\n            routers[router] = routerDetails_[i];\\n        }\\n    }\\n\\n    /* ========= VIEWS ========= */\\n\\n    function calculateOptimalSwapAmount(\\n        uint256 amountA_,\\n        uint256 amountB_,\\n        uint256 reserveA_,\\n        uint256 reserveB_,\\n        address router_\\n    ) public view returns (uint256) {\\n        require(amountA_ * reserveB_ >= amountB_ * reserveA_, \\\"DZS0014\\\");\\n\\n        uint256 routerFeeBps = routers[router_].fees;\\n        uint256 a = BPS_DENOMINATOR - routerFeeBps;\\n        uint256 b = (((BPS_DENOMINATOR * 2) - routerFeeBps)) * reserveA_;\\n        uint256 _c = (amountA_ * reserveB_) - (amountB_ * reserveA_);\\n        uint256 c = ((_c * BPS_DENOMINATOR) / (amountB_ + reserveB_)) * reserveA_;\\n\\n        uint256 d = a * c * 4;\\n        uint256 e = Math.sqrt((b * b) + d);\\n\\n        uint256 numerator = e - b;\\n        uint256 denominator = a * 2;\\n\\n        return numerator / denominator;\\n    }\\n\\n    /* ========= RESTRICTED ========= */\\n\\n    function updateRouters(address[] calldata routers_, Router[] calldata routerDetails_) external onlyGovernance {\\n        for (uint256 i; i < routers_.length; ++i) {\\n            address router = routers_[i];\\n            require(router != address(0), \\\"DZS0016\\\");\\n            routers[router] = routerDetails_[i];\\n        }\\n\\n        emit RoutersUpdated(routers_, routerDetails_);\\n    }\\n\\n    /* ========= PUBLIC ========= */\\n\\n    // can return both native and wNative\\n    function swapTokensToTokens(\\n        SwapDetails[] calldata data_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable {\\n        require(recipient_ != address(0), \\\"DZS001\\\");\\n        SwapInfo[] memory swapInfo = new SwapInfo[](data_.length);\\n        (uint256 tempProtocolFeeBps, uint256 tempProjectFeeBps, address projectFeeVault) = _getFeeDetail(\\n            projectId_,\\n            nftId_,\\n            FeeType.BATCH_SWAP\\n        );\\n\\n        for (uint256 i; i < data_.length; ++i) {\\n            SwapDetails memory data = data_[i];\\n\\n            require(data.desc.dstReceiver == address(0), \\\"DZS002\\\");\\n            require(data.desc.flags & _PARTIAL_FILL == 0, \\\"DZS003\\\");\\n\\n            uint256 value;\\n\\n            if (_isNative(data.desc.srcToken)) {\\n                value = data.desc.amount;\\n            } else {\\n                _transferAndApprove(data.permit, data.desc.srcToken, AGGREGATION_ROUTER, data.desc.amount);\\n            }\\n\\n            try\\n                IAggregationRouterV4(AGGREGATION_ROUTER).swap{ value: value }(data.executor, data.desc, data.routeData)\\n            returns (uint256 returnAmount, uint256) {\\n                require(returnAmount >= data.desc.minReturnAmount, \\\"DZS004\\\");\\n\\n                swapInfo[i] = SwapInfo(data.desc.srcToken, data.desc.dstToken, data.desc.amount, returnAmount);\\n\\n                _swapTransferDstTokens(\\n                    data.desc.dstToken,\\n                    recipient_,\\n                    projectFeeVault,\\n                    returnAmount,\\n                    tempProtocolFeeBps,\\n                    tempProjectFeeBps\\n                );\\n            } catch Error(string memory) {\\n                swapInfo[i] = SwapInfo(data.desc.srcToken, data.desc.dstToken, data.desc.amount, 0);\\n                if (_isNative(data.desc.srcToken)) {\\n                    _safeNativeTransfer(_msgSender(), data.desc.amount);\\n                } else {\\n                    data.desc.srcToken.safeApprove(AGGREGATION_ROUTER, 0);\\n                    data.desc.srcToken.safeTransfer(_msgSender(), data.desc.amount);\\n                }\\n            }\\n        }\\n\\n        emit TokensSwapped(_msgSender(), recipient_, swapInfo, [tempProtocolFeeBps, tempProjectFeeBps]);\\n    }\\n\\n    // can return only native when dest is wNative\\n    function unoSwapTokensToTokens(\\n        UnoSwapDetails[] calldata swapData_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable {\\n        require(recipient_ != address(0), \\\"DZS001\\\");\\n        SwapInfo[] memory swapInfo = new SwapInfo[](swapData_.length);\\n\\n        (uint256 tempProtocolFeeBps, uint256 tempProjectFeeBps, address projectFeeVault) = _getFeeDetail(\\n            projectId_,\\n            nftId_,\\n            FeeType.BATCH_SWAP\\n        );\\n\\n        _nativeDeposit();\\n\\n        // lp swap\\n        for (uint256 i; i < swapData_.length; ++i) {\\n            UnoSwapDetails memory data = swapData_[i];\\n\\n            IERC20 srcToken = IERC20(data.path[0]);\\n            IERC20 dstToken = IERC20(data.path[data.path.length - 1]);\\n\\n            require(!_isNative(dstToken), \\\"DZS008\\\");\\n\\n            if (_isNative(srcToken)) {\\n                data.path[0] = wNative;\\n                IWNATIVE(wNative).approve(data.router, data.amount);\\n            } else {\\n                _transferAndApprove(data.permit, srcToken, data.router, data.amount);\\n            }\\n\\n            try\\n                IUniswapV2Router02(data.router).swapExactTokensForTokens(\\n                    data.amount,\\n                    data.minReturnAmount,\\n                    data.path,\\n                    address(this),\\n                    block.timestamp + 60\\n                )\\n            returns (uint256[] memory amountOuts) {\\n                uint256 returnAmount = amountOuts[amountOuts.length - 1];\\n\\n                require(returnAmount >= data.minReturnAmount, \\\"DZS004\\\");\\n\\n                swapInfo[i] = SwapInfo(srcToken, dstToken, data.amount, returnAmount);\\n\\n                _unoSwapTransferDstTokens(\\n                    dstToken,\\n                    recipient_,\\n                    projectFeeVault,\\n                    returnAmount,\\n                    tempProtocolFeeBps,\\n                    tempProjectFeeBps\\n                );\\n            } catch Error(string memory) {\\n                swapInfo[i] = SwapInfo(srcToken, dstToken, data.amount, 0);\\n\\n                if (_isNative(srcToken)) {\\n                    IWNATIVE(wNative).withdraw(data.amount);\\n                    _safeNativeTransfer(_msgSender(), data.amount);\\n                } else {\\n                    srcToken.safeApprove(data.router, 0);\\n                    srcToken.safeTransfer(_msgSender(), data.amount);\\n                }\\n            }\\n        }\\n\\n        emit TokensSwapped(_msgSender(), recipient_, swapInfo, [tempProtocolFeeBps, tempProjectFeeBps]);\\n    }\\n\\n    // can return both native and wNative\\n    function swapLpToTokens(\\n        LpSwapDetails[] calldata lpSwapDetails_,\\n        WNativeSwapDetails[] calldata wEthSwapDetails_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external {\\n        require(recipient_ != address(0), \\\"DZS001\\\");\\n        require(wEthSwapDetails_.length > 0, \\\"DZS009\\\");\\n\\n        // as in the final swap all the wNative tokens are considered\\n        // require(IWNATIVE(wNative).balanceOf(address(this)) == 0, \\\"DZS0010\\\");\\n\\n        LPSwapInfo memory swapInfo;\\n        swapInfo.lpInput = new Token[](lpSwapDetails_.length);\\n        swapInfo.lpOutput = new Token[](wEthSwapDetails_.length + 1);\\n\\n        (uint256 tempProtocolFeeBps, uint256 tempProjectFeeBps, address projectFeeVault) = _getFeeDetail(\\n            projectId_,\\n            nftId_,\\n            FeeType.BATCH_SWAP_LP\\n        );\\n\\n        // swap lp to weth\\n        swapInfo.lpInput = _swapLpToWNative(lpSwapDetails_);\\n\\n        // swap weth to tokens\\n        swapInfo.lpOutput = _swapWNativeToDstTokens(\\n            wEthSwapDetails_,\\n            recipient_,\\n            projectFeeVault,\\n            IWNATIVE(wNative).balanceOf(address(this)),\\n            tempProtocolFeeBps,\\n            tempProjectFeeBps\\n        );\\n\\n        emit LpSwapped(_msgSender(), recipient_, swapInfo, [tempProtocolFeeBps, tempProjectFeeBps]);\\n    }\\n\\n    function swapTokensToLp(\\n        SwapDetails[] calldata data_,\\n        LpSwapDetails[] calldata lpSwapDetails_,\\n        OutputLp calldata outputLpDetails_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) public payable {\\n        require(recipient_ != address(0), \\\"DZS001\\\");\\n        require(routers[outputLpDetails_.router].isSupported, \\\"DZS005\\\");\\n\\n        Token[] memory input = new Token[](data_.length + lpSwapDetails_.length + 1);\\n        (uint256 tempProtocolFeeBps, uint256 tempProjectFeeBps, address projectFeeVault) = _getFeeDetail(\\n            projectId_,\\n            nftId_,\\n            FeeType.BATCH_SWAP_LP\\n        );\\n\\n        address token0 = IUniswapV2Pair(outputLpDetails_.lpToken).token0();\\n        address token1 = IUniswapV2Pair(outputLpDetails_.lpToken).token1();\\n        uint256 i;\\n\\n        // native to wNative\\n        if (msg.value > 0) {\\n            IWNATIVE(wNative).deposit{ value: msg.value }();\\n            input[input.length - 1] = Token(address(0), msg.value);\\n        }\\n\\n        // erc to wNative\\n        for (i; i < data_.length; ++i) {\\n            SwapDetails memory data = data_[i];\\n            address srcToken = address(data.desc.srcToken);\\n\\n            if (srcToken != wNative && srcToken != token0 && srcToken != token1) {\\n                require(data.desc.dstReceiver == address(0), \\\"DZS002\\\");\\n                require(data.desc.flags & _PARTIAL_FILL == 0, \\\"DZS003\\\"); // partial fill not allowed\\n                require(!_isNative(data.desc.srcToken), \\\"DZS0011\\\"); // src cant be native\\n                require(data.desc.dstToken == IERC20(wNative), \\\"DZS0012\\\");\\n\\n                _transferAndApprove(data.permit, data.desc.srcToken, AGGREGATION_ROUTER, data.desc.amount);\\n\\n                (uint256 returnAmount, ) = IAggregationRouterV4(AGGREGATION_ROUTER).swap(\\n                    data.executor,\\n                    data.desc,\\n                    data.routeData\\n                );\\n\\n                require(returnAmount > data.desc.minReturnAmount, \\\"DZS004\\\");\\n            } else {\\n                _permit(srcToken, data.permit);\\n                data.desc.srcToken.safeTransferFrom(_msgSender(), address(this), data.desc.amount);\\n            }\\n\\n            input[i] = Token(srcToken, data.desc.amount);\\n        }\\n\\n        // lp to wNative\\n        for (uint256 j; j < lpSwapDetails_.length; ++j) {\\n            LpSwapDetails memory details = lpSwapDetails_[j];\\n            require(routers[details.router].isSupported, \\\"DZS0013\\\");\\n            // require(outputLpDetails_.lpToken != details.token, \\\"DZS0014\\\");\\n\\n            address tokenA = IUniswapV2Pair(details.token).token0();\\n            address tokenB = IUniswapV2Pair(details.token).token1();\\n\\n            (uint256 amountA, uint256 amountB) = _removeLiquidity(details, tokenA, tokenB, details.router);\\n\\n            _swapExactTokensForTokens(\\n                tokenA,\\n                amountA,\\n                details.tokenAToPath,\\n                tokenA != wNative && tokenA != token0 && tokenA != token1,\\n                details.router\\n            );\\n            _swapExactTokensForTokens(\\n                tokenB,\\n                amountB,\\n                details.tokenBToPath,\\n                tokenB != wNative && tokenB != token0 && tokenB != token1,\\n                details.router\\n            );\\n\\n            input[i + j] = Token(details.token, details.amount);\\n        }\\n\\n        uint256[3] memory returnAmounts = _addOptimalLiquidity(outputLpDetails_, token0, token1);\\n\\n        require(returnAmounts[0] >= outputLpDetails_.minReturnAmount, \\\"DZS004\\\");\\n\\n        _transferOutputLP(\\n            IERC20(outputLpDetails_.lpToken),\\n            recipient_,\\n            projectFeeVault,\\n            returnAmounts[0],\\n            tempProtocolFeeBps,\\n            tempProjectFeeBps\\n        );\\n\\n        // Transfer dust\\n        if (returnAmounts[1] > 0) {\\n            IERC20(token0).safeTransfer(_msgSender(), returnAmounts[1]);\\n        }\\n        if (returnAmounts[2] > 0) {\\n            IERC20(token1).safeTransfer(_msgSender(), returnAmounts[2]);\\n        }\\n\\n        emit LiquidityAdded(\\n            _msgSender(),\\n            recipient_,\\n            input,\\n            outputLpDetails_.lpToken,\\n            returnAmounts,\\n            [tempProtocolFeeBps, tempProjectFeeBps]\\n        );\\n    }\\n\\n    function batchTransfer(\\n        TransferDetails[] calldata data_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable {\\n        TransferInfo[] memory transferInfo = new TransferInfo[](data_.length);\\n\\n        (uint256 tempProtocolFeeBps, uint256 tempProjectFeeBps, address projectFeeVault) = _getFeeDetail(\\n            projectId_,\\n            nftId_,\\n            FeeType.BATCH_TRANSFER\\n        );\\n        uint256 availableBalance = msg.value;\\n\\n        for (uint256 i; i < data_.length; ++i) {\\n            TransferDetails memory details = data_[i];\\n            require(details.recipient != address(0), \\\"DZS001\\\");\\n            Token[] memory tokenInfo = new Token[](details.data.length);\\n\\n            for (uint256 j; j < details.data.length; ++j) {\\n                InputTokenData memory data = details.data[j];\\n                (uint256 amountAfterFee, uint256 protocolFee, uint256 projectFee) = _calculateFeeAmount(\\n                    data.amount,\\n                    tempProtocolFeeBps,\\n                    tempProjectFeeBps\\n                );\\n\\n                tokenInfo[j] = Token(address(data.token), data.amount);\\n\\n                if (_isNative(data.token)) {\\n                    require(availableBalance >= data.amount, \\\"DZS003\\\");\\n                    availableBalance -= data.amount;\\n                    _safeNativeTransfer(details.recipient, amountAfterFee);\\n                    if (protocolFee > 0) _safeNativeTransfer(protocolFeeVault, protocolFee);\\n                    if (projectFee > 0) _safeNativeTransfer(projectFeeVault, projectFee);\\n                } else {\\n                    _permit(address(data.token), data.permit);\\n\\n                    data.token.safeTransferFrom(_msgSender(), details.recipient, amountAfterFee);\\n                    if (protocolFee > 0) data.token.safeTransferFrom(_msgSender(), protocolFeeVault, protocolFee);\\n                    if (projectFee > 0) data.token.safeTransferFrom(_msgSender(), projectFeeVault, projectFee);\\n                }\\n            }\\n            transferInfo[i] = TransferInfo(details.recipient, tokenInfo);\\n        }\\n\\n        require(availableBalance == 0, \\\"DZS006\\\");\\n\\n        emit TokensTransferred(_msgSender(), transferInfo, [tempProtocolFeeBps, tempProjectFeeBps]);\\n    }\\n\\n    /* ========= INTERNAL/PRIVATE ========= */\\n\\n    function _isNative(IERC20 token_) internal pure returns (bool) {\\n        return (token_ == _ZERO_ADDRESS || token_ == _ETH_ADDRESS);\\n    }\\n\\n    function _safeNativeTransfer(address to_, uint256 amount_) internal {\\n        (bool sent, ) = to_.call{ value: amount_ }(new bytes(0));\\n        require(sent, \\\"DZS007\\\");\\n    }\\n\\n    function _nativeDeposit() private {\\n        if (msg.value > 0) {\\n            IWNATIVE(wNative).deposit{ value: msg.value }();\\n        }\\n    }\\n\\n    function _transferAndApprove(\\n        bytes memory permit_,\\n        IERC20 srcToken_,\\n        address router_,\\n        uint256 amount_\\n    ) private {\\n        _permit(address(srcToken_), permit_);\\n        srcToken_.safeTransferFrom(_msgSender(), address(this), amount_);\\n        srcToken_.safeApprove(router_, amount_);\\n    }\\n\\n    function _swapTransferDstTokens(\\n        IERC20 token_,\\n        address recipient_,\\n        address projectFeeVault,\\n        uint256 returnAmount,\\n        uint256 tempProtocolFeeBps,\\n        uint256 tempProjectFeeBps\\n    ) private {\\n        (uint256 amountAfterFee, uint256 protocolFee, uint256 projectFee) = _calculateFeeAmount(\\n            returnAmount,\\n            tempProtocolFeeBps,\\n            tempProjectFeeBps\\n        );\\n\\n        if (_isNative(token_)) {\\n            _safeNativeTransfer(recipient_, amountAfterFee);\\n            if (protocolFee > 0) _safeNativeTransfer(protocolFeeVault, protocolFee);\\n            if (projectFee > 0) _safeNativeTransfer(projectFeeVault, projectFee);\\n        } else {\\n            token_.safeTransfer(recipient_, amountAfterFee);\\n            if (protocolFee > 0) token_.safeTransfer(protocolFeeVault, protocolFee);\\n            if (projectFee > 0) token_.safeTransfer(projectFeeVault, projectFee);\\n        }\\n    }\\n\\n    function _unoSwapTransferDstTokens(\\n        IERC20 token_,\\n        address recipient_,\\n        address projectFeeVault,\\n        uint256 returnAmount,\\n        uint256 tempProtocolFeeBps,\\n        uint256 tempProjectFeeBps\\n    ) private {\\n        (uint256 amountAfterFee, uint256 protocolFee, uint256 projectFee) = _calculateFeeAmount(\\n            returnAmount,\\n            tempProtocolFeeBps,\\n            tempProjectFeeBps\\n        );\\n\\n        if (address(token_) == wNative) {\\n            IWNATIVE(wNative).withdraw(returnAmount);\\n            _safeNativeTransfer(recipient_, amountAfterFee);\\n            if (protocolFee > 0) _safeNativeTransfer(protocolFeeVault, protocolFee);\\n            if (projectFee > 0) _safeNativeTransfer(projectFeeVault, projectFee);\\n        } else {\\n            token_.safeTransfer(recipient_, amountAfterFee);\\n            if (protocolFee > 0) token_.safeTransfer(protocolFeeVault, protocolFee);\\n            if (projectFee > 0) token_.safeTransfer(projectFeeVault, projectFee);\\n        }\\n    }\\n\\n    function _transferOutputLP(\\n        IERC20 lpToken,\\n        address recipient_,\\n        address projectFeeVault,\\n        uint256 returnAmount,\\n        uint256 tempProtocolFeeBps,\\n        uint256 tempProjectFeeBps\\n    ) private {\\n        (uint256 amountAfterFee, uint256 protocolFee, uint256 projectFee) = _calculateFeeAmount(\\n            returnAmount,\\n            tempProtocolFeeBps,\\n            tempProjectFeeBps\\n        );\\n\\n        lpToken.safeTransfer(recipient_, amountAfterFee);\\n        if (protocolFee > 0) lpToken.safeTransfer(protocolFeeVault, protocolFee);\\n        if (projectFee > 0) lpToken.safeTransfer(projectFeeVault, projectFee);\\n    }\\n\\n    function _swapWNativeForToken(\\n        uint256 amount_,\\n        address[] memory path_,\\n        address router_\\n    ) private returns (uint256) {\\n        IWNATIVE(wNative).approve(router_, amount_);\\n\\n        uint256[] memory amountOuts = IUniswapV2Router02(router_).swapExactTokensForTokens(\\n            amount_,\\n            0,\\n            path_,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n        return amountOuts[amountOuts.length - 1];\\n    }\\n\\n    function _swapExactTokensForTokens(\\n        address token_,\\n        uint256 amount_,\\n        address[] memory path_,\\n        bool executeSwap_,\\n        address router_\\n    ) private {\\n        if (executeSwap_) {\\n            IERC20(token_).approve(router_, amount_);\\n            IUniswapV2Router02(router_).swapExactTokensForTokens(\\n                amount_,\\n                0,\\n                path_,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n        }\\n    }\\n\\n    //  used in swapLpToTokens\\n    function _swapLpToWNative(LpSwapDetails[] calldata lpSwapDetails_) internal returns (Token[] memory) {\\n        Token[] memory swapInfo = new Token[](lpSwapDetails_.length);\\n\\n        for (uint256 i; i < lpSwapDetails_.length; ++i) {\\n            LpSwapDetails memory details = lpSwapDetails_[i];\\n            require(routers[details.router].isSupported, \\\"DZS005\\\");\\n\\n            address tokenA = IUniswapV2Pair(details.token).token0();\\n            address tokenB = IUniswapV2Pair(details.token).token1();\\n\\n            (uint256 amountA, uint256 amountB) = _removeLiquidity(details, tokenA, tokenB, details.router);\\n\\n            _swapExactTokensForTokens(tokenA, amountA, details.tokenAToPath, tokenA != wNative, details.router);\\n\\n            _swapExactTokensForTokens(tokenB, amountB, details.tokenBToPath, tokenB != wNative, details.router);\\n\\n            swapInfo[i] = Token(details.token, details.amount);\\n        }\\n\\n        return swapInfo;\\n    }\\n\\n    //  used in swapLpToTokens\\n    function _swapWNativeToDstTokens(\\n        WNativeSwapDetails[] calldata wEthSwapDetails_,\\n        address recipient_,\\n        address projectFeeVault,\\n        uint256 wNativeBalance,\\n        uint256 tempProtocolFeeBps,\\n        uint256 tempProjectFeeBps\\n    ) private returns (Token[] memory) {\\n        Token[] memory swapInfo = new Token[](wEthSwapDetails_.length);\\n\\n        // swap weth to tokens\\n        // for last swap all the leftOver tokens are considered\\n        for (uint256 i; i < wEthSwapDetails_.length; ++i) {\\n            WNativeSwapDetails memory details = wEthSwapDetails_[i];\\n\\n            uint256 wNativeAmount = i != wEthSwapDetails_.length - 1\\n                ? (wNativeBalance * details.sizeBps) / BPS_DENOMINATOR\\n                : IWNATIVE(wNative).balanceOf(address(this));\\n\\n            if (details.nativeToOutputPath.length == 0) {\\n                // native\\n\\n                require(wNativeAmount >= details.minReturnAmount, \\\"DZS004\\\");\\n\\n                (uint256 amountAfterFee, uint256 protocolFee, uint256 projectFee) = _calculateFeeAmount(\\n                    wNativeAmount,\\n                    tempProtocolFeeBps,\\n                    tempProjectFeeBps\\n                );\\n\\n                IWNATIVE(wNative).withdraw(wNativeAmount);\\n                _safeNativeTransfer(recipient_, amountAfterFee);\\n                if (protocolFee > 0) _safeNativeTransfer(protocolFeeVault, protocolFee);\\n                if (projectFee > 0) _safeNativeTransfer(projectFeeVault, projectFee);\\n\\n                swapInfo[i] = Token(address(0), wNativeAmount);\\n            } else {\\n                // wNative and others\\n                address destToken = details.nativeToOutputPath[details.nativeToOutputPath.length - 1];\\n\\n                uint256 amountOut = wNativeAmount;\\n\\n                if (destToken != wNative) {\\n                    require(routers[details.router].isSupported, \\\"DZS005\\\");\\n                    amountOut = _swapWNativeForToken(wNativeAmount, details.nativeToOutputPath, details.router);\\n                }\\n\\n                require(amountOut >= details.minReturnAmount, \\\"DZS004\\\");\\n\\n                (uint256 amountAfterFee, uint256 protocolFee, uint256 projectFee) = _calculateFeeAmount(\\n                    amountOut,\\n                    tempProtocolFeeBps,\\n                    tempProjectFeeBps\\n                );\\n\\n                IERC20(destToken).safeTransfer(recipient_, amountAfterFee);\\n                if (protocolFee > 0) IERC20(destToken).safeTransfer(protocolFeeVault, protocolFee);\\n                if (projectFee > 0) IERC20(destToken).safeTransfer(projectFeeVault, projectFee);\\n\\n                swapInfo[i] = Token(destToken, amountOut);\\n            }\\n        }\\n\\n        return swapInfo;\\n    }\\n\\n    function _removeLiquidity(\\n        LpSwapDetails memory details_,\\n        address tokenA_,\\n        address tokenB_,\\n        address router_\\n    ) private returns (uint256 amountA, uint256 amountB) {\\n        _transferAndApprove(details_.permit, IERC20(details_.token), router_, details_.amount);\\n\\n        (amountA, amountB) = IUniswapV2Router02(router_).removeLiquidity(\\n            tokenA_,\\n            tokenB_,\\n            details_.amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n    }\\n\\n    function _addOptimalLiquidity(\\n        OutputLp calldata lpDetails_,\\n        address tokenA_,\\n        address tokenB_\\n    ) private returns (uint256[3] memory) {\\n        uint256 wNativeBalance = IWNATIVE(wNative).balanceOf(address(this));\\n\\n        // swap 50-50\\n        if (wNativeBalance > 0) {\\n            if (tokenA_ != wNative)\\n                _swapWNativeForToken(wNativeBalance / 2, lpDetails_.nativeToToken0, lpDetails_.router);\\n\\n            if (tokenB_ != wNative)\\n                _swapWNativeForToken(\\n                    wNativeBalance - (wNativeBalance / 2),\\n                    lpDetails_.nativeToToken1,\\n                    lpDetails_.router\\n                );\\n        }\\n\\n        // do optimal swap\\n        (uint256 amountA, uint256 amountB) = _optimalSwapForAddingLiquidity(\\n            lpDetails_.lpToken,\\n            tokenA_,\\n            tokenB_,\\n            IERC20(tokenA_).balanceOf(address(this)),\\n            IERC20(tokenB_).balanceOf(address(this)),\\n            lpDetails_.router\\n        );\\n\\n        IERC20(tokenA_).approve(lpDetails_.router, amountA);\\n        IERC20(tokenB_).approve(lpDetails_.router, amountB);\\n\\n        // add liquidity\\n        (uint256 addedToken0, uint256 addedToken1, uint256 lpAmount) = IUniswapV2Router02(lpDetails_.router)\\n            .addLiquidity(tokenA_, tokenB_, amountA, amountB, 0, 0, address(this), block.timestamp + 60);\\n\\n        return ([lpAmount, amountA - addedToken0, amountB - addedToken1]);\\n    }\\n\\n    function _optimalSwapForAddingLiquidity(\\n        address lp,\\n        address tokenA_,\\n        address tokenB_,\\n        uint256 amountA_,\\n        uint256 amountB_,\\n        address router_\\n    ) private returns (uint256, uint256) {\\n        (uint256 reserveA, uint256 reserveB, ) = IUniswapV2Pair(lp).getReserves();\\n\\n        if (reserveA * amountB_ == reserveB * amountA_) {\\n            return (amountA_, amountB_);\\n        }\\n\\n        bool reverse = reserveA * amountB_ > reserveB * amountA_;\\n\\n        uint256 optimalSwapAmount = reverse\\n            ? calculateOptimalSwapAmount(amountB_, amountA_, reserveB, reserveA, router_)\\n            : calculateOptimalSwapAmount(amountA_, amountB_, reserveA, reserveB, router_);\\n\\n        address[] memory path = new address[](2);\\n        (path[0], path[1]) = reverse ? (tokenB_, tokenA_) : (tokenA_, tokenB_);\\n\\n        if (optimalSwapAmount > 0) {\\n            IERC20(path[0]).approve(router_, optimalSwapAmount);\\n\\n            uint256[] memory amountOuts = IUniswapV2Router02(router_).swapExactTokensForTokens(\\n                optimalSwapAmount,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            if (reverse) {\\n                amountA_ += amountOuts[amountOuts.length - 1];\\n                amountB_ -= optimalSwapAmount;\\n            } else {\\n                amountA_ -= optimalSwapAmount;\\n                amountB_ += amountOuts[amountOuts.length - 1];\\n            }\\n        }\\n\\n        return (amountA_, amountB_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { SwapInfo, LPSwapInfo, Token, TransferInfo, Router, SwapDetails, UnoSwapDetails, LpSwapDetails, WNativeSwapDetails, OutputLp, TransferDetails } from \\\"../common/Types.sol\\\";\\n\\nimport \\\"./IFeeModule.sol\\\";\\n\\ninterface ISwapHandler is IFeeModule {\\n    /* ========= EVENTS ========= */\\n\\n    event RoutersUpdated(address[] routers, Router[] details);\\n\\n    event TokensSwapped(address indexed sender, address indexed recipient, SwapInfo[] swapInfo, uint256[2] feeBps); // protocolFeeBps, projectFeeBPS\\n\\n    event LpSwapped(address indexed sender, address indexed recipient, LPSwapInfo swapInfo, uint256[2] feeBps);\\n\\n    event LiquidityAdded(\\n        address indexed sender,\\n        address indexed recipient,\\n        Token[] inputTokens, // both erc20 and lp\\n        address outputLp,\\n        uint256[3] returnAmounts, // outputLP, unspentAmount0, unspentAmount1\\n        uint256[2] feeBps\\n    );\\n\\n    event TokensTransferred(address indexed sender, TransferInfo[] details, uint256[2] feeBps);\\n\\n    /* ========= VIEWS ========= */\\n\\n    function calculateOptimalSwapAmount(\\n        uint256 amountA_,\\n        uint256 amountB_,\\n        uint256 reserveA_,\\n        uint256 reserveB_,\\n        address router_\\n    ) external view returns (uint256);\\n\\n    /* ========= RESTRICTED ========= */\\n\\n    function updateRouters(address[] calldata routers_, Router[] calldata routerDetails_) external;\\n\\n    /* ========= PUBLIC ========= */\\n\\n    function swapTokensToTokens(\\n        SwapDetails[] calldata data_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable;\\n\\n    function unoSwapTokensToTokens(\\n        UnoSwapDetails[] calldata swapData_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable;\\n\\n    function swapLpToTokens(\\n        LpSwapDetails[] calldata lpSwapDetails_,\\n        WNativeSwapDetails[] calldata wEthSwapDetails_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external;\\n\\n    function swapTokensToLp(\\n        SwapDetails[] calldata data_,\\n        LpSwapDetails[] calldata lpSwapDetails_,\\n        OutputLp calldata outputLpDetails_,\\n        address recipient_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable;\\n\\n    function batchTransfer(\\n        TransferDetails[] calldata data_,\\n        uint256 projectId_,\\n        uint256 nftId_\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"contracts/common/Types.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IAggregationExecutor.sol\\\";\\n\\nenum FeeType {\\n    BATCH_SWAP,\\n    BATCH_SWAP_LP,\\n    BATCH_TRANSFER\\n}\\n\\nstruct SwapDescription {\\n    IERC20 srcToken;\\n    IERC20 dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n    bytes permit;\\n}\\n\\nstruct LpSwapDetails {\\n    address router;\\n    address token;\\n    uint256 amount;\\n    bytes permit;\\n    address[] tokenAToPath;\\n    address[] tokenBToPath;\\n}\\n\\nstruct WNativeSwapDetails {\\n    address router;\\n    uint256 sizeBps; // weth %\\n    uint256 minReturnAmount;\\n    address[] nativeToOutputPath;\\n}\\n\\n// erc + native\\nstruct SwapDetails {\\n    IAggregationExecutor executor;\\n    SwapDescription desc;\\n    bytes routeData;\\n    bytes permit;\\n}\\n\\n// for direct swap using uniswap v2 forks\\n// even for wNative refund is in native\\n// even if dstToken is wNative, native token is given\\nstruct UnoSwapDetails {\\n    address router;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    address[] path;\\n    bytes permit;\\n}\\n\\nstruct OutputLp {\\n    address router;\\n    address lpToken;\\n    uint256 minReturnAmount;\\n    address[] nativeToToken0;\\n    address[] nativeToToken1;\\n}\\n\\nstruct TransferDetails {\\n    address recipient;\\n    InputTokenData[] data;\\n}\\n\\nstruct Token {\\n    address token;\\n    uint256 amount;\\n}\\n\\nstruct InputTokenData {\\n    IERC20 token;\\n    uint256 amount;\\n    bytes permit;\\n}\\n\\n// logs swapTokensToTokens unoSwapTokensToTokens\\nstruct SwapInfo {\\n    IERC20 srcToken;\\n    IERC20 dstToken;\\n    uint256 amount;\\n    uint256 returnAmount;\\n}\\n\\n// logs swapLpToTokens\\nstruct LPSwapInfo {\\n    Token[] lpInput; // srcToken, amount\\n    Token[] lpOutput; // dstToken, returnAmount\\n}\\n\\n// logs batchTransfer\\nstruct TransferInfo {\\n    address recipient;\\n    Token[] data;\\n}\\n\\nstruct Router {\\n    bool isSupported;\\n    uint256 fees;\\n}\\n\\nstruct NftData {\\n    uint256 discountedFeeBps;\\n    uint256 expiry;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { FeeType } from \\\"../common/Types.sol\\\";\\n\\ninterface IFeeModule {\\n    /* ========= EVENTS ========= */\\n\\n    event ProtocolFeeVaultUpdated();\\n\\n    event ProtocolFeeUpdated();\\n\\n    event ProjectAdded(uint256 indexed id);\\n\\n    event ProjectStatusDisabled(uint256 indexed id);\\n\\n    event ProjectFeeUpdated(uint256 indexed id);\\n\\n    event ProjectFeeVaultUpdated(uint256 indexed id);\\n\\n    /* ========= RESTRICTED ========= */\\n\\n    function updateProtocolFee(FeeType[] calldata feeTypes_, uint256[] calldata fees_) external;\\n\\n    function updateProtocolFeeVault(address newProtocolFeeVault_) external;\\n\\n    function addProject(uint256[3] calldata fees_, address feeVault_) external;\\n\\n    function disableProject(uint256 projectId_) external;\\n\\n    function updateProjectFee(\\n        uint256 projectId_,\\n        FeeType[] memory feeTypes_,\\n        uint256[] memory fees_\\n    ) external;\\n\\n    function updateProjectFeeVault(uint256 projectId_, address feeVault_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregationExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAggregationExecutor {\\n    /// @notice Make calls on `msgSender` with specified data\\n    function callBytes(address msgSender, bytes calldata data) external payable; // 0x2636f7f8\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Governable.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Governable is Context {\\n    address private _governance;\\n\\n    event GovernanceChanged(address indexed formerGov, address indexed newGov);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governance.\\n     */\\n    modifier onlyGovernance() {\\n        require(governance() == _msgSender(), \\\"DZG001\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governance.\\n     */\\n    constructor(address governance_) {\\n        require(governance_ != address(0), \\\"DZG002\\\");\\n        _governance = governance_;\\n        emit GovernanceChanged(address(0), governance_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current governance.\\n     */\\n    function governance() public view virtual returns (address) {\\n        return _governance;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newGov_`).\\n     * Can only be called by the current governance.\\n     */\\n    function changeGovernance(address newGov_) public virtual onlyGovernance {\\n        require(newGov_ != address(0), \\\"DZG002\\\");\\n        emit GovernanceChanged(_governance, newGov_);\\n        _governance = newGov_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DZapDiscountNft.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./../interfaces/IDZapDiscountNft.sol\\\";\\n\\nimport { NftData } from \\\"./../common/Types.sol\\\";\\n\\ncontract DZapDiscountNft is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply, IDZapDiscountNft {\\n    string public contractUri;\\n\\n    mapping(uint256 => NftData) public discountDetails;\\n    mapping(address => mapping(uint256 => uint256)) public minters;\\n\\n    uint256 public nextId = 1;\\n    uint256 private constant _BPS_MULTIPLIER = 100;\\n\\n    /* ========= CONSTRUCTOR ========= */\\n\\n    constructor(string memory baseUri_, string memory contractUri_) ERC1155(baseUri_) {\\n        contractUri = contractUri_;\\n    }\\n\\n    /* ========= VIEWS ========= */\\n\\n    function contractURI() public view returns (string memory) {\\n        return contractUri;\\n    }\\n\\n    function tokenURI(uint256 tokenId_) public view returns (string memory) {\\n        return string(abi.encodePacked(uri(0), Strings.toString(tokenId_), \\\".json\\\"));\\n    }\\n\\n    /* ========= FUNCTIONS ========= */\\n\\n    function setBaseURI(string memory newUri_) public onlyOwner {\\n        _setURI(newUri_);\\n    }\\n\\n    function setContractURI(string memory newContractUri_) public onlyOwner {\\n        contractUri = newContractUri_;\\n    }\\n\\n    function createNfts(NftData[] calldata nftData_) public onlyOwner {\\n        uint256 startingId = nextId;\\n\\n        for (uint256 i; i < nftData_.length; ++i) {\\n            NftData memory data = nftData_[i];\\n\\n            require(data.discountedFeeBps > 0 && data.discountedFeeBps <= 100 * _BPS_MULTIPLIER, \\\"DZN002\\\");\\n            require(data.expiry > block.timestamp, \\\"DZN003\\\");\\n\\n            discountDetails[nextId++] = data;\\n        }\\n\\n        emit Created(startingId, nftData_.length);\\n    }\\n\\n    function createAndMint(\\n        NftData[] calldata nftData_,\\n        address[] calldata to_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_\\n    ) public onlyOwner {\\n        createNfts(nftData_);\\n\\n        for (uint256 i; i < to_.length; ++i) {\\n            uint256 id = ids_[i];\\n            _isValidNft(id);\\n\\n            _mint(to_[i], id, amounts_[i], \\\"0x\\\");\\n        }\\n\\n        emit Minted(to_, ids_, amounts_);\\n    }\\n\\n    function approveMinter(\\n        address[] calldata minters_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_\\n    ) public onlyOwner {\\n        for (uint256 i; i < minters_.length; ++i) {\\n            _isValidNft(ids_[i]);\\n\\n            minters[minters_[i]][ids_[i]] += amounts_[i];\\n        }\\n\\n        emit MintersApproved(minters_, ids_, amounts_);\\n    }\\n\\n    function revokeMinter(address[] calldata minters_, uint256[] calldata ids_) public onlyOwner {\\n        for (uint256 i; i < minters_.length; ++i) {\\n            _isValidNft(ids_[i]);\\n\\n            minters[minters_[i]][ids_[i]] = 0;\\n        }\\n\\n        emit MintersRevoked(minters_, ids_);\\n    }\\n\\n    function mint(\\n        address[] calldata to_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_\\n    ) public {\\n        for (uint256 i; i < to_.length; ++i) {\\n            uint256 id = ids_[i];\\n            _isValidNft(id);\\n\\n            if (_msgSender() != owner()) {\\n                require(minters[_msgSender()][id] >= amounts_[i], \\\"DZN001\\\");\\n                minters[_msgSender()][id] -= amounts_[i];\\n            }\\n\\n            _mint(to_[i], id, amounts_[i], \\\"0x\\\");\\n        }\\n\\n        emit Minted(to_, ids_, amounts_);\\n    }\\n\\n    function mintBatch(\\n        address to_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_,\\n        bytes calldata data_\\n    ) public onlyOwner {\\n        for (uint256 i; i < ids_.length; ++i) {\\n            _isValidNft(ids_[i]);\\n        }\\n\\n        _mintBatch(to_, ids_, amounts_, data_);\\n\\n        emit BatchMinted(to_, ids_, amounts_);\\n    }\\n\\n    /* ========= INTERNAL/PRIVATE ========= */\\n\\n    function _isValidNft(uint256 id_) private view {\\n        require(id_ != 0 && id_ < nextId, \\\"DZN004\\\");\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function _beforeTokenTransfer(\\n        address operator_,\\n        address from,\\n        address to_,\\n        uint256[] memory ids_,\\n        uint256[] memory amounts_,\\n        bytes memory data_\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator_, from, to_, ids_, amounts_, data_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDZapDiscountNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { NftData } from \\\"./../common/Types.sol\\\";\\n\\ninterface IDZapDiscountNft {\\n    /* ========= EVENTS ========= */\\n\\n    event Created(uint256 starringId, uint256 noCreated);\\n    event MintersApproved(address[] minters, uint256[] ids, uint256[] amounts);\\n    event MintersRevoked(address[] minters, uint256[] ids);\\n    event Minted(address[] to, uint256[] ids, uint256[] amounts);\\n    event BatchMinted(address to, uint256[] ids, uint256[] amounts);\\n\\n    /* ========= VIEWS ========= */\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId_) external view returns (string memory);\\n\\n    /* ========= FUNCTIONS ========= */\\n\\n    function setBaseURI(string memory newUri_) external;\\n\\n    function setContractURI(string memory newContractUri_) external;\\n\\n    function createNfts(NftData[] calldata nftData_) external;\\n\\n    function approveMinter(\\n        address[] calldata minters_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_\\n    ) external;\\n\\n    function mint(\\n        address[] calldata to_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_\\n    ) external;\\n\\n    function mintBatch(\\n        address to_,\\n        uint256[] calldata ids_,\\n        uint256[] calldata amounts_,\\n        bytes calldata data_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregationRouterV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./IAggregationExecutor.sol\\\";\\n\\nimport { SwapDescription } from \\\"./../common/Types.sol\\\";\\n\\ninterface IAggregationRouterV4 {\\n    function swap(\\n        IAggregationExecutor caller,\\n        SwapDescription calldata desc,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 gasLeft);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWNATIVE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Permitable.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 https://www.dzap.io\\n    SPDX-License-Identifier: MIT\\n*/\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\n\\nabstract contract Permitable {\\n    function _permit(address token_, bytes memory permit_) internal {\\n        if (permit_.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit_.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token_.call(abi.encodePacked(IERC20Permit.permit.selector, permit_));\\n            } else if (permit_.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token_.call(abi.encodePacked(IDaiLikePermit.permit.selector, permit_));\\n            } else {\\n                revert(\\\"DZP001\\\");\\n            }\\n            require(success, \\\"DZP002\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"fees_\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"routers_\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"internalType\":\"struct Router[]\",\"name\":\"routerDetails_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregationRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wNative_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeVault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDiscountNft_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"formerGov\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"GovernanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Token[]\",\"name\":\"inputTokens\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputLp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"returnAmounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"feeBps\",\"type\":\"uint256[2]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token[]\",\"name\":\"lpInput\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token[]\",\"name\":\"lpOutput\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct LPSwapInfo\",\"name\":\"swapInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"feeBps\",\"type\":\"uint256[2]\"}],\"name\":\"LpSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProjectFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProjectFeeVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProjectStatusDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProtocolFeeVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Router[]\",\"name\":\"details\",\"type\":\"tuple[]\"}],\"name\":\"RoutersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SwapInfo[]\",\"name\":\"swapInfo\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"feeBps\",\"type\":\"uint256[2]\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct TransferInfo[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"feeBps\",\"type\":\"uint256[2]\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGGREGATION_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"fees_\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"feeVault_\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct InputTokenData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TransferDetails[]\",\"name\":\"data_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"calculateOptimalSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGov_\",\"type\":\"address\"}],\"name\":\"changeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"}],\"name\":\"disableProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDiscountNft\",\"outputs\":[{\"internalType\":\"contract DZapDiscountNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum FeeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"projectFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectFeeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FeeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"protocolFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"tokenAToPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenBToPath\",\"type\":\"address[]\"}],\"internalType\":\"struct LpSwapDetails[]\",\"name\":\"lpSwapDetails_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"nativeToOutputPath\",\"type\":\"address[]\"}],\"internalType\":\"struct WNativeSwapDetails[]\",\"name\":\"wEthSwapDetails_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"swapLpToTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"routeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapDetails[]\",\"name\":\"data_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"tokenAToPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenBToPath\",\"type\":\"address[]\"}],\"internalType\":\"struct LpSwapDetails[]\",\"name\":\"lpSwapDetails_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"nativeToToken0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"nativeToToken1\",\"type\":\"address[]\"}],\"internalType\":\"struct OutputLp\",\"name\":\"outputLpDetails_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"swapTokensToLp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"routeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapDetails[]\",\"name\":\"data_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"swapTokensToTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct UnoSwapDetails[]\",\"name\":\"swapData_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"unoSwapTokensToTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"enum FeeType[]\",\"name\":\"feeTypes_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees_\",\"type\":\"uint256[]\"}],\"name\":\"updateProjectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeVault_\",\"type\":\"address\"}],\"name\":\"updateProjectFeeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FeeType[]\",\"name\":\"feeTypes_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees_\",\"type\":\"uint256[]\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProtocolFeeVault_\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"routers_\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"internalType\":\"struct Router[]\",\"name\":\"routerDetails_\",\"type\":\"tuple[]\"}],\"name\":\"updateRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DZapAggregator", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000013cdd11d7c5cc00769f8bfd2ca102408d00ad4530000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000013cdd11d7c5cc00769f8bfd2ca102408d00ad45300000000000000000000000033174db98548ef366b8e156e02422731ede18b9d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}