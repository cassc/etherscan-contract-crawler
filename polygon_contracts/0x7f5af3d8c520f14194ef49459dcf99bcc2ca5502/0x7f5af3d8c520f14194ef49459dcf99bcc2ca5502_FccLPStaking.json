{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2022-10-08\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n}\r\n\r\ncontract FccLPStaking {\r\n    using SafeMath for uint256;\r\n    IERC20 public stakeToken;\r\n    IERC20 public rewardToken;\r\n    IERC20 public token3;\r\n\r\n    address payable public owner;\r\n\r\n    uint256 public maxStakeableToken;\r\n    uint256 public minimumStakeToken;\r\n    uint256 public totalUnStakedToken;\r\n    uint256 public totalStakedToken;\r\n    uint256 public totalClaimedRewardToken;\r\n    uint256 public totalStakers;\r\n    uint256 public percentDivider;\r\n    uint256 public totalFee;\r\n\r\n    //STAKING DURATION\r\n    uint256[4] public Duration = [30 days, 60 days, 90 days, 365 days];\r\n\r\n    //APY BONUS IN PERCENTAGE \r\n    uint256[4] public Bonus = [50, 120, 200, 1500];\r\n\r\n    struct Stake {\r\n        uint256 unstaketime;\r\n        uint256 staketime;\r\n        uint256 amount;\r\n        uint256 rewardTokenAmount;\r\n        uint256 reward;\r\n        uint256 lastharvesttime;\r\n        uint256 remainingreward;\r\n        uint256 harvestreward;\r\n        uint256 persecondreward;\r\n        bool withdrawan;\r\n        bool unstaked;\r\n    }\r\n\r\n    struct User {\r\n        uint256 totalStakedTokenUser;\r\n        uint256 totalUnstakedTokenUser;\r\n        uint256 totalClaimedRewardTokenUser;\r\n        uint256 stakeCount;\r\n        bool alreadyExists;\r\n    }\r\n\r\n    mapping(address => User) public Stakers;\r\n    mapping(uint256 => address) public StakersID;\r\n    mapping(address => mapping(uint256 => Stake)) public stakersRecord;\r\n    event STAKE(address Staker, uint256 amount);\r\n    event HARVEST(address Staker, uint256 amount);\r\n    event UNSTAKE(address Staker, uint256 amount);\r\n\r\n\r\n\r\n    modifier onlyowner() {\r\n        require(owner == msg.sender, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _owner, address token1, address token2) {\r\n        owner = _owner;\r\n        stakeToken = IERC20(token1);\r\n        rewardToken = IERC20(token2);\r\n        totalFee = 100;\r\n        maxStakeableToken = 1e15;\r\n        percentDivider = 1000;\r\n        minimumStakeToken = 1e11;\r\n    }\r\n\r\n    function stake(uint256 amount1, uint256 timeperiod) public {\r\n        require(timeperiod >= 0 && timeperiod <= 3, \"Invalid Time Period\");\r\n        require(amount1 >= minimumStakeToken, \"stake more than minimum amount\");\r\n        uint256 TKNVAL = getPriceinUSD();\r\n        uint256 amount = amount1.sub((amount1.mul(totalFee)).div(percentDivider));\r\n        uint256 rewardtokenPrice = (amount.mul(TKNVAL)).div(1e18);\r\n        if (!Stakers[msg.sender].alreadyExists) {\r\n            Stakers[msg.sender].alreadyExists = true;\r\n            StakersID[totalStakers] = msg.sender;\r\n            totalStakers++;\r\n        }\r\n\r\n        stakeToken.transferFrom(msg.sender, address(this), amount1);\r\n\r\n        uint256 index = Stakers[msg.sender].stakeCount;\r\n        Stakers[msg.sender].totalStakedTokenUser = Stakers[msg.sender]\r\n            .totalStakedTokenUser\r\n            .add(amount);\r\n        totalStakedToken = totalStakedToken.add(amount);\r\n        stakersRecord[msg.sender][index].unstaketime = block.timestamp.add(\r\n            Duration[timeperiod]\r\n        );\r\n        stakersRecord[msg.sender][index].staketime = block.timestamp;\r\n        stakersRecord[msg.sender][index].amount = amount;\r\n        stakersRecord[msg.sender][index].reward = rewardtokenPrice\r\n            .mul(Bonus[timeperiod])\r\n            .div(percentDivider);\r\n        stakersRecord[msg.sender][index].persecondreward = stakersRecord[\r\n            msg.sender\r\n        ][index].reward.div(Duration[timeperiod]);\r\n\r\n        stakersRecord[msg.sender][index].rewardTokenAmount = rewardtokenPrice;\r\n        stakersRecord[msg.sender][index].lastharvesttime = 0;\r\n        stakersRecord[msg.sender][index].remainingreward = stakersRecord[msg.sender][index].reward;\r\n        stakersRecord[msg.sender][index].harvestreward = 0;\r\n        Stakers[msg.sender].stakeCount++;\r\n\r\n        emit STAKE(msg.sender, amount);\r\n    }\r\n\r\n    function unstake(uint256 index) public {\r\n        require(!stakersRecord[msg.sender][index].unstaked, \"already unstaked\");\r\n        require(\r\n            stakersRecord[msg.sender][index].unstaketime < block.timestamp,\r\n            \"cannot unstake after before duration\"\r\n        );\r\n\r\n        if(!stakersRecord[msg.sender][index].withdrawan){\r\n            harvest(index);\r\n        }\r\n        stakersRecord[msg.sender][index].unstaked = true;\r\n\r\n        stakeToken.transfer(\r\n            msg.sender,\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n        \r\n        totalUnStakedToken = totalUnStakedToken.add(\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n        Stakers[msg.sender].totalUnstakedTokenUser = Stakers[msg.sender]\r\n            .totalUnstakedTokenUser\r\n            .add(stakersRecord[msg.sender][index].amount);\r\n\r\n        emit UNSTAKE(\r\n            msg.sender,\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n    }\r\n\r\n    function harvest(uint256 index) public {\r\n        require(\r\n            !stakersRecord[msg.sender][index].withdrawan,\r\n            \"already withdrawan\"\r\n        );\r\n        require(!stakersRecord[msg.sender][index].unstaked, \"already unstaked\");\r\n        uint256 rewardTillNow;\r\n        uint256 commontimestamp;\r\n        (rewardTillNow,commontimestamp) = realtimeRewardPerBlock(msg.sender , index);\r\n        stakersRecord[msg.sender][index].lastharvesttime =  commontimestamp;\r\n        rewardToken.transfer(\r\n            msg.sender,\r\n            rewardTillNow\r\n        );\r\n        totalClaimedRewardToken = totalClaimedRewardToken.add(\r\n            rewardTillNow\r\n        );\r\n        stakersRecord[msg.sender][index].remainingreward = stakersRecord[msg.sender][index].remainingreward.sub(rewardTillNow);\r\n        stakersRecord[msg.sender][index].harvestreward = stakersRecord[msg.sender][index].harvestreward.add(rewardTillNow);\r\n        Stakers[msg.sender].totalClaimedRewardTokenUser = Stakers[msg.sender]\r\n            .totalClaimedRewardTokenUser\r\n            .add(rewardTillNow);\r\n\r\n        if(stakersRecord[msg.sender][index].harvestreward == stakersRecord[msg.sender][index].reward){\r\n            stakersRecord[msg.sender][index].withdrawan = true;\r\n\r\n        }\r\n\r\n        emit HARVEST(\r\n            msg.sender,\r\n            rewardTillNow\r\n        );\r\n    }\r\n\r\n    function getPriceinUSD() public view returns (uint256){\r\n        \r\n        address BUSD_WBNB = 0x5b41EEDCfC8e0AE47493d4945Aa1AE4fe05430ff; //BUSD_WBNB pancake pool address\r\n        IERC20 BUSDTOKEN = IERC20(0xc2132D05D31c914a87C6611C10748AEb04B58e8F); // BUSD Token address\r\n        IERC20 WBNBTOKEN = IERC20(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270); // WBNB Token address\r\n        uint256 BUSDSUPPLYINBUSD_WBNB = BUSDTOKEN.balanceOf(BUSD_WBNB);\r\n        uint256 WBNBSUPPLYINBUSD_WBNB = WBNBTOKEN.balanceOf(BUSD_WBNB);\r\n        uint256 BNBPRICE = (BUSDSUPPLYINBUSD_WBNB.mul(1e18)).div(WBNBSUPPLYINBUSD_WBNB);\r\n        address TKN_WBNB = 0x7D1E0837dfA28E3080f8e137d0EB5f8Fca9A997C; // TKN_WBNB pancake pool address\r\n        IERC20 TKNTOKEN = IERC20(0xb6C3C00D730ACcA326dB40e418353f04f7444e2B); // TKN Token address \r\n        uint256 WBNBSUPPLYINTKN_WBNB =(WBNBTOKEN.balanceOf(TKN_WBNB));\r\n        uint256 TKNSUPPLYINTKN_WBNB = (TKNTOKEN.balanceOf(TKN_WBNB));\r\n        uint256 TKNUSDVAL = (((WBNBSUPPLYINTKN_WBNB.mul(1e18)).div((TKNSUPPLYINTKN_WBNB))).mul(BNBPRICE)).div(1e18);\r\n        return TKNUSDVAL;\r\n    }\r\n\r\n    function realtimeRewardPerBlock(address user, uint256 blockno) public view returns (uint256,uint256) {\r\n        uint256 ret;\r\n        uint256 commontimestamp;\r\n            if (\r\n                !stakersRecord[user][blockno].withdrawan &&\r\n                !stakersRecord[user][blockno].unstaked\r\n            ) {\r\n                uint256 val;\r\n                uint256 tempharvesttime = stakersRecord[user][blockno].lastharvesttime;\r\n                commontimestamp = block.timestamp;\r\n                if(tempharvesttime == 0){\r\n                    tempharvesttime = stakersRecord[user][blockno].staketime;\r\n                }\r\n                val = commontimestamp - tempharvesttime;\r\n                val = val.mul(stakersRecord[user][blockno].persecondreward);\r\n                if (val < stakersRecord[user][blockno].remainingreward) {\r\n                    ret += val;\r\n                } else {\r\n                    ret += stakersRecord[user][blockno].remainingreward;\r\n                }\r\n            }\r\n        return (ret,commontimestamp);\r\n    }\r\n\r\n    function realtimeReward(address user) public view returns (uint256) {\r\n        uint256 ret;\r\n        for (uint256 i; i < Stakers[user].stakeCount; i++) {\r\n            if (\r\n                !stakersRecord[user][i].withdrawan &&\r\n                !stakersRecord[user][i].unstaked\r\n            ) {\r\n                uint256 val;\r\n                val = block.timestamp - stakersRecord[user][i].staketime;\r\n                val = val.mul(stakersRecord[user][i].persecondreward);\r\n                if (val < stakersRecord[user][i].reward) {\r\n                    ret += val;\r\n                } else {\r\n                    ret += stakersRecord[user][i].reward;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n\r\n    function SetStakeLimits(uint256 _min, uint256 _max) external onlyowner {\r\n        minimumStakeToken = _min;\r\n        maxStakeableToken = _max;\r\n    }\r\n    function SetTotalFees(uint256 _fee) external onlyowner {\r\n        totalFee = _fee;\r\n    }\r\n\r\n    function SetStakeDuration(\r\n        uint256 first,\r\n        uint256 second,\r\n        uint256 third,\r\n        uint256 fourth\r\n    ) external onlyowner {\r\n        Duration[0] = first;\r\n        Duration[1] = second;\r\n        Duration[2] = third;\r\n        Duration[3] = fourth;\r\n    }\r\n\r\n    function SetStakeBonus(\r\n        uint256 first,\r\n        uint256 second,\r\n        uint256 third,\r\n        uint256 fourth\r\n    ) external onlyowner {\r\n        Bonus[0] = first;\r\n        Bonus[1] = second;\r\n        Bonus[2] = third;\r\n        Bonus[3] = fourth;\r\n    }\r\n\r\n\r\n    function withdrawBNB() public onlyowner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"does not have any balance\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function initToken(address addr) public onlyowner{\r\n        token3 = IERC20(addr);\r\n    }\r\n    function withdrawToken(uint256 amount) public onlyowner {\r\n        token3.transfer(msg.sender\r\n        , amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HARVEST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UNSTAKE\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fourth\",\"type\":\"uint256\"}],\"name\":\"SetStakeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fourth\",\"type\":\"uint256\"}],\"name\":\"SetStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"SetStakeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetTotalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnstakedTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewardTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StakersID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceinUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"initToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"realtimeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockno\",\"type\":\"uint256\"}],\"name\":\"realtimeRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeperiod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstaketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastharvesttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"persecondreward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawan\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token3\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FccLPStaking", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a571022e535a7046a2befba418237b5e659ac7bd000000000000000000000000b6c3c00d730acca326db40e418353f04f7444e2b000000000000000000000000958d208cdf087843e9ad98d23823d32e17d723a1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f934c5eb6621a05e27d90402174ffc39bf87adc9c6bf62ea501be0f2ae1bb78"}