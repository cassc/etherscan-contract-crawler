{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KraksV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nstruct Challenge {\\n    string challengeType;\\n    string ownerId;\\n    uint balance;\\n    uint totalBet;\\n    bool isSet;\\n    bool isClosed;\\n}\\n\\ncontract KraksV4 is Ownable {\\n    uint public KRAKS_FEE = 3;\\n    bool public challengesActive = true;\\n    address private tokenAddress = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address private ceoAddress = 0xaD2b2504C8bc7ed7981FC4d21bde7F8CC0e87518;\\n\\n    mapping (string => Challenge) public challengeInfo;\\n    mapping (string => mapping (string => bool)) public userInChallenge;\\n    mapping (string => mapping (string => uint)) public userPaidAmountInChallenge;\\n    mapping (string => mapping (string => address)) public userInChallengeWallet;\\n    mapping (string => mapping (string => bool)) public userHasPaidChallenge;\\n    mapping (string => string[]) public challengeUsers;\\n\\n    modifier validChallenge(string calldata challengeId_) {\\n        require(challengeInfo[challengeId_].isSet, \\\"Challenge does not exist.\\\");\\n        require(!challengeInfo[challengeId_].isClosed, \\\"Challenge is closed.\\\");\\n        _;\\n    }\\n\\n    modifier contractActive() {\\n        require(challengesActive, \\\"Contract is not active.\\\");\\n        _;\\n    }\\n\\n    function createChallenge(\\n        string calldata challengeId_,\\n        string calldata ownerId_,\\n        address ownerWallet_,\\n        string calldata challengeType_,\\n        uint amount_\\n    ) external contractActive onlyOwner {\\n        Challenge memory challenge = challengeInfo[challengeId_];\\n        amount_ = amount_ * 1000000 wei;\\n\\n        require (!challenge.isSet, \\\"Challenge already exists.\\\");\\n\\n        challenge.challengeType = challengeType_;\\n        challenge.ownerId = ownerId_;\\n        challenge.isSet = true;\\n        challengeInfo[challengeId_] = challenge;\\n\\n        _payAndAddUserToChallenge(challengeId_, ownerId_, amount_, ownerWallet_);\\n    }\\n\\n    function joinToChallenge(\\n        string calldata challengeId_,\\n        string calldata userId_,\\n        address userWallet_,\\n        uint amount_\\n    ) public contractActive onlyOwner {\\n        amount_ = amount_ * 1000000 wei;\\n\\n        require(!userInChallenge[challengeId_][userId_], \\\"User is already in challenge.\\\");\\n        require(!challengeInfo[challengeId_].isClosed, \\\"Challenge is closed.\\\");\\n\\n        _payAndAddUserToChallenge(challengeId_, userId_, amount_, userWallet_);\\n    }\\n\\n    function _payAndAddUserToChallenge(\\n        string calldata challengeId_,\\n        string calldata userId_,\\n        uint amount_,\\n        address wallet_\\n    ) internal {\\n        IERC20(tokenAddress).transferFrom(wallet_, address(this), amount_);\\n        challengeInfo[challengeId_].balance += amount_;\\n        challengeInfo[challengeId_].totalBet += amount_;\\n        userInChallengeWallet[challengeId_][userId_] = wallet_;\\n        userPaidAmountInChallenge[challengeId_][userId_] = amount_;\\n\\n        userInChallenge[challengeId_][userId_] = true;\\n        challengeUsers[challengeId_].push(userId_);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function _validateWinnersInChallenge(\\n        string calldata challengeId_,\\n        string[] memory winners_\\n    ) internal view returns (bool) {\\n        for (uint i = 0; i < winners_.length; i++) {\\n            if (userInChallenge[challengeId_][winners_[i]]) {\\n                continue;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function closeChallengeAndSendRewards(\\n        string calldata challengeId_,\\n        string[] memory winners_\\n    ) external onlyOwner validChallenge(challengeId_) contractActive {\\n        require(_validateWinnersInChallenge(challengeId_, winners_), \\\"List has invalid winners.\\\");\\n        IERC20(tokenAddress).transfer(ceoAddress, challengeInfo[challengeId_].totalBet*KRAKS_FEE/100);\\n        challengeInfo[challengeId_].balance -= challengeInfo[challengeId_].totalBet*KRAKS_FEE/100;\\n        for (uint i = 0; i < winners_.length; i++) {\\n            IERC20(tokenAddress).transfer(userInChallengeWallet[challengeId_][winners_[i]], (challengeInfo[challengeId_].totalBet*(100-KRAKS_FEE)/100)/winners_.length);\\n            challengeInfo[challengeId_].balance -= (challengeInfo[challengeId_].totalBet*(100-KRAKS_FEE)/100)/winners_.length;\\n        }\\n        challengeInfo[challengeId_].isClosed = true;\\n    }\\n\\n    function closeChallenge(\\n        string calldata challengeId_\\n    ) external onlyOwner validChallenge(challengeId_) contractActive {\\n        string[] memory challengeUsersList = challengeUsers[challengeId_];\\n\\n        require(challengeUsersList.length > 0, \\\"Cannot return money on a challenge with no users.\\\");\\n\\n        for (uint i = 0; i < challengeUsersList.length; i++) {\\n            uint amountForUser = userPaidAmountInChallenge[challengeId_][challengeUsersList[i]];\\n            IERC20(tokenAddress).transfer(ceoAddress, amountForUser*KRAKS_FEE/100);\\n            IERC20(tokenAddress).transfer(userInChallengeWallet[challengeId_][challengeUsersList[i]], amountForUser*(100-KRAKS_FEE)/100);\\n            challengeInfo[challengeId_].balance -= amountForUser;\\n        }\\n\\n        challengeInfo[challengeId_].isClosed = true;\\n    }\\n\\n    // Management Section\\n\\n    function flipChallengesActive() external onlyOwner {\\n        challengesActive = !challengesActive;\\n    }\\n\\n    function updateKraksFee(\\n        uint fee_\\n    ) external onlyOwner {\\n        KRAKS_FEE = fee_;\\n    }\\n\\n    function updateCeoAddress(\\n        address ceoAddress_\\n    ) external onlyOwner {\\n        ceoAddress = ceoAddress_;\\n    }\\n\\n    function withdrawClosedChallengeBalance(\\n        string calldata challengeId_\\n    ) external onlyOwner {\\n        require(challengeInfo[challengeId_].isClosed, \\\"Can only call this function if challenge is closed.\\\");\\n        require(challengeInfo[challengeId_].balance > 0, \\\"Cannot withdraw funds from a challenge with no balance.\\\");\\n        IERC20(tokenAddress).transfer(ceoAddress, challengeInfo[challengeId_].balance);\\n        challengeInfo[challengeId_].balance = 0;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KRAKS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"challengeInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"challengeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeUsers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challengeId_\",\"type\":\"string\"}],\"name\":\"closeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challengeId_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"winners_\",\"type\":\"string[]\"}],\"name\":\"closeChallengeAndSendRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challengeId_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerId_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerWallet_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"challengeType_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipChallengesActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challengeId_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userId_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userWallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"joinToChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ceoAddress_\",\"type\":\"address\"}],\"name\":\"updateCeoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"updateKraksFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userHasPaidChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userInChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userInChallengeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userPaidAmountInChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challengeId_\",\"type\":\"string\"}],\"name\":\"withdrawClosedChallengeBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KraksV4", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5a1b59537e46faa69768b7ccb11f6a5f840d580294ebfdc6ae82d7be6512e6d9"}