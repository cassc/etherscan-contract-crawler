{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: operator-filter-registry/src/lib/Constants.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\r\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\r\n\r\n// File: operator-filter-registry/src/IOperatorFilterRegistry.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IOperatorFilterRegistry {\r\n    /**\r\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\r\n     *         true if supplied registrant address is not registered.\r\n     */\r\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\r\n     */\r\n    function register(address registrant) external;\r\n\r\n    /**\r\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\r\n     */\r\n    function registerAndSubscribe(address registrant, address subscription) external;\r\n\r\n    /**\r\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\r\n     *         address without subscribing.\r\n     */\r\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\r\n\r\n    /**\r\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\r\n     *         Note that this does not remove any filtered addresses or codeHashes.\r\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\r\n     */\r\n    function unregister(address addr) external;\r\n\r\n    /**\r\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\r\n     */\r\n    function updateOperator(address registrant, address operator, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\r\n     */\r\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\r\n     */\r\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\r\n     */\r\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\r\n     *         subscription if present.\r\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\r\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\r\n     *         used.\r\n     */\r\n    function subscribe(address registrant, address registrantToSubscribe) external;\r\n\r\n    /**\r\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\r\n     */\r\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n\r\n    /**\r\n     * @notice Get the subscription address of a given registrant, if any.\r\n     */\r\n    function subscriptionOf(address addr) external returns (address registrant);\r\n\r\n    /**\r\n     * @notice Get the set of addresses subscribed to a given registrant.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function subscribers(address registrant) external returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function subscriberAt(address registrant, uint256 index) external returns (address);\r\n\r\n    /**\r\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\r\n     */\r\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\r\n\r\n    /**\r\n     * @notice Returns true if operator is filtered by a given address or its subscription.\r\n     */\r\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\r\n     */\r\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\r\n     */\r\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns a list of filtered operators for a given address or its subscription.\r\n     */\r\n    function filteredOperators(address addr) external returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\r\n\r\n    /**\r\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\r\n     *         its subscription.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\r\n\r\n    /**\r\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\r\n     *         its subscription.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\r\n\r\n    /**\r\n     * @notice Returns true if an address has registered\r\n     */\r\n    function isRegistered(address addr) external returns (bool);\r\n\r\n    /**\r\n     * @dev Convenience method to compute the code hash of an arbitrary contract\r\n     */\r\n    function codeHashOf(address addr) external returns (bytes32);\r\n}\r\n\r\n// File: operator-filter-registry/src/OperatorFilterer.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n/**\r\n * @title  OperatorFilterer\r\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\r\n *         registrant's entries in the OperatorFilterRegistry.\r\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\r\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\r\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\r\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\r\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\r\n *         will be locked to the options set during construction.\r\n */\r\n\r\nabstract contract OperatorFilterer {\r\n    /// @dev Emitted when an operator is not allowed.\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\r\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\r\n\r\n    /// @dev The constructor that is called when the contract is being deployed.\r\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n        // order for the modifier to filter addresses.\r\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n            if (subscribe) {\r\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n            } else {\r\n                if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A helper function to check if an operator is allowed.\r\n     */\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        // Allow spending tokens from addresses with balance\r\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n        // from an EOA.\r\n        if (from != msg.sender) {\r\n            _checkFilterOperator(msg.sender);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev A helper function to check if an operator approval is allowed.\r\n     */\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        _checkFilterOperator(operator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev A helper function to check if an operator is allowed.\r\n     */\r\n    function _checkFilterOperator(address operator) internal view virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\r\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\r\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\r\n                revert OperatorNotAllowed(operator);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: operator-filter-registry/src/DefaultOperatorFilterer.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n/**\r\n * @title  DefaultOperatorFilterer\r\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\r\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\r\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\r\n *         will be locked to the options set during construction.\r\n */\r\n\r\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\r\n    /// @dev The constructor that is called when the contract is being deployed.\r\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: seadrop-main/src/lib/SeaDropStructs.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @notice A struct defining public drop data.\r\n *         Designed to fit efficiently in one storage slot.\r\n * \r\n * @param mintPrice                The mint price per token. (Up to 1.2m\r\n *                                 of native token, e.g. ETH, MATIC)\r\n * @param startTime                The start time, ensure this is not zero.\r\n * @param endTIme                  The end time, ensure this is not zero.\r\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\r\n *                                 allowed. (The limit for this field is\r\n *                                 2^16 - 1)\r\n * @param feeBps                   Fee out of 10_000 basis points to be\r\n *                                 collected.\r\n * @param restrictFeeRecipients    If false, allow any fee recipient;\r\n *                                 if true, check fee recipient is allowed.\r\n */\r\nstruct PublicDrop {\r\n    uint80 mintPrice; // 80/256 bits\r\n    uint48 startTime; // 128/256 bits\r\n    uint48 endTime; // 176/256 bits\r\n    uint16 maxTotalMintableByWallet; // 224/256 bits\r\n    uint16 feeBps; // 240/256 bits\r\n    bool restrictFeeRecipients; // 248/256 bits\r\n}\r\n\r\n/**\r\n * @notice A struct defining token gated drop stage data.\r\n *         Designed to fit efficiently in one storage slot.\r\n * \r\n * @param mintPrice                The mint price per token. (Up to 1.2m \r\n *                                 of native token, e.g.: ETH, MATIC)\r\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\r\n *                                 allowed. (The limit for this field is\r\n *                                 2^16 - 1)\r\n * @param startTime                The start time, ensure this is not zero.\r\n * @param endTime                  The end time, ensure this is not zero.\r\n * @param dropStageIndex           The drop stage index to emit with the event\r\n *                                 for analytical purposes. This should be \r\n *                                 non-zero since the public mint emits\r\n *                                 with index zero.\r\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\r\n *                                 mint within. (The limit for this field is\r\n *                                 2^16 - 1)\r\n * @param feeBps                   Fee out of 10_000 basis points to be\r\n *                                 collected.\r\n * @param restrictFeeRecipients    If false, allow any fee recipient;\r\n *                                 if true, check fee recipient is allowed.\r\n */\r\nstruct TokenGatedDropStage {\r\n    uint80 mintPrice; // 80/256 bits\r\n    uint16 maxTotalMintableByWallet; // 96/256 bits\r\n    uint48 startTime; // 144/256 bits\r\n    uint48 endTime; // 192/256 bits\r\n    uint8 dropStageIndex; // non-zero. 200/256 bits\r\n    uint32 maxTokenSupplyForStage; // 232/256 bits\r\n    uint16 feeBps; // 248/256 bits\r\n    bool restrictFeeRecipients; // 256/256 bits\r\n}\r\n\r\n/**\r\n * @notice A struct defining mint params for an allow list.\r\n *         An allow list leaf will be composed of `msg.sender` and\r\n *         the following params.\r\n * \r\n *         Note: Since feeBps is encoded in the leaf, backend should ensure\r\n *         that feeBps is acceptable before generating a proof.\r\n * \r\n * @param mintPrice                The mint price per token.\r\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\r\n *                                 allowed.\r\n * @param startTime                The start time, ensure this is not zero.\r\n * @param endTime                  The end time, ensure this is not zero.\r\n * @param dropStageIndex           The drop stage index to emit with the event\r\n *                                 for analytical purposes. This should be\r\n *                                 non-zero since the public mint emits with\r\n *                                 index zero.\r\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\r\n *                                 mint within.\r\n * @param feeBps                   Fee out of 10_000 basis points to be\r\n *                                 collected.\r\n * @param restrictFeeRecipients    If false, allow any fee recipient;\r\n *                                 if true, check fee recipient is allowed.\r\n */\r\nstruct MintParams {\r\n    uint256 mintPrice; \r\n    uint256 maxTotalMintableByWallet;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 dropStageIndex; // non-zero\r\n    uint256 maxTokenSupplyForStage;\r\n    uint256 feeBps;\r\n    bool restrictFeeRecipients;\r\n}\r\n\r\n/**\r\n * @notice A struct defining token gated mint params.\r\n * \r\n * @param allowedNftToken    The allowed nft token contract address.\r\n * @param allowedNftTokenIds The token ids to redeem.\r\n */\r\nstruct TokenGatedMintParams {\r\n    address allowedNftToken;\r\n    uint256[] allowedNftTokenIds;\r\n}\r\n\r\n/**\r\n * @notice A struct defining allow list data (for minting an allow list).\r\n * \r\n * @param merkleRoot    The merkle root for the allow list.\r\n * @param publicKeyURIs If the allowListURI is encrypted, a list of URIs\r\n *                      pointing to the public keys. Empty if unencrypted.\r\n * @param allowListURI  The URI for the allow list.\r\n */\r\nstruct AllowListData {\r\n    bytes32 merkleRoot;\r\n    string[] publicKeyURIs;\r\n    string allowListURI;\r\n}\r\n\r\n/**\r\n * @notice A struct defining minimum and maximum parameters to validate for \r\n *         signed mints, to minimize negative effects of a compromised signer.\r\n *\r\n * @param minMintPrice                The minimum mint price allowed.\r\n * @param maxMaxTotalMintableByWallet The maximum total number of mints allowed\r\n *                                    by a wallet.\r\n * @param minStartTime                The minimum start time allowed.\r\n * @param maxEndTime                  The maximum end time allowed.\r\n * @param maxMaxTokenSupplyForStage   The maximum token supply allowed.\r\n * @param minFeeBps                   The minimum fee allowed.\r\n * @param maxFeeBps                   The maximum fee allowed.\r\n */\r\nstruct SignedMintValidationParams {\r\n    uint80 minMintPrice; // 80/256 bits\r\n    uint24 maxMaxTotalMintableByWallet; // 104/256 bits\r\n    uint40 minStartTime; // 144/256 bits\r\n    uint40 maxEndTime; // 184/256 bits\r\n    uint40 maxMaxTokenSupplyForStage; // 224/256 bits\r\n    uint16 minFeeBps; // 240/256 bits\r\n    uint16 maxFeeBps; // 256/256 bits\r\n}\r\n// File: seadrop-main/src/lib/ERC721SeaDropStructsErrorsAndEvents.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\ninterface ERC721SeaDropStructsErrorsAndEvents {\r\n  /**\r\n   * @notice Revert with an error if mint exceeds the max supply.\r\n   */\r\n  error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\r\n\r\n  /**\r\n   * @notice Revert with an error if the number of token gated \r\n   *         allowedNftTokens doesn't match the length of supplied\r\n   *         drop stages.\r\n   */\r\n  error TokenGatedMismatch();\r\n\r\n  /**\r\n   *  @notice Revert with an error if the number of signers doesn't match\r\n   *          the length of supplied signedMintValidationParams\r\n   */\r\n  error SignersMismatch();\r\n\r\n  /**\r\n   * @notice An event to signify that a SeaDrop token contract was deployed.\r\n   */\r\n  event SeaDropTokenDeployed();\r\n\r\n  /**\r\n   * @notice A struct to configure multiple contract options at a time.\r\n   */\r\n  struct MultiConfigureStruct {\r\n    uint256 maxSupply;\r\n    string baseURI;\r\n    string contractURI;\r\n    address seaDropImpl;\r\n    PublicDrop publicDrop;\r\n    string dropURI;\r\n    AllowListData allowListData;\r\n    address creatorPayoutAddress;\r\n    bytes32 provenanceHash;\r\n\r\n    address[] allowedFeeRecipients;\r\n    address[] disallowedFeeRecipients;\r\n\r\n    address[] allowedPayers;\r\n    address[] disallowedPayers;\r\n\r\n    // Token-gated\r\n    address[] tokenGatedAllowedNftTokens;\r\n    TokenGatedDropStage[] tokenGatedDropStages;\r\n    address[] disallowedTokenGatedAllowedNftTokens;\r\n\r\n    // Server-signed\r\n    address[] signers;\r\n    SignedMintValidationParams[] signedMintValidationParams;\r\n    address[] disallowedSigners;\r\n  }\r\n}\r\n// File: seadrop-main/src/lib/SeaDropErrorsAndEvents.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\ninterface SeaDropErrorsAndEvents {\r\n    /**\r\n     * @dev Revert with an error if the drop stage is not active.\r\n     */\r\n    error NotActive(\r\n        uint256 currentTimestamp,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error if the mint quantity is zero.\r\n     */\r\n    error MintQuantityCannotBeZero();\r\n\r\n    /**\r\n     * @dev Revert with an error if the mint quantity exceeds the max allowed\r\n     *      to be minted per wallet.\r\n     */\r\n    error MintQuantityExceedsMaxMintedPerWallet(uint256 total, uint256 allowed);\r\n\r\n    /**\r\n     * @dev Revert with an error if the mint quantity exceeds the max token\r\n     *      supply.\r\n     */\r\n    error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\r\n\r\n    /**\r\n     * @dev Revert with an error if the mint quantity exceeds the max token\r\n     *      supply for the stage.\r\n     *      Note: The `maxTokenSupplyForStage` for public mint is\r\n     *      always `type(uint).max`.\r\n     */\r\n    error MintQuantityExceedsMaxTokenSupplyForStage(\r\n        uint256 total, \r\n        uint256 maxTokenSupplyForStage\r\n    );\r\n    \r\n    /**\r\n     * @dev Revert if the fee recipient is the zero address.\r\n     */\r\n    error FeeRecipientCannotBeZeroAddress();\r\n\r\n    /**\r\n     * @dev Revert if the fee recipient is not already included.\r\n     */\r\n    error FeeRecipientNotPresent();\r\n\r\n    /**\r\n     * @dev Revert if the fee basis points is greater than 10_000.\r\n     */\r\n    error InvalidFeeBps(uint256 feeBps);\r\n\r\n    /**\r\n     * @dev Revert if the fee recipient is already included.\r\n     */\r\n    error DuplicateFeeRecipient();\r\n\r\n    /**\r\n     * @dev Revert if the fee recipient is restricted and not allowed.\r\n     */\r\n    error FeeRecipientNotAllowed();\r\n\r\n    /**\r\n     * @dev Revert if the creator payout address is the zero address.\r\n     */\r\n    error CreatorPayoutAddressCannotBeZeroAddress();\r\n\r\n    /**\r\n     * @dev Revert with an error if the received payment is incorrect.\r\n     */\r\n    error IncorrectPayment(uint256 got, uint256 want);\r\n\r\n    /**\r\n     * @dev Revert with an error if the allow list proof is invalid.\r\n     */\r\n    error InvalidProof();\r\n\r\n    /**\r\n     * @dev Revert if a supplied signer address is the zero address.\r\n     */\r\n    error SignerCannotBeZeroAddress();\r\n\r\n    /**\r\n     * @dev Revert with an error if signer's signature is invalid.\r\n     */\r\n    error InvalidSignature(address recoveredSigner);\r\n\r\n    /**\r\n     * @dev Revert with an error if a signer is not included in\r\n     *      the enumeration when removing.\r\n     */\r\n    error SignerNotPresent();\r\n\r\n    /**\r\n     * @dev Revert with an error if a payer is not included in\r\n     *      the enumeration when removing.\r\n     */\r\n    error PayerNotPresent();\r\n\r\n    /**\r\n     * @dev Revert with an error if a payer is already included in mapping\r\n     *      when adding.\r\n     *      Note: only applies when adding a single payer, as duplicates in\r\n     *      enumeration can be removed with updatePayer.\r\n     */\r\n    error DuplicatePayer();\r\n\r\n    /**\r\n     * @dev Revert with an error if the payer is not allowed. The minter must\r\n     *      pay for their own mint.\r\n     */\r\n    error PayerNotAllowed();\r\n\r\n    /**\r\n     * @dev Revert if a supplied payer address is the zero address.\r\n     */\r\n    error PayerCannotBeZeroAddress();\r\n\r\n    /**\r\n     * @dev Revert with an error if the sender does not\r\n     *      match the INonFungibleSeaDropToken interface.\r\n     */\r\n    error OnlyINonFungibleSeaDropToken(address sender);\r\n\r\n    /**\r\n     * @dev Revert with an error if the sender of a token gated supplied\r\n     *      drop stage redeem is not the owner of the token.\r\n     */\r\n    error TokenGatedNotTokenOwner(\r\n        address nftContract,\r\n        address allowedNftToken,\r\n        uint256 allowedNftTokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error if the token id has already been used to\r\n     *      redeem a token gated drop stage.\r\n     */\r\n    error TokenGatedTokenIdAlreadyRedeemed(\r\n        address nftContract,\r\n        address allowedNftToken,\r\n        uint256 allowedNftTokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error if an empty TokenGatedDropStage is provided\r\n     *      for an already-empty TokenGatedDropStage.\r\n     */\r\n     error TokenGatedDropStageNotPresent();\r\n\r\n    /**\r\n     * @dev Revert with an error if an allowedNftToken is set to\r\n     *      the zero address.\r\n     */\r\n     error TokenGatedDropAllowedNftTokenCannotBeZeroAddress();\r\n\r\n    /**\r\n     * @dev Revert with an error if an allowedNftToken is set to\r\n     *      the drop token itself.\r\n     */\r\n     error TokenGatedDropAllowedNftTokenCannotBeDropToken();\r\n\r\n\r\n    /**\r\n     * @dev Revert with an error if supplied signed mint price is less than\r\n     *      the minimum specified.\r\n     */\r\n    error InvalidSignedMintPrice(uint256 got, uint256 minimum);\r\n\r\n    /**\r\n     * @dev Revert with an error if supplied signed maxTotalMintableByWallet\r\n     *      is greater than the maximum specified.\r\n     */\r\n    error InvalidSignedMaxTotalMintableByWallet(uint256 got, uint256 maximum);\r\n\r\n    /**\r\n     * @dev Revert with an error if supplied signed start time is less than\r\n     *      the minimum specified.\r\n     */\r\n    error InvalidSignedStartTime(uint256 got, uint256 minimum);\r\n    \r\n    /**\r\n     * @dev Revert with an error if supplied signed end time is greater than\r\n     *      the maximum specified.\r\n     */\r\n    error InvalidSignedEndTime(uint256 got, uint256 maximum);\r\n\r\n    /**\r\n     * @dev Revert with an error if supplied signed maxTokenSupplyForStage\r\n     *      is greater than the maximum specified.\r\n     */\r\n     error InvalidSignedMaxTokenSupplyForStage(uint256 got, uint256 maximum);\r\n    \r\n     /**\r\n     * @dev Revert with an error if supplied signed feeBps is greater than\r\n     *      the maximum specified, or less than the minimum.\r\n     */\r\n    error InvalidSignedFeeBps(uint256 got, uint256 minimumOrMaximum);\r\n\r\n    /**\r\n     * @dev Revert with an error if signed mint did not specify to restrict\r\n     *      fee recipients.\r\n     */\r\n    error SignedMintsMustRestrictFeeRecipients();\r\n\r\n    /**\r\n     * @dev Revert with an error if a signature for a signed mint has already\r\n     *      been used.\r\n     */\r\n    error SignatureAlreadyUsed();\r\n\r\n    /**\r\n     * @dev An event with details of a SeaDrop mint, for analytical purposes.\r\n     * \r\n     * @param nftContract    The nft contract.\r\n     * @param minter         The mint recipient.\r\n     * @param feeRecipient   The fee recipient.\r\n     * @param payer          The address who payed for the tx.\r\n     * @param quantityMinted The number of tokens minted.\r\n     * @param unitMintPrice  The amount paid for each token.\r\n     * @param feeBps         The fee out of 10_000 basis points collected.\r\n     * @param dropStageIndex The drop stage index. Items minted\r\n     *                       through mintPublic() have\r\n     *                       dropStageIndex of 0.\r\n     */\r\n    event SeaDropMint(\r\n        address indexed nftContract,\r\n        address indexed minter,\r\n        address indexed feeRecipient,\r\n        address payer,\r\n        uint256 quantityMinted,\r\n        uint256 unitMintPrice,\r\n        uint256 feeBps,\r\n        uint256 dropStageIndex\r\n    );\r\n\r\n    /**\r\n     * @dev An event with updated public drop data for an nft contract.\r\n     */\r\n    event PublicDropUpdated(\r\n        address indexed nftContract,\r\n        PublicDrop publicDrop\r\n    );\r\n\r\n    /**\r\n     * @dev An event with updated token gated drop stage data\r\n     *      for an nft contract.\r\n     */\r\n    event TokenGatedDropStageUpdated(\r\n        address indexed nftContract,\r\n        address indexed allowedNftToken,\r\n        TokenGatedDropStage dropStage\r\n    );\r\n\r\n    /**\r\n     * @dev An event with updated allow list data for an nft contract.\r\n     * \r\n     * @param nftContract        The nft contract.\r\n     * @param previousMerkleRoot The previous allow list merkle root.\r\n     * @param newMerkleRoot      The new allow list merkle root.\r\n     * @param publicKeyURI       If the allow list is encrypted, the public key\r\n     *                           URIs that can decrypt the list.\r\n     *                           Empty if unencrypted.\r\n     * @param allowListURI       The URI for the allow list.\r\n     */\r\n    event AllowListUpdated(\r\n        address indexed nftContract,\r\n        bytes32 indexed previousMerkleRoot,\r\n        bytes32 indexed newMerkleRoot,\r\n        string[] publicKeyURI,\r\n        string allowListURI\r\n    );\r\n\r\n    /**\r\n     * @dev An event with updated drop URI for an nft contract.\r\n     */\r\n    event DropURIUpdated(address indexed nftContract, string newDropURI);\r\n\r\n    /**\r\n     * @dev An event with the updated creator payout address for an nft\r\n     *      contract.\r\n     */\r\n    event CreatorPayoutAddressUpdated(\r\n        address indexed nftContract,\r\n        address indexed newPayoutAddress\r\n    );\r\n\r\n    /**\r\n     * @dev An event with the updated allowed fee recipient for an nft\r\n     *      contract.\r\n     */\r\n    event AllowedFeeRecipientUpdated(\r\n        address indexed nftContract,\r\n        address indexed feeRecipient,\r\n        bool indexed allowed\r\n    );\r\n\r\n    /**\r\n     * @dev An event with the updated validation parameters for server-side\r\n     *      signers.\r\n     */\r\n    event SignedMintValidationParamsUpdated(\r\n        address indexed nftContract,\r\n        address indexed signer,\r\n        SignedMintValidationParams signedMintValidationParams\r\n    );   \r\n\r\n    /**\r\n     * @dev An event with the updated payer for an nft contract.\r\n     */\r\n    event PayerUpdated(\r\n        address indexed nftContract,\r\n        address indexed payer,\r\n        bool indexed allowed\r\n    );\r\n}\r\n\r\n// File: seadrop-main/src/interfaces/ISeaDrop.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\ninterface ISeaDrop is SeaDropErrorsAndEvents {\r\n    /**\r\n     * @notice Mint a public drop.\r\n     *\r\n     * @param nftContract      The nft contract to mint.\r\n     * @param feeRecipient     The fee recipient.\r\n     * @param minterIfNotPayer The mint recipient if different than the payer.\r\n     * @param quantity         The number of tokens to mint.\r\n     */\r\n    function mintPublic(\r\n        address nftContract,\r\n        address feeRecipient,\r\n        address minterIfNotPayer,\r\n        uint256 quantity\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Mint from an allow list.\r\n     *\r\n     * @param nftContract      The nft contract to mint.\r\n     * @param feeRecipient     The fee recipient.\r\n     * @param minterIfNotPayer The mint recipient if different than the payer.\r\n     * @param quantity         The number of tokens to mint.\r\n     * @param mintParams       The mint parameters.\r\n     * @param proof            The proof for the leaf of the allow list.\r\n     */\r\n    function mintAllowList(\r\n        address nftContract,\r\n        address feeRecipient,\r\n        address minterIfNotPayer,\r\n        uint256 quantity,\r\n        MintParams calldata mintParams,\r\n        bytes32[] calldata proof\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Mint with a server-side signature.\r\n     *         Note that a signature can only be used once.\r\n     *\r\n     * @param nftContract      The nft contract to mint.\r\n     * @param feeRecipient     The fee recipient.\r\n     * @param minterIfNotPayer The mint recipient if different than the payer.\r\n     * @param quantity         The number of tokens to mint.\r\n     * @param mintParams       The mint parameters.\r\n     * @param salt             The sale for the signed mint.\r\n     * @param signature        The server-side signature, must be an allowed\r\n     *                         signer.\r\n     */\r\n    function mintSigned(\r\n        address nftContract,\r\n        address feeRecipient,\r\n        address minterIfNotPayer,\r\n        uint256 quantity,\r\n        MintParams calldata mintParams,\r\n        uint256 salt,\r\n        bytes calldata signature\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Mint as an allowed token holder.\r\n     *         This will mark the token id as redeemed and will revert if the\r\n     *         same token id is attempted to be redeemed twice.\r\n     *\r\n     * @param nftContract      The nft contract to mint.\r\n     * @param feeRecipient     The fee recipient.\r\n     * @param minterIfNotPayer The mint recipient if different than the payer.\r\n     * @param mintParams       The token gated mint params.\r\n     */\r\n    function mintAllowedTokenHolder(\r\n        address nftContract,\r\n        address feeRecipient,\r\n        address minterIfNotPayer,\r\n        TokenGatedMintParams calldata mintParams\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Emits an event to notify update of the drop URI.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param dropURI The new drop URI.\r\n     */\r\n    function updateDropURI(string calldata dropURI) external;\r\n\r\n    /**\r\n     * @notice Updates the public drop data for the nft contract\r\n     *         and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param publicDrop The public drop data.\r\n     */\r\n    function updatePublicDrop(PublicDrop calldata publicDrop) external;\r\n\r\n    /**\r\n     * @notice Updates the allow list merkle root for the nft contract\r\n     *         and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param allowListData The allow list data.\r\n     */\r\n    function updateAllowList(AllowListData calldata allowListData) external;\r\n\r\n    /**\r\n     * @notice Updates the token gated drop stage for the nft contract\r\n     *         and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\r\n     *         simultaneous token gated drop promotions for each other,\r\n     *         they can be minted by the same actor until\r\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\r\n     *         `allowedNftToken` is not running an active drop during\r\n     *         the `dropStage` time period.\r\n     *\r\n     * @param allowedNftToken The token gated nft token.\r\n     * @param dropStage       The token gated drop stage data.\r\n     */\r\n    function updateTokenGatedDrop(\r\n        address allowedNftToken,\r\n        TokenGatedDropStage calldata dropStage\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Updates the creator payout address and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param payoutAddress The creator payout address.\r\n     */\r\n    function updateCreatorPayoutAddress(address payoutAddress) external;\r\n\r\n    /**\r\n     * @notice Updates the allowed fee recipient and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param feeRecipient The fee recipient.\r\n     * @param allowed      If the fee recipient is allowed.\r\n     */\r\n    function updateAllowedFeeRecipient(address feeRecipient, bool allowed)\r\n        external;\r\n\r\n    /**\r\n     * @notice Updates the allowed server-side signers and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param signer                     The signer to update.\r\n     * @param signedMintValidationParams Minimum and maximum parameters\r\n     *                                   to enforce for signed mints.\r\n     */\r\n    function updateSignedMintValidationParams(\r\n        address signer,\r\n        SignedMintValidationParams calldata signedMintValidationParams\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Updates the allowed payer and emits an event.\r\n     *\r\n     *         This method assume msg.sender is an nft contract and its\r\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\r\n     *\r\n     *         Note: Be sure only authorized users can call this from\r\n     *         token contracts that implement INonFungibleSeaDropToken.\r\n     *\r\n     * @param payer   The payer to add or remove.\r\n     * @param allowed Whether to add or remove the payer.\r\n     */\r\n    function updatePayer(address payer, bool allowed) external;\r\n\r\n    /**\r\n     * @notice Returns the public drop data for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getPublicDrop(address nftContract)\r\n        external\r\n        view\r\n        returns (PublicDrop memory);\r\n\r\n    /**\r\n     * @notice Returns the creator payout address for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getCreatorPayoutAddress(address nftContract)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * @notice Returns the allow list merkle root for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getAllowListMerkleRoot(address nftContract)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    /**\r\n     * @notice Returns if the specified fee recipient is allowed\r\n     *         for the nft contract.\r\n     *\r\n     * @param nftContract  The nft contract.\r\n     * @param feeRecipient The fee recipient.\r\n     */\r\n    function getFeeRecipientIsAllowed(address nftContract, address feeRecipient)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice Returns an enumeration of allowed fee recipients for an\r\n     *         nft contract when fee recipients are enforced\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getAllowedFeeRecipients(address nftContract)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the server-side signers for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getSigners(address nftContract)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the struct of SignedMintValidationParams for a signer.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     * @param signer      The signer.\r\n     */\r\n    function getSignedMintValidationParams(address nftContract, address signer)\r\n        external\r\n        view\r\n        returns (SignedMintValidationParams memory);\r\n\r\n    /**\r\n     * @notice Returns the payers for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getPayers(address nftContract)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns if the specified payer is allowed\r\n     *         for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     * @param payer       The payer.\r\n     */\r\n    function getPayerIsAllowed(address nftContract, address payer)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the allowed token gated drop tokens for the nft contract.\r\n     *\r\n     * @param nftContract The nft contract.\r\n     */\r\n    function getTokenGatedAllowedTokens(address nftContract)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the token gated drop data for the nft contract\r\n     *         and token gated nft.\r\n     *\r\n     * @param nftContract     The nft contract.\r\n     * @param allowedNftToken The token gated nft token.\r\n     */\r\n    function getTokenGatedDrop(address nftContract, address allowedNftToken)\r\n        external\r\n        view\r\n        returns (TokenGatedDropStage memory);\r\n\r\n    /**\r\n     * @notice Returns whether the token id for a token gated drop has been\r\n     *         redeemed.\r\n     *\r\n     * @param nftContract       The nft contract.\r\n     * @param allowedNftToken   The token gated nft token.\r\n     * @param allowedNftTokenId The token gated nft token id to check.\r\n     */\r\n    function getAllowedNftTokenIdIsRedeemed(\r\n        address nftContract,\r\n        address allowedNftToken,\r\n        uint256 allowedNftTokenId\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: erc721a/contracts/IERC721A.sol\r\n\r\n\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of ERC721A.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the\r\n     * ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    // =============================================================\r\n    //                            STRUCTS\r\n    // =============================================================\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Stores the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\r\n        uint24 extraData;\r\n    }\r\n\r\n    // =============================================================\r\n    //                         TOKEN COUNTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                            IERC721\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables\r\n     * (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\r\n     * checking first that contract recipients are aware of the ERC721 protocol\r\n     * to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move\r\n     * this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\r\n     * whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external payable;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                           IERC2309\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\r\n     * (inclusive) is transferred from `from` to `to`, as defined in the\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\r\n     *\r\n     * See {_mintERC2309} for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n\r\n// File: erc721a/contracts/ERC721A.sol\r\n\r\n\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @dev Interface of ERC721 token receiver.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721A\r\n *\r\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\r\n * Non-Fungible Token Standard, including the Metadata extension.\r\n * Optimized for lower gas during batch mints.\r\n *\r\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\r\n * starting from `_startTokenId()`.\r\n *\r\n * Assumptions:\r\n *\r\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\r\n    struct TokenApprovalRef {\r\n        address value;\r\n    }\r\n\r\n    // =============================================================\r\n    //                           CONSTANTS\r\n    // =============================================================\r\n\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant _BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\r\n\r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The bit position of `extraData` in packed ownership.\r\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\r\n\r\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n\r\n    // The mask of the lower 160 bits for addresses.\r\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\r\n    // This limit is to prevent overflows on the address data entries.\r\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\r\n    // is required to cause an overflow, which is unrealistic.\r\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n    // The `Transfer` event signature is given by:\r\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    // =============================================================\r\n    //                            STORAGE\r\n    // =============================================================\r\n\r\n    // The next token ID to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See {_packedOwnershipOf} implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    // - [232..255] `extraData`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // =============================================================\r\n    //                          CONSTRUCTOR\r\n    // =============================================================\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    // =============================================================\r\n    //                   TOKEN COUNTING OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the starting token ID.\r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view virtual returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view virtual returns (uint256) {\r\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\r\n        // and it is initialized to `_startTokenId()`.\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view virtual returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    // =============================================================\r\n    //                    ADDRESS DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal virtual {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        // Cast `aux` with assembly to avoid redundant masking.\r\n        assembly {\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes\r\n        // of the XOR of all function selectors in the interface.\r\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\r\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, it can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    // =============================================================\r\n    //                     OWNERSHIPS OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal virtual {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr)\r\n                if (curr < _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed & _BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an initialized ownership slot\r\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\r\n                        // before an unintialized ownership slot\r\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\r\n                        // Hence, `curr` will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed will be zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];\r\n                        }\r\n                        return packed;\r\n                    }\r\n                }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & _BITMASK_BURNED != 0;\r\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Packs ownership data into a single uint256.\r\n     */\r\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\r\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n     */\r\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\r\n        // For branchless setting of the `nextInitialized` flag.\r\n        assembly {\r\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\r\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      APPROVAL OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) public payable virtual override {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n\r\n        _tokenApprovals[tokenId].value = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId].value;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted. See {_mint}.\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return\r\n            _startTokenId() <= tokenId &&\r\n            tokenId < _currentIndex && // If within bounds,\r\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\r\n     */\r\n    function _isSenderApprovedOrOwner(\r\n        address approvedAddress,\r\n        address owner,\r\n        address msgSender\r\n    ) private pure returns (bool result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\r\n            // `msgSender == owner || msgSender == approvedAddress`.\r\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n     */\r\n    function _getApprovedSlotAndAddress(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (uint256 approvedAddressSlot, address approvedAddress)\r\n    {\r\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\r\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\r\n        assembly {\r\n            approvedAddressSlot := tokenApproval.slot\r\n            approvedAddress := sload(approvedAddressSlot)\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      TRANSFER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable virtual override {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        // The nested ifs save around 20+ gas over a compound boolean condition.\r\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                to,\r\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public payable virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token IDs\r\n     * are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token IDs\r\n     * have been transferred. This includes minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * `from` - Previous owner of the given token ID.\r\n     * `to` - Target address that will receive the token.\r\n     * `tokenId` - Token ID to be transferred.\r\n     * `_data` - Optional data to send along with the call.\r\n     *\r\n     * Returns whether the call correctly returned the expected magic value.\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                        MINT OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n        // `tokenId` has a maximum limit of 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            uint256 toMasked;\r\n            uint256 end = startTokenId + quantity;\r\n\r\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\r\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\r\n            // The assembly, together with the surrounding Solidity code, have been\r\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\r\n            assembly {\r\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n                toMasked := and(to, _BITMASK_ADDRESS)\r\n                // Emit the `Transfer` event.\r\n                log4(\r\n                    0, // Start of data (0, since no data).\r\n                    0, // End of data (0, since no data).\r\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\r\n                    0, // `address(0)`.\r\n                    toMasked, // `to`.\r\n                    startTokenId // `tokenId`.\r\n                )\r\n\r\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\r\n                // that overflows uint256 will make the loop run out of gas.\r\n                // The compiler will optimize the `iszero` away for performance.\r\n                for {\r\n                    let tokenId := add(startTokenId, 1)\r\n                } iszero(eq(tokenId, end)) {\r\n                    tokenId := add(tokenId, 1)\r\n                } {\r\n                    // Emit the `Transfer` event. Similar to above.\r\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\r\n                }\r\n            }\r\n            if (toMasked == 0) revert MintToZeroAddress();\r\n\r\n            _currentIndex = end;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * This function is intended for efficient minting only during contract creation.\r\n     *\r\n     * It emits only one {ConsecutiveTransfer} as defined in\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n     * instead of a sequence of {Transfer} event(s).\r\n     *\r\n     * Calling this function outside of contract creation WILL make your contract\r\n     * non-compliant with the ERC721 standard.\r\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {ConsecutiveTransfer} event.\r\n     */\r\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\r\n\r\n            _currentIndex = startTokenId + quantity;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * See {_mint}.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, quantity);\r\n\r\n        unchecked {\r\n            if (to.code.length != 0) {\r\n                uint256 end = _currentIndex;\r\n                uint256 index = end - quantity;\r\n                do {\r\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (index < end);\r\n                // Reentrancy protection.\r\n                if (_currentIndex != end) revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal virtual {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    // =============================================================\r\n    //                        BURN OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        if (approvalCheck) {\r\n            // The nested ifs save around 20+ gas over a compound boolean condition.\r\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                from,\r\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                     EXTRA DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Directly sets the extra data for the ownership data `index`.\r\n     */\r\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\r\n        uint256 packed = _packedOwnerships[index];\r\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n        uint256 extraDataCasted;\r\n        // Cast `extraData` with assembly to avoid redundant masking.\r\n        assembly {\r\n            extraDataCasted := extraData\r\n        }\r\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\r\n        _packedOwnerships[index] = packed;\r\n    }\r\n\r\n    /**\r\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n     * Intended to be overridden by the cosumer contract.\r\n     *\r\n     * `previousExtraData` - the value of `extraData` before transfer.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _extraData(\r\n        address from,\r\n        address to,\r\n        uint24 previousExtraData\r\n    ) internal view virtual returns (uint24) {}\r\n\r\n    /**\r\n     * @dev Returns the next extra data for the packed ownership data.\r\n     * The returned result is shifted into position.\r\n     */\r\n    function _nextExtraData(\r\n        address from,\r\n        address to,\r\n        uint256 prevOwnershipPacked\r\n    ) private view returns (uint256) {\r\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\r\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\r\n    }\r\n\r\n    // =============================================================\r\n    //                       OTHER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\r\n            let m := add(mload(0x40), 0xa0)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, m)\r\n            // Assign the `str` to the end.\r\n            str := sub(m, 0x20)\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // prettier-ignore\r\n            for { let temp := value } 1 {} {\r\n                str := sub(str, 1)\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                // prettier-ignore\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n            // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/common/ERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\r\n *\r\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\r\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\r\n *\r\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\r\n * fee is specified in basis points by default.\r\n *\r\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\r\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\r\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\r\n *\r\n * _Available since v4.5._\r\n */\r\nabstract contract ERC2981 is IERC2981, ERC165 {\r\n    struct RoyaltyInfo {\r\n        address receiver;\r\n        uint96 royaltyFraction;\r\n    }\r\n\r\n    RoyaltyInfo private _defaultRoyaltyInfo;\r\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\r\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC2981\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\r\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\r\n\r\n        if (royalty.receiver == address(0)) {\r\n            royalty = _defaultRoyaltyInfo;\r\n        }\r\n\r\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\r\n\r\n        return (royalty.receiver, royaltyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\r\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\r\n     * override.\r\n     */\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information that all ids in this contract will default to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\r\n\r\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes default royalty information.\r\n     */\r\n    function _deleteDefaultRoyalty() internal virtual {\r\n        delete _defaultRoyaltyInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setTokenRoyalty(\r\n        uint256 tokenId,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\r\n\r\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Resets royalty information for the token id back to the global default.\r\n     */\r\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n        delete _tokenRoyaltyInfo[tokenId];\r\n    }\r\n}\r\n\r\n// File: seadrop-main/src/interfaces/ISeaDropTokenContractMetadata.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\ninterface ISeaDropTokenContractMetadata is IERC2981 {\r\n    /**\r\n     * @notice Throw if the max supply exceeds uint64, a limit\r\n     *         due to the storage of bit-packed variables in ERC721A.\r\n     */\r\n    error CannotExceedMaxSupplyOfUint64(uint256 newMaxSupply);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to set the provenance\r\n     *      hash after the mint has started.\r\n     */\r\n    error ProvenanceHashCannotBeSetAfterMintStarted();\r\n\r\n    /**\r\n     * @dev Revert if the royalty basis points is greater than 10_000.\r\n     */\r\n    error InvalidRoyaltyBasisPoints(uint256 basisPoints);\r\n\r\n    /**\r\n     * @dev Revert if the royalty address is being set to the zero address.\r\n     */\r\n    error RoyaltyAddressCannotBeZeroAddress();\r\n\r\n    /**\r\n     * @dev Emit an event for token metadata reveals/updates,\r\n     *      according to EIP-4906.\r\n     *\r\n     * @param _fromTokenId The start token id.\r\n     * @param _toTokenId   The end token id.\r\n     */\r\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\r\n\r\n    /**\r\n     * @dev Emit an event when the URI for the collection-level metadata\r\n     *      is updated.\r\n     */\r\n    event ContractURIUpdated(string newContractURI);\r\n\r\n    /**\r\n     * @dev Emit an event when the max token supply is updated.\r\n     */\r\n    event MaxSupplyUpdated(uint256 newMaxSupply);\r\n\r\n    /**\r\n     * @dev Emit an event with the previous and new provenance hash after\r\n     *      being updated.\r\n     */\r\n    event ProvenanceHashUpdated(bytes32 previousHash, bytes32 newHash);\r\n\r\n    /**\r\n     * @dev Emit an event when the royalties info is updated.\r\n     */\r\n    event RoyaltyInfoUpdated(address receiver, uint256 bps);\r\n\r\n    /**\r\n     * @notice A struct defining royalty info for the contract.\r\n     */\r\n    struct RoyaltyInfo {\r\n        address royaltyAddress;\r\n        uint96 royaltyBps;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the base URI for the token metadata and emits an event.\r\n     *\r\n     * @param tokenURI The new base URI to set.\r\n     */\r\n    function setBaseURI(string calldata tokenURI) external;\r\n\r\n    /**\r\n     * @notice Sets the contract URI for contract metadata.\r\n     *\r\n     * @param newContractURI The new contract URI.\r\n     */\r\n    function setContractURI(string calldata newContractURI) external;\r\n\r\n    /**\r\n     * @notice Sets the max supply and emits an event.\r\n     *\r\n     * @param newMaxSupply The new max supply to set.\r\n     */\r\n    function setMaxSupply(uint256 newMaxSupply) external;\r\n\r\n    /**\r\n     * @notice Sets the provenance hash and emits an event.\r\n     *\r\n     *         The provenance hash is used for random reveals, which\r\n     *         is a hash of the ordered metadata to show it has not been\r\n     *         modified after mint started.\r\n     *\r\n     *         This function will revert after the first item has been minted.\r\n     *\r\n     * @param newProvenanceHash The new provenance hash to set.\r\n     */\r\n    function setProvenanceHash(bytes32 newProvenanceHash) external;\r\n\r\n    /**\r\n     * @notice Sets the address and basis points for royalties.\r\n     *\r\n     * @param newInfo The struct to configure royalties.\r\n     */\r\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external;\r\n\r\n    /**\r\n     * @notice Returns the base URI for token metadata.\r\n     */\r\n    function baseURI() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the contract URI.\r\n     */\r\n    function contractURI() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the max token supply.\r\n     */\r\n    function maxSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the provenance hash.\r\n     *         The provenance hash is used for random reveals, which\r\n     *         is a hash of the ordered metadata to show it is unmodified\r\n     *         after mint has started.\r\n     */\r\n    function provenanceHash() external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Returns the address that receives royalties.\r\n     */\r\n    function royaltyAddress() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the royalty basis points out of 10_000.\r\n     */\r\n    function royaltyBasisPoints() external view returns (uint256);\r\n}\r\n\r\n// File: seadrop-main/src/interfaces/INonFungibleSeaDropToken.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\ninterface INonFungibleSeaDropToken is ISeaDropTokenContractMetadata {\r\n    /**\r\n     * @dev Revert with an error if a contract is not an allowed\r\n     *      SeaDrop address.\r\n     */\r\n    error OnlyAllowedSeaDrop();\r\n\r\n    /**\r\n     * @dev Emit an event when allowed SeaDrop contracts are updated.\r\n     */\r\n    event AllowedSeaDropUpdated(address[] allowedSeaDrop);\r\n\r\n    /**\r\n     * @notice Update the allowed SeaDrop contracts.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\r\n     */\r\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop) external;\r\n\r\n    /**\r\n     * @notice Mint tokens, restricted to the SeaDrop contract.\r\n     *\r\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\r\n     *         contracts, the implementation of this function should guard\r\n     *         against reentrancy. If the implementing token uses\r\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\r\n     *         is specified, the token or fee recipients may be able to execute\r\n     *         another mint in the same transaction via a separate SeaDrop\r\n     *         contract.\r\n     *         This is dangerous if an implementing token does not correctly\r\n     *         update the minterNumMinted and currentTotalSupply values before\r\n     *         transferring minted tokens, as SeaDrop references these values\r\n     *         to enforce token limits on a per-wallet and per-stage basis.\r\n     *\r\n     * @param minter   The address to mint to.\r\n     * @param quantity The number of tokens to mint.\r\n     */\r\n    function mintSeaDrop(address minter, uint256 quantity) external;\r\n\r\n    /**\r\n     * @notice Returns a set of mint stats for the address.\r\n     *         This assists SeaDrop in enforcing maxSupply,\r\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\r\n     *\r\n     * @dev    NOTE: Implementing contracts should always update these numbers\r\n     *         before transferring any tokens with _safeMint() to mitigate\r\n     *         consequences of malicious onERC721Received() hooks.\r\n     *\r\n     * @param minter The minter address.\r\n     */\r\n    function getMintStats(address minter)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 minterNumMinted,\r\n            uint256 currentTotalSupply,\r\n            uint256 maxSupply\r\n        );\r\n\r\n    /**\r\n     * @notice Update the public drop data for this nft contract on SeaDrop.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     *         The administrator can only update `feeBps`.\r\n     *\r\n     * @param seaDropImpl The allowed SeaDrop contract.\r\n     * @param publicDrop  The public drop data.\r\n     */\r\n    function updatePublicDrop(\r\n        address seaDropImpl,\r\n        PublicDrop calldata publicDrop\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Update the allow list data for this nft contract on SeaDrop.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     * @param seaDropImpl   The allowed SeaDrop contract.\r\n     * @param allowListData The allow list data.\r\n     */\r\n    function updateAllowList(\r\n        address seaDropImpl,\r\n        AllowListData calldata allowListData\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Update the token gated drop stage data for this nft contract\r\n     *         on SeaDrop.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     *         The administrator, when present, must first set `feeBps`.\r\n     *\r\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\r\n     *         simultaneous token gated drop promotions for each other,\r\n     *         they can be minted by the same actor until\r\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\r\n     *         `allowedNftToken` is not running an active drop during the\r\n     *         `dropStage` time period.\r\n     *\r\n     *\r\n     * @param seaDropImpl     The allowed SeaDrop contract.\r\n     * @param allowedNftToken The allowed nft token.\r\n     * @param dropStage       The token gated drop stage data.\r\n     */\r\n    function updateTokenGatedDrop(\r\n        address seaDropImpl,\r\n        address allowedNftToken,\r\n        TokenGatedDropStage calldata dropStage\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Update the drop URI for this nft contract on SeaDrop.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     * @param seaDropImpl The allowed SeaDrop contract.\r\n     * @param dropURI     The new drop URI.\r\n     */\r\n    function updateDropURI(address seaDropImpl, string calldata dropURI)\r\n        external;\r\n\r\n    /**\r\n     * @notice Update the creator payout address for this nft contract on\r\n     *         SeaDrop.\r\n     *         Only the owner can set the creator payout address.\r\n     *\r\n     * @param seaDropImpl   The allowed SeaDrop contract.\r\n     * @param payoutAddress The new payout address.\r\n     */\r\n    function updateCreatorPayoutAddress(\r\n        address seaDropImpl,\r\n        address payoutAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Update the allowed fee recipient for this nft contract\r\n     *         on SeaDrop.\r\n     *         Only the administrator can set the allowed fee recipient.\r\n     *\r\n     * @param seaDropImpl  The allowed SeaDrop contract.\r\n     * @param feeRecipient The new fee recipient.\r\n     */\r\n    function updateAllowedFeeRecipient(\r\n        address seaDropImpl,\r\n        address feeRecipient,\r\n        bool allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Update the server-side signers for this nft contract\r\n     *         on SeaDrop.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     * @param seaDropImpl                The allowed SeaDrop contract.\r\n     * @param signer                     The signer to update.\r\n     * @param signedMintValidationParams Minimum and maximum parameters\r\n     *                                   to enforce for signed mints.\r\n     */\r\n    function updateSignedMintValidationParams(\r\n        address seaDropImpl,\r\n        address signer,\r\n        SignedMintValidationParams memory signedMintValidationParams\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     * @param seaDropImpl The allowed SeaDrop contract.\r\n     * @param payer       The payer to update.\r\n     * @param allowed     Whether the payer is allowed.\r\n     */\r\n    function updatePayer(\r\n        address seaDropImpl,\r\n        address payer,\r\n        bool allowed\r\n    ) external;\r\n}\r\n\r\n// File: seadrop-main/src/ERC721ContractMetadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title  ERC721ContractMetadata\r\n * @author James Wenzel (emo.eth)\r\n * @author Ryan Ghods (ralxz.eth)\r\n * @author Stephan Min (stephanm.eth)\r\n * @notice ERC721ContractMetadata is a token contract that extends ERC721A\r\n *         with additional metadata and ownership capabilities.\r\n */\r\ncontract ERC721ContractMetadata is\r\n    ERC721A,\r\n    Ownable,\r\n    ISeaDropTokenContractMetadata\r\n{\r\n    /// @notice Track the max supply.\r\n    uint256 _maxSupply;\r\n\r\n    /// @notice Track the base URI for token metadata.\r\n    string _tokenBaseURI;\r\n\r\n    /// @notice Track the contract URI for contract metadata.\r\n    string _contractURI;\r\n\r\n    /// @notice Track the provenance hash for guaranteeing metadata order\r\n    ///         for random reveals.\r\n    bytes32 _provenanceHash;\r\n\r\n    /// @notice Track the royalty info: address to receive royalties, and\r\n    ///         royalty basis points.\r\n    RoyaltyInfo _royaltyInfo;\r\n\r\n    error OnlyOwner();\r\n\r\n    /**\r\n     * @dev Reverts if the sender is not the owner or the contract itself.\r\n     *      This function is inlined instead of being a modifier\r\n     *      to save contract space from being inlined N times.\r\n     */\r\n    function _onlyOwnerOrSelf() internal view {\r\n        if (\r\n            _cast(msg.sender == owner()) | _cast(msg.sender == address(this)) ==\r\n            0\r\n        ) {\r\n            revert OnlyOwner();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Deploy the token contract with its name and symbol.\r\n     */\r\n    constructor(string memory name, string memory symbol)\r\n        ERC721A(name, symbol)\r\n    {}\r\n\r\n    /**\r\n     * @notice Sets the base URI for the token metadata and emits an event.\r\n     *\r\n     * @param newBaseURI The new base URI to set.\r\n     */\r\n    function setBaseURI(string calldata newBaseURI) external override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Set the new base URI.\r\n        _tokenBaseURI = newBaseURI;\r\n\r\n        // Emit an event with the update.\r\n        if (totalSupply() != 0) {\r\n            emit BatchMetadataUpdate(1, _nextTokenId() - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the contract URI for contract metadata.\r\n     *\r\n     * @param newContractURI The new contract URI.\r\n     */\r\n    function setContractURI(string calldata newContractURI) external override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Set the new contract URI.\r\n        _contractURI = newContractURI;\r\n\r\n        // Emit an event with the update.\r\n        emit ContractURIUpdated(newContractURI);\r\n    }\r\n\r\n    /**\r\n     * @notice Emit an event notifying metadata updates for\r\n     *         a range of token ids, according to EIP-4906.\r\n     *\r\n     * @param fromTokenId The start token id.\r\n     * @param toTokenId   The end token id.\r\n     */\r\n    function emitBatchMetadataUpdate(uint256 fromTokenId, uint256 toTokenId)\r\n        external\r\n    {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Emit an event with the update.\r\n        emit BatchMetadataUpdate(fromTokenId, toTokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the max token supply and emits an event.\r\n     *\r\n     * @param newMaxSupply The new max supply to set.\r\n     */\r\n    function setMaxSupply(uint256 newMaxSupply) external {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the max supply does not exceed the maximum value of uint64.\r\n        if (newMaxSupply > 2**64 - 1) {\r\n            revert CannotExceedMaxSupplyOfUint64(newMaxSupply);\r\n        }\r\n\r\n        // Set the new max supply.\r\n        _maxSupply = newMaxSupply;\r\n\r\n        // Emit an event with the update.\r\n        emit MaxSupplyUpdated(newMaxSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the provenance hash and emits an event.\r\n     *\r\n     *         The provenance hash is used for random reveals, which\r\n     *         is a hash of the ordered metadata to show it has not been\r\n     *         modified after mint started.\r\n     *\r\n     *         This function will revert after the first item has been minted.\r\n     *\r\n     * @param newProvenanceHash The new provenance hash to set.\r\n     */\r\n    function setProvenanceHash(bytes32 newProvenanceHash) external {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Revert if any items have been minted.\r\n        if (_totalMinted() > 0) {\r\n            revert ProvenanceHashCannotBeSetAfterMintStarted();\r\n        }\r\n\r\n        // Keep track of the old provenance hash for emitting with the event.\r\n        bytes32 oldProvenanceHash = _provenanceHash;\r\n\r\n        // Set the new provenance hash.\r\n        _provenanceHash = newProvenanceHash;\r\n\r\n        // Emit an event with the update.\r\n        emit ProvenanceHashUpdated(oldProvenanceHash, newProvenanceHash);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address and basis points for royalties.\r\n     *\r\n     * @param newInfo The struct to configure royalties.\r\n     */\r\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Revert if the new royalty address is the zero address.\r\n        if (newInfo.royaltyAddress == address(0)) {\r\n            revert RoyaltyAddressCannotBeZeroAddress();\r\n        }\r\n\r\n        // Revert if the new basis points is greater than 10_000.\r\n        if (newInfo.royaltyBps > 10_000) {\r\n            revert InvalidRoyaltyBasisPoints(newInfo.royaltyBps);\r\n        }\r\n\r\n        // Set the new royalty info.\r\n        _royaltyInfo = newInfo;\r\n\r\n        // Emit an event with the updated params.\r\n        emit RoyaltyInfoUpdated(newInfo.royaltyAddress, newInfo.royaltyBps);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the base URI for token metadata.\r\n     */\r\n    function baseURI() external view override returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the base URI for the contract, which ERC721A uses\r\n     *         to return tokenURI.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _tokenBaseURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the contract URI for contract metadata.\r\n     */\r\n    function contractURI() external view override returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the max token supply.\r\n     */\r\n    function maxSupply() public view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the provenance hash.\r\n     *         The provenance hash is used for random reveals, which\r\n     *         is a hash of the ordered metadata to show it is unmodified\r\n     *         after mint has started.\r\n     */\r\n    function provenanceHash() external view override returns (bytes32) {\r\n        return _provenanceHash;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the address that receives royalties.\r\n     */\r\n    function royaltyAddress() external view returns (address) {\r\n        return _royaltyInfo.royaltyAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the royalty basis points out of 10_000.\r\n     */\r\n    function royaltyBasisPoints() external view returns (uint256) {\r\n        return _royaltyInfo.royaltyBps;\r\n    }\r\n\r\n    /**\r\n     * @notice Called with the sale price to determine how much royalty\r\n     *         is owed and to whom.\r\n     *\r\n     * @ param  _tokenId     The NFT asset queried for royalty information.\r\n     * @param  _salePrice    The sale price of the NFT asset specified by\r\n     *                       _tokenId.\r\n     *\r\n     * @return receiver      Address of who should be sent the royalty payment.\r\n     * @return royaltyAmount The royalty payment amount for _salePrice.\r\n     */\r\n    function royaltyInfo(\r\n        uint256, /* _tokenId */\r\n        uint256 _salePrice\r\n    ) external view returns (address receiver, uint256 royaltyAmount) {\r\n        // Put the royalty info on the stack for more efficient access.\r\n        RoyaltyInfo storage info = _royaltyInfo;\r\n\r\n        // Set the royalty amount to the sale price times the royalty basis\r\n        // points divided by 10_000.\r\n        royaltyAmount = (_salePrice * info.royaltyBps) / 10_000;\r\n\r\n        // Set the receiver of the royalty.\r\n        receiver = info.royaltyAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the interface is supported.\r\n     *\r\n     * @param interfaceId The interface id to check against.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(IERC165, ERC721A)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            interfaceId == 0x49064906 || // ERC-4906\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to cast a `bool` value to a `uint256` value.\r\n     *\r\n     * @param b The `bool` value to cast.\r\n     *\r\n     * @return u The `uint256` value.\r\n     */\r\n    function _cast(bool b) internal pure returns (uint256 u) {\r\n        assembly {\r\n            u := b\r\n        }\r\n    }\r\n}\r\n\r\n// File: seadrop-main/src/Murks.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @title  ERC721SeaDrop\r\n * @author James Wenzel (emo.eth)\r\n * @author Ryan Ghods (ralxz.eth)\r\n * @author Stephan Min (stephanm.eth)\r\n * @author Michael Cohen (notmichael.eth)\r\n * @notice ERC721SeaDrop is a token contract that contains methods\r\n *         to properly interact with SeaDrop.\r\n */\r\ncontract Murks is\r\n    ERC721ContractMetadata,\r\n    INonFungibleSeaDropToken,\r\n    ERC721SeaDropStructsErrorsAndEvents,\r\n    ReentrancyGuard,\r\n    DefaultOperatorFilterer\r\n{\r\n    /// @notice Track the allowed SeaDrop addresses.\r\n    mapping(address => bool) internal _allowedSeaDrop;\r\n\r\n    /// @notice Track the enumerated allowed SeaDrop addresses.\r\n    address[] internal _enumeratedAllowedSeaDrop;\r\n\r\n    /// @notice Boolean used to pause and unpause public and whitelist minting.\r\n    bool public isPaused;\r\n\r\n    /// @notice Public drop start time for the Murks\r\n    uint256 public startTime = 1692374400;\r\n\r\n    /// @notice Segment 1 time.\r\n    uint256 public segment1Time = 3 hours;\r\n    \r\n    /// @notice Segment 2 time.\r\n    uint256 public segment2Time = 3 hours;\r\n    \r\n    /// @notice Segment 3 time.\r\n    uint256 public segment3Time = 3 hours;\r\n    \r\n    /// @notice Segment 4 time.\r\n    uint256 public segment4Time = 3 hours;\r\n\r\n    /**\r\n     * @dev Reverts if not an allowed SeaDrop contract.\r\n     *      This function is inlined instead of being a modifier\r\n     *      to save contract space from being inlined N times.\r\n     *\r\n     * @param seaDrop The SeaDrop address to check if allowed.\r\n     */\r\n    function _onlyAllowedSeaDrop(address seaDrop) internal view {\r\n        if (_allowedSeaDrop[seaDrop] != true) {\r\n            revert OnlyAllowedSeaDrop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Deploy the token contract with its name, symbol,\r\n     *         and allowed SeaDrop addresses.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory allowedSeaDrop\r\n    ) ERC721ContractMetadata(name, symbol) {\r\n        // Put the length on the stack for more efficient access.\r\n        uint256 allowedSeaDropLength = allowedSeaDrop.length;\r\n\r\n        // Set the mapping for allowed SeaDrop contracts.\r\n        for (uint256 i = 0; i < allowedSeaDropLength; ) {\r\n            _allowedSeaDrop[allowedSeaDrop[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Set the enumeration.\r\n        _enumeratedAllowedSeaDrop = allowedSeaDrop;\r\n\r\n        // Emit an event noting the contract deployment.\r\n        emit SeaDropTokenDeployed();\r\n    }\r\n\r\n    /**\r\n     * @notice Update the allowed SeaDrop contracts.\r\n     *         Only the owner or administrator can use this function.\r\n     *\r\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\r\n     */\r\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop)\r\n        external\r\n        virtual\r\n        override\r\n        onlyOwner\r\n    {\r\n        _updateAllowedSeaDrop(allowedSeaDrop);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to update the allowed SeaDrop contracts.\r\n     *\r\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\r\n     */\r\n    function _updateAllowedSeaDrop(address[] calldata allowedSeaDrop) internal {\r\n        // Put the length on the stack for more efficient access.\r\n        uint256 enumeratedAllowedSeaDropLength = _enumeratedAllowedSeaDrop\r\n            .length;\r\n        uint256 allowedSeaDropLength = allowedSeaDrop.length;\r\n\r\n        // Reset the old mapping.\r\n        for (uint256 i = 0; i < enumeratedAllowedSeaDropLength; ) {\r\n            _allowedSeaDrop[_enumeratedAllowedSeaDrop[i]] = false;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Set the new mapping for allowed SeaDrop contracts.\r\n        for (uint256 i = 0; i < allowedSeaDropLength; ) {\r\n            _allowedSeaDrop[allowedSeaDrop[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Set the enumeration.\r\n        _enumeratedAllowedSeaDrop = allowedSeaDrop;\r\n\r\n        // Emit an event for the update.\r\n        emit AllowedSeaDropUpdated(allowedSeaDrop);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides the `_startTokenId` function from ERC721A\r\n     *      to start at token id `1`.\r\n     *\r\n     *      This is to avoid future possible problems since `0` is usually\r\n     *      used to signal values that have not been set or have been removed.\r\n     */\r\n    function _startTokenId() internal view virtual override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides the `tokenURI()` function from ERC721A\r\n     *      to return just the base URI if it is implied to not be a directory.\r\n     *\r\n     *      This is to help with ERC721 contracts in which the same token URI\r\n     *      is desired for each token, such as when the tokenURI is 'unrevealed'.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n\r\n        // Exit early if the baseURI is empty.\r\n        if (bytes(baseURI).length == 0) {\r\n            return \"\";\r\n        }\r\n\r\n        // Check if the last character in baseURI is a slash.\r\n        if (bytes(baseURI)[bytes(baseURI).length - 1] != bytes(\"/\")[0]) {\r\n            return baseURI;\r\n        }\r\n\r\n        return string(abi.encodePacked(baseURI, _toString(tokenId), \".json\"));\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner function.\r\n     *         Pauses and unpauses mintSeadrop function.\r\n     */\r\n    function toggleIsPaused() external onlyOwner {\r\n        isPaused = !isPaused;\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner function.\r\n     *         Sets the start time for Murks public drop.\r\n     *\r\n     * @param _startTime The start time.\r\n     */\r\n    function setStartTime(uint256 _startTime) external onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner function.\r\n     *         Sets the segment1 time for Murks public drop.\r\n     *\r\n     * @param _segment1Time The segment1 time.\r\n     */\r\n    function setSegment1Time(uint256 _segment1Time) external onlyOwner {\r\n        segment1Time = _segment1Time;\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner function.\r\n     *         Sets the segment2 time for Murks public drop.\r\n     *\r\n     * @param _segment2Time The segment1 time.\r\n     */\r\n    function setSegment2Time(uint256 _segment2Time) external onlyOwner {\r\n        segment2Time = _segment2Time;\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner function.\r\n     *         Sets the segment3 time for Murks public drop.\r\n     *\r\n     * @param _segment3Time The segment3 time.\r\n     */\r\n    function setSegment3Time(uint256 _segment3Time) external onlyOwner {\r\n        segment3Time = _segment3Time;\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner function.\r\n     *         Sets the segment4 time for Murks public drop.\r\n     *\r\n     * @param _segment4Time The segment4 time.\r\n     */\r\n    function setSegment4Time(uint256 _segment4Time) external onlyOwner {\r\n        segment4Time = _segment4Time;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Mint tokens, restricted to the SeaDrop contract.\r\n     *\r\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\r\n     *         contracts, the implementation of this function should guard\r\n     *         against reentrancy. If the implementing token uses\r\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\r\n     *         is specified, the token or fee recipients may be able to execute\r\n     *         another mint in the same transaction via a separate SeaDrop\r\n     *         contract.\r\n     *         This is dangerous if an implementing token does not correctly\r\n     *         update the minterNumMinted and currentTotalSupply values before\r\n     *         transferring minted tokens, as SeaDrop references these values\r\n     *         to enforce token limits on a per-wallet and per-stage basis.\r\n     *\r\n     *         ERC721A tracks these values automatically, but this note and\r\n     *         nonReentrant modifier are left here to encourage best-practices\r\n     *         when referencing this contract.\r\n     *\r\n     * @param minter   The address to mint to.\r\n     * @param quantity The number of tokens to mint.\r\n     */\r\n    function mintSeaDrop(address minter, uint256 quantity)\r\n        external\r\n        virtual\r\n        override\r\n        nonReentrant\r\n    {\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(msg.sender);\r\n\r\n        require(isPaused == false, \"Public and whitelist minting is paused\");\r\n\r\n        if (block.timestamp >= startTime + segment1Time + segment2Time + segment3Time + segment4Time) {\r\n           require(_totalMinted() + quantity <= maxSupply(), \"Exceeds maxSupply\");\r\n        }\r\n\r\n        else if (block.timestamp >= startTime + segment1Time + segment2Time + segment3Time) {\r\n           require(_totalMinted() + quantity <= 144, \"Exceeds segment 4 maxSupply\");\r\n        }\r\n\r\n        else if (block.timestamp >= startTime + segment1Time + segment2Time) {\r\n           require(_totalMinted() + quantity <= 108, \"Exceeds segment 3 maxSupply\");\r\n        }\r\n\r\n        else if (block.timestamp >= startTime + segment1Time) {\r\n           require(_totalMinted() + quantity <= 72, \"Exceeds segment 2 maxSupply\");\r\n        }\r\n\r\n        else if (block.timestamp >= startTime) {\r\n           require(_totalMinted() + quantity <= 36, \"Exceeds segment 1 maxSupply\");\r\n        }\r\n        \r\n        // Mint the quantity of tokens to the minter.\r\n        _safeMint(minter, quantity);\r\n    }\r\n\r\n    /**\r\n     * @notice Smart contract owner mint function.\r\n     * @param recipients The recipients of the nfts.\r\n     * @param quantities The quantities of nfts to be minted to the recipients.\r\n     */\r\n    function airdrop(address[] calldata recipients, uint256[] calldata quantities) external onlyOwner {\r\n        require(recipients.length == quantities.length, \"Both the recipients and quantities array sholud be equal in length\");\r\n        for (uint256 i = 0; i < recipients.length; ++i) {\r\n            require(_totalMinted() + quantities[i] <= maxSupply(), \"Exceeds maxSupply\");\r\n            _safeMint(recipients[i], quantities[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update the public drop data for this nft contract on SeaDrop.\r\n     *         Only the owner can use this function.\r\n     *\r\n     * @param seaDropImpl The allowed SeaDrop contract.\r\n     * @param publicDrop  The public drop data.\r\n     */\r\n    function updatePublicDrop(\r\n        address seaDropImpl,\r\n        PublicDrop calldata publicDrop\r\n    ) external virtual override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the public drop data on SeaDrop.\r\n        ISeaDrop(seaDropImpl).updatePublicDrop(publicDrop);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the allow list data for this nft contract on SeaDrop.\r\n     *         Only the owner can use this function.\r\n     *\r\n     * @param seaDropImpl   The allowed SeaDrop contract.\r\n     * @param allowListData The allow list data.\r\n     */\r\n    function updateAllowList(\r\n        address seaDropImpl,\r\n        AllowListData calldata allowListData\r\n    ) external virtual override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the allow list on SeaDrop.\r\n        ISeaDrop(seaDropImpl).updateAllowList(allowListData);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the token gated drop stage data for this nft contract\r\n     *         on SeaDrop.\r\n     *         Only the owner can use this function.\r\n     *\r\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\r\n     *         simultaneous token gated drop promotions for each other,\r\n     *         they can be minted by the same actor until\r\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\r\n     *         `allowedNftToken` is not running an active drop during the\r\n     *         `dropStage` time period.\r\n     *\r\n     * @param seaDropImpl     The allowed SeaDrop contract.\r\n     * @param allowedNftToken The allowed nft token.\r\n     * @param dropStage       The token gated drop stage data.\r\n     */\r\n    function updateTokenGatedDrop(\r\n        address seaDropImpl,\r\n        address allowedNftToken,\r\n        TokenGatedDropStage calldata dropStage\r\n    ) external virtual override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the token gated drop stage.\r\n        ISeaDrop(seaDropImpl).updateTokenGatedDrop(allowedNftToken, dropStage);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the drop URI for this nft contract on SeaDrop.\r\n     *         Only the owner can use this function.\r\n     *\r\n     * @param seaDropImpl The allowed SeaDrop contract.\r\n     * @param dropURI     The new drop URI.\r\n     */\r\n    function updateDropURI(address seaDropImpl, string calldata dropURI)\r\n        external\r\n        virtual\r\n        override\r\n    {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the drop URI.\r\n        ISeaDrop(seaDropImpl).updateDropURI(dropURI);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the creator payout address for this nft contract on\r\n     *         SeaDrop.\r\n     *         Only the owner can set the creator payout address.\r\n     *\r\n     * @param seaDropImpl   The allowed SeaDrop contract.\r\n     * @param payoutAddress The new payout address.\r\n     */\r\n    function updateCreatorPayoutAddress(\r\n        address seaDropImpl,\r\n        address payoutAddress\r\n    ) external {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the creator payout address.\r\n        ISeaDrop(seaDropImpl).updateCreatorPayoutAddress(payoutAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the allowed fee recipient for this nft contract\r\n     *         on SeaDrop.\r\n     *         Only the owner can set the allowed fee recipient.\r\n     *\r\n     * @param seaDropImpl  The allowed SeaDrop contract.\r\n     * @param feeRecipient The new fee recipient.\r\n     * @param allowed      If the fee recipient is allowed.\r\n     */\r\n    function updateAllowedFeeRecipient(\r\n        address seaDropImpl,\r\n        address feeRecipient,\r\n        bool allowed\r\n    ) external virtual {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the allowed fee recipient.\r\n        ISeaDrop(seaDropImpl).updateAllowedFeeRecipient(feeRecipient, allowed);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the server-side signers for this nft contract\r\n     *         on SeaDrop.\r\n     *         Only the owner can use this function.\r\n     *\r\n     * @param seaDropImpl                The allowed SeaDrop contract.\r\n     * @param signer                     The signer to update.\r\n     * @param signedMintValidationParams Minimum and maximum parameters to\r\n     *                                   enforce for signed mints.\r\n     */\r\n    function updateSignedMintValidationParams(\r\n        address seaDropImpl,\r\n        address signer,\r\n        SignedMintValidationParams memory signedMintValidationParams\r\n    ) external virtual override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the signer.\r\n        ISeaDrop(seaDropImpl).updateSignedMintValidationParams(\r\n            signer,\r\n            signedMintValidationParams\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\r\n     *         Only the owner can use this function.\r\n     *\r\n     * @param seaDropImpl The allowed SeaDrop contract.\r\n     * @param payer       The payer to update.\r\n     * @param allowed     Whether the payer is allowed.\r\n     */\r\n    function updatePayer(\r\n        address seaDropImpl,\r\n        address payer,\r\n        bool allowed\r\n    ) external virtual override {\r\n        // Ensure the sender is only the owner or contract itself.\r\n        _onlyOwnerOrSelf();\r\n\r\n        // Ensure the SeaDrop is allowed.\r\n        _onlyAllowedSeaDrop(seaDropImpl);\r\n\r\n        // Update the payer.\r\n        ISeaDrop(seaDropImpl).updatePayer(payer, allowed);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a set of mint stats for the address.\r\n     *         This assists SeaDrop in enforcing maxSupply,\r\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\r\n     *\r\n     * @dev    NOTE: Implementing contracts should always update these numbers\r\n     *         before transferring any tokens with _safeMint() to mitigate\r\n     *         consequences of malicious onERC721Received() hooks.\r\n     *\r\n     * @param minter The minter address.\r\n     */\r\n    function getMintStats(address minter)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 minterNumMinted,\r\n            uint256 currentTotalSupply,\r\n            uint256 maxSupply\r\n        )\r\n    {\r\n        minterNumMinted = _numberMinted(minter);\r\n        currentTotalSupply = _totalMinted();\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the interface is supported.\r\n     *\r\n     * @param interfaceId The interface id to check against.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(IERC165, ERC721ContractMetadata)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(INonFungibleSeaDropToken).interfaceId ||\r\n            interfaceId == type(ISeaDropTokenContractMetadata).interfaceId ||\r\n            // ERC721ContractMetadata returns supportsInterface true for\r\n            //     EIP-2981\r\n            // ERC721A returns supportsInterface true for\r\n            //     ERC165, ERC721, ERC721Metadata\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     * - The `operator` must be allowed.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override\r\n        onlyAllowedOperatorApproval(operator)\r\n    {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     * - The `operator` mut be allowed.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address operator, uint256 tokenId)\r\n        public payable \r\n        override\r\n        onlyAllowedOperatorApproval(operator)\r\n    {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     * - The operator must be allowed.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable  override onlyAllowedOperator(from) {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable  override onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     * - The operator must be allowed.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public payable override onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Configure multiple properties at a time.\r\n     *\r\n     *         Note: The individual configure methods should be used\r\n     *         to unset or reset any properties to zero, as this method\r\n     *         will ignore zero-value properties in the config struct.\r\n     *\r\n     * @param config The configuration struct.\r\n     */\r\n    function multiConfigure(MultiConfigureStruct calldata config)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (config.maxSupply > 0) {\r\n            this.setMaxSupply(config.maxSupply);\r\n        }\r\n        if (bytes(config.baseURI).length != 0) {\r\n            this.setBaseURI(config.baseURI);\r\n        }\r\n        if (bytes(config.contractURI).length != 0) {\r\n            this.setContractURI(config.contractURI);\r\n        }\r\n        if (\r\n            _cast(config.publicDrop.startTime != 0) |\r\n                _cast(config.publicDrop.endTime != 0) ==\r\n            1\r\n        ) {\r\n            this.updatePublicDrop(config.seaDropImpl, config.publicDrop);\r\n        }\r\n        if (bytes(config.dropURI).length != 0) {\r\n            this.updateDropURI(config.seaDropImpl, config.dropURI);\r\n        }\r\n        if (config.allowListData.merkleRoot != bytes32(0)) {\r\n            this.updateAllowList(config.seaDropImpl, config.allowListData);\r\n        }\r\n        if (config.creatorPayoutAddress != address(0)) {\r\n            this.updateCreatorPayoutAddress(\r\n                config.seaDropImpl,\r\n                config.creatorPayoutAddress\r\n            );\r\n        }\r\n        if (config.provenanceHash != bytes32(0)) {\r\n            this.setProvenanceHash(config.provenanceHash);\r\n        }\r\n        if (config.allowedFeeRecipients.length > 0) {\r\n            for (uint256 i = 0; i < config.allowedFeeRecipients.length; ) {\r\n                this.updateAllowedFeeRecipient(\r\n                    config.seaDropImpl,\r\n                    config.allowedFeeRecipients[i],\r\n                    true\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.disallowedFeeRecipients.length > 0) {\r\n            for (uint256 i = 0; i < config.disallowedFeeRecipients.length; ) {\r\n                this.updateAllowedFeeRecipient(\r\n                    config.seaDropImpl,\r\n                    config.disallowedFeeRecipients[i],\r\n                    false\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.allowedPayers.length > 0) {\r\n            for (uint256 i = 0; i < config.allowedPayers.length; ) {\r\n                this.updatePayer(\r\n                    config.seaDropImpl,\r\n                    config.allowedPayers[i],\r\n                    true\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.disallowedPayers.length > 0) {\r\n            for (uint256 i = 0; i < config.disallowedPayers.length; ) {\r\n                this.updatePayer(\r\n                    config.seaDropImpl,\r\n                    config.disallowedPayers[i],\r\n                    false\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.tokenGatedDropStages.length > 0) {\r\n            if (\r\n                config.tokenGatedDropStages.length !=\r\n                config.tokenGatedAllowedNftTokens.length\r\n            ) {\r\n                revert TokenGatedMismatch();\r\n            }\r\n            for (uint256 i = 0; i < config.tokenGatedDropStages.length; ) {\r\n                this.updateTokenGatedDrop(\r\n                    config.seaDropImpl,\r\n                    config.tokenGatedAllowedNftTokens[i],\r\n                    config.tokenGatedDropStages[i]\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.disallowedTokenGatedAllowedNftTokens.length > 0) {\r\n            for (\r\n                uint256 i = 0;\r\n                i < config.disallowedTokenGatedAllowedNftTokens.length;\r\n\r\n            ) {\r\n                TokenGatedDropStage memory emptyStage;\r\n                this.updateTokenGatedDrop(\r\n                    config.seaDropImpl,\r\n                    config.disallowedTokenGatedAllowedNftTokens[i],\r\n                    emptyStage\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.signedMintValidationParams.length > 0) {\r\n            if (\r\n                config.signedMintValidationParams.length !=\r\n                config.signers.length\r\n            ) {\r\n                revert SignersMismatch();\r\n            }\r\n            for (\r\n                uint256 i = 0;\r\n                i < config.signedMintValidationParams.length;\r\n\r\n            ) {\r\n                this.updateSignedMintValidationParams(\r\n                    config.seaDropImpl,\r\n                    config.signers[i],\r\n                    config.signedMintValidationParams[i]\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        if (config.disallowedSigners.length > 0) {\r\n            for (uint256 i = 0; i < config.disallowedSigners.length; ) {\r\n                SignedMintValidationParams memory emptyParams;\r\n                this.updateSignedMintValidationParams(\r\n                    config.seaDropImpl,\r\n                    config.disallowedSigners[i],\r\n                    emptyParams\r\n                );\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"allowedSeaDrop\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"CannotExceedMaxSupplyOfUint64\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"name\":\"InvalidRoyaltyBasisPoints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAllowedSeaDrop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProvenanceHashCannotBeSetAfterMintStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyAddressCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignersMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenGatedMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedSeaDrop\",\"type\":\"address[]\"}],\"name\":\"AllowedSeaDropUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newContractURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"previousHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"ProvenanceHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SeaDropTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"emitBatchMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getMintStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minterNumMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintSeaDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct PublicDrop\",\"name\":\"publicDrop\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"dropURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"publicKeyURIs\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"allowListURI\",\"type\":\"string\"}],\"internalType\":\"struct AllowListData\",\"name\":\"allowListData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creatorPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"provenanceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"allowedFeeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"disallowedFeeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedPayers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"disallowedPayers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenGatedAllowedNftTokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"dropStageIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct TokenGatedDropStage[]\",\"name\":\"tokenGatedDropStages\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"disallowedTokenGatedAllowedNftTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"minMintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint24\",\"name\":\"maxMaxTotalMintableByWallet\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"minStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxEndTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxMaxTokenSupplyForStage\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"minFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"internalType\":\"struct SignedMintValidationParams[]\",\"name\":\"signedMintValidationParams\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"disallowedSigners\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStruct\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"multiConfigure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"segment1Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"segment2Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"segment3Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"segment4Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newProvenanceHash\",\"type\":\"bytes32\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyBps\",\"type\":\"uint96\"}],\"internalType\":\"struct ISeaDropTokenContractMetadata.RoyaltyInfo\",\"name\":\"newInfo\",\"type\":\"tuple\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segment1Time\",\"type\":\"uint256\"}],\"name\":\"setSegment1Time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segment2Time\",\"type\":\"uint256\"}],\"name\":\"setSegment2Time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segment3Time\",\"type\":\"uint256\"}],\"name\":\"setSegment3Time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segment4Time\",\"type\":\"uint256\"}],\"name\":\"setSegment4Time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"publicKeyURIs\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"allowListURI\",\"type\":\"string\"}],\"internalType\":\"struct AllowListData\",\"name\":\"allowListData\",\"type\":\"tuple\"}],\"name\":\"updateAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedSeaDrop\",\"type\":\"address[]\"}],\"name\":\"updateAllowedSeaDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"updateCreatorPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dropURI\",\"type\":\"string\"}],\"name\":\"updateDropURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updatePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct PublicDrop\",\"name\":\"publicDrop\",\"type\":\"tuple\"}],\"name\":\"updatePublicDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"minMintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint24\",\"name\":\"maxMaxTotalMintableByWallet\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"minStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxEndTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxMaxTokenSupplyForStage\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"minFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"internalType\":\"struct SignedMintValidationParams\",\"name\":\"signedMintValidationParams\",\"type\":\"tuple\"}],\"name\":\"updateSignedMintValidationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seaDropImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"dropStageIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct TokenGatedDropStage\",\"name\":\"dropStage\",\"type\":\"tuple\"}],\"name\":\"updateTokenGatedDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Murks", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000054d75726b7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054d55524b53000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000005ea00ac477b1030ce78506496e8c2de24bf5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://93871d83b19d791cb55b7698622d1b15053d874dae5c51f3f31f76828a6cc7b2"}