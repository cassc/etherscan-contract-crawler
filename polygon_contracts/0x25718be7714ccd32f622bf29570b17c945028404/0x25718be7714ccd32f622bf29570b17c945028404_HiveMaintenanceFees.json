{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HiveMaintenanceFees.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRewardPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHiveGenesisContract {\\n\\n    function ownerOf(uint256 tokenId) external returns(address);\\n\\n}\\n\\ncontract HiveMaintenanceFees is Ownable {\\n\\n    ///@notice this is used to calculate the percent (ie 7% = 70 / 1000)\\n    uint constant BASIS_POINTS = 1000;\\n\\n    IHiveGenesisContract hiveGenesis;\\n\\n    IRewardPool rewardPool;\\n\\n    IERC20 honeyContract;\\n\\n    bool setup = true;\\n\\n    ///@notice this mapping keeps track of when the nft has to pay next\\n    mapping(uint => uint) public nextTimePeriodToPayFee;\\n\\n    //No of days to pay the recurring maintanance fee. - 30 Days\\n    uint public constant subscriptionInterval = 30 days;\\n\\n    ///@notice this is the mapping used to calculate token rewards, maps from token id to timestamp\\n    mapping(uint256 => uint256) public lastClaimedTimestamp;\\n\\n    address public charity;\\n\\n    address public treasuryPool;\\n\\n    address public acceptedAddress;\\n\\n    /// @notice mapping used to set custom token generation for winners of the queen auction\\n    mapping(uint => uint) public customEmissionRate;\\n\\n    ///@notice this is a mapping that keeps track of the rewards rate claimed when updating.\\n    mapping(uint => uint) public rewardsIndexLastClaimed;\\n\\n    ///@notice this is a struct that keeps track of all the reward rates for the tokens\\n    struct EmissionRate {\\n        uint customMultiplier;\\n        uint[] rates;\\n        uint[] ranges;\\n        uint timeSet;\\n    }\\n\\n    struct TimeData {\\n        uint id;\\n        uint time;\\n        bool isMint;\\n    }\\n\\n    uint public immutable deploymentTime;\\n\\n    uint public monthlyTributeFee = 3 ether;\\n\\n    //Tax to claim honey rewards\\n    uint public claimTax = 0;\\n\\n    //Max amount the claim tax can be set (15%)\\n    uint public constant maxClaimTax = 150;\\n\\n    event MintTimeSet(uint id, uint time);\\n\\n    event ClaimTimeSet(uint id, uint time);\\n\\n    event RewardClaimed(address indexed user, uint amount);\\n\\n    ///@notice this is a list that holds the information on the rewards rates\\n    EmissionRate[] emissionRates;\\n\\n    struct FeeAllocation {\\n        address wallet;\\n        uint percent;\\n    }\\n\\n    // List of wallet addresses and percentages to allocate mint fees\\n    FeeAllocation[] feeAllocations;\\n\\n    constructor(address _HiveGenesis, address _honeyContract, address _charity, address _rewardPool, address _treasuryPool, uint _deploymentTime) {\\n\\n        hiveGenesis = IHiveGenesisContract(_HiveGenesis);\\n\\n        rewardPool = IRewardPool(_rewardPool);\\n\\n        honeyContract = IERC20(_honeyContract);\\n\\n        treasuryPool = _treasuryPool;\\n\\n        charity = _charity;\\n\\n        deploymentTime = _deploymentTime;\\n\\n    }\\n\\n    //Pay maintanence fees for multiple nfts, for a set number of months\\n    function payMultipleMaintenanceFees(uint[] calldata _ids, uint[] calldata _numMonths) external payable {\\n\\n        uint feePerMonth = monthlyTributeFee;\\n        uint fee;\\n        \\n        require(_numMonths.length == _ids.length, \\\"arrays need to be the same length\\\");\\n\\n        for(uint i = 0; i < _ids.length; i++) {\\n\\n            require(nextTimePeriodToPayFee[_ids[i]] > 0, \\\"Next time to pay should be Greator than zero\\\");\\n\\n            uint numberMonths = _numMonths[i];\\n\\n            uint nextTimePeriod = nextTimePeriodToPayFee[_ids[i]];\\n\\n            fee += numberMonths * feePerMonth;\\n\\n            nextTimePeriod += (numberMonths * subscriptionInterval);\\n\\n            //make sure the amount of time being purchased doesn't cover maintanence for over 90 days\\n            require((block.timestamp + 90 days) >= nextTimePeriod, \\\"Can only maintain up to 90 days in advance\\\");\\n\\n            nextTimePeriodToPayFee[_ids[i]] = nextTimePeriod;\\n\\n        }\\n\\n        require(fee == msg.value, \\\"incorrect fee\\\");\\n\\n        //Transfer\\n        (bool sent,) = payable(treasuryPool).call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send matic\\\");\\n\\n    }\\n\\n    function claimRewards(uint[] calldata ids, uint percentToCharity) external {\\n\\n        require(percentToCharity <= BASIS_POINTS, \\\"Can't give more than 100% to charity\\\");\\n\\n        uint id;\\n        uint amount;\\n\\n        EmissionRate[] memory rates = emissionRates;\\n        uint ratesIndex = rates.length - 1;\\n\\n        for(uint i = 0; i < ids.length; i++) {\\n\\n            id = ids[i];\\n\\n            require(isMaintenanceFeePaid(id), \\\"Please pay maintainance fee before claiming reward!\\\");\\n            require(hiveGenesis.ownerOf(id) == msg.sender, \\\"Reward claimer is not the owner of the NFT\\\");\\n\\n            if(lastClaimedTimestamp[id] == 0) {\\n\\n                continue;\\n\\n            }\\n           \\n            amount += calculateReward(id, rates);\\n            \\n            if(rewardsIndexLastClaimed[id] !=  ratesIndex) {\\n                rewardsIndexLastClaimed[id] = ratesIndex;\\n            }\\n\\n            lastClaimedTimestamp[id] = block.timestamp;\\n\\n        }\\n\\n        require(amount > 0, \\\"No tokens to claim\\\");\\n\\n        internalClaimReward(amount, percentToCharity);\\n\\n    }\\n\\n    function internalClaimReward(uint _amount, uint _percentCharity) internal {\\n\\n        uint toCharity = (_amount * _percentCharity) / BASIS_POINTS;\\n\\n        uint toUser =  _amount - toCharity;\\n\\n        if(claimTax > 0) {\\n\\n            uint tax = (toUser * claimTax) / BASIS_POINTS;\\n\\n            toUser -= tax;\\n\\n            rewardPool.ClaimReward(tax, address(this));\\n\\n        }\\n\\n        if(toUser > 0) {\\n\\n            rewardPool.ClaimReward(toUser, msg.sender);\\n\\n        }\\n\\n        if(toCharity > 0) {\\n\\n            rewardPool.ClaimReward(toCharity, charity);\\n\\n        }\\n\\n        emit RewardClaimed(msg.sender, _amount);\\n\\n    }\\n\\n    //Calculate the reward earned for a paricular token, without rebase\\n    function calculateReward(uint id, EmissionRate[] memory rates) private view returns(uint256) {\\n\\n        uint lastClaimed = lastClaimedTimestamp[id];\\n\\n\\n\\n        uint rewardsIndex = rewardsIndexLastClaimed[id];\\n        uint emissionLength = emissionRates.length;\\n\\n        if(rewardsIndex == emissionLength - 1) {\\n\\n            uint256 timeDifference = block.timestamp - lastClaimed;\\n\\n            return (timeDifference * internalGetTokenEmissionRate(id, emissionRates[rewardsIndex]));\\n\\n        } else {\\n\\n            ///@notice the rewards index isn't the last index in the emission list, meaning the rewards rates have changed since this token last claimed\\n            uint total;\\n            uint timeBetween;\\n            uint updateTime;\\n\\n            for(uint i = rewardsIndex; i < emissionLength; i++) {\\n\\n                if(i < emissionLength - 1) {\\n\\n                    updateTime = rates[i + 1].timeSet;\\n\\n                    if(lastClaimed > updateTime) {\\n                        ///@notice this handles the case where a nft was minted after rewards were updated, we skip this reward rate in this case\\n                        continue;\\n                    }\\n\\n                    ///@notice need to find when the next update happened to calculate when this current rate stopped\\n                    timeBetween = updateTime - lastClaimed;\\n\\n                    lastClaimed = updateTime;\\n\\n                } else {\\n\\n                    ///@notice this is the last in the loop, so there is no future updates\\n                    timeBetween = block.timestamp - lastClaimed;\\n\\n                }\\n\\n                total += (timeBetween * internalGetTokenEmissionRate(id, rates[i]));\\n\\n            }\\n\\n            return total;\\n\\n        }\\n         \\n    }\\n\\n    /**\\n    * @dev Get the rate of token generation for a nft\\n    */\\n    function getTokensEmissionRate(uint _tokenId) external view returns(uint) {\\n\\n        EmissionRate memory _emissionRate = emissionRates[emissionRates.length - 1]; \\n\\n        return internalGetTokenEmissionRate(_tokenId, _emissionRate);\\n\\n    }\\n\\n    /**\\n    * @dev Get the rate of token generation for a nft, internal version to save gas\\n    */\\n    function internalGetTokenEmissionRate(uint _tokenId, EmissionRate memory _emissionRate) internal view returns(uint) {\\n\\n        uint customEmissions = customEmissionRate[_tokenId];\\n\\n        if(customEmissions > 0) {\\n            return (customEmissions * _emissionRate.customMultiplier) / BASIS_POINTS;\\n        }\\n\\n        for(uint i = 0; i < _emissionRate.rates.length; i++) {\\n\\n            if(_tokenId < _emissionRate.ranges[i]) {\\n                return  _emissionRate.rates[i];\\n            }\\n\\n        }\\n\\n        return 0;\\n\\n    }\\n\\n    //Calculate the rewards for multiple tokens\\n    ///@notice this will mostly be called by the front end application\\n    function getTokenRewards(uint[] calldata ids) external view returns(uint[] memory) {\\n\\n        EmissionRate[] memory rates = emissionRates;\\n\\n        uint[] memory rewards = new uint[] (ids.length);\\n\\n        //calculate the rewards for each token Id\\n        for(uint i = 0; i < ids.length; i++) {\\n\\n            uint id = ids[i];\\n\\n            uint lastClaimed = lastClaimedTimestamp[id];\\n\\n            uint rewardsIndex = rewardsIndexLastClaimed[id];\\n            uint emissionLength = emissionRates.length;\\n\\n            if(rewardsIndex == emissionLength - 1) {\\n\\n                uint timeDifference = block.timestamp - lastClaimed;\\n\\n                rewards[i] = (timeDifference * internalGetTokenEmissionRate(id, emissionRates[rewardsIndex]));\\n\\n            } else {\\n\\n                ///@notice the rewards index isn't the last index in the emission list, meaning the rewards rates have changed since this token last claimed\\n                uint total;\\n                uint timeBetween;\\n                uint updateTime;\\n\\n                for(uint j = rewardsIndex; j < emissionLength; j++) {\\n\\n                    if(j < emissionLength - 1) {\\n\\n                        updateTime = rates[j + 1].timeSet;\\n\\n                        if(lastClaimed > updateTime) {\\n                            ///@notice this handles the case where a nft was minted after rewards were updated, we skip this reward rate in this case\\n                            continue;\\n                        }\\n\\n                        ///@notice need to find when the next update happened to calculate when this current rate stopped\\n                        timeBetween = updateTime - lastClaimed;\\n\\n                        lastClaimed = updateTime;\\n\\n                    } else {\\n\\n                        ///@notice this is the last in the loop, so there is no future updates\\n                        timeBetween = block.timestamp - lastClaimed;\\n\\n                    }\\n\\n                    total += (timeBetween * internalGetTokenEmissionRate(id, rates[j]));\\n\\n                }\\n\\n                rewards[i] = total;\\n\\n            }\\n\\n\\n        }\\n\\n        return rewards;\\n         \\n    }\\n\\n    //Returns bool, whether maintainance fee is paid or not.\\n    function isMaintenanceFeePaid(uint id) public view returns(bool) {\\n        return (nextTimePeriodToPayFee[id] > block.timestamp);\\n    }\\n\\n    /**\\n    * @dev used in setup and minting to set the last claimed timestamps\\n    */\\n    function setLastClaimed(TimeData[] calldata timeDataArray) external {\\n\\n        require(msg.sender == acceptedAddress, \\\"can only be called by accepted address\\\");\\n\\n        for(uint i = 0; i < timeDataArray.length; i++) {\\n\\n            TimeData memory data = timeDataArray[i];\\n\\n            require(data.time <= block.timestamp, \\\"has has to be less than current time\\\");\\n\\n            if (data.isMint) {\\n                require(data.time >= deploymentTime, \\\"cant set before deployment time\\\");\\n                require(lastClaimedTimestamp[data.id] == 0, \\\"Already set\\\");\\n                require(hiveGenesis.ownerOf(data.id) != address(0), \\\"Token doesn't exist\\\");\\n                nextTimePeriodToPayFee[data.id] = data.time + subscriptionInterval;\\n                \\n\\n            } else {\\n                require(setup, \\\"Can't call after initial setup\\\");\\n                require(lastClaimedTimestamp[data.id] > 0, \\\"Minting time not set\\\");\\n\\n                if(data.time < lastClaimedTimestamp[data.id]) {\\n                    continue;\\n                }\\n            }\\n\\n            lastClaimedTimestamp[data.id] = data.time;\\n\\n        }\\n    }\\n\\n    /**\\n    * @dev set the address that can set values to sync this contract with the nft contract\\n    * only the owners can call\\n    */\\n    function setAcceptedAddress(address _address) external onlyOwner {\\n\\n        acceptedAddress = _address;\\n\\n    }\\n\\n    /**\\n    * @dev Set the timestamps of every token that has paid maintance on the nft contract past the initial maintanence\\n    */\\n    function setMaintanenceFeePaid(uint[] calldata _ids, uint[] calldata _timestamps) external onlyOwner {\\n\\n        require(setup, \\\"Cant call after initial setup\\\");\\n        require(_ids.length == _timestamps.length, \\\"Arrays need to be the same length\\\");\\n\\n        for(uint i = 0; i < _ids.length; i++) {\\n\\n            nextTimePeriodToPayFee[_ids[i]] = _timestamps[i];\\n\\n        }\\n\\n    }\\n\\n    /**\\n    * @dev sets the custom emmission rates of queens, can only be called once, and only by the owners\\n    */\\n    function setCustomEmmissionsRate(uint[] calldata ids, uint[] calldata values) external onlyOwner {\\n\\n        require(customEmissionRate[1] == 0, \\\"Rates have already been set\\\");\\n\\n        require(ids.length == values.length, \\\"Lengths should be the same\\\");\\n\\n        for(uint i = 0; i < ids.length; i++) {\\n\\n            customEmissionRate[ids[i]] = values[i];\\n\\n        }\\n\\n    }\\n\\n    /**\\n    * @dev Changes the token generation rate of the nfts\\n    * Requires the sender to be the owner of this address\\n    */\\n    function setEmissionRates(uint[] calldata _ranges, uint[] calldata _rates, uint _customMultiplier) onlyOwner external {\\n\\n        require(_ranges.length == _rates.length, \\\"rates and ranges should be the same length\\\");\\n\\n        emissionRates.push(EmissionRate(_customMultiplier, _rates, _ranges, block.timestamp));\\n\\n    }\\n\\n\\n    /**\\n    @dev set the initial emission rate\\n    */\\n    function setInitialEmissionRates(uint[] calldata _ranges, uint[] calldata _rates, uint _customMultiplier) onlyOwner external {\\n\\n        require(setup, \\\"Can only be called in setup\\\");\\n\\n        require(_ranges.length == _rates.length, \\\"rates and ranges should be the same length\\\");\\n\\n        emissionRates.push(EmissionRate(_customMultiplier, _rates, _ranges, deploymentTime));\\n\\n    }\\n\\n    /**\\n    * @dev Change the monthly maintance fee cost required in order to claim rewards\\n    */\\n    function setMonthlyTributeFee(uint _fee) external onlyOwner {\\n\\n        monthlyTributeFee = _fee;\\n\\n    }\\n\\n    /**\\n    * @dev Sets how the fees will be allocated when withdrawn\\n    * Requires the caller to be the owner of the contract\\n    */\\n    function setFeeAllocations(address[] calldata wallets, uint[] calldata percents) external onlyOwner {\\n\\n        require(wallets.length == percents.length, \\\"wallets and percents need to be the same length\\\");\\n\\n        if(feeAllocations.length > 0) {\\n            //delete the previous array to prevent previous values from remaining\\n            delete feeAllocations;\\n        }\\n\\n        uint totalPercent;\\n\\n        for(uint i = 0; i < wallets.length; i++) {\\n\\n            FeeAllocation memory feeAllocation = FeeAllocation(wallets[i], percents[i]);\\n\\n            totalPercent += feeAllocation.percent;\\n           \\n            feeAllocations.push(feeAllocation);\\n\\n        }\\n\\n        require(totalPercent == BASIS_POINTS, \\\"Total percent does not add to 100%\\\");\\n\\n    }\\n\\n    /**\\n    * @dev Claim the mints not send to the rewards pool, and send the honey + matic to the appropriate wallets, in the appropriate ratio\\n    * Requires the caller to be the owner of the contract\\n    */\\n    function claimFees() external onlyOwner {\\n\\n        FeeAllocation[] memory _feeAllocations = feeAllocations;\\n\\n        require(_feeAllocations.length > 0, \\\"Fee allocations not set\\\");\\n\\n        uint maticBalance = address(this).balance;\\n\\n        uint honeyBalance = honeyContract.balanceOf(address(this));\\n\\n\\n        for(uint i = 0; i < _feeAllocations.length; i++) {\\n\\n            uint maticToClaim = (maticBalance * _feeAllocations[i].percent) / BASIS_POINTS;\\n\\n            uint honeyToClaim = (honeyBalance * _feeAllocations[i].percent) / BASIS_POINTS;\\n\\n            if(honeyToClaim > 0) {\\n                honeyContract.transfer(_feeAllocations[i].wallet, honeyToClaim);\\n            }\\n\\n            if(maticToClaim > 0) {\\n\\n                (bool sent, ) = _feeAllocations[i].wallet.call{value: maticToClaim}(\\\"\\\");\\n                require(sent, \\\"Failed to send Matic\\\");\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n    /**\\n    * @dev set a tax on claiming honey\\n    * Requires the caller to be the owner of the contract\\n    */\\n    function setClaimTax(uint _claimTax) external onlyOwner {\\n\\n        require(_claimTax <= maxClaimTax, \\\"Attempting to set claim tax above max\\\");\\n\\n        claimTax = _claimTax;\\n\\n    }\\n\\n    /**\\n    * @dev prevents setting the last time claimed for any token other than on mint\\n    */\\n    function stopSetup() external onlyOwner {\\n\\n        setup = false;\\n\\n    }\\n\\n\\n    receive() external payable {}\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\ninterface IRewardPool {\\n\\n    function ClaimReward(uint _amount, address _address) external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_HiveGenesis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_honeyContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deploymentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MintTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"percentToCharity\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customEmissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getTokenRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokensEmissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isMaintenanceFeePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaimTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthlyTributeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextTimePeriodToPayFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numMonths\",\"type\":\"uint256[]\"}],\"name\":\"payMultipleMaintenanceFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsIndexLastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcceptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTax\",\"type\":\"uint256\"}],\"name\":\"setClaimTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setCustomEmmissionsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ranges\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_customMultiplier\",\"type\":\"uint256\"}],\"name\":\"setEmissionRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"}],\"name\":\"setFeeAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ranges\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_customMultiplier\",\"type\":\"uint256\"}],\"name\":\"setInitialEmissionRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMint\",\"type\":\"bool\"}],\"internalType\":\"struct HiveMaintenanceFees.TimeData[]\",\"name\":\"timeDataArray\",\"type\":\"tuple[]\"}],\"name\":\"setLastClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"setMaintanenceFeePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMonthlyTributeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HiveMaintenanceFees", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000019e46be2e3ad8968a6230c8fb140c4ccabc3ce0d0000000000000000000000001fa2f83ba2df61c3d370071d61b17be01e224f3a000000000000000000000000f9fbfd791305eed974ca2dfd374a9909cf3e12110000000000000000000000007775695ea68a2ef91bcb1b06434b8e454c17056f000000000000000000000000e8813bef9621392408575e797dbc4144b69cb4e100000000000000000000000000000000000000000000000000000000624270a3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}