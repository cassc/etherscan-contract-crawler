{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\ncontract StakingRewards {\r\n    IERC20 public KRL;\r\n    uint256 private rewardRate = 9737802706552708;\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public userTimeLock;\r\n    mapping(address => uint256) public userLastupdate;\r\n\r\n    uint public _totalSupply;\r\n    mapping(address => uint256) public _balances;\r\n\r\n    constructor(address _KRL) {\r\n        KRL = IERC20(_KRL);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        return rewardRate;\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 __time = userLastupdate[account];\r\n        uint256 stakedTime = block.timestamp - __time;\r\n        uint256 totalReward = stakedTime * (rewardRate * _balances[account]) / 10 ** 42;\r\n        return (totalReward - rewards[account]);\r\n    }\r\n    \r\n    function estimate(uint256 _bal, uint256 _time, bool _wei) public view returns(uint256){\r\n        if (_wei == true) {\r\n            return (_time * (rewardRate * _bal) )/ 10 ** 42;\r\n        }\r\n        return (_time * (rewardRate * _bal)) / 10 ** 24;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function currentReward(address account) public view returns (uint256) {\r\n        return rewards[account];\r\n    }\r\n    \r\n    function totalRewardsEarned(address account) public view returns (uint256) {\r\n        return userRewardPerTokenPaid[account];\r\n    }\r\n    \r\n    function stakePeriod(address account) public view returns (uint256) {\r\n        return userTimeLock[account] * 1 weeks;\r\n    }\r\n    \r\n    function stake(uint _amount, uint duration) external {\r\n        require(duration <= 52, 'Duration should be less than 52 weeks');\r\n        if (_balances[msg.sender] > 1) {\r\n            _getReward(msg.sender);\r\n        }\r\n        _totalSupply += _amount;\r\n        _balances[msg.sender] += _amount;\r\n        userTimeLock[msg.sender] = duration;\r\n        userLastupdate[msg.sender] = block.timestamp;\r\n        rewards[msg.sender] = 0;\r\n        KRL.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        uint __time = userLastupdate[msg.sender] + (userTimeLock[msg.sender] * 1 weeks);\r\n        require(block.timestamp >= __time, 'UserError: TOKEN LOCK PERIOD');\r\n        if (_balances[msg.sender] > 1) {\r\n            _getReward(msg.sender);\r\n        }\r\n        _totalSupply -= _amount;\r\n        _balances[msg.sender] -= _amount;\r\n        userLastupdate[msg.sender] = block.timestamp;\r\n        rewards[msg.sender] = 0;\r\n        KRL.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function getReward() external {\r\n        _getReward(msg.sender);\r\n    }\r\n    \r\n    function _getReward(address account) internal {\r\n        uint reward = earned(account);\r\n        rewards[account] += reward;\r\n        userRewardPerTokenPaid[account] += reward;\r\n        KRL.transfer(account, reward);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_KRL\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KRL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wei\",\"type\":\"bool\"}],\"name\":\"estimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastupdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c17b109e146934d36c33e55fade9cbda791b0366", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0070e113af7f2cd97750cb0c0d993746c01cab0768b158760e7ebf9af6dbc44f"}