{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/markets/MarketFundingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { ParentFundingPool } from \\\"../funding/ParentFundingPool.sol\\\";\\nimport { AdminExecutorAccess } from \\\"../AdminExecutorAccess.sol\\\";\\nimport { IConditionalTokens } from \\\"../conditions/IConditionalTokens.sol\\\";\\nimport { MarketMakerFactory, MarketMaker, IERC20Metadata } from \\\"./MarketMakerFactory.sol\\\";\\n\\ninterface MarketFundingPoolErrors {\\n    error InvalidLimitsArray();\\n}\\n\\n/// @dev This acts as a central Liquidity Pool for all created markets, and\\n/// ensures that the markets can be trusted by including the factory. Batch\\n/// market creation with approval is possible\\ncontract MarketFundingPool is ParentFundingPool, MarketFundingPoolErrors {\\n    struct Params {\\n        IConditionalTokens conditionalTokens;\\n        IERC20Metadata collateralToken;\\n        address admin;\\n        address executor;\\n    }\\n\\n    IConditionalTokens public immutable conditionalTokens;\\n    MarketMakerFactory public immutable factory;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(Params memory params) ParentFundingPool(params.admin, params.collateralToken) {\\n        conditionalTokens = params.conditionalTokens;\\n        factory = new MarketMakerFactory();\\n\\n        _grantRole(EXECUTOR_ROLE, params.executor);\\n    }\\n\\n    /// @dev Create markets and approve them as child markets, so they can\\n    /// request funding directly from this pool. The function is idempotent, so\\n    /// if a market was already created, or approved, it will not fail and just\\n    /// succeed gracefully\\n    function createMarketsWithPrices(\\n        address priceOracle,\\n        address conditionOracle,\\n        uint256 fee,\\n        uint256[] calldata marketLimits,\\n        MarketMakerFactory.PriceMarketParams[] calldata marketParamsArray\\n    ) external returns (MarketMaker[] memory markets) {\\n        if (marketLimits.length != marketParamsArray.length) revert InvalidLimitsArray();\\n\\n        markets = new MarketMaker[](marketParamsArray.length);\\n\\n        MarketMaker.AddressParams memory addresses =\\n            MarketMaker.AddressParams(conditionalTokens, collateralToken, address(this), priceOracle, conditionOracle);\\n\\n        for (uint256 i = 0; i < marketParamsArray.length; ++i) {\\n            MarketMaker market = factory.createMarket(fee, addresses, marketParamsArray[i]);\\n            markets[i] = market;\\n            setApprovalForChild(address(market), marketLimits[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/funding/ParentFundingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { FundingPool, IFundingPoolV1, FundingMath } from \\\"./FundingPool.sol\\\";\\nimport { IParentFundingPoolV1 } from \\\"./IParentFundingPoolV1.sol\\\";\\nimport { IChildFundingPoolV1 } from \\\"./IChildFundingPoolV1.sol\\\";\\nimport { ClampedMath } from \\\"../Math.sol\\\";\\nimport { AdminExecutorAccess } from \\\"../AdminExecutorAccess.sol\\\";\\n\\ncontract ParentFundingPool is FundingPool, IParentFundingPoolV1, AdminExecutorAccess {\\n    using ERC165Checker for address;\\n    using ClampedMath for uint256;\\n    using Math for uint256;\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20Upgradeable for IFundingPoolV1;\\n\\n    struct FunderShareRemovals {\\n        uint256 removedAsCollateral;\\n        uint256 removedAsChildShares;\\n    }\\n\\n    /// @dev Current state of investement in a child pool\\n    struct ChildValue {\\n        /// @dev How much collateral is locked up in a child pool\\n        uint256 locked;\\n        /// @dev realized losses or gains by child when returning funds\\n        int256 pnl;\\n    }\\n\\n    /// @dev a struct to keep track of the current state of pool during liquidity removal\\n    struct RemovalContext {\\n        uint256 currentFunderShares;\\n        uint256 totalShares;\\n        uint256 poolValue;\\n        uint256 totalChildValueLocked;\\n        FunderShareRemovals removals;\\n    }\\n\\n    /// @dev What is the maximum any child fund can request. Managed by DEFAULT_ADMIN_ROLE\\n    uint256 public requestLimit;\\n\\n    /// @dev What is the maximum a particular child fund can request to be funded. Managed by FUND_MANAGER_ROLE\\n    mapping(address => uint256) private childApproval;\\n    bytes4 private constant FUNDING_POOL_INTERFACE_ID = 0x0dc4a76a;\\n    bytes4 private constant CHILD_POOL_INTERFACE_ID = 0xd2da4040;\\n\\n    /// @dev How much collateral is used up in a child pool\\n    mapping(address => ChildValue) private childValue;\\n    /// @dev current value locked in all child pools\\n    uint256 public totalChildValueLocked;\\n\\n    /// @dev Keeps track of how many shares were directly exchanged for\\n    /// \\\"unlocked\\\"/\\\"locked\\\" collateral in the pool. Used to prevent funders\\n    /// withdrawing all their shares only in collateral, leaving other funders\\n    /// stuck with only locked liquidity.\\n    mapping(address => FunderShareRemovals) private funderShareRemovals;\\n    mapping(address => mapping(address => uint256)) private funderShareRemovalsForChild;\\n\\n    // Move into interface\\n    error InvalidBatchLength();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address admin, IERC20Metadata _collateralToken) AdminExecutorAccess(admin) {\\n        // The contract is not meant to be upgradeable or run behind a proxy,\\n        // but uses upgradeable base contracts because it shares some base\\n        // classes with other contracts that need to be behind a proxy\\n        initialize(_collateralToken);\\n        _disableInitializers();\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function addFunding(uint256 collateralAdded) external returns (uint256 sharesMinted) {\\n        return addFundingFor(_msgSender(), collateralAdded);\\n    }\\n\\n    /// @inheritdoc IParentFundingPoolV1\\n    function requestFunding(uint256 collateralRequested)\\n        external\\n        whenNotPaused\\n        returns (uint256 collateralAdded, uint256 sharesMinted)\\n    {\\n        IFundingPoolV1 childPool = _childPoolSender();\\n\\n        // how much is remaining to be requested from the limit and collateral\\n        (uint256 limitRemaining,) = getAvailableFunding(address(childPool));\\n\\n        // clamp collateralRequested to the limit\\n        collateralAdded = Math.min(limitRemaining, collateralRequested);\\n\\n        if (collateralAdded > 0) {\\n            childValue[address(childPool)].locked += collateralAdded;\\n            totalChildValueLocked += collateralAdded;\\n            collateralToken.safeApprove(address(childPool), collateralAdded);\\n            sharesMinted = childPool.addFunding(collateralAdded);\\n\\n            emit FundingGiven(address(childPool), collateralAdded);\\n\\n            // NOTE: currently childPool cannot be completely trustless, as\\n            // childPool itself is the ERC20 fund share token, which means it\\n            // can burn shares without the knowledge of the parent, in effect\\n            // keeping all the funds. This is at least mitigated by the fact\\n            // that a child pool cannot exceed its limit.\\n        }\\n    }\\n\\n    /// @notice Set the maximum any child fund can request.\\n    function setRequestLimit(uint256 limit) external onlyAdmin {\\n        requestLimit = limit;\\n        emit RequestLimitChanged(limit);\\n    }\\n\\n    /// @dev This entirely depends on trusting the child pool to report\\n    /// fundingReturned correctly. This is accomplished here because this single pool\\n    /// controls exactly what code the child pool (markets) are running. In a\\n    /// future implementation it would be better to express pool ownership\\n    /// through ERC1155 tokens, and utilize the ERC1155Receiver functionality to\\n    /// automatically be called back when shares are returned.\\n    function fundingReturned(uint256 collateralReturned, uint256 childSharesBurnt) external {\\n        IFundingPoolV1 childPool = _childPoolSender();\\n        uint256 childSharesBefore = childPool.balanceOf(address(this)) + childSharesBurnt;\\n\\n        ChildValue storage child = childValue[address(childPool)];\\n        uint256 valueLocked = child.locked;\\n        uint256 valueUnlocked = childSharesBefore > 0 ? (childSharesBurnt * valueLocked) / childSharesBefore : 0;\\n\\n        if (collateralReturned > uint256(type(int256).max)) revert ExcessiveFunding();\\n        assert(valueUnlocked <= uint256(type(int256).max));\\n        child.locked = valueLocked - valueUnlocked;\\n        child.pnl += int256(collateralReturned) - int256(valueUnlocked);\\n        totalChildValueLocked -= valueUnlocked;\\n\\n        emit FundingReturned(address(childPool), collateralReturned, valueUnlocked);\\n    }\\n\\n    function feesReturned(uint256 fees) external {\\n        _checkChildPool(_msgSender());\\n        _retainFees(fees);\\n    }\\n\\n    /// @dev Remove liquidity in collateral by burning a portion of the funder's shares.\\n    /// The proportion of shares that can be removed this way cannot exceed the\\n    /// proportion of collateral in the parent pool. To maximize the amount of\\n    /// collateral removed, do collateral removal first before trying to remove\\n    /// liquidity as child shares.\\n    /// @param sharesToBurn How many funder shares to burn\\n    /// @return collateralReturned How much collateral was returned\\n    /// @return sharesBurnt How much many shares were burnt\\n    function removeCollateral(uint256 sharesToBurn)\\n        external\\n        whenNotPaused\\n        returns (uint256 collateralReturned, uint256 sharesBurnt)\\n    {\\n        address funder = _msgSender();\\n        (collateralReturned, sharesBurnt) = calcRemoveCollateral(funder, sharesToBurn);\\n        if (sharesBurnt == 0) return (collateralReturned, sharesBurnt);\\n\\n        funderShareRemovals[funder].removedAsCollateral += sharesBurnt;\\n        _burnSharesOf(funder, sharesBurnt);\\n        collateralToken.safeTransfer(funder, collateralReturned);\\n\\n        uint256[] memory noTokens = new uint256[](0);\\n        emit FundingRemoved(funder, collateralReturned, noTokens, sharesBurnt);\\n    }\\n\\n    /// @dev Remove liquidity in assets by burning a portion of the funder's shares.\\n    /// The proportion of a funder's shares that can be removed in terms of a\\n    /// particular child pool's shares cannot exceed the proportion of liquidity\\n    /// in that child pool among all child pools\\n    /// @param child address of child pool\\n    /// @param sharesToBurn How many funder shares to burn\\n    function removeChildShares(address child, uint256 sharesToBurn)\\n        external\\n        whenNotPaused\\n        returns (uint256 childSharesReturned, uint256 sharesBurnt)\\n    {\\n        IFundingPoolV1 childPool = _childPool(child);\\n        address funder = _msgSender();\\n\\n        mapping(address => uint256) storage removalsForChild = funderShareRemovalsForChild[funder];\\n        RemovalContext memory context = _getRemovalContext(funder);\\n\\n        (childSharesReturned, sharesBurnt) = _removeChildShares(childPool, context, sharesToBurn, removalsForChild);\\n\\n        if (childSharesReturned > 0) {\\n            assert(sharesBurnt > 0);\\n            // Update state\\n            funderShareRemovals[funder] = context.removals;\\n            totalChildValueLocked = context.totalChildValueLocked;\\n\\n            // Burn and transfer\\n            childPool.safeTransfer(funder, childSharesReturned);\\n            emit FundingRemovedAsToken(funder, uint256(bytes32(bytes20(child))), childSharesReturned, sharesBurnt);\\n            _burnSharesOf(funder, sharesBurnt);\\n        } else {\\n            assert(sharesBurnt == 0);\\n        }\\n    }\\n\\n    function batchRemoveChildShares(address[] calldata children, uint256[] calldata sharesToBurn)\\n        external\\n        whenNotPaused\\n        returns (uint256 totalSharesBurnt)\\n    {\\n        if (children.length != sharesToBurn.length) revert InvalidBatchLength();\\n\\n        address funder = _msgSender();\\n\\n        mapping(address => uint256) storage removalsForChild = funderShareRemovalsForChild[funder];\\n        RemovalContext memory context = _getRemovalContext(funder);\\n\\n        for (uint256 i = 0; i < children.length; ++i) {\\n            IFundingPoolV1 childPool = _childPool(children[i]);\\n\\n            (uint256 childSharesReturned, uint256 sharesBurnt) =\\n                _removeChildShares(childPool, context, sharesToBurn[i], removalsForChild);\\n            totalSharesBurnt += sharesBurnt;\\n\\n            if (childSharesReturned > 0) {\\n                assert(sharesBurnt > 0);\\n\\n                childPool.safeTransfer(funder, childSharesReturned);\\n                emit FundingRemovedAsToken(\\n                    funder, uint256(bytes32(bytes20(children[i]))), childSharesReturned, sharesBurnt\\n                );\\n            } else {\\n                assert(sharesBurnt == 0);\\n            }\\n        }\\n\\n        // Update state and burn\\n        funderShareRemovals[funder] = context.removals;\\n        totalChildValueLocked = context.totalChildValueLocked;\\n\\n        _burnSharesOf(funder, totalSharesBurnt);\\n    }\\n\\n    /// @param sharesToBurn How many funder shares to burn\\n    /// @return collateralReturned How much collateral was returned\\n    /// @return sharesBurnt How much many shares were burnt\\n    function calcRemoveCollateral(address funder, uint256 sharesToBurn)\\n        public\\n        view\\n        returns (uint256 collateralReturned, uint256 sharesBurnt)\\n    {\\n        uint256 _reserves = reserves();\\n        uint256 poolValue = _getPoolValue();\\n        if (poolValue == 0) revert PoolValueZero();\\n\\n        FunderShareRemovals memory removals = funderShareRemovals[funder];\\n\\n        uint256 funderTotalShares = balanceOf(funder) + removals.removedAsCollateral;\\n        sharesBurnt = FundingMath.calcMaxParentSharesToBurnForAsset(\\n            funderTotalShares, sharesToBurn, removals.removedAsCollateral, _reserves, poolValue\\n        );\\n        if (sharesBurnt == 0) return (collateralReturned, sharesBurnt);\\n\\n        collateralReturned = FundingMath.calcReturnAmount(sharesBurnt, totalSupply(), poolValue);\\n        collateralReturned = Math.min(collateralReturned, _reserves);\\n    }\\n\\n    /// @inheritdoc IParentFundingPoolV1\\n    function setApprovalForChild(address childPool, uint256 approval) public onlyExecutor {\\n        // If approving, require not to be paused\\n        // If removing approval, can be paused\\n        if (approval > 0) {\\n            _requireNotPaused();\\n        }\\n\\n        // reduce gas cost if approval matches the previous value\\n        if (childApproval[childPool] == approval) return;\\n\\n        bool supportsFundingPool = childPool.supportsInterface(FUNDING_POOL_INTERFACE_ID);\\n        if (!supportsFundingPool) revert NotAChildPool(childPool);\\n\\n        bool supportsChildPool = childPool.supportsInterface(CHILD_POOL_INTERFACE_ID);\\n        if (!(supportsChildPool && IChildFundingPoolV1(childPool).getParentPool() == address(this))) {\\n            revert NotAChildPool(childPool);\\n        }\\n\\n        childApproval[childPool] = approval;\\n\\n        emit ChildPoolApproval(childPool, approval);\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function addFundingFor(address receiver, uint256 collateralAdded)\\n        public\\n        whenNotPaused\\n        returns (uint256 sharesMinted)\\n    {\\n        sharesMinted = _mintSharesFor(receiver, collateralAdded, _getPoolValue());\\n    }\\n\\n    /// @inheritdoc IParentFundingPoolV1\\n    function getAvailableFunding(address childPool)\\n        public\\n        view\\n        returns (uint256 availableFunding, uint256 availableTarget)\\n    {\\n        uint256 poolValue = _getPoolValue();\\n        uint256 globalTarget = getTotalFunderCostBasis();\\n\\n        availableTarget = Math.min(requestLimit, childApproval[childPool]);\\n        availableTarget = Math.min(globalTarget, availableTarget);\\n        availableFunding = availableTarget;\\n\\n        // Adjust the available funding down by the same proportion as the overall pool\\n        // value is relative to the target for this parent pool\\n        if (globalTarget > 0) {\\n            // do not increase funding if we exceed the target\\n            poolValue = Math.min(poolValue, globalTarget);\\n            availableFunding = (availableFunding * poolValue) / globalTarget;\\n        }\\n\\n        // remaining target after taking into account how much was already spent\\n        ChildValue memory child = childValue[childPool];\\n        availableTarget = availableTarget.subClamp(child.locked);\\n        availableFunding = availableFunding.subClamp(child.locked);\\n\\n        // Available funding takes into account how much was lost or gained by the child\\n        availableFunding = Math.min(reserves(), availableFunding.addClamp(child.pnl));\\n    }\\n\\n    function getApprovalForChild(address childPool) public view returns (uint256) {\\n        return childApproval[childPool];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165Upgradeable, AccessControl)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IParentFundingPoolV1).interfaceId || interfaceId == type(IFundingPoolV1).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, Context) returns (address) {\\n        return Context._msgSender();\\n    }\\n\\n    // Have to override, otherwise does not compile\\n    // slither-disable-next-line dead-code\\n    function _msgData() internal view override(ContextUpgradeable, Context) returns (bytes calldata) {\\n        return Context._msgData();\\n    }\\n\\n    function _checkChildPool(address childPool) internal view {\\n        if (getApprovalForChild(childPool) == 0) revert ChildPoolNotApproved(childPool);\\n    }\\n\\n    function _childPoolSender() internal view returns (IFundingPoolV1) {\\n        return _childPool(_msgSender());\\n    }\\n\\n    function _childPool(address childPool) internal view returns (IFundingPoolV1) {\\n        _checkChildPool(childPool);\\n        // Don't need to check if childPool supports the right interfaces - that\\n        // was already done when it was approved\\n\\n        return IFundingPoolV1(childPool);\\n    }\\n\\n    function _removeChildShares(\\n        IFundingPoolV1 childPool,\\n        RemovalContext memory context,\\n        uint256 sharesToBurn,\\n        mapping(address => uint256) storage removalsForChild\\n    ) private returns (uint256 childSharesReturned, uint256 sharesBurnt) {\\n        if (sharesToBurn > context.currentFunderShares) revert InvalidBurnAmount();\\n        uint256 childLocked = childValue[address(childPool)].locked;\\n        // slither-disable-next-line dangerous-strict-equalities\\n        if (childLocked == 0) return (childSharesReturned, sharesBurnt);\\n\\n        // To explain the below two max values, let's set up a scenario\\n        // Setup:\\n        // - total 100 liquidity shares for parent pool\\n        // - 25% of value is locked in child A, 25% of value is locked in child B\\n\\n        // Calculate how many parent shares can be removed from the pool in the form of child pool shares.\\n        // Regardless of the funder, in the above scenario, only 25 liquidity\\n        // shares of the parent are convertible to child shares of A or B. This is just 25% of the total pool\\n        uint256 maxTotalSharesRedeemableForChild = (context.totalShares * childLocked).ceilDiv(context.poolValue);\\n\\n        // Limit number of funder shares redeemable to proportion of child value\\n        // of overall locked value.  In the above scenario, if a funder had 20\\n        // shares in the parent pool, they cannot convert all 20 shares for a\\n        // single child's shares. Since each child's portion of locked value is\\n        // 50%, at most 10 parent shares of the funder can be converted into\\n        // each of the child's shares. This is to limit removals where one\\n        // child's liquidity value is more advantageous to remove than another.\\n        sharesBurnt = FundingMath.calcMaxParentSharesToBurnForAsset(\\n            context.currentFunderShares + context.removals.removedAsChildShares,\\n            Math.min(sharesToBurn, maxTotalSharesRedeemableForChild),\\n            removalsForChild[address(childPool)],\\n            childLocked,\\n            context.totalChildValueLocked\\n        );\\n        if (sharesBurnt == 0) return (childSharesReturned, sharesBurnt);\\n\\n        uint256 valueReturned = FundingMath.calcReturnAmount(sharesBurnt, context.totalShares, context.poolValue);\\n        valueReturned = Math.min(valueReturned, childLocked);\\n\\n        context.removals.removedAsChildShares += sharesBurnt;\\n        removalsForChild[address(childPool)] += sharesBurnt;\\n\\n        uint256 childShares = childPool.balanceOf(address(this));\\n        childSharesReturned = (childShares * valueReturned) / childLocked;\\n\\n        context.currentFunderShares -= sharesBurnt;\\n        context.totalShares -= sharesBurnt;\\n        context.poolValue -= valueReturned;\\n        context.totalChildValueLocked -= valueReturned;\\n        childValue[address(childPool)].locked = childLocked - valueReturned;\\n    }\\n\\n    function _getRemovalContext(address funder) private view returns (RemovalContext memory) {\\n        uint256 funderShares = balanceOf(funder);\\n        uint256 poolValue = _getPoolValue();\\n\\n        // If there is no value in the pool, it doesn't make sense to remove value from it.\\n        if (poolValue == 0) revert PoolValueZero();\\n\\n        FunderShareRemovals memory removals = funderShareRemovals[funder];\\n        return RemovalContext(funderShares, totalSupply(), poolValue, totalChildValueLocked, removals);\\n    }\\n\\n    function _getPoolValue() private view returns (uint256 poolValue) {\\n        poolValue = reserves() + totalChildValueLocked;\\n    }\\n\\n    function initialize(IERC20Metadata _collateralToken) private initializer {\\n        __FundingPool_init(_collateralToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdminExecutorAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @dev Simple Access Control, that has an admin role that administers an\\n/// executor role. The intent is to have a multi-sig or other mechanism to be\\n/// the admin, and be able to grant/revoke accounts as executors.\\ncontract AdminExecutorAccess is AccessControl, Pausable {\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\n    modifier onlyAdmin() {\\n        checkAdmin(_msgSender());\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        checkExecutor(_msgSender());\\n        _;\\n    }\\n\\n    // Not upgradeable but inherited by a contract that also inherits upgradeable\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        // DEFAULT_ADMIN_ROLE already is admin for executor by default, so no need for _setRoleAdmin\\n    }\\n\\n    function pause() public onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @dev Check is a particular account has executor permissions. Reverts if not the case.\\n    /// @param account the account to check\\n    function checkExecutor(address account) public view {\\n        _checkRole(EXECUTOR_ROLE, account);\\n    }\\n\\n    function checkAdmin(address account) public view {\\n        _checkRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/conditions/IConditionalTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport { ConditionID, QuestionID } from \\\"./CTHelpers.sol\\\";\\nimport { ConditionalTokensErrors } from \\\"./ConditionalTokensErrors.sol\\\";\\n\\n/// @title Events emitted by conditional tokens\\n/// @dev Minimal interface to be used for blockchain indexing (e.g subgraph)\\ninterface IConditionalTokensEvents {\\n    /// @dev Emitted upon the successful preparation of a condition.\\n    /// @param conditionId The condition's ID. This ID may be derived from the\\n    /// other three parameters via ``keccak256(abi.encodePacked(oracle,\\n    /// questionId, outcomeSlotCount))``.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used\\n    /// for this condition. Must not exceed 256.\\n    event ConditionPreparation(\\n        ConditionID indexed conditionId, address indexed oracle, QuestionID indexed questionId, uint256 outcomeSlotCount\\n    );\\n\\n    event ConditionResolution(\\n        ConditionID indexed conditionId,\\n        address indexed oracle,\\n        QuestionID indexed questionId,\\n        uint256 outcomeSlotCount,\\n        uint256[] payoutNumerators\\n    );\\n\\n    /// @dev Emitted when a position is successfully split.\\n    event PositionSplit(\\n        address indexed stakeholder, IERC20 collateralToken, ConditionID indexed conditionId, uint256 amount\\n    );\\n    /// @dev Emitted when positions are successfully merged.\\n    event PositionsMerge(\\n        address indexed stakeholder, IERC20 collateralToken, ConditionID indexed conditionId, uint256 amount\\n    );\\n    /// @notice Emitted when a subset of outcomes are redeemed for a condition\\n    event PayoutRedemption(\\n        address indexed redeemer,\\n        IERC20 indexed collateralToken,\\n        ConditionID conditionId,\\n        uint256[] indices,\\n        uint256 payout\\n    );\\n}\\n\\ninterface IConditionalTokens is IERC1155Upgradeable, IConditionalTokensEvents, ConditionalTokensErrors {\\n    function prepareCondition(address oracle, QuestionID questionId, uint256 outcomeSlotCount)\\n        external\\n        returns (ConditionID);\\n\\n    function reportPayouts(QuestionID questionId, uint256[] calldata payouts) external;\\n\\n    function batchReportPayouts(\\n        QuestionID[] calldata questionIDs,\\n        uint256[] calldata payouts,\\n        uint256[] calldata outcomeSlotCounts\\n    ) external;\\n\\n    function splitPosition(IERC20 collateralToken, ConditionID conditionId, uint256 amount) external;\\n\\n    function mergePositions(IERC20 collateralToken, ConditionID conditionId, uint256 amount) external;\\n\\n    function redeemPositionsFor(\\n        address receiver,\\n        IERC20 collateralToken,\\n        ConditionID conditionId,\\n        uint256[] calldata indices,\\n        uint256[] calldata quantities\\n    ) external returns (uint256);\\n\\n    function redeemAll(IERC20 collateralToken, ConditionID[] calldata conditionIds, uint256[] calldata indices)\\n        external;\\n\\n    function redeemAllOf(\\n        address ownerAndReceiver,\\n        IERC20 collateralToken,\\n        ConditionID[] calldata conditionIds,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function balanceOfCondition(address account, IERC20 collateralToken, ConditionID conditionId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isResolved(ConditionID conditionId) external view returns (bool);\\n\\n    function getPositionIds(IERC20 collateralToken, ConditionID conditionId) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/markets/MarketMakerFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport { IMarketMakerV1, MarketMaker } from \\\"./MarketMaker.sol\\\";\\nimport { MarketErrors } from \\\"./MarketErrors.sol\\\";\\nimport { IConditionalTokens, ConditionID, QuestionID } from \\\"../conditions/IConditionalTokens.sol\\\";\\nimport { ArrayMath } from \\\"../Math.sol\\\";\\n\\n/// @title Events for a market factory\\n/// @dev Use these events for blockchain indexing\\ninterface IMarketFactoryEvents {\\n    event MarketMakerCreation(\\n        address indexed creator,\\n        IMarketMakerV1 marketMaker,\\n        IConditionalTokens indexed conditionalTokens,\\n        IERC20 indexed collateralToken,\\n        ConditionID conditionId,\\n        uint256 haltTime,\\n        uint256 fee\\n    );\\n}\\n\\ncontract MarketMakerFactory is MarketErrors, IMarketFactoryEvents {\\n    using ArrayMath for uint256[];\\n    using SafeERC20 for IERC20Metadata;\\n    using Address for address;\\n\\n    /// @dev Parameters unique to a single Market creation\\n    struct PriceMarketParams {\\n        QuestionID questionId;\\n        uint256[] fairPriceDecimals;\\n        uint128 minPriceDecimal;\\n        uint256 haltTime;\\n    }\\n\\n    address private immutable marketTemplate;\\n\\n    /// @notice Invalid funds parameter for create and fund\\n    error InvalidFundsLength();\\n\\n    constructor() {\\n        marketTemplate = address(new MarketMaker());\\n    }\\n\\n    /// @notice Idempotent creation function, that also creates the condition\\n    /// @dev If market has already been created, the event will not be emitted!\\n    function createMarket(uint256 fee, MarketMaker.AddressParams calldata addresses, PriceMarketParams memory params)\\n        public\\n        returns (MarketMaker)\\n    {\\n        uint256 outcomeSlotCount = params.fairPriceDecimals.length;\\n        if (outcomeSlotCount == 0) revert InvalidPrices();\\n\\n        // prepareCondition is idempotent, so should not fail if already exists\\n        ConditionID conditionId =\\n            addresses.conditionalTokens.prepareCondition(addresses.conditionOracle, params.questionId, outcomeSlotCount);\\n\\n        // The salt determines the final address of the market clone. One cannot\\n        // deploy two clones with the same salt, because they will clash in\\n        // their address and the deployment would revert.\\n        //\\n        // haltTime and fee are missing from the salt, so noone can keep\\n        // creating markets with different fees and halt times for the same\\n        // questionId.\\n        // The reason they are excluded is because they don't create a\\n        // fundamentally different identity for a market. If you change the\\n        // questionId, it's a market for a different event/bet. If you change\\n        // collateralTokens that's a market with a different payment option.\\n        // conditionalTokens is where settlement is recorded. priceOracle is who is\\n        // the authority to decide the fair prices. haltTime and fee should be\\n        // adjustable on the market itself\\n\\n        bytes32 salt = marketSalt(addresses, conditionId);\\n\\n        MarketMaker.InitParams memory initParams =\\n            MarketMaker.InitParams(conditionId, params.haltTime, fee, params.fairPriceDecimals, params.minPriceDecimal);\\n\\n        // Check if clone already exists for this salt. If it does, then we have already created and initialized it\\n        address clone = Clones.predictDeterministicAddress(marketTemplate, salt);\\n        if (clone.isContract()) {\\n            return MarketMaker(clone);\\n        }\\n\\n        address cloneActual = Clones.cloneDeterministic(marketTemplate, salt);\\n        assert(cloneActual == clone); // this always has to be true\\n\\n        MarketMaker market = MarketMaker(clone);\\n        emit MarketMakerCreation(\\n            msg.sender,\\n            market,\\n            addresses.conditionalTokens,\\n            addresses.collateralToken,\\n            initParams.conditionId,\\n            initParams.haltTime,\\n            initParams.fee\\n        );\\n\\n        market.initialize(addresses, initParams);\\n\\n        return market;\\n    }\\n\\n    /// @notice Creates markets and funds them in a single call\\n    /// @param marketParamsArray unique parameters for every market\\n    /// @return the created and funded market\\n    function createAndFundMarketsWithPrices(\\n        uint256 fee,\\n        MarketMaker.AddressParams calldata addresses,\\n        PriceMarketParams[] memory marketParamsArray,\\n        uint256[] memory addedFunds\\n    ) public returns (MarketMaker[] memory) {\\n        if (addedFunds.length != marketParamsArray.length) revert InvalidFundsLength();\\n\\n        MarketMaker[] memory markets = new MarketMaker[](marketParamsArray.length);\\n\\n        addresses.collateralToken.safeTransferFrom(msg.sender, address(this), addedFunds.sum());\\n\\n        uint256 totalToSendBack = 0;\\n        for (uint256 i = 0; i < marketParamsArray.length; ++i) {\\n            MarketMaker market = createMarket(fee, addresses, marketParamsArray[i]);\\n            markets[i] = market;\\n\\n            if (market.reserves() > 0) {\\n                // if already funded, send funds back\\n                totalToSendBack += addedFunds[i];\\n            } else if (addedFunds[i] > 0) {\\n                // otherwise fund it\\n                addresses.collateralToken.safeApprove(address(market), addedFunds[i]);\\n                // Ignore return because we don't care about liquidity shares\\n                // returned. It should equal addedFunds since this will be the first\\n                // funding\\n                // slither-disable-next-line unused-return\\n                market.addFundingFor(msg.sender, addedFunds[i]);\\n            }\\n        }\\n\\n        if (totalToSendBack > 0) {\\n            addresses.collateralToken.safeTransfer(msg.sender, totalToSendBack);\\n        }\\n\\n        return markets;\\n    }\\n\\n    /// @dev The address of a created market only depends on certain parameters.\\n    /// Use this function to determine the final creation address\\n    function predictMarketAddress(MarketMaker.AddressParams calldata addresses, ConditionID conditionId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        bytes32 salt = marketSalt(addresses, conditionId);\\n        return Clones.predictDeterministicAddress(marketTemplate, salt);\\n    }\\n\\n    /// @dev Encapsulates how we derive the salt from the creation parameters\\n    function marketSalt(MarketMaker.AddressParams calldata addresses, ConditionID conditionId)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(addresses, conditionId));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/funding/FundingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { IFundingPoolV1 } from \\\"./IFundingPoolV1.sol\\\";\\nimport { FundingMath } from \\\"./FundingMath.sol\\\";\\nimport { ArrayMath } from \\\"../Math.sol\\\";\\n\\n/// @dev A contract with the necessary storage to keep track of funding. Should\\n/// not be used as a standalone contract, but like a mixin\\nabstract contract FundingPool is IFundingPoolV1, ERC20Upgradeable {\\n    using Math for uint256;\\n    using ArrayMath for uint256[];\\n    using SafeERC20 for IERC20Metadata;\\n\\n    IERC20Metadata public collateralToken;\\n\\n    uint256 private feePoolWeight;\\n    mapping(address => uint256) private withdrawnFees;\\n    uint256 private totalWithdrawnFees;\\n\\n    /// @dev Keeps track of total collateral used to enter the current liquidity\\n    /// position of the funder. It is increased by the collateral amount every\\n    /// time the funder funds, and then reduced proportionally to how many LP\\n    /// shares are withdrawn during defunding. This can be considered the \\\"cost\\n    /// basis\\\" of the lp shares of each funder\\n    mapping(address => uint256) private funderCostBasis;\\n    /// @dev Total collateral put into funding the current LP shares\\n    uint256 private totalFunderCostBasis;\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function withdrawFees(address funder) public returns (uint256 collateralRemovedFromFees) {\\n        uint256 rawAmount = (feePoolWeight * balanceOf(funder)) / totalSupply();\\n        collateralRemovedFromFees = rawAmount - withdrawnFees[funder];\\n        if (collateralRemovedFromFees > 0) {\\n            withdrawnFees[funder] = rawAmount;\\n            totalWithdrawnFees = totalWithdrawnFees + collateralRemovedFromFees;\\n\\n            collateralToken.safeTransfer(funder, collateralRemovedFromFees);\\n\\n            emit FeesWithdrawn(funder, collateralRemovedFromFees);\\n\\n            _afterFeesWithdrawn(funder, collateralRemovedFromFees);\\n        }\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function feesWithdrawableBy(address account) public view returns (uint256) {\\n        uint256 rawAmount = (feePoolWeight * balanceOf(account)) / totalSupply();\\n        return rawAmount - withdrawnFees[account];\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function collectedFees() public view returns (uint256) {\\n        return feePoolWeight - totalWithdrawnFees;\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function reserves() public view returns (uint256 collateral) {\\n        uint256 totalCollateral = collateralToken.balanceOf(address(this));\\n        uint256 fees = collectedFees();\\n        assert(totalCollateral >= fees);\\n        return totalCollateral - fees;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __FundingPool_init(IERC20Metadata _collateralToken) internal onlyInitializing {\\n        __ERC20_init(\\\"\\\", \\\"\\\");\\n\\n        __FundingPool_init_unchained(_collateralToken);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __FundingPool_init_unchained(IERC20Metadata _collateralToken) internal onlyInitializing {\\n        if (_collateralToken.decimals() > 18) revert ExcessiveCollateralDecimals();\\n\\n        collateralToken = _collateralToken;\\n    }\\n\\n    /// @dev Burns the LP shares corresponding to a particular owner account\\n    /// Also note that _beforeTokenTransfer will be invoked to make sure the fee\\n    /// bookkeeping is updated for the owner.\\n    /// @param owner Account to whom the LP shares belongs to.\\n    /// @param sharesToBurn Portion of LP pool to burn.\\n    function _burnSharesOf(address owner, uint256 sharesToBurn) internal {\\n        // slither-disable-next-line dangerous-strict-equalities\\n        if (sharesToBurn == 0) revert InvalidBurnAmount();\\n\\n        uint256 costBasisReduction =\\n            FundingMath.calcCostBasisReduction(balanceOf(owner), sharesToBurn, funderCostBasis[owner]);\\n        funderCostBasis[owner] -= costBasisReduction;\\n        totalFunderCostBasis -= costBasisReduction;\\n\\n        _burn(owner, sharesToBurn);\\n    }\\n\\n    function _mintSharesFor(address receiver, uint256 collateralAdded, uint256 poolValue)\\n        internal\\n        returns (uint256 sharesMinted)\\n    {\\n        if (collateralAdded == 0) revert InvalidFundingAmount();\\n\\n        sharesMinted = FundingMath.calcFunding(collateralAdded, totalSupply(), poolValue);\\n\\n        // Ensure this stays below type(uint128).max to avoid overflow in liquidity calculations\\n        uint256 costBasisAfter = funderCostBasis[receiver] + collateralAdded;\\n        if (costBasisAfter > type(uint128).max) revert ExcessiveFunding();\\n\\n        funderCostBasis[receiver] = costBasisAfter;\\n        totalFunderCostBasis += collateralAdded;\\n\\n        address sender = _msgSender();\\n        collateralToken.safeTransferFrom(sender, address(this), collateralAdded);\\n\\n        // Ensure total shares for funding does not exceed type(uint128).max to avoid overflow\\n        uint256 sharesAfter = balanceOf(receiver) + sharesMinted;\\n        if (sharesAfter > type(uint128).max) revert ExcessiveFunding();\\n        _mint(receiver, sharesMinted);\\n\\n        emit FundingAdded(sender, receiver, collateralAdded, sharesMinted);\\n    }\\n\\n    /// @notice Computes the fees when positions are bought, sold or transferred\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from != address(0)) {\\n            // LP tokens being transferred away from a funder - any fees that\\n            // have accumulated so far due to trading activity should be given\\n            // to the original owner for the period of time he held the LP\\n            // tokens\\n            withdrawFees(from);\\n        }\\n\\n        // `supply` includes `amount` during:\\n        //   - funder to funder transfer\\n        //   - burning\\n        // `supply` does _not_ include `amount` during:\\n        //   - minting\\n        uint256 supply = totalSupply();\\n        // Fee pool weight proportional to the shares of LP total supply. This\\n        // proportion of fee pool weight will be transferred between funders, so\\n        // that their claim to the fees does not increase/descrease\\n        // instantaneously.\\n        // slither-disable-next-line dangerous-strict-equalities\\n        uint256 withdrawnFeesTransfer = supply == 0 ? amount : (feePoolWeight * amount) / supply;\\n\\n        if (from != address(0)) {\\n            // Transferring lp shares away from a funder\\n            withdrawnFees[from] = withdrawnFees[from] - withdrawnFeesTransfer;\\n            totalWithdrawnFees = totalWithdrawnFees - withdrawnFeesTransfer;\\n        } else {\\n            // minting new lp shares. Grow the weight of the fee pool\\n            // proportionally to the LP total supply\\n            feePoolWeight = feePoolWeight + withdrawnFeesTransfer;\\n        }\\n        if (to != address(0)) {\\n            // Transferring lp shares to a funder\\n            withdrawnFees[to] = withdrawnFees[to] + withdrawnFeesTransfer;\\n            totalWithdrawnFees = totalWithdrawnFees + withdrawnFeesTransfer;\\n        } else {\\n            // burning lp shares. Shrink the weight of the fee pool\\n            // proportionally to the LP total supply\\n            feePoolWeight = feePoolWeight - withdrawnFeesTransfer;\\n        }\\n    }\\n\\n    /// @dev Sets aside some collateral as fees\\n    function _retainFees(uint256 collateralFees) internal {\\n        if (collateralFees > reserves()) revert FeesExceedReserves();\\n        feePoolWeight = feePoolWeight + collateralFees;\\n\\n        emit FeesRetained(collateralFees);\\n    }\\n\\n    /// @dev implement this to get a callback when fees are transferred\\n    // solhint-disable-next-line no-empty-blocks\\n    function _afterFeesWithdrawn(address funder, uint256 collateralRemovedFromFees) internal virtual { }\\n\\n    /// @dev How much collateral was spent by all funders to obtain their current shares\\n    function getTotalFunderCostBasis() public view returns (uint256) {\\n        return totalFunderCostBasis;\\n    }\\n\\n    function getFunderCostBasis(address funder) public view returns (uint256) {\\n        return funderCostBasis[funder];\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/funding/IParentFundingPoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface ParentFundingPoolErrors {\\n    /// @dev Occurs when a child pool does not support the necessary interfaces\\n    error NotAChildPool(address childPool);\\n\\n    /// @dev Occurs when a child pool is not approved to perform the operation\\n    error ChildPoolNotApproved(address childPool);\\n}\\n\\ninterface ParentFundingPoolEvents {\\n    /// @dev A child pool approval was added or removed\\n    event ChildPoolApproval(address indexed childPool, uint256 approved);\\n\\n    /// @dev Limit of how much can be requested has changed\\n    event RequestLimitChanged(uint256 limit);\\n\\n    /// @dev A child pool has requested some funds, and the parent gives it. The\\n    /// value locked into the child is exactly equal to the collateralGiven\\n    event FundingGiven(address indexed childPool, uint256 collateralGiven);\\n\\n    /// @dev A child pool has returned some funding, unlocking some value\\n    /// @param childPool the child pool that borrowed the funds\\n    /// @param collateralReturned quantity of collateral given back to the pool\\n    /// @param valueUnlocked due to profit/loss, collateral returned may not\\n    /// equal in value to what was originally given. valueUnlocked corresponds\\n    /// to the portion of original collateral that is returned\\n    event FundingReturned(address indexed childPool, uint256 collateralReturned, uint256 valueUnlocked);\\n}\\n\\n/// @dev Interface for a FundingPool that allows child FundingPools to request/return funds\\ninterface IParentFundingPoolV1 is IERC165Upgradeable, ParentFundingPoolEvents, ParentFundingPoolErrors {\\n    /// @dev childPool should support IFundingPoolV1 interface\\n    function setApprovalForChild(address childPool, uint256 approval) external;\\n\\n    /// @dev Called by an approved child pool, to request collateral\\n    /// NOTE: assumes msg.sender supports IFundingPool that is approved\\n    /// @param collateralRequested how much collateral is requested by the childPool\\n    /// @return collateralAdded Actual amount given (which may be lower than collateralRequested)\\n    /// @return sharesMinted How many child shares were given due to the funding\\n    function requestFunding(uint256 collateralRequested)\\n        external\\n        returns (uint256 collateralAdded, uint256 sharesMinted);\\n\\n    /// @dev Notify parent after voluntarily returning back some collateral, and burning corresponding shares\\n    /// @param collateralReturned how much collateral funding was transferred from child to parent\\n    /// @param sharesBurnt how many child shares were burnt as a result\\n    function fundingReturned(uint256 collateralReturned, uint256 sharesBurnt) external;\\n\\n    /// @dev Notify parent after voluntarily returning back some fees\\n    /// @param fees how much fees (in collateral) was transferred from child to parent\\n    function feesReturned(uint256 fees) external;\\n\\n    /// @dev What is the maximum amount of collateral a child can request from the parent\\n    function getApprovalForChild(address childPool) external view returns (uint256 approval);\\n\\n    /// @dev See how much funding is available for a particular child pool.\\n    /// Takes into account how much has already been consumed from the approval,\\n    /// and how much collateral is available in the pool.\\n    /// @param childPool address of the childPool\\n    /// @return availableFunding how much collateral can be requested, that takes into account any gains or losses\\n    /// @return targetFunding The target funding amount that can be requested, without gains or losses\\n    function getAvailableFunding(address childPool)\\n        external\\n        view\\n        returns (uint256 availableFunding, uint256 targetFunding);\\n}\\n\"\r\n    },\r\n    \"contracts/funding/IChildFundingPoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface ChildFundingPoolErrors {\\n    error NotAParentPool(address parentPool);\\n}\\n\\ninterface ChildFundingPoolEvents {\\n    event ParentPoolAdded(address indexed parentPool);\\n}\\n\\n/// @dev Interface for a funding pool that can be added as a child to a Parent Funding pool\\ninterface IChildFundingPoolV1 is IERC165Upgradeable, ChildFundingPoolEvents, ChildFundingPoolErrors {\\n    function getParentPool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Note on libraries. If any functions are not `internal`, then contracts that\\n// use the libraries, must be linked.\\n\\nlibrary ArrayMath {\\n    function sum(uint256[] memory values) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < values.length; i++) {\\n            result += values[i];\\n        }\\n        return result;\\n    }\\n\\n    function hasNonzeroEntries(uint256[] memory values) internal pure returns (bool) {\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (values[i] > 0) return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/// @dev Math with saturation/clamping for overflow/underflow handling\\nlibrary ClampedMath {\\n    /// @dev max(0, a - b)\\n    function subClamp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a > b ? a - b : 0;\\n        }\\n    }\\n\\n    /// @dev min(type(uint256).max, max(0, a + b))\\n    function addClamp(uint256 a, int256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b < 0) {\\n                // The absolute value of type(int256).min is not representable\\n                // in int256, so have to dance about with the + 1\\n                uint256 positiveB = uint256(-(b + 1)) + 1;\\n                return (a > positiveB) ? (a - positiveB) : 0;\\n            } else {\\n                return type(uint256).max - a > uint256(b) ? a + uint256(b) : type(uint256).max;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/conditions/CTHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype QuestionID is bytes32;\\n\\ntype ConditionID is bytes32;\\n\\ntype CollectionID is bytes32;\\n\\nlibrary CTHelpers {\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the\\n    /// outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used\\n    /// for this condition. Must not exceed 256.\\n    function getConditionId(address oracle, QuestionID questionId, uint256 outcomeSlotCount)\\n        internal\\n        pure\\n        returns (ConditionID)\\n    {\\n        assert(outcomeSlotCount < 257); // `<` uses less gas than `<=`\\n        return ConditionID.wrap(keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount)));\\n    }\\n\\n    /// @dev Constructs an outcome collection ID\\n    /// @param conditionId Condition ID of the outcome collection\\n    /// @param index outcome index\\n    function getCollectionId(ConditionID conditionId, uint256 index) internal pure returns (CollectionID) {\\n        return CollectionID.wrap(keccak256(abi.encodePacked(conditionId, index)));\\n    }\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome\\n    /// collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, CollectionID collectionId) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(collateralToken, collectionId)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/conditions/ConditionalTokensErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ConditionalTokensErrors {\\n    error ConditionAlreadyPrepared();\\n\\n    error PayoutAlreadyReported();\\n    error PayoutsAreAllZero();\\n    error InvalidOutcomeSlotCountsArray();\\n    error InvalidPayoutArray();\\n\\n    error ResultNotReceivedYet();\\n    error InvalidIndex();\\n    error NoPositionsToRedeem();\\n\\n    error ConditionNotFound();\\n    error InvalidAmount();\\n    error InvalidOutcomeSlotsAmount();\\n    error InvalidQuantities();\\n\\n    /// @dev using unapproved ERC20 token with protocol\\n    error InvalidERC20();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/markets/MarketMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport { IERC1155ReceiverUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport { ERC1155ReceiverUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { IConditionalTokens, ConditionID, ConditionalTokensErrors } from \\\"../conditions/IConditionalTokens.sol\\\";\\nimport { IUpdateHaltTime } from \\\"../conditions/IUpdateHaltTime.sol\\\";\\nimport { FundingPool, IFundingPoolV1 } from \\\"../funding/FundingPool.sol\\\";\\nimport { ChildFundingPool, IChildFundingPoolV1, IParentFundingPoolV1 } from \\\"../funding/ChildFundingPool.sol\\\";\\nimport { IMarketMakerV1 } from \\\"./IMarketMaker.sol\\\";\\nimport { AmmMath } from \\\"./AmmMath.sol\\\";\\nimport { FundingMath } from \\\"../funding/FundingMath.sol\\\";\\nimport { ClampedMath, ArrayMath } from \\\"../Math.sol\\\";\\n\\n/// @title A contract for providing a market for users to bet on\\n/// @notice A Market for buying, selling bets as a bettor, and adding/removing\\n/// liquidity as a liquidity provider. Any fees acrued due to trading activity\\n/// is then given to the liquidity providers.\\n/// @dev This is using upgradeable contracts because it will be called through a\\n/// proxy. We will not actually be upgrading the proxy, but using proxies for\\n/// cloning. As such, storage compatibilities between upgrades don't matter for\\n/// the Market.\\ncontract MarketMaker is\\n    Initializable,\\n    ERC1155ReceiverUpgradeable,\\n    IMarketMakerV1,\\n    ChildFundingPool,\\n    FundingPool,\\n    IUpdateHaltTime,\\n    ConditionalTokensErrors\\n{\\n    using ArrayMath for uint256[];\\n    using Math for uint256;\\n    using ClampedMath for uint256;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    struct AddressParams {\\n        IConditionalTokens conditionalTokens;\\n        IERC20Metadata collateralToken;\\n        address parentPool;\\n        address priceOracle;\\n        address conditionOracle;\\n    }\\n\\n    struct InitParams {\\n        ConditionID conditionId;\\n        uint256 haltTime;\\n        uint256 fee;\\n        uint256[] fairPriceDecimals;\\n        uint128 minPriceDecimal;\\n    }\\n\\n    uint256 private constant PRECISION_DECIMALS = AmmMath.PRECISION_DECIMALS;\\n    uint256 public constant ONE_DECIMAL = AmmMath.ONE_DECIMAL;\\n\\n    IConditionalTokens public conditionalTokens;\\n    ConditionID public conditionId;\\n    uint256 public haltTime;\\n    uint128 public feeDecimal;\\n    uint128 public minInvestment;\\n\\n    /// @dev The address that is allowed to update target balances\\n    address internal priceOracle;\\n    address internal conditionOracle;\\n    /// @dev minimum acceptable price for any token.\\n    uint128 public minPriceDecimal;\\n    /// @dev Fair prices of each token normalized to ONE_DECIMAL\\n    uint256[] private fairPriceDecimals;\\n\\n    /// @dev Conditional token ERC1155 ids for different outcomes\\n    uint256[] public positionIds;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(AddressParams calldata addresses, InitParams calldata params) public initializer {\\n        __ChildFundingPool_init(addresses.parentPool);\\n        __FundingPool_init(addresses.collateralToken);\\n        __ERC1155Receiver_init();\\n\\n        conditionalTokens = addresses.conditionalTokens;\\n        conditionId = params.conditionId;\\n        haltTime = params.haltTime;\\n\\n        if (isHalted()) revert MarketHalted();\\n\\n        // Check collateral decimals are not too big\\n        uint256 collateralDecimals = collateralToken.decimals();\\n        uint256 oneCollateral = 10 ** collateralDecimals;\\n        if (oneCollateral >= type(uint128).max) revert ExcessiveCollateralDecimals();\\n\\n        // Check if fee makes sense. It has to be < 1.0\\n        if (params.fee >= oneCollateral) revert InvalidFee();\\n\\n        if (params.fee > 0) {\\n            // Set the minInvestment such that fee will always be non-zero\\n            minInvestment = uint128(oneCollateral.ceilDiv(params.fee));\\n            assert(minInvestment * params.fee > 0);\\n        } else {\\n            // if no fee, investment needs to be non-zero\\n            minInvestment = 1;\\n        }\\n\\n        // Assert that precision decimals are not excessive.\\n        // This is not a requirement, but an assertion because it's a code constant\\n        assert(10 ** PRECISION_DECIMALS <= type(uint128).max);\\n\\n        // Fee is given in terms of token decimals, but in calculations we use 1 ether precision\\n        // We need to normalize the fee to our calculation precision.\\n        // Given the above checks, the result should fit within uint128, since it is at most 10 ** PRECISION_DECIMALS\\n        if (collateralDecimals < PRECISION_DECIMALS) {\\n            feeDecimal = uint128(params.fee * (10 ** (PRECISION_DECIMALS - collateralDecimals)));\\n        } else if (collateralDecimals > PRECISION_DECIMALS) {\\n            feeDecimal = uint128(params.fee / (10 ** (collateralDecimals - PRECISION_DECIMALS)));\\n        } else {\\n            feeDecimal = uint128(params.fee);\\n        }\\n\\n        priceOracle = addresses.priceOracle;\\n        conditionOracle = addresses.conditionOracle;\\n\\n        positionIds = conditionalTokens.getPositionIds(collateralToken, conditionId);\\n\\n        _updateFairPrices(params.fairPriceDecimals);\\n        _updateMinPrice(params.minPriceDecimal);\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    // solhint-disable-next-line ordering\\n    function addFunding(uint256 collateralAdded) external returns (uint256 sharesMinted) {\\n        return addFundingFor(_msgSender(), collateralAdded);\\n    }\\n\\n    /// @notice Removes market funds of someone if the condition is resolved.\\n    /// All conditional tokens that were part of the position are redeemed and\\n    /// only collateral is returned\\n    /// @param ownerAndReceiver Address where the collateral will be deposited,\\n    /// and who owns the LP tokens\\n    /// @param sharesToBurn portion of LP pool to remove\\n    function removeCollateralFundingOf(address ownerAndReceiver, uint256 sharesToBurn)\\n        public\\n        returns (uint256[] memory sendAmounts, uint256 collateralRemoved)\\n    {\\n        if (!conditionalTokens.isResolved(conditionId)) revert MarketUndecided();\\n\\n        (collateralRemoved, sendAmounts) = _calcRemoveFunding(sharesToBurn);\\n        _burnSharesOf(ownerAndReceiver, sharesToBurn);\\n\\n        uint256 outcomeSlotCount = positionIds.length;\\n        uint256[] memory indices = new uint256[](outcomeSlotCount);\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            indices[i] = i;\\n        }\\n\\n        collateralToken.safeTransfer(ownerAndReceiver, collateralRemoved);\\n        collateralRemoved +=\\n            conditionalTokens.redeemPositionsFor(ownerAndReceiver, collateralToken, conditionId, indices, sendAmounts);\\n\\n        address parent = getParentPool();\\n        if (ownerAndReceiver == parent) {\\n            IParentFundingPoolV1(parent).fundingReturned(collateralRemoved, sharesToBurn);\\n        }\\n\\n        uint256[] memory noTokens = new uint256[](0);\\n        emit FundingRemoved(ownerAndReceiver, collateralRemoved, noTokens, sharesToBurn);\\n    }\\n\\n    /// @notice Removes all the collateral for funders. Anyone can call\\n    /// this function after the condition is resolved.\\n    /// @return totalSharesBurnt Total amount of shares that were burnt.\\n    /// @return totalCollateralRemoved Total amount of collateral removed.\\n    function removeAllCollateralFunding(address[] calldata funders)\\n        external\\n        returns (uint256 totalSharesBurnt, uint256 totalCollateralRemoved)\\n    {\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n\\n            uint256 sharesToBurn_ = balanceOf(funder);\\n            if (sharesToBurn_ == 0) continue;\\n\\n            (, uint256 collateralRemoved_) = removeCollateralFundingOf(funder, sharesToBurn_);\\n\\n            totalCollateralRemoved += collateralRemoved_;\\n            totalSharesBurnt += sharesToBurn_;\\n        }\\n    }\\n\\n    /// @notice Removes funds from the market by burning the shares and sending\\n    /// to the transaction sender his portion of conditional tokens and collateral.\\n    /// @param sharesToBurn portion of LP pool to remove\\n    /// @return collateral how much collateral was returned\\n    /// @return sendAmounts how much of each conditional token was returned\\n    function removeFunding(uint256 sharesToBurn) public returns (uint256 collateral, uint256[] memory sendAmounts) {\\n        address funder = _msgSender();\\n        (collateral, sendAmounts) = _calcRemoveFunding(sharesToBurn);\\n        _burnSharesOf(funder, sharesToBurn);\\n\\n        collateralToken.safeTransfer(funder, collateral);\\n        conditionalTokens.safeBatchTransferFrom(address(this), funder, positionIds, sendAmounts, \\\"\\\");\\n\\n        address parent = getParentPool();\\n        if (funder == parent) {\\n            IParentFundingPoolV1(parent).fundingReturned(collateral, sharesToBurn);\\n        }\\n\\n        emit FundingRemoved(funder, collateral, sendAmounts, sharesToBurn);\\n    }\\n\\n    function _calcRemoveFunding(uint256 sharesToBurn)\\n        private\\n        view\\n        returns (uint256 collateral, uint256[] memory returnAmounts)\\n    {\\n        uint256 totalShares = totalSupply();\\n        collateral = FundingMath.calcReturnAmount(sharesToBurn, totalShares, reserves());\\n        returnAmounts = FundingMath.calcReturnAmounts(sharesToBurn, totalShares, getPoolBalances());\\n    }\\n\\n    /// @notice Buys an amount of a conditional token position.\\n    /// @param investmentAmount Amount of collateral to exchange for the collateral tokens.\\n    /// @param outcomeIndex Position index of the condition to buy.\\n    /// @param minOutcomeTokensToBuy Minimal amount of conditional token expected to be received.\\n    function buy(uint256 investmentAmount, uint256 outcomeIndex, uint256 minOutcomeTokensToBuy)\\n        external\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices)\\n    {\\n        return buyFor(_msgSender(), investmentAmount, outcomeIndex, minOutcomeTokensToBuy);\\n    }\\n\\n    /// @notice Sells an amount of conditional tokens and get collateral as a\\n    /// return. Currently not supported and will be implemented soon.\\n    function sell(uint256 returnAmount, uint256, /* outcomeIndex */ uint256 /* maxOutcomeTokensToSell */ )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (isHalted()) revert MarketHalted();\\n        if (returnAmount == 0) revert InvalidReturnAmount();\\n\\n        revert OperationNotSupported();\\n    }\\n\\n    /// @notice Update the externally known fair prices for tokens. Sum must equal ONE_DECIMAL.\\n    /// @param _fairPriceDecimals array of values of fair prices for the tokens\\n    function updateFairPrices(uint256[] calldata _fairPriceDecimals) external {\\n        if (_msgSender() != priceOracle) revert MustBeCalledByOracle();\\n        _updateFairPrices(_fairPriceDecimals);\\n    }\\n\\n    /// @notice Update the minimum price to give for any one outcome token\\n    /// @param _minPriceDecimal decimal price < 1.0\\n    function updateMinPrice(uint128 _minPriceDecimal) external {\\n        if (_msgSender() != priceOracle) revert MustBeCalledByOracle();\\n        _updateMinPrice(_minPriceDecimal);\\n    }\\n\\n    /// @inheritdoc\\tIUpdateHaltTime\\n    function updateHaltTime(uint256 _haltTime) external {\\n        if (_msgSender() != conditionOracle) revert MustBeCalledByOracle();\\n        if (_haltTime > haltTime) revert InvalidHaltTime();\\n        haltTime = _haltTime;\\n    }\\n\\n    /// @notice Return the current fair prices used by the market, normalized to ONE_DECIMAL\\n    function getFairPrices() external view returns (uint256[] memory) {\\n        return fairPriceDecimals;\\n    }\\n\\n    /// @notice Return the current prices that include the spread due to the AMM\\n    /// algorithm. The prices will sum to more than ONE_DECIMAL, because there\\n    /// is a spread incorporated into the price\\n    function getSpontaneousPrices() external view returns (uint256[] memory) {\\n        AmmMath.TargetContext memory targetContext = getTargetBalance();\\n        return AmmMath.calcSpontaneousPricesV3(\\n            targetContext.target,\\n            targetContext.globalReserves,\\n            minPriceDecimal,\\n            targetContext.balances,\\n            fairPriceDecimals\\n        );\\n    }\\n\\n    function _updateFairPrices(uint256[] calldata _fairPriceDecimals) private {\\n        if (_fairPriceDecimals.length != positionIds.length) revert InvalidPrices();\\n\\n        // When updating the price, it\u2019s important to check if the haltTime has\\n        // been reached - traders can no longer place trades after that, so it\\n        // is unfair to change price at that point.\\n        //\\n        // However isHalted() also includes a check whether the condition has\\n        // been resolved. This check is redundant because updating a price after\\n        // the condition has already been resolved has no effect - the payouts\\n        // have already been determined.\\n        //\\n        // To optimize gas usage, we actually don't need to check if the\\n        // condition is resolved or not, only the halt time.\\n        //\\n        // Finally, because of race conditions between halt time and when the\\n        // price oracle submits the last price updates, this may trigger. If\\n        // this was a revert, then an entire batch would be reverted. It is\\n        // simpler to just ignore the price update.\\n        if (block.timestamp >= haltTime) return;\\n\\n        uint256 total = _fairPriceDecimals.sum();\\n        if (total != ONE_DECIMAL) revert InvalidPrices();\\n        fairPriceDecimals = _fairPriceDecimals;\\n\\n        emit MarketPricesUpdated(fairPriceDecimals);\\n    }\\n\\n    function _updateMinPrice(uint128 _minPriceDecimal) private {\\n        if (_minPriceDecimal >= ONE_DECIMAL) revert InvalidPrices();\\n        minPriceDecimal = _minPriceDecimal;\\n\\n        emit MarketMinPriceUpdated(minPriceDecimal);\\n    }\\n\\n    /// @inheritdoc IFundingPoolV1\\n    function addFundingFor(address receiver, uint256 collateralAdded) public returns (uint256 sharesMinted) {\\n        if (isHalted()) revert MarketHalted();\\n\\n        uint256 poolValue = AmmMath.calcPoolValue(getPoolBalances(), fairPriceDecimals, reserves());\\n        sharesMinted = _mintSharesFor(receiver, collateralAdded, poolValue);\\n\\n        // Don't split through all conditions, keep collateral as collateral, until we actually need it\\n    }\\n\\n    /// @notice Buys conditional tokens for a particular account.\\n    /// @dev This function is to buy conditional tokens by a third party on behalf of a particular account.\\n    /// @param outcomeIndex Position index of the condition to buy.\\n    /// @param minOutcomeTokensToBuy Minimal amount of conditional token expected to be received.\\n    /// @return outcomeTokensBought quantity of conditional tokens that were bought\\n    /// @return feeAmount how much collateral went to fees\\n    function buyFor(address receiver, uint256 investmentAmount, uint256 outcomeIndex, uint256 minOutcomeTokensToBuy)\\n        public\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices)\\n    {\\n        if (isHalted()) revert MarketHalted();\\n        if (investmentAmount < minInvestment) revert InvalidInvestmentAmount();\\n\\n        feeAmount = (investmentAmount * feeDecimal) / ONE_DECIMAL;\\n        uint256 investmentMinusFees = investmentAmount - feeAmount;\\n\\n        uint256 tokensToMint;\\n        AmmMath.ParentOperations memory parentOps;\\n        (outcomeTokensBought, tokensToMint, spontaneousPrices, parentOps) =\\n            _calcBuyAmount(investmentMinusFees, outcomeIndex);\\n\\n        if (outcomeTokensBought < minOutcomeTokensToBuy) revert MinimumBuyAmountNotReached();\\n        collateralToken.safeTransferFrom(_msgSender(), address(this), investmentAmount);\\n        _retainFees(feeAmount);\\n        _applyParentOperations(parentOps);\\n\\n        if (tokensToMint > 0) {\\n            // We need to mint some tokens\\n            splitPositionThroughAllConditions(tokensToMint);\\n        }\\n\\n        conditionalTokens.safeTransferFrom(address(this), receiver, positionIds[outcomeIndex], outcomeTokensBought, \\\"\\\");\\n\\n        emit MarketBuy(receiver, investmentAmount, feeAmount, outcomeIndex, outcomeTokensBought);\\n        emit MarketSpontaneousPrices(spontaneousPrices);\\n    }\\n\\n    /// @inheritdoc IERC1155ReceiverUpgradeable\\n    function onERC1155Received(\\n        address operator,\\n        address, /* from */\\n        uint256, /* id */\\n        uint256, /* value */\\n        bytes memory /* data */\\n    ) public view override returns (bytes4) {\\n        // receives conditional tokens for the liquidity pool,\\n        // or transfer from a user for purpose of selling that token\\n        if (operator == address(this) && _msgSender() == address(conditionalTokens)) {\\n            return this.onERC1155Received.selector;\\n        }\\n        return 0x0;\\n    }\\n\\n    /// @inheritdoc IERC1155ReceiverUpgradeable\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] memory, /* ids */\\n        uint256[] memory, /* values */\\n        bytes memory /* data */\\n    ) public view override returns (bytes4) {\\n        // receives conditional tokens for the liquidity pool from splitPositions\\n        if (operator == address(this) && from == address(0) && _msgSender() == address(conditionalTokens)) {\\n            return this.onERC1155BatchReceived.selector;\\n        }\\n        return 0x0;\\n    }\\n\\n    /// @notice Calculate the amount of conditional token to be bought with a certain amount of collateral.\\n    /// @param investmentAmount Amount of collateral token invested.\\n    /// @param indexOut Position index of the condition.\\n    /// @return outcomeTokensBought how many outcome tokens would the user receive from the transaction\\n    function calcBuyAmount(uint256 investmentAmount, uint256 indexOut)\\n        public\\n        view\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices)\\n    {\\n        feeAmount = (investmentAmount * feeDecimal) / ONE_DECIMAL;\\n        uint256 tokensMinted = investmentAmount - feeAmount;\\n        (outcomeTokensBought,, spontaneousPrices,) = _calcBuyAmount(tokensMinted, indexOut);\\n    }\\n\\n    /// @dev Calculate the amount of a conditional token to be bought with a\\n    /// certain amount of collateral. This private function also provides a lot\\n    /// of other information on how to deal with an external parent pool.\\n    ///\\n    /// Some invariants:\\n    /// - If no parent pool, then all collateral is internal reserves of the\\n    ///   market. The minimal amount of collateral is used to mint any new tokens\\n    ///   in order to fulfil the order. At the end of a buy operation at least one\\n    ///   of the token balances is 0, otherwise some amount would be mergeable.\\n    ///   Majority of value in the pool should be kept as collateral.\\n    /// - The AMM algorithm aims to keep the pool value constant, and all the\\n    ///   balances to be at a target. This target is the cost basis of all\\n    ///   funding. The idea is all revenue comes from a flat fee on trades, and\\n    ///   the funding pool itself tries to keep a steady value.\\n    /// - When a parent pool is involved, we can request and return funding as\\n    ///   needed to fulfil orders. The parent pool has a certain allowance that\\n    ///   the algorithm can assume it will have access to.\\n    /// - When ONLY a parent pool is providing funding, then at the very start,\\n    ///   no collateral reserves are available in the market itself, and no tokens\\n    ///   are available. When a purchase occurs, just enough collateral is\\n    ///   requested from the parent to mint enough tokens to give back to the\\n    ///   buyer. The market remains without collateral reserves, and with some\\n    ///   tokens besides the output token. If a subsequent buy takes some tokens\\n    ///   that are readily available, that allows us to return the investment\\n    ///   collateral of the buyer back to the parent pool, since we don't need\\n    ///   it to mint any tokens.\\n    /// - This means the parent pool's effective funding is ALWAYS in terms of\\n    ///   tokens in the market, because any excess collateral is always returned\\n    ///   back to the parent\\n    /// - In the hybrid case, where there are some regular funders, and a parent\\n    ///   pool funder, there is a blend between the above behaviors proportional\\n    ///   to the shares held by the parent and the funders. In particular the\\n    ///   excess collateral given by the user is shared between the funders and\\n    ///   the parent.\\n    /// @param investmentMinusFees Amount of collateral token invested without fees\\n    /// @param indexOut Position index of the condition.\\n    /// @return outcomeTokensBought how many outcome tokens would the user receive from the transaction\\n    /// @return tokensToMint the minimal number of tokens to mint in order to satisfy the order\\n    /// @return spontaneousPrices pries of tokens after the buy\\n    /// @return parentOps operations to perform with parent funding\\n    function _calcBuyAmount(uint256 investmentMinusFees, uint256 indexOut)\\n        private\\n        view\\n        returns (\\n            uint256 outcomeTokensBought,\\n            uint256 tokensToMint,\\n            uint256[] memory spontaneousPrices,\\n            AmmMath.ParentOperations memory parentOps\\n        )\\n    {\\n        AmmMath.TargetContext memory targetContext = getTargetBalance();\\n\\n        (uint256 tokensExchanged, uint256 newPoolValue) = AmmMath.calcBuyAmountV3(\\n            investmentMinusFees,\\n            indexOut,\\n            targetContext.target,\\n            targetContext.globalReserves,\\n            minPriceDecimal,\\n            targetContext.balances,\\n            fairPriceDecimals\\n        );\\n\\n        AmmMath.BuyContext memory buyContext = AmmMath.BuyContext(investmentMinusFees, tokensExchanged, newPoolValue);\\n\\n        address parent = getParentPool();\\n        AmmMath.ShareContext memory shareContext = AmmMath.ShareContext(balanceOf(parent), totalSupply());\\n\\n        (outcomeTokensBought, tokensToMint, parentOps) =\\n            AmmMath.calcMarketPoolChanges(indexOut, targetContext, buyContext, shareContext);\\n\\n        spontaneousPrices = AmmMath.calcSpontaneousPricesV3(\\n            targetContext.target,\\n            targetContext.globalReserves,\\n            minPriceDecimal,\\n            targetContext.balances,\\n            fairPriceDecimals\\n        );\\n    }\\n\\n    /// @notice Calculates the amount of conditional tokens that should be sold to receive a particular amount of\\n    /// collateral. Currently not supported but will be implemented soon\\n    function calcSellAmount(uint256, /* returnAmount */ uint256 /* outcomeIndex */ ) public pure returns (uint256) {\\n        revert OperationNotSupported();\\n    }\\n\\n    /// ERC165\\n    /// @dev This should check all incremental interfaces. Reasoning:\\n    /// - Market shows support for all revisions of the interface up to latest.\\n    /// - BatchBet checks the minimal version that supports the function it needs.\\n    /// - Any other contract also only checks the minimal version that supports the function it needs.\\n    /// - When a new interface is released, there is no need to release new versions of \\\"user\\\" contracts like\\n    ///   BatchBet, because they use the minimal interface and new releases of markets will be backwards compatible.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165Upgradeable, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IMarketMakerV1).interfaceId || interfaceId == type(IChildFundingPoolV1).interfaceId\\n            || interfaceId == type(IUpdateHaltTime).interfaceId || interfaceId == type(IFundingPoolV1).interfaceId\\n            || ERC1155ReceiverUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Returns true/false if the market is currently halted or not, respectively.\\n    /// @dev It would be more convenient to use block number since the timestamp is modifiable by miners\\n    function isHalted() public view returns (bool) {\\n        return block.timestamp >= haltTime || conditionalTokens.isResolved(conditionId);\\n    }\\n\\n    /// @notice Computes the pool balance in conditional token for each market position.\\n    /// @return poolBalances The pool balance in conditional tokens for each position.\\n    function getPoolBalances() public view returns (uint256[] memory) {\\n        address[] memory thises = new address[](positionIds.length);\\n        for (uint256 i = 0; i < positionIds.length; i++) {\\n            thises[i] = address(this);\\n        }\\n        return conditionalTokens.balanceOfBatch(thises, positionIds);\\n    }\\n\\n    /// @dev It would be maybe convenient to remove this function since it is used only once in the code and adds extra\\n    /// complexity. If it names clarifies better what splitPosition those it could be just changed in the\\n    /// ConditionalContract\\n    function splitPositionThroughAllConditions(uint256 amount) private {\\n        collateralToken.safeApprove(address(conditionalTokens), amount);\\n        conditionalTokens.splitPosition(collateralToken, conditionId, amount);\\n    }\\n\\n    /// @dev Either requests funds from parent or returns some back to parent.\\n    function _applyParentOperations(AmmMath.ParentOperations memory parentOps) private {\\n        address parent = getParentPool();\\n        if (parentOps.collateralToRequestFromParent > 0) {\\n            assert(parentOps.collateralToReturnToParent == 0);\\n            assert(parentOps.sharesToBurnOfParent == 0);\\n            // We need more collateral than available in reserves, so ask the parent\\n            assert(parent != address(0x0));\\n            (uint256 fundingGiven,) =\\n                IParentFundingPoolV1(parent).requestFunding(parentOps.collateralToRequestFromParent);\\n            if (fundingGiven < parentOps.collateralToRequestFromParent) revert InvestmentDrainsPool();\\n        }\\n\\n        if (parentOps.sharesToBurnOfParent > 0 || parentOps.collateralToReturnToParent > 0) {\\n            assert(parentOps.collateralToRequestFromParent == 0);\\n            // We have extra collateral that should be returned back to the parent\\n            assert(parent != address(0x0));\\n            if (parentOps.sharesToBurnOfParent > 0) {\\n                _burnSharesOf(parent, parentOps.sharesToBurnOfParent);\\n            }\\n            if (parentOps.collateralToReturnToParent > 0) {\\n                collateralToken.safeTransfer(parent, parentOps.collateralToReturnToParent);\\n            }\\n            IParentFundingPoolV1(parent).fundingReturned(\\n                parentOps.collateralToReturnToParent, parentOps.sharesToBurnOfParent\\n            );\\n\\n            uint256[] memory noTokens = new uint256[](0);\\n            emit FundingRemoved(parent, parentOps.collateralToReturnToParent, noTokens, parentOps.sharesToBurnOfParent);\\n        }\\n    }\\n\\n    /// @dev Gets the actual target balance available, that includes any\\n    /// potential funding from the parent pool.\\n    /// @return targetContext relevant quantities needed to work with the liquidity pool\\n    function getTargetBalance() public view returns (AmmMath.TargetContext memory targetContext) {\\n        uint256 localReserves = reserves();\\n        targetContext = AmmMath.TargetContext({\\n            target: getTotalFunderCostBasis(),\\n            globalReserves: localReserves,\\n            localReserves: localReserves,\\n            balances: getPoolBalances()\\n        });\\n\\n        // check how much funding we can actually request from parent\\n        address parent = getParentPool();\\n        if (parent != address(0x0)) {\\n            (uint256 availableFromParent, uint256 availableTarget) =\\n                IParentFundingPoolV1(parent).getAvailableFunding(address(this));\\n            targetContext.target += availableTarget;\\n            targetContext.globalReserves += availableFromParent;\\n        }\\n    }\\n\\n    function _afterFeesWithdrawn(address funder, uint256 collateralRemovedFromFees) internal virtual override {\\n        address parent = getParentPool();\\n        if (funder == parent) {\\n            IParentFundingPoolV1(parent).feesReturned(collateralRemovedFromFees);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/markets/MarketErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { AmmErrors } from \\\"./AmmErrors.sol\\\";\\nimport { FundingErrors } from \\\"../funding/FundingErrors.sol\\\";\\n\\ninterface MarketErrors is AmmErrors, FundingErrors {\\n    error MarketHalted();\\n    error MarketUndecided();\\n    error MustBeCalledByOracle();\\n\\n    // Buy\\n    error InvalidInvestmentAmount();\\n    error MinimumBuyAmountNotReached();\\n\\n    // Sell\\n    error InvalidReturnAmount();\\n    error MaximumSellAmountExceeded();\\n\\n    error InvestmentDrainsPool();\\n    error OperationNotSupported();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/funding/IFundingPoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { FundingErrors } from \\\"./FundingErrors.sol\\\";\\n\\ninterface FundingPoolEvents {\\n    /// @notice Collateral is added to the liquidity pool\\n    /// @param sender the account that initiated and supplied the collateral for the funding\\n    /// @param funder the account that receives the liquidity pool shares\\n    /// @param collateralAdded the quantity of collateral supplied to the pool\\n    /// @param sharesMinted the quantity of liquidity pool shares created as sa result of the funding\\n    event FundingAdded(address indexed sender, address indexed funder, uint256 collateralAdded, uint256 sharesMinted);\\n\\n    /// @notice Funding is removed as a mix of tokens and collateral\\n    /// @param funder the owner of liquidity pool shares\\n    /// @param collateralRemoved the quantity of collateral removed from the pool proportional to funder's shares\\n    /// @param tokensRemoved the quantity of tokens removed from the pool proportional to funder's shares. Can be empty\\n    /// @param sharesBurnt the quantity of liquidity pool shares burnt\\n    event FundingRemoved(\\n        address indexed funder, uint256 collateralRemoved, uint256[] tokensRemoved, uint256 sharesBurnt\\n    );\\n\\n    /// @notice Funding is removed as a specific token, referred to by an id\\n    /// @param funder the owner of liquidity pool shares\\n    /// @param tokenId an id that identifies a single asset token in the pool. Up to the pool to decide the meaning of the id\\n    /// @param tokensRemoved the quantity of a token removed from the pool\\n    /// @param sharesBurnt the quantity of liquidity pool shares burnt\\n    event FundingRemovedAsToken(\\n        address indexed funder, uint256 indexed tokenId, uint256 tokensRemoved, uint256 sharesBurnt\\n    );\\n\\n    /// @notice Some portion of collateral was withdrawn for fee purposes\\n    event FeesWithdrawn(address indexed funder, uint256 collateralRemovedFromFees);\\n\\n    /// @notice Some portion of collateral was retained for fee purposes\\n    event FeesRetained(uint256 collateralAddedToFees);\\n}\\n\\n/// @dev A funding pool deals with 3 different assets:\\n/// - collateral with which to make investments (ERC20 tokens of general usage, e.g. USDT, USDC, DAI, etc.)\\n/// - shares which represent the stake in the fund (ERC20 tokens minted and burned by the funding pool)\\n/// - tokens that are the actual investments (e.g. ERC1155 conditional tokens)\\ninterface IFundingPoolV1 is IERC20Upgradeable, FundingErrors, FundingPoolEvents {\\n    /// @notice Funds the market with collateral from the sender\\n    /// @param collateralAdded Amount of funds from the sender to transfer to the market\\n    function addFunding(uint256 collateralAdded) external returns (uint256 sharesMinted);\\n\\n    /// @notice Funds the market on behalf of receiver.\\n    /// @param receiver Account that receives LP tokens.\\n    /// @param collateralAdded Amount of funds from the sender to transfer to the market\\n    function addFundingFor(address receiver, uint256 collateralAdded) external returns (uint256 sharesMinted);\\n\\n    /// @notice Withdraws the fees from a particular liquidity provider.\\n    /// @param funder Account address to withdraw its available fees.\\n    function withdrawFees(address funder) external returns (uint256 collateralRemovedFromFees);\\n\\n    /// @notice Returns the amount of fee in collateral to be withdrawn by the liquidity providers.\\n    /// @param account Account address to check for fees available.\\n    function feesWithdrawableBy(address account) external view returns (uint256 collateralFees);\\n\\n    /// @notice How much collateral is available that is not set aside for fees\\n    function reserves() external view returns (uint256 collateral);\\n\\n    /// @notice Returns the current collected fees on this market.\\n    function collectedFees() external view returns (uint256 collateralFees);\\n}\\n\"\r\n    },\r\n    \"contracts/funding/FundingMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { ClampedMath } from \\\"../Math.sol\\\";\\nimport { FundingErrors } from \\\"./FundingErrors.sol\\\";\\n\\nlibrary FundingMath {\\n    using ClampedMath for uint256;\\n    using Math for uint256;\\n\\n    /// @dev We always try to keep the pools balanced. There are never any\\n    /// \\\"sendBackAmounts\\\" like in a typical constant product AMM where the\\n    /// balances need to be maintained to determine the prices. We want to\\n    /// use all the available collateral for liquidity no matter what the\\n    /// probabilities of the outcomes are.\\n    /// @param collateralAdded how much collateral the funder is adding to the pool\\n    /// @param totalShares the current number of liquidity pool shares in circulation\\n    /// @param poolValue total sum of value of all tokens\\n    /// @return sharesMinted how many liquidity pool shares should be minted\\n    function calcFunding(uint256 collateralAdded, uint256 totalShares, uint256 poolValue)\\n        internal\\n        pure\\n        returns (uint256 sharesMinted)\\n    {\\n        if (totalShares == 0) {\\n            // funding when LP pool is empty\\n            sharesMinted = collateralAdded;\\n        } else {\\n            // mint LP tokens proportional to how much value the new investment\\n            // brings to the pool\\n\\n            // Something is very wrong if poolValue has gone to zero\\n            if (poolValue == 0) revert FundingErrors.PoolValueZero();\\n            sharesMinted = (collateralAdded * totalShares).ceilDiv(poolValue);\\n        }\\n    }\\n\\n    /// @dev Calculate how much of an asset in the liquidity pool to return to a funder.\\n    /// @param sharesToBurn how many liquidity pool shares a funder wants to burn\\n    /// @param totalShares the current number of liquidity pool shares in circulation\\n    /// @param balance number of an asset in the pool\\n    /// @return sendAmount how many asset tokens to give back to funder\\n    function calcReturnAmount(uint256 sharesToBurn, uint256 totalShares, uint256 balance)\\n        internal\\n        pure\\n        returns (uint256 sendAmount)\\n    {\\n        if (sharesToBurn > totalShares) revert FundingErrors.InvalidBurnAmount();\\n        if (sharesToBurn == 0) return sendAmount;\\n\\n        sendAmount = (balance * sharesToBurn) / totalShares;\\n    }\\n\\n    /// @dev Calculate how much of the assets in the liquidity pool to return to a funder.\\n    /// @param sharesToBurn how many liquidity pool shares a funder wants to burn\\n    /// @param totalShares the current number of liquidity pool shares in circulation\\n    /// @param balances number of each asset in the pool\\n    /// @return sendAmounts how many asset tokens to give back to funder\\n    function calcReturnAmounts(uint256 sharesToBurn, uint256 totalShares, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256[] memory sendAmounts)\\n    {\\n        if (sharesToBurn > totalShares) revert FundingErrors.InvalidBurnAmount();\\n        sendAmounts = new uint256[](balances.length);\\n        if (sharesToBurn == 0) return sendAmounts;\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sendAmounts[i] = (balances[i] * sharesToBurn) / totalShares;\\n        }\\n    }\\n\\n    /// @dev Calculate how much to reduce the cost basis due to shares being burnt\\n    /// @param funderShares how many liquidity pool shares a funder currently owns\\n    /// @param sharesToBurn how many liquidity pool shares a funder currently owns\\n    /// @param funderCostBasis how much collateral was spent acquiring the funder's liquidity pool shares\\n    /// @return costBasisReduction the amount by which to reduce the costbasis for the funder\\n    function calcCostBasisReduction(uint256 funderShares, uint256 sharesToBurn, uint256 funderCostBasis)\\n        internal\\n        pure\\n        returns (uint256 costBasisReduction)\\n    {\\n        if (sharesToBurn > funderShares) revert FundingErrors.InvalidBurnAmount();\\n\\n        costBasisReduction = funderShares == 0 ? 0 : (funderCostBasis * sharesToBurn) / funderShares;\\n    }\\n\\n    /// @dev Calculate how many shares to burn for an asset, so that how many\\n    /// parent shares are removed are not a larger proportion of funder's\\n    /// shares, than the proportion of the asset value among other assets.\\n    ///\\n    /// i.e.\\n    /// ((funderSharesRemovedAsAsset + sharesBurnt) / funderTotalShares)\\n    ///      <=\\n    /// (assetValue / totalValue)\\n    ///\\n    /// @param funderTotalShares Total parent shares owned and removed by funder\\n    /// @param sharesToBurn How many funder shares we're trying to burn\\n    /// @param funderSharesRemovedAsAsset quantity of shares already removed as the asset\\n    /// @param assetValue current value of the asset\\n    /// @param totalValue the total value to compare the asset value to. The\\n    /// ratio of asset value to this total is what sharesBurnt should not exceed\\n    /// @return sharesBurnt quantity of shares that can be burnt given the above restrictions\\n    function calcMaxParentSharesToBurnForAsset(\\n        uint256 funderTotalShares,\\n        uint256 sharesToBurn,\\n        uint256 funderSharesRemovedAsAsset,\\n        uint256 assetValue,\\n        uint256 totalValue\\n    ) internal pure returns (uint256 sharesBurnt) {\\n        uint256 maxShares = ((funderTotalShares * assetValue).ceilDiv(totalValue)).subClamp(funderSharesRemovedAsAsset);\\n\\n        sharesBurnt = Math.min(sharesToBurn, maxShares);\\n\\n        if (sharesBurnt > 0) {\\n            // This is a re-arrangement of the inequality given in the\\n            // description. It only applies when we are trying to give out some\\n            // shares. If sharesBurnt is 0, that means we've already exceeded\\n            // how many shares we can safely burn, so the inequality is\\n            // violated.\\n            // The -1 is due to the rounding up in ceilDiv above, used to\\n            // prevent never being able to burn the last remaining share\\n            assert(((funderSharesRemovedAsAsset + sharesBurnt - 1) * totalValue) < (assetValue * funderTotalShares));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/conditions/IUpdateHaltTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IUpdateHaltTime {\\n    /// @dev new haltTime is after old haltTime\\n    error InvalidHaltTime();\\n\\n    event HaltTimeUpdated(uint256 haltTime);\\n\\n    /// @notice Update the halt time of a contract\\n    /// @dev Should be in the past relative to current halt time\\n    /// @param haltTime epoch seconds timestamp of halt time\\n    function updateHaltTime(uint256 haltTime) external;\\n}\\n\"\r\n    },\r\n    \"contracts/funding/ChildFundingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IChildFundingPoolV1 } from \\\"./IChildFundingPoolV1.sol\\\";\\nimport { IParentFundingPoolV1 } from \\\"./IParentFundingPoolV1.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @dev A Mixin contract that provides a basic implementation of the IChildFundingPoolV1 interface\\nabstract contract ChildFundingPool is Initializable, IChildFundingPoolV1 {\\n    using ERC165Checker for address;\\n\\n    address private _parent;\\n    bytes4 private constant PARENT_FUNDING_POOL_INTERFACE_ID = 0xd0632e9a;\\n\\n    function getParentPool() public view returns (address) {\\n        return _parent;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ChildFundingPool_init(address parentPool) internal onlyInitializing {\\n        __ChildFundingPool_init_unchained(parentPool);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ChildFundingPool_init_unchained(address parentPool) internal onlyInitializing {\\n        assert(address(_parent) == address(0x0));\\n        if (\\n            parentPool != address(0x0)\\n                && !IParentFundingPoolV1(parentPool).supportsInterface(PARENT_FUNDING_POOL_INTERFACE_ID)\\n        ) {\\n            revert NotAParentPool(parentPool);\\n        }\\n\\n        _parent = parentPool;\\n\\n        emit ParentPoolAdded(parentPool);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/markets/IMarketMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { MarketErrors } from \\\"./MarketErrors.sol\\\";\\nimport { IFundingPoolV1 } from \\\"../funding/IFundingPoolV1.sol\\\";\\nimport { IUpdateFairPrices } from \\\"./IUpdateFairPrices.sol\\\";\\n\\n/// @dev Interface evolution is done by creating new versions of the interfaces\\n/// and making sure that the derived MarketMaker supports all of them.\\n/// Alternatively we could have gone with breaking the interface down into each\\n/// function one by one and checking each function selector. This would\\n/// introduce a lot more code in `supportsInterface` which is called often, so\\n/// it's easier to keep track of incremental evolution than all the constituent\\n/// pieces\\ninterface IMarketMakerV1 is IFundingPoolV1, IUpdateFairPrices, MarketErrors {\\n    event MarketBuy(\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 feeAmount,\\n        uint256 indexed outcomeIndex,\\n        uint256 outcomeTokensBought\\n    );\\n    event MarketSell(\\n        address indexed seller,\\n        uint256 returnAmount,\\n        uint256 feeAmount,\\n        uint256 indexed outcomeIndex,\\n        uint256 outcomeTokensSold\\n    );\\n\\n    event MarketSpontaneousPrices(uint256[] spontaneousPrices);\\n\\n    function removeFunding(uint256 sharesToBurn) external returns (uint256 collateral, uint256[] memory sendAmounts);\\n\\n    function buyFor(address receiver, uint256 investmentAmount, uint256 outcomeIndex, uint256 minOutcomeTokensToBuy)\\n        external\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices);\\n\\n    function buy(uint256 investmentAmount, uint256 outcomeIndex, uint256 minOutcomeTokensToBuy)\\n        external\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices);\\n\\n    function sell(uint256 returnAmount, uint256 outcomeIndex, uint256 maxOutcomeTokensToSell)\\n        external\\n        returns (uint256 outcomeTokensSold);\\n\\n    function removeCollateralFundingOf(address ownerAndReceiver, uint256 sharesToBurn)\\n        external\\n        returns (uint256[] memory sendAmounts, uint256 collateral);\\n\\n    function removeAllCollateralFunding(address[] calldata funders)\\n        external\\n        returns (uint256 totalSharesBurnt, uint256 totalCollateralRemoved);\\n\\n    function isHalted() external view returns (bool);\\n\\n    function calcBuyAmount(uint256 investmentAmount, uint256 outcomeIndex)\\n        external\\n        view\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices);\\n\\n    function calcSellAmount(uint256 returnAmount, uint256 outcomeIndex) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/markets/AmmMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { ArrayMath, ClampedMath } from \\\"../Math.sol\\\";\\nimport { AmmErrors } from \\\"./AmmErrors.sol\\\";\\n\\nlibrary AmmMath {\\n    using Math for uint256;\\n    using ClampedMath for uint256;\\n    using ArrayMath for uint256[];\\n\\n    uint256 internal constant PRECISION_DECIMALS = 18;\\n    uint256 internal constant ONE_DECIMAL = 10 ** PRECISION_DECIMALS;\\n\\n    /// @dev Calculate the pool value given token balances and a set of fair prices\\n    /// @param balances The current balances of each outcome token in a pool\\n    /// @param fairPriceDecimals normalized prices for each outcome token.\\n    /// @return poolValue total sum of value of all tokens\\n    function calcPoolValue(uint256[] memory balances, uint256[] memory fairPriceDecimals)\\n        internal\\n        pure\\n        returns (uint256 poolValue)\\n    {\\n        if (fairPriceDecimals.length != balances.length) revert AmmErrors.InvalidPrices();\\n\\n        uint256 totalValue = 0;\\n        uint256 normalization = 0;\\n        for (uint256 i = 0; i < fairPriceDecimals.length; ++i) {\\n            totalValue += fairPriceDecimals[i] * balances[i];\\n            normalization += fairPriceDecimals[i];\\n        }\\n\\n        poolValue = totalValue.ceilDiv(normalization);\\n    }\\n\\n    /// @dev Calculate the pool value given token balances and a set of fair prices, as well as extra collateral\\n    /// @param balances The current balances of each outcome token in a pool\\n    /// @param fairPriceDecimals normalized prices for each outcome token.\\n    /// @param collateralBalance extra collateral balance\\n    /// @return poolValue total sum of value of all tokens\\n    function calcPoolValue(uint256[] memory balances, uint256[] memory fairPriceDecimals, uint256 collateralBalance)\\n        internal\\n        pure\\n        returns (uint256 poolValue)\\n    {\\n        return calcPoolValue(balances, fairPriceDecimals) + collateralBalance;\\n    }\\n\\n    /// @dev Calculate how many tokens result from exchanging at a flat rate. A\\n    /// minimum price is used to value output tokens, but not input tokens.\\n    /// Minimum price for output tokens avoids giving out too many if the price\\n    /// is very small.  The minimum price is not symmetric, because we don't\\n    /// want to overvalue tokens that are coming in, and end up giving out more\\n    /// output tokens as a result\\n    /// @param tokensMintedDecimal quantity of input tokens to be exchanged\\n    /// @param fairPriceInDecimal price of input tokens\\n    /// @param fairPriceOutDecimal price of output tokens\\n    /// @param minPriceDecimal minimal price to use for output tokens\\n    /// @return tokensOutDecimal quantity of tokens resulting from the exchange\\n    function calcElementwiseFairAmount(\\n        uint256 tokensMintedDecimal,\\n        uint256 fairPriceInDecimal,\\n        uint256 fairPriceOutDecimal,\\n        uint256 minPriceDecimal\\n    ) internal pure returns (uint256 tokensOutDecimal) {\\n        fairPriceOutDecimal = Math.max(fairPriceOutDecimal, minPriceDecimal);\\n        tokensOutDecimal = (tokensMintedDecimal * fairPriceInDecimal) / fairPriceOutDecimal;\\n    }\\n\\n    /// @dev calculate the proportion of spread attributed to the output token.\\n    /// The less balance we have than the target, the more the spread since we\\n    /// are losing the token.\\n    function applyOutputSlippage(uint256 balance, uint256 tokensOut, uint256 targetBalance)\\n        internal\\n        pure\\n        returns (uint256 adjustedTokensDecimal)\\n    {\\n        // How many tokens from tokensOut that are above the target balance. Exchanged 1:1\\n        uint256 tokensAboveTarget = Math.min(tokensOut, balance - Math.min(targetBalance, balance));\\n        adjustedTokensDecimal += tokensAboveTarget * ONE_DECIMAL;\\n\\n        // Tokens that are now bringing us below target are run through amm to introduce slippage\\n        uint256 tokensBelowTarget = tokensOut - tokensAboveTarget;\\n\\n        if (tokensBelowTarget > 0) {\\n            balance -= tokensAboveTarget;\\n            uint256 balanceTokens = balance * tokensBelowTarget;\\n            // (b^2 d) / (t^2 + bd)\\n            uint256 numerator = balance * balanceTokens;\\n            uint256 denominator = targetBalance * targetBalance + balanceTokens;\\n\\n            adjustedTokensDecimal += Math.mulDiv(numerator, ONE_DECIMAL, denominator);\\n        }\\n    }\\n\\n    /// @dev calculate the output spread. This is equivalent to output slippage\\n    /// assuming an infinitessimal trade size. tokensOutDecimal does not\\n    /// influence the amount of spread.\\n    function applyOutputSpread(uint256 balance, uint256 tokensOutDecimal, uint256 targetBalance)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // Only apply slippage if balance below target\\n        if (balance < targetBalance) {\\n            uint256 numerator = balance * balance;\\n            uint256 denominator = targetBalance * targetBalance;\\n            // (b^2 d) / (t^2)\\n            return Math.mulDiv(numerator, tokensOutDecimal, denominator);\\n        } else {\\n            return tokensOutDecimal;\\n        }\\n    }\\n\\n    /// @dev Calculate the amount of tokensOut given the amount of tokensMinted\\n    /// @param tokensMinted amount of tokens minted that we are trying to exchange\\n    /// @param indexOut the index of the outcome token we are trying to buy\\n    /// @param targetBalance the target balance of each outcome token. We assume\\n    /// equal target balance is optimal, so it can be represented by a single\\n    /// value rather than an array. All token balances should ideally equal this\\n    /// value\\n    /// @param collateralBalance Extra collateral available to mint more tokens\\n    /// @param balances The current balances of each outcome token in the pool\\n    /// @param fairPriceDecimals normalized prices for each outcome token provided externally\\n    /// @return tokensOut how many tokens are swapped for the other minted tokens\\n    /// @return newPoolValue given the fair prices, what is the overall pool value after the exchange\\n    function calcBuyAmountV3(\\n        uint256 tokensMinted,\\n        uint256 indexOut,\\n        uint256 targetBalance,\\n        uint256 collateralBalance,\\n        uint256 minPriceDecimal,\\n        uint256[] memory balances,\\n        uint256[] memory fairPriceDecimals\\n    ) internal pure returns (uint256 tokensOut, uint256 newPoolValue) {\\n        if (indexOut >= balances.length) revert AmmErrors.InvalidOutcomeIndex();\\n        if (fairPriceDecimals.length != balances.length) revert AmmErrors.InvalidPrices();\\n        if (targetBalance == 0) revert AmmErrors.NoLiquidityAvailable();\\n\\n        // High level overview:\\n        // 1. We exchange these tokens at a flat rate according to fairPrices. This ignores token balances.\\n        // 2. We apply a constant product curve on the output tokens, relative to a target balance\\n\\n        uint256 tokensOutDecimal = 0;\\n        uint256 newPoolValueDecimal = 0;\\n        for (uint256 i = 0; i < fairPriceDecimals.length; i++) {\\n            if (i == indexOut) continue;\\n\\n            // 1. flat exchange\\n            uint256 inputTokensDecimal = tokensMinted * ONE_DECIMAL;\\n            tokensOutDecimal += calcElementwiseFairAmount(\\n                inputTokensDecimal, fairPriceDecimals[i], fairPriceDecimals[indexOut], minPriceDecimal\\n            );\\n\\n            newPoolValueDecimal += (balances[i] + collateralBalance + tokensMinted) * fairPriceDecimals[i];\\n        }\\n\\n        // 2. slippage for the out pool\\n        tokensOutDecimal =\\n            applyOutputSlippage(balances[indexOut] + collateralBalance, tokensOutDecimal / ONE_DECIMAL, targetBalance);\\n\\n        tokensOut = tokensOutDecimal / ONE_DECIMAL;\\n        newPoolValueDecimal += (balances[indexOut] + collateralBalance - tokensOut) * fairPriceDecimals[indexOut];\\n        newPoolValue = newPoolValueDecimal.ceilDiv(ONE_DECIMAL);\\n    }\\n\\n    /// @dev Calculate the current prices of all tokens, only with spread, and\\n    /// no slippage. This can be used on the frontend to compare the price\\n    /// impact of trade size.\\n    /// @param targetBalance the target balance of each outcome token. We assume\\n    /// equal target balance is optimal, so it can be represented by a single\\n    /// value rather than an array. All token balances should ideally equal this\\n    /// value\\n    /// @param collateralBalance Extra collateral available to mint more tokens\\n    /// @param balances The current balances of each outcome token in the pool\\n    /// @param fairPriceDecimals normalized prices for each outcome token provided externally\\n    /// @return spontaneousPriceDecimals the modified prices of each token that\\n    /// include the spread. Will not sum to ONE_DECIMAL.\\n    function calcSpontaneousPricesV3(\\n        uint256 targetBalance,\\n        uint256 collateralBalance,\\n        uint256 minPriceDecimal,\\n        uint256[] memory balances,\\n        uint256[] memory fairPriceDecimals\\n    ) internal pure returns (uint256[] memory spontaneousPriceDecimals) {\\n        if (fairPriceDecimals.length != balances.length) revert AmmErrors.InvalidPrices();\\n        if (targetBalance == 0) revert AmmErrors.NoLiquidityAvailable();\\n\\n        spontaneousPriceDecimals = new uint256[](fairPriceDecimals.length);\\n\\n        uint256 tokensInDecimal = ONE_DECIMAL;\\n        for (uint256 indexOut = 0; indexOut < spontaneousPriceDecimals.length; indexOut++) {\\n            // Calculate the spontaneous price for each outcome\\n            // Can be calculated by exchanging ONE_DECIMAL tokens at the\\n            // spontaneous price to get number of tokens out.  Then the\\n            // reciprocal is the price\\n\\n            uint256 balanceOut = balances[indexOut] + collateralBalance;\\n\\n            uint256 tokensOutDecimal = 0;\\n            for (uint256 indexIn = 0; indexIn < fairPriceDecimals.length; indexIn++) {\\n                if (indexOut == indexIn) continue;\\n\\n                // 1. flat exchange\\n                tokensOutDecimal += calcElementwiseFairAmount(\\n                    tokensInDecimal, fairPriceDecimals[indexIn], fairPriceDecimals[indexOut], minPriceDecimal\\n                );\\n            }\\n\\n            // 2. spread for the out pool\\n            tokensOutDecimal = applyOutputSpread(balanceOut, tokensOutDecimal, targetBalance);\\n\\n            // To get the price, need to consider total tokens acquired during a purchase.\\n            // Typically tokens are split among all outcomes, and the unwanted\\n            // ones are exchanged for tokensOut.  The total at the end of output\\n            // tokens also include the tokensIn amount from the split\\n            uint256 tokensBoughtDecimal = tokensOutDecimal + tokensInDecimal;\\n            spontaneousPriceDecimals[indexOut] = (tokensInDecimal * ONE_DECIMAL) / tokensBoughtDecimal;\\n        }\\n    }\\n\\n    /// @dev describes operations to be done with respect to parent funding in\\n    /// order to maintain the right amount of reserves locally vs in the parent\\n    struct ParentOperations {\\n        uint256 collateralToRequestFromParent;\\n        uint256 collateralToReturnToParent;\\n        uint256 sharesToBurnOfParent;\\n    }\\n\\n    struct ShareContext {\\n        uint256 parentShares;\\n        uint256 totalShares;\\n    }\\n\\n    struct TargetContext {\\n        /// @dev target the target balance used by all AMM calculations\\n        uint256 target;\\n        /// @dev all collateral available to be used to mint tokens, including that from the parent\\n        uint256 globalReserves;\\n        /// @dev collateral available for minting just in the market itself.\\n        uint256 localReserves;\\n        uint256[] balances;\\n    }\\n\\n    struct BuyContext {\\n        uint256 investmentMinusFees;\\n        uint256 tokensExchanged;\\n        uint256 newPoolValue;\\n    }\\n\\n    /// @dev Calculate how the state of the Amm Pool should change as a result of a buy order.\\n    /// @param indexOut the index of the bought token\\n    /// @param targetContext the current state of the pool - token balances,\\n    /// reserves, and value target. This is modified in place to reflect the\\n    /// state after the fact\\n    /// @param buyContext the information from the buy order - how much was paid, and how much was received\\n    /// @param shareContext information on liquidity shares\\n    /// @return outcomeTokensBought the total amount of tokens the buyer should receive\\n    /// @return tokensToMint how many tokens should be minted across all outcomes to fulfil the order\\n    /// @return parentOps requests and returns of collateral to a parent pool\\n    function calcMarketPoolChanges(\\n        uint256 indexOut,\\n        TargetContext memory targetContext,\\n        BuyContext memory buyContext,\\n        ShareContext memory shareContext\\n    ) internal pure returns (uint256 outcomeTokensBought, uint256 tokensToMint, ParentOperations memory parentOps) {\\n        parentOps = ParentOperations(0, 0, 0);\\n\\n        outcomeTokensBought = buyContext.tokensExchanged + buyContext.investmentMinusFees;\\n        tokensToMint = outcomeTokensBought.subClamp(targetContext.balances[indexOut]);\\n\\n        uint256 localReservesAfterPayment = targetContext.localReserves + buyContext.investmentMinusFees;\\n\\n        // check if we don't have enough tokens, or too many\\n        if (tokensToMint >= localReservesAfterPayment) {\\n            // If collateral is needed from the parent to mint tokens, that\\n            // implies that all funder collateral will be tied up in tokens.\\n            unchecked {\\n                parentOps.collateralToRequestFromParent = tokensToMint - localReservesAfterPayment;\\n            }\\n            targetContext.localReserves = 0;\\n        } else {\\n            // In this case all parent funding is tied up in tokens, and\\n            // potentially some collateral is still in reserves from other\\n            // funders. None of the collateral in reserves before the buy\\n            // operation belongs to the parent.\\n            // The leftover collateral from the buyer's investment is\\n            // distributed between local reserves, and back to the parent\\n\\n            uint256 investmentLeftOver;\\n            unchecked {\\n                // Min needed here because parent is only entitled to get\\n                // collateral back from investment, not local reserves from\\n                // individual contributors.\\n                investmentLeftOver = Math.min(localReservesAfterPayment - tokensToMint, buyContext.investmentMinusFees);\\n            }\\n\\n            assert(shareContext.totalShares > 0);\\n            if (shareContext.parentShares > 0) {\\n                uint256 tokenAndLocalReservesValue =\\n                    (buyContext.newPoolValue + targetContext.localReserves - targetContext.globalReserves);\\n\\n                // parent is eligible to get only its portion of leftover collateral\\n                parentOps.collateralToReturnToParent =\\n                    (investmentLeftOver * shareContext.parentShares) / shareContext.totalShares;\\n                // number of shares to return depends on proportion of the collateral we are returning to value in market\\n                parentOps.sharesToBurnOfParent =\\n                    (parentOps.collateralToReturnToParent * shareContext.totalShares) / tokenAndLocalReservesValue;\\n            }\\n\\n            // calculate new local reserves after minting and returns to parent\\n            targetContext.localReserves =\\n                localReservesAfterPayment - tokensToMint - parentOps.collateralToReturnToParent;\\n        }\\n\\n        // Update TargetContext so it reflects the new state of the market\\n        targetContext.globalReserves = targetContext.globalReserves + buyContext.investmentMinusFees - tokensToMint;\\n        for (uint256 i = 0; i < targetContext.balances.length; i++) {\\n            targetContext.balances[i] += tokensToMint;\\n            if (i == indexOut) {\\n                targetContext.balances[i] -= outcomeTokensBought;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/markets/AmmErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface AmmErrors {\\n    error InvalidOutcomeIndex();\\n    error InvalidPrices();\\n    error NoLiquidityAvailable();\\n}\\n\"\r\n    },\r\n    \"contracts/funding/FundingErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface FundingErrors {\\n    error InvalidFundingAmount();\\n    error InvalidBurnAmount();\\n    error InvalidReceiverAddress();\\n    error PoolValueZero();\\n\\n    /// @dev Fee is is or exceeds 100%\\n    error InvalidFee();\\n\\n    /// @dev Trying to retain fees that exceed the current reserves\\n    error FeesExceedReserves();\\n\\n    /// @dev Funding is so large, that it may lead to overflow errors in future\\n    /// actions\\n    error ExcessiveFunding();\\n\\n    /// @dev Collateral ERC20 decimals exceed 18, leading to potential overflows\\n    error ExcessiveCollateralDecimals();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/markets/IUpdateFairPrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UpdateFairPricesEvents {\\n    event MarketPricesUpdated(uint256[] fairPriceDecimals);\\n    event MarketMinPriceUpdated(uint128 minPriceDecimal);\\n}\\n\\ninterface IUpdateFairPrices is UpdateFairPricesEvents {\\n    function updateFairPrices(uint256[] calldata fairPriceDecimals) external;\\n    function updateMinPrice(uint128 minPriceDecimal) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"UDS/=lib/upgrade-scripts/lib/UDS/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"futils/=lib/upgrade-scripts/lib/UDS/lib/futils/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"upgrade-scripts/=lib/upgrade-scripts/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct MarketFundingPool.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"}],\"name\":\"ChildPoolNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveCollateralDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveFunding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeesExceedReserves\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLimitsArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"}],\"name\":\"NotAChildPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolValueZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approved\",\"type\":\"uint256\"}],\"name\":\"ChildPoolApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAddedToFees\",\"type\":\"uint256\"}],\"name\":\"FeesRetained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRemovedFromFees\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"name\":\"FundingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralGiven\",\"type\":\"uint256\"}],\"name\":\"FundingGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensRemoved\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"name\":\"FundingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"name\":\"FundingRemovedAsToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUnlocked\",\"type\":\"uint256\"}],\"name\":\"FundingReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"RequestLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"}],\"name\":\"addFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"}],\"name\":\"addFundingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"children\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sharesToBurn\",\"type\":\"uint256[]\"}],\"name\":\"batchRemoveChildShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSharesBurnt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToBurn\",\"type\":\"uint256\"}],\"name\":\"calcRemoveCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAdmin\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExecutor\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"conditionOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"marketLimits\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"QuestionID\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"fairPriceDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"minPriceDecimal\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"haltTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketMakerFactory.PriceMarketParams[]\",\"name\":\"marketParamsArray\",\"type\":\"tuple[]\"}],\"name\":\"createMarketsWithPrices\",\"outputs\":[{\"internalType\":\"contract MarketMaker[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract MarketMakerFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"feesReturned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesWithdrawableBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childSharesBurnt\",\"type\":\"uint256\"}],\"name\":\"fundingReturned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"}],\"name\":\"getApprovalForChild\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"}],\"name\":\"getAvailableFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableFunding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTarget\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getFunderCostBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunderCostBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToBurn\",\"type\":\"uint256\"}],\"name\":\"removeChildShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"childSharesReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesToBurn\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralRequested\",\"type\":\"uint256\"}],\"name\":\"requestFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approval\",\"type\":\"uint256\"}],\"name\":\"setApprovalForChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setRequestLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChildValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralRemovedFromFees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketFundingPool", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e5c3fe18de53d15e5068838c723f60cd86e2ab70000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000012b3779375fff2b3936471499e8613b5e34394620000000000000000000000005563db479ccc9d179069cd9cda2627b1f2efa2cb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}