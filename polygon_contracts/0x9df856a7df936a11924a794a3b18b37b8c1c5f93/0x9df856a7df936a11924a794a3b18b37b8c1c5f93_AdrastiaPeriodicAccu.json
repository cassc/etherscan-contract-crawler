{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IAccumulator\\n * @notice An interface that defines an accumulator - that is, a contract that updates cumulative value(s) when the\\n *   underlying value(s) change by more than the update threshold.\\n */\\nabstract contract IAccumulator {\\n    /// @notice Gets the scalar (as a power of 10) to be used for calculating changes in value.\\n    /// @return The scalar to be used for calculating changes in value.\\n    function changePrecision() external view virtual returns (uint256);\\n\\n    /// @notice Gets the threshold at which an update to the cumulative value(s) should be performed.\\n    /// @return A percentage scaled by the change precision.\\n    function updateThreshold() external view virtual returns (uint256);\\n\\n    /// @notice Gets the minimum delay between updates to the cumulative value(s).\\n    /// @return The minimum delay between updates to the cumulative value(s), in seconds.\\n    function updateDelay() external view virtual returns (uint256);\\n\\n    /// @notice Gets the maximum delay (target) between updates to the cumulative value(s), without requiring a change\\n    ///   past the update threshold.\\n    /// @return The maximum delay (target) between updates to the cumulative value(s), in seconds.\\n    function heartbeat() external view virtual returns (uint256);\\n\\n    /// @notice Determines whether the specified change threshold has been surpassed with respect to the specified\\n    ///   data.\\n    /// @dev Calculates the change from the stored observation to the current observation.\\n    /// @param data Amy data relating to the update.\\n    /// @param changeThreshold The change threshold as a percentage multiplied by the change precision\\n    ///   (`changePrecision`). Ex: a 1% change is respresented as 0.01 * `changePrecision`.\\n    /// @return surpassed True if the update threshold has been surpassed; false otherwise.\\n    function changeThresholdSurpassed(bytes memory data, uint256 changeThreshold) public view virtual returns (bool);\\n\\n    /// @notice Determines whether the update threshold has been surpassed with respect to the specified data.\\n    /// @dev Calculates the change from the stored observation to the current observation.\\n    /// @param data Amy data relating to the update.\\n    /// @return surpassed True if the update threshold has been surpassed; false otherwise.\\n    function updateThresholdSurpassed(bytes memory data) public view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IHasLiquidityAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IHasLiquidityAccumulator\\n * @notice An interface that defines a contract containing liquidity accumulator.\\n */\\ninterface IHasLiquidityAccumulator {\\n    /// @notice Gets the address of the liquidity accumulator.\\n    /// @return la The address of the liquidity accumulator.\\n    function liquidityAccumulator() external view returns (address la);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IHasPriceAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IHasPriceAccumulator\\n * @notice An interface that defines a contract containing price accumulator.\\n */\\ninterface IHasPriceAccumulator {\\n    /// @notice Gets the address of the price accumulator.\\n    /// @return pa The address of the price accumulator.\\n    function priceAccumulator() external view returns (address pa);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IHistoricalLiquidityAccumulationOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"../libraries/AccumulationLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalLiquidityAccumulationOracle\\n * @notice An interface that defines an oracle contract that stores historical liquidity accumulations.\\n */\\ninterface IHistoricalLiquidityAccumulationOracle {\\n    /// @notice Gets a liquidity accumulation for a token at a specific index.\\n    /// @param token The address of the token to get the accumulation for.\\n    /// @param index The index of the accumulation to get, where index 0 contains the latest accumulation, and the last\\n    ///   index contains the oldest accumulation (uses reverse chronological ordering).\\n    /// @return The accumulation for the token at the specified index.\\n    function getLiquidityAccumulationAt(\\n        address token,\\n        uint256 index\\n    ) external view returns (AccumulationLibrary.LiquidityAccumulator memory);\\n\\n    /// @notice Gets the latest liquidity accumulations for a token.\\n    /// @param token The address of the token to get the accumulations for.\\n    /// @param amount The number of accumulations to get.\\n    /// @return The latest accumulations for the token, in reverse chronological order, from newest to oldest.\\n    function getLiquidityAccumulations(\\n        address token,\\n        uint256 amount\\n    ) external view returns (AccumulationLibrary.LiquidityAccumulator[] memory);\\n\\n    /// @notice Gets the latest liquidity accumulations for a token.\\n    /// @param token The address of the token to get the accumulations for.\\n    /// @param amount The number of accumulations to get.\\n    /// @param offset The index of the first accumulations to get (default: 0).\\n    /// @param increment The increment between accumulations to get (default: 1).\\n    /// @return The latest accumulations for the token, in reverse chronological order, from newest to oldest.\\n    function getLiquidityAccumulations(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (AccumulationLibrary.LiquidityAccumulator[] memory);\\n\\n    /// @notice Gets the number of liquidity accumulations for a token.\\n    /// @param token The address of the token to get the number of accumulations for.\\n    /// @return count The number of accumulations for the token.\\n    function getLiquidityAccumulationsCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of liquidity accumulations for a token.\\n    /// @param token The address of the token to get the capacity of accumulations for.\\n    /// @return capacity The capacity of accumulations for the token.\\n    function getLiquidityAccumulationsCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of liquidity accumulations for a token.\\n    /// @param token The address of the token to set the capacity of accumulations for.\\n    /// @param amount The new capacity of accumulations for the token.\\n    function setLiquidityAccumulationsCapacity(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IHistoricalPriceAccumulationOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"../libraries/AccumulationLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalPriceAccumulationOracle\\n * @notice An interface that defines an oracle contract that stores historical price accumulations.\\n */\\ninterface IHistoricalPriceAccumulationOracle {\\n    /// @notice Gets a price accumulation for a token at a specific index.\\n    /// @param token The address of the token to get the accumulation for.\\n    /// @param index The index of the accumulation to get, where index 0 contains the latest accumulation, and the last\\n    ///   index contains the oldest accumulation (uses reverse chronological ordering).\\n    /// @return The accumulation for the token at the specified index.\\n    function getPriceAccumulationAt(\\n        address token,\\n        uint256 index\\n    ) external view returns (AccumulationLibrary.PriceAccumulator memory);\\n\\n    /// @notice Gets the latest price accumulations for a token.\\n    /// @param token The address of the token to get the accumulations for.\\n    /// @param amount The number of accumulations to get.\\n    /// @return The latest accumulations for the token, in reverse chronological order, from newest to oldest.\\n    function getPriceAccumulations(\\n        address token,\\n        uint256 amount\\n    ) external view returns (AccumulationLibrary.PriceAccumulator[] memory);\\n\\n    /// @notice Gets the latest price accumulations for a token.\\n    /// @param token The address of the token to get the accumulations for.\\n    /// @param amount The number of accumulations to get.\\n    /// @param offset The index of the first accumulations to get (default: 0).\\n    /// @param increment The increment between accumulations to get (default: 1).\\n    /// @return The latest accumulations for the token, in reverse chronological order, from newest to oldest.\\n    function getPriceAccumulations(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (AccumulationLibrary.PriceAccumulator[] memory);\\n\\n    /// @notice Gets the number of price accumulations for a token.\\n    /// @param token The address of the token to get the number of accumulations for.\\n    /// @return count The number of accumulations for the token.\\n    function getPriceAccumulationsCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of price accumulations for a token.\\n    /// @param token The address of the token to get the capacity of accumulations for.\\n    /// @return capacity The capacity of accumulations for the token.\\n    function getPriceAccumulationsCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of price accumulations for a token.\\n    /// @param token The address of the token to set the capacity of accumulations for.\\n    /// @param amount The new capacity of accumulations for the token.\\n    function setPriceAccumulationsCapacity(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/ILiquidityAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IAccumulator.sol\\\";\\n\\nimport \\\"../libraries/AccumulationLibrary.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\n\\n/**\\n * @title ILiquidityAccumulator\\n * @notice An interface that defines a \\\"liquidity accumulator\\\" - that is, cumulative liquidity levels - with a\\n *   single quote token and many exchange tokens.\\n * @dev Liquidity accumulators are used to calculate time-weighted average liquidity levels.\\n */\\nabstract contract ILiquidityAccumulator is IAccumulator {\\n    /// @notice Emitted when the accumulator is updated.\\n    /// @dev The accumulator's observation and cumulative values are updated when this is emitted.\\n    /// @param token The address of the token that the update is for.\\n    /// @param tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n    /// @param quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n    /// @param timestamp The epoch timestamp of the update (in seconds).\\n    event Updated(address indexed token, uint256 tokenLiquidity, uint256 quoteTokenLiquidity, uint256 timestamp);\\n\\n    /**\\n     * @notice Calculates a liquidity levels from two different cumulative liquidity levels.\\n     * @param firstAccumulation The first cumulative liquidity levels.\\n     * @param secondAccumulation The last cumulative liquidity levels.\\n     * @dev Reverts if the timestamp of the first accumulation is 0, or if it's not strictly less than the timestamp of\\n     *  the second.\\n     * @return tokenLiquidity A time-weighted average liquidity level for a token, in wei, derived from two cumulative\\n     *  liquidity levels.\\n     * @return quoteTokenLiquidity A time-weighted average liquidity level for the quote token, in wei, derived from two\\n     *  cumulative liquidity levels.\\n     */\\n    function calculateLiquidity(\\n        AccumulationLibrary.LiquidityAccumulator calldata firstAccumulation,\\n        AccumulationLibrary.LiquidityAccumulator calldata secondAccumulation\\n    ) external view virtual returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    /// @notice Gets the last cumulative liquidity levels for the token and quote token that was stored.\\n    /// @param token The address of the token to get the cumulative liquidity levels for (with the quote token).\\n    /// @return The last cumulative liquidity levels (in wei) along with the timestamp of those levels.\\n    function getLastAccumulation(\\n        address token\\n    ) public view virtual returns (AccumulationLibrary.LiquidityAccumulator memory);\\n\\n    /// @notice Gets the current cumulative liquidity levels for the token and quote token.\\n    /// @param token The address of the token to get the cumulative liquidity levels for (with the quote token).\\n    /// @return The current cumulative liquidity levels (in wei) along with the timestamp of those levels.\\n    function getCurrentAccumulation(\\n        address token\\n    ) public view virtual returns (AccumulationLibrary.LiquidityAccumulator memory);\\n\\n    function liquidityDecimals() public view virtual returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/ILiquidityOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./IQuoteToken.sol\\\";\\n\\n/**\\n * @title ILiquidityOracle\\n * @notice An interface that defines a liquidity oracle with a single quote token (or currency) and many exchange\\n *  tokens.\\n */\\nabstract contract ILiquidityOracle is IUpdateable, IQuoteToken {\\n    /// @notice Gets the liquidity levels of the token and the quote token in the underlying pool.\\n    /// @param token The token to get liquidity levels of (along with the quote token).\\n    /// @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n    /// @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n    function consultLiquidity(address token)\\n        public\\n        view\\n        virtual\\n        returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    /**\\n     * @notice Gets the liquidity levels of the token and the quote token in the underlying pool, reverting if the\\n     *  quotation is older than the maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get liquidity levels of (along with the quote token).\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function consultLiquidity(address token, uint256 maxAge)\\n        public\\n        view\\n        virtual\\n        returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./ILiquidityOracle.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\n\\n/**\\n * @title IOracle\\n * @notice An interface that defines a price and liquidity oracle.\\n */\\nabstract contract IOracle is IUpdateable, IPriceOracle, ILiquidityOracle {\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token along with the liquidity levels of the token\\n     *  andquote token in the underlying pool.\\n     * @param token The token to get the price of.\\n     * @return price The quote token denominated price for a whole token.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function consult(\\n        address token\\n    ) public view virtual returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token along with the liquidity levels of the token and\\n     *  quote token in the underlying pool, reverting if the quotation is older than the maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get the price of.\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return price The quote token denominated price for a whole token.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function consult(\\n        address token,\\n        uint256 maxAge\\n    ) public view virtual returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    function liquidityDecimals() public view virtual returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IPeriodic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IPeriodic\\n * @notice An interface that defines a contract containing a period.\\n * @dev This typically refers to an update period.\\n */\\ninterface IPeriodic {\\n    /// @notice Gets the period, in seconds.\\n    /// @return periodSeconds The period, in seconds.\\n    function period() external view returns (uint256 periodSeconds);\\n\\n    // @notice Gets the number of observations made every period.\\n    // @return granularity The number of observations made every period.\\n    function granularity() external view returns (uint256 granularity);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IPriceAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IAccumulator.sol\\\";\\n\\nimport \\\"../libraries/AccumulationLibrary.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\n\\n/**\\n * @title IPriceAccumulator\\n * @notice An interface that defines a \\\"price accumulator\\\" - that is, a cumulative price - with a single quote token\\n *   and many exchange tokens.\\n * @dev Price accumulators are used to calculate time-weighted average prices.\\n */\\nabstract contract IPriceAccumulator is IAccumulator {\\n    /// @notice Emitted when the accumulator is updated.\\n    /// @dev The accumulator's observation and cumulative values are updated when this is emitted.\\n    /// @param token The address of the token that the update is for.\\n    /// @param price The quote token denominated price for a whole token.\\n    /// @param timestamp The epoch timestamp of the update (in seconds).\\n    event Updated(address indexed token, uint256 price, uint256 timestamp);\\n\\n    /**\\n     * @notice Calculates a price from two different cumulative prices.\\n     * @param firstAccumulation The first cumulative price.\\n     * @param secondAccumulation The last cumulative price.\\n     * @dev Reverts if the timestamp of the first accumulation is 0, or if it's not strictly less than the timestamp of\\n     *  the second.\\n     * @return price A time-weighted average price derived from two cumulative prices.\\n     */\\n    function calculatePrice(\\n        AccumulationLibrary.PriceAccumulator calldata firstAccumulation,\\n        AccumulationLibrary.PriceAccumulator calldata secondAccumulation\\n    ) external view virtual returns (uint112 price);\\n\\n    /// @notice Gets the last cumulative price that was stored.\\n    /// @param token The address of the token to get the cumulative price for.\\n    /// @return The last cumulative price along with the timestamp of that price.\\n    function getLastAccumulation(\\n        address token\\n    ) public view virtual returns (AccumulationLibrary.PriceAccumulator memory);\\n\\n    /// @notice Gets the current cumulative price.\\n    /// @param token The address of the token to get the cumulative price for.\\n    /// @return The current cumulative price along with the timestamp of that price.\\n    function getCurrentAccumulation(\\n        address token\\n    ) public view virtual returns (AccumulationLibrary.PriceAccumulator memory);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./IQuoteToken.sol\\\";\\n\\n/// @title IPriceOracle\\n/// @notice An interface that defines a price oracle with a single quote token (or currency) and many exchange tokens.\\nabstract contract IPriceOracle is IUpdateable, IQuoteToken {\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token.\\n     * @param token The token to get the price of.\\n     * @return price The quote token denominated price for a whole token.\\n     */\\n    function consultPrice(address token) public view virtual returns (uint112 price);\\n\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token, reverting if the quotation is older than the\\n     *  maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get the price of.\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return price The quote token denominated price for a whole token.\\n     */\\n    function consultPrice(address token, uint256 maxAge) public view virtual returns (uint112 price);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IQuoteToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IQuoteToken\\n * @notice An interface that defines a contract containing a quote token (or currency), providing the associated\\n *  metadata.\\n */\\nabstract contract IQuoteToken {\\n    /// @notice Gets the quote token (or currency) name.\\n    /// @return The name of the quote token (or currency).\\n    function quoteTokenName() public view virtual returns (string memory);\\n\\n    /// @notice Gets the quote token address (if any).\\n    /// @dev This may return address(0) if no specific quote token is used (such as an aggregate of quote tokens).\\n    /// @return The address of the quote token, or address(0) if no specific quote token is used.\\n    function quoteTokenAddress() public view virtual returns (address);\\n\\n    /// @notice Gets the quote token (or currency) symbol.\\n    /// @return The symbol of the quote token (or currency).\\n    function quoteTokenSymbol() public view virtual returns (string memory);\\n\\n    /// @notice Gets the number of decimal places that quote prices have.\\n    /// @return The number of decimals of the quote token (or currency) that quote prices have.\\n    function quoteTokenDecimals() public view virtual returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IUpdateable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/// @title IUpdateByToken\\n/// @notice An interface that defines a contract that is updateable as per the input data.\\nabstract contract IUpdateable {\\n    /// @notice Performs an update as per the input data.\\n    /// @param data Any data needed for the update.\\n    /// @return b True if anything was updated; false otherwise.\\n    function update(bytes memory data) public virtual returns (bool b);\\n\\n    /// @notice Checks if an update needs to be performed.\\n    /// @param data Any data relating to the update.\\n    /// @return b True if an update needs to be performed; false otherwise.\\n    function needsUpdate(bytes memory data) public view virtual returns (bool b);\\n\\n    /// @notice Check if an update can be performed by the caller (if needed).\\n    /// @dev Tries to determine if the caller can call update with a valid observation being stored.\\n    /// @dev This is not meant to be called by state-modifying functions.\\n    /// @param data Any data relating to the update.\\n    /// @return b True if an update can be performed by the caller; false otherwise.\\n    function canUpdate(bytes memory data) public view virtual returns (bool b);\\n\\n    /// @notice Gets the timestamp of the last update.\\n    /// @param data Any data relating to the update.\\n    /// @return A unix timestamp.\\n    function lastUpdateTime(bytes memory data) public view virtual returns (uint256);\\n\\n    /// @notice Gets the amount of time (in seconds) since the last update.\\n    /// @param data Any data relating to the update.\\n    /// @return Time in seconds.\\n    function timeSinceLastUpdate(bytes memory data) public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/AccumulationLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @notice A library for calculating and storing accumulations of time-weighted average values in the form of sumations\\n *   of (value * time).\\n */\\nlibrary AccumulationLibrary {\\n    /**\\n     * @notice A struct for storing a snapshot of liquidity accumulations.\\n     * @dev The difference of a newer snapshot against an older snapshot can be used to derive time-weighted average\\n     *   liquidities by dividing the difference in value by the difference in time.\\n     */\\n    struct LiquidityAccumulator {\\n        /*\\n         * @notice Accumulates time-weighted average liquidity of the token in the form of a sumation of (price * time),\\n         *   with time measured in seconds.\\n         * @dev Overflow is desired and results in correct behavior as long as the difference between two snapshots\\n         *   is less than or equal to 2^112.\\n         */\\n        uint112 cumulativeTokenLiquidity;\\n        /*\\n         * @notice Accumulates time-weighted average liquidity of the quote token in the form of a sumation of\\n         *   (price * time), with time measured in seconds..\\n         * @dev Overflow is desired and results in correct behavior as long as the difference between two snapshots\\n         *   is less than or equal to 2^112.\\n         */\\n        uint112 cumulativeQuoteTokenLiquidity;\\n        /*\\n         * @notice The unix timestamp (in seconds) of the last update of (addition to) the cumulative price.\\n         */\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n     * @notice A struct for storing a snapshot of price accumulations.\\n     * @dev The difference of a newer snapshot against an older snapshot can be used to derive a time-weighted average\\n     *   price by dividing the difference in value by the difference in time.\\n     */\\n    struct PriceAccumulator {\\n        /*\\n         * @notice Accumulates time-weighted average prices in the form of a sumation of (price * time), with time\\n         *   measured in seconds.\\n         * @dev Overflow is desired and results in correct behavior as long as the difference between two snapshots\\n         *   is less than or equal to 2^112.\\n         */\\n        uint224 cumulativePrice;\\n        /*\\n         * @notice The unix timestamp (in seconds) of the last update of (addition to) the cumulative price.\\n         */\\n        uint32 timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/ObservationLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary ObservationLibrary {\\n    struct ObservationMetadata {\\n        address oracle;\\n    }\\n\\n    struct Observation {\\n        uint112 price;\\n        uint112 tokenLiquidity;\\n        uint112 quoteTokenLiquidity;\\n        uint32 timestamp;\\n    }\\n\\n    struct MetaObservation {\\n        ObservationMetadata metadata;\\n        Observation data;\\n    }\\n\\n    struct LiquidityObservation {\\n        uint112 tokenLiquidity;\\n        uint112 quoteTokenLiquidity;\\n        uint32 timestamp;\\n    }\\n\\n    struct PriceObservation {\\n        uint112 price;\\n        uint32 timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/AbstractOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\nimport \\\"../utils/SimpleQuotationMetadata.sol\\\";\\n\\nabstract contract AbstractOracle is IERC165, IOracle, SimpleQuotationMetadata {\\n    constructor(address quoteToken_) SimpleQuotationMetadata(quoteToken_) {}\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function update(bytes memory data) public virtual override returns (bool);\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function needsUpdate(bytes memory data) public view virtual override returns (bool);\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function canUpdate(bytes memory data) public view virtual override returns (bool);\\n\\n    function getLatestObservation(\\n        address token\\n    ) public view virtual returns (ObservationLibrary.Observation memory observation);\\n\\n    /// @param data The encoded address of the token for which the update relates to.\\n    /// @inheritdoc IUpdateable\\n    function lastUpdateTime(bytes memory data) public view virtual override returns (uint256) {\\n        address token = abi.decode(data, (address));\\n\\n        return getLatestObservation(token).timestamp;\\n    }\\n\\n    /// @param data The encoded address of the token for which the update relates to.\\n    /// @inheritdoc IUpdateable\\n    function timeSinceLastUpdate(bytes memory data) public view virtual override returns (uint256) {\\n        return block.timestamp - lastUpdateTime(data);\\n    }\\n\\n    function consultPrice(address token) public view virtual override returns (uint112 price) {\\n        if (token == quoteTokenAddress()) return uint112(10 ** quoteTokenDecimals());\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n\\n        return observation.price;\\n    }\\n\\n    /// @inheritdoc IPriceOracle\\n    function consultPrice(address token, uint256 maxAge) public view virtual override returns (uint112 price) {\\n        if (token == quoteTokenAddress()) return uint112(10 ** quoteTokenDecimals());\\n\\n        if (maxAge == 0) {\\n            (price, , ) = instantFetch(token);\\n\\n            return price;\\n        }\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"AbstractOracle: RATE_TOO_OLD\\\");\\n\\n        return observation.price;\\n    }\\n\\n    /// @inheritdoc ILiquidityOracle\\n    function consultLiquidity(\\n        address token\\n    ) public view virtual override returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (0, 0);\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc ILiquidityOracle\\n    function consultLiquidity(\\n        address token,\\n        uint256 maxAge\\n    ) public view virtual override returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (0, 0);\\n\\n        if (maxAge == 0) {\\n            (, tokenLiquidity, quoteTokenLiquidity) = instantFetch(token);\\n\\n            return (tokenLiquidity, quoteTokenLiquidity);\\n        }\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"AbstractOracle: RATE_TOO_OLD\\\");\\n\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function consult(\\n        address token\\n    ) public view virtual override returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (uint112(10 ** quoteTokenDecimals()), 0, 0);\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n\\n        price = observation.price;\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function consult(\\n        address token,\\n        uint256 maxAge\\n    ) public view virtual override returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (uint112(10 ** quoteTokenDecimals()), 0, 0);\\n\\n        if (maxAge == 0) return instantFetch(token);\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"AbstractOracle: RATE_TOO_OLD\\\");\\n\\n        price = observation.price;\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(SimpleQuotationMetadata, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IOracle).interfaceId ||\\n            interfaceId == type(IUpdateable).interfaceId ||\\n            interfaceId == type(IPriceOracle).interfaceId ||\\n            interfaceId == type(ILiquidityOracle).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Fetches the instant rates as of the latest block, straight from the source.\\n     * @dev This is costly in gas and the rates are easier to manipulate.\\n     * @param token The token to get the rates for.\\n     * @return price The quote token denominated price for a whole token.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function instantFetch(\\n        address token\\n    ) internal view virtual returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/PeriodicAccumulationOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./PeriodicOracle.sol\\\";\\nimport \\\"../interfaces/ILiquidityAccumulator.sol\\\";\\nimport \\\"../interfaces/IHasLiquidityAccumulator.sol\\\";\\nimport \\\"../interfaces/IPriceAccumulator.sol\\\";\\nimport \\\"../interfaces/IHasPriceAccumulator.sol\\\";\\nimport \\\"../interfaces/IHistoricalPriceAccumulationOracle.sol\\\";\\nimport \\\"../interfaces/IHistoricalLiquidityAccumulationOracle.sol\\\";\\n\\nimport \\\"../libraries/AccumulationLibrary.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\n\\ncontract PeriodicAccumulationOracle is\\n    IHistoricalPriceAccumulationOracle,\\n    IHistoricalLiquidityAccumulationOracle,\\n    PeriodicOracle,\\n    IHasLiquidityAccumulator,\\n    IHasPriceAccumulator\\n{\\n    using SafeCast for uint256;\\n\\n    struct BufferMetadata {\\n        uint16 start;\\n        uint16 end;\\n        uint16 size;\\n        uint16 maxSize;\\n        uint16 flags; // Bit flags for future use\\n        uint112 __reserved; // Reserved for future use\\n        uint64 extra; // For user extensions\\n    }\\n\\n    address public immutable override liquidityAccumulator;\\n    address public immutable override priceAccumulator;\\n\\n    mapping(address => BufferMetadata) internal accumulationBufferMetadata;\\n\\n    mapping(address => AccumulationLibrary.PriceAccumulator[]) internal priceAccumulationBuffers;\\n    mapping(address => AccumulationLibrary.LiquidityAccumulator[]) internal liquidityAccumulationBuffers;\\n\\n    mapping(address => ObservationLibrary.Observation) internal observations;\\n\\n    /// @notice Emitted when a stored quotation is updated.\\n    /// @param token The address of the token that the quotation is for.\\n    /// @param price The quote token denominated price for a whole token.\\n    /// @param tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n    /// @param quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n    /// @param timestamp The epoch timestamp of the quotation (in seconds).\\n    event Updated(\\n        address indexed token,\\n        uint256 price,\\n        uint256 tokenLiquidity,\\n        uint256 quoteTokenLiquidity,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Event emitted when an accumulation buffer's capacity is increased past the initial capacity.\\n    /// @dev Buffer initialization does not emit an event.\\n    /// @param token The token for which the accumulation buffer's capacity was increased.\\n    /// @param oldCapacity The previous capacity of the accumulation buffer.\\n    /// @param newCapacity The new capacity of the accumulation buffer.\\n    event AccumulationCapacityIncreased(address indexed token, uint256 oldCapacity, uint256 newCapacity);\\n\\n    /// @notice Event emitted when an accumulation buffer's capacity is initialized.\\n    /// @param token The token for which the accumulation buffer's capacity was initialized.\\n    /// @param capacity The capacity of the accumulation buffer.\\n    event AccumulationCapacityInitialized(address indexed token, uint256 capacity);\\n\\n    /// @notice Event emitted when an accumulation is pushed to the buffer.\\n    /// @param token The token for which the accumulation was pushed.\\n    /// @param priceCumulative The cumulative price of the token.\\n    /// @param priceTimestamp The timestamp of the cumulative price.\\n    /// @param tokenLiquidityCumulative The cumulative token liquidity of the token.\\n    /// @param quoteTokenLiquidityCumulative The cumulative quote token liquidity of the token.\\n    /// @param liquidityTimestamp The timestamp of the cumulative liquidity.\\n    event AccumulationPushed(\\n        address indexed token,\\n        uint256 priceCumulative,\\n        uint256 priceTimestamp,\\n        uint256 tokenLiquidityCumulative,\\n        uint256 quoteTokenLiquidityCumulative,\\n        uint256 liquidityTimestamp\\n    );\\n\\n    constructor(\\n        address liquidityAccumulator_,\\n        address priceAccumulator_,\\n        address quoteToken_,\\n        uint256 period_,\\n        uint256 granularity_\\n    ) PeriodicOracle(quoteToken_, period_, granularity_) {\\n        liquidityAccumulator = liquidityAccumulator_;\\n        priceAccumulator = priceAccumulator_;\\n    }\\n\\n    /// @inheritdoc IHistoricalPriceAccumulationOracle\\n    function getPriceAccumulationAt(\\n        address token,\\n        uint256 index\\n    ) external view virtual override returns (AccumulationLibrary.PriceAccumulator memory) {\\n        BufferMetadata memory meta = accumulationBufferMetadata[token];\\n\\n        require(index < meta.size, \\\"PeriodicAccumulationOracle: INVALID_INDEX\\\");\\n\\n        uint256 bufferIndex = meta.end < index ? meta.end + meta.size - index : meta.end - index;\\n\\n        return priceAccumulationBuffers[token][bufferIndex];\\n    }\\n\\n    /// @inheritdoc IHistoricalPriceAccumulationOracle\\n    function getPriceAccumulations(\\n        address token,\\n        uint256 amount\\n    ) external view virtual override returns (AccumulationLibrary.PriceAccumulator[] memory) {\\n        return getPriceAccumulationsInternal(token, amount, 0, 1);\\n    }\\n\\n    /// @inheritdoc IHistoricalPriceAccumulationOracle\\n    function getPriceAccumulations(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view virtual returns (AccumulationLibrary.PriceAccumulator[] memory) {\\n        return getPriceAccumulationsInternal(token, amount, offset, increment);\\n    }\\n\\n    /// @inheritdoc IHistoricalPriceAccumulationOracle\\n    function getPriceAccumulationsCount(address token) external view override returns (uint256) {\\n        return accumulationBufferMetadata[token].size;\\n    }\\n\\n    /// @inheritdoc IHistoricalPriceAccumulationOracle\\n    function getPriceAccumulationsCapacity(address token) external view virtual override returns (uint256) {\\n        uint256 maxSize = accumulationBufferMetadata[token].maxSize;\\n        if (maxSize == 0) return granularity;\\n\\n        return maxSize;\\n    }\\n\\n    /// @inheritdoc IHistoricalPriceAccumulationOracle\\n    /// @param amount The new capacity of accumulations for the token. Must be greater than the current capacity, but\\n    ///   less than 65536.\\n    function setPriceAccumulationsCapacity(address token, uint256 amount) external virtual override {\\n        setAccumulationsCapacityInternal(token, amount);\\n    }\\n\\n    /// @inheritdoc IHistoricalLiquidityAccumulationOracle\\n    function getLiquidityAccumulationAt(\\n        address token,\\n        uint256 index\\n    ) external view virtual override returns (AccumulationLibrary.LiquidityAccumulator memory) {\\n        BufferMetadata memory meta = accumulationBufferMetadata[token];\\n\\n        require(index < meta.size, \\\"PeriodicAccumulationOracle: INVALID_INDEX\\\");\\n\\n        uint256 bufferIndex = meta.end < index ? meta.end + meta.size - index : meta.end - index;\\n\\n        return liquidityAccumulationBuffers[token][bufferIndex];\\n    }\\n\\n    /// @inheritdoc IHistoricalLiquidityAccumulationOracle\\n    function getLiquidityAccumulations(\\n        address token,\\n        uint256 amount\\n    ) external view virtual override returns (AccumulationLibrary.LiquidityAccumulator[] memory) {\\n        return getLiquidityAccumulationsInternal(token, amount, 0, 1);\\n    }\\n\\n    /// @inheritdoc IHistoricalLiquidityAccumulationOracle\\n    function getLiquidityAccumulations(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view virtual returns (AccumulationLibrary.LiquidityAccumulator[] memory) {\\n        return getLiquidityAccumulationsInternal(token, amount, offset, increment);\\n    }\\n\\n    /// @inheritdoc IHistoricalLiquidityAccumulationOracle\\n    function getLiquidityAccumulationsCount(address token) external view override returns (uint256) {\\n        return accumulationBufferMetadata[token].size;\\n    }\\n\\n    /// @inheritdoc IHistoricalLiquidityAccumulationOracle\\n    function getLiquidityAccumulationsCapacity(address token) external view virtual override returns (uint256) {\\n        uint256 maxSize = accumulationBufferMetadata[token].maxSize;\\n        if (maxSize == 0) return granularity;\\n\\n        return maxSize;\\n    }\\n\\n    /// @inheritdoc IHistoricalLiquidityAccumulationOracle\\n    /// @param amount The new capacity of accumulations for the token. Must be greater than the current capacity, but\\n    ///   less than 65536.\\n    function setLiquidityAccumulationsCapacity(address token, uint256 amount) external virtual override {\\n        setAccumulationsCapacityInternal(token, amount);\\n    }\\n\\n    function getLatestObservation(\\n        address token\\n    ) public view virtual override returns (ObservationLibrary.Observation memory observation) {\\n        return observations[token];\\n    }\\n\\n    /// @inheritdoc PeriodicOracle\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        uint256 gracePeriod = accumulatorUpdateDelayTolerance();\\n\\n        if (\\n            IUpdateable(priceAccumulator).timeSinceLastUpdate(data) >=\\n            IAccumulator(priceAccumulator).heartbeat() + gracePeriod ||\\n            IUpdateable(liquidityAccumulator).timeSinceLastUpdate(data) >=\\n            IAccumulator(liquidityAccumulator).heartbeat() + gracePeriod\\n        ) {\\n            // Shouldn't update if the accumulators are not up-to-date\\n            return false;\\n        }\\n\\n        return super.canUpdate(data);\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function lastUpdateTime(bytes memory data) public view virtual override returns (uint256) {\\n        address token = abi.decode(data, (address));\\n\\n        BufferMetadata storage meta = accumulationBufferMetadata[token];\\n\\n        // Return 0 if there are no observations (never updated)\\n        if (meta.size == 0) return 0;\\n\\n        // Note: We ignore the last observation timestamp because it always updates when the accumulation timestamps\\n        // update.\\n        uint256 lastPriceAccumulationTimestamp = priceAccumulationBuffers[token][meta.end].timestamp;\\n        uint256 lastLiquidityAccumulationTimestamp = liquidityAccumulationBuffers[token][meta.end].timestamp;\\n\\n        return Math.max(lastPriceAccumulationTimestamp, lastLiquidityAccumulationTimestamp);\\n    }\\n\\n    /// @inheritdoc PeriodicOracle\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IHasLiquidityAccumulator).interfaceId ||\\n            interfaceId == type(IHasPriceAccumulator).interfaceId ||\\n            interfaceId == type(IHistoricalPriceAccumulationOracle).interfaceId ||\\n            interfaceId == type(IHistoricalLiquidityAccumulationOracle).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function liquidityDecimals() public view virtual override returns (uint8) {\\n        return ILiquidityAccumulator(liquidityAccumulator).liquidityDecimals();\\n    }\\n\\n    /// @notice The grace period that we allow for the accumulators to be in need of a heartbeat update before we\\n    ///   consider it to be out-of-date.\\n    /// @return The grace period in seconds.\\n    function accumulatorUpdateDelayTolerance() public view virtual returns (uint256) {\\n        // We trade some freshness for greater reliability. Using too low of a tolerance reduces the cost of DoS.\\n        // Furthermore, large price fluctuations can require tokens to be bridged by arbitrageurs to fix DEX prices,\\n        // and this can take time. Price accumulators may not get updated during this time as we may require on-chain\\n        // prices to closely match off-chain prices.\\n        return 1 hours;\\n    }\\n\\n    /// @notice The grace period that we allow for the oracle to be in need of an update (as the sum of all update\\n    ///   delays in a period) before we discard the last accumulation. If this grace period is exceeded, it will take\\n    ///   more updates to get a new observation.\\n    /// @dev This is to prevent longer time-weighted averages than we desire. The maximum period is then the period of\\n    ///   this oracle plus this grace period.\\n    /// @return The grace period in seconds.\\n    function updateDelayTolerance() public view virtual returns (uint256) {\\n        // We tolerate two missed periods plus 5 minutes (to allow for some time to update the oracles).\\n        // We trade off some freshness for greater reliability. Using too low of a tolerance reduces the cost of DoS\\n        // attacks.\\n        return (period * 2) + 5 minutes;\\n    }\\n\\n    function setAccumulationsCapacityInternal(address token, uint256 amount) internal virtual {\\n        BufferMetadata storage meta = accumulationBufferMetadata[token];\\n        if (meta.maxSize == 0) {\\n            // Buffer is not initialized yet\\n            initializeBuffers(token);\\n        }\\n\\n        require(amount >= meta.maxSize, \\\"PeriodicAccumulationOracle: CAPACITY_CANNOT_BE_DECREASED\\\");\\n        require(amount <= type(uint16).max, \\\"PeriodicAccumulationOracle: CAPACITY_TOO_LARGE\\\");\\n\\n        AccumulationLibrary.PriceAccumulator[] storage priceAccumulationBuffer = priceAccumulationBuffers[token];\\n        AccumulationLibrary.LiquidityAccumulator[] storage liquidityAccumulationBuffer = liquidityAccumulationBuffers[\\n            token\\n        ];\\n\\n        // Add new slots to the buffer\\n        uint256 capacityToAdd = amount - meta.maxSize;\\n        for (uint256 i = 0; i < capacityToAdd; ++i) {\\n            // Push dummy accumulations with non-zero values to put most of the gas cost on the caller\\n            priceAccumulationBuffer.push(AccumulationLibrary.PriceAccumulator({cumulativePrice: 1, timestamp: 1}));\\n            liquidityAccumulationBuffer.push(\\n                AccumulationLibrary.LiquidityAccumulator({\\n                    cumulativeTokenLiquidity: 1,\\n                    cumulativeQuoteTokenLiquidity: 1,\\n                    timestamp: 1\\n                })\\n            );\\n        }\\n\\n        if (meta.maxSize != amount) {\\n            emit AccumulationCapacityIncreased(token, meta.maxSize, amount);\\n\\n            // Update the metadata\\n            meta.maxSize = uint16(amount);\\n        }\\n    }\\n\\n    function getPriceAccumulationsInternal(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) internal view virtual returns (AccumulationLibrary.PriceAccumulator[] memory) {\\n        if (amount == 0) return new AccumulationLibrary.PriceAccumulator[](0);\\n\\n        BufferMetadata memory meta = accumulationBufferMetadata[token];\\n        require(meta.size > (amount - 1) * increment + offset, \\\"PeriodicAccumulationOracle: INSUFFICIENT_DATA\\\");\\n\\n        AccumulationLibrary.PriceAccumulator[] memory accumulations = new AccumulationLibrary.PriceAccumulator[](\\n            amount\\n        );\\n\\n        uint256 count = 0;\\n\\n        for (\\n            uint256 i = meta.end < offset ? meta.end + meta.size - offset : meta.end - offset;\\n            count < amount;\\n            i = (i < increment) ? (i + meta.size) - increment : i - increment\\n        ) {\\n            accumulations[count++] = priceAccumulationBuffers[token][i];\\n        }\\n\\n        return accumulations;\\n    }\\n\\n    function getLiquidityAccumulationsInternal(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) internal view virtual returns (AccumulationLibrary.LiquidityAccumulator[] memory) {\\n        if (amount == 0) return new AccumulationLibrary.LiquidityAccumulator[](0);\\n\\n        BufferMetadata memory meta = accumulationBufferMetadata[token];\\n        require(meta.size > (amount - 1) * increment + offset, \\\"PeriodicAccumulationOracle: INSUFFICIENT_DATA\\\");\\n\\n        AccumulationLibrary.LiquidityAccumulator[]\\n            memory accumulations = new AccumulationLibrary.LiquidityAccumulator[](amount);\\n\\n        uint256 count = 0;\\n\\n        for (\\n            uint256 i = meta.end < offset ? meta.end + meta.size - offset : meta.end - offset;\\n            count < amount;\\n            i = (i < increment) ? (i + meta.size) - increment : i - increment\\n        ) {\\n            accumulations[count++] = liquidityAccumulationBuffers[token][i];\\n        }\\n\\n        return accumulations;\\n    }\\n\\n    function initializeBuffers(address token) internal virtual {\\n        require(\\n            priceAccumulationBuffers[token].length == 0 && liquidityAccumulationBuffers[token].length == 0,\\n            \\\"PeriodicAccumulationOracle: ALREADY_INITIALIZED\\\"\\n        );\\n\\n        BufferMetadata storage meta = accumulationBufferMetadata[token];\\n\\n        // Initialize the buffers\\n        AccumulationLibrary.PriceAccumulator[] storage priceAccumulationBuffer = priceAccumulationBuffers[token];\\n        AccumulationLibrary.LiquidityAccumulator[] storage liquidityAccumulationBuffer = liquidityAccumulationBuffers[\\n            token\\n        ];\\n\\n        for (uint256 i = 0; i < granularity; ++i) {\\n            priceAccumulationBuffer.push();\\n            liquidityAccumulationBuffer.push();\\n        }\\n\\n        // Initialize the metadata\\n        meta.start = 0;\\n        meta.end = 0;\\n        meta.size = 0;\\n        meta.maxSize = uint16(granularity);\\n\\n        emit AccumulationCapacityInitialized(token, meta.maxSize);\\n    }\\n\\n    function push(\\n        address token,\\n        AccumulationLibrary.PriceAccumulator memory priceAccumulation,\\n        AccumulationLibrary.LiquidityAccumulator memory liquidityAccumulation\\n    ) internal virtual returns (bool) {\\n        BufferMetadata storage meta = accumulationBufferMetadata[token];\\n\\n        if (meta.size == 0) {\\n            if (meta.maxSize == 0) {\\n                // Initialize the buffers\\n                initializeBuffers(token);\\n            }\\n        } else {\\n            // Check that at least one accumulation is newer than the last one\\n            {\\n                uint256 lastPriceAccumulationTimestamp = priceAccumulationBuffers[token][meta.end].timestamp;\\n                uint256 lastLiquidityAccumulationTimestamp = liquidityAccumulationBuffers[token][meta.end].timestamp;\\n\\n                // Note: Reverts if the new accumulations are older than the last ones\\n                uint256 lastPriceAccumulationTimeElapsed = priceAccumulation.timestamp - lastPriceAccumulationTimestamp;\\n                uint256 lastLiquidityAccumulationTimeElapsed = liquidityAccumulation.timestamp -\\n                    lastLiquidityAccumulationTimestamp;\\n\\n                if (lastPriceAccumulationTimeElapsed == 0 && lastLiquidityAccumulationTimeElapsed == 0) {\\n                    // Both accumulations haven't changed, so we don't need to update\\n                    return false;\\n                }\\n            }\\n\\n            meta.end = (meta.end + 1) % meta.maxSize;\\n\\n            // Check if we have enough accumulations for a new observation\\n            if (meta.size >= granularity) {\\n                uint256 startIndex = meta.end < granularity\\n                    ? meta.end + meta.size - granularity\\n                    : meta.end - granularity;\\n\\n                AccumulationLibrary.PriceAccumulator memory firstPriceAccumulation = priceAccumulationBuffers[token][\\n                    startIndex\\n                ];\\n                AccumulationLibrary.LiquidityAccumulator\\n                    memory firstLiquidityAccumulation = liquidityAccumulationBuffers[token][startIndex];\\n\\n                uint256 pricePeriodTimeElapsed = priceAccumulation.timestamp - firstPriceAccumulation.timestamp;\\n                uint256 liquidityPeriodTimeElapsed = liquidityAccumulation.timestamp -\\n                    firstLiquidityAccumulation.timestamp;\\n\\n                uint256 maxUpdateGap = period + updateDelayTolerance();\\n\\n                if (\\n                    pricePeriodTimeElapsed <= maxUpdateGap &&\\n                    pricePeriodTimeElapsed >= period &&\\n                    liquidityPeriodTimeElapsed <= maxUpdateGap &&\\n                    liquidityPeriodTimeElapsed >= period\\n                ) {\\n                    ObservationLibrary.Observation storage observation = observations[token];\\n\\n                    observation.price = IPriceAccumulator(priceAccumulator).calculatePrice(\\n                        firstPriceAccumulation,\\n                        priceAccumulation\\n                    );\\n                    (observation.tokenLiquidity, observation.quoteTokenLiquidity) = ILiquidityAccumulator(\\n                        liquidityAccumulator\\n                    ).calculateLiquidity(firstLiquidityAccumulation, liquidityAccumulation);\\n                    observation.timestamp = block.timestamp.toUint32();\\n\\n                    emit Updated(\\n                        token,\\n                        observation.price,\\n                        observation.tokenLiquidity,\\n                        observation.quoteTokenLiquidity,\\n                        observation.timestamp\\n                    );\\n                }\\n            }\\n        }\\n\\n        priceAccumulationBuffers[token][meta.end] = priceAccumulation;\\n        liquidityAccumulationBuffers[token][meta.end] = liquidityAccumulation;\\n\\n        emit AccumulationPushed(\\n            token,\\n            priceAccumulation.cumulativePrice,\\n            priceAccumulation.timestamp,\\n            liquidityAccumulation.cumulativeTokenLiquidity,\\n            liquidityAccumulation.cumulativeQuoteTokenLiquidity,\\n            liquidityAccumulation.timestamp\\n        );\\n\\n        if (meta.size < meta.maxSize && meta.end == meta.size) {\\n            // We are at the end of the array and we have not yet filled it\\n            meta.size++;\\n        } else {\\n            // start was just overwritten\\n            meta.start = (meta.start + 1) % meta.size;\\n        }\\n\\n        return true;\\n    }\\n\\n    function performUpdate(bytes memory data) internal virtual override returns (bool) {\\n        // We require that the accumulators have a heartbeat update that is within the grace period (i.e. they are\\n        // up-to-date).\\n        // If they are not up-to-date, the oracle will not update.\\n        // It is expected that oracle consumers will check the last update time before using the data as to avoid using\\n        // stale data.\\n        {\\n            uint256 gracePeriod = accumulatorUpdateDelayTolerance();\\n\\n            require(\\n                IUpdateable(priceAccumulator).timeSinceLastUpdate(data) <\\n                    IAccumulator(priceAccumulator).heartbeat() + gracePeriod,\\n                \\\"PeriodicAccumulationOracle: PRICE_ACCUMULATOR_NEEDS_UPDATE\\\"\\n            );\\n            require(\\n                IUpdateable(liquidityAccumulator).timeSinceLastUpdate(data) <\\n                    IAccumulator(liquidityAccumulator).heartbeat() + gracePeriod,\\n                \\\"PeriodicAccumulationOracle: LIQUIDITY_ACCUMULATOR_NEEDS_UPDATE\\\"\\n            );\\n        }\\n\\n        address token = abi.decode(data, (address));\\n\\n        AccumulationLibrary.PriceAccumulator memory priceAccumulation = IPriceAccumulator(priceAccumulator)\\n            .getCurrentAccumulation(token);\\n        AccumulationLibrary.LiquidityAccumulator memory liquidityAccumulation = ILiquidityAccumulator(\\n            liquidityAccumulator\\n        ).getCurrentAccumulation(token);\\n\\n        return\\n            priceAccumulation.timestamp != 0 &&\\n            liquidityAccumulation.timestamp != 0 &&\\n            push(token, priceAccumulation, liquidityAccumulation);\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function instantFetch(\\n        address token\\n    ) internal view virtual override returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        // We assume the accumulators are also oracles... the interfaces need to be refactored\\n        price = IPriceOracle(priceAccumulator).consultPrice(token, 0);\\n        (tokenLiquidity, quoteTokenLiquidity) = ILiquidityOracle(liquidityAccumulator).consultLiquidity(token, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/PeriodicOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"../interfaces/IPeriodic.sol\\\";\\n\\nimport \\\"./AbstractOracle.sol\\\";\\n\\nabstract contract PeriodicOracle is IPeriodic, AbstractOracle {\\n    uint256 public immutable override period;\\n    uint256 public immutable override granularity;\\n\\n    uint internal immutable _updateEvery;\\n\\n    constructor(address quoteToken_, uint256 period_, uint256 granularity_) AbstractOracle(quoteToken_) {\\n        require(period_ > 0, \\\"PeriodicOracle: INVALID_PERIOD\\\");\\n        require(granularity_ > 0, \\\"PeriodicOracle: INVALID_GRANULARITY\\\");\\n        require(period_ % granularity_ == 0, \\\"PeriodicOracle: INVALID_PERIOD_GRANULARITY\\\");\\n\\n        period = period_;\\n        granularity = granularity_;\\n\\n        _updateEvery = period_ / granularity_;\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function update(bytes memory data) public virtual override returns (bool) {\\n        if (needsUpdate(data)) return performUpdate(data);\\n\\n        return false;\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function needsUpdate(bytes memory data) public view virtual override returns (bool) {\\n        return timeSinceLastUpdate(data) >= _updateEvery;\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        // If this oracle doesn't need an update, it can't (won't) update\\n        return needsUpdate(data);\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IPeriodic).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function performUpdate(bytes memory data) internal virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/utils/SimpleQuotationMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IQuoteToken.sol\\\";\\n\\ncontract SimpleQuotationMetadata is IQuoteToken, IERC165 {\\n    address public immutable quoteToken;\\n\\n    constructor(address quoteToken_) {\\n        quoteToken = quoteToken_;\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenName() public view virtual override returns (string memory) {\\n        return getStringOrBytes32(quoteToken, IERC20Metadata.name.selector);\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenAddress() public view virtual override returns (address) {\\n        return quoteToken;\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenSymbol() public view virtual override returns (string memory) {\\n        return getStringOrBytes32(quoteToken, IERC20Metadata.symbol.selector);\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenDecimals() public view virtual override returns (uint8) {\\n        (bool success, bytes memory result) = quoteToken.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (!success) return 18; // Return 18 by default\\n\\n        return abi.decode(result, (uint8));\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IQuoteToken).interfaceId;\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        // Calculate string length\\n        uint256 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) ++i;\\n\\n        bytes memory bytesArray = new bytes(i);\\n\\n        // Extract characters\\n        for (i = 0; i < 32 && _bytes32[i] != 0; ++i) bytesArray[i] = _bytes32[i];\\n\\n        return string(bytesArray);\\n    }\\n\\n    function getStringOrBytes32(address contractAddress, bytes4 selector) internal view returns (string memory) {\\n        (bool success, bytes memory result) = contractAddress.staticcall(abi.encodeWithSelector(selector));\\n        if (!success) return \\\"\\\";\\n\\n        return result.length == 32 ? bytes32ToString(bytes32(result)) : abi.decode(result, (string));\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/access/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nlibrary Roles {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    bytes32 public constant UPDATER_ADMIN = keccak256(\\\"UPDATER_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant ORACLE_UPDATER = keccak256(\\\"ORACLE_UPDATER_ROLE\\\");\\n\\n    bytes32 public constant RATE_ADMIN = keccak256(\\\"RATE_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant UPDATE_PAUSE_ADMIN = keccak256(\\\"UPDATE_PAUSE_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant CONFIG_ADMIN = keccak256(\\\"CONFIG_ADMIN_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/oracles/ManagedPeriodicAccumulationOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-core/contracts/oracles/PeriodicAccumulationOracle.sol\\\";\\n\\nimport \\\"./bases/ManagedOracleBase.sol\\\";\\n\\ncontract ManagedPeriodicAccumulationOracle is PeriodicAccumulationOracle, ManagedOracleBase {\\n    constructor(\\n        address liquidityAccumulator_,\\n        address priceAccumulator_,\\n        address quoteToken_,\\n        uint256 period_,\\n        uint256 granularity_\\n    )\\n        PeriodicAccumulationOracle(liquidityAccumulator_, priceAccumulator_, quoteToken_, period_, granularity_)\\n        ManagedOracleBase()\\n    {}\\n\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        // Return false if the message sender is missing the required role\\n        if (!hasRole(Roles.ORACLE_UPDATER, address(0)) && !hasRole(Roles.ORACLE_UPDATER, msg.sender)) return false;\\n\\n        return super.canUpdate(data);\\n    }\\n\\n    function update(bytes memory data) public virtual override onlyRoleOrOpenRole(Roles.ORACLE_UPDATER) returns (bool) {\\n        return super.update(data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, PeriodicAccumulationOracle) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) ||\\n            PeriodicAccumulationOracle.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/oracles/bases/ManagedOracleBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../access/Roles.sol\\\";\\n\\nabstract contract ManagedOracleBase is AccessControlEnumerable {\\n    uint16 internal constant PAUSE_FLAG_MASK = 1;\\n\\n    /// @notice Event emitted when the pause status of updates for a token is changed.\\n    /// @param token The token for which the pause status of updates was changed.\\n    /// @param areUpdatesPaused Whether updates are paused for the token.\\n    event PauseStatusChanged(address indexed token, bool areUpdatesPaused);\\n\\n    /// @notice An error that is thrown when updates are paused for a token.\\n    /// @param token The token for which updates are paused.\\n    error UpdatesArePaused(address token);\\n\\n    /// @notice An error thrown when attempting to call a function that requires a certain role.\\n    /// @param account The account that is missing the role.\\n    /// @param role The role that is missing.\\n    error MissingRole(address account, bytes32 role);\\n\\n    constructor() {\\n        initializeRoles();\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only by a certain role. In addition to checking the sender's role,\\n     * `address(0)` 's role is also considered. Granting a role to `address(0)` is equivalent to enabling this role for\\n     * everyone.\\n     * @param role The role to check.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            if (!hasRole(role, msg.sender)) revert MissingRole(msg.sender, role);\\n        }\\n        _;\\n    }\\n\\n    function initializeRoles() internal virtual {\\n        // Setup admin role, setting msg.sender as admin\\n        _setupRole(Roles.ADMIN, msg.sender);\\n        _setRoleAdmin(Roles.ADMIN, Roles.ADMIN);\\n\\n        // CONFIG_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.CONFIG_ADMIN, Roles.ADMIN);\\n\\n        // UPDATER_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.UPDATER_ADMIN, Roles.ADMIN);\\n\\n        // ORACLE_UPDATER is managed by UPDATER_ADMIN\\n        _setRoleAdmin(Roles.ORACLE_UPDATER, Roles.UPDATER_ADMIN);\\n\\n        // UPDATE_PAUSE_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.UPDATE_PAUSE_ADMIN, Roles.ADMIN);\\n\\n        // Hierarchy:\\n        // ADMIN\\n        //   - CONFIG_ADMIN\\n        //   - UPDATER_ADMIN\\n        //     - ORACLE_UPDATER\\n        //   - UPDATE_PAUSE_ADMIN\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdrastiaVersioning.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ncontract AdrastiaVersioning {\\n    string public constant ADRASTIA_CORE_VERSION = \\\"v4.1.0-rc.1\\\";\\n    string public constant ADRASTIA_PERIPHERY_VERSION = \\\"v4.1.0-rc.1\\\";\\n    string public constant ADRASTIA_PROTOCOL_VERSION = \\\"v0.1.0\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/PeriodicAccumulationOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-periphery/contracts/oracles/ManagedPeriodicAccumulationOracle.sol\\\";\\n\\nimport \\\"../AdrastiaVersioning.sol\\\";\\n\\ncontract AdrastiaPeriodicAccumulationOracle is AdrastiaVersioning, ManagedPeriodicAccumulationOracle {\\n    struct PeriodicAccumulationOracleParams {\\n        address liquidityAccumulator;\\n        address priceAccumulator;\\n        address quoteToken;\\n        uint256 period;\\n        uint256 granularity;\\n    }\\n\\n    string public name;\\n\\n    constructor(\\n        string memory name_,\\n        PeriodicAccumulationOracleParams memory params\\n    )\\n        ManagedPeriodicAccumulationOracle(\\n            params.liquidityAccumulator,\\n            params.priceAccumulator,\\n            params.quoteToken,\\n            params.period,\\n            params.granularity\\n        )\\n    {\\n        name = name_;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"liquidityAccumulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAccumulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"internalType\":\"struct AdrastiaPeriodicAccumulationOracle.PeriodicAccumulationOracleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"MissingRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatesArePaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCapacity\",\"type\":\"uint256\"}],\"name\":\"AccumulationCapacityIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"AccumulationCapacityInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLiquidityCumulative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenLiquidityCumulative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccumulationPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"areUpdatesPaused\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADRASTIA_CORE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADRASTIA_PERIPHERY_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADRASTIA_PROTOCOL_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatorUpdateDelayTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consultLiquidity\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consultLiquidity\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLatestObservation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLibrary.Observation\",\"name\":\"observation\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLiquidityAccumulationAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"cumulativeTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"cumulativeQuoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.LiquidityAccumulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"getLiquidityAccumulations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"cumulativeTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"cumulativeQuoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.LiquidityAccumulator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLiquidityAccumulations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"cumulativeTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"cumulativeQuoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.LiquidityAccumulator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLiquidityAccumulationsCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLiquidityAccumulationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPriceAccumulationAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"getPriceAccumulations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceAccumulations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceAccumulationsCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceAccumulationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAccumulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"needsUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAccumulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLiquidityAccumulationsCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPriceAccumulationsCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"timeSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelayTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdrastiaPeriodicAccumulationOracle", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000097bb0d5ee1ffce9340465c7d0b91f63def4bc9290000000000000000000000000100dc5a4b099318ed8a2efacfc1c0e3550dbbed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000244161766520763320537570706c7920426f72726f77204f7261636c65203234682054574100000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}