{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/gmw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nstruct TokenIdsWithKinship {\\r\\n    uint256 tokenId;\\r\\n    uint256 kinship;\\r\\n    uint256 lastInteracted;\\r\\n}\\r\\n\\r\\ninterface IAavegotchi {\\r\\n    function isPetOperatorForAll(\\r\\n        address _owner,\\r\\n        address _operator\\r\\n    ) external view returns (bool approved_);\\r\\n\\r\\n    function tokenIdsWithKinship(\\r\\n        address _owner,\\r\\n        uint256 _count,\\r\\n        uint256 _skip,\\r\\n        bool all\\r\\n    ) external view returns (TokenIdsWithKinship[] memory tokenIdsWithKinship_);\\r\\n\\r\\n    function getLentTokenIdsOfLender(\\r\\n        address _lender\\r\\n    ) external view returns (uint32[] memory tokenIds_);\\r\\n\\r\\n    function balanceOfLentGotchis(\\r\\n        address _lender\\r\\n    ) external view returns (uint256 balance_);\\r\\n}\\r\\n\\r\\ncontract GWM is Ownable {\\r\\n    event Deposit(address indexed user, uint256 amount, uint256 newBalance);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event Start(address indexed user, uint256 amountGotchis);\\r\\n    event Stop(address indexed user);\\r\\n    event AdminUpdated(address indexed admin, bool status);\\r\\n    event DailyCostUpdated(uint256 newDailyCost);\\r\\n    event StartFeesUpdated(uint256 newStartFees);\\r\\n    event ReceiverUpdated(address newReceiver);\\r\\n    event FundsSentToReceiver(uint256 amount);\\r\\n    event UserAdded(address indexed newUser);\\r\\n    event UserRemoved(address indexed userLeaver);\\r\\n    event BalanceBeforeUpdate(\\r\\n        address indexed user,\\r\\n        uint256 oldBalance,\\r\\n        uint256 oldAmountGotchi,\\r\\n        uint256 oldTimestamp\\r\\n    );\\r\\n    event BalanceAfterUpdate(\\r\\n        address indexed user,\\r\\n        uint256 newBalance,\\r\\n        uint256 newAmountGotchi,\\r\\n        uint256 newTimestamp\\r\\n    );\\r\\n\\r\\n    address constant diamond = 0x86935F11C86623deC8a25696E1C19a8659CbF95d;\\r\\n    address petter = 0x290000C417a1DE505eb08b7E32b3e8dA878D194E;\\r\\n    address receiver = 0xdC5b665e8135023F80BF4DbF85F65086c7aC3BB1;\\r\\n\\r\\n    uint256 dailyCost; // X Matic per day per 1 gotchis\\r\\n    uint256 startFees; // Fees when starting the petter\\r\\n\\r\\n    uint256 contractBalance = 0;\\r\\n    mapping(address => uint256) userToBalance;\\r\\n    mapping(address => uint256) userToTimestamp;\\r\\n    mapping(address => uint256) userToGotchiAmount;\\r\\n\\r\\n    address[] users;\\r\\n    mapping(address => uint256) usersToIndex;\\r\\n\\r\\n    mapping(address => bool) isAdmin;\\r\\n\\r\\n    bool public paused;\\r\\n\\r\\n    constructor() {\\r\\n        dailyCost = 11 * 10 ** 15;\\r\\n        startFees = 10 ** 17;\\r\\n        isAdmin[0x5ecf70427aA12Cd0a2f155acbB7d29e7d15dc771] = true;\\r\\n        // Mandatory, index 0 cannot be empty\\r\\n        _addUser(0x86935F11C86623deC8a25696E1C19a8659CbF95d);\\r\\n        // Deploy the contract unpaused\\r\\n        paused = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin[msg.sender], \\\"GWM: Only Admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused, \\\"GWM: Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * V I E W     F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function getUsers() external view returns (address[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    function getUserCount() external view returns (uint256) {\\r\\n        return users.length - 1;\\r\\n    }\\r\\n\\r\\n    function getIsUser(address _user) public view returns (bool) {\\r\\n        return usersToIndex[_user] > 0;\\r\\n    }\\r\\n\\r\\n    function getUsersToIndex(address _address) external view returns (uint256) {\\r\\n        return usersToIndex[_address];\\r\\n    }\\r\\n\\r\\n    function getUserToBalance(address _user) external view returns (uint256) {\\r\\n        return userToBalance[_user];\\r\\n    }\\r\\n\\r\\n    function getUserToGotchiAmount(\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        return userToGotchiAmount[_user];\\r\\n    }\\r\\n\\r\\n    function getUserToTimestamp(address _user) external view returns (uint256) {\\r\\n        return userToTimestamp[_user];\\r\\n    }\\r\\n\\r\\n    function getContractBalance() external view returns (uint256) {\\r\\n        return contractBalance;\\r\\n    }\\r\\n\\r\\n    function getDailyCost() external view returns (uint256) {\\r\\n        return dailyCost;\\r\\n    }\\r\\n\\r\\n    function getStartFees() external view returns (uint256) {\\r\\n        return startFees;\\r\\n    }\\r\\n\\r\\n    function getGotchiInteraction(address _user) public view returns (bool) {\\r\\n        return IAavegotchi(diamond).isPetOperatorForAll(_user, petter);\\r\\n    }\\r\\n\\r\\n    function getSpentMatic(address _user) private view returns (uint256) {\\r\\n        uint256 lastT = userToTimestamp[_user];\\r\\n        uint256 lastG = userToGotchiAmount[_user];\\r\\n\\r\\n        if (lastT == 0) return 0;\\r\\n\\r\\n        uint256 duration = block.timestamp - lastT;\\r\\n        uint256 realDailyCost = getCostPerDay(lastG);\\r\\n\\r\\n        uint256 spent = (1 + (duration / 1 days)) * realDailyCost;\\r\\n\\r\\n        if (spent > userToBalance[_user]) spent = userToBalance[_user];\\r\\n        return spent;\\r\\n    }\\r\\n\\r\\n    function getUserBalance(address _user) public view returns (uint256) {\\r\\n        uint256 spent = getSpentMatic(_user);\\r\\n        if (spent > userToBalance[_user]) return 0;\\r\\n        return userToBalance[_user] - spent;\\r\\n    }\\r\\n\\r\\n    function getCostPerDay(\\r\\n        uint256 _amountGotchis\\r\\n    ) public view returns (uint256) {\\r\\n        return _amountGotchis * dailyCost;\\r\\n    }\\r\\n\\r\\n    function getDaysLeft(\\r\\n        address _user,\\r\\n        uint256 _amountGotchis\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 balance = userToBalance[_user] - getSpentMatic(_user);\\r\\n        uint256 cost = getCostPerDay(_amountGotchis);\\r\\n        if (cost == 0) return 999;\\r\\n        return balance / cost;\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * U S E R    F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function depositMatic() external payable whenNotPaused {\\r\\n        require(msg.value != 0, \\\"GWM: deposit can't be 0\\\");\\r\\n        userToBalance[msg.sender] += msg.value;\\r\\n\\r\\n        emit Deposit(msg.sender, msg.value, userToBalance[msg.sender]);\\r\\n    }\\r\\n\\r\\n    function withdrawMatic() external payable whenNotPaused {\\r\\n        require(usersToIndex[msg.sender] == 0, \\\"GWM: Stop petting first\\\");\\r\\n        require(userToBalance[msg.sender] != 0, \\\"GWM: Balance is 0\\\");\\r\\n        uint256 toReturn = userToBalance[msg.sender];\\r\\n        userToBalance[msg.sender] = 0;\\r\\n        (bool sent, bytes memory data) = msg.sender.call{value: toReturn}(\\\"\\\");\\r\\n        require(sent, \\\"GWM: Failed to send Matic\\\");\\r\\n\\r\\n        emit Withdraw(msg.sender, toReturn);\\r\\n    }\\r\\n\\r\\n    function start(uint256 _amountGotchis) external whenNotPaused {\\r\\n        _start(msg.sender, _amountGotchis);\\r\\n    }\\r\\n\\r\\n    function stop() external whenNotPaused {\\r\\n        _stop(msg.sender);\\r\\n    }\\r\\n\\r\\n    function startAndTransfer(uint256 _amountGotchis) external whenNotPaused {\\r\\n        _start(msg.sender, _amountGotchis);\\r\\n        if (contractBalance > 5 * 10 ** 18) _sendMaticToReceiver();\\r\\n    }\\r\\n\\r\\n    function stopAndTransfer() external whenNotPaused {\\r\\n        _stop(msg.sender);\\r\\n        if (contractBalance > 5 * 10 ** 18) _sendMaticToReceiver();\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * A D M I N    F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function batchRegulate(\\r\\n        address[] memory _users,\\r\\n        uint256[] memory _amountGotchis\\r\\n    ) external onlyAdmin {\\r\\n        uint256 len = _users.length;\\r\\n        require(len == _amountGotchis.length, \\\"GWM: Arrays length not equal\\\");\\r\\n        for (uint256 i = 0; i < len; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 amountGotchis = _amountGotchis[i];\\r\\n            regulate(user, amountGotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function regulate(address _user, uint256 _amountGotchis) public onlyAdmin {\\r\\n        uint256 spent = getSpentMatic(_user);\\r\\n\\r\\n        emit BalanceBeforeUpdate(\\r\\n            _user,\\r\\n            userToBalance[_user],\\r\\n            _amountGotchis,\\r\\n            userToTimestamp[_user]\\r\\n        );\\r\\n\\r\\n        userToBalance[_user] -= spent;\\r\\n        contractBalance += spent;\\r\\n        userToGotchiAmount[_user] = _amountGotchis;\\r\\n        userToTimestamp[_user] = block.timestamp;\\r\\n\\r\\n        emit BalanceAfterUpdate(\\r\\n            _user,\\r\\n            userToBalance[_user],\\r\\n            _amountGotchis,\\r\\n            userToTimestamp[_user]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function batchRemoveUser(\\r\\n        address[] memory _users,\\r\\n        uint256[] memory _amountGotchis\\r\\n    ) external onlyAdmin {\\r\\n        uint256 len = _users.length;\\r\\n        require(len == _amountGotchis.length, \\\"GWM: Arrays length not equal\\\");\\r\\n        for (uint256 i = 0; i < len; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 amountGotchis = _amountGotchis[i];\\r\\n            removeUser(user, amountGotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeUser(\\r\\n        address _user,\\r\\n        uint256 _amountGotchis\\r\\n    ) public onlyAdmin {\\r\\n        require(\\r\\n            getDaysLeft(_user, _amountGotchis) == 0 ||\\r\\n                getGotchiInteraction(_user) == false,\\r\\n            \\\"GWM: Enough Balance and interaction == true\\\"\\r\\n        );\\r\\n        _stop(_user);\\r\\n    }\\r\\n\\r\\n    function sendMaticToReceiver() external onlyAdmin {\\r\\n        _sendMaticToReceiver();\\r\\n    }\\r\\n\\r\\n    function safeSendMaticToReceiver() external onlyAdmin {\\r\\n        uint256 amount = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        if (amount > address(this).balance) amount = address(this).balance;\\r\\n        (bool sent, bytes memory data) = receiver.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"GWM: Failed to send Matic to petter\\\");\\r\\n\\r\\n        emit FundsSentToReceiver(amount);\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * I N T E R N A L   F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function _sendMaticToReceiver() private {\\r\\n        uint256 amount = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        (bool sent, bytes memory data) = receiver.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"GWM: Failed to send Matic to petter\\\");\\r\\n\\r\\n        emit FundsSentToReceiver(amount);\\r\\n    }\\r\\n\\r\\n    function _start(address _user, uint256 _amountGotchis) private {\\r\\n        uint256 costPerDay = getCostPerDay(_amountGotchis);\\r\\n        uint256 minMatic = startFees + (5 * costPerDay);\\r\\n        require(\\r\\n            userToBalance[_user] >= minMatic,\\r\\n            \\\"GWM: Need 5 days worth of matic to start + 0.1\\\"\\r\\n        );\\r\\n        require(_amountGotchis != 0, \\\"GWM: Can't start with 0 gotchis\\\");\\r\\n\\r\\n        userToBalance[_user] -= startFees;\\r\\n        contractBalance += startFees;\\r\\n\\r\\n        userToTimestamp[_user] = block.timestamp;\\r\\n        userToGotchiAmount[_user] = _amountGotchis;\\r\\n        _addUser(_user);\\r\\n\\r\\n        emit Start(_user, _amountGotchis);\\r\\n    }\\r\\n\\r\\n    function _stop(address _user) private {\\r\\n        uint256 spent = getSpentMatic(_user);\\r\\n\\r\\n        userToBalance[_user] -= spent;\\r\\n        contractBalance += spent;\\r\\n\\r\\n        userToTimestamp[_user] = 0;\\r\\n        userToGotchiAmount[_user] = 0;\\r\\n\\r\\n        _removeUser(_user);\\r\\n        emit Stop(_user);\\r\\n    }\\r\\n\\r\\n    function _addUser(address _newUser) private {\\r\\n        // No need to add twice the same account\\r\\n        require(usersToIndex[_newUser] == 0, \\\"GWM: user already added\\\");\\r\\n\\r\\n        // Get the index where the new user is in the array (= last position)\\r\\n        usersToIndex[_newUser] = users.length;\\r\\n\\r\\n        // Add the user in the array\\r\\n        users.push(_newUser);\\r\\n\\r\\n        // Emit\\r\\n        emit UserAdded(_newUser);\\r\\n    }\\r\\n\\r\\n    function _removeUser(address _userLeaver) private {\\r\\n        // Cant remove an account that is not a user\\r\\n        require(usersToIndex[_userLeaver] > 0, \\\"GWM: user already removed\\\");\\r\\n\\r\\n        // Get the index of the leaver\\r\\n        uint256 _indexLeaver = usersToIndex[_userLeaver];\\r\\n\\r\\n        // Get last index\\r\\n        uint256 lastElementIndex = users.length - 1;\\r\\n\\r\\n        // Get Last address in array\\r\\n        address lastAddressInArray = users[lastElementIndex];\\r\\n\\r\\n        // Move the last address in the position of the leaver\\r\\n        users[_indexLeaver] = users[lastElementIndex];\\r\\n\\r\\n        // Change the moved address' index to the new one\\r\\n        usersToIndex[lastAddressInArray] = _indexLeaver;\\r\\n\\r\\n        // Remove last entry in the array and reduce length\\r\\n        users.pop();\\r\\n        usersToIndex[_userLeaver] = 0;\\r\\n\\r\\n        // Emit\\r\\n        emit UserRemoved(_userLeaver);\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * O W N E R    F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function getIsAdmin(address _address) external view returns (bool) {\\r\\n        return isAdmin[_address];\\r\\n    }\\r\\n\\r\\n    function getReceiverAddress() external view returns (address) {\\r\\n        return receiver;\\r\\n    }\\r\\n\\r\\n    function addRemoveAdmin(address _address, bool _state) external onlyOwner {\\r\\n        isAdmin[_address] = _state;\\r\\n\\r\\n        emit AdminUpdated(_address, _state);\\r\\n    }\\r\\n\\r\\n    function updateDailyCost(uint256 _newDailyCost) external onlyOwner {\\r\\n        require(_newDailyCost > 10000000000, \\\"GWM: Need all decimals\\\");\\r\\n        dailyCost = _newDailyCost;\\r\\n\\r\\n        emit DailyCostUpdated(_newDailyCost);\\r\\n    }\\r\\n\\r\\n    function updateStartFees(uint256 _newStartFees) external onlyOwner {\\r\\n        require(_newStartFees > 10000000000, \\\"GWM: Need all decimals\\\");\\r\\n        startFees = _newStartFees;\\r\\n\\r\\n        emit StartFeesUpdated(_newStartFees);\\r\\n    }\\r\\n\\r\\n    function updateReceiver(address _receiver) external onlyOwner {\\r\\n        receiver = _receiver;\\r\\n        emit ReceiverUpdated(_receiver);\\r\\n    }\\r\\n\\r\\n    function forceStop(address _user) external onlyOwner {\\r\\n        _stop(_user);\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        paused = true;\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        paused = false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmountGotchi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"BalanceAfterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmountGotchi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"}],\"name\":\"BalanceBeforeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDailyCost\",\"type\":\"uint256\"}],\"name\":\"DailyCostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsSentToReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"ReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGotchis\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartFees\",\"type\":\"uint256\"}],\"name\":\"StartFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUser\",\"type\":\"address\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userLeaver\",\"type\":\"address\"}],\"name\":\"UserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"addRemoveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"batchRegulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"batchRemoveUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"forceStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"getCostPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"getDaysLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGotchiInteraction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIsAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIsUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceiverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserToGotchiAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserToTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUsersToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"regulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeSendMaticToReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMaticToReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"startAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDailyCost\",\"type\":\"uint256\"}],\"name\":\"updateDailyCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"updateReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartFees\",\"type\":\"uint256\"}],\"name\":\"updateStartFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "GWM", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}