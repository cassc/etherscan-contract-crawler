{"SourceCode": "// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: CellarDAO/TokenStoreWithRef.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity = 0.8.19;\r\n\r\n\r\n\r\n\r\n\r\ncontract CellarDAOTokenstore is Ownable, ReentrancyGuard {\r\n\r\n    /* Variables */\r\n\r\n    IUniswapV2Pair constant pair = IUniswapV2Pair(0x6e7a5FAFcec6BB1e78bAE2A1F0B612012BF14827);  // Quickswap WMATIC / USDC pair\r\n    address constant MATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;                        // WMATIC (mainnet)\r\n    address constant private _token = 0x8FEBfC5432026109338e69CE161Bd44DCf7b30f2;               // $CASK Token Contract\r\n    uint256 public tokenBuyPrice;\r\n    uint256 public tokenSellPrice;\r\n    \r\n    IERC20 private _tokenContract = IERC20(_token);\r\n    bool private _buyOpen = false;\r\n    bool private _sellOpen = false;\r\n\r\n    uint256 public tokenRefPercent;\r\n    uint256 public maticRefPercent;\r\n\r\n    /* Construction */\r\n\r\n    constructor() { \r\n        tokenBuyPrice = 10;  // to be divided by 100 --> 0.1 $ / CASK\r\n        tokenRefPercent = 5; // to be divided by 100 --> 5%\r\n        maticRefPercent = 5; // to be divided by 100 --> 5%\r\n        setBuyOpen(true);\r\n    }\r\n    receive() payable external {}\r\n    fallback() payable external {}\r\n\r\n    /* Config */\r\n\r\n    /// @notice Gets all required config variables\r\n    function config() external view returns(uint256, uint256, uint256, address, bool, bool) {\r\n        return (getTotalBuyPriceInMatic(1 ether), tokenBuyPrice, tokenSellPrice, _token, _buyOpen, _sellOpen);\r\n    }\r\n\r\n    /// @notice Gets the smart contracts token balance\r\n    function storeTokenBalance() public view returns(uint256) {\r\n        return addressTokenBalance(address(this));\r\n    }\r\n\r\n    /// @notice Gets the current address native balance\r\n    function storeBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /* Getters */\r\n\r\n    /// @dev Gets an addresses token balance\r\n    function addressTokenBalance(address wallet) internal view returns(uint256) {\r\n        return _tokenContract.balanceOf(wallet);\r\n    }\r\n\r\n    /* Buy/Sell */\r\n\r\n    /// @notice Public buy function that accepts a quantity.\r\n    /// @dev Buy function with price check\r\n    function buy(uint256 quantity, address ref) external payable nonReentrant {\r\n        require(_buyOpen == true, \"Cannot buy while tokenstore is closed.\");\r\n        uint totalPrice = getTotalBuyPriceInMatic(quantity);\r\n        require(totalPrice > 0 && msg.value >= totalPrice, \"Must send exact amount as per [tokenBuyPrice * quantity]\");\r\n        _internalTransfer(msg.sender, quantity);\r\n\r\n        // Send back excedent Matic if applicable\r\n        if(msg.value > totalPrice) _internalSend(msg.sender, msg.value - totalPrice);\r\n\r\n        // Send ref rewards if applicable\r\n        if(ref != address(0) && !isContract(ref)){ \r\n            // send tokens to the ref\r\n            if(tokenRefPercent > 0) _internalTransfer(ref, quantity * maticRefPercent / 1e2); \r\n            // send Matic to the ref\r\n            if(maticRefPercent > 0) _internalSend(ref, totalPrice * tokenRefPercent / 1e2);\r\n        }\r\n    }\r\n\r\n    function getTotalBuyPriceInMatic(uint quantity) public view returns(uint){ \r\n        return quantity * tokenBuyPrice / 1e2 * USDtoMATIC() / 1e2;\r\n    }\r\n\r\n    function getTotalSellPriceInMatic(uint quantity) public view returns(uint){ \r\n        return quantity * tokenSellPrice / 1e2 * USDtoMATIC() / 1e2;\r\n    }\r\n\r\n    /// @notice Public sell function that accepts a quantity.\r\n    /// @dev Buy function with price check\r\n    function sell(uint256 quantity) external nonReentrant {\r\n        require(_sellOpen == true, \"Cannot sell while tokenstore is closed.\");\r\n        require(getTotalSellPriceInMatic(quantity) > 0, \"Amount error.\");\r\n        _internalTransferFrom(msg.sender, address(this), quantity);\r\n        _internalSend(msg.sender, getTotalSellPriceInMatic(quantity));\r\n    }\r\n\r\n    /// @dev Internal transfer/buy function that runs basic store balance checks.\r\n    function _internalTransfer(address to, uint256 quantity) private {\r\n        require(quantity <= storeTokenBalance(), \"Store does not have enough to send\");\r\n        require(_tokenContract.transfer(to, quantity), \"Transfer Error\");\r\n    }\r\n\r\n    /// @dev Internal transferFrom/sell function that runs basic wallet balance checks.\r\n    function _internalTransferFrom(address from, address to, uint256 quantity) private {\r\n        require(addressTokenBalance(from) >= quantity, \"From address must hold at least the quantity of tokens attempting to be transfered.\");\r\n        require(_tokenContract.transferFrom(from, to, quantity), \"Transfer Error\");\r\n    }\r\n    \r\n    /// @dev Internal fund transfer function that runs basic store balance check.\r\n    function _internalSend(address to, uint256 value) private {\r\n        require(storeBalance() >= value, \"Contract does not have enough funds to support the send of funds.\");\r\n        (bool sent,) = to.call{value: value}(\"\");\r\n        require(sent, \"Failed to distribute funds.\");\r\n    }\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    /* Ownership */\r\n\r\n    /// @notice Prevents ownership renouncement\r\n    function renounceOwnership() public override onlyOwner {}\r\n\r\n    /* Owner Setters */\r\n\r\n    /// @notice Sets the buy price per token\r\n    function setTokenBuyPrice(uint256 price) external onlyOwner {\r\n        tokenBuyPrice = price;\r\n    }\r\n\r\n    /// @notice Sets the sell price per token\r\n    function setTokenSellPrice(uint256 price) external onlyOwner {\r\n        tokenSellPrice = price;\r\n    }\r\n\r\n    /// @notice Sets the public buy to open or closed\r\n    function setBuyOpen(bool open) public onlyOwner {\r\n        _buyOpen = open;\r\n    }\r\n    \r\n    /// @notice Sets the public sell to open or closed\r\n    function setSellOpen(bool open) external onlyOwner {\r\n        _sellOpen = open;\r\n    }\r\n\r\n    /// @notice Sets the & for referrals\r\n    function setRefPercents(uint16 inTokens, uint16 inMatic) external onlyOwner {\r\n        tokenRefPercent = inTokens;\r\n        maticRefPercent = inMatic;\r\n    }\r\n\r\n    /* Owner Functions */\r\n\r\n    function airdrop(address to, uint256 quantity) external onlyOwner nonReentrant {\r\n        _internalTransfer(to, quantity);\r\n    }\r\n\r\n    function airdropBatch(address[] memory wallets, uint[] calldata quantities) external onlyOwner nonReentrant {\r\n        require(wallets.length == quantities.length, \"Airdrop wallets must have associated token assignment.\");\r\n        uint256 w;\r\n        for (w = 0; w < wallets.length; w++) {\r\n            _internalTransfer(wallets[w], quantities[w]);\r\n        }\r\n    }\r\n\r\n    /* Funds */\r\n\r\n    /// @notice Fund distribution function.\r\n    /// @dev Pays out to the owner\r\n    function distributeFunds() external onlyOwner nonReentrant {\r\n        if(address(this).balance > 0) {\r\n            (bool sent,) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(sent, \"Failed to distribute remaining funds.\");\r\n        }\r\n    }\r\n\r\n    /// @notice ERC20 fund distribution function.\r\n    /// @dev Pays out to the owner\r\n    function distributeERC20Funds(address tokenAddress) external onlyOwner nonReentrant {\r\n        IERC20 tokenContract = IERC20(tokenAddress);\r\n\r\n        if(tokenContract.balanceOf(address(this)) > 0) {\r\n            require(tokenContract.transfer(msg.sender, tokenContract.balanceOf(address(this))), \"Transfer Error\");\r\n        }\r\n    }\r\n\r\n    /* Get MATIC price from MATIC/USDC pool*/\r\n    function USDtoMATIC() public view returns(uint){\r\n        (uint reserve0, uint reserve1,) = pair.getReserves();\r\n        if(pair.token0() == MATIC){\r\n            return reserve0 / reserve1 / 1e10; // * 1e12 --> USDC has 6 decimals\r\n        }\r\n\r\n        return reserve1 / reserve0 / 1e10; // * 1e12 --> USDC has 6 decimals\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"USDtoMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"airdropBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"distributeERC20Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getTotalBuyPriceInMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getTotalSellPriceInMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticRefPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"setBuyOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"inTokens\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"inMatic\",\"type\":\"uint16\"}],\"name\":\"setRefPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"setSellOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenSellPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRefPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CellarDAOTokenstore", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://85f8266e572fd4af85362da84cd3cf684f5ee3d972894b7153ea5eac6ba58235"}