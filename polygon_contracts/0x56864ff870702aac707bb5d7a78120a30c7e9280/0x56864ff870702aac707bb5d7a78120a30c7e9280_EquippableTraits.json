{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/assets/equippable/EquippableTraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport {\\n\\tOwnable\\n} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {\\n\\tIERC165,\\n\\tIERC1155,\\n\\tIERC1155Receiver,\\n\\tIERC1155MetadataURI\\n} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\n/**\\n\\t@custom:benediction DEVS BENEDICAT ET PROTEGAT CONTRACTVS MEAM\\n\\t@title Impostors Equippable Traits\\n\\t@author Rostislav Khlebnikov <@catpic5buck>\\n\\t\\n\\tThis contract contains L2 logic for managing equipable traits of Ethereum\\n\\tImpostors characters and inherits ERC1155 token standard. Managers of\\n\\tthis contract can lock and unlock tokens on behalf of character owners in\\n\\torder to change character metadata on Ethereum.\\n\\n\\t@custom:version 1.0\\n\\t@custom:date July 13th, 2023.\\n*/\\ncontract EquippableTraits is Ownable, IERC1155 {\\n\\n\\t/// Thrown at _msgSender(), if caller has no rights to call this function,\\n\\terror NoAccess ();\\n\\n\\t/// Thrown if argument arrays have unequal lengths.\\n\\terror ArraysLengthsNotEqual ();\\n\\n\\t/// Thrown at setApprovalForAll, if account attempts to self approve.\\n\\terror CanNotSelfApprove ();\\n\\n\\t/**\\n\\t\\tThrown at transfer functions, if account balance is lower than\\n\\t\\ttransfer amount.\\n\\t*/\\n\\terror InsufficientBalance (uint256, uint256);\\n\\n\\t/**\\n\\t\\tThrown at transfer function, msg.sender is not owner, and is\\n\\t\\t not authorized as operator.\\n\\t*/\\n\\terror OperatorNotOwnerNorApproved ();\\n\\n\\t/**\\n\\t\\tStruct which contains information about action intended by the user.\\n\\n\\t\\tsender - account performing an action.\\n\\t\\tcharacterCollection - address of the character NFT collection.\\n\\t\\tcharacterId - id of the NFT character to equip/unequip the item.\\n\\t\\tequippableId - id of the equippable item.\\n\\t*/\\n\\tstruct Action {\\n\\t\\taddress sender;\\n\\t\\taddress characterCollection;\\n\\t\\tuint256 characterId;\\n\\t\\tuint256 equippableId;\\n\\t}\\n\\n\\t/**\\n\\t\\tHelper enum. Defines what \\n\\t\\taction user intended to perform.\\n\\t*/\\n\\tenum ActionType {\\n\\t\\tEQUIP,\\n\\t\\tUNEQUIP,\\n\\t\\tUNMERGE,\\n\\t\\tCONSUME\\n\\t}\\n\\n\\t/**\\n\\t\\tHelper struct which contains execution context of an action.\\n\\n\\t\\tactionType - type of the action.\\n\\t\\taction - user intended action.\\n\\t*/\\n\\tstruct BatchAction {\\n\\t\\tActionType actionType;\\n\\t\\tAction action;\\n\\t}\\n\\n\\tmodifier onlyManager () {\\n\\t\\t// Make sure caller has manager rights.\\n\\t\\tif (!isManager[msg.sender]) {\\n\\t\\t\\trevert NoAccess();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/// The address for locking traits.\\n\\taddress constant public LOCK_ADDRESS = \\n\\t\\t0x1333333333333333333333333333333333333337;\\n\\t\\n\\t/// The id of the TransferSingle event.\\n\\tbytes32 constant private _TRANSFER_SINGLE_ID =\\n\\t\\t0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\t// Length of the extended transfer event data.\\n\\tuint256 constant private _EXTENDED_TRANSFER_LENGTH = 0x80;\\n\\tuint256 constant private _ONE_WORD = 0x20;\\n\\tuint256 constant private _TWO_WORDS = 0x40;\\n\\tuint256 constant private _THREE_WORDS = 0x60;\\n\\n\\t/// Mapping for storing this contract's managers addresses.\\n\\tmapping ( address => bool ) public isManager;\\n\\n\\t/// Mapping from token ID to account balances\\n\\tmapping( uint256 => mapping(address => uint256)) private _balances;\\n\\n\\t/// Mapping from account to operator approvals\\n\\tmapping( address => mapping(address => bool) ) private _operatorApprovals;\\n\\n\\t/// Used as the URI for all token types by relying on ID substitution.\\n\\tstring private _tokenURI;\\n\\n\\t/// Used as the URI for this contract metadata.\\n\\tstring private _contractURI;\\n\\n\\t/// Collection name.\\n\\tstring private _name;\\n\\n\\t/**\\n\\t\\tCreate an intancce of EquiappableTraits contract.\\n\\t\\tConfigure this collection metadata.\\n\\t\\tSet initial values for `isManager` mapping.\\n\\t\\t\\n\\t\\t@param name_ name of the collection,\\n\\t\\t@param tokenURI_ token metadata URI.\\n\\t\\t@param contractURI_ collection metadata URI.\\n\\t\\t@param _managers array of acccount, which can equip/unequip/consume\\n\\t\\t\\ttraits on behalf of users.\\n\\t*/\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory tokenURI_,\\n\\t\\tstring memory contractURI_,\\n\\t\\taddress[] memory _managers\\n\\t) {\\n\\t\\t_name = name_;\\n\\t\\t_contractURI = contractURI_;\\n\\t\\t_tokenURI = tokenURI_;\\n\\t\\tfor (uint256 i; i < _managers.length;) {\\n\\t\\t\\tisManager[_managers[i]] = true;\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t++i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// Returns URI for a given token.\\n\\tfunction uri (uint256) external view returns (string memory) {\\n\\t\\treturn _tokenURI;\\n\\t}\\n\\n\\t/// Returns this collection's metadata URI.\\n\\tfunction contractURI () external view returns (string memory) {\\n\\t\\treturn _contractURI;\\n\\t}\\n\\n\\t/// Returns name of this collection.\\n\\tfunction name () external view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t\\tAdmin function, which is used to set new token metadata uri.\\n\\n\\t\\t@param _uri new metadata uri string.\\n\\t*/\\n\\tfunction setTokenURI (string calldata _uri) external onlyOwner {\\n\\t\\t_tokenURI = _uri;\\n\\t}\\n\\n\\t/**\\n\\t\\tAdmin function, which is used to set new collection's metadata uri.\\n\\n\\t\\t@param _uri new metadata uri string.\\n\\t*/\\n\\tfunction setContractURI (string calldata _uri) external onlyOwner {\\n\\t\\t_contractURI = _uri;\\n\\t}\\n\\n\\t/**\\n\\t\\tAdmin function, which is used to add new manager account.\\n\\n\\t\\t@param _manager address of the new manager.\\n\\t*/\\n\\tfunction addManager (address _manager) external onlyOwner {\\n\\t\\tisManager[_manager] = true;\\n\\t}\\n\\n\\t/**\\n\\t\\tAdmin function, which is used to revoke manager rights from the account.\\n\\n\\t\\t@param _manager address of the manager to remove.\\n\\t*/\\n\\tfunction removeManager (address _manager) external onlyOwner {\\n\\t\\tdelete isManager[_manager];\\n\\t}\\n\\n\\t/**\\n\\t\\tLocks the token id amount of 1 to specified lock address.\\n\\t\\tExtends TransferSingle event with character collection and character token id.\\n\\t\\t\\n\\t\\t@param _action struct, which contains information about user intended\\n\\t\\t\\taction.\\n\\t\\t@custom:emits TransferSignle\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction equip (Action calldata _action) public onlyManager {\\n\\t\\t// Lock equippable trait.\\n\\t\\t_safeTransferFrom(\\n\\t\\t\\t_action.sender,\\n\\t\\t\\tLOCK_ADDRESS,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\t\\t// Emit extended TransferSingle event.\\n\\t\\t_emitExtendedTransfer(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_action.sender,\\n\\t\\t\\tLOCK_ADDRESS,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t_action.characterCollection,\\n\\t\\t\\t_action.characterId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tUnlocks the token id amount of 1 and transfers to the user.\\n\\t\\tExtends TransferSingle event with character collection and character token id.\\n\\t\\t\\n\\t\\t@param _action struct, which contains information about user intended\\n\\t\\t\\taction.\\n\\t\\t@custom:emits TransferSignle\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction unequip (Action calldata _action) public onlyManager {\\n\\t\\t// Lock equippable trait.\\n\\t\\t_safeTransferFrom(\\n\\t\\t\\tLOCK_ADDRESS,\\n\\t\\t\\t_action.sender,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\t\\t// Emit extended TransferSingle event.\\n\\t\\t_emitExtendedTransfer(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tLOCK_ADDRESS,\\n\\t\\t\\t_action.sender,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t_action.characterCollection,\\n\\t\\t\\t_action.characterId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tUnmerges the trait from character.\\n\\t\\tMints the token id amount of 1 to the user.\\n\\t\\tExtends TransferSingle event with character collection and character token id.\\n\\t\\t\\n\\t\\t@param _action struct, which contains information about user intended\\n\\t\\t\\taction.\\n\\t\\t@custom:emits TransferSignle\\n\\t*/\\n\\tfunction unmerge (Action calldata _action) public onlyManager {\\n\\t\\t// Mint trait to the user.\\n\\t\\t_mint(\\n\\t\\t\\t_action.sender,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\t\\t// Emit extended TransferSingle event.\\n\\t\\t_emitExtendedTransfer(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(0),\\n\\t\\t\\t_action.sender,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t_action.characterCollection,\\n\\t\\t\\t_action.characterId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tBurns the token id amount of 1 from the user.\\n\\t\\tExtends TransferSingle event with character collection and character token id.\\n\\t\\t\\n\\t\\t@param _action struct, which contains information about user intended\\n\\t\\t\\taction. \\n\\t\\t@custom:emits TransferSignle\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction consume (Action calldata _action) public onlyManager {\\n\\t\\t// Burn trait from the user.\\n\\t\\t_burn(\\n\\t\\t\\t_action.sender,\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1\\n\\t\\t);\\n\\t\\t// Emit extended TransferSingle event.\\n\\t\\t_emitExtendedTransfer(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_action.sender,\\n\\t\\t\\taddress(0),\\n\\t\\t\\t_action.equippableId,\\n\\t\\t\\t1,\\n\\t\\t\\t_action.characterCollection,\\n\\t\\t\\t_action.characterId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tProcesses multiple user-intended actions in batch.\\n\\t\\tExtends TransferSingle event with character collection and character token id.\\n\\n\\t\\t@param _batch batch of action structs.\\n\\t\\t@custom:emits TransferSignle\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction manageMultipleItems (\\n\\t\\tBatchAction[] calldata _batch\\n\\t) external {\\n\\t\\tfor (uint256 i = 0; i < _batch.length;) {\\n\\t\\t\\tif (_batch[i].actionType == ActionType.EQUIP) {\\n\\t\\t\\t\\tequip(_batch[i].action);\\n\\t\\t\\t}\\n\\t\\t\\tif (_batch[i].actionType == ActionType.UNEQUIP) {\\n\\t\\t\\t\\tunequip(_batch[i].action);\\n\\t\\t\\t}\\n\\t\\t\\tif (_batch[i].actionType == ActionType.UNMERGE) {\\n\\t\\t\\t\\tunmerge(_batch[i].action);\\n\\t\\t\\t}\\n\\t\\t\\tif (_batch[i].actionType == ActionType.CONSUME) {\\n\\t\\t\\t\\tconsume(_batch[i].action);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t++i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t\\tApprove `operator` to operate on all of `owner` tokens,\\n\\n\\t\\t@param _operator address of the account to authorize as operator.\\n\\t\\t@param _approved operator authorization status,\\n\\t\\t\\ttrue if authorized, false if revoked.\\n\\t \\t@custom:emits ApprovalForAll\\n\\t\\t@custom:throws CanNotSelfApprove\\n\\t*/\\n\\tfunction setApprovalForAll (\\n\\t\\taddress _operator,\\n\\t\\tbool _approved\\n\\t) external {\\n\\t   if (msg.sender == _operator) {\\n\\t\\t\\trevert CanNotSelfApprove();\\n\\t   }\\n\\t\\t_operatorApprovals[msg.sender][_operator] = _approved;\\n\\t\\temit ApprovalForAll(msg.sender, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t\\tTransfers `_amount` amount of a token `_id` from the `_from` address\\n\\t\\tto the address `_to`.\\n\\n\\t\\t@param _from address from which tokens are being transferred.\\n\\t\\t@param _to address to which tokens are being transferred.\\n\\t\\t@param _id id of the token, which is being transferred.\\n\\t\\t@param _amount amount of token `_id` to transfer.\\n\\t\\t@param _data Additional data with no specified format,\\n\\t\\t\\tto send unaltered in call to `ERC1155TokenReceiver`.\\n\\t\\t@custom:emits TransferSingle\\n\\t\\t@custom:throws InsufficientBalance\\n\\t\\t@custom:throws OperatorNotOwnerNorApproved\\n\\t*/\\n\\tfunction safeTransferFrom (\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes calldata _data\\n\\t) external {\\n\\t   \\tif (_from != msg.sender && !_operatorApprovals[_from][msg.sender]) {\\n\\t\\t\\trevert OperatorNotOwnerNorApproved();\\n\\t   \\t}\\n\\t\\t_safeTransferFrom(_from, _to, _id, _amount, _data);\\n\\n\\t\\temit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n\\t}\\n\\n\\t/**\\n\\t\\tTransfers `_amounts` amounts of several token `_ids` from the `_from` address\\n\\t\\tto the address `_to`.\\n\\n\\t\\t@param _from address from which tokens are being transferred.\\n\\t\\t@param _to address to which tokens are being transferred.\\n\\t\\t@param _ids ids of tokens, which are being transferred.\\n\\t\\t@param _amounts amounts of tokens `_ids` to transfer.\\n\\t\\t@param _data Additional data with no specified format,\\n\\t\\t\\tto send unaltered in call to `ERC1155TokenReceiver`.\\n\\t\\t@custom:emits TransferBatch\\n\\t\\t@custom:throws InsufficientBalance\\n\\t\\t@custom:throws OperatorNotOwnerNorApproved\\n\\t*/\\n\\tfunction safeBatchTransferFrom (\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _amounts,\\n\\t\\tbytes calldata _data\\n\\t) external {\\n\\t\\tif (_from != msg.sender && !_operatorApprovals[_from][msg.sender]) {\\n\\t\\t\\trevert OperatorNotOwnerNorApproved();\\n\\t   \\t}\\n\\t\\t_safeBatchTransferFrom(_from, _to, _ids, _amounts, _data);\\n\\n\\t\\temit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n\\t}\\n\\n\\t/**\\n\\t\\tChecks if this contract supports certain interface id.\\n\\n\\t\\t@param _interfaceId id of the interface in question.\\n\\t*/\\n\\tfunction supportsInterface (\\n\\t\\tbytes4 _interfaceId\\n\\t) external pure returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t_interfaceId == type(IERC1155).interfaceId ||\\n\\t\\t\\t_interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n\\t\\t\\t_interfaceId == type(IERC165).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t\\tRetrieves the approval status of an operator for a given owner.\\n\\n\\t\\t@param _account address of the owner.\\n\\t\\t@param _operator address of the operator.\\n\\t*/\\n\\tfunction isApprovedForAll (\\n\\t\\taddress _account,\\n\\t\\taddress _operator\\n\\t) external view returns (bool) {\\n\\t\\treturn _operatorApprovals[_account][_operator];\\n\\t}\\n\\n\\t/**\\n\\t\\tGet the balance of an account's tokens.\\n\\n\\t\\t@param _account account to retrieve balance for.\\n\\t\\t@param _id id of the token.\\n\\t*/\\n\\tfunction balanceOf (\\n\\t\\taddress _account,\\n\\t\\tuint256 _id\\n\\t) public view returns (uint256) {\\n\\t\\treturn _balances[_id][_account];\\n\\t}\\n\\n\\t/**\\n\\t\\tGet the balance of multiple account/token pairs.\\n\\n\\t\\t@param _accounts array of accounts to retrieve balances for.\\n\\t\\t@param _ids array of token ids.\\n\\t\\t@custom:throws ArraysLengthsNotEqual\\n\\t*/\\n\\tfunction balanceOfBatch (\\n\\t\\taddress[] memory _accounts,\\n\\t\\tuint256[] memory _ids\\n\\t) external view returns (uint256[] memory) {\\n\\t\\tif (_accounts.length != _ids.length) {\\n\\t\\t\\trevert ArraysLengthsNotEqual();\\n\\t\\t}\\n\\n\\t\\tuint256[] memory batchBalances = new uint256[](_accounts.length);\\n\\n\\t\\tfor (uint256 i = 0; i < _accounts.length; ++i) {\\n\\t\\t\\tbatchBalances[i] = balanceOf(_accounts[i], _ids[i]);\\n\\t\\t}\\n\\n\\t\\treturn batchBalances;\\n\\t}\\n\\n\\t/**\\n\\t\\tEmits TransferSingle event with data field extended with character id\\n\\t\\tand character collection address.\\n\\n\\t\\t@param _operator address of the operator.\\n\\t\\t@param _from address from where token is being transferred.\\n\\t\\t@param _to address to where token is being transferred.\\n\\t\\t@param _id id of the token to transfer.\\n\\t\\t@param _amount amount of the token `id` to transfer.\\n\\t\\t@param _characterCollection address of the character collection,.\\n\\t\\t@param _characterId trait is being equipped on/unequipped from this\\n\\t\\t\\tcharacter token id.\\n\\t*/\\n\\tfunction _emitExtendedTransfer (\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _characterCollection,\\n\\t\\tuint256 _characterId\\n\\t) private {\\n\\t\\tassembly {\\n\\t\\t\\t// read free memory pointer\\n\\t\\t\\tlet freeMemPtr := mload(0x40)\\n\\n\\t\\t\\t// store id at the free memory pointer\\n\\t\\t\\tmstore(\\n\\t\\t\\t\\tfreeMemPtr,\\n\\t\\t\\t\\t_id\\n\\t\\t\\t)\\n\\t\\t\\t// append amount to id slot\\n\\t\\t\\tmstore(\\n\\t\\t\\t\\tadd(freeMemPtr, _ONE_WORD),\\n\\t\\t\\t\\t_amount\\n\\t\\t\\t)\\n\\t\\t\\t// append character collection address to amount slot\\n\\t\\t\\tmstore(\\n\\t\\t\\t\\tadd(freeMemPtr, _TWO_WORDS),\\n\\t\\t\\t\\t_characterCollection\\n\\t\\t\\t)\\n\\t\\t\\t// append character id to character collection address slot\\n\\t\\t\\tmstore(\\n\\t\\t\\t\\tadd(freeMemPtr, _THREE_WORDS),\\n\\t\\t\\t\\t_characterId\\n\\t\\t\\t)\\n\\t\\t\\t// Emit TransferSingle with extended data.\\n\\t\\t\\tlog4(\\n\\t\\t\\t\\tfreeMemPtr,\\n\\t\\t\\t\\t_EXTENDED_TRANSFER_LENGTH,\\n\\t\\t\\t\\t_TRANSFER_SINGLE_ID,\\n\\t\\t\\t\\t_operator,\\n\\t\\t\\t\\t_from,\\n\\t\\t\\t\\t_to\\n\\t\\t\\t)\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t\\tPrivate function, handling internal transfer logic of a single token id.\\n\\n\\t\\t@param _from address from which tokens are being transferred.\\n\\t\\t@param _to address to which tokens are being transferred.\\n\\t\\t@param _id id of the token, which is being transferred.\\n\\t\\t@param _amount amount of token `_id` to transfer.\\n\\t\\t@param _data Additional data with no specified format,\\n\\t\\t\\tto send unaltered in call to `ERC1155TokenReceiver`.\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction _safeTransferFrom (\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes memory _data\\n\\t) private {\\n\\t\\tuint256[] memory ids = _asSingletonArray(_id);\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\n\\n\\t\\t_beforeTokenTransfer(msg.sender, _from, _to, ids, amounts, _data);\\n\\n\\t\\tuint256 fromBalance = _balances[_id][_from];\\n\\t\\tif (fromBalance < _amount) {\\n\\t\\t\\trevert InsufficientBalance(fromBalance, _amount);\\n\\t\\t}\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[_id][_from] = fromBalance - _amount;\\n\\t\\t}\\n\\t\\t_balances[_id][_to] += _amount;\\n\\n\\t\\t_afterTokenTransfer(msg.sender, _from, _to, ids, amounts, _data);\\n\\n\\t\\t_doSafeTransferAcceptanceCheck(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_from, \\n\\t\\t\\t_to, \\n\\t\\t\\t_id, \\n\\t\\t\\t_amount, \\n\\t\\t\\t_data\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tPrivate function, handling internal batch transfer logic of a single token id.\\n\\n\\t\\t@param _from address from which tokens are being transferred.\\n\\t\\t@param _to address to which tokens are being transferred.\\n\\t\\t@param _ids ids of tokens, which are being transferred.\\n\\t\\t@param _amounts amounts of tokens `_ids` to transfer.\\n\\t\\t@param _data Additional data with no specified format,\\n\\t\\t\\tto send unaltered in call to `ERC1155TokenReceiver`.\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction _safeBatchTransferFrom (\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _amounts,\\n\\t\\tbytes calldata _data\\n\\t) private {\\n\\t\\tif (_ids.length != _amounts.length) {\\n\\t\\t\\trevert ArraysLengthsNotEqual();\\n\\t\\t}\\n\\n\\t\\t_beforeTokenTransfer(msg.sender, _from, _to, _ids, _amounts, _data);\\n\\n\\t\\tfor (uint256 i = 0; i < _ids.length; ++i) {\\n\\t\\t\\tuint256 id = _ids[i];\\n\\t\\t\\tuint256 amount = _amounts[i];\\n\\n\\t\\t\\tuint256 fromBalance = _balances[id][_from];\\n\\t\\t\\tif (fromBalance < amount) {\\n\\t\\t\\t\\trevert InsufficientBalance(fromBalance, amount);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t_balances[id][_from] = fromBalance - amount;\\n\\t\\t\\t}\\n\\t\\t\\t_balances[id][_to] += amount;\\n\\t\\t}\\n\\n\\t\\t_afterTokenTransfer(msg.sender, _from, _to, _ids, _amounts, _data);\\n\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_from,\\n\\t\\t\\t_to,\\n\\t\\t\\t_ids,\\n\\t\\t\\t_amounts,\\n\\t\\t\\t_data\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tCreates `amount` tokens of token type `id`, and assigns them to `to`.\\n\\n\\t\\t@param _to address to which tokens are being transferred.\\n\\t\\t@param _id id of the token, which is being transferred.\\n\\t\\t@param _data Additional data with no specified format,\\n\\t\\t\\tto send unaltered in call to `ERC1155TokenReceiver`.\\n\\t*/\\n\\tfunction _mint(\\n\\t\\taddress _to,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\n\\t\\tuint256[] memory ids = _asSingletonArray(_id);\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\n\\n\\t\\t_beforeTokenTransfer(msg.sender, address(0), _to, ids, amounts, _data);\\n\\n\\t\\t_balances[_id][_to] += _amount;\\n\\n\\t\\t_afterTokenTransfer(msg.sender, address(0), _to, ids, amounts, _data);\\n\\n\\t\\t_doSafeTransferAcceptanceCheck(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(0),\\n\\t\\t\\t_to,\\n\\t\\t\\t_id,\\n\\t\\t\\t_amount,\\n\\t\\t\\t_data\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t\\tDestroys `amount` tokens of token type `id` from `from`\\n\\n\\t\\t@param _from address from which tokens are being transferred.\\n\\t\\t@param _id id of the token, which is being transferred.\\n\\t\\t@param _amount amount of token `_id` to transfer.\\n\\t\\t@custom:throws InsufficientBalance\\n\\t*/\\n\\tfunction _burn(\\n\\t\\taddress _from,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _amount\\n\\t) internal virtual {\\n\\n\\t\\tuint256[] memory ids = _asSingletonArray(_id);\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\n\\n\\t\\t_beforeTokenTransfer(msg.sender, _from, address(0), ids, amounts, \\\"\\\");\\n\\n\\t\\tuint256 fromBalance = _balances[_id][_from];\\n\\t\\tif (fromBalance < _amount) {\\n\\t\\t\\trevert InsufficientBalance(fromBalance, _amount);\\n\\t\\t}\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[_id][_from] = fromBalance - _amount;\\n\\t\\t}\\n\\n\\t\\t_afterTokenTransfer(msg.sender, _from, address(0), ids, amounts, \\\"\\\");\\n\\t}\\n\\n\\n\\t/**\\n\\t\\tHook that is called before any token transfer. This includes minting\\n\\t\\tand burning, as well as batched variants.\\n\\t\\n\\t\\tThe same hook is called on both single and batched variants. For single\\n\\t\\ttransfers, the length of the `ids` and `amounts` arrays will be 1.\\n\\t\\n\\t\\tCalling conditions (for each `id` and `amount` pair):\\n\\t\\n\\t\\tWhen `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t\\tof token type `id` will be  transferred to `to`.\\n\\n\\t\\tWhen `from` is zero, `amount` tokens of token type `id` will be minted\\n\\t\\tfor `to`.\\n\\n\\t\\tWhen `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n\\t\\twill be burned.\\n\\n\\t \\tfrom` and `to` are never both zero.\\n\\n\\t\\t`ids` and `amounts` have the same, non-zero length.\\n\\t*/\\n\\tfunction _beforeTokenTransfer (\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256[] memory _ids,\\n\\t\\tuint256[] memory _amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual {}\\n\\n\\t/**\\n\\t\\tHook that is called after any token transfer. This includes minting\\n\\t\\tand burning, as well as batched variants.\\n\\t\\n\\t\\tThe same hook is called on both single and batched variants. For single\\n\\t\\ttransfers, the length of the `id` and `amount` arrays will be 1.\\n\\t\\n\\t \\tCalling conditions (for each `id` and `amount` pair):\\n\\t\\n\\t\\tWhen `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t\\tof token type `id` will be  transferred to `to`.\\n\\t\\tWhen `from` is zero, `amount` tokens of token type `id` will be minted\\n\\t\\tfor `to`.\\n\\n\\t \\tWhen `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n\\t \\twill be burned.\\n\\n\\t\\t`from` and `to` are never both zero.\\n\\n\\t \\t`ids` and `amounts` have the same, non-zero length.\\n\\t*/\\n\\tfunction _afterTokenTransfer (\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256[] memory _ids,\\n\\t\\tuint256[] memory _amounts,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {}\\n\\n\\tfunction _doSafeTransferAcceptanceCheck (\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes memory _data\\n\\t) private {\\n\\t\\tif (_to.code.length > 0) {\\n\\t\\t\\ttry IERC1155Receiver(_to).onERC1155Received(\\n\\t\\t\\t\\t_operator,\\n\\t\\t\\t\\t_from,\\n\\t\\t\\t\\t_id,\\n\\t\\t\\t\\t_amount,\\n\\t\\t\\t\\t_data\\n\\t\\t\\t) returns (bytes4 response) {\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155Received.selector) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch Error(string memory reason) {\\n\\t\\t\\t\\trevert(reason);\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\trevert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _doSafeBatchTransferAcceptanceCheck (\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _amounts,\\n\\t\\tbytes calldata _data\\n\\t) private {\\n\\t\\tif (_to.code.length > 0) {\\n\\t\\t\\ttry IERC1155Receiver(_to).onERC1155BatchReceived(\\n\\t\\t\\t\\t_operator,\\n\\t\\t\\t\\t_from,\\n\\t\\t\\t\\t_ids,\\n\\t\\t\\t\\t_amounts,\\n\\t\\t\\t\\t_data\\n\\t\\t\\t) returns (\\n\\t\\t\\t\\tbytes4 response\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tresponse != IERC1155Receiver.onERC1155BatchReceived.selector\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch Error(string memory reason) {\\n\\t\\t\\t\\trevert(reason);\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\trevert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t\\tConverts uint256 into a single element arrays uint256[]\\n\\n\\t\\t@param _element uint256 to convert.\\n\\t*/\\n\\tfunction _asSingletonArray (\\n\\t\\tuint256 _element\\n\\t) private pure returns (uint256[] memory) {\\n\\t\\tuint256[] memory array = new uint256[](1);\\n\\t\\tarray[0] = _element;\\n\\n\\t\\treturn array;\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 13371337\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysLengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotSelfApprove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotOwnerNorApproved\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"characterCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equippableId\",\"type\":\"uint256\"}],\"internalType\":\"struct EquippableTraits.Action\",\"name\":\"_action\",\"type\":\"tuple\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"characterCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equippableId\",\"type\":\"uint256\"}],\"internalType\":\"struct EquippableTraits.Action\",\"name\":\"_action\",\"type\":\"tuple\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum EquippableTraits.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"characterCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equippableId\",\"type\":\"uint256\"}],\"internalType\":\"struct EquippableTraits.Action\",\"name\":\"action\",\"type\":\"tuple\"}],\"internalType\":\"struct EquippableTraits.BatchAction[]\",\"name\":\"_batch\",\"type\":\"tuple[]\"}],\"name\":\"manageMultipleItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"characterCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equippableId\",\"type\":\"uint256\"}],\"internalType\":\"struct EquippableTraits.Action\",\"name\":\"_action\",\"type\":\"tuple\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"characterCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equippableId\",\"type\":\"uint256\"}],\"internalType\":\"struct EquippableTraits.Action\",\"name\":\"_action\",\"type\":\"tuple\"}],\"name\":\"unmerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EquippableTraits", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "13371337", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001145717569707061626c652054726169747300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000031a7c42edbc1ea0196afa766a46b42b99a903e4e0000000000000000000000009117bfb7fd21d103e84e880bf2c59357f099d173", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}