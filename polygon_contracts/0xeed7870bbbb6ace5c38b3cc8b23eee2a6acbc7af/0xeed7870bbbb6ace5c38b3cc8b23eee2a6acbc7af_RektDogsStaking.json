{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IRektNft.sol\": {\r\n      \"content\": \"interface IRektNft {\\n    function tokensOfOwner(\\n        address owner\\n    ) external view returns (uint256[] memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IRektToken.sol\": {\r\n      \"content\": \"interface IRektToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/RektDogsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./IRektToken.sol\\\";\\nimport \\\"./IRektNft.sol\\\";\\n\\ncontract RektDogsStaking is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address public nft;\\n\\n    address public token;\\n\\n    uint256 public DAILY_REWARDS;\\n\\n    mapping(uint256 => uint256) public lastClaimTime;\\n    mapping(uint256 => bool) public isStakedToken;\\n    mapping(uint256 => address) public tokenOwner;\\n    mapping(address => uint256) public userTotalRewards;\\n    mapping(address => uint256[]) public userStakedTokens;\\n\\n    uint256 public totalStakedTokens;\\n    uint256 public totalRewardsClaimed;\\n\\n    bool public marketingAllocationSent = false;\\n    bool public contingencyAllocationSent = false;\\n    bool public stakingEnabled = false;\\n\\n    event TokenStaked(address indexed staker, uint256 indexed tokenId);\\n\\n    event TokenUnstaked(\\n        address indexed staker,\\n        uint256 indexed tokenId,\\n        uint256 rewards\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed staker,\\n        uint256 tokenId,\\n        uint256 rewards\\n    );\\n\\n    address public MARKETING_WALLET;\\n    address public CONTINGENCY_WALLET;\\n    uint256 public constant MARKETING_ALLOCATION = 11110000 ether;\\n    uint256 public constant CONTINGENCY_ALLOCATION = 11110000 ether;\\n    uint256 public constant MAX_TOKEN_SUPPLY = 99990000 ether;\\n\\n    modifier onlyStaked(uint256 tokenId) {\\n        require(isStakedToken[tokenId] == true, \\\"Token not staked.\\\");\\n        _;\\n    }\\n\\n    modifier onlyUnstaked(uint256 tokenId) {\\n        require(isStakedToken[tokenId] == false, \\\"Token already staked.\\\");\\n        _;\\n    }\\n\\n    modifier onlyNftOwner(uint256 tokenId) {\\n        require(\\n            IRektNft(nft).ownerOf(tokenId) == msg.sender,\\n            \\\"You must own the NFT to stake it.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier underMaxTokenSupply() {\\n        require(\\n            IRektToken(token).totalSupply() < MAX_TOKEN_SUPPLY,\\n            \\\"Token allocation exhausted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier amountUnderMaxTokenSupply(uint256 amount) {\\n        require(\\n            IRektToken(token).totalSupply() + amount <= MAX_TOKEN_SUPPLY,\\n            \\\"Token allocation exhausted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier stakingIsEnabled() {\\n        require(stakingEnabled == true, \\\"Staking is disabled\\\");\\n        _;\\n    }\\n\\n    modifier onlyStakedNftOwner(uint256 tokenId) {\\n        require(\\n            tokenOwner[tokenId] == msg.sender,\\n            \\\"You must own the NFT to unstake it.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStakedNftUser(address user) {\\n        require(\\n            userStakedTokens[user].length > 0,\\n            \\\"No tokens staked for this address.\\\"\\n        );\\n        _;\\n    }\\n\\n    function sendMarketingAllocation() external onlyOwner {\\n        require(\\n            marketingAllocationSent == false,\\n            \\\"Marketing allocation already sent\\\"\\n        );\\n        require(MARKETING_WALLET != address(0), \\\"Invalid address\\\");\\n        mintRewardToken(MARKETING_WALLET, MARKETING_ALLOCATION);\\n        marketingAllocationSent = true;\\n    }\\n\\n    function sendContingencyAllocation() external onlyOwner {\\n        require(\\n            contingencyAllocationSent == false,\\n            \\\"Contingency allocation already sent\\\"\\n        );\\n        require(CONTINGENCY_WALLET != address(0), \\\"Invalid address\\\");\\n        mintRewardToken(CONTINGENCY_WALLET, CONTINGENCY_ALLOCATION);\\n        contingencyAllocationSent = true;\\n    }\\n\\n    function setDailyRewards(uint256 _newRewards) external onlyOwner {\\n        DAILY_REWARDS = _newRewards;\\n    }\\n\\n    function setStakingEnabled(bool _enabled) external onlyOwner {\\n        stakingEnabled = _enabled;\\n    }\\n\\n    function setMarketingWallet(address _wallet) external onlyOwner {\\n        MARKETING_WALLET = _wallet;\\n    }\\n\\n    function setContingencyWallet(address _wallet) external onlyOwner {\\n        CONTINGENCY_WALLET = _wallet;\\n    }\\n\\n    function setNftContract(address _nft) external onlyOwner {\\n        require(nft == address(0), \\\"NFT address already set\\\");\\n        nft = _nft;\\n    }\\n\\n    function setTokenContract(address _token) external onlyOwner {\\n        require(token == address(0), \\\"Token address already set\\\");\\n        token = _token;\\n    }\\n\\n    function stake(\\n        uint256 tokenId\\n    )\\n        public\\n        onlyUnstaked(tokenId)\\n        onlyNftOwner(tokenId)\\n        underMaxTokenSupply\\n        stakingIsEnabled\\n    {\\n        IRektNft(nft).transferFrom(msg.sender, address(this), tokenId);\\n\\n        require(\\n            IRektNft(nft).ownerOf(tokenId) == address(this),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        userStakedTokens[msg.sender].push(tokenId);\\n        tokenOwner[tokenId] = msg.sender;\\n        isStakedToken[tokenId] = true;\\n        totalStakedTokens++;\\n        lastClaimTime[tokenId] = block.timestamp;\\n        emit TokenStaked(msg.sender, tokenId);\\n    }\\n\\n    function stakeMany(uint256[] memory tokenIds) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            stake(tokenIds[i]);\\n        }\\n    }\\n\\n    function unstake(\\n        uint256 tokenId\\n    ) public onlyStaked(tokenId) onlyStakedNftOwner(tokenId) {\\n        uint256 stakedTime = block.timestamp - lastClaimTime[tokenId];\\n        uint256 rewards = calculateRewards(stakedTime);\\n        IRektNft(nft).transferFrom(address(this), msg.sender, tokenId);\\n        require(\\n            IRektNft(nft).ownerOf(tokenId) == msg.sender,\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        mintRewardToken(msg.sender, rewards);\\n        totalRewardsClaimed += rewards;\\n        userTotalRewards[msg.sender] += rewards;\\n        isStakedToken[tokenId] = false;\\n        tokenOwner[tokenId] = address(0);\\n        lastClaimTime[tokenId] = block.timestamp;\\n\\n        uint256 length = userStakedTokens[msg.sender].length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (userStakedTokens[msg.sender][i] == tokenId) {\\n                userStakedTokens[msg.sender][i] = userStakedTokens[msg.sender][\\n                    length - 1\\n                ];\\n                userStakedTokens[msg.sender].pop();\\n                break;\\n            }\\n        }\\n\\n        totalStakedTokens--;\\n        emit TokenUnstaked(msg.sender, tokenId, rewards);\\n    }\\n\\n    function unstakeMany(uint256[] memory tokenIds) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            unstake(tokenIds[i]);\\n        }\\n    }\\n\\n    function claimRewardsForTokenId(\\n        uint256 tokenId\\n    ) public nonReentrant onlyStakedNftOwner(tokenId) onlyStaked(tokenId) {\\n        uint256 stakedTime = block.timestamp - lastClaimTime[tokenId];\\n        uint256 rewards = calculateRewards(stakedTime);\\n\\n        require(rewards > 0, \\\"No rewards available to claim.\\\");\\n\\n        mintRewardToken(msg.sender, rewards);\\n        lastClaimTime[tokenId] = block.timestamp;\\n        userTotalRewards[msg.sender] += rewards;\\n        totalRewardsClaimed += rewards;\\n        emit RewardsClaimed(msg.sender, tokenId, rewards);\\n    }\\n\\n    function claimRewardsForAddress(\\n        address user\\n    ) external nonReentrant onlyStakedNftUser(user) {\\n        uint256 rewards = 0;\\n        for (uint256 i = 0; i < userStakedTokens[user].length; i++) {\\n            uint256 tokenId = userStakedTokens[user][i];\\n            require(\\n                msg.sender == tokenOwner[tokenId],\\n                \\\"You are not the owner of this token.\\\"\\n            );\\n            uint256 stakedTime = block.timestamp - lastClaimTime[tokenId];\\n            uint256 indexedRewards = calculateRewards(stakedTime);\\n            rewards += indexedRewards;\\n            lastClaimTime[tokenId] = block.timestamp;\\n            emit RewardsClaimed(user, tokenId, indexedRewards);\\n        }\\n        require(rewards > 0, \\\"No rewards available to claim.\\\");\\n        mintRewardToken(user, rewards);\\n        userTotalRewards[user] += rewards;\\n        totalRewardsClaimed += rewards;\\n    }\\n\\n    function mintRewardToken(\\n        address to,\\n        uint256 amount\\n    ) internal amountUnderMaxTokenSupply(amount) {\\n        IRektToken(token).mint(to, amount);\\n    }\\n\\n    function releaseAllRewards() public onlyOwner {\\n        uint256[] memory tokenIds = IRektNft(nft).tokensOfOwner(address(this));\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (isStakedToken[tokenIds[i]] == true) {\\n                uint256 tokenId = tokenIds[i];\\n                address owner = tokenOwner[tokenId];\\n                uint256 stakedTime = block.timestamp - lastClaimTime[tokenId];\\n                uint256 rewards = calculateRewards(stakedTime);\\n                mintRewardToken(owner, rewards);\\n                totalRewardsClaimed += rewards;\\n                userTotalRewards[owner] += rewards;\\n                lastClaimTime[tokenId] = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    function initiateHalving() external onlyOwner {\\n        DAILY_REWARDS /= 2;\\n    }\\n\\n    function ownerMintRewardToken(\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner amountUnderMaxTokenSupply(amount) {\\n        mintRewardToken(to, amount);\\n    }\\n\\n    function getUnclaimedRewardsForAddress(\\n        address _address\\n    ) public view returns (uint256 rewards) {\\n        if (userStakedTokens[_address].length == 0) {\\n            return 0;\\n        }\\n        uint256[] memory tokenIds = userStakedTokens[_address];\\n        rewards = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 stakedTime = block.timestamp - lastClaimTime[tokenId];\\n            rewards += calculateRewards(stakedTime);\\n        }\\n    }\\n\\n    function getUnclaimedRewardsForTokenId(\\n        uint256 tokenId\\n    ) external view returns (uint256 rewards) {\\n        if (isStakedToken[tokenId] == false) {\\n            return 0;\\n        }\\n\\n        uint256 stakedTime = block.timestamp - lastClaimTime[tokenId];\\n        rewards = calculateRewards(stakedTime);\\n    }\\n\\n    function getTotalRewardsForAddress(\\n        address _address\\n    ) external view returns (uint256 rewards) {\\n        rewards = getUnclaimedRewardsForAddress(_address);\\n        rewards += userTotalRewards[_address];\\n    }\\n\\n    function getTokenIdsForAddress(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return userStakedTokens[user];\\n    }\\n\\n    function calculateRewards(\\n        uint256 stakedTime\\n    ) public view returns (uint256 rewards) {\\n        rewards = stakedTime.mul(DAILY_REWARDS) / 1 days;\\n\\n        uint256 totalSupply = IRektToken(token).totalSupply();\\n        if (totalSupply >= MAX_TOKEN_SUPPLY) {\\n            return 0;\\n        }\\n\\n        if (totalSupply + rewards > MAX_TOKEN_SUPPLY) {\\n            return rewards = MAX_TOKEN_SUPPLY - totalSupply;\\n        }\\n        return rewards;\\n    }\\n\\n    function getRektDogsNFTsForAddress(\\n        address owner\\n    ) external view returns (uint256[] memory) {\\n        return IRektNft(nft).tokensOfOwner(owner);\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        return tokenOwner[tokenId];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        uint256[] memory stakedTokensForUser = userStakedTokens[account];\\n        return stakedTokensForUser.length;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTINGENCY_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTINGENCY_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewardsForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardsForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contingencyAllocationSent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getRektDogsNFTsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenIdsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalRewardsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewardsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardsForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateHalving\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isStakedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAllocationSent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerMintRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendContingencyAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMarketingAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setContingencyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewards\",\"type\":\"uint256\"}],\"name\":\"setDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RektDogsStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}