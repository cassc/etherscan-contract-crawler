{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Identity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {ClaimHolder} from \\\"./ClaimHolder.sol\\\";\\nimport {IIdentity} from \\\"./interfaces/IIdentity.sol\\\";\\nimport {IIdentityCallbackHandler} from \\\"./interfaces/IIdentityCallbackHandler.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC734` \\\"KeyHolder\\\" and the `IERC735` \\\"ClaimHolder\\\" interfaces\\n * into a common Identity Contract.\\n * This implementation has a separate contract were it declares all storage,\\n * allowing for it to be used as an upgradable logic contract.\\n */\\ncontract Identity is Initializable, IIdentity, ClaimHolder {\\n    IIdentityCallbackHandler internal _creator;\\n\\n    function initialize(\\n        address initialManagementKey,\\n        address initialClaimKey\\n    ) external virtual initializer {\\n        require(\\n            initialManagementKey != address(0),\\n            \\\"Invalid argument - zero address\\\"\\n        );\\n        require(\\n            initialClaimKey != address(0),\\n            \\\"Invalid argument - zero address\\\"\\n        );\\n        __Key_init(initialManagementKey, initialClaimKey);\\n        _setCreator(msg.sender);\\n    }\\n\\n    function getCreator() public view returns (IIdentityCallbackHandler) {\\n        return _creator;\\n    }\\n\\n    function _setCreator(address creatorAddress) internal {\\n        require(\\n            IIdentityCallbackHandler(creatorAddress).supportsInterface(\\n                type(IIdentityCallbackHandler).interfaceId\\n            ),\\n            \\\"Creator interface is incorrect\\\"\\n        );\\n        _creator = IIdentityCallbackHandler(creatorAddress);\\n    }\\n\\n    function _afterClaimAdded(\\n        bytes32 claimId,\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri\\n    ) internal override {\\n        IIdentityCallbackHandler creator = getCreator();\\n        if (address(creator) != address(0)) {\\n            creator.addClaimCallback(\\n                claimId,\\n                topic,\\n                scheme,\\n                issuer,\\n                signature,\\n                data,\\n                uri\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IIdentityCallbackHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface IIdentityCallbackHandler is IERC165Upgradeable {\\n    event ClaimAddedCallback(\\n        address indentityAddress,\\n        address userAddress,\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri\\n    );\\n\\n    function addClaimCallback(\\n        bytes32 claimId,\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IIdentity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {IERC734} from \\\"./IERC734.sol\\\";\\nimport {IERC735} from \\\"./IERC735.sol\\\";\\nimport {IIdentityCallbackHandler} from \\\"./IIdentityCallbackHandler.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n    function getCreator() external view returns (IIdentityCallbackHandler);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC735.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n    struct Claim {\\n        uint256 topic;\\n        uint256 scheme;\\n        address issuer;\\n        bytes signature;\\n        bytes data;\\n        string uri;\\n    }\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri\\n    );\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri\\n    );\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Requests the ADDITION or the CHANGE of a claim from an issuer.\\n     * Claims can requested to be added by anybody, including the claim holder itself (self issued).\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     *\\n     * This COULD implement an approval process for pending claims, or add them right away.\\n     * MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.\\n     */\\n    function addClaim(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes calldata signature,\\n        bytes calldata data,\\n        string calldata uri\\n    ) external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(\\n        bytes32 claimId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 topic,\\n            uint256 scheme,\\n            address issuer,\\n            bytes memory signature,\\n            bytes memory data,\\n            string memory uri\\n        );\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(\\n        uint256 topic\\n    ) external view returns (bytes32[] memory claimIds);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC734.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n    struct Key {\\n        uint256[] purposes;\\n        uint256 keyType;\\n        bytes32 key;\\n    }\\n\\n    struct Execution {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        bool approved;\\n        bool executed;\\n    }\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n\\n    event ExecutionFailed(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(\\n        bytes32 indexed key,\\n        uint256 indexed purpose,\\n        uint256 indexed keyType\\n    );\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(\\n        bytes32 indexed key,\\n        uint256 indexed purpose,\\n        uint256 indexed keyType\\n    );\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(\\n        bytes32 key,\\n        uint256 purpose,\\n        uint256 keyType\\n    ) external returns (bool success);\\n\\n    /**\\n     * @dev Approves an execution or claim addition.\\n     *\\n     * Triggers Event: `Approved`, `Executed`\\n     *\\n     * Specification:\\n     * This SHOULD require n of m approvals of keys purpose 1, if the _to of the execution is the identity contract itself, to successfully approve an execution.\\n     * And COULD require n of m approvals of keys purpose 2, if the _to of the execution is another contract, to successfully approve an execution.\\n     */\\n    function approve(uint256 id, bool approve) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC725 identity.\\n     *\\n     * Triggers Event: `ExecutionRequested`, `Executed`\\n     *\\n     * Specification:\\n     * SHOULD require approve to be called with one or more keys of purpose 1 or 2 to approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(\\n        bytes32 key,\\n        uint256 purpose\\n    ) external returns (bool success);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(\\n        bytes32 publicKey\\n    )\\n        external\\n        view\\n        returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(\\n        bytes32 key\\n    ) external view returns (uint256[] memory purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(\\n        uint256 purpose\\n    ) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(\\n        bytes32 key,\\n        uint256 purpose\\n    ) external view returns (bool exists);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IClaimIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {IERC735} from \\\"./IIdentity.sol\\\";\\nimport {IIdentity} from \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IERC735 {\\n    function isClaimValid(\\n        IIdentity identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/KeyHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {IERC734} from \\\"./interfaces/IERC734.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC734` \\\"KeyHolder\\\" and the `IERC735` \\\"ClaimHolder\\\" interfaces\\n * into a common Identity Contract.\\n * This implementation has a separate contract were it declares all storage,\\n * allowing for it to be used as an upgradable logic contract.\\n */\\ncontract KeyHolder is Initializable, IERC734 {\\n    // keys as defined by IERC734\\n    mapping(bytes32 => Key) internal _keys;\\n\\n    // keys for a given purpose\\n    // purpose 1 = MANAGEMENT\\n    // purpose 2 = ACTION\\n    // purpose 3 = CLAIM\\n    mapping(uint256 => bytes32[]) internal _keysByPurpose;\\n\\n    uint256 public constant KEY_TYPE_ECDSA = 1;\\n    uint256 public constant KEY_PURPOSE_MANAGEMENT_KEY = 1;\\n    uint256 public constant KEY_PURPOSE_ACTION_KEY = 2;\\n    uint256 public constant KEY_PURPOSE_CLAIM_SIGNER_KEY = 3;\\n    uint256 public constant KEY_PURPOSE_ENCRYPTION_KEY = 4;\\n\\n    // execution data\\n    mapping(uint256 => Execution) internal _executions;\\n\\n    // nonce used by the execute/approve function\\n    uint256 internal _executionNonce;\\n\\n    // todo: add modifier only action key\\n    /**\\n     * @notice requires management key to call this function, or internal call\\n     */\\n    modifier mOnlyManagementKey() {\\n        require(\\n            msg.sender == address(this) ||\\n                keyHasPurpose(\\n                    keccak256(abi.encode(msg.sender)),\\n                    KEY_PURPOSE_MANAGEMENT_KEY\\n                ),\\n            \\\"Sender does not have management key\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC734-execute}.\\n     * @notice Passes an execution instruction to the keymanager.\\n     * If the sender is an ACTION key and the destination address is not the identity contract itself, then the\\n     * execution is immediately approved and performed.\\n     * If the destination address is the identity itself, then the execution would be performed immediately only if\\n     * the sender is a MANAGEMENT key.\\n     * Otherwise, the execute method triggers an ExecutionRequested event, and the execution request must be approved\\n     * using the `approve` method.\\n     * @return executionId to use in the approve function, to approve or reject this execution.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) external payable override returns (uint256) {\\n        uint256 executionId = _executionNonce;\\n        require(!_executions[executionId].executed, \\\"Already executed\\\");\\n        _executions[executionId].to = to;\\n        _executions[executionId].value = value;\\n        _executions[executionId].data = data;\\n        _executionNonce++;\\n\\n        emit ExecutionRequested(executionId, to, value, data);\\n\\n        if (\\n            keyHasPurpose(\\n                keccak256(abi.encode(msg.sender)),\\n                KEY_PURPOSE_MANAGEMENT_KEY\\n            ) ||\\n            (to != address(this) &&\\n                keyHasPurpose(\\n                    keccak256(abi.encode(msg.sender)),\\n                    KEY_PURPOSE_ACTION_KEY\\n                ))\\n        ) {\\n            approve(executionId, true);\\n        }\\n\\n        return executionId;\\n    }\\n\\n    /**\\n     * @dev See {IERC734-getKey}.\\n     * @notice Implementation of the getKey function from the ERC-734 standard\\n     * @param publicKey The public key.  for non-hex and long keys, its the Keccak256 hash of the key\\n     * @return purposes Returns the full key data, if present in the identity.\\n     * @return keyType Returns the full key data, if present in the identity.\\n     * @return key Returns the full key data, if present in the identity.\\n     */\\n    function getKey(\\n        bytes32 publicKey\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256[] memory purposes, uint256 keyType, bytes32 key)\\n    {\\n        return (\\n            _keys[publicKey].purposes,\\n            _keys[publicKey].keyType,\\n            _keys[publicKey].key\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC734-getKeypurpose}.\\n     * @notice gets the purpose of a key\\n     * @param key The public key.  for non-hex and long keys, its the Keccak256 hash of the key\\n     * @return purposes Returns the purpose of the specified key\\n     */\\n    function getKeyPurposes(\\n        bytes32 key\\n    ) external view override returns (uint256[] memory purposes) {\\n        return (_keys[key].purposes);\\n    }\\n\\n    /**\\n     * @dev See {IERC734-getKeysByPurpose}.\\n     * @notice gets all the keys with a specific purpose from an identity\\n     * @param purpose a uint256[] Array of the key types, like 1 = MANAGEMENT, 2 = ACTION, 3 = CLAIM, 4 = ENCRYPTION\\n     * @return keys Returns an array of public key bytes32 hold by this identity and having the specified purpose\\n     */\\n    function getKeysByPurpose(\\n        uint256 purpose\\n    ) external view override returns (bytes32[] memory keys) {\\n        return _keysByPurpose[purpose];\\n    }\\n\\n    /**\\n     * @notice implementation of the addKey function of the ERC-734 standard\\n     * Adds a key to the identity. The _purpose specifies the purpose of key. Initially we propose four purpose:\\n     * 1: MANAGEMENT keys, which can manage the identity\\n     * 2: ACTION keys, which perform actions in this identities name (signing, logins, transactions, etc.)\\n     * 3: CLAIM signer keys, used to sign claims on other identities which need to be revokable.\\n     * 4: ENCRYPTION keys, used to encrypt data e.g. hold in claims.\\n     * MUST only be done by keys of purpose 1, or the identity itself.\\n     * If its the identity itself, the approval process will determine its approval.\\n     * @param key keccak256 representation of an ethereum address\\n     * @param keyType type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc.\\n     * @param purposeType a uint256 specifying the key type, like 1 = MANAGEMENT, 2 = ACTION, 3 = CLAIM, 4 = ENCRYPTION\\n     * @return success Returns TRUE if the addition was successful and FALSE if not\\n     */\\n    function addKey(\\n        bytes32 key,\\n        uint256 purposeType,\\n        uint256 keyType\\n    ) public override mOnlyManagementKey returns (bool success) {\\n        return _addKey(key, purposeType, keyType);\\n    }\\n\\n    /**\\n     *  @dev See {IERC734-approve}.\\n     *  @notice Approves an execution or claim addition.\\n     *  If the sender is an ACTION key and the destination address is not the identity contract itself, then the\\n     *  approval is authorized and the operation would be performed.\\n     *  If the destination address is the identity itself, then the execution would be authorized and performed only\\n     *  if the sender is a MANAGEMENT key.\\n     */\\n    function approve(\\n        uint256 id,\\n        bool approval\\n    ) public override returns (bool success) {\\n        require(\\n            id < _executionNonce,\\n            \\\"Cannot approve a non-existing execution\\\"\\n        );\\n        require(!_executions[id].executed, \\\"Request already executed\\\");\\n\\n        if (_executions[id].to == address(this)) {\\n            require(\\n                keyHasPurpose(\\n                    keccak256(abi.encode(msg.sender)),\\n                    KEY_PURPOSE_MANAGEMENT_KEY\\n                ),\\n                \\\"Sender does not have management key\\\"\\n            );\\n        } else {\\n            require(\\n                keyHasPurpose(\\n                    keccak256(abi.encode(msg.sender)),\\n                    KEY_PURPOSE_ACTION_KEY\\n                ),\\n                \\\"Sender does not have action key\\\"\\n            );\\n        }\\n        emit Approved(id, approval);\\n\\n        if (approval == true) {\\n            _executions[id].approved = true;\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, ) = _executions[id].to.call{\\n                value: (_executions[id].value)\\n            }(_executions[id].data);\\n\\n            if (success) {\\n                _executions[id].executed = true;\\n\\n                emit Executed(\\n                    id,\\n                    _executions[id].to,\\n                    _executions[id].value,\\n                    _executions[id].data\\n                );\\n\\n                return true;\\n            } else {\\n                emit ExecutionFailed(\\n                    id,\\n                    _executions[id].to,\\n                    _executions[id].value,\\n                    _executions[id].data\\n                );\\n\\n                return false;\\n            }\\n        } else {\\n            _executions[id].approved = false;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IERC734-removeKey}.\\n     * @notice Remove the purpose from a key.\\n     */\\n    function removeKey(\\n        bytes32 key,\\n        uint256 purpose\\n    ) public override mOnlyManagementKey returns (bool success) {\\n        require(_keys[key].key == key, \\\"NonExisting: Key isn't registered\\\");\\n        uint256[] memory _purposes = _keys[key].purposes;\\n\\n        uint256 purposeIndex = 0;\\n        while (_purposes[purposeIndex] != purpose) {\\n            purposeIndex++;\\n\\n            if (purposeIndex == _purposes.length) {\\n                revert(\\\"Key doesn't have such purpose\\\");\\n            }\\n        }\\n\\n        _purposes[purposeIndex] = _purposes[_purposes.length - 1];\\n        _keys[key].purposes = _purposes;\\n        _keys[key].purposes.pop();\\n\\n        uint256 keyIndex = 0;\\n        uint256 arrayLength = _keysByPurpose[purpose].length;\\n\\n        while (_keysByPurpose[purpose][keyIndex] != key) {\\n            keyIndex++;\\n\\n            if (keyIndex >= arrayLength) {\\n                break;\\n            }\\n        }\\n\\n        _keysByPurpose[purpose][keyIndex] = _keysByPurpose[purpose][\\n            arrayLength - 1\\n        ];\\n        _keysByPurpose[purpose].pop();\\n\\n        uint256 keyType = _keys[key].keyType;\\n\\n        if (_purposes.length - 1 == 0) {\\n            delete _keys[key];\\n        }\\n\\n        emit KeyRemoved(key, purpose, keyType);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC734-keyHasPurpose}.\\n     * @notice Returns true if the key has MANAGEMENT purpose or the specified purpose.\\n     */\\n    function keyHasPurpose(\\n        bytes32 key,\\n        uint256 purpose\\n    ) public view virtual override returns (bool result) {\\n        Key memory keyBase = _keys[key];\\n        if (keyBase.key == 0) return false;\\n\\n        for (\\n            uint256 keyPurposeIndex = 0;\\n            keyPurposeIndex < keyBase.purposes.length;\\n            keyPurposeIndex++\\n        ) {\\n            uint256 purposeBase = keyBase.purposes[keyPurposeIndex];\\n\\n            if (\\n                purposeBase == KEY_PURPOSE_MANAGEMENT_KEY ||\\n                purposeBase == purpose\\n            ) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Initializer internal function for the Identity contract.\\n     *\\n     * @param initialManagementKey The ethereum address to be set as the management key of the identity.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Key_init(\\n        address initialManagementKey\\n    ) internal onlyInitializing {\\n        require(\\n            initialManagementKey != address(0),\\n            \\\"Invalid argument - zero address\\\"\\n        );\\n        bytes32 key = keccak256(abi.encode(initialManagementKey));\\n        _addKey(key, KEY_PURPOSE_MANAGEMENT_KEY, KEY_TYPE_ECDSA);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Key_init(\\n        address initialManagementKey,\\n        address initialClaimKey\\n    ) internal onlyInitializing {\\n        require(\\n            initialManagementKey != address(0),\\n            \\\"Invalid argument - zero address\\\"\\n        );\\n        require(\\n            initialClaimKey != address(0),\\n            \\\"Invalid argument - zero address\\\"\\n        );\\n        bytes32 managementKey = keccak256(abi.encode(initialManagementKey));\\n        _addKey(managementKey, KEY_PURPOSE_MANAGEMENT_KEY, KEY_TYPE_ECDSA);\\n\\n        bytes32 claimKey = keccak256(abi.encode(initialClaimKey));\\n        _addKey(claimKey, KEY_PURPOSE_CLAIM_SIGNER_KEY, KEY_TYPE_ECDSA);\\n    }\\n\\n    function _addKey(\\n        bytes32 key,\\n        uint256 purposeType,\\n        uint256 keyType\\n    ) internal returns (bool) {\\n        if (_keys[key].key == key) {\\n            uint256[] memory _purposes = _keys[key].purposes;\\n            for (\\n                uint256 keyPurposeIndex = 0;\\n                keyPurposeIndex < _purposes.length;\\n                keyPurposeIndex++\\n            ) {\\n                uint256 purpose = _purposes[keyPurposeIndex];\\n\\n                if (purposeType == purpose) {\\n                    revert(\\\"Conflict: Key already has purpose\\\");\\n                }\\n            }\\n\\n            _keys[key].purposes.push(purposeType);\\n        } else {\\n            _keys[key].key = key;\\n            _keys[key].purposes = [purposeType];\\n            _keys[key].keyType = keyType;\\n        }\\n\\n        _keysByPurpose[purposeType].push(key);\\n\\n        emit KeyAdded(key, purposeType, keyType);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/ClaimHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {IERC735} from \\\"./interfaces/IERC735.sol\\\";\\nimport {KeyHolder} from \\\"./KeyHolder.sol\\\";\\nimport {IClaimIssuer, IIdentity} from \\\"./interfaces/IClaimIssuer.sol\\\";\\n\\n// **Warning!** This file is a protoype version of our work around ERC 725.\\n// This file is now out of date and **should not be used**.\\n// Our current identity contracts are here:\\n// https://github.com/OriginProtocol/origin/tree/master/origin-contracts/contracts/identity\\n\\ncontract ClaimHolder is KeyHolder, IERC735 {\\n    // claims held by the identity\\n    mapping(bytes32 => Claim) internal _claims;\\n\\n    // array of claims for a given topic\\n    mapping(uint256 => bytes32[]) internal _claimsByTopic;\\n\\n    /**\\n     * @notice requires claim key to call this function, or internal call\\n     */\\n    modifier mOnlyClaimKey() {\\n        require(\\n            msg.sender == address(this) ||\\n                keyHasPurpose(\\n                    keccak256(abi.encode(msg.sender)),\\n                    KEY_PURPOSE_CLAIM_SIGNER_KEY\\n                ),\\n            \\\"Sender does not have claim signer key\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC735-getClaimIdsByTopic}.\\n     * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.\\n     * used to get all the claims from the specified topic\\n     * @param topic The identity of the claim i.e. keccak256(abi.encode(issuer, topic))\\n     * @return claimIds Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(\\n        uint256 topic\\n    ) external view override returns (bytes32[] memory claimIds) {\\n        return _claimsByTopic[topic];\\n    }\\n\\n    /**\\n     * @dev See {IERC735-addClaim}.\\n     * @notice Implementation of the addClaim function from the ERC-735 standard\\n     *  Require that the msg.sender has claim signer key.\\n     *\\n     * @param topic The type of claim\\n     * @param scheme The scheme with which this claim SHOULD be verified or how it should be processed.\\n     * @param issuer The issuers identity contract address, or the address used to sign the above signature.\\n     * @param signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.\\n     * it MUST be a signed message of the following structure:\\n     * keccak256(abi.encode(address identityHolder_address, uint256 _ topic, bytes data))\\n     * @param data The hash of the claim data, sitting in another\\n     * location, a bit-mask, call data, or actual data based on the claim scheme.\\n     * @param uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.\\n     *\\n     * @return claimRequestId Returns claimRequestId: COULD be\\n     * send to the approve function, to approve or reject this claim.\\n     * triggers ClaimAdded event.\\n     */\\n    function addClaim(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri\\n    ) public override mOnlyClaimKey returns (bytes32 claimRequestId) {\\n        if (issuer != address(this)) {\\n            require(\\n                IClaimIssuer(issuer).isClaimValid(\\n                    IIdentity(address(this)),\\n                    topic,\\n                    signature,\\n                    data\\n                ),\\n                \\\"invalid claim\\\"\\n            );\\n        }\\n\\n        bytes32 claimId = keccak256(abi.encode(issuer, topic));\\n\\n        if (_claims[claimId].issuer != issuer) {\\n            _claimsByTopic[topic].push(claimId);\\n        }\\n\\n        _claims[claimId].topic = topic;\\n        _claims[claimId].scheme = scheme;\\n        _claims[claimId].issuer = issuer;\\n        _claims[claimId].signature = signature;\\n        _claims[claimId].data = data;\\n        _claims[claimId].uri = uri;\\n\\n        emit ClaimAdded(claimId, topic, scheme, issuer, signature, data, uri);\\n        _afterClaimAdded(claimId, topic, scheme, issuer, signature, data, uri);\\n\\n        return claimId;\\n    }\\n\\n    /**\\n     * @dev See {IERC735-removeClaim}.\\n     * @notice Implementation of the removeClaim function from the ERC-735 standard\\n     * Require that the msg.sender has management key.\\n     * Can only be removed by the claim issuer, or the claim holder itself.\\n     *\\n     * @param claimId The identity of the claim i.e. keccak256(abi.encode(issuer, topic))\\n     *\\n     * @return success Returns TRUE when the claim was removed.\\n     * triggers ClaimRemoved event\\n     */\\n    function removeClaim(\\n        bytes32 claimId\\n    ) public override mOnlyClaimKey returns (bool success) {\\n        uint256 topic = _claims[claimId].topic;\\n        if (topic == 0) {\\n            revert(\\\"There is no claim with this ID\\\");\\n        }\\n\\n        uint256 claimIndex = 0;\\n        while (_claimsByTopic[topic][claimIndex] != claimId) {\\n            claimIndex++;\\n\\n            if (claimIndex >= _claimsByTopic[topic].length) {\\n                break;\\n            }\\n        }\\n\\n        _claimsByTopic[topic][claimIndex] = _claimsByTopic[topic][\\n            _claimsByTopic[topic].length - 1\\n        ];\\n        _claimsByTopic[topic].pop();\\n\\n        emit ClaimRemoved(\\n            claimId,\\n            topic,\\n            _claims[claimId].scheme,\\n            _claims[claimId].issuer,\\n            _claims[claimId].signature,\\n            _claims[claimId].data,\\n            _claims[claimId].uri\\n        );\\n\\n        delete _claims[claimId];\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC735-getClaim}.\\n     * @notice Implementation of the getClaim function from the ERC-735 standard.\\n     *\\n     * @param claimId The identity of the claim i.e. keccak256(abi.encode(issuer, topic))\\n     *\\n     * @return topic Returns all the parameters of the claim for the\\n     * specified claimId (topic, scheme, signature, issuer, data, uri) .\\n     * @return scheme Returns all the parameters of the claim for the\\n     * specified claimId (topic, scheme, signature, issuer, data, uri) .\\n     * @return issuer Returns all the parameters of the claim for the\\n     * specified claimId (topic, scheme, signature, issuer, data, uri) .\\n     * @return signature Returns all the parameters of the claim for the\\n     * specified claimId (topic, scheme, signature, issuer, data, uri) .\\n     * @return data Returns all the parameters of the claim for the\\n     * specified claimId (topic, scheme, signature, issuer, data, uri) .\\n     * @return uri Returns all the parameters of the claim for the\\n     * specified claimId (topic, scheme, signature, issuer, data, uri) .\\n     */\\n    function getClaim(\\n        bytes32 claimId\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 topic,\\n            uint256 scheme,\\n            address issuer,\\n            bytes memory signature,\\n            bytes memory data,\\n            string memory uri\\n        )\\n    {\\n        return (\\n            _claims[claimId].topic,\\n            _claims[claimId].scheme,\\n            _claims[claimId].issuer,\\n            _claims[claimId].signature,\\n            _claims[claimId].data,\\n            _claims[claimId].uri\\n        );\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    function _afterClaimAdded(\\n        bytes32 claimId,\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri\\n    ) internal virtual {}\\n    /* solhint-enable no-empty-blocks */\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KEY_PURPOSE_ACTION_KEY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEY_PURPOSE_CLAIM_SIGNER_KEY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEY_PURPOSE_ENCRYPTION_KEY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEY_PURPOSE_MANAGEMENT_KEY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEY_TYPE_ECDSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purposeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"contract IIdentityCallbackHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"publicKey\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialManagementKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialClaimKey\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Identity", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}