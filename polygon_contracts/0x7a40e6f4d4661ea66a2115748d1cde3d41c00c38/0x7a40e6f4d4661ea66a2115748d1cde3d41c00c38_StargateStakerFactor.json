{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.18;\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// TokenizedStrategy interface used for internal view delegateCalls.\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\r\n *\r\n * _Available since v4.7._\r\n */\r\ninterface IERC4626 is IERC20, IERC20Metadata {\r\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     *\r\n     * - MUST be an ERC-20 token contract.\r\n     * - MUST NOT revert.\r\n     */\r\n    function asset() external view returns (address assetTokenAddress);\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     *\r\n     * - SHOULD include any compounding that occurs from yield.\r\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT revert.\r\n     */\r\n    function totalAssets() external view returns (uint256 totalManagedAssets);\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     *\r\n     * - MUST return a limited value if receiver is subject to some deposit limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\r\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\r\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   deposit execution, and are accounted for during deposit.\r\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\r\n     * - MUST return a limited value if receiver is subject to some mint limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxMint(address receiver) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\r\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\r\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\r\n     */\r\n    function previewMint(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\r\n     *   execution, and are accounted for during mint.\r\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\r\n     * Vault, through a withdraw call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\r\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\r\n     *   called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\r\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   withdraw execution, and are accounted for during withdraw.\r\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\r\n     * through a redeem call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\r\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\r\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\r\n     */\r\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   redeem execution, and are accounted for during redeem.\r\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 assets);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// Interface that implements the 4626 standard and the implementation functions\r\ninterface ITokenizedStrategy is IERC4626, IERC20Permit {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event UpdatePendingManagement(address indexed newPendingManagement);\r\n\r\n    event UpdateManagement(address indexed newManagement);\r\n\r\n    event UpdateKeeper(address indexed newKeeper);\r\n\r\n    event UpdateEmergencyAdmin(address indexed newEmergencyAdmin);\r\n\r\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\r\n\r\n    event UpdatePerformanceFeeRecipient(\r\n        address indexed newPerformanceFeeRecipient\r\n    );\r\n\r\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\r\n\r\n    event StrategyShutdown();\r\n\r\n    event Reported(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 protocolFees,\r\n        uint256 performanceFees\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           INITIALIZATION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function init(\r\n        address _asset,\r\n        string memory _name,\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    NON-STANDARD 4626 OPTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function isManagement(address _sender) external view returns (bool);\r\n\r\n    function isKeeperOrManagement(address _sender) external view returns (bool);\r\n\r\n    function isEmergencyAuthorized(\r\n        address _sender\r\n    ) external view returns (bool);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        KEEPERS FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function tend() external;\r\n\r\n    function report() external returns (uint256 _profit, uint256 _loss);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function MIN_FEE() external view returns (uint16);\r\n\r\n    function MAX_FEE() external view returns (uint16);\r\n\r\n    function FACTORY() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalIdle() external view returns (uint256);\r\n\r\n    function totalDebt() external view returns (uint256);\r\n\r\n    function management() external view returns (address);\r\n\r\n    function pendingManagement() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function emergencyAdmin() external view returns (address);\r\n\r\n    function performanceFee() external view returns (uint16);\r\n\r\n    function performanceFeeRecipient() external view returns (address);\r\n\r\n    function fullProfitUnlockDate() external view returns (uint256);\r\n\r\n    function profitUnlockingRate() external view returns (uint256);\r\n\r\n    function profitMaxUnlockTime() external view returns (uint256);\r\n\r\n    function lastReport() external view returns (uint256);\r\n\r\n    function isShutdown() external view returns (bool);\r\n\r\n    function unlockedShares() external view returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPendingManagement(address) external;\r\n\r\n    function acceptManagement() external;\r\n\r\n    function setKeeper(address _keeper) external;\r\n\r\n    function setEmergencyAdmin(address _emergencyAdmin) external;\r\n\r\n    function setPerformanceFee(uint16 _performanceFee) external;\r\n\r\n    function setPerformanceFeeRecipient(\r\n        address _performanceFeeRecipient\r\n    ) external;\r\n\r\n    function setProfitMaxUnlockTime(uint256 _profitMaxUnlockTime) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function emergencyWithdraw(uint256 _amount) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           ERC20 ADD ONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external returns (bool);\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title YearnV3 Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to\r\n *  seamlessly integrate with the `TokenizedStrategy` implementation contract\r\n *  allowing anyone to easily build a fully permissionless ERC-4626 compliant\r\n *  Vault by inheriting this contract and overriding three simple functions.\r\n\r\n *  It utilizes an immutable proxy pattern that allows the BaseStrategy\r\n *  to remain simple and small. All standard logic is held within the\r\n *  `TokenizedStrategy` and is reused over any n strategies all using the\r\n *  `fallback` function to delegatecall the implementation so that strategists\r\n *  can only be concerned with writing their strategy specific code.\r\n *\r\n *  This contract should be inherited and the three main abstract methods\r\n *  `_deployFunds`, `_freeFunds` and `_harvestAndReport` implemented to adapt\r\n *  the Strategy to the particular needs it has to generate yield. There are\r\n *  other optional methods that can be implemented to further customize\r\n *  the strategy if desired.\r\n *\r\n *  All default storage for the strategy is controlled and updated by the\r\n *  `TokenizedStrategy`. The implementation holds a storage struct that\r\n *  contains all needed global variables in a manual storage slot. This\r\n *  means strategists can feel free to implement their own custom storage\r\n *  variables as they need with no concern of collisions. All global variables\r\n *  can be viewed within the Strategy by a simple call using the\r\n *  `TokenizedStrategy` variable. IE: TokenizedStrategy.globalVariable();.\r\n */\r\nabstract contract BaseStrategy {\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev Used on TokenizedStrategy callback functions to make sure it is post\r\n     * a delegateCall from this address to the TokenizedStrategy.\r\n     */\r\n    modifier onlySelf() {\r\n        _onlySelf();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from the strategies management.\r\n     */\r\n    modifier onlyManagement() {\r\n        TokenizedStrategy.isManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the keeper.\r\n     */\r\n    modifier onlyKeepers() {\r\n        TokenizedStrategy.isKeeperOrManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the emergency admin.\r\n     */\r\n    modifier onlyEmergencyAuthorized() {\r\n        TokenizedStrategy.isEmergencyAuthorized(msg.sender);\r\n        _;\r\n    }\r\n\r\n    function _onlySelf() internal view {\r\n        require(msg.sender == address(this), \"!self\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * This is the address of the TokenizedStrategy implementation\r\n     * contract that will be used by all strategies to handle the\r\n     * accounting, logic, storage etc.\r\n     *\r\n     * Any external calls to the that don't hit one of the functions\r\n     * defined in this base or the strategy will end up being forwarded\r\n     * through the fallback function, which will delegateCall this address.\r\n     *\r\n     * This address should be the same for every strategy, never be adjusted\r\n     * and always be checked before any integration with the Strategy.\r\n     */\r\n    address public constant tokenizedStrategyAddress =\r\n        0xDFC8cD9F2f2d306b7C0d109F005DF661E14f4ff2;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * This variable is set to address(this) during initialization of each strategy.\r\n     *\r\n     * This can be used to retrieve storage data within the strategy\r\n     * contract as if it were a linked library.\r\n     *\r\n     *       i.e. uint256 totalAssets = TokenizedStrategy.totalAssets()\r\n     *\r\n     * Using address(this) will mean any calls using this variable will lead\r\n     * to a call to itself. Which will hit the fallback function and\r\n     * delegateCall that to the actual TokenizedStrategy.\r\n     */\r\n    ITokenizedStrategy internal immutable TokenizedStrategy;\r\n\r\n    // Underlying asset the Strategy is earning yield on.\r\n    // Stored here for cheap retrievals within the strategy.\r\n    ERC20 internal immutable asset;\r\n\r\n    /**\r\n     * @notice Used to initialize the strategy on deployment.\r\n     *\r\n     * This will set the `TokenizedStrategy` variable for easy\r\n     * internal view calls to the implementation. As well as\r\n     * initializing the default storage variables based on the\r\n     * parameters and using the deployer for the permissioned roles.\r\n     *\r\n     * @param _asset Address of the underlying asset.\r\n     * @param _name Name the strategy will use.\r\n     */\r\n    constructor(address _asset, string memory _name) {\r\n        asset = ERC20(_asset);\r\n\r\n        // Set instance of the implementation for internal use.\r\n        TokenizedStrategy = ITokenizedStrategy(address(this));\r\n\r\n        // Initialize the strategy's storage variables.\r\n        _delegateCall(\r\n            abi.encodeCall(\r\n                ITokenizedStrategy.init,\r\n                (_asset, _name, msg.sender, msg.sender, msg.sender)\r\n            )\r\n        );\r\n\r\n        // Store the tokenizedStrategyAddress at the standard implementation\r\n        // address storage slot so etherscan picks up the interface. This gets\r\n        // stored on initialization and never updated.\r\n        assembly {\r\n            sstore(\r\n                // keccak256('eip1967.proxy.implementation' - 1)\r\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\r\n                tokenizedStrategyAddress\r\n            )\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Should deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Will attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * The amount of 'asset' that is already loose has already\r\n     * been accounted for.\r\n     *\r\n     * This function is called during {withdraw} and {redeem} calls.\r\n     * Meaning that unless a whitelist is implemented it will be\r\n     * entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * Should not rely on asset.balanceOf(address(this)) calls other than\r\n     * for diff accounting purposes.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * This can still be called post a shutdown, a strategist can check\r\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\r\n     * redeployed or simply realize any profits/losses.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        virtual\r\n        returns (uint256 _totalAssets);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    OPTIONAL TO OVERRIDE BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Optional function for strategist to override that can\r\n     *  be called in between reports.\r\n     *\r\n     * If '_tend' is used tendTrigger() will also need to be overridden.\r\n     *\r\n     * This call can only be called by a permissioned role so may be\r\n     * through protected relays.\r\n     *\r\n     * This can be used to harvest and compound rewards, deposit idle funds,\r\n     * perform needed position maintenance or anything else that doesn't need\r\n     * a full report for.\r\n     *\r\n     *   EX: A strategy that can not deposit funds without getting\r\n     *       sandwiched can use the tend when a certain threshold\r\n     *       of idle to totalAssets has been reached.\r\n     *\r\n     * The TokenizedStrategy contract will do all needed debt and idle updates\r\n     * after this has finished and will have no effect on PPS of the strategy\r\n     * till report() is called.\r\n     *\r\n     * @param _totalIdle The current amount of idle funds that are available to deploy.\r\n     */\r\n    function _tend(uint256 _totalIdle) internal virtual {}\r\n\r\n    /**\r\n     * @dev Optional trigger to override if tend() will be used by the strategy.\r\n     * This must be implemented if the strategy hopes to invoke _tend().\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     */\r\n    function _tendTrigger() internal view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if tend() should be called by a keeper.\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     * @return . Calldata for the tend call.\r\n     */\r\n    function tendTrigger() external view virtual returns (bool, bytes memory) {\r\n        return (\r\n            // Return the status of the tend trigger.\r\n            _tendTrigger(),\r\n            // And the needed calldata either way.\r\n            abi.encodeWithSelector(ITokenizedStrategy.tend.selector)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that an address can deposit.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any deposit or mints to enforce\r\n     * any limits desired by the strategist. This can be used for either a\r\n     * traditional deposit limit or for implementing a whitelist etc.\r\n     *\r\n     *   EX:\r\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\r\n     *\r\n     * This does not need to take into account any conversion rates\r\n     * from shares to assets. But should know that any non max uint256\r\n     * amounts may be converted to shares. So it is recommended to keep\r\n     * custom amounts low enough as not to cause overflow when multiplied\r\n     * by `totalSupply`.\r\n     *\r\n     * @param . The address that is depositing into the strategy.\r\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\r\n     */\r\n    function availableDepositLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that can be withdrawn.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any withdraw or redeem to enforce\r\n     * any limits desired by the strategist. This can be used for illiquid\r\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\r\n     *\r\n     *   EX:\r\n     *       return TokenIzedStrategy.totalIdle();\r\n     *\r\n     * This does not need to take into account the `_owner`'s share balance\r\n     * or conversion rates from shares to assets.\r\n     *\r\n     * @param . The address that is withdrawing from the strategy.\r\n     * @return . The available amount that can be withdrawn in terms of `asset`\r\n     */\r\n    function availableWithdrawLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @dev Optional function for a strategist to override that will\r\n     * allow management to manually withdraw deployed funds from the\r\n     * yield source if a strategy is shutdown.\r\n     *\r\n     * This should attempt to free `_amount`, noting that `_amount` may\r\n     * be more than is currently deployed.\r\n     *\r\n     * NOTE: This will not realize any profits or losses. A separate\r\n     * {report} will be needed in order to record any profit/loss. If\r\n     * a report may need to be called after a shutdown it is important\r\n     * to check if the strategy is shutdown during {_harvestAndReport}\r\n     * so that it does not simply re-deploy all funds that had been freed.\r\n     *\r\n     * EX:\r\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\r\n     *       depositFunds...\r\n     *    }\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        TokenizedStrategy HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Should deploy up to '_amount' of 'asset' in yield source.\r\n     * @dev Callback for the TokenizedStrategy to call during a {deposit}\r\n     * or {mint} to tell the strategy it can deploy funds.\r\n     *\r\n     * Since this can only be called after a {deposit} or {mint}\r\n     * delegateCall to the TokenizedStrategy msg.sender == address(this).\r\n     *\r\n     * Unless a whitelist is implemented this will be entirely permissionless\r\n     * and thus can be sandwiched or otherwise manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should\r\n     * attempt to deposit in the yield source.\r\n     */\r\n    function deployFunds(uint256 _amount) external virtual onlySelf {\r\n        _deployFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Will attempt to free the '_amount' of 'asset'.\r\n     * @dev Callback for the TokenizedStrategy to call during a withdraw\r\n     * or redeem to free the needed funds to service the withdraw.\r\n     *\r\n     * This can only be called after a 'withdraw' or 'redeem' delegateCall\r\n     * to the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt to free up.\r\n     */\r\n    function freeFunds(uint256 _amount) external virtual onlySelf {\r\n        _freeFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the accurate amount of all funds currently\r\n     * held by the Strategy.\r\n     * @dev Callback for the TokenizedStrategy to call during a report to\r\n     * get an accurate accounting of assets the strategy controls.\r\n     *\r\n     * This can only be called after a report() delegateCall to the\r\n     * TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @return . A trusted and accurate account for the total amount\r\n     * of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function harvestAndReport() external virtual onlySelf returns (uint256) {\r\n        return _harvestAndReport();\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_tend' when a keeper tends the strategy.\r\n     * @dev Callback for the TokenizedStrategy to initiate a _tend call in the strategy.\r\n     *\r\n     * This can only be called after a tend() delegateCall to the TokenizedStrategy\r\n     * so msg.sender == address(this).\r\n     *\r\n     * We name the function `tendThis` so that `tend` calls are forwarded to\r\n     * the TokenizedStrategy so it can do the necessary accounting.\r\n\r\n     * @param _totalIdle The amount of current idle funds that can be\r\n     * deployed during the tend\r\n     */\r\n    function tendThis(uint256 _totalIdle) external virtual onlySelf {\r\n        _tend(_totalIdle);\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_emergencyWithdraw' function.\r\n     * @dev Callback for the TokenizedStrategy during an emergency withdraw.\r\n     *\r\n     * This can only be called after a emergencyWithdraw() delegateCall to\r\n     * the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * We name the function `shutdownWithdraw` so that `emergencyWithdraw`\r\n     * calls are forwarded to the TokenizedStrategy so it can do the necessary\r\n     * accounting after the withdraw.\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function shutdownWithdraw(uint256 _amount) external virtual onlySelf {\r\n        _emergencyWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function used to delegate call the TokenizedStrategy with\r\n     * certain `_calldata` and return any return values.\r\n     *\r\n     * This is used to setup the initial storage of the strategy, and\r\n     * can be used by strategist to forward any other call to the\r\n     * TokenizedStrategy implementation.\r\n     *\r\n     * @param _calldata The abi encoded calldata to use in delegatecall.\r\n     * @return . The return value if the call was successful in bytes.\r\n     */\r\n    function _delegateCall(\r\n        bytes memory _calldata\r\n    ) internal returns (bytes memory) {\r\n        // Delegate call the tokenized strategy with provided calldata.\r\n        (bool success, bytes memory result) = tokenizedStrategyAddress\r\n            .delegatecall(_calldata);\r\n\r\n        // If the call reverted. Return the error.\r\n        if (!success) {\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n                revert(ptr, size)\r\n            }\r\n        }\r\n\r\n        // Return the result.\r\n        return result;\r\n    }\r\n\r\n    // execute a function on the TokenizedStrategy and return any value.\r\n    fallback() external {\r\n        // load our target address\r\n        address _tokenizedStrategyAddress = tokenizedStrategyAddress;\r\n        // Execute external function using delegatecall and return any value.\r\n        assembly {\r\n            // Copy function selector and any arguments.\r\n            calldatacopy(0, 0, calldatasize())\r\n            // Execute function delegatecall.\r\n            let result := delegatecall(\r\n                gas(),\r\n                _tokenizedStrategyAddress,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            // Get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // Return any return value or error back to the caller\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    // Taken from https://soliditydeveloper.com/uniswap3\r\n    // Manually added to the interface\r\n    function refundETH() external payable;\r\n}\r\n\r\n/**\r\n *   @title UniswapV3Swapper\r\n *   @author Yearn.finance\r\n *   @dev This is a simple contract that can be inherited by any tokenized\r\n *   strategy that would like to use Uniswap V3 for swaps. It hold all needed\r\n *   logic to perform both exact input and exact output swaps.\r\n *\r\n *   The global address variables default to the ETH mainnet addresses but\r\n *   remain settable by the inheriting contract to allow for customization\r\n *   based on needs or chain its used on.\r\n *\r\n *   The only variables that are required to be set are the specific fees\r\n *   for each token pair. The inheriting contract can use the {_setUniFees}\r\n *   function to easily set this for any token pairs needed.\r\n */\r\ncontract UniswapV3Swapper {\r\n    // Optional Variable to be set to not sell dust.\r\n    uint256 public minAmountToSell;\r\n    // Defaults to WETH on mainnet.\r\n    address public base = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // Defaults to Uniswap V3 router on mainnet.\r\n    address public router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\n    // Fees for the Uni V3 pools. Each fee should get set each way in\r\n    // the mapping so no matter the direction the correct fee will get\r\n    // returned for any two tokens.\r\n    mapping(address => mapping(address => uint24)) public uniFees;\r\n\r\n    /**\r\n     * @dev All fess will default to 0 on creation. A strategist will need\r\n     * To set the mapping for the tokens expected to swap. This function\r\n     * is to help set the mapping. It can be called internally during\r\n     * initialization, through permissioned functions etc.\r\n     */\r\n    function _setUniFees(\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee\r\n    ) internal {\r\n        uniFees[_token0][_token1] = _fee;\r\n        uniFees[_token1][_token0] = _fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Used to swap a specific amount of `_from` to `_to`.\r\n     * This will check and handle all allowances as well as not swapping\r\n     * unless `_amountIn` is greater than the set `_minAmountOut`\r\n     *\r\n     * If one of the tokens matches with the `base` token it will do only\r\n     * one jump, otherwise will do two jumps.\r\n     *\r\n     * The corresponding uniFees for each token pair will need to be set\r\n     * other wise this function will revert.\r\n     *\r\n     * @param _from The token we are swapping from.\r\n     * @param _to The token we are swapping to.\r\n     * @param _amountIn The amount of `_from` we will swap.\r\n     * @param _minAmountOut The min of `_to` to get out.\r\n     * @return _amountOut The actual amount of `_to` that was swapped to\r\n     */\r\n    function _swapFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _minAmountOut\r\n    ) internal returns (uint256 _amountOut) {\r\n        if (_amountIn > minAmountToSell) {\r\n            _checkAllowance(router, _from, _amountIn);\r\n            if (_from == base || _to == base) {\r\n                ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n                    .ExactInputSingleParams(\r\n                        _from, // tokenIn\r\n                        _to, // tokenOut\r\n                        uniFees[_from][_to], // from-to fee\r\n                        address(this), // recipient\r\n                        block.timestamp, // deadline\r\n                        _amountIn, // amountIn\r\n                        _minAmountOut, // amountOut\r\n                        0 // sqrtPriceLimitX96\r\n                    );\r\n\r\n                _amountOut = ISwapRouter(router).exactInputSingle(params);\r\n            } else {\r\n                bytes memory path = abi.encodePacked(\r\n                    _from, // tokenIn\r\n                    uniFees[_from][base], // from-base fee\r\n                    base, // base token\r\n                    uniFees[base][_to], // base-to fee\r\n                    _to // tokenOut\r\n                );\r\n\r\n                _amountOut = ISwapRouter(router).exactInput(\r\n                    ISwapRouter.ExactInputParams(\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp,\r\n                        _amountIn,\r\n                        _minAmountOut\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Used to swap a specific amount of `_to` from `_from` unless\r\n     * it takes more than `_maxAmountFrom`.\r\n     *\r\n     * This will check and handle all allowances as well as not swapping\r\n     * unless `_maxAmountFrom` is greater than the set `minAmountToSell`\r\n     *\r\n     * If one of the tokens matches with the `base` token it will do only\r\n     * one jump, otherwise will do two jumps.\r\n     *\r\n     * The corresponding uniFees for each token pair will need to be set\r\n     * other wise this function will revert.\r\n     *\r\n     * @param _from The token we are swapping from.\r\n     * @param _to The token we are swapping to.\r\n     * @param _amountTo The amount of `_to` we need out.\r\n     * @param _maxAmountFrom The max of `_from` we will swap.\r\n     * @return _amountIn The actual amount of `_from` swapped.\r\n     */\r\n    function _swapTo(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountTo,\r\n        uint256 _maxAmountFrom\r\n    ) internal returns (uint256 _amountIn) {\r\n        if (_maxAmountFrom > minAmountToSell) {\r\n            _checkAllowance(router, _from, _maxAmountFrom);\r\n            if (_from == base || _to == base) {\r\n                ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\r\n                    .ExactOutputSingleParams(\r\n                        _from, // tokenIn\r\n                        _to, // tokenOut\r\n                        uniFees[_from][_to], // from-to fee\r\n                        address(this), // recipient\r\n                        block.timestamp, // deadline\r\n                        _amountTo, // amountOut\r\n                        _maxAmountFrom, // maxAmountIn\r\n                        0 // sqrtPriceLimitX96\r\n                    );\r\n\r\n                _amountIn = ISwapRouter(router).exactOutputSingle(params);\r\n            } else {\r\n                bytes memory path = abi.encodePacked(\r\n                    _to,\r\n                    uniFees[base][_to], // base-to fee\r\n                    base,\r\n                    uniFees[_from][base], // from-base fee\r\n                    _from\r\n                );\r\n\r\n                _amountIn = ISwapRouter(router).exactOutput(\r\n                    ISwapRouter.ExactOutputParams(\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp,\r\n                        _amountTo, // How much we want out\r\n                        _maxAmountFrom\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal safe function to make sure the contract you want to\r\n     * interact with has enough allowance to pull the desired tokens.\r\n     *\r\n     * @param _contract The address of the contract that will move the token.\r\n     * @param _token The ERC-20 token that will be getting spent.\r\n     * @param _amount The amount of `_token` to be spent.\r\n     */\r\n    function _checkAllowance(\r\n        address _contract,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (ERC20(_token).allowance(address(this), _contract) < _amount) {\r\n            ERC20(_token).approve(_contract, 0);\r\n            ERC20(_token).approve(_contract, _amount);\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILPStaking {\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        ERC20 lpToken;\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accStargatePerShare;\r\n    }\r\n\r\n    function poolInfo(uint256 _index) external view returns (PoolInfo memory);\r\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\r\n    function stargate() external view returns (address);\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function massUpdatePools() external;\r\n    function updatePool(uint256 _pid) external;\r\n    function pendingStargate(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n}\r\n\r\ninterface IPool {\r\n    function poolId() external view returns (uint256);\r\n    function token() external view returns (address);\r\n    function totalLiquidity() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function deltaCredit() external view returns (uint256);\r\n    function convertRate() external view returns (uint256);\r\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256);\r\n}\r\n\r\ninterface IStargateRouter {\r\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\r\n\r\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\r\n}\r\n\r\n/**\r\n * @title StargateStaker\r\n * @author 0xValJohn\r\n * @notice A Yearn V3 strategy that deposits native asset and stakes LP tokens in the Stargate protocol.\r\n */\r\n\r\ncontract StargateStaker is BaseStrategy, UniswapV3Swapper {\r\n    using SafeERC20 for ERC20;\r\n\r\n    ILPStaking public immutable lpStaker;\r\n    IStargateRouter public immutable stargateRouter;\r\n    IPool public immutable pool;\r\n\r\n    uint256 public immutable stakingID; // @dev pool id for staking\r\n    uint256 internal immutable convertRate;\r\n    uint16 public immutable poolId;\r\n\r\n    address internal constant _router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\n    ERC20 public immutable reward;\r\n    ERC20 public immutable lpToken;\r\n\r\n    event MinToSellUpdated(uint256 newMinAmountToSell);\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name,\r\n        address _lpStaker,\r\n        address _stargateRouter,\r\n        uint16 _stakingID,\r\n        address _base\r\n    ) BaseStrategy(_asset, _name) {\r\n        lpStaker = ILPStaking(_lpStaker);\r\n        stargateRouter = IStargateRouter(_stargateRouter);\r\n        stakingID = _stakingID;\r\n\r\n        lpToken = lpStaker.poolInfo(_stakingID).lpToken;\r\n        require(address(lpToken) != address(0), \"Invalid lpToken\");\r\n\r\n        pool = IPool(address(lpToken));\r\n        require(pool.token() == _asset, \"Invalid asset\");\r\n\r\n        poolId = uint16(pool.poolId());\r\n        reward = ERC20(lpStaker.stargate());\r\n        convertRate = pool.convertRate();\r\n        base = _base;\r\n\r\n        lpToken.safeApprove(address(lpStaker), type(uint256).max);\r\n        ERC20(_asset).safeApprove(address(stargateRouter), type(uint256).max);\r\n    }\r\n\r\n    function _deployFunds(uint256 _amount) internal override {\r\n        stargateRouter.addLiquidity(poolId, _amount, address(this));\r\n        _stakeLP(lpToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function _freeFunds(uint256 _amount) internal override {\r\n        uint256 _lpAmount = _ldToLp(_amount);\r\n        lpStaker.withdraw(stakingID, _lpAmount); // @dev unstake\r\n        stargateRouter.instantRedeemLocal(poolId, _lpAmount, address(this)); // @dev withdraw\r\n    }\r\n\r\n    function _harvestAndReport() internal override returns (uint256 _totalAssets) {\r\n        if (!TokenizedStrategy.isShutdown()) {\r\n            _claimAndSellRewards();\r\n            uint256 looseAsset = ERC20(asset).balanceOf(address(this));\r\n            if (looseAsset > 0) {\r\n                _deployFunds(looseAsset);\r\n            }\r\n        }\r\n        uint256 _totalLPTokenBalance =\r\n            lpToken.balanceOf(address(this)) + lpStaker.userInfo(stakingID, address(this)).amount;\r\n        _totalAssets = _lpToLd(_totalLPTokenBalance) + ERC20(asset).balanceOf(address(this));\r\n    }\r\n\r\n    function _claimAndSellRewards() internal {\r\n        _stakeLP(0); // @dev claim rewards\r\n        uint256 _rewardBalance = reward.balanceOf(address(this));\r\n        _swapFrom(address(reward), address(asset), _rewardBalance, 0);\r\n    }\r\n\r\n    function _emergencyWithdraw(uint256 _amount) internal override {\r\n        _freeFunds(Math.min(_ldToLp(_amount), pool.deltaCredit()));\r\n    }\r\n\r\n    function _ldToLp(uint256 _amountLd) internal view returns (uint256) {\r\n        return _amountLd * pool.totalSupply() / pool.totalLiquidity() / convertRate;\r\n    }\r\n\r\n    function _lpToLd(uint256 _amountLp) internal view returns (uint256) {\r\n        return _amountLp * pool.totalLiquidity() * convertRate / pool.totalSupply();\r\n    }\r\n\r\n    function _stakeLP(uint256 _amountToStake) internal {\r\n        lpStaker.deposit(stakingID, _amountToStake);\r\n    }\r\n\r\n    function availableWithdrawLimit(address _owner) public view override returns (uint256) {\r\n        return pool.deltaCredit() + TokenizedStrategy.totalIdle();\r\n    }\r\n\r\n    function setUniFees(address _token0, address _token1, uint24 _fee) external onlyManagement {\r\n        _setUniFees(_token0, _token1, _fee);\r\n    }\r\n\r\n    function setMinAmountToSell(uint256 _minAmountToSell) external onlyManagement {\r\n        minAmountToSell = _minAmountToSell;\r\n        emit MinToSellUpdated(_minAmountToSell);\r\n    }\r\n\r\n}\r\n\r\ninterface IBaseStrategy {\r\n    function tokenizedStrategyAddress() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLE FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function availableDepositLimit(\r\n        address _owner\r\n    ) external view returns (uint256);\r\n\r\n    function availableWithdrawLimit(\r\n        address _owner\r\n    ) external view returns (uint256);\r\n\r\n    function deployFunds(uint256 _assets) external;\r\n\r\n    function freeFunds(uint256 _amount) external;\r\n\r\n    function harvestAndReport() external returns (uint256);\r\n\r\n    function tendThis(uint256 _totalIdle) external;\r\n\r\n    function shutdownWithdraw(uint256 _amount) external;\r\n\r\n    function tendTrigger() external view returns (bool, bytes memory);\r\n}\r\n\r\ninterface IStrategy is IBaseStrategy, ITokenizedStrategy {}\r\n\r\ncontract StargateStakerFactory {\r\n    event NewStargateStaker(address indexed strategy, address indexed asset);\r\n\r\n    address public management;\r\n    address public perfomanceFeeRecipient;\r\n    address public keeper;\r\n\r\n    constructor(\r\n        address _management,\r\n        address _peformanceFeeRecipient,\r\n        address _keeper\r\n    ) {\r\n        management = _management;\r\n        perfomanceFeeRecipient = _peformanceFeeRecipient;\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function newStargateStaker(\r\n        address _asset,\r\n        string memory _name,\r\n        address _lpStaker,\r\n        address _stargateRouter,\r\n        uint16 _stakingID,\r\n        address _base\r\n    ) external returns (address) {\r\n        IStrategy newStrategy = IStrategy(\r\n            address(new StargateStaker(_asset, _name, _lpStaker, _stargateRouter, _stakingID, _base))\r\n        );\r\n\r\n        newStrategy.setPerformanceFeeRecipient(perfomanceFeeRecipient);\r\n        newStrategy.setKeeper(keeper);\r\n        newStrategy.setPendingManagement(management);\r\n\r\n        emit NewStargateStaker(address(newStrategy), _asset);\r\n        return address(newStrategy);\r\n    }\r\n\r\n    function setAddresses(\r\n        address _management,\r\n        address _perfomanceFeeRecipient,\r\n        address _keeper\r\n    ) external {\r\n        require(msg.sender == management, \"!management\");\r\n        management = _management;\r\n        perfomanceFeeRecipient = _perfomanceFeeRecipient;\r\n        keeper = _keeper;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peformanceFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NewStargateStaker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lpStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_stakingID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"}],\"name\":\"newStargateStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perfomanceFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_perfomanceFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StargateStakerFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000fb44352bcfe4c5a53a64dd0fad9a41184a1d6090000000000000000000000000fb44352bcfe4c5a53a64dd0fad9a41184a1d609000000000000000000000000d9e53c8b326fddcdbcf225d1f7be487e1f01bd0b", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7bc7d91a9d1cad616ac70f18f6c3972e05a45142fc2cf4334bb16d95658d65a5"}