{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'SafeMath: subtraction overflow');\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'SafeMath: division by zero');\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function mint(address reciever, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(\r\n        address tokenOwner\r\n    ) external view returns (uint256 balance);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721 {\r\n    function mint(address to, uint256 tokenId) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract CubixPackNFTDistribution {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public ownerAddress;\r\n    address public mangerAddress;\r\n\r\n    mapping(uint256 => uint256) public packDistribution;\r\n    mapping(uint256 => address) public alreadyPackBought;\r\n    mapping(uint256 => uint256) public packsNFTsMap;\r\n    mapping(uint256 => uint256) public packsPriceMap;\r\n    mapping(uint256 => uint256) public packBought;\r\n\r\n    ERC721 nft;\r\n    ERC20 usdt;\r\n    ERC20 cubixToken;\r\n\r\n    uint256 public totalNFTs = 0; // update with latest one\r\n    address[] public partners;\r\n    uint256[] public partnersPercentage;\r\n    uint256 public cubixTokenForOneUSDC = 200;\r\n    uint256 public decimalsValue = 10 ** 18;\r\n\r\n    event NFTMintEvent(\r\n        address indexed userAddress,\r\n        uint256 indexed nftId,\r\n        uint256 packId,\r\n        uint256 Time\r\n    );\r\n\r\n    event BuyPackEvent(\r\n        address indexed userAddress,\r\n        uint256 packId,\r\n        uint256 id,\r\n        uint256 Time\r\n    );\r\n\r\n    constructor(address _nftAddress) {\r\n        mangerAddress = msg.sender;\r\n        nft = ERC721(_nftAddress);\r\n        ownerAddress = payable(msg.sender); // update with existing one\r\n        setPartnerPercentage();\r\n        totalNFTs = nft.totalSupply();\r\n        setPacks();\r\n    }\r\n\r\n    function setPartnerPercentage() internal {\r\n        // partners starts\r\n        partners.push(address(0)); // owner address\r\n        partnersPercentage.push(90);\r\n\r\n        partners.push(address(0xE6601baa84f06657D10859c578986f934B6fFBf6));\r\n        partnersPercentage.push(2);\r\n\r\n        partners.push(address(0x87Fc196600Eb3dCc76d8bBf0Db8c56156E8E2396));\r\n        partnersPercentage.push(2);\r\n\r\n        partners.push(address(0x2c52Cb271244Bfb480ecED76c84D712FdE5aC957));\r\n        partnersPercentage.push(2);\r\n\r\n        partners.push(address(0x066f129d4168e43121136649E5dbf8EEfEf2eCe9));\r\n        partnersPercentage.push(2);\r\n\r\n        partners.push(address(0x3e8Ab1bbc3042041D6Cd32466928245bf1bfb316));\r\n        partnersPercentage.push(2);\r\n        // partners ends\r\n    }\r\n\r\n    function setPacks() internal {\r\n        packsNFTsMap[1] = 1;\r\n        packsPriceMap[1] = 1;\r\n        packsNFTsMap[2] = 6;\r\n        packsPriceMap[2] = 6;\r\n        packsNFTsMap[3] = 11;\r\n        packsPriceMap[3] = 11;\r\n        packsNFTsMap[4] = 25;\r\n        packsPriceMap[4] = 25;\r\n        packsNFTsMap[5] = 57;\r\n        packsPriceMap[5] = 57;\r\n        packsNFTsMap[6] = 153;\r\n        packsPriceMap[6] = 153;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, 'Only owner');\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            msg.sender == ownerAddress || msg.sender == mangerAddress,\r\n            'Only authorized'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounder() {\r\n        require(msg.sender == ownerAddress, 'Only onlyFounder');\r\n        _;\r\n    }\r\n\r\n    function buyPack(\r\n        uint256 _packId,\r\n        uint256 _id,\r\n        bool isUsdt,\r\n        address _address\r\n    ) external payable onlyAuthorized {\r\n        require(packsPriceMap[_packId] != 0, 'Pack not exist');\r\n        require(alreadyPackBought[_id] == address(0), 'Pack already bought');\r\n        ERC20 tokenToConsider = usdt;\r\n        if (!isUsdt) {\r\n            tokenToConsider = cubixToken;\r\n        }\r\n        // add logic to distribute nfts here\r\n        sendNFTs(_address, _packId);\r\n        packBought[_packId] = packBought[_packId].add(1);\r\n        alreadyPackBought[_id] = _address;\r\n        emit BuyPackEvent(_address, _packId, _id, block.timestamp);\r\n    }\r\n\r\n    function sendNFTs(address accountAddress, uint256 packId) internal {\r\n        uint256 counter = 1;\r\n        while (packsNFTsMap[packId] >= counter) {\r\n            minNFT(accountAddress, packId);\r\n            counter = counter.add(1);\r\n        }\r\n    }\r\n\r\n    function minNFT(address accountAddress, uint256 packId) internal {\r\n        totalNFTs = totalNFTs.add(1);\r\n        uint256 nftId = totalNFTs;\r\n        nft.mint(accountAddress, nftId);\r\n        emit NFTMintEvent(accountAddress, nftId, packId, block.timestamp);\r\n    }\r\n\r\n    function setUSDTContractAddress(\r\n        address usdtAddress\r\n    ) external onlyAuthorized {\r\n        usdt = ERC20(usdtAddress);\r\n    }\r\n\r\n    function setCubixTokenContractAddress(\r\n        address cubixTokenAddress\r\n    ) external onlyAuthorized {\r\n        cubixToken = ERC20(cubixTokenAddress);\r\n    }\r\n\r\n    function setNFTContractAddress(address nftAddress) external onlyAuthorized {\r\n        nft = ERC721(nftAddress);\r\n    }\r\n\r\n    function alreadyMintedNFT(uint256 _mintedNFT) external onlyAuthorized {\r\n        totalNFTs = _mintedNFT;\r\n    }\r\n\r\n    function changeOwnerAddress(address _ownerAddress) external onlyOwner {\r\n        ownerAddress = payable(_ownerAddress);\r\n    }\r\n\r\n    function addPartnerWithPercentage(\r\n        address _partnerAddress,\r\n        uint256 _percentage\r\n    ) external onlyAuthorized {\r\n        partners.push(_partnerAddress);\r\n        partnersPercentage.push(_percentage);\r\n    }\r\n\r\n    function changePartnerWithPercentage(\r\n        uint256 id,\r\n        address _partnerAddress,\r\n        uint256 _percentage\r\n    ) external onlyAuthorized {\r\n        partners[id] = _partnerAddress;\r\n        partnersPercentage[id] = _percentage;\r\n    }\r\n\r\n    function addNewPack(\r\n        uint256 id,\r\n        uint256 _price,\r\n        uint256 _nfts\r\n    ) external onlyAuthorized {\r\n        require(packsPriceMap[id] == 0, 'Pack already exist with id');\r\n        packsNFTsMap[id] = _nfts;\r\n        packsPriceMap[id] = _price;\r\n    }\r\n\r\n    function updatePack(\r\n        uint256 id,\r\n        uint256 _price,\r\n        uint256 _nfts\r\n    ) external onlyAuthorized {\r\n        require(packsPriceMap[id] != 0, 'Pack not exist');\r\n        packsNFTsMap[id] = _nfts;\r\n        packsPriceMap[id] = _price;\r\n    }\r\n\r\n    function updateCubixPrice(\r\n        uint256 _cubixTokenForOneUSDC,\r\n        uint256[] calldata packIds\r\n    ) external onlyAuthorized {\r\n        cubixTokenForOneUSDC = _cubixTokenForOneUSDC;\r\n        for (uint256 index = 0; index < packIds.length; index++) {\r\n            packsPriceMap[packIds[index]] =\r\n                packsPriceMap[packIds[index]].mul(cubixTokenForOneUSDC) *\r\n                decimalsValue;\r\n        }\r\n    }\r\n\r\n    function transferAmountToPartners(\r\n        uint256 _amount,\r\n        uint256 _id,\r\n        bool isUSDT\r\n    ) external onlyAuthorized {\r\n        require(partners[_id] != address(0), 'Partner not exist');\r\n        if (isUSDT) {\r\n            usdt.transfer(partners[_id], _amount);\r\n        } else {\r\n            cubixToken.transfer(partners[_id], _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"BuyPackEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"NFTMintEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nfts\",\"type\":\"uint256\"}],\"name\":\"addNewPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"addPartnerWithPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintedNFT\",\"type\":\"uint256\"}],\"name\":\"alreadyMintedNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyPackBought\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUsdt\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"buyPack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"changePartnerWithPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cubixTokenForOneUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mangerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packsNFTsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packsPriceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnersPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cubixTokenAddress\",\"type\":\"address\"}],\"name\":\"setCubixTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"}],\"name\":\"setUSDTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUSDT\",\"type\":\"bool\"}],\"name\":\"transferAmountToPartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubixTokenForOneUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"packIds\",\"type\":\"uint256[]\"}],\"name\":\"updateCubixPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nfts\",\"type\":\"uint256\"}],\"name\":\"updatePack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CubixPackNFTDistribution", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006da8a67989cbecbc971d574522081df25416b057", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22d86c0e92aceb799ef6fbd0019d25511ff235c504f935db95e1da968801df6d"}