{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2021-10-18\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract IERC20Token is IERC20 {\r\n    function upgrade(uint256 value) public virtual;\r\n}\r\n\r\ninterface IHermesContract {\r\n    enum Status { Active, Paused, Punishment, Closed }\r\n    function initialize(address _token, address _operator, uint16 _hermesFee, uint256 _minStake, uint256 _maxStake, address payable _routerAddress) external;\r\n    function openChannel(address _party, uint256 _amountToLend) external;\r\n    function getOperator() external view returns (address);\r\n    function getStake() external view returns (uint256);\r\n    function getStatus() external view returns (Status);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender || _owner == address(0x0), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract FundsRecovery is Ownable, ReentrancyGuard {\r\n    address payable internal fundsDestination;\r\n    IERC20Token public token;\r\n\r\n    event DestinationChanged(address indexed previousDestination, address indexed newDestination);\r\n\r\n    /**\r\n     * Setting new destination of funds recovery.\r\n     */\r\n    function setFundsDestination(address payable _newDestination) public virtual onlyOwner {\r\n        require(_newDestination != address(0));\r\n        emit DestinationChanged(fundsDestination, _newDestination);\r\n        fundsDestination = _newDestination;\r\n    }\r\n\r\n    /**\r\n     * Getting funds destination address.\r\n     */\r\n    function getFundsDestination() public view returns (address) {\r\n        return fundsDestination;\r\n    }\r\n\r\n    /**\r\n     * Possibility to recover funds in case they were sent to this address before smart contract deployment\r\n     */\r\n    function claimEthers() public nonReentrant {\r\n        require(fundsDestination != address(0));\r\n        fundsDestination.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n       Transfers selected tokens into owner address.\r\n    */\r\n    function claimTokens(address _token) public nonReentrant {\r\n        require(fundsDestination != address(0));\r\n        require(_token != address(token), \"native token funds can't be recovered\");\r\n        uint256 _amount = IERC20Token(_token).balanceOf(address(this));\r\n        IERC20Token(_token).transfer(fundsDestination, _amount);\r\n    }\r\n}\r\n\r\ncontract Utils {\r\n    function getChainID() internal view returns (uint256) {\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n        return chainID;\r\n    }\r\n\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function round(uint a, uint m) internal pure returns (uint ) {\r\n        return ((a + m - 1) / m) * m;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface Channel {\r\n    function initialize(address _token, address _dex, address _identityHash, address _hermesId, uint256 _fee) external;\r\n}\r\n\r\ncontract Registry is FundsRecovery, Utils {\r\n    using ECDSA for bytes32;\r\n\r\n    uint256 public lastNonce;\r\n    address payable public dex;     // Any uniswap v2 compatible DEX router address\r\n    uint256 public minimalHermesStake;\r\n    Registry public parentRegistry; // If there is parent registry, we will check for\r\n\r\n    struct Implementation {\r\n        address channelImplAddress;\r\n        address hermesImplAddress;\r\n    }\r\n    Implementation[] internal implementations;\r\n\r\n    struct Hermes {\r\n        address operator;   // hermes operator who will sign promises\r\n        uint256 implVer;    // version of hermes implementation smart contract\r\n        function() external view returns(uint256) stake;\r\n        bytes url;          // hermes service URL\r\n    }\r\n    mapping(address => Hermes) private hermeses;\r\n\r\n    mapping(address => address) private identities;   // key: identity, value: beneficiary wallet address\r\n\r\n    event RegisteredIdentity(address indexed identity, address beneficiary);\r\n    event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur);\r\n    event HermesURLUpdated(address indexed hermesId, bytes newURL);\r\n    event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress);\r\n    event BeneficiaryChanged(address indexed identity, address newBeneficiary);\r\n    event MinimalHermesStakeChanged(uint256 newMinimalStake);\r\n\r\n    // Reject any ethers sent to this smart-contract\r\n    receive() external payable {\r\n        revert(\"Registry: Rejecting tx with ethers sent\");\r\n    }\r\n\r\n    // We're using `initialize` instead of `constructor` to ensure easy way to deploy Registry into\r\n    // deterministic address on any EVM compatible chain. Registry should be first be deployed using\r\n    // `deployRegistry` scripts and then initialized with wanted token and implementations.\r\n    function initialize(address _tokenAddress, address payable _dexAddress, uint256 _minimalHermesStake, address _channelImplementation, address _hermesImplementation, address payable _parentRegistry) public onlyOwner {\r\n        require(!isInitialized(), \"Registry: is already initialized\");\r\n\r\n        minimalHermesStake = _minimalHermesStake;\r\n\r\n        require(_tokenAddress != address(0));\r\n        token = IERC20Token(_tokenAddress);\r\n\r\n        require(_dexAddress != address(0));\r\n        dex = _dexAddress;\r\n\r\n        // Set initial channel implementations\r\n        setImplementations(_channelImplementation, _hermesImplementation);\r\n\r\n        // We set initial owner to be sure\r\n        transferOwnership(msg.sender);\r\n\r\n        // Set parent registry, if `0x0` then this is root registry\r\n        parentRegistry = Registry(_parentRegistry);\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return address(token) != address(0);\r\n    }\r\n\r\n    // Register provider and open his channel with given hermes\r\n    // _stakeAmount - it's amount of tokens staked into hermes to guarantee incomming channel's balance.\r\n    // _beneficiary - payout address during settlements in hermes channel, if provided 0x0 then will be set to consumer channel address.\r\n    function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes memory _signature) public {\r\n        require(isActiveHermes(_hermesId), \"Registry: provided hermes have to be active\");\r\n\r\n        // Check if given signature is valid\r\n        address _identity = keccak256(abi.encodePacked(getChainID(), address(this), _hermesId, _stakeAmount, _transactorFee, _beneficiary)).recover(_signature);\r\n        require(_identity != address(0), \"Registry: wrong identity signature\");\r\n\r\n        // Tokens amount to get from channel to cover tx fee and provider's stake\r\n        uint256 _totalFee = _stakeAmount + _transactorFee;\r\n        require(_totalFee <= token.balanceOf(getChannelAddress(_identity, _hermesId)), \"Registry: not enought funds in channel to cover fees\");\r\n\r\n        // Open consumer channel\r\n        _openChannel(_identity, _hermesId, _beneficiary, _totalFee);\r\n\r\n        // If stake is provided we additionally are opening channel with hermes (a.k.a provider channel)\r\n        if (_stakeAmount > 0) {\r\n            IHermesContract(_hermesId).openChannel(_identity, _stakeAmount);\r\n        }\r\n\r\n        // Pay fee for transaction maker\r\n        if (_transactorFee > 0) {\r\n            token.transfer(msg.sender, _transactorFee);\r\n        }\r\n    }\r\n\r\n    // Deploys consumer channel and sets beneficiary as newly created channel address\r\n    function openConsumerChannel(address _hermesId, uint256 _transactorFee, bytes memory _signature) public {\r\n        require(isActiveHermes(_hermesId), \"Registry: provided hermes have to be active\");\r\n\r\n        // Check if given signature is valid\r\n        address _identity = keccak256(abi.encodePacked(getChainID(), address(this), _hermesId, _transactorFee)).recover(_signature);\r\n        require(_identity != address(0), \"Registry: wrong channel openinig signature\");\r\n\r\n        require(_transactorFee <= token.balanceOf(getChannelAddress(_identity, _hermesId)), \"Registry: not enought funds in channel to cover fees\");\r\n\r\n        _openChannel(_identity, _hermesId, address(0), _transactorFee);\r\n    }\r\n\r\n    // Allows to securely deploy channel's smart contract without consumer signature\r\n    function openConsumerChannel(address _identity, address _hermesId) public {\r\n        require(isActiveHermes(_hermesId), \"Registry: provided hermes have to be active\");\r\n        require(!isChannelOpened(_identity, _hermesId), \"Registry: such consumer channel is already opened\");\r\n\r\n        _openChannel(_identity, _hermesId, address(0), 0);\r\n    }\r\n\r\n    // Deploy payment channel for given consumer identity\r\n    // We're using minimal proxy (EIP1167) to save on gas cost and blockchain space.\r\n    function _openChannel(address _identity, address _hermesId, address _beneficiary, uint256 _fee) internal returns (address) {\r\n        bytes32 _salt = keccak256(abi.encodePacked(_identity, _hermesId));\r\n        bytes memory _code = getProxyCode(getChannelImplementation(hermeses[_hermesId].implVer));\r\n        Channel _channel = Channel(deployMiniProxy(uint256(_salt), _code));\r\n        _channel.initialize(address(token), dex, _identity, _hermesId, _fee);\r\n\r\n        emit ConsumerChannelCreated(_identity, _hermesId, address(_channel));\r\n\r\n        // If beneficiary was not provided, then we're going to use consumer channel for that\r\n        if (_beneficiary == address(0)) {\r\n            _beneficiary = address(_channel);\r\n        }\r\n\r\n        // Mark identity as registered (only during first channel opening)\r\n        if (!isRegistered(_identity)) {\r\n            identities[_identity] = _beneficiary;\r\n            emit RegisteredIdentity(_identity, _beneficiary);\r\n        }\r\n\r\n        return address(_channel);\r\n    }\r\n\r\n    function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes memory _url) public {\r\n        require(isInitialized(), \"Registry: only initialized registry can register hermeses\");\r\n        require(_hermesOperator != address(0), \"Registry: hermes operator can't be zero address\");\r\n        require(_hermesStake >= minimalHermesStake, \"Registry: hermes have to stake at least minimal stake amount\");\r\n\r\n        address _hermesId = getHermesAddress(_hermesOperator);\r\n        require(!isHermes(_hermesId), \"Registry: hermes already registered\");\r\n\r\n        // Deploy hermes contract (mini proxy which is pointing to implementation)\r\n        IHermesContract _hermes = IHermesContract(deployMiniProxy(uint256(uint160(_hermesOperator)), getProxyCode(getHermesImplementation())));\r\n\r\n        // Transfer stake into hermes smart contract\r\n        token.transferFrom(msg.sender, address(_hermes), _hermesStake);\r\n\r\n        // Initialise hermes\r\n        _hermes.initialize(address(token), _hermesOperator, _hermesFee, _minChannelStake, _maxChannelStake, dex);\r\n\r\n        // Save info about newly created hermes\r\n        hermeses[_hermesId] = Hermes(_hermesOperator, getLastImplVer(), _hermes.getStake, _url);\r\n\r\n        // Approve hermes contract to `transferFrom` registry (used during hermes channel openings)\r\n        token.approve(_hermesId, type(uint256).max);\r\n\r\n        emit RegisteredHermes(_hermesId, _hermesOperator, _url);\r\n    }\r\n\r\n    function getChannelAddress(address _identity, address _hermesId) public view returns (address) {\r\n        bytes32 _code = keccak256(getProxyCode(getChannelImplementation(hermeses[_hermesId].implVer)));\r\n        bytes32 _salt = keccak256(abi.encodePacked(_identity, _hermesId));\r\n        return getCreate2Address(_salt, _code);\r\n    }\r\n\r\n    function getHermes(address _hermesId) public view returns (Hermes memory) {\r\n        return isHermes(_hermesId) || !hasParentRegistry() ? hermeses[_hermesId] : parentRegistry.getHermes(_hermesId);\r\n    }\r\n\r\n    function getHermesAddress(address _hermesOperator) public view returns (address) {\r\n        bytes32 _code = keccak256(getProxyCode(getHermesImplementation()));\r\n        return getCreate2Address(bytes32(uint256(uint160(_hermesOperator))), _code);\r\n    }\r\n\r\n    function getHermesAddress(address _hermesOperator, uint256 _implVer) public view returns (address) {\r\n        bytes32 _code = keccak256(getProxyCode(getHermesImplementation(_implVer)));\r\n        return getCreate2Address(bytes32(uint256(uint160(_hermesOperator))), _code);\r\n    }\r\n\r\n    function getHermesURL(address _hermesId) public view returns (bytes memory) {\r\n        return hermeses[_hermesId].url;\r\n    }\r\n\r\n    function updateHermesURL(address _hermesId, bytes memory _url, bytes memory _signature) public {\r\n        require(isActiveHermes(_hermesId), \"Registry: provided hermes has to be active\");\r\n\r\n        // Check if given signature is valid\r\n        address _operator = keccak256(abi.encodePacked(address(this), _hermesId, _url, lastNonce++)).recover(_signature);\r\n        require(_operator == hermeses[_hermesId].operator, \"wrong signature\");\r\n\r\n        // Update URL\r\n        hermeses[_hermesId].url = _url;\r\n\r\n        emit HermesURLUpdated(_hermesId, _url);\r\n    }\r\n\r\n    // ------------ UTILS ------------\r\n    function getCreate2Address(bytes32 _salt, bytes32 _code) internal view returns (address) {\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(\r\n            bytes1(0xff),\r\n            address(this),\r\n            bytes32(_salt),\r\n            bytes32(_code)\r\n        )))));\r\n    }\r\n\r\n    function getProxyCode(address _implementation) public pure returns (bytes memory) {\r\n        // `_code` is EIP 1167 - Minimal Proxy Contract\r\n        // more information: https://eips.ethereum.org/EIPS/eip-1167\r\n        bytes memory _code = hex\"3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\";\r\n\r\n        bytes20 _targetBytes = bytes20(_implementation);\r\n        for (uint8 i = 0; i < 20; i++) {\r\n            _code[20 + i] = _targetBytes[i];\r\n        }\r\n\r\n        return _code;\r\n    }\r\n\r\n    function deployMiniProxy(uint256 _salt, bytes memory _code) internal returns (address payable) {\r\n        address payable _addr;\r\n\r\n        assembly {\r\n            _addr := create2(0, add(_code, 0x20), mload(_code), _salt)\r\n            if iszero(extcodesize(_addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        return _addr;\r\n    }\r\n\r\n    function getBeneficiary(address _identity) public view returns (address) {\r\n        if (hasParentRegistry())\r\n            return parentRegistry.getBeneficiary(_identity);\r\n\r\n        return identities[_identity];\r\n    }\r\n\r\n    function setBeneficiary(address _identity, address _newBeneficiary, bytes memory _signature) public {\r\n        require(_newBeneficiary != address(0), \"Registry: beneficiary can't be zero address\");\r\n\r\n        // Always set beneficiary into root registry\r\n        if (hasParentRegistry()) {\r\n            parentRegistry.setBeneficiary(_identity, _newBeneficiary, _signature);\r\n        } else {\r\n            lastNonce = lastNonce + 1;\r\n\r\n            // In signatures we should always use root registry (for backward compatibility)\r\n            address _rootRegistry = hasParentRegistry() ? address(parentRegistry) : address(this);\r\n            address _signer = keccak256(abi.encodePacked(getChainID(), _rootRegistry, _identity, _newBeneficiary, lastNonce)).recover(_signature);\r\n            require(_signer == _identity, \"Registry: have to be signed by identity owner\");\r\n\r\n            identities[_identity] = _newBeneficiary;\r\n\r\n            emit BeneficiaryChanged(_identity, _newBeneficiary);\r\n        }\r\n    }\r\n\r\n    function setMinimalHermesStake(uint256 _newMinimalStake) public onlyOwner {\r\n        require(isInitialized(), \"Registry: only initialized registry can set new minimal hermes stake\");\r\n        minimalHermesStake = _newMinimalStake;\r\n        emit MinimalHermesStakeChanged(_newMinimalStake);\r\n    }\r\n\r\n    // -------- UTILS TO WORK WITH CHANNEL AND HERMES IMPLEMENTATIONS ---------\r\n\r\n    function getChannelImplementation() public view returns (address) {\r\n        return implementations[getLastImplVer()].channelImplAddress;\r\n    }\r\n\r\n    function getChannelImplementation(uint256 _implVer) public view returns (address) {\r\n        return implementations[_implVer].channelImplAddress;\r\n    }\r\n\r\n    function getHermesImplementation() public view returns (address) {\r\n        return implementations[getLastImplVer()].hermesImplAddress;\r\n    }\r\n\r\n    function getHermesImplementation(uint256 _implVer) public view returns (address) {\r\n        return implementations[_implVer].hermesImplAddress;\r\n    }\r\n\r\n    function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) public onlyOwner {\r\n        require(isInitialized(), \"Registry: only initialized registry can set new implementations\");\r\n        require(isSmartContract(_newChannelImplAddress) && isSmartContract(_newHermesImplAddress), \"Registry: implementations have to be smart contracts\");\r\n        implementations.push(Implementation(_newChannelImplAddress, _newHermesImplAddress));\r\n    }\r\n\r\n    // Version of latest hermes and channel implementations\r\n    function getLastImplVer() public view returns (uint256) {\r\n        return implementations.length-1;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function isSmartContract(address _addr) internal view returns (bool) {\r\n        uint _codeLength;\r\n\r\n        assembly {\r\n            _codeLength := extcodesize(_addr)\r\n        }\r\n\r\n        return _codeLength != 0;\r\n    }\r\n\r\n    // If `parentRegistry` is not set, this is root registry and should return false\r\n    function hasParentRegistry() public view returns (bool) {\r\n        return address(parentRegistry) != address(0);\r\n    }\r\n\r\n    function isRegistered(address _identity) public view returns (bool) {\r\n        if (hasParentRegistry())\r\n            return parentRegistry.isRegistered(_identity);\r\n\r\n        // If we know its beneficiary address it is registered identity\r\n        return identities[_identity] != address(0);\r\n    }\r\n\r\n    function isHermes(address _hermesId) public view returns (bool) {\r\n        // To check if it actually properly created hermes address, we need to check if he has operator\r\n        // and if with that operator we'll get proper hermes address which has code deployed there.\r\n        address _hermesOperator = hermeses[_hermesId].operator;\r\n        uint256 _implVer = hermeses[_hermesId].implVer;\r\n        address _addr = getHermesAddress(_hermesOperator, _implVer);\r\n        if (_addr != _hermesId)\r\n            return false; // hermesId should be same as generated address\r\n\r\n        return isSmartContract(_addr) || parentRegistry.isHermes(_hermesId);\r\n    }\r\n\r\n    function isActiveHermes(address _hermesId) internal view returns (bool) {\r\n        // First we have to ensure that given address is registered hermes and only then check its status\r\n        require(isHermes(_hermesId), \"Registry: hermes have to be registered\");\r\n\r\n        IHermesContract.Status status = IHermesContract(_hermesId).getStatus();\r\n        return status == IHermesContract.Status.Active;\r\n    }\r\n\r\n    function isChannelOpened(address _identity, address _hermesId) public view returns (bool) {\r\n        return isSmartContract(getChannelAddress(_identity, _hermesId)) || isSmartContract(parentRegistry.getChannelAddress(_identity, _hermesId));\r\n    }\r\n\r\n    function transferCollectedFeeTo(address _beneficiary) public onlyOwner{\r\n        uint256 _collectedFee = token.balanceOf(address(this));\r\n        require(_collectedFee > 0, \"collected fee cannot be less than zero\");\r\n        token.transfer(_beneficiary, _collectedFee);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"}],\"name\":\"ConsumerChannelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newURL\",\"type\":\"bytes\"}],\"name\":\"HermesURLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimalStake\",\"type\":\"uint256\"}],\"name\":\"MinimalHermesStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hermesOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ur\",\"type\":\"bytes\"}],\"name\":\"RegisteredHermes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RegisteredIdentity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getChannelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getChannelImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChannelImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getHermes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"implVer\",\"type\":\"uint256\"},{\"internalType\":\"function () view external returns (uint256)\",\"name\":\"stake\",\"type\":\"function\"},{\"internalType\":\"bytes\",\"name\":\"url\",\"type\":\"bytes\"}],\"internalType\":\"struct Registry.Hermes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getHermesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"}],\"name\":\"getHermesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getHermesImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermesImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getHermesURL\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastImplVer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"getProxyCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasParentRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimalHermesStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_channelImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesImplementation\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_parentRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"isChannelOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"isHermes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalHermesStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"openConsumerChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"openConsumerChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentRegistry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hermesStake\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_hermesFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minChannelStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxChannelStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_url\",\"type\":\"bytes\"}],\"name\":\"registerHermes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newChannelImplAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newHermesImplAddress\",\"type\":\"address\"}],\"name\":\"setImplementations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimalStake\",\"type\":\"uint256\"}],\"name\":\"setMinimalHermesStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"transferCollectedFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_url\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateHermesURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Registry", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36219ab918a429fdce341f2929073e190befbb7c069166e8b963bcc654c35c76"}