{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Impl/BhavishSDK/NativeSDK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport { AbstractBhavishSDK } from \\\"./AbstractBhavishSDK.sol\\\";\\nimport { IBhavishNativeSDK, IBhavishPredictionNative } from \\\"../../Interface/IBhavishNativeSDK.sol\\\";\\nimport { IBhavishPrediction } from \\\"../../Interface/IBhavishPrediction.sol\\\";\\nimport { BhavishSwap } from \\\"../../Integrations/Swap/BhavishSwap.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract NativeSDK is AbstractBhavishSDK, IBhavishNativeSDK {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    BhavishSwap public bhavishSwap;\\n\\n    constructor(\\n        IBhavishPredictionNative[] memory _bhavishPrediction,\\n        bytes32[] memory _underlying,\\n        bytes32[] memory _strike,\\n        BhavishSwap _bhavishSwap\\n    ) {\\n        require(_bhavishPrediction.length == _underlying.length, \\\"Invalid array arguments passed\\\");\\n        require(_strike.length == _underlying.length, \\\"Invalid array arguments passed\\\");\\n        require(address(_bhavishSwap).isContract(), \\\"Swapper is not a contract\\\");\\n        bhavishSwap = _bhavishSwap;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        for (uint256 i = 0; i < _bhavishPrediction.length; i++) {\\n            predictionMap[_underlying[i]][_strike[i]] = _bhavishPrediction[i];\\n            activePredictionMap[_bhavishPrediction[i]] = true;\\n        }\\n    }\\n\\n    function _getNativePredictionMap(IBhavishPrediction _bhavishPrediction)\\n        private\\n        pure\\n        returns (IBhavishPredictionNative bhavishPrediction)\\n    {\\n        return IBhavishPredictionNative(address(_bhavishPrediction));\\n    }\\n\\n    function predict(\\n        PredictionStruct memory _predStruct,\\n        address _userAddress,\\n        address _provider\\n    ) external payable override {\\n        IBhavishPredictionNative bhavishPrediction = _getNativePredictionMap(\\n            predictionMap[_predStruct.underlying][_predStruct.strike]\\n        );\\n\\n        require(address(bhavishPrediction) != address(0), \\\"Prediction Market for the asset is not present\\\");\\n        require(activePredictionMap[bhavishPrediction], \\\"Prediction Market for the asset is not active\\\");\\n\\n        address userAddress_;\\n        if (address(msg.sender).isContract() && validContracts[msg.sender]) {\\n            userAddress_ = _userAddress;\\n        } else {\\n            require(msg.sender == _userAddress, \\\"Buyer and msg.sender cannot be different\\\");\\n            userAddress_ = msg.sender;\\n        }\\n\\n        if (_predStruct.directionUp) bhavishPrediction.predictUp{ value: msg.value }(_predStruct.roundId, userAddress_);\\n        else bhavishPrediction.predictDown{ value: msg.value }(_predStruct.roundId, userAddress_);\\n\\n        _populateProviderInfo(_provider, msg.value);\\n    }\\n\\n    function predictWithGasless(PredictionStruct memory _predStruct, address _provider) external payable override {\\n        IBhavishPredictionNative bhavishPrediction = _getNativePredictionMap(\\n            predictionMap[_predStruct.underlying][_predStruct.strike]\\n        );\\n        require(address(bhavishPrediction) != address(0), \\\"Prediction Market for the asset is not active\\\");\\n        require(activePredictionMap[bhavishPrediction], \\\"Prediction Market for the asset is not active\\\");\\n        require(msg.value > minimumGaslessBetAmount, \\\"Bet amount is not eligible for gasless\\\");\\n\\n        if (_predStruct.directionUp) bhavishPrediction.predictUp{ value: msg.value }(_predStruct.roundId, msgSender());\\n        else bhavishPrediction.predictDown{ value: msg.value }(_predStruct.roundId, msgSender());\\n\\n        _populateProviderInfo(_provider, msg.value);\\n    }\\n\\n    function _swapAndPredict(\\n        BhavishSwap.SwapStruct memory _swapStruct,\\n        PredictionStruct memory _predStruct,\\n        uint256 _slippage,\\n        bool _isGasless,\\n        address _provider\\n    ) internal {\\n        IBhavishPredictionNative bhavishPrediction = _getNativePredictionMap(\\n            predictionMap[_predStruct.underlying][_predStruct.strike]\\n        );\\n\\n        require(address(bhavishPrediction) != address(0), \\\"Prediction Market for the asset is not present\\\");\\n        require(activePredictionMap[bhavishPrediction], \\\"Prediction Market for the asset is not active\\\");\\n        // Fetch the path to get the erc20 token address and transfer the amountIn to sdk contract.\\n        address[] memory path = bhavishSwap.getPath(_swapStruct.fromAsset, _swapStruct.toAsset);\\n        IERC20(path[0]).safeTransferFrom(msgSender(), address(bhavishSwap), _swapStruct.amountIn);\\n\\n        uint256[] memory amounts = bhavishSwap.swapExactTokensForETH(_swapStruct, address(this), _slippage);\\n\\n        if (_isGasless) {\\n            require(amounts[amounts.length - 1] > minimumGaslessBetAmount, \\\"Bet amount is not eligible for gasless\\\");\\n        }\\n\\n        if (_predStruct.directionUp)\\n            bhavishPrediction.predictUp{ value: amounts[amounts.length - 1] }(_predStruct.roundId, msgSender());\\n        else bhavishPrediction.predictDown{ value: amounts[amounts.length - 1] }(_predStruct.roundId, msgSender());\\n\\n        _populateProviderInfo(_provider, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapAndPredict(\\n        BhavishSwap.SwapStruct memory _swapStruct,\\n        PredictionStruct memory _predStruct,\\n        uint256 slippage,\\n        address _provider\\n    ) external override {\\n        _swapAndPredict(_swapStruct, _predStruct, slippage, false, _provider);\\n    }\\n\\n    function swapAndPredictWithGasless(\\n        BhavishSwap.SwapStruct memory _swapStruct,\\n        PredictionStruct memory _predStruct,\\n        uint256 slippage,\\n        address _provider\\n    ) external override {\\n        _swapAndPredict(_swapStruct, _predStruct, slippage, true, _provider);\\n    }\\n\\n    function _claim(\\n        IBhavishPrediction bhavishPredict,\\n        uint256[] calldata roundIds,\\n        address userAddress,\\n        IBhavishPredictionNative.SwapParams memory _swapParams\\n    ) internal {\\n        IBhavishPredictionNative(address(bhavishPredict)).claim(roundIds, userAddress, _swapParams);\\n    }\\n\\n    function claim(\\n        PredictionStruct memory _predStruct,\\n        uint256[] calldata roundIds,\\n        IBhavishPredictionNative.SwapParams memory _swapParams\\n    ) external {\\n        _claim(predictionMap[_predStruct.underlying][_predStruct.strike], roundIds, msg.sender, _swapParams);\\n    }\\n\\n    function claimWithGasless(\\n        PredictionStruct memory _predStruct,\\n        uint256[] calldata roundIds,\\n        IBhavishPredictionNative.SwapParams memory _swapParams\\n    ) external {\\n        IBhavishPrediction bhavishPrediction = predictionMap[_predStruct.underlying][_predStruct.strike];\\n\\n        uint256 avgBetAmount = bhavishPrediction.getAverageBetAmount(roundIds, msgSender());\\n        require(avgBetAmount > minimumGaslessBetAmount, \\\"Not eligible for gasless\\\");\\n\\n        _claim(bhavishPrediction, roundIds, msgSender(), _swapParams);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishNativeSDK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IBhavishSDK.sol\\\";\\nimport \\\"./../Integrations/Swap/BhavishSwap.sol\\\";\\nimport { IBhavishPredictionNative } from \\\".././Interface/IBhavishPredictionNative.sol\\\";\\n\\ninterface IBhavishNativeSDK is IBhavishSDK {\\n    function predict(\\n        PredictionStruct memory _predStruct,\\n        address _userAddress,\\n        address _provider\\n    ) external payable;\\n\\n    function predictWithGasless(PredictionStruct memory _predStruct, address _provider) external payable;\\n\\n    function swapAndPredict(\\n        BhavishSwap.SwapStruct memory _swapStruct,\\n        PredictionStruct memory _predStruct,\\n        uint256 slippage,\\n        address _provider\\n    ) external;\\n\\n    function swapAndPredictWithGasless(\\n        BhavishSwap.SwapStruct memory _swapStruct,\\n        PredictionStruct memory _predStruct,\\n        uint256 slippage,\\n        address _provider\\n    ) external;\\n\\n    function claim(\\n        PredictionStruct memory _predStruct,\\n        uint256[] calldata roundIds,\\n        IBhavishPredictionNative.SwapParams memory _swapParams\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishPrediction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBhavishPrediction {\\n    enum RoundState {\\n        CREATED,\\n        STARTED,\\n        ENDED,\\n        CANCELLED\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        RoundState roundState;\\n        uint256 upPredictAmount;\\n        uint256 downPredictAmount;\\n        uint256 totalAmount;\\n        uint256 rewardBaseCalAmount;\\n        uint256 rewardAmount;\\n        uint256 startPrice;\\n        uint256 endPrice;\\n        uint256 roundStartTimestamp;\\n        uint256 roundEndTimestamp;\\n    }\\n\\n    struct BetInfo {\\n        uint256 upPredictAmount;\\n        uint256 downPredictAmount;\\n        uint256 amountDispersed;\\n    }\\n\\n    struct AssetPair {\\n        bytes32 underlying;\\n        bytes32 strike;\\n    }\\n\\n    struct PredictionMarketStatus {\\n        bool startPredictionMarketOnce;\\n        bool createPredictionMarketOnce;\\n    }\\n\\n    /**\\n     * @notice Create Round Zero round\\n     * @dev callable by Operator\\n     * @param _roundzeroStartTimestamp: round zero round start timestamp\\n     */\\n    function createPredictionMarket(uint256 _roundzeroStartTimestamp) external;\\n\\n    /**\\n     * @notice Start Zero round\\n     * @dev callable by Operator\\n     */\\n    function startPredictionMarket() external;\\n\\n    /**\\n     * @notice Execute round\\n     * @dev Callable by Operator\\n     */\\n    function executeRound() external;\\n\\n    function getCurrentRoundDetails() external view returns (IBhavishPrediction.Round memory);\\n\\n    function refundUsers(uint256 _predictRoundId, address userAddress) external;\\n\\n    function getAverageBetAmount(uint256[] calldata roundIds, address userAddress) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Impl/BhavishSDK/AbstractBhavishSDK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport { IBhavishSDK } from \\\"../../Interface/IBhavishSDK.sol\\\";\\nimport { IBhavishPrediction } from \\\"../../Interface/IBhavishPrediction.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { BaseRelayRecipient } from \\\"../../Integrations/Gasless/BaseRelayRecipient.sol\\\";\\nimport { DateTimeLibrary } from \\\"../../Libs/DateTimeLibrary.sol\\\";\\n\\nabstract contract AbstractBhavishSDK is IBhavishSDK, BaseRelayRecipient, AccessControl {\\n    using Address for address;\\n\\n    mapping(bytes32 => mapping(bytes32 => IBhavishPrediction)) public predictionMap;\\n    mapping(IBhavishPrediction => bool) public activePredictionMap;\\n    uint256 public decimals = 3;\\n    mapping(bytes32 => bool) public usersForTheMonth;\\n    // Month -> Amount\\n    mapping(uint256 => uint256) public totalWeeklyPremiumCollected;\\n    mapping(uint256 => uint256) public totalMonthlyPremiumCollected;\\n    mapping(uint256 => uint256) public totalYearlyPremiumCollected;\\n    mapping(uint256 => uint256) public totalBhavishAllocated;\\n    // Address -> Month -> Amount\\n    mapping(address => mapping(uint256 => uint256)) public premiumCollected;\\n    mapping(address => bool) public validContracts;\\n\\n    /**\\n     * @dev minimum gasless bet amount\\n     */\\n    uint256 public override minimumGaslessBetAmount = 0.1 ether;\\n\\n    modifier onlyAdmin(address _address) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _address), \\\"SDK: caller has no access to the method\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add funds\\n     */\\n    receive() external payable {}\\n\\n    function addPredictionMarket(\\n        IBhavishPrediction[] memory _bhavishPrediction,\\n        bytes32[] memory _underlying,\\n        bytes32[] memory _strike\\n    ) external onlyAdmin(msg.sender) {\\n        require(_bhavishPrediction.length == _underlying.length, \\\"Invalid array arguments passed\\\");\\n        require(_strike.length == _underlying.length, \\\"Invalid array arguments passed\\\");\\n        for (uint256 i = 0; i < _bhavishPrediction.length; i++) {\\n            predictionMap[_underlying[i]][_strike[i]] = _bhavishPrediction[i];\\n            require(!activePredictionMap[_bhavishPrediction[i]], \\\"Prediction Market is already active\\\");\\n            activePredictionMap[_bhavishPrediction[i]] = true;\\n        }\\n    }\\n\\n    function updatePredictionMarket(\\n        IBhavishPrediction _bhavishPrediction,\\n        bytes32 _underlying,\\n        bytes32 _strike\\n    ) external onlyAdmin(msg.sender) {\\n        require(address(predictionMap[_underlying][_strike]) != address(0), \\\"Prediction market doesn't exist\\\");\\n        predictionMap[_underlying][_strike] = _bhavishPrediction;\\n        activePredictionMap[_bhavishPrediction] = true;\\n    }\\n\\n    function removePredictionMarket(IBhavishPrediction _bhavishPrediction) external onlyAdmin(msg.sender) {\\n        require(activePredictionMap[_bhavishPrediction], \\\"Prediction market is not in active state\\\");\\n        activePredictionMap[_bhavishPrediction] = false;\\n    }\\n\\n    function setTrustedForwarder(address forwarderAddress) public onlyAdmin(msg.sender) {\\n        require(forwarderAddress != address(0), \\\"SDK: Forwarder Address cannot be 0\\\");\\n        trustedForwarder.push(forwarderAddress);\\n    }\\n\\n    function removeTrustedForwarder(address forwarderAddress) public onlyAdmin(msg.sender) {\\n        bool found = false;\\n        uint256 i;\\n        for (i = 0; i < trustedForwarder.length; i++) {\\n            if (trustedForwarder[i] == forwarderAddress) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        if (found) {\\n            trustedForwarder[i] = trustedForwarder[trustedForwarder.length - 1];\\n            trustedForwarder.pop();\\n        }\\n    }\\n\\n    function versionRecipient() external view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function _populateProviderInfo(address _provider, uint256 _predAmt) internal {\\n        (, uint256 month, uint256 year, uint256 week) = DateTimeLibrary.getAll(block.timestamp);\\n\\n        if (!usersForTheMonth[keccak256(abi.encode(_provider, month))]) {\\n            usersForTheMonth[keccak256(abi.encode(_provider, month))] = true;\\n            emit PredictionMarketProvider(month, _provider);\\n        }\\n        premiumCollected[_provider][month] += _predAmt;\\n        totalMonthlyPremiumCollected[month] += _predAmt;\\n        totalYearlyPremiumCollected[year] += _predAmt;\\n        totalWeeklyPremiumCollected[week] += _predAmt;\\n    }\\n\\n    function setMinimumGaslessBetAmount(uint256 _amount) external onlyAdmin(msg.sender) {\\n        require(_amount >= 0.1 ether && _amount < 100 ether, \\\"invalid minimum gasless premium\\\");\\n        minimumGaslessBetAmount = _amount;\\n    }\\n\\n    function _refundUsers(\\n        IBhavishPrediction bhavishPredict,\\n        uint256 roundId,\\n        address userAddress\\n    ) internal {\\n        bhavishPredict.refundUsers(roundId, userAddress);\\n    }\\n\\n    function refundUsers(PredictionStruct memory _predStruct, uint256 roundId) external {\\n        _refundUsers(predictionMap[_predStruct.underlying][_predStruct.strike], roundId, msg.sender);\\n    }\\n\\n    function refundUsersWithGasless(PredictionStruct memory _predStruct, uint256 roundId) external {\\n        IBhavishPrediction bhavishPrediction = predictionMap[_predStruct.underlying][_predStruct.strike];\\n        uint256[] memory roundArr = new uint256[](1);\\n        roundArr[0] = roundId;\\n        uint256 avgBetAmount = bhavishPrediction.getAverageBetAmount(roundArr, msgSender());\\n\\n        require(avgBetAmount > minimumGaslessBetAmount, \\\"Not eligible for gasless\\\");\\n\\n        _refundUsers(bhavishPrediction, roundId, msgSender());\\n    }\\n\\n    function addContract(address _contract) external onlyAdmin(msg.sender) {\\n        require(_contract.isContract(), \\\"invalid address\\\");\\n        validContracts[_contract] = true;\\n    }\\n\\n    function removeContract(address _contract) external onlyAdmin(msg.sender) {\\n        validContracts[_contract] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Integrations/Swap/BhavishSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../../Interface/IBhavishSDK.sol\\\";\\n\\npragma solidity ^0.8.13;\\n\\ncontract BhavishSwap is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    address public UNISWAP_FACTORY;\\n    address public UNISWAP_ROUTER;\\n    mapping(bytes32 => address[]) public pathMapper;\\n    uint256 public decimals = 3;\\n\\n    struct SwapStruct {\\n        uint256 amountIn;\\n        uint256 deadline;\\n        bytes32 fromAsset;\\n        bytes32 toAsset;\\n    }\\n\\n    modifier onlyAsset(bytes32 fromAsset, bytes32 toAsset) {\\n        address[] memory path = getPath(fromAsset, toAsset);\\n        require(path.length > 1, \\\"Asset swap not supported\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin(address _address) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _address), \\\"Address not an admin\\\");\\n        _;\\n    }\\n\\n    constructor(address uniswapFactory, address uniswapRouter) {\\n        UNISWAP_FACTORY = uniswapFactory;\\n        UNISWAP_ROUTER = uniswapRouter;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Add funds\\n     */\\n    receive() external payable {}\\n\\n    function setPath(\\n        bytes32 fromAsset,\\n        bytes32 toAsset,\\n        address[] memory path\\n    ) external onlyAdmin(msg.sender) {\\n        require(path.length > 1, \\\"Path cannot be empty or 1\\\");\\n        pathMapper[keccak256((abi.encode(fromAsset, toAsset)))] = path;\\n    }\\n\\n    function getPath(bytes32 fromAsset, bytes32 toAsset) public view returns (address[] memory) {\\n        return pathMapper[keccak256(abi.encode(fromAsset, toAsset))];\\n    }\\n\\n    // Get the amounts out for the specified path\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        bytes32 fromAsset,\\n        bytes32 toAsset\\n    ) public view onlyAsset(fromAsset, toAsset) returns (uint256[] memory amounts) {\\n        address[] memory path = getPath(fromAsset, toAsset);\\n        amounts = new uint256[](path.length);\\n        amounts = IUniswapV2Router02(UNISWAP_ROUTER).getAmountsOut(amountIn, path);\\n    }\\n\\n    function swapExactTokensForETH(\\n        SwapStruct memory _swapStruct,\\n        address to,\\n        uint256 slippage\\n    ) external onlyAsset(_swapStruct.fromAsset, _swapStruct.toAsset) returns (uint256[] memory amounts) {\\n        address[] memory path = getPath(_swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256[] memory amountsOut = getAmountsOut(_swapStruct.amountIn, _swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256 amountOut = amountsOut[amountsOut.length - 1] -\\n            ((amountsOut[amountsOut.length - 1] * slippage) / 10**decimals);\\n        IERC20(path[0]).safeApprove(UNISWAP_ROUTER, _swapStruct.amountIn);\\n        amounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForETH(\\n            _swapStruct.amountIn,\\n            amountOut,\\n            path,\\n            to,\\n            _swapStruct.deadline\\n        );\\n    }\\n\\n    function swapExactETHForTokens(\\n        SwapStruct memory _swapStruct,\\n        address to,\\n        uint256 slippage\\n    ) external payable onlyAsset(_swapStruct.fromAsset, _swapStruct.toAsset) returns (uint256[] memory amounts) {\\n        address[] memory path = getPath(_swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256[] memory amountsOut = getAmountsOut(msg.value, _swapStruct.fromAsset, _swapStruct.toAsset);\\n        uint256 amountOut = amountsOut[amountsOut.length - 1] -\\n            ((amountsOut[amountsOut.length - 1] * slippage) / 10**decimals);\\n        amounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactETHForTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            to,\\n            _swapStruct.deadline\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishSDK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBhavishSDK {\\n    event PredictionMarketProvider(uint256 indexed _month, address indexed _provider);\\n\\n    struct PredictionStruct {\\n        bytes32 underlying;\\n        bytes32 strike;\\n        uint256 roundId;\\n        bool directionUp;\\n    }\\n\\n    function minimumGaslessBetAmount() external returns (uint256);\\n\\n    function refundUsers(PredictionStruct memory _predStruct, uint256 roundId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishPredictionNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\nimport \\\"./IBhavishPrediction.sol\\\";\\n\\ninterface IBhavishPredictionNative is IBhavishPrediction {\\n    struct SwapParams {\\n        uint256 slippage;\\n        bytes32 toAsset;\\n        bool convert;\\n    }\\n\\n    /**\\n     * @notice Bet Bull position\\n     * @param roundId: Round Id\\n     * @param userAddress: Address of the user\\n     */\\n    function predictUp(uint256 roundId, address userAddress) external payable;\\n\\n    /**\\n     * @notice Bet Bear position\\n     * @param roundId: Round Id\\n     * @param userAddress: Address of the user\\n     */\\n    function predictDown(uint256 roundId, address userAddress) external payable;\\n\\n    function claim(\\n        uint256[] calldata _roundIds,\\n        address _userAddress,\\n        SwapParams memory _swapParams\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/Libs/DateTimeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n\\nlibrary DateTimeLibrary {\\n    uint256 public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 public constant OFFSET19700101 = 2440588;\\n    uint256 public constant WEEK_OFFSET = 345600;\\n    uint256 public constant DOW_FRI = 5;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970, \\\"Year not in range\\\");\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampToDay(uint256 timestamp) internal pure returns (uint256 today) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        today = _daysFromDate(year, month, day);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getWeek(uint256 timestamp) internal pure returns (uint256 week) {\\n        week = ((timestamp + WEEK_OFFSET) / SECONDS_PER_DAY) / 7;\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function startTimestampOfDay(\\n        uint256 day,\\n        uint256 month,\\n        uint256 year\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function getAll(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 day,\\n            uint256 month,\\n            uint256 year,\\n            uint256 week\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        week = getWeek(timestamp);\\n    }\\n\\n    function getPresentDayTimestamp() internal view returns (uint256 todayTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(block.timestamp);\\n        todayTimestamp = DateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Integrations/Gasless/BaseRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n\\n    address[] public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(isTrustedForwarder(msg.sender), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view override returns (bool) {\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) if (forwarder == trustedForwarder[i]) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Integrations/Gasless/IRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function msgSender() internal view virtual returns (address);\\n\\n    function versionRecipient() external view virtual returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBhavishPredictionNative[]\",\"name\":\"_bhavishPrediction\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_underlying\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_strike\",\"type\":\"bytes32[]\"},{\"internalType\":\"contract BhavishSwap\",\"name\":\"_bhavishSwap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"PredictionMarketProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activePredictionMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction[]\",\"name\":\"_bhavishPrediction\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_underlying\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_strike\",\"type\":\"bytes32[]\"}],\"name\":\"addPredictionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bhavishSwap\",\"outputs\":[{\"internalType\":\"contract BhavishSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"roundIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"toAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"convert\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishPredictionNative.SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"roundIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"toAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"convert\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishPredictionNative.SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"}],\"name\":\"claimWithGasless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumGaslessBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"predict\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"predictWithGasless\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"predictionMap\",\"outputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"refundUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"refundUsersWithGasless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"_bhavishPrediction\",\"type\":\"address\"}],\"name\":\"removePredictionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"}],\"name\":\"removeTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumGaslessBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"fromAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"toAsset\",\"type\":\"bytes32\"}],\"internalType\":\"struct BhavishSwap.SwapStruct\",\"name\":\"_swapStruct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"swapAndPredict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"fromAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"toAsset\",\"type\":\"bytes32\"}],\"internalType\":\"struct BhavishSwap.SwapStruct\",\"name\":\"_swapStruct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strike\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directionUp\",\"type\":\"bool\"}],\"internalType\":\"struct IBhavishSDK.PredictionStruct\",\"name\":\"_predStruct\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"swapAndPredictWithGasless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBhavishAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMonthlyPremiumCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalWeeklyPremiumCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalYearlyPremiumCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"_bhavishPrediction\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strike\",\"type\":\"bytes32\"}],\"name\":\"updatePredictionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usersForTheMonth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NativeSDK", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009e35ff8d63308d782904e3de925cb226c137ae49000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}