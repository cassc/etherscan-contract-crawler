{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OpolisPay.sol\": {\r\n      \"content\": \"pragma solidity 0.8.5;\\n\\n// SPDX-License-Identifier: LGPLv3\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @notice custom errors for revert statements\\n\\n/// @dev requires privileged access\\nerror NotPermitted();\\n\\n/// @dev not a whitelisted token\\nerror NotWhitelisted();\\n\\n/// @dev payroll id equals zero\\nerror InvalidPayroll();\\n\\n/// @dev payroll id used\\nerror DuplicatePayroll();\\n\\n/// @dev amount equals zero\\nerror InvalidAmount();\\n\\n/// @dev sender is not a member\\nerror NotMember();\\n\\n/// @dev stake must be a non zero amount of whitelisted token\\n/// or non zero amount of eth\\nerror InvalidStake();\\n\\n/// @dev stake must be a non zero amount of whitelisted token\\n/// or non zero amount of eth\\nerror InvalidWithdraw();\\n\\n/// @dev setting one of the role to zero address\\nerror ZeroAddress();\\n\\n/// @dev withdrawing non whitelisted token\\nerror InvalidToken();\\n\\n/// @dev whitelisting and empty list of tokens\\nerror ZeroTokens();\\n\\n/// @dev token has already been whitelisted\\nerror AlreadyWhitelisted();\\n\\n/// @dev sending eth directly to contract address\\nerror DirectTransfer();\\n\\n/// @dev token and destination length mismatch\\nerror LengthMismatch();\\n\\n/// @title OpolisPay\\n/// @notice Minimalist Contract for Crypto Payroll Payments\\ncontract OpolisPay is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant ZERO = address(0);\\n\\n    address[] public supportedTokens; //Tokens that can be sent.\\n    address private opolisAdmin; //Should be Opolis multi-sig for security\\n    address private opolisHelper; //Can be bot wallet for convenience\\n    address private ethLiquidation; //Address for ETH liquidations\\n\\n    event SetupComplete(\\n        address indexed admin,\\n        address indexed helper,\\n        address ethLiquidation,\\n        address[] tokens,\\n        address[] liqDestinations\\n    );\\n    event Staked(\\n        address indexed staker, address indexed token, uint256 amount, uint256 indexed memberId, uint256 stakeNumber\\n    );\\n    event Paid(address indexed payor, address indexed token, uint256 indexed payrollId, uint256 amount);\\n    event OpsPayrollWithdraw(address indexed token, uint256 indexed payrollId, uint256 amount);\\n    event OpsStakeWithdraw(address indexed token, uint256 indexed stakeId, uint256 stakeNumber, uint256 amount);\\n    event Sweep(address indexed token, uint256 amount);\\n    event NewDestination(address indexed oldDestination, address indexed token, address indexed destination);\\n    event NewAdmin(address indexed oldAdmin, address indexed opolisAdmin);\\n    event NewHelper(address indexed oldHelper, address indexed newHelper);\\n    event NewTokens(address[] newTokens, address[] newDestinations);\\n\\n    mapping(uint256 => uint256) private stakes; //Tracks used stake ids\\n    mapping(uint256 => bool) private payrollIds; //Tracks used payroll ids\\n    mapping(uint256 => bool) public payrollWithdrawn; //Tracks payroll withdrawals\\n    mapping(uint256 => uint256) public stakeWithdrawn; //Tracks stake withdrawals\\n    mapping(address => bool) public whitelisted; //Tracks whitelisted tokens\\n    mapping(address => address) public liqDestinations; //Tracks liquidation destinations for tokens\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != opolisAdmin) revert NotPermitted();\\n        _;\\n    }\\n\\n    modifier onlyOpolis() {\\n        if (!(msg.sender == opolisAdmin || msg.sender == opolisHelper)) {\\n            revert NotPermitted();\\n        }\\n        _;\\n    }\\n\\n    /// @notice launches contract with a destination as the Opolis wallet, the admins, and a token whitelist\\n    /// @param _opolisAdmin the multi-sig which is the ultimate admin\\n    /// @param _opolisHelper meant to allow for a bot to handle less sensitive items\\n    /// @param _ethLiq the address where we send eth or native token liquidations\\n    /// @param _tokenList initial whitelist of tokens for staking and payroll\\n    /// @param _destinationList the addresses where payroll and stakes will be sent when withdrawn based on token\\n\\n    constructor(\\n        address _opolisAdmin,\\n        address _opolisHelper,\\n        address _ethLiq,\\n        address[] memory _tokenList,\\n        address[] memory _destinationList\\n    ) {\\n        if (_tokenList.length != _destinationList.length) revert LengthMismatch();\\n        opolisAdmin = _opolisAdmin;\\n        opolisHelper = _opolisHelper;\\n        ethLiquidation = _ethLiq;\\n\\n        for (uint256 i = 0; i < _tokenList.length; i++) {\\n            _addToken(_tokenList[i]);\\n            _addDestination(_destinationList[i], _tokenList[i]);\\n        }\\n\\n        emit SetupComplete(opolisAdmin, opolisHelper, _ethLiq, _tokenList, _destinationList);\\n    }\\n\\n    /**\\n     *\\n     *                          CORE PAYROLL FUNCTIONS\\n     *\\n     */\\n\\n    /// @notice core function for members to pay their payroll\\n    /// @param token the token being used to pay for their payroll\\n    /// @param amount the amount due for their payroll -- up to user / front-end to match\\n    /// @param payrollId the way we'll associate payments with members' invoices\\n\\n    function payPayroll(address token, uint256 amount, uint256 payrollId) external nonReentrant {\\n        if (!whitelisted[token]) revert NotWhitelisted();\\n        if (payrollId == 0) revert InvalidPayroll();\\n        if (amount == 0) revert InvalidAmount();\\n        if (payrollIds[payrollId]) revert DuplicatePayroll();\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        payrollIds[payrollId] = true;\\n\\n        emit Paid(msg.sender, token, payrollId, amount);\\n    }\\n\\n    /// @notice staking function that allows for both ETH and whitelisted ERC20\\n    /// @param token the token being used to stake\\n    /// @param amount the amount due for staking -- up to user / front-end to match\\n    /// @param memberId the way we'll associate the stake with a new member\\n\\n    function memberStake(address token, uint256 amount, uint256 memberId) public payable nonReentrant {\\n        if (!((whitelisted[token] && amount != 0) || (token == ETH && msg.value != 0))) {\\n            revert InvalidStake();\\n        }\\n        if (memberId == 0) revert NotMember();\\n\\n        // @dev increments the stake id for each member\\n        uint256 stakeCount = ++stakes[memberId];\\n\\n        // @dev function for auto transfering out stake\\n        if (msg.value > 0 && token == ETH) {\\n            payable(ethLiquidation).transfer(msg.value);\\n            emit Staked(msg.sender, ETH, msg.value, memberId, stakeCount);\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            emit Staked(msg.sender, token, amount, memberId, stakeCount);\\n        }\\n    }\\n\\n    /// @notice withdraw function for admin or OpsBot to call\\n    /// @param _payrollIds the paid payrolls we want to clear out\\n    /// @param _payrollTokens the tokens the payrolls were paid in\\n    /// @param _payrollAmounts the amount that was paid\\n    /// @dev we iterate through payrolls and clear them out with the funds being sent to the destination address\\n    function withdrawPayrolls(\\n        uint256[] calldata _payrollIds,\\n        address[] calldata _payrollTokens,\\n        uint256[] calldata _payrollAmounts\\n    ) external onlyOpolis {\\n        uint256[] memory withdrawAmounts = new uint256[](\\n            supportedTokens.length\\n        );\\n        for (uint256 i = 0; i < _payrollIds.length; i++) {\\n            uint256 id = _payrollIds[i];\\n            if (!payrollIds[id]) revert InvalidPayroll();\\n\\n            address token = _payrollTokens[i];\\n            uint256 amount = _payrollAmounts[i];\\n\\n            if (!payrollWithdrawn[id]) {\\n                uint256 j;\\n                for (; j < supportedTokens.length; j++) {\\n                    if (supportedTokens[j] == token) {\\n                        withdrawAmounts[j] += amount;\\n                        break;\\n                    }\\n                }\\n                if (j == supportedTokens.length) revert InvalidToken();\\n                payrollWithdrawn[id] = true;\\n\\n                emit OpsPayrollWithdraw(token, id, amount);\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < withdrawAmounts.length; i++) {\\n            uint256 amount = withdrawAmounts[i];\\n            if (amount > 0) {\\n                _withdraw(supportedTokens[i], amount);\\n            }\\n        }\\n    }\\n\\n    /// @notice withdraw function for admin or OpsBot to call\\n    /// @param _stakeIds the paid stakes id we want to clear out\\n    /// @param _stakeNum the particular stake number associated with that id\\n    /// @param _stakeTokens the tokens the stakes were paid in\\n    /// @param _stakeAmounts the amount that was paid\\n    /// @dev we iterate through stakes and clear them out with the funds being sent to the destination address\\n    function withdrawStakes(\\n        uint256[] calldata _stakeIds,\\n        uint256[] calldata _stakeNum,\\n        address[] calldata _stakeTokens,\\n        uint256[] calldata _stakeAmounts\\n    ) external onlyOpolis {\\n        uint256[] memory withdrawAmounts = new uint256[](\\n            supportedTokens.length\\n        );\\n        if (_stakeIds.length != _stakeNum.length) revert InvalidWithdraw();\\n\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            uint256 id = _stakeIds[i];\\n            address token = _stakeTokens[i];\\n            uint256 amount = _stakeAmounts[i];\\n            uint256 num = _stakeNum[i];\\n\\n            if (stakeWithdrawn[id] < num) {\\n                uint256 j;\\n                for (; j < supportedTokens.length; j++) {\\n                    if (supportedTokens[j] == token) {\\n                        withdrawAmounts[j] += amount;\\n                        break;\\n                    }\\n                }\\n                if (j == supportedTokens.length) revert InvalidToken();\\n                stakeWithdrawn[id] = num;\\n\\n                emit OpsStakeWithdraw(token, id, num, amount);\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < withdrawAmounts.length; i++) {\\n            uint256 amount = withdrawAmounts[i];\\n            if (amount > 0) {\\n                _withdraw(supportedTokens[i], amount);\\n            }\\n        }\\n    }\\n\\n    /// @notice clearBalance() is meant to be a safety function to be used for stuck funds or upgrades\\n    /// @dev will mark any non-withdrawn payrolls as withdrawn\\n\\n    function clearBalance() public onlyAdmin {\\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\\n            address token = supportedTokens[i];\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n\\n            if (balance > 0) {\\n                _withdraw(token, balance);\\n            }\\n            emit Sweep(token, balance);\\n        }\\n    }\\n\\n    /// @notice fallback function to prevent accidental ether transfers\\n    /// @dev if someone tries to send ether directly to the contract the tx will fail\\n\\n    receive() external payable {\\n        revert DirectTransfer();\\n    }\\n\\n    /**\\n     *\\n     *                          ADMIN FUNCTIONS\\n     *\\n     */\\n\\n    /// @notice this function is used to adjust where member funds are sent by contract\\n    /// @param token since each token has a new destination\\n    /// @param newDestination is the new address where funds are sent (assumes it's payable exchange address)\\n    /// @dev must be called by Opolis Admin multi-sig\\n\\n    function updateDestination(address token, address newDestination) external onlyAdmin {\\n        if (newDestination == ZERO) revert ZeroAddress();\\n\\n        address oldDestination = liqDestinations[token];\\n        liqDestinations[token] = newDestination;\\n\\n        emit NewDestination(oldDestination, token, newDestination);\\n    }\\n\\n    /// @notice this function is used to replace the admin multi-sig\\n    /// @param newAdmin is the new admin address\\n    /// @dev this should always be a mulit-sig\\n\\n    function updateAdmin(address newAdmin) external onlyAdmin returns (address) {\\n        if (newAdmin == ZERO) revert ZeroAddress();\\n\\n        emit NewAdmin(opolisAdmin, newAdmin);\\n        opolisAdmin = newAdmin;\\n\\n        return opolisAdmin;\\n    }\\n\\n    /// @notice this function is used to replace a bot\\n    /// @param newHelper is the new bot address\\n    /// @dev this can be a hot wallet, since it has limited powers\\n\\n    function updateHelper(address newHelper) external onlyAdmin returns (address) {\\n        if (newHelper == ZERO) revert ZeroAddress();\\n\\n        emit NewHelper(opolisHelper, newHelper);\\n        opolisHelper = newHelper;\\n\\n        return opolisHelper;\\n    }\\n\\n    /// @notice this function is used to add new whitelisted tokens\\n    /// @param newTokens are the tokens to be whitelisted\\n    /// @param newDestinations since each new token may have a different destination\\n    /// @dev restricted to admin b/c this is a business / compliance decision\\n\\n    function addTokens(address[] memory newTokens, address[] memory newDestinations) external onlyAdmin {\\n        if (newTokens.length == 0) revert ZeroTokens();\\n        if (newTokens.length != newDestinations.length) revert LengthMismatch();\\n\\n        for (uint256 i = 0; i < newTokens.length; i++) {\\n            _addToken(newTokens[i]);\\n            _addDestination(newDestinations[i], newTokens[i]);\\n        }\\n\\n        emit NewTokens(newTokens, newDestinations);\\n    }\\n\\n    /**\\n     *\\n     *                          INTERNAL FUNCTIONS\\n     *\\n     */\\n\\n    function _addToken(address token) internal {\\n        if (whitelisted[token]) revert AlreadyWhitelisted();\\n        if (token == ZERO) revert ZeroAddress();\\n        supportedTokens.push(token);\\n        whitelisted[token] = true;\\n    }\\n\\n    function _addDestination(address destination, address token) internal {\\n        if (destination == ZERO) revert ZeroAddress();\\n        liqDestinations[token] = destination;\\n    }\\n\\n    function _withdraw(address token, uint256 amount) internal {\\n        address dest = liqDestinations[token];\\n        IERC20(token).safeTransfer(dest, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opolisAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opolisHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethLiq\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinationList\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DirectTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatePayroll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayroll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMember\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTokens\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opolisAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"NewDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldHelper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newHelper\",\"type\":\"address\"}],\"name\":\"NewHelper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newDestinations\",\"type\":\"address[]\"}],\"name\":\"NewTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payrollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OpsPayrollWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OpsStakeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payrollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ethLiquidation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"liqDestinations\",\"type\":\"address[]\"}],\"name\":\"SetupComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNumber\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"newDestinations\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqDestinations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"}],\"name\":\"memberStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payrollId\",\"type\":\"uint256\"}],\"name\":\"payPayroll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payrollWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"updateDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHelper\",\"type\":\"address\"}],\"name\":\"updateHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_payrollIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_payrollTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payrollAmounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawPayrolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakeNum\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_stakeTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OpolisPay", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e7f5c73319633dde7681cde709c3419df0da764f0000000000000000000000003d7098bf88675f09fb0c1c746dbe41af2686387a000000000000000000000000e7f5c73319633dde7681cde709c3419df0da764f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000100000000000000000000000073f8680fc725f053097496aeb54fc96696832fa3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}