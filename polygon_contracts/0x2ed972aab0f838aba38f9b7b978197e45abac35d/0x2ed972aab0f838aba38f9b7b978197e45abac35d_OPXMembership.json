{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OPXMembership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract OPXMembership is Initializable {\\r\\n    address public owner;\\r\\n    address public paymentTo;\\r\\n    uint256 public totalMembers;\\r\\n    uint256 public totalPayment;\\r\\n\\r\\n    uint256 public divider;\\r\\n    uint32 public oneMonth;\\r\\n\\r\\n    mapping(address => bool) public isGovernor;\\r\\n\\r\\n    mapping(uint256 => address) public userids;\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n    mapping(address => address[]) public user_downlines;\\r\\n    mapping(address => uint256) public total_earnings;\\r\\n\\r\\n    ERC20 public payment0;\\r\\n    ERC20 public payment1;\\r\\n    ERC20 public payment2;\\r\\n\\r\\n    uint256 public tokensPer1USD;\\r\\n    UniswapV2Pair public pair;\\r\\n    uint32 public directBonus;\\r\\n    uint32 public cycleBonus;\\r\\n    uint32 public secondLevel;\\r\\n    uint32 public upperLevel;\\r\\n\\r\\n    mapping(address => mapping(uint256 => Commission)) public user_commissions;\\r\\n\\r\\n    uint256 public latestPaymentMethod;\\r\\n\\r\\n    address public marketingAddress;\\r\\n    address public liquidityAddress;\\r\\n    address public leftoverAddress;\\r\\n\\r\\n    bool public operating;\\r\\n\\r\\n    mapping(address => uint16) public leadership_percentage;\\r\\n    address[] public leadership_addresses;\\r\\n    Admin[] public leadership_admins;\\r\\n\\r\\n    mapping(address => uint256) public user_vip_expiration;\\r\\n\\r\\n    address public advertAddress;\\r\\n    mapping(address => uint256) public cycleCount;\\r\\n\\r\\n    uint16 public freeMonthsForNewInvite;\\r\\n\\r\\n    struct Admin {\\r\\n        address addr;\\r\\n        uint16 percentage;\\r\\n    }\\r\\n\\r\\n    struct Commission {\\r\\n        uint128 claimable;\\r\\n        uint128 total_claimed;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        address referrer;\\r\\n        uint32 join_date;\\r\\n        uint32 expiration;\\r\\n        uint32 userid;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _opxToken,\\r\\n        address _usdt,\\r\\n        address _dai,\\r\\n        address _pair,\\r\\n        address _marketingAddress,\\r\\n        address _liquidityAddress,\\r\\n        address _leftOver\\r\\n    ) external initializer {\\r\\n        owner = msg.sender;\\r\\n        divider = 100;\\r\\n        payment0 = ERC20(_opxToken);\\r\\n        payment1 = ERC20(_usdt);\\r\\n        payment2 = ERC20(_dai);\\r\\n        pair = UniswapV2Pair(_pair);\\r\\n        marketingAddress = _marketingAddress;\\r\\n        liquidityAddress = _liquidityAddress;\\r\\n        leftoverAddress = _leftOver;\\r\\n        tokensPer1USD = 54;\\r\\n        oneMonth = 30 days;\\r\\n        directBonus = 50;\\r\\n        cycleBonus = 30;\\r\\n        secondLevel = 2;\\r\\n        upperLevel = 1;\\r\\n\\r\\n        operating = true;\\r\\n    }\\r\\n\\r\\n    function governanceToggle(address addr, bool perms) external onlyOwner {\\r\\n        isGovernor[addr] = perms;\\r\\n    }\\r\\n\\r\\n    function setAddress(uint256 index, address addr) external onlyGovernors {\\r\\n        if (index == 0) {\\r\\n            marketingAddress = addr;\\r\\n        } else if (index == 1) {\\r\\n            liquidityAddress = addr;\\r\\n        } else if (index == 2) {\\r\\n            leftoverAddress = addr;\\r\\n        } else if (index == 3) {\\r\\n            advertAddress = addr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tweakSettings(\\r\\n        uint256 index,\\r\\n        uint256 value\\r\\n    ) external onlyGovernors {\\r\\n        if (index == 0) {\\r\\n            freeMonthsForNewInvite = uint16(value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setLeadershipAdmin(\\r\\n        address addr,\\r\\n        uint16 percentage\\r\\n    ) external onlyGovernors {\\r\\n        require(percentage <= 1000, \\\"Invalid percentage\\\");\\r\\n        uint256 length = leadership_admins.length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            if (leadership_admins[i].addr == addr) {\\r\\n                leadership_admins[i].percentage = percentage;\\r\\n                if (percentage == 0) {\\r\\n                    leadership_admins[i] = leadership_admins[length - 1];\\r\\n                    leadership_admins.pop();\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        leadership_admins.push(Admin(addr, percentage));\\r\\n    }\\r\\n\\r\\n    function setLeadershipCommission(\\r\\n        address addr,\\r\\n        uint16 amount\\r\\n    ) external onlyGovernors {\\r\\n        leadership_percentage[addr] = amount;\\r\\n\\r\\n        uint256 length = leadership_addresses.length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            if (leadership_addresses[i] == addr) {\\r\\n                if (amount == 0) {\\r\\n                    leadership_addresses[i] = leadership_addresses[length - 1];\\r\\n                    leadership_addresses.pop();\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        leadership_addresses.push(addr);\\r\\n    }\\r\\n\\r\\n    function manualMembership(\\r\\n        address userAddress,\\r\\n        address referrer,\\r\\n        uint32 expiration,\\r\\n        uint256 tokens,\\r\\n        address[] memory downlines\\r\\n    ) external onlyGovernors {\\r\\n        User storage user = users[userAddress];\\r\\n        require(user.join_date == 0, \\\"User is already added.\\\");\\r\\n        user.join_date = uint32(block.timestamp) - oneMonth;\\r\\n\\r\\n        user.expiration = expiration;\\r\\n        user.userid = uint32(++totalMembers);\\r\\n        userids[user.userid] = userAddress;\\r\\n\\r\\n        if (referrer != address(0)) {\\r\\n            user.referrer = referrer;\\r\\n            user_downlines[referrer].push(userAddress);\\r\\n        } else {\\r\\n            user.referrer = owner;\\r\\n        }\\r\\n\\r\\n        tokenTransfer(userAddress, tokens);\\r\\n\\r\\n        uint256 length = downlines.length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            users[downlines[i]].referrer = userAddress;\\r\\n            user_downlines[userAddress].push(downlines[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function freeRegister(address referrer) external {\\r\\n        User storage user = users[msg.sender];\\r\\n        if (user.join_date == 0) {\\r\\n            user.join_date = uint32(block.timestamp);\\r\\n            user.referrer = referrer;\\r\\n            user.userid = uint32(++totalMembers);\\r\\n            userids[user.userid] = msg.sender;\\r\\n            user_downlines[referrer].push(msg.sender);\\r\\n            emit MemberActivate(msg.sender, referrer, 0, 0);\\r\\n        }\\r\\n        OPXAdvertInterface(advertAddress).manualRegistration(\\r\\n            msg.sender,\\r\\n            referrer\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function freeMembership(\\r\\n        address userAddress,\\r\\n        address referrer,\\r\\n        uint32 months\\r\\n    ) external onlyGovernors {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        if (user.join_date == 0) {\\r\\n            user.join_date = uint32(block.timestamp);\\r\\n            user.referrer = owner;\\r\\n            user.userid = uint32(++totalMembers);\\r\\n            userids[user.userid] = userAddress;\\r\\n            user.expiration = uint32(block.timestamp) + months * oneMonth;\\r\\n            user_downlines[owner].push(userAddress);\\r\\n            emit MemberActivate(userAddress, owner, 0, oneMonth * months);\\r\\n        } else {\\r\\n            if (user.expiration > block.timestamp) {\\r\\n                user.expiration += months * oneMonth;\\r\\n            } else {\\r\\n                user.expiration = uint32(block.timestamp) + months * oneMonth;\\r\\n            }\\r\\n            emit MemberRenew(userAddress, user.referrer, 0, oneMonth * months);\\r\\n        }\\r\\n\\r\\n        if (referrer != user.referrer) {\\r\\n            changeMemberReferrer(userAddress, referrer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function freeVIPMembership(\\r\\n        address userAddress,\\r\\n        uint32 months\\r\\n    ) external onlyGovernors {\\r\\n        User storage user = users[userAddress];\\r\\n        require(user.join_date != 0, \\\"User is not a member.\\\");\\r\\n\\r\\n        if (user_vip_expiration[userAddress] > block.timestamp) {\\r\\n            user_vip_expiration[userAddress] += months * oneMonth;\\r\\n        } else {\\r\\n            user_vip_expiration[userAddress] =\\r\\n                uint32(block.timestamp) +\\r\\n                months *\\r\\n                oneMonth;\\r\\n        }\\r\\n        if (user.expiration < user_vip_expiration[userAddress]) {\\r\\n            user.expiration = uint32(user_vip_expiration[userAddress]);\\r\\n        }\\r\\n        emit MemberRenew(userAddress, user.referrer, 0, oneMonth * months);\\r\\n    }\\r\\n\\r\\n    function changeMemberReferrer(\\r\\n        address userAddress,\\r\\n        address newReferrer\\r\\n    ) public onlyGovernors {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        bool found;\\r\\n        uint256 length = user_downlines[user.referrer].length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            if (user_downlines[user.referrer][i] == userAddress) {\\r\\n                found = true;\\r\\n                user_downlines[user.referrer][i] = user_downlines[\\r\\n                    user.referrer\\r\\n                ][length - 1];\\r\\n                user_downlines[user.referrer].pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(found, \\\"User not found.\\\");\\r\\n        user.referrer = newReferrer;\\r\\n        user_downlines[newReferrer].push(userAddress);\\r\\n        emit MemberUpdate(userAddress, userAddress, newReferrer);\\r\\n    }\\r\\n\\r\\n    function transferMembership(\\r\\n        address oldAddress,\\r\\n        address newAddress\\r\\n    ) external onlyGovernors {\\r\\n        User storage oldUser = users[oldAddress];\\r\\n        User storage newUser = users[newAddress];\\r\\n        require(oldUser.join_date != 0, \\\"Old Address isn't a member.\\\");\\r\\n        require(newUser.join_date == 0, \\\"New User is already a member.\\\");\\r\\n\\r\\n        // Assigns properties of old user to the new user\\r\\n        newUser.join_date = oldUser.join_date;\\r\\n        newUser.referrer = oldUser.referrer;\\r\\n        newUser.expiration = oldUser.expiration;\\r\\n        newUser.userid = oldUser.userid;\\r\\n        userids[oldUser.userid] = newAddress;\\r\\n\\r\\n        // Updates downline's referrer from old Address to newAddress\\r\\n        uint256 length = user_downlines[oldAddress].length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            users[user_downlines[oldAddress][i]].referrer = newAddress;\\r\\n            user_downlines[newAddress].push(user_downlines[oldAddress][i]);\\r\\n        }\\r\\n\\r\\n        // deletes old user's properties\\r\\n        delete users[oldAddress];\\r\\n        delete user_downlines[oldAddress];\\r\\n\\r\\n        // transfer old's token to new address\\r\\n        uint256 oldBalance = payment0.balanceOf(oldAddress);\\r\\n        if (oldBalance > 0) {\\r\\n            payment0.governanceTransfer(oldAddress, newAddress, oldBalance);\\r\\n        }\\r\\n        emit MemberUpdate(oldAddress, newAddress, newUser.referrer);\\r\\n    }\\r\\n\\r\\n    function tokenTransfer(address addr, uint256 amount) public onlyGovernors {\\r\\n        payment0.transfer(addr, amount);\\r\\n    }\\r\\n\\r\\n    function setOperating(bool val) external onlyGovernors {\\r\\n        operating = val;\\r\\n    }\\r\\n\\r\\n    function getLeadershipAdmins()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory, uint16[] memory)\\r\\n    {\\r\\n        uint256 length = leadership_admins.length;\\r\\n        address[] memory addrs = new address[](length);\\r\\n        uint16[] memory percentages = new uint16[](length);\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            addrs[i] = leadership_admins[i].addr;\\r\\n            percentages[i] = leadership_admins[i].percentage;\\r\\n        }\\r\\n        return (addrs, percentages);\\r\\n    }\\r\\n\\r\\n    function getLeadershipLeaders()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory, uint16[] memory)\\r\\n    {\\r\\n        uint256 length = leadership_addresses.length;\\r\\n        uint16[] memory percentages = new uint16[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            percentages[i] = leadership_percentage[leadership_addresses[i]];\\r\\n        }\\r\\n\\r\\n        return (leadership_addresses, percentages);\\r\\n    }\\r\\n\\r\\n    function changeTokenPerUSD(uint256 val) public onlyGovernors {\\r\\n        tokensPer1USD = val;\\r\\n    }\\r\\n\\r\\n    function myBalanceIn(\\r\\n        uint256 index\\r\\n    ) external view returns (uint256 balance, address addr) {\\r\\n        addr = msg.sender;\\r\\n        if (index == 0) {\\r\\n            balance = payment0.balanceOf(msg.sender);\\r\\n        } else if (index == 1) {\\r\\n            balance = payment1.balanceOf(msg.sender);\\r\\n        } else if (index == 2) {\\r\\n            balance = payment2.balanceOf(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function purchasePlan(\\r\\n        uint256 plan,\\r\\n        uint256 method,\\r\\n        address referrer\\r\\n    ) external payable whenOperating {\\r\\n        require(plan < 4 && method < 4, \\\"Invalid Input\\\");\\r\\n\\r\\n        uint256 totalPercentageConsumed;\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint256 priceAmount;\\r\\n        uint32 dayAmount;\\r\\n\\r\\n        if (plan == 0) {\\r\\n            dayAmount = 3 * oneMonth;\\r\\n            priceAmount = 50 ether;\\r\\n        } else if (plan == 1) {\\r\\n            dayAmount = 7 * oneMonth;\\r\\n            priceAmount = 100 ether;\\r\\n        } else if (plan == 2) {\\r\\n            dayAmount = 12 * oneMonth;\\r\\n            priceAmount = 150 ether;\\r\\n        } else if (plan == 3) {\\r\\n            dayAmount = 24 * oneMonth;\\r\\n            priceAmount = 500 ether;\\r\\n        } else if (plan == 4) {\\r\\n            require(\\r\\n                user.join_date + 3 * oneMonth == user.expiration,\\r\\n                \\\"Only available for users who availed 3 months\\\"\\r\\n            );\\r\\n            require(\\r\\n                user.join_date + 3 * oneMonth > block.timestamp,\\r\\n                \\\"Only available within 3 months.\\\"\\r\\n            );\\r\\n            dayAmount = 9 * oneMonth;\\r\\n            priceAmount = 100 ether;\\r\\n        }\\r\\n\\r\\n        latestPaymentMethod = method;\\r\\n\\r\\n        totalPayment += priceAmount;\\r\\n\\r\\n        uint256 totalTokens = priceAmount;\\r\\n\\r\\n        if (method == 0) {\\r\\n            // OPX\\r\\n            totalTokens = tokensPer1USD * priceAmount;\\r\\n            payment0.governanceTransfer(msg.sender, address(this), totalTokens);\\r\\n        } else if (method == 1) {\\r\\n            // USDT\\r\\n            totalTokens = priceAmount / 1e12;\\r\\n            payment1.transferFrom(msg.sender, address(this), totalTokens);\\r\\n        } else if (method == 2) {\\r\\n            // DAI\\r\\n            payment2.transferFrom(msg.sender, address(this), priceAmount);\\r\\n        } else if (method == 3) {\\r\\n            // MATIC\\r\\n            uint256 usdAmount = getMaticTOUSDRate(msg.value);\\r\\n            if (usdAmount < priceAmount) {\\r\\n                require(\\r\\n                    100_0 - ((usdAmount * 100_0) / priceAmount) <= 1_0,\\r\\n                    \\\"Slippage exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n            totalTokens = msg.value;\\r\\n        }\\r\\n\\r\\n        User storage referrerUser;\\r\\n\\r\\n        if (user.expiration == 0) {\\r\\n            // free 1 month to referrer\\r\\n            if (users[referrer].expiration > block.timestamp) {\\r\\n                users[referrer].expiration +=\\r\\n                    oneMonth *\\r\\n                    uint32(freeMonthsForNewInvite);\\r\\n            } else {\\r\\n                users[referrer].expiration =\\r\\n                    uint32(block.timestamp) +\\r\\n                    oneMonth *\\r\\n                    uint32(freeMonthsForNewInvite);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (plan == 3) {\\r\\n            if (user_vip_expiration[msg.sender] > block.timestamp) {\\r\\n                user_vip_expiration[msg.sender] += dayAmount;\\r\\n            } else {\\r\\n                user_vip_expiration[msg.sender] =\\r\\n                    uint32(block.timestamp) +\\r\\n                    dayAmount;\\r\\n            }\\r\\n            user.expiration = uint32(user_vip_expiration[msg.sender]);\\r\\n        } else {\\r\\n            if (user.expiration > block.timestamp) {\\r\\n                user.expiration += dayAmount;\\r\\n            } else {\\r\\n                user.expiration = uint32(block.timestamp) + dayAmount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (user.join_date == 0) {\\r\\n            if (users[referrer].join_date == 0) {\\r\\n                User storage newUser = users[referrer];\\r\\n                newUser.join_date = uint32(block.timestamp);\\r\\n                newUser.referrer = owner;\\r\\n                newUser.userid = uint32(++totalMembers);\\r\\n                userids[newUser.userid] = referrer;\\r\\n                user_downlines[owner].push(referrer);\\r\\n                emit MemberActivate(referrer, owner, 0, 0);\\r\\n            }\\r\\n            user.referrer = referrer;\\r\\n            user.join_date = uint32(block.timestamp);\\r\\n\\r\\n            user.userid = uint32(++totalMembers);\\r\\n            userids[user.userid] = msg.sender;\\r\\n\\r\\n            user_downlines[referrer].push(msg.sender);\\r\\n\\r\\n            referrerUser = users[user.referrer];\\r\\n            if (\\r\\n                referrerUser.join_date + oneMonth > block.timestamp &&\\r\\n                user_downlines[referrer].length == 5\\r\\n            ) {\\r\\n                user.expiration += 3 * oneMonth;\\r\\n            }\\r\\n            emit MemberActivate(msg.sender, referrer, priceAmount, dayAmount);\\r\\n        } else {\\r\\n            referrer = user.referrer;\\r\\n            referrerUser = users[user.referrer];\\r\\n            emit MemberRenew(msg.sender, referrer, priceAmount, dayAmount);\\r\\n        }\\r\\n\\r\\n        if (plan == 3 && user_vip_expiration[referrer] < block.timestamp) {\\r\\n            processPayout(referrer, (totalTokens * 10) / divider, 0);\\r\\n            emit MemberCommission(\\r\\n                referrer,\\r\\n                referrer,\\r\\n                msg.sender,\\r\\n                0,\\r\\n                uint128((totalTokens * 10) / divider),\\r\\n                uint128(method)\\r\\n            );\\r\\n\\r\\n            totalPercentageConsumed += 10 * 100;\\r\\n        } else {\\r\\n            processPayout(referrer, (totalTokens * directBonus) / divider, 0);\\r\\n            emit MemberCommission(\\r\\n                referrer,\\r\\n                referrer,\\r\\n                msg.sender,\\r\\n                0,\\r\\n                uint128((totalTokens * directBonus) / divider),\\r\\n                uint128(method)\\r\\n            );\\r\\n\\r\\n            totalPercentageConsumed += directBonus * 100;\\r\\n        }\\r\\n\\r\\n        ++cycleCount[referrer];\\r\\n\\r\\n        checkForVIPEligibility(referrer);\\r\\n\\r\\n        address upline = referrerUser.referrer;\\r\\n\\r\\n        if (upline != address(0) && upline != referrer) {\\r\\n            if (cycleCount[referrer] % 5 == 0) {\\r\\n                if (\\r\\n                    plan == 3 && user_vip_expiration[upline] < block.timestamp\\r\\n                ) {\\r\\n                    processPayout(\\r\\n                        upline,\\r\\n                        (totalTokens * secondLevel) / divider,\\r\\n                        0\\r\\n                    );\\r\\n                    totalPercentageConsumed += secondLevel * 100;\\r\\n\\r\\n                    emit MemberCommission(\\r\\n                        upline,\\r\\n                        referrer,\\r\\n                        msg.sender,\\r\\n                        1,\\r\\n                        uint128((totalTokens * secondLevel) / divider),\\r\\n                        uint128(method)\\r\\n                    );\\r\\n                } else {\\r\\n                    processPayout(\\r\\n                        upline,\\r\\n                        (totalTokens * cycleBonus) / divider,\\r\\n                        0\\r\\n                    );\\r\\n                    totalPercentageConsumed += cycleBonus * 100;\\r\\n\\r\\n                    emit MemberCommission(\\r\\n                        upline,\\r\\n                        referrer,\\r\\n                        msg.sender,\\r\\n                        1,\\r\\n                        uint128((totalTokens * cycleBonus) / divider),\\r\\n                        uint128(method)\\r\\n                    );\\r\\n                }\\r\\n            } else {\\r\\n                processPayout(upline, (totalTokens * secondLevel) / divider, 0);\\r\\n                totalPercentageConsumed += secondLevel * 100;\\r\\n\\r\\n                emit MemberCommission(\\r\\n                    upline,\\r\\n                    referrer,\\r\\n                    msg.sender,\\r\\n                    1,\\r\\n                    uint128((totalTokens * secondLevel) / divider),\\r\\n                    uint128(method)\\r\\n                );\\r\\n            }\\r\\n            for (uint256 i = 0; i < 8; ++i) {\\r\\n                if (upline == users[upline].referrer) break;\\r\\n                upline = users[upline].referrer;\\r\\n                if (upline == address(0)) break;\\r\\n                processPayout(upline, (totalTokens * upperLevel) / divider, 0);\\r\\n                totalPercentageConsumed += upperLevel * 100;\\r\\n\\r\\n                emit MemberCommission(\\r\\n                    upline,\\r\\n                    referrer,\\r\\n                    msg.sender,\\r\\n                    uint8(i) + 2,\\r\\n                    uint128((totalTokens * upperLevel) / divider),\\r\\n                    uint128(method)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // marketing and liquidity\\r\\n        if (cycleCount[referrer] % 5 != 0) {\\r\\n            uint256 marketingAmount = (totalTokens * 10) / divider;\\r\\n            uint256 liquidityAmount = (totalTokens * 10) / divider;\\r\\n            processPayout(marketingAddress, marketingAmount, 2);\\r\\n            processPayout(liquidityAddress, liquidityAmount, 2);\\r\\n\\r\\n            totalPercentageConsumed += 20_00;\\r\\n        }\\r\\n\\r\\n        // admins\\r\\n        uint256 length = leadership_admins.length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            processPayout(\\r\\n                leadership_admins[i].addr,\\r\\n                (totalTokens * leadership_admins[i].percentage) / 100_00,\\r\\n                1\\r\\n            );\\r\\n\\r\\n            emit MemberCommission(\\r\\n                leadership_admins[i].addr,\\r\\n                referrer,\\r\\n                msg.sender,\\r\\n                100,\\r\\n                uint128(\\r\\n                    (totalTokens * leadership_admins[i].percentage) / 100_00\\r\\n                ),\\r\\n                uint128(method)\\r\\n            );\\r\\n\\r\\n            totalPercentageConsumed += leadership_admins[i].percentage;\\r\\n        }\\r\\n\\r\\n        //leaders\\r\\n        address current_upline = referrer;\\r\\n        uint256 current_percentage;\\r\\n        for (uint256 i = 0; i < 20; ++i) {\\r\\n            if (current_upline == address(0)) break;\\r\\n            current_percentage = leadership_percentage[current_upline];\\r\\n            if (current_percentage > 0) {\\r\\n                if (totalPercentageConsumed + current_percentage > 100_00) {\\r\\n                    current_percentage = 100_00 - totalPercentageConsumed;\\r\\n                }\\r\\n                processPayout(\\r\\n                    current_upline,\\r\\n                    (totalTokens * current_percentage) / 100_00,\\r\\n                    1\\r\\n                );\\r\\n\\r\\n                emit MemberCommission(\\r\\n                    current_upline,\\r\\n                    referrer,\\r\\n                    msg.sender,\\r\\n                    101,\\r\\n                    uint128((totalTokens * current_percentage) / 100_00),\\r\\n                    uint128(method)\\r\\n                );\\r\\n\\r\\n                totalPercentageConsumed += current_percentage;\\r\\n                if (totalPercentageConsumed >= 100_00) break;\\r\\n            }\\r\\n            current_upline = users[current_upline].referrer;\\r\\n        }\\r\\n\\r\\n        // left over\\r\\n        if (totalPercentageConsumed < 100_00) {\\r\\n            uint256 leftOverAmount = (totalTokens *\\r\\n                (100_00 - totalPercentageConsumed)) / 100_00;\\r\\n            processPayout(leftoverAddress, leftOverAmount, 2);\\r\\n        }\\r\\n\\r\\n        // advertRegistration\\r\\n        OPXAdvertInterface(advertAddress).manualRegistration(\\r\\n            msg.sender,\\r\\n            referrer\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getUserDownlinesLength(\\r\\n        address addr\\r\\n    ) external view returns (uint256) {\\r\\n        return user_downlines[addr].length;\\r\\n    }\\r\\n\\r\\n    function getUserDownlines(\\r\\n        uint256 offset,\\r\\n        address addr\\r\\n    ) external view returns (address[] memory, uint32[] memory) {\\r\\n        uint256 length = user_downlines[addr].length;\\r\\n        address[] memory downlines = new address[](10);\\r\\n        uint32[] memory expirations = new uint32[](10);\\r\\n        for (uint256 i = 0; i < 10; ++i) {\\r\\n            if (i + offset <= length) break;\\r\\n            downlines[i] = user_downlines[addr][i + offset];\\r\\n            expirations[i] = users[downlines[i]].expiration;\\r\\n        }\\r\\n        return (downlines, expirations);\\r\\n    }\\r\\n\\r\\n    function getMaticTOUSDRate(uint256 amountIn) public view returns (uint256) {\\r\\n        require(amountIn > 0, \\\"Insufficient input amount provided\\\");\\r\\n        (uint112 reserveIn, uint112 reserveOut, ) = pair.getReserves();\\r\\n        require(reserveIn > 0 && reserveOut > 0, \\\"Insufficient liquidity\\\");\\r\\n        uint amountInWithFee = amountIn * 997;\\r\\n        uint numerator = amountInWithFee * reserveOut;\\r\\n        uint denominator = reserveIn * 1000 + amountInWithFee;\\r\\n        return numerator / denominator;\\r\\n    }\\r\\n\\r\\n    function getRequiredMaticForUSD(\\r\\n        uint amountOut\\r\\n    ) public view returns (uint amountIn) {\\r\\n        require(amountOut > 0, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        (uint112 reserveIn, uint112 reserveOut, ) = pair.getReserves();\\r\\n        require(reserveIn > 0 && reserveOut > 0, \\\"INSUFFICIENT_LIQUIDITY\\\");\\r\\n        uint numerator = reserveIn * amountOut * 1000;\\r\\n        uint denominator = (reserveOut - amountOut) * 997;\\r\\n        amountIn = numerator / denominator + 1;\\r\\n    }\\r\\n\\r\\n    function claimCommissions() external whenOperating {\\r\\n        for (uint256 method = 0; method < 4; ++method) {\\r\\n            uint256 claimable = user_commissions[msg.sender][method].claimable;\\r\\n            if (claimable == 0) continue;\\r\\n            user_commissions[msg.sender][method].total_claimed += uint128(\\r\\n                claimable\\r\\n            );\\r\\n            user_commissions[msg.sender][method].claimable = 0;\\r\\n            if (method == 0) {\\r\\n                payment0.transfer(msg.sender, claimable);\\r\\n            } else if (method == 1) {\\r\\n                payment1.transfer(msg.sender, claimable);\\r\\n            } else if (method == 2) {\\r\\n                payment2.transfer(msg.sender, claimable);\\r\\n            } else if (method == 3) {\\r\\n                payable(msg.sender).transfer(claimable);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function processPayout(\\r\\n        address addr,\\r\\n        uint256 amount,\\r\\n        uint256 processType\\r\\n    ) internal {\\r\\n        if (processType == 2) {\\r\\n            if (latestPaymentMethod == 0) {\\r\\n                payment0.transfer(addr, amount);\\r\\n            } else if (latestPaymentMethod == 1) {\\r\\n                payment1.transfer(addr, amount);\\r\\n            } else if (latestPaymentMethod == 2) {\\r\\n                payment2.transfer(addr, amount);\\r\\n            } else if (latestPaymentMethod == 3) {\\r\\n                payable(addr).transfer(amount);\\r\\n            }\\r\\n        } else {\\r\\n            // add to user commission\\r\\n            user_commissions[addr][latestPaymentMethod].claimable += uint128(\\r\\n                amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUser(\\r\\n        address addr\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            User memory,\\r\\n            uint256 vip_expiration,\\r\\n            uint128[] memory,\\r\\n            uint128[] memory\\r\\n        )\\r\\n    {\\r\\n        uint128[] memory claimable = new uint128[](4);\\r\\n        uint128[] memory total_claimed = new uint128[](4);\\r\\n        for (uint256 i = 0; i < 4; ++i) {\\r\\n            claimable[i] = user_commissions[addr][i].claimable;\\r\\n            total_claimed[i] = user_commissions[addr][i].total_claimed;\\r\\n        }\\r\\n        return (\\r\\n            users[addr],\\r\\n            user_vip_expiration[addr],\\r\\n            claimable,\\r\\n            total_claimed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function checkForVIPEligibility(address addr) internal {\\r\\n        uint256 length = user_downlines[addr].length;\\r\\n        uint256 count;\\r\\n        uint256 lowestExpiration = users[addr].expiration;\\r\\n        uint256 index;\\r\\n        uint256 current_expiration;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            index = length - 1 - i;\\r\\n            current_expiration = users[user_downlines[addr][index]].expiration;\\r\\n            if (current_expiration > block.timestamp) {\\r\\n                if (current_expiration < lowestExpiration) {\\r\\n                    lowestExpiration = current_expiration;\\r\\n                }\\r\\n                ++count;\\r\\n                if (count >= 10) break;\\r\\n            }\\r\\n        }\\r\\n        if (count >= 10) {\\r\\n            if (user_vip_expiration[addr] < lowestExpiration) {\\r\\n                user_vip_expiration[addr] = uint32(lowestExpiration);\\r\\n                emit MemberUpdate(addr, addr, users[addr].referrer);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernors() {\\r\\n        require(msg.sender == owner || isGovernor[msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenOperating() {\\r\\n        require(operating, \\\"Currently not operating\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event MemberActivate(\\r\\n        address indexed user,\\r\\n        address indexed referrer,\\r\\n        uint256,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    event MemberRenew(\\r\\n        address indexed user,\\r\\n        address indexed referrer,\\r\\n        uint256,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    event MemberUpdate(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress,\\r\\n        address indexed referrer\\r\\n    );\\r\\n\\r\\n    event MemberCommission(\\r\\n        address indexed user,\\r\\n        address indexed referrer,\\r\\n        address indexed referee,\\r\\n        uint8 index,\\r\\n        uint128 amount,\\r\\n        uint128 method\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface ERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function governanceTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface UniswapV2Pair {\\r\\n    function getReserves() external view returns (uint112, uint112, uint32);\\r\\n}\\r\\n\\r\\ninterface OPXAdvertInterface {\\r\\n    function manualRegistration(address, address) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MemberActivate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"method\",\"type\":\"uint128\"}],\"name\":\"MemberCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MemberRenew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"MemberUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"advertAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newReferrer\",\"type\":\"address\"}],\"name\":\"changeMemberReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"changeTokenPerUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycleBonus\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cycleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directBonus\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"months\",\"type\":\"uint32\"}],\"name\":\"freeMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMonthsForNewInvite\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"freeRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"months\",\"type\":\"uint32\"}],\"name\":\"freeVIPMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeadershipAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeadershipLeaders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getMaticTOUSDRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getRequiredMaticForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"join_date\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"userid\",\"type\":\"uint32\"}],\"internalType\":\"struct OPXMembership.User\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"vip_expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserDownlines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserDownlinesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"perms\",\"type\":\"bool\"}],\"name\":\"governanceToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_leftOver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPaymentMethod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leadership_addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leadership_admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leadership_percentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leftoverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"downlines\",\"type\":\"address[]\"}],\"name\":\"manualMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"myBalanceIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneMonth\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract UniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment0\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment1\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment2\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"method\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchasePlan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondLevel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"name\":\"setLeadershipAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"setLeadershipCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setOperating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPer1USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total_earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"transferMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"tweakSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperLevel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_commissions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"claimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"total_claimed\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_downlines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_vip_expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"join_date\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"userid\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OPXMembership", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}