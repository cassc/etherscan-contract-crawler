{"SourceCode": "// This License is not an Open Source license. Copyright 2022. Ozys Co. Ltd. All rights reserved.\r\npragma solidity 0.5.6;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        \r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IRouter {\r\n    function WETH() external view returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IFactory {\r\n    function router() external view returns (address);\r\n    function poolExist(address) external view returns (bool);\r\n    function tokenToPool(address, address) external view returns (address);\r\n}\r\n\r\ninterface IExchange {\r\n    function estimatePos(address, uint) external view returns (uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getCurrentPool() external view returns (uint, uint);\r\n    function fee() external view returns (uint);\r\n    function addTokenLiquidityWithLimit(uint amount0, uint amount1, uint minAmount0, uint minAmount1, address user) external;\r\n}\r\n\r\ninterface IGovernance {\r\n    function factory() external view returns (address);\r\n    function feeShareRate() external view returns (uint);\r\n    function poolVoting() external view returns (address);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract Helper {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant version = \"Helper20220322\";\r\n    address public governance;\r\n    address public factory;\r\n    address public router;\r\n    address public poolVoting;\r\n    address payable public withdraw;\r\n\r\n    constructor(address _governance, address payable _withdraw) public {\r\n        governance = _governance;\r\n        factory = IGovernance(governance).factory();\r\n        poolVoting = IGovernance(governance).poolVoting();\r\n        router = IFactory(factory).router();\r\n\r\n        require(_withdraw != address(0));\r\n        withdraw = _withdraw;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3){\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) /2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n\r\n    function getSwapAmt(address lp, address token, uint256 amtA) public view returns (uint maxSwap, uint estimateTarget) {\r\n        IExchange pool = IExchange(lp);\r\n\r\n        uint fee = pool.fee();\r\n        require(fee < 10000);\r\n\r\n        uint resA = 0;\r\n        bool exist = false;\r\n        if (token == pool.token0()) {\r\n            exist = true;\r\n            (resA, ) = pool.getCurrentPool();\r\n        }\r\n        if (token == pool.token1()) {\r\n            exist = true;\r\n            (, resA) = pool.getCurrentPool();\r\n        }\r\n        require(exist);\r\n\r\n        uint addA = (20000 - fee).mul(20000 - fee).mul(resA);\r\n        uint addB = (10000 - fee).mul(40000).mul(amtA);\r\n        uint sqrtRes = sqrt(resA.mul(addA.add(addB)));\r\n        uint subRes = resA.mul(20000 - fee);\r\n        uint divRes = (10000 - fee).mul(2);\r\n\r\n        maxSwap = (sqrtRes.sub(subRes)).div(divRes);\r\n        estimateTarget = pool.estimatePos(token, maxSwap);\r\n    }\r\n\r\n    function addLiquidityWithETH(address lp, uint inputForLiquidity, uint targetForLiquidity) public payable {\r\n        IFactory Factory = IFactory(factory);\r\n        IRouter Router = IRouter(router);\r\n        IExchange pool = IExchange(lp);\r\n        address WETH = Router.WETH();\r\n\r\n        require(Factory.poolExist(lp));\r\n        require(pool.token0() == Router.WETH());\r\n\r\n        uint amount = msg.value;\r\n\r\n        (uint maxSwap, ) = getSwapAmt(lp, WETH, amount);\r\n        address target = pool.token1();\r\n\r\n        uint balanceTarget = balanceOf(target);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = target;\r\n\r\n        IWETH(WETH).deposit.value(msg.value)();\r\n        approve(WETH, router, maxSwap);\r\n\r\n        Router.swapExactTokensForTokens(maxSwap, 1, path, address(this), block.timestamp + 600);\r\n        balanceTarget = (balanceOf(target)).sub(balanceTarget);\r\n\r\n        require(targetForLiquidity <= balanceTarget);\r\n        require(inputForLiquidity <= (amount).sub(maxSwap));\r\n\r\n        addLiquidity(lp, (amount).sub(maxSwap), balanceTarget, true);\r\n    }\r\n\r\n    function addLiquidityWithToken(address lp, address token, uint amount, uint inputForLiquidity, uint targetForLiquidity) public {\r\n        IFactory Factory = IFactory(factory);\r\n        IRouter Router = IRouter(router);\r\n        IExchange pool = IExchange(lp);\r\n\r\n        require(Factory.poolExist(lp));\r\n        require(token != address(0));\r\n\r\n        require(IERC20(token).transferFrom(msg.sender, address(this), amount));\r\n\r\n        address token0 = pool.token0();\r\n        address token1 = pool.token1();\r\n\r\n        (uint maxSwap,) = getSwapAmt(lp, token, amount);\r\n        address target = token == token0 ? token1 : token0;\r\n\r\n        approve(token, router, maxSwap);\r\n\r\n        uint balanceTarget = balanceOf(target);\r\n            \r\n        {\r\n            address[] memory path = new address[](2);\r\n            path[0] = token;\r\n            path[1] = target;\r\n\r\n            Router.swapExactTokensForTokens(maxSwap, 1, path, address(this), block.timestamp + 600);\r\n        }\r\n        balanceTarget = (balanceOf(target)).sub(balanceTarget);\r\n\r\n        require(targetForLiquidity <= balanceTarget);\r\n        require(inputForLiquidity <= (amount).sub(maxSwap));\r\n\r\n        if (token == token0) {\r\n            addLiquidity(lp, (amount).sub(maxSwap), balanceTarget, false);\r\n        } else {\r\n            addLiquidity(lp, balanceTarget, (amount).sub(maxSwap), false);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(address lp, uint inputA, uint inputB, bool isETH) private {\r\n        IExchange pool = IExchange(lp);\r\n        IRouter Router = IRouter(router);\r\n        address WETH = Router.WETH();\r\n\r\n        address token0 = pool.token0();\r\n        address token1 = pool.token1();\r\n\r\n        uint diffA = balanceOf(token0);\r\n        uint diffB = balanceOf(token1);\r\n        \r\n        approve(token0, lp, inputA);\r\n        approve(token1, lp, inputB);\r\n\r\n        pool.addTokenLiquidityWithLimit(inputA, inputB, 1, 1, address(this));\r\n\r\n        diffA = (diffA).sub(balanceOf(token0));\r\n        diffB = (diffB).sub(balanceOf(token1));\r\n\r\n        transfer(lp, msg.sender, balanceOf(lp));\r\n        if (inputA > diffA) {\r\n            if (isETH) {\r\n                IWETH(WETH).withdraw(inputA.sub(diffA));\r\n                (bool success, ) = msg.sender.call.value(inputA.sub(diffA))(\"\");\r\n                require(success, 'Helper: ETH transfer failed');\r\n            } else {\r\n                transfer(token0, msg.sender, (inputA).sub(diffA));\r\n            }\r\n        }\r\n            \r\n        if (inputB > diffB)\r\n            transfer(token1, msg.sender, (inputB).sub(diffB));\r\n    }\r\n\r\n    function balanceOf(address token) private view returns (uint) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    function approve(address token, address spender, uint amount) private {\r\n        require(IERC20(token).approve(spender, amount));\r\n    }\r\n\r\n    function transfer(address token, address payable to, uint amount) private {\r\n        if (amount == 0) return;\r\n\r\n        if (token == address(0)) {\r\n            (bool success, ) = to.call.value(amount)(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        }\r\n        else{\r\n            require(IERC20(token).transfer(to, amount));\r\n        }\r\n    }\r\n\r\n    function inCaseTokensGetStuck(address token) public {\r\n        require(msg.sender == withdraw);\r\n\r\n        transfer(token, withdraw, balanceOf(token));\r\n    }\r\n\r\n    function () external payable {}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lp\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amtA\",\"type\":\"uint256\"}],\"name\":\"getSwapAmt\",\"outputs\":[{\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"name\":\"estimateTarget\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lp\",\"type\":\"address\"},{\"name\":\"inputForLiquidity\",\"type\":\"uint256\"},{\"name\":\"targetForLiquidity\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lp\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"inputForLiquidity\",\"type\":\"uint256\"},{\"name\":\"targetForLiquidity\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_governance\",\"type\":\"address\"},{\"name\":\"_withdraw\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Helper", "CompilerVersion": "v0.5.6+commit.b259423e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005edac74e6b39f050bfa8001984cc9677d1721893000000000000000000000000b9e8e1e6440b3120aadd12cfff292d91a1a48d23", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0c6e7a2f58ff7b4a949574cb8540cfecf39a98bcb73a300c8bbf224ebc8dbc0e"}