{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/config/production/LockedWombatStakingConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\n/**\\n * @dev The base unit for times in seconds.\\n */\\n// For production, the base unit is one day.\\nuint256 constant BASE_TIME_UNIT_SECONDS = 24 * 60 * 60;\\n\"\r\n    },\r\n    \"contracts/LockedWombatStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;// SPDX-License-Identifier: UNLICENSED\\nimport \\\"../openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/security/Pausable.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport \\\"@config/LockedWombatStakingConfig.sol\\\";\\n\\ncontract LockedWombatStaking is Ownable, Pausable {\\n\\n    /**\\n     * @dev Constant defining how many seconds there are in a day.\\n     */\\n    uint256 constant SECONDS_DAY = BASE_TIME_UNIT_SECONDS;\\n\\n    /**\\n     * @dev Constant defining how many seconds there are in a year. A year is defined as 360 days\\n     * for the purpose of this smart contract.\\n     */\\n    uint256 constant SECONDS_YEAR = 360 * SECONDS_DAY;\\n\\n    /**\\n     * @dev The token that can be staked.\\n     */\\n    IERC20 public immutable token;\\n\\n    /**\\n     * @dev Amount of tokens owned by the smart contract that are used to pay out rewards. This is\\n     * used to ensure we never use other users funds to payout rewards so we don't turn into a ponzi\\n     * scheme.\\n     */\\n    uint256 public rewardPool;\\n\\n    /**\\n     * @dev Data for a locked position by a user\\n     */\\n    struct LockedStake {\\n        /**\\n         * @dev Unique identifier for the locked stake\\n         */\\n        uint256 id;\\n\\n        /**\\n         * @dev The amount of tokens locked\\n         */\\n        uint256 amount;\\n\\n        /**\\n         * @dev Unix timestamp in seconds when the tokens were locked\\n         */\\n        uint256 startAt;\\n\\n        /**\\n         * @dev Unix timestamp in seconds when the lock ends (afterwards they can be redeemed)\\n         */\\n        uint256 endAt;\\n\\n        /**\\n         * @dev The amount of tokens already claimed as rewards\\n         */\\n        uint256 rewardClaimed;\\n\\n        /**\\n         * @dev The total amount of tokens rewarded\\n         */\\n        uint256 totalReward;\\n\\n        /**\\n         * @dev The APR on the position in percent\\n         */\\n        uint16 apr;\\n    }\\n\\n    /**\\n     * @dev Event emitted when a locked stake is created by someone\\n     * @param from The address that staked\\n     * @param stake The stake that was created\\n     */\\n    event LockedStakeCreated(address indexed from, LockedStake stake);\\n\\n    /**\\n     * @dev Event emitted when someone claims the reward of a locked stake\\n     * @param from The address that claimed\\n     * @param id The identifier of the position\\n     * @param reward The reward paid out\\n     */\\n    event RewardClaimed(address indexed from, uint256 id, uint256 reward);\\n\\n    /**\\n     * @dev Event emitted when someone redeems a locked stake that has expired\\n     * @param from The address that redeemed\\n     * @param id The identifier of the position\\n     */\\n    event LockedStakeRedeemed(address indexed from, uint256 id);\\n\\n    /**\\n     * @dev Sequence storing the ids for locked stakes to be able to uniquely identify them.\\n     */\\n    uint256 private idSequence;\\n\\n    /**\\n     * @dev Mapping of addresses to the created locked stakes of that address\\n     */\\n    mapping(address => LockedStake[]) public lockedStakes;\\n\\n    /**\\n     * @dev Configuration to create a locked stake. Users have to chose a configuration when\\n     * creating a locked stake.\\n     */\\n    struct LockedStakeConfig {\\n        /**\\n         * @dev The APR in percent for this config\\n         */\\n        uint16 apr;\\n\\n        /**\\n         * @dev The amount of days the tokens stay locked when using this config\\n         */\\n        uint16 amountDays;\\n    }\\n\\n    /**\\n     * @dev Sequence to create ids of locked stake configs.\\n     */\\n    uint256 private lockedStakeConfigIdSequence = 0;\\n\\n    /**\\n     * @dev Stores the actual locked stake configurations.\\n     */\\n    mapping(uint256 => LockedStakeConfig) private lockedStakeConfigs;\\n\\n    /**\\n     * @dev The identifiers of the available LockedStakeConfig stored in lockedStakeConfigs. Used\\n     *  so we can have O(1) access to the config when creating a locked stake.\\n     */\\n    uint256[] private configIds;\\n\\n    /**\\n     * @param _token The address of the token that can be staked\\n     * @param _newOwner An address that will be set as the owner of the smart contract.\\n     */\\n    constructor(address _token, address _newOwner) Ownable() Pausable() {\\n        require(_token != address(0), \\\"Token address must not be 0\\\");\\n        token = IERC20(_token);\\n        require(_newOwner != address(0), \\\"New owner must not be 0\\\");\\n        _transferOwnership(_newOwner);\\n        rewardPool = 0;\\n        idSequence = 0;\\n    }\\n\\n    /**\\n     * @dev Pause the smart contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the smart contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Create a new locked stake configuration available to users\\n     * @param apr The APR for the new position in percent\\n     * @param amountDays The amount of days of the locking period for the new config\\n     * @return configId The identifier of the new config\\n     */\\n    function createLockedConfig(\\n        uint16 apr, uint16 amountDays\\n    ) external onlyOwner returns (uint256 configId) {\\n        require(apr > 0, \\\"APR must be greater than 0\\\");\\n        require(amountDays > 0, \\\"amountDays must be greater than 0\\\");\\n        configId = lockedStakeConfigIdSequence++;\\n        LockedStakeConfig storage config = lockedStakeConfigs[configId];\\n        config.apr = apr;\\n        config.amountDays = amountDays;\\n        configIds.push(configId);\\n    }\\n\\n    /**\\n     * @dev Remove a lock configuration by its id. Users won't be able to create new locked stakes\\n     *  with that config anymore.\\n     * @param configId The id of the configuration to remove\\n     */\\n    function removeLockConfig(uint256 configId) external onlyOwner {\\n        // Example:\\n        // configIds = [0, 1, 2, 3], delete 1\\n        // Index to delete = 1. Copy last id to index to delete\\n        // configIds = [0, 3, 2, 3]\\n        // Pop last entry\\n        // configIds = [0, 3, 2]\\n\\n        // Find the index of the config id to remove in the array.\\n        for (uint256 i = 0; i < configIds.length; i++) {\\n            if (configIds[i] == configId) {\\n                // Copy the last config id to the index of the deleted id\\n                configIds[i] = configIds[configIds.length - 1];\\n                // Reduce the array length by 1\\n                configIds.pop();\\n                // Stop here, only one config id to delete\\n                break;\\n            }\\n        }\\n        // Remove the actual config data\\n        delete lockedStakeConfigs[configId];\\n    }\\n\\n    /**\\n     * @dev View struct of LockedStakeConfig that includes the id\\n     */\\n    struct LockedStakeConfigView {\\n        /**\\n         * @dev The identifier of the config id required for lockTokens\\n         */\\n        uint256 id;\\n        /**\\n         * @dev The APR in percent\\n         */\\n        uint16 apr;\\n        /**\\n         * @dev The amount of days the tokens stay locked when using this config\\n         */\\n        uint16 amountDays;\\n    }\\n\\n    /**\\n     * @dev Get all available locked staking configurations\\n     * @return configs All configurations that can be used to create locked stakes\\n     */\\n    function getLockedStakeConfigs() external view returns (LockedStakeConfigView[] memory configs) {\\n        configs = new LockedStakeConfigView[](configIds.length);\\n        for (uint256 i = 0; i < configIds.length; i++) {\\n            uint256 configId = configIds[i];\\n            LockedStakeConfig memory config = lockedStakeConfigs[configId];\\n            LockedStakeConfigView memory configView = LockedStakeConfigView(configId,\\n                config.apr, config.amountDays);\\n            configs[i] = configView;\\n        }\\n        return configs;\\n    }\\n\\n    /**\\n     * @dev Add tokens to the reward pool. Requires ERC20 approval of the $WOMBAT token to this\\n     * smart contract beforehand.\\n     */\\n    function chargeRewardPool(uint256 amount) external {\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"Token transfer failed\\\");\\n        rewardPool += amount;\\n    }\\n\\n    /**\\n     * @dev Remove tokens from the reward pool. Can only be called by the owner.\\n     * @param amount The amount of tokens to remove\\n     * @param to The address to transfer the tokens to\\n     */\\n    function drainRewardPool(uint256 amount, address to) external onlyOwner {\\n        require(amount <= rewardPool, \\\"Pool too small\\\");\\n        require(token.transfer(to, amount), \\\"Token transfer failed\\\");\\n        rewardPool -= amount;\\n    }\\n\\n    /**\\n     * @dev Create a locked position. Requires ERC20 approval of the $WOMBAT token to this smart\\n     * contract beforehand.\\n     * Tokens in a locked position can be released after a certain amount of days, gaining APR\\n     * during that time. The so-far accumulated reward can be claimed in between as well.\\n     * @param configId The LockedStakeConfig to create the lock with\\n     * @param amount The amount of tokens to lock.\\n     */\\n    function lockTokens(uint256 configId, uint256 amount) external whenNotPaused {\\n        LockedStakeConfig memory config = lockedStakeConfigs[configId];\\n        require(config.apr > 0, \\\"Config does not exist\\\");\\n        require(amount > 0, \\\"Must stake more than 0\\\");\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"Token transfer failed\\\");\\n        uint256 startAt = block.timestamp;\\n        uint256 endAt = startAt + config.amountDays * SECONDS_DAY;\\n        LockedStake memory stake = LockedStake(idSequence, amount, startAt, endAt, 0, 0, config.apr);\\n        // Increase the id sequence for the next locked stake created\\n        idSequence = idSequence + 1;\\n        uint256 reward = calculateReward(stake, endAt);\\n        stake.totalReward = reward;\\n        require(rewardPool >= reward, \\\"Not enough tokens in reward pool\\\");\\n        rewardPool -= reward;\\n        lockedStakes[msg.sender].push(stake);\\n        emit LockedStakeCreated(msg.sender, stake);\\n    }\\n\\n    /**\\n     * @dev Get the locked stakes of an address\\n     *  This is required to get all locked stakes of an address as the generated accessor for\\n     *  lockedStakes includes the array index.\\n     * @param owner The address to get the locked stakes for\\n     * @return All non-redeemed locked stakes for the given address\\n     */\\n    function getLockedStakes(address owner) external view returns (LockedStake[] memory) {\\n        return lockedStakes[owner];\\n    }\\n\\n    /**\\n     * @dev Claim the so-far accumulated reward of a locked position.\\n     * @param index The index of the locked position in the array of locked stakes for the message\\n     * sender\\n     */\\n    function claimReward(uint256 index) external whenNotPaused {\\n        LockedStake[] storage stakes = lockedStakes[msg.sender];\\n        require(index < stakes.length, \\\"Index does not exist\\\");\\n        LockedStake storage stake = stakes[index];\\n        uint256 payout = calculatePayout(stake, block.timestamp);\\n        if (payout > 0) {\\n            require(token.transfer(msg.sender, payout), \\\"Token transfer failed\\\");\\n            stake.rewardClaimed += payout;\\n            emit RewardClaimed(msg.sender, stake.id, payout);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the payout for a locked position\\n     * @param from The address to calculate the payout for\\n     * @param index The index of the locked position in the array of locked stakes for the message\\n     * sender\\n     * @param timestamp The timestamp for which to calculate the payout.\\n     * @return The payout that can be claimed at the given timestamp\\n     */\\n    function calculatePayout(\\n        address from, uint256 index, uint256 timestamp\\n    ) external view returns (uint256) {\\n        LockedStake[] memory stakes = lockedStakes[from];\\n        if (index >= stakes.length) {\\n            // Don't fail but just return 0 if the stake does not exist\\n            return 0;\\n        }\\n        LockedStake memory stake = stakes[index];\\n        return calculatePayout(stake, timestamp);\\n    }\\n\\n    /**\\n     * @dev Redeem a locked position. This is only possible after it has expired. It will transfer\\n     * the initial investment plus any outstanding reward back to the owner.\\n     * @param index The index of the locked position in the array of locked stakes for the message\\n     * sender\\n     */\\n    function redeemLocked(uint256 index) external whenNotPaused {\\n        LockedStake[] storage stakes = lockedStakes[msg.sender];\\n        require(index < stakes.length, \\\"Index does not exist\\\");\\n        LockedStake storage stake = stakes[index];\\n        require(stake.endAt <= block.timestamp, \\\"Not redeemable yet\\\");\\n        uint256 remainingReward = stake.totalReward - stake.rewardClaimed;\\n        uint256 totalAmount = stake.amount + remainingReward;\\n        require(token.transfer(msg.sender, totalAmount), \\\"Token transfer failed\\\");\\n        emit LockedStakeRedeemed(msg.sender, stake.id);\\n\\n        // Delete locked stake from array\\n        if (stakes.length == 1) {\\n            stakes.pop();\\n        } else {\\n            stakes[index] = stakes[stakes.length - 1];\\n            stakes.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the payout for a locked position at a given timestamp. Already paid out\\n     * rewards are taken into account.\\n     * @param stake The position to calculate the payout for\\n     * @param _now The timestamp to calculate the reward for\\n     * @return payout The payout that can be claimed at the given timestamp\\n     */\\n    function calculatePayout(\\n        LockedStake memory stake, uint256 _now\\n    ) private pure returns (uint256 payout) {\\n        // Get the end timestamp. This must be \\\"now\\\" during the locking period, but be capped\\n        // at the end date (otherwise we'd pay out too much after the end).\\n        uint256 end = Math.min(stake.endAt, _now);\\n        uint256 reward = calculateReward(stake, end);\\n        payout = reward - stake.rewardClaimed;\\n    }\\n\\n    /**\\n     * @dev Calculate the reward for a locked position. Already paid out rewards are not taken into\\n     * account.\\n     * @param stake The position to calculate the payout for\\n     * @param _now The timestamp to calculate the reward for\\n     * @return reward The total accumulated reward at the given timestamp\\n     */\\n    function calculateReward(\\n        LockedStake memory stake, uint256 _now\\n    ) private pure returns (uint256 reward) {\\n        uint256 elapsed = _now - stake.startAt;\\n        reward = (stake.amount * stake.apr * elapsed) / (100 * SECONDS_YEAR);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [\r\n      \"@config/=contracts/config/production/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"apr\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct LockedWombatStaking.LockedStake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"name\":\"LockedStakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LockedStakeRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculatePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"apr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountDays\",\"type\":\"uint16\"}],\"name\":\"createLockedConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"configId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"drainRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedStakeConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"apr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountDays\",\"type\":\"uint16\"}],\"internalType\":\"struct LockedWombatStaking.LockedStakeConfigView[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLockedStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"apr\",\"type\":\"uint16\"}],\"internalType\":\"struct LockedWombatStaking.LockedStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"apr\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeemLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configId\",\"type\":\"uint256\"}],\"name\":\"removeLockConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockedWombatStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000c9c7712c83b3c70e7c5e11100d33d9401bdf9dd00000000000000000000000032952ada90fcb312ed69d69cfb41f9d8c30998f2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}