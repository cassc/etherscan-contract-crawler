{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Farms/STSSTSPLUSFARM.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set & change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface ICustomizedRewards {\\r\\n    function trigger(address user, uint256 amount, address yieldToken) external;\\r\\n}\\r\\n\\r\\ncontract StasisPlusFarm is Ownable, IERC20 {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // name and symbol for tokenized contract\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private immutable _decimals;\\r\\n\\r\\n    // Farming Token\\r\\n    address public immutable token;\\r\\n\\r\\n    // Reward Token\\r\\n    address public immutable reward;\\r\\n\\r\\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    // User Info\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // amount of LP tokens staked\\r\\n        uint256 totalExcluded; // tracked reward debt\\r\\n        uint256 index; // index in holders list\\r\\n        bool isFeeExempt; // is fee exempt\\r\\n    }\\r\\n    // Address => UserInfo\\r\\n    mapping ( address => UserInfo ) public userInfo;\\r\\n\\r\\n    // List of all holders\\r\\n    address[] public allHolders;\\r\\n\\r\\n    // Tracks Dividends\\r\\n    uint256 public totalRewards;\\r\\n    uint256 private totalShares;\\r\\n    uint256 private dividendsPerShare;\\r\\n    uint256 private constant precision = 10**18;\\r\\n\\r\\n    // Index of current holder in multi claim\\r\\n    uint256 public currentMultiClaimHolderIndex;\\r\\n\\r\\n    // Minimum token holding amount to have rewards claimed via bounty\\r\\n    uint256 public minHoldingsForAutoClaim = 1;\\r\\n\\r\\n    // minimum pending rewards needed to be auto claimed\\r\\n    uint256 public minPendingRewardsForAutoClaim = 1;\\r\\n\\r\\n    // Deposit And Withdraw Fee\\r\\n    uint256 public depositFee = 40;\\r\\n    uint256 public withdrawFee = 40;\\r\\n    uint256 private constant FEE_DENOM = 1000;\\r\\n\\r\\n    // Deposit And Withdraw Fee Recipient\\r\\n    address public feeRecipient;\\r\\n\\r\\n    // Lets this many users pass in `iterations` when mass claiming if they do not meet the criteria\\r\\n    uint256 public inelligibleClaimsCheck = 50;\\r\\n\\r\\n    // Customizable Rewards Contract\\r\\n    ICustomizedRewards public customizedRewards;\\r\\n\\r\\n    // Contract to go in and out of farms tax free\\r\\n    address public taxlessWithdrawContract;\\r\\n\\r\\n    // Events\\r\\n    event FeeRecipientChanged(address indexed newRecipient);\\r\\n    event FeeChanged(uint256 depositFee, uint256 withdrawFee);\\r\\n    event RewardsDeposited(uint256 amount);\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event RewardClaimed(address indexed user, uint256 reward);\\r\\n    event CustomizedRewardsChanged(address indexed newCustomizedRewards);\\r\\n    event TaxlessWithdrawContractChanged(address indexed newContract);\\r\\n    event MulticlaimIndexReset();\\r\\n    event MinHoldingsForAutoClaimChanged(uint256 newMin);\\r\\n    event MinPendingRewardsForAutoClaimChanged(uint256 newMin);\\r\\n    event InelligibleClaimsCheckChanged(uint256 newCheck);\\r\\n    event FeeExemptChanged(address indexed account, bool isExempt);\\r\\n\\r\\n    constructor(\\r\\n        address token_, \\r\\n        address reward_, \\r\\n        string memory name_, \\r\\n        string memory symbol_,\\r\\n        address feeRecipient_\\r\\n    ){\\r\\n        require(\\r\\n            token_ != address(0) &&\\r\\n            reward_ != address(0),\\r\\n            'Zero Address'\\r\\n        );\\r\\n        token = token_;\\r\\n        reward = reward_;\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = IERC20(token_).decimals();\\r\\n        feeRecipient = feeRecipient_;\\r\\n        emit Transfer(address(0), msg.sender, 0);\\r\\n    }\\r\\n\\r\\n    /** Returns the total number of tokens in existence */\\r\\n    function totalSupply() external view override returns (uint256) { \\r\\n        return totalShares; \\r\\n    }\\r\\n\\r\\n    /** Returns the number of tokens owned by `account` */\\r\\n    function balanceOf(address account) public view override returns (uint256) { \\r\\n        return userInfo[account].amount;\\r\\n    }\\r\\n\\r\\n    /** Returns the number of tokens `spender` can transfer from `holder` */\\r\\n    function allowance(address, address) external pure override returns (uint256) { \\r\\n        return 0; \\r\\n    }\\r\\n    \\r\\n    /** Token Name */\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /** Token Ticker Symbol */\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /** Tokens decimals */\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /** Approves `spender` to transfer `amount` tokens from caller */\\r\\n    function approve(address spender, uint256) public override returns (bool) {\\r\\n        emit Approval(msg.sender, spender, 0);\\r\\n        return true;\\r\\n    }\\r\\n  \\r\\n    /** Transfer Function */\\r\\n    function transfer(address recipient, uint256) external override returns (bool) {\\r\\n        _claimReward(msg.sender);\\r\\n        emit Transfer(msg.sender, recipient, 0);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transferFrom(address, address recipient, uint256) external override returns (bool) {\\r\\n        _claimReward(msg.sender);\\r\\n        emit Transfer(msg.sender, recipient, 0);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setCustomizedRewards(address newCustomizedRewards) external onlyOwner {\\r\\n        require(goodAddress(newCustomizedRewards) == true, 'Invalid Address!');\\r\\n        customizedRewards = ICustomizedRewards(newCustomizedRewards);\\r\\n        emit CustomizedRewardsChanged(newCustomizedRewards);\\r\\n    }\\r\\n\\r\\n    function setFees(uint256 depositFee_, uint256 withdrawFee_) external onlyOwner {\\r\\n        require(\\r\\n            depositFee_ <= FEE_DENOM / 2,\\r\\n            'Deposit Fee Too High'\\r\\n        );\\r\\n        require(\\r\\n            withdrawFee_ <= FEE_DENOM / 2,\\r\\n            'Deposit Fee Too High'\\r\\n        );\\r\\n        depositFee = depositFee_;\\r\\n        withdrawFee = withdrawFee_;\\r\\n        emit FeeChanged(depositFee_, withdrawFee_);\\r\\n    }\\r\\n\\r\\n    function setTaxlessWithdrawContract(address taxlessWithdrawContract_) external onlyOwner {\\r\\n        // require its not the zero\\r\\n        require(\\r\\n            taxlessWithdrawContract_ != address(0),\\r\\n            'Zero Address'\\r\\n        );\\r\\n        // require its not the dead address\\r\\n        require(\\r\\n            taxlessWithdrawContract_ != address(0x000000000000000000000000000000000000dEaD),\\r\\n            'Dead Address'\\r\\n        );\\r\\n\\r\\n        taxlessWithdrawContract = taxlessWithdrawContract_;\\r\\n        emit TaxlessWithdrawContractChanged(taxlessWithdrawContract_);\\r\\n    }\\r\\n\\r\\n    function setFeeRecipient(address newRecipient) external onlyOwner {\\r\\n        require(\\r\\n            newRecipient != address(0),\\r\\n            'Zero Address'\\r\\n        );\\r\\n        feeRecipient = newRecipient;\\r\\n        emit FeeRecipientChanged(newRecipient);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawForeignToken(address token_, uint256 amount) external onlyOwner {\\r\\n        require(\\r\\n            token != token_,\\r\\n            'Cannot Withdraw Farm Token'\\r\\n        );\\r\\n        require(\\r\\n            IERC20(token_).transfer(\\r\\n                msg.sender,\\r\\n                amount\\r\\n            ),\\r\\n            'Failure On Token Withdraw'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawMatic() external onlyOwner {\\r\\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(s);\\r\\n    }\\r\\n\\r\\n    function resetMulticlaimIndex() external onlyOwner {\\r\\n        currentMultiClaimHolderIndex = 0;\\r\\n        emit MulticlaimIndexReset();\\r\\n    }\\r\\n\\r\\n    function setMinHoldingsForAutoClaim(uint256 newMin) external onlyOwner {\\r\\n        require(newMin > 0, 'Must be at least 1 wei of tokens');\\r\\n        minHoldingsForAutoClaim = newMin;\\r\\n        emit MinHoldingsForAutoClaimChanged(newMin);\\r\\n    }\\r\\n\\r\\n    function setMinPendingRewardsForAutoClaim(uint256 newMin) external onlyOwner {\\r\\n        require(newMin > 0, 'Cannot Claim Zero Rewards');\\r\\n        minPendingRewardsForAutoClaim = newMin;\\r\\n        emit MinPendingRewardsForAutoClaimChanged(newMin);\\r\\n    }\\r\\n\\r\\n    function setInelligibleClaimsCheck(uint256 newCheck) external onlyOwner {\\r\\n        inelligibleClaimsCheck = newCheck;\\r\\n        emit InelligibleClaimsCheckChanged(newCheck);\\r\\n    }\\r\\n\\r\\n    function setFeeExempt(address account, bool isExempt) external onlyOwner {\\r\\n        userInfo[account].isFeeExempt = isExempt;\\r\\n        emit FeeExemptChanged(account, isExempt);\\r\\n    }\\r\\n\\r\\n    function rollOverDustIntoRewards(address router_, address STSPlus) external onlyOwner {\\r\\n\\r\\n        // instantiate router\\r\\n        IUniswapV2Router02 router = IUniswapV2Router02(router_);\\r\\n\\r\\n        // amount of STS+ to convert\\r\\n        uint256 amount = IERC20(STSPlus).balanceOf(address(this));\\r\\n        require(amount > 0, 'Zero Amount');\\r\\n\\r\\n        // define swap path\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = STSPlus;\\r\\n        path[1] = reward;\\r\\n\\r\\n        // note STS balance before swap\\r\\n        uint256 before = IERC20(reward).balanceOf(address(this));\\r\\n\\r\\n        // swap STS+ into STS\\r\\n        IERC20(STSPlus).approve(address(router), amount);\\r\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amount, 1, path, address(this), block.timestamp + 100\\r\\n        );\\r\\n\\r\\n        // note amount received from swap\\r\\n        uint256 After = IERC20(reward).balanceOf(address(this));\\r\\n        require(After > before, 'Zero Received');\\r\\n\\r\\n        // add to everyone's pending rewards\\r\\n        _processDividendPerShareIncrease(After - before);\\r\\n\\r\\n    }\\r\\n\\r\\n    function claimRewards() external {\\r\\n        _claimReward(msg.sender);\\r\\n    }\\r\\n\\r\\n    function multiClaim(uint256 iterations) external {\\r\\n\\r\\n        uint256 inelligibleClaims = 0;\\r\\n        for (uint256 i = 0; i < iterations;) {\\r\\n            \\r\\n            // reset index if applicable\\r\\n            if (currentMultiClaimHolderIndex >= allHolders.length) {\\r\\n                currentMultiClaimHolderIndex = 0;\\r\\n            }\\r\\n\\r\\n            // gas efficiency\\r\\n            address user = allHolders[currentMultiClaimHolderIndex];\\r\\n\\r\\n            // claim reward for holder if they pass all checks\\r\\n            if (\\r\\n                userInfo[user].amount >= minHoldingsForAutoClaim &&\\r\\n                pendingRewards(user) >= minPendingRewardsForAutoClaim\\r\\n            ) {\\r\\n                _claimReward(user);\\r\\n            } else {\\r\\n                if (inelligibleClaims < inelligibleClaimsCheck) {\\r\\n                    unchecked {\\r\\n                        ++inelligibleClaims;\\r\\n                        ++currentMultiClaimHolderIndex;\\r\\n                    }\\r\\n                    continue;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // increment loop index and current multi claim holder index\\r\\n            unchecked { ++i; ++currentMultiClaimHolderIndex; }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external {\\r\\n        _withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function taxlessWithdraw(address user, uint256 amount) external {\\r\\n        require(\\r\\n            msg.sender == taxlessWithdrawContract,\\r\\n            'Only Taxless Withdraw Contract'\\r\\n        );\\r\\n        _withdraw(user, amount);\\r\\n    }\\r\\n\\r\\n    function stake(address user, uint256 amount) external {\\r\\n        require(\\r\\n            amount > 0,\\r\\n            'Must Stake Greater Than 0'\\r\\n        );\\r\\n        require(\\r\\n            user != address(0),\\r\\n            'Zero Address'\\r\\n        );\\r\\n\\r\\n        if (userInfo[user].amount > 0) {\\r\\n            _claimReward(user);\\r\\n        } else {\\r\\n            userInfo[user].index = allHolders.length;\\r\\n            allHolders.push(user);\\r\\n        }\\r\\n\\r\\n        // transfer in tokens\\r\\n        uint256 received = _transferIn(token, amount);\\r\\n\\r\\n        // take deposit fee\\r\\n        uint256 fee = msg.sender == taxlessWithdrawContract ? 0 : ( received * depositFee ) / FEE_DENOM;\\r\\n        uint256 credit = received - fee;\\r\\n\\r\\n        // update data\\r\\n        totalShares += credit;\\r\\n        userInfo[user].amount += credit;\\r\\n        userInfo[user].totalExcluded = getCumulativeDividends(userInfo[user].amount);\\r\\n        emit Transfer(address(0), user, credit);\\r\\n\\r\\n        // send fee to fee recipient\\r\\n        if (fee > 0) {\\r\\n            IERC20(token).transfer(feeRecipient, fee);\\r\\n        }\\r\\n        emit Staked(user, credit);\\r\\n    }\\r\\n\\r\\n    function depositRewards(uint256 amount) external {\\r\\n        uint256 received = _transferIn(reward, amount);\\r\\n        _processDividendPerShareIncrease(received);\\r\\n        emit RewardsDeposited(amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address user, uint256 amount) internal {\\r\\n        require(\\r\\n            user != address(0),\\r\\n            'Zero User'\\r\\n        );\\r\\n        require(\\r\\n            amount <= userInfo[user].amount,\\r\\n            'Insufficient Amount'\\r\\n        );\\r\\n        require(\\r\\n            amount > 0,\\r\\n            'Zero Amount'\\r\\n        );\\r\\n        if (userInfo[user].amount > 0) {\\r\\n            _claimReward(user);\\r\\n        }\\r\\n\\r\\n        totalShares -= amount;\\r\\n        userInfo[user].amount -= amount;\\r\\n        userInfo[user].totalExcluded = getCumulativeDividends(userInfo[user].amount);\\r\\n\\r\\n        if (userInfo[user].amount == 0) {\\r\\n\\r\\n            // copy the last element of the array into their index\\r\\n            allHolders[\\r\\n                userInfo[user].index\\r\\n            ] = allHolders[allHolders.length - 1];\\r\\n\\r\\n            // set the index of the last holder to be the removed index\\r\\n            userInfo[\\r\\n                allHolders[allHolders.length - 1]\\r\\n            ].index = userInfo[user].index;\\r\\n\\r\\n            // pop the last element off the array\\r\\n            allHolders.pop();\\r\\n\\r\\n            // save storage space\\r\\n            delete userInfo[user].index;\\r\\n        }\\r\\n\\r\\n        // determine withdraw fee\\r\\n        uint256 fee = msg.sender == taxlessWithdrawContract ? 0 : ( amount * withdrawFee ) / FEE_DENOM;\\r\\n\\r\\n        // send tokens to user less fee\\r\\n        require(\\r\\n            IERC20(token).transfer(user, amount - fee),\\r\\n            'Failure On Token Transfer To Sender'\\r\\n        );\\r\\n\\r\\n        // send fee to fee recipient\\r\\n        if (fee > 0) {\\r\\n            require(\\r\\n                IERC20(token).transfer(feeRecipient, fee),\\r\\n                'Failure On Fee Payment'\\r\\n            );\\r\\n        }\\r\\n        emit Transfer(user, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _processDividendPerShareIncrease(uint256 amount) internal {\\r\\n        unchecked {\\r\\n            totalRewards += amount;\\r\\n        }\\r\\n\\r\\n        if (totalShares > 0) {\\r\\n            unchecked {\\r\\n                dividendsPerShare += ( amount * precision ) / totalShares;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _claimReward(address user) internal {\\r\\n\\r\\n        // exit if zero value locked\\r\\n        if (userInfo[user].amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // fetch pending rewards\\r\\n        uint256 amount = pendingRewards(user);\\r\\n        \\r\\n        // exit if zero rewards\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // update total excluded\\r\\n        userInfo[user].totalExcluded = getCumulativeDividends(userInfo[user].amount);\\r\\n\\r\\n        // send tokens to customized rewards\\r\\n        IERC20(reward).transfer(address(customizedRewards), amount);\\r\\n        customizedRewards.trigger(user, amount, token);\\r\\n        emit RewardClaimed(user, amount);\\r\\n    }\\r\\n\\r\\n    function _transferIn(address _token, uint256 amount) internal returns (uint256) {\\r\\n        require(\\r\\n            IERC20(_token).balanceOf(msg.sender) >= amount,\\r\\n            'Insufficient Balance'\\r\\n        );\\r\\n        require(\\r\\n            IERC20(_token).allowance(msg.sender, address(this)) >= amount,\\r\\n            'Insufficient Allowance'\\r\\n        );\\r\\n        uint256 before = IERC20(_token).balanceOf(address(this));\\r\\n        IERC20(_token).transferFrom(msg.sender, address(this), amount);\\r\\n        uint256 After = IERC20(_token).balanceOf(address(this));\\r\\n        require(\\r\\n            After > before,\\r\\n            'Error On Transfer From'\\r\\n        );\\r\\n        return After - before;\\r\\n    }\\r\\n\\r\\n    function pendingRewards(address shareholder) public view returns (uint256) {\\r\\n        if(userInfo[shareholder].amount == 0){ return 0; }\\r\\n\\r\\n        uint256 shareholderTotalDividends = getCumulativeDividends(userInfo[shareholder].amount);\\r\\n        uint256 shareholderTotalExcluded = userInfo[shareholder].totalExcluded;\\r\\n\\r\\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\\r\\n\\r\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\r\\n    }\\r\\n\\r\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\r\\n        return share.mul(dividendsPerShare).div(precision);\\r\\n    }\\r\\n\\r\\n    function goodAddress(address _target) internal returns (bool) {\\r\\n        if (\\r\\n            _target == DEAD || \\r\\n            _target == ZERO\\r\\n        ) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function viewAllHolders() external view returns (address[] memory) {\\r\\n        return allHolders;\\r\\n    }\\r\\n\\r\\n    function numHolders() external view returns (uint256) {\\r\\n        return allHolders.length;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCustomizedRewards\",\"type\":\"address\"}],\"name\":\"CustomizedRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCheck\",\"type\":\"uint256\"}],\"name\":\"InelligibleClaimsCheckChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"MinHoldingsForAutoClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"MinPendingRewardsForAutoClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MulticlaimIndexReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"TaxlessWithdrawContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMultiClaimHolderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customizedRewards\",\"outputs\":[{\"internalType\":\"contract ICustomizedRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inelligibleClaimsCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingsForAutoClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPendingRewardsForAutoClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"}],\"name\":\"multiClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetMulticlaimIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STSPlus\",\"type\":\"address\"}],\"name\":\"rollOverDustIntoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCustomizedRewards\",\"type\":\"address\"}],\"name\":\"setCustomizedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee_\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCheck\",\"type\":\"uint256\"}],\"name\":\"setInelligibleClaimsCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinHoldingsForAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinPendingRewardsForAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxlessWithdrawContract_\",\"type\":\"address\"}],\"name\":\"setTaxlessWithdrawContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"taxlessWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxlessWithdrawContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StasisPlusFarm", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000074f09c9d8d5f4cf49f28ae755902ee6ca38b8f1f00000000000000000000000045ab8afc660b6c78b7de02cff88e963e34f7941800000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000dab95affe78480fbf5e6b15a2c4f21bc8432913000000000000000000000000000000000000000000000000000000000000000095354532b204661726d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085354532f5354532b000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}