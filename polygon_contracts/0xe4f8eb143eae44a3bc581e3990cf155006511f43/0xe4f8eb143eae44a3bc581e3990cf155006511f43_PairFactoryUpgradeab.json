{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/factories/PairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport '../interfaces/IPairFactory.sol';\\r\\nimport '../Pair.sol';\\r\\n\\r\\ncontract PairFactory is IPairFactory {\\r\\n\\r\\n    bool public isPaused;\\r\\n    address public pauser;\\r\\n    address public pendingPauser;\\r\\n\\r\\n    uint256 public stableFee;\\r\\n    uint256 public volatileFee;\\r\\n    uint256 public stakingNFTFee;\\r\\n    uint256 public MAX_REFERRAL_FEE = 1200; // 12%\\r\\n    uint256 public constant MAX_FEE = 25; // 0.25%\\r\\n\\r\\n    address public feeManager;\\r\\n    address public pendingFeeManager;\\r\\n    address public dibs;                // referral fee handler\\r\\n    address public stakingFeeHandler;   // staking fee handler\\r\\n\\r\\n    mapping(address => mapping(address => mapping(bool => address))) public getPair;\\r\\n    address[] public allPairs;\\r\\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\\r\\n\\r\\n    address internal _temp0;\\r\\n    address internal _temp1;\\r\\n    bool internal _temp;\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, bool stable, address pair, uint);\\r\\n\\r\\n    constructor() {\\r\\n        pauser = msg.sender;\\r\\n        isPaused = false;\\r\\n        feeManager = msg.sender;\\r\\n        stableFee = 4; // 0.04%\\r\\n        volatileFee = 18; // 0.18%\\r\\n        stakingNFTFee = 3000; // 30% of stable/volatileFee\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function pairs() external view returns(address[] memory ){\\r\\n        return allPairs;\\r\\n    }\\r\\n\\r\\n    function setPauser(address _pauser) external {\\r\\n        require(msg.sender == pauser);\\r\\n        pendingPauser = _pauser;\\r\\n    }\\r\\n\\r\\n    function acceptPauser() external {\\r\\n        require(msg.sender == pendingPauser);\\r\\n        pauser = pendingPauser;\\r\\n    }\\r\\n\\r\\n    function setPause(bool _state) external {\\r\\n        require(msg.sender == pauser);\\r\\n        isPaused = _state;\\r\\n    }\\r\\n\\r\\n    function setFeeManager(address _feeManager) external {\\r\\n        require(msg.sender == feeManager, 'not fee manager');\\r\\n        pendingFeeManager = _feeManager;\\r\\n    }\\r\\n\\r\\n    function acceptFeeManager() external {\\r\\n        require(msg.sender == pendingFeeManager, 'not pending fee manager');\\r\\n        feeManager = pendingFeeManager;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setStakingFees(uint256 _newFee) external {\\r\\n        require(msg.sender == feeManager, 'not fee manager');\\r\\n        require(_newFee <= 3000);\\r\\n        stakingNFTFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakingFeeAddress(address _feehandler) external {\\r\\n        require(msg.sender == feeManager, 'not fee manager');\\r\\n        require(_feehandler != address(0), 'addr 0');\\r\\n        stakingFeeHandler = _feehandler;\\r\\n    }\\r\\n\\r\\n    function setDibs(address _dibs) external {\\r\\n        require(msg.sender == feeManager, 'not fee manager');\\r\\n        require(_dibs != address(0), 'address zero');\\r\\n        dibs = _dibs;\\r\\n    }\\r\\n\\r\\n    function setReferralFee(uint256 _refFee) external {\\r\\n        require(msg.sender == feeManager, 'not fee manager');\\r\\n        MAX_REFERRAL_FEE = _refFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setFee(bool _stable, uint256 _fee) external {\\r\\n        require(msg.sender == feeManager, 'not fee manager');\\r\\n        require(_fee <= MAX_FEE, 'fee too high');\\r\\n        require(_fee != 0, 'fee must be nonzero');\\r\\n        if (_stable) {\\r\\n            stableFee = _fee;\\r\\n        } else {\\r\\n            volatileFee = _fee;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getFee(bool _stable) public view returns(uint256) {\\r\\n        return _stable ? stableFee : volatileFee;\\r\\n    }\\r\\n\\r\\n    function pairCodeHash() external pure returns (bytes32) {\\r\\n        return keccak256(type(Pair).creationCode);\\r\\n    }\\r\\n\\r\\n    function getInitializable() external view returns (address, address, bool) {\\r\\n        return (_temp0, _temp1, _temp);\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair) {\\r\\n        require(tokenA != tokenB, 'IA'); // Pair: IDENTICAL_ADDRESSES\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'ZA'); // Pair: ZERO_ADDRESS\\r\\n        require(getPair[token0][token1][stable] == address(0), 'PE'); // Pair: PAIR_EXISTS - single check is sufficient\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\\r\\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\\r\\n        pair = address(new Pair{salt:salt}());\\r\\n        getPair[token0][token1][stable] = pair;\\r\\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        isPair[pair] = true;\\r\\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/factories/PairFactoryUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport '../interfaces/IPairFactory.sol';\\r\\nimport '../Pair.sol';\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract PairFactoryUpgradeable is IPairFactory, OwnableUpgradeable {\\r\\n\\r\\n    bool public isPaused;\\r\\n\\r\\n    uint256 public stableFee;\\r\\n    uint256 public volatileFee;\\r\\n    uint256 public stakingNFTFee;\\r\\n    uint256 public MAX_REFERRAL_FEE; // 12%\\r\\n    uint256 public constant MAX_FEE = 25; // 0.25%\\r\\n\\r\\n    address public feeManager;\\r\\n    address public pendingFeeManager;\\r\\n    address public dibs;                // referral fee handler\\r\\n    address public stakingFeeHandler;   // staking fee handler\\r\\n\\r\\n    mapping(address => mapping(address => mapping(bool => address))) public getPair;\\r\\n    address[] public allPairs;\\r\\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\\r\\n\\r\\n    address internal _temp0;\\r\\n    address internal _temp1;\\r\\n    bool internal _temp;\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, bool stable, address pair, uint);\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == feeManager);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n    function initialize() initializer  public {\\r\\n        __Ownable_init();\\r\\n        isPaused = false;\\r\\n        feeManager = msg.sender;\\r\\n        stableFee = 4; // 0.04%\\r\\n        volatileFee = 18; // 0.18%\\r\\n        stakingNFTFee = 3000; // 30% of stable/volatileFee\\r\\n        MAX_REFERRAL_FEE = 1200; // 12%\\r\\n    }\\r\\n\\r\\n\\r\\n    function allPairsLength() external view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function pairs() external view returns(address[] memory ){\\r\\n        return allPairs;\\r\\n    }\\r\\n\\r\\n    function setPause(bool _state) external {\\r\\n        require(msg.sender == owner());\\r\\n        isPaused = _state;\\r\\n    }\\r\\n\\r\\n    function setFeeManager(address _feeManager) external onlyManager{\\r\\n        pendingFeeManager = _feeManager;\\r\\n    }\\r\\n\\r\\n    function acceptFeeManager() external {\\r\\n        require(msg.sender == pendingFeeManager);\\r\\n        feeManager = pendingFeeManager;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setStakingFees(uint256 _newFee) external onlyManager {\\r\\n        require(_newFee <= 3000);\\r\\n        stakingNFTFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakingFeeAddress(address _feehandler) external onlyManager {\\r\\n        require(_feehandler != address(0));\\r\\n        stakingFeeHandler = _feehandler;\\r\\n    }\\r\\n\\r\\n    function setDibs(address _dibs) external onlyManager {\\r\\n        require(_dibs != address(0));\\r\\n        dibs = _dibs;\\r\\n    }\\r\\n\\r\\n    function setReferralFee(uint256 _refFee) external onlyManager {\\r\\n        MAX_REFERRAL_FEE = _refFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setFee(bool _stable, uint256 _fee) external onlyManager {\\r\\n        require(_fee <= MAX_FEE, 'fee');\\r\\n        require(_fee != 0);\\r\\n        if (_stable) {\\r\\n            stableFee = _fee;\\r\\n        } else {\\r\\n            volatileFee = _fee;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getFee(bool _stable) public view returns(uint256) {\\r\\n        return _stable ? stableFee : volatileFee;\\r\\n    }\\r\\n\\r\\n    function pairCodeHash() external pure returns (bytes32) {\\r\\n        return keccak256(type(Pair).creationCode);\\r\\n    }\\r\\n\\r\\n    function getInitializable() external view returns (address, address, bool) {\\r\\n        return (_temp0, _temp1, _temp);\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair) {\\r\\n        require(tokenA != tokenB, 'IA'); // Pair: IDENTICAL_ADDRESSES\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'ZA'); // Pair: ZERO_ADDRESS\\r\\n        require(getPair[token0][token1][stable] == address(0), 'PE'); // Pair: PAIR_EXISTS - single check is sufficient\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\\r\\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\\r\\n        pair = address(new Pair{salt:salt}());\\r\\n        getPair[token0][token1][stable] = pair;\\r\\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        isPair[pair] = true;\\r\\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDibs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n\\r\\ninterface IDibs {\\r\\n    function reward(address user,bytes32 parentCode,\\r\\n                    uint256 totalFees,uint256 totalVolume,\\r\\n                    address token) external returns(uint256 referralFee);\\r\\n\\r\\n    function findTotalRewardFor(address _user, uint _totalFees) external view returns(uint256 _referralFeeAmount);\\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPair {\\r\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\r\\n    function claimFees() external returns (uint, uint);\\r\\n    function tokens() external view returns (address, address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\r\\n    function getAmountOut(uint, address) external view returns (uint);\\r\\n\\r\\n    function name() external view returns(string memory);\\r\\n    function symbol() external view returns(string memory);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function claimable0(address _user) external view returns (uint);\\r\\n    function claimable1(address _user) external view returns (uint);\\r\\n\\r\\n    function isStable() external view returns(bool);\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPairCallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPairCallee {\\r\\n    function hook(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPairFactory {\\r\\n    function allPairsLength() external view returns (uint);\\r\\n    function isPair(address pair) external view returns (bool);\\r\\n    function allPairs(uint index) external view returns (address);\\r\\n    function pairCodeHash() external pure returns (bytes32);\\r\\n    function getPair(address tokenA, address token, bool stable) external view returns (address);\\r\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nlibrary Math {\\r\\n    function max(uint a, uint b) internal pure returns (uint) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n    function min(uint a, uint b) internal pure returns (uint) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n    function cbrt(uint256 n) internal pure returns (uint256) { unchecked {\\r\\n        uint256 x = 0;\\r\\n        for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\r\\n            x <<= 1;\\r\\n            uint256 z = 3 * x * (x + 1) + 1;\\r\\n            if (n / y >= z) {\\r\\n                n -= y * z;\\r\\n                x += 1;\\r\\n            }\\r\\n        }\\r\\n        return x;\\r\\n    }}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport './libraries/Math.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IPair.sol';\\r\\nimport './interfaces/IDibs.sol';\\r\\nimport './interfaces/IPairCallee.sol';\\r\\nimport './factories/PairFactory.sol';\\r\\nimport './PairFees.sol';\\r\\n\\r\\n\\r\\n// The base pair of pools, either stable or volatile\\r\\ncontract Pair is IPair {\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    // Used to denote stable or volatile pair, not immutable since construction happens in the initialize method for CREATE2 deterministic addresses\\r\\n    bool public immutable stable;\\r\\n\\r\\n    uint public totalSupply = 0;\\r\\n\\r\\n    mapping(address => mapping (address => uint)) public allowance;\\r\\n    mapping(address => uint) public balanceOf;\\r\\n\\r\\n    bytes32 internal DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 internal constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public nonces;\\r\\n\\r\\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\\r\\n\\r\\n    address public immutable token0;\\r\\n    address public immutable token1;\\r\\n    address public immutable fees;\\r\\n    address immutable factory;\\r\\n\\r\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\r\\n    struct Observation {\\r\\n        uint timestamp;\\r\\n        uint reserve0Cumulative;\\r\\n        uint reserve1Cumulative;\\r\\n    }\\r\\n\\r\\n    // Capture oracle reading every 30 minutes\\r\\n    uint constant periodSize = 1800;\\r\\n\\r\\n    Observation[] public observations;\\r\\n\\r\\n    uint internal immutable decimals0;\\r\\n    uint internal immutable decimals1;\\r\\n\\r\\n    uint public reserve0;\\r\\n    uint public reserve1;\\r\\n    uint public blockTimestampLast;\\r\\n\\r\\n    uint public reserve0CumulativeLast;\\r\\n    uint public reserve1CumulativeLast;\\r\\n\\r\\n    // index0 and index1 are used to accumulate fees, this is split out from normal trades to keep the swap \\\"clean\\\"\\r\\n    // this further allows LP holders to easily claim fees for tokens they have/staked\\r\\n    uint public index0 = 0;\\r\\n    uint public index1 = 0;\\r\\n\\r\\n    // position assigned to each LP to track their current index0 & index1 vs the global position\\r\\n    mapping(address => uint) public supplyIndex0;\\r\\n    mapping(address => uint) public supplyIndex1;\\r\\n\\r\\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\r\\n    mapping(address => uint) public claimable0;\\r\\n    mapping(address => uint) public claimable1;\\r\\n\\r\\n    event Fees(address indexed sender, uint amount0, uint amount1);\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint reserve0, uint reserve1);\\r\\n    event Claim(address indexed sender, address indexed recipient, uint amount0, uint amount1);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    constructor() {\\r\\n        factory = msg.sender;\\r\\n        (address _token0, address _token1, bool _stable) = PairFactory(msg.sender).getInitializable();\\r\\n        (token0, token1, stable) = (_token0, _token1, _stable);\\r\\n        fees = address(new PairFees(_token0, _token1));\\r\\n        if (_stable) {\\r\\n            name = string(abi.encodePacked(\\\"StableV1 AMM - \\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\r\\n            symbol = string(abi.encodePacked(\\\"sAMM-\\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\r\\n        } else {\\r\\n            name = string(abi.encodePacked(\\\"VolatileV1 AMM - \\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\r\\n            symbol = string(abi.encodePacked(\\\"vAMM-\\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\r\\n        }\\r\\n\\r\\n        decimals0 = 10**IERC20(_token0).decimals();\\r\\n        decimals1 = 10**IERC20(_token1).decimals();\\r\\n\\r\\n        observations.push(Observation(block.timestamp, 0, 0));\\r\\n    }\\r\\n\\r\\n    // simple re-entrancy check\\r\\n    uint internal _unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(_unlocked == 1);\\r\\n        _unlocked = 2;\\r\\n        _;\\r\\n        _unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function observationLength() external view returns (uint) {\\r\\n        return observations.length;\\r\\n    }\\r\\n\\r\\n    function lastObservation() public view returns (Observation memory) {\\r\\n        return observations[observations.length-1];\\r\\n    }\\r\\n\\r\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1) {\\r\\n        return (decimals0, decimals1, reserve0, reserve1, stable, token0, token1);\\r\\n    }\\r\\n\\r\\n    function tokens() external view returns (address, address) {\\r\\n        return (token0, token1);\\r\\n    }\\r\\n\\r\\n    function isStable() external view returns(bool) {\\r\\n        return stable;\\r\\n    }\\r\\n\\r\\n    // claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\r\\n    function claimFees() external returns (uint claimed0, uint claimed1) {\\r\\n        _updateFor(msg.sender);\\r\\n\\r\\n        claimed0 = claimable0[msg.sender];\\r\\n        claimed1 = claimable1[msg.sender];\\r\\n\\r\\n        if (claimed0 > 0 || claimed1 > 0) {\\r\\n            claimable0[msg.sender] = 0;\\r\\n            claimable1[msg.sender] = 0;\\r\\n\\r\\n            PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\r\\n\\r\\n            emit Claim(msg.sender, msg.sender, claimed0, claimed1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimStakingFees() external {\\r\\n        address _feehandler = PairFactory(factory).stakingFeeHandler();\\r\\n        PairFees(fees).withdrawStakingFees(_feehandler);\\r\\n    }\\r\\n\\r\\n    // Accrue fees on token0\\r\\n    function _update0(uint amount) internal {\\r\\n        // get referral fee\\r\\n        address _dibs = PairFactory(factory).dibs();\\r\\n        uint256 _maxRef = PairFactory(factory).MAX_REFERRAL_FEE();\\r\\n        uint256 _referralFee = amount * _maxRef / 10000;\\r\\n        _safeTransfer(token0, _dibs, _referralFee); // transfer the fees out to PairFees\\r\\n        amount -= _referralFee;\\r\\n        \\r\\n        // get lp and staking fee\\r\\n        uint256 _stakingNftFee =  amount * PairFactory(factory).stakingNFTFee() / 10000;\\r\\n        PairFees(fees).processStakingFees(_stakingNftFee, true);\\r\\n        _safeTransfer(token0, fees, amount); // transfer the fees out to PairFees\\r\\n\\r\\n        \\r\\n        // remove staking fees from lpfees\\r\\n        amount -= _stakingNftFee;\\r\\n        uint256 _ratio = amount * 1e18 / totalSupply; // 1e18 adjustment is removed during claim\\r\\n        if (_ratio > 0) {\\r\\n            index0 += _ratio;\\r\\n        }\\r\\n        emit Fees(msg.sender, amount+_stakingNftFee+_referralFee, 0);\\r\\n    }\\r\\n\\r\\n    // Accrue fees on token1\\r\\n    function _update1(uint amount) internal {\\r\\n        // get referral fee\\r\\n        address _dibs = PairFactory(factory).dibs();\\r\\n        uint256 _maxRef = PairFactory(factory).MAX_REFERRAL_FEE();\\r\\n        uint256 _referralFee = amount * _maxRef / 10000;\\r\\n        _safeTransfer(token1, _dibs, _referralFee); // transfer the fees out to PairFees\\r\\n        amount -= _referralFee;\\r\\n\\r\\n        // get lp and staking fee\\r\\n        uint256 _stakingNftFee =  amount * PairFactory(factory).stakingNFTFee() / 10000;\\r\\n        PairFees(fees).processStakingFees(_stakingNftFee, false);\\r\\n        _safeTransfer(token1, fees, amount); // transfer the fees out to PairFees\\r\\n\\r\\n        // remove staking fees from lpfees\\r\\n        amount -= _stakingNftFee;\\r\\n\\r\\n        uint256 _ratio = amount * 1e18 / totalSupply;\\r\\n\\r\\n        if (_ratio > 0) {\\r\\n            index1 += _ratio;\\r\\n        }\\r\\n\\r\\n        emit Fees(msg.sender, 0,  amount+_stakingNftFee+_referralFee);\\r\\n    }\\r\\n\\r\\n    // this function MUST be called on any balance changes, otherwise can be used to infinitely claim fees\\r\\n    // Fees are segregated from core funds, so fees can never put liquidity at risk\\r\\n    function _updateFor(address recipient) internal {\\r\\n        uint _supplied = balanceOf[recipient]; // get LP balance of `recipient`\\r\\n        if (_supplied > 0) {\\r\\n            uint _supplyIndex0 = supplyIndex0[recipient]; // get last adjusted index0 for recipient\\r\\n            uint _supplyIndex1 = supplyIndex1[recipient];\\r\\n            uint _index0 = index0; // get global index0 for accumulated fees\\r\\n            uint _index1 = index1;\\r\\n            supplyIndex0[recipient] = _index0; // update user current position to global position\\r\\n            supplyIndex1[recipient] = _index1;\\r\\n            uint _delta0 = _index0 - _supplyIndex0; // see if there is any difference that need to be accrued\\r\\n            uint _delta1 = _index1 - _supplyIndex1;\\r\\n            if (_delta0 > 0) {\\r\\n                uint _share = _supplied * _delta0 / 1e18; // add accrued difference for each supplied token\\r\\n                claimable0[recipient] += _share;\\r\\n            }\\r\\n            if (_delta1 > 0) {\\r\\n                uint _share = _supplied * _delta1 / 1e18;\\r\\n                claimable1[recipient] += _share;\\r\\n            }\\r\\n        } else {\\r\\n            supplyIndex0[recipient] = index0; // new users are set to the default global state\\r\\n            supplyIndex1[recipient] = index1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint _reserve0, uint _reserve1) internal {\\r\\n        uint blockTimestamp = block.timestamp;\\r\\n        uint timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            reserve0CumulativeLast += _reserve0 * timeElapsed;\\r\\n            reserve1CumulativeLast += _reserve1 * timeElapsed;\\r\\n        }\\r\\n\\r\\n        Observation memory _point = lastObservation();\\r\\n        timeElapsed = blockTimestamp - _point.timestamp; // compare the last observation with current timestamp, if greater than 30 minutes, record a new event\\r\\n        if (timeElapsed > periodSize) {\\r\\n            observations.push(Observation(blockTimestamp, reserve0CumulativeLast, reserve1CumulativeLast));\\r\\n        }\\r\\n        reserve0 = balance0;\\r\\n        reserve1 = balance1;\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices() public view returns (uint reserve0Cumulative, uint reserve1Cumulative, uint blockTimestamp) {\\r\\n        blockTimestamp = block.timestamp;\\r\\n        reserve0Cumulative = reserve0CumulativeLast;\\r\\n        reserve1Cumulative = reserve1CumulativeLast;\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint _reserve0, uint _reserve1, uint _blockTimestampLast) = getReserves();\\r\\n        if (_blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint timeElapsed = blockTimestamp - _blockTimestampLast;\\r\\n            reserve0Cumulative += _reserve0 * timeElapsed;\\r\\n            reserve1Cumulative += _reserve1 * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // gives the current twap price measured from amountIn * tokenIn gives amountOut\\r\\n    function current(address tokenIn, uint amountIn) external view returns (uint amountOut) {\\r\\n        Observation memory _observation = lastObservation();\\r\\n        (uint reserve0Cumulative, uint reserve1Cumulative,) = currentCumulativePrices();\\r\\n        if (block.timestamp == _observation.timestamp) {\\r\\n            _observation = observations[observations.length-2];\\r\\n        }\\r\\n\\r\\n        uint timeElapsed = block.timestamp - _observation.timestamp;\\r\\n        uint _reserve0 = (reserve0Cumulative - _observation.reserve0Cumulative) / timeElapsed;\\r\\n        uint _reserve1 = (reserve1Cumulative - _observation.reserve1Cumulative) / timeElapsed;\\r\\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\r\\n    }\\r\\n\\r\\n    // as per `current`, however allows user configured granularity, up to the full window size\\r\\n    function quote(address tokenIn, uint amountIn, uint granularity) external view returns (uint amountOut) {\\r\\n        uint [] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\r\\n        uint priceAverageCumulative;\\r\\n        for (uint i = 0; i < _prices.length; i++) {\\r\\n            priceAverageCumulative += _prices[i];\\r\\n        }\\r\\n        return priceAverageCumulative / granularity;\\r\\n    }\\r\\n\\r\\n    // returns a memory set of twap prices\\r\\n    function prices(address tokenIn, uint amountIn, uint points) external view returns (uint[] memory) {\\r\\n        return sample(tokenIn, amountIn, points, 1);\\r\\n    }\\r\\n\\r\\n    function sample(address tokenIn, uint amountIn, uint points, uint window) public view returns (uint[] memory) {\\r\\n        uint[] memory _prices = new uint[](points);\\r\\n\\r\\n        uint length = observations.length-1;\\r\\n        uint i = length - (points * window);\\r\\n        uint nextIndex = 0;\\r\\n        uint index = 0;\\r\\n\\r\\n        for (; i < length; i+=window) {\\r\\n            nextIndex = i + window;\\r\\n            uint timeElapsed = observations[nextIndex].timestamp - observations[i].timestamp;\\r\\n            uint _reserve0 = (observations[nextIndex].reserve0Cumulative - observations[i].reserve0Cumulative) / timeElapsed;\\r\\n            uint _reserve1 = (observations[nextIndex].reserve1Cumulative - observations[i].reserve1Cumulative) / timeElapsed;\\r\\n            _prices[index] = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\r\\n            // index < length; length cannot overflow\\r\\n            unchecked {\\r\\n                index = index + 1;\\r\\n            }\\r\\n        }\\r\\n        return _prices;\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\\r\\n    // standard uniswap v2 implementation\\r\\n    function mint(address to) external lock returns (uint liquidity) {\\r\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n        uint _balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint _balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint _amount0 = _balance0 - _reserve0;\\r\\n        uint _amount1 = _balance1 - _reserve1;\\r\\n\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\r\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = Math.min(_amount0 * _totalSupply / _reserve0, _amount1 * _totalSupply / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'ILM'); // Pair: INSUFFICIENT_LIQUIDITY_MINTED\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\r\\n        emit Mint(msg.sender, _amount0, _amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    // standard uniswap v2 implementation\\r\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\r\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n        (address _token0, address _token1) = (token0, token1);\\r\\n        uint _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint _liquidity = balanceOf[address(this)];\\r\\n\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = _liquidity * _balance0 / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amount1 = _liquidity * _balance1 / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'ILB'); // Pair: INSUFFICIENT_LIQUIDITY_BURNED\\r\\n        _burn(address(this), _liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\r\\n        require(!PairFactory(factory).isPaused());\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'IOA'); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\\r\\n        (uint _reserve0, uint _reserve1) =  (reserve0, reserve1);\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'IL'); // Pair: INSUFFICIENT_LIQUIDITY\\r\\n\\r\\n        uint _balance0;\\r\\n        uint _balance1;\\r\\n        { // scope for _token{0,1}, avoids stack too deep errors\\r\\n        (address _token0, address _token1) = (token0, token1);\\r\\n        require(to != _token0 && to != _token1, 'IT'); // Pair: INVALID_TO\\r\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\r\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\r\\n        if (data.length > 0) IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\\r\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        uint amount0In = _balance0 > _reserve0 - amount0Out ? _balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = _balance1 > _reserve1 - amount1Out ? _balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'IIA'); // Pair: INSUFFICIENT_INPUT_AMOUNT\\r\\n\\r\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n        (address _token0, address _token1) = (token0, token1);\\r\\n        if (amount0In > 0) _update0(amount0In * PairFactory(factory).getFee(stable) / 10000); // accrue fees for token0 and move them out of pool\\r\\n        if (amount1In > 0) _update1(amount1In * PairFactory(factory).getFee(stable) / 10000); // accrue fees for token1 and move them out of pool\\r\\n        _balance0 = IERC20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\\r\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\r\\n        require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), 'K'); // Pair: K\\r\\n        }\\r\\n\\r\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) external lock {\\r\\n        (address _token0, address _token1) = (token0, token1);\\r\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - (reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - (reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external lock {\\r\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\r\\n        return x0*(y*y/1e18*y/1e18)/1e18+(x0*x0/1e18*x0/1e18)*y/1e18;\\r\\n    }\\r\\n\\r\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\r\\n        return 3*x0*(y*y/1e18)/1e18+(x0*x0/1e18*x0/1e18);\\r\\n    }\\r\\n\\r\\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\\r\\n        for (uint i = 0; i < 255; i++) {\\r\\n            uint y_prev = y;\\r\\n            uint k = _f(x0, y);\\r\\n            if (k < xy) {\\r\\n                uint dy = (xy - k)*1e18/_d(x0, y);\\r\\n                y = y + dy;\\r\\n            } else {\\r\\n                uint dy = (k - xy)*1e18/_d(x0, y);\\r\\n                y = y - dy;\\r\\n            }\\r\\n            if (y > y_prev) {\\r\\n                if (y - y_prev <= 1) {\\r\\n                    return y;\\r\\n                }\\r\\n            } else {\\r\\n                if (y_prev - y <= 1) {\\r\\n                    return y;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return y;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(uint amountIn, address tokenIn) external view returns (uint) {\\r\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n        amountIn -= amountIn * PairFactory(factory).getFee(stable) / 10000; // remove fee from amount received\\r\\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\r\\n    }\\r\\n\\r\\n    function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1) internal view returns (uint) {\\r\\n        if (stable) {\\r\\n            uint xy =  _k(_reserve0, _reserve1);\\r\\n            _reserve0 = _reserve0 * 1e18 / decimals0;\\r\\n            _reserve1 = _reserve1 * 1e18 / decimals1;\\r\\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\r\\n            amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\\r\\n            uint y = reserveB - _get_y(amountIn+reserveA, xy, reserveB);\\r\\n            return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\\r\\n        } else {\\r\\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\r\\n            return amountIn * reserveB / (reserveA + amountIn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _k(uint x, uint y) internal view returns (uint) {\\r\\n        if (stable) {\\r\\n            uint _x = x * 1e18 / decimals0;\\r\\n            uint _y = y * 1e18 / decimals1;\\r\\n            uint _a = (_x * _y) / 1e18;\\r\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\r\\n            return _a * _b / 1e18;  // x3y+y3x >= k\\r\\n        } else {\\r\\n            return x * y; // xy >= k\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mint(address dst, uint amount) internal {\\r\\n        _updateFor(dst); // balances must be updated on mint/burn/transfer\\r\\n        totalSupply += amount;\\r\\n        balanceOf[dst] += amount;\\r\\n        emit Transfer(address(0), dst, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address dst, uint amount) internal {\\r\\n        _updateFor(dst);\\r\\n        totalSupply -= amount;\\r\\n        balanceOf[dst] -= amount;\\r\\n        emit Transfer(dst, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool) {\\r\\n        allowance[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\r\\n        require(deadline >= block.timestamp, 'Pair: EXPIRED');\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Pair: INVALID_SIGNATURE');\\r\\n        allowance[owner][spender] = value;\\r\\n\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool) {\\r\\n        _transferTokens(msg.sender, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint spenderAllowance = allowance[src][spender];\\r\\n\\r\\n        if (spender != src && spenderAllowance != type(uint).max) {\\r\\n            uint newAllowance = spenderAllowance - amount;\\r\\n            allowance[src][spender] = newAllowance;\\r\\n\\r\\n            emit Approval(src, spender, newAllowance);\\r\\n        }\\r\\n\\r\\n        _transferTokens(src, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transferTokens(address src, address dst, uint amount) internal {\\r\\n        _updateFor(src); // update fee position for src\\r\\n        _updateFor(dst); // update fee position for dst\\r\\n\\r\\n        balanceOf[src] -= amount;\\r\\n        balanceOf[dst] += amount;\\r\\n\\r\\n        emit Transfer(src, dst, amount);\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token,address to,uint256 value) internal {\\r\\n        require(token.code.length > 0);\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\r\\n    }\\r\\n\\r\\n    function _safeApprove(address token,address spender,uint256 value) internal {\\r\\n        require(token.code.length > 0);\\r\\n        require((value == 0) || (IERC20(token).allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, spender, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PairFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport './interfaces/IERC20.sol';\\r\\n\\r\\n// Pair Fees contract is used as a 1:1 pair relationship to split out fees, this ensures that the curve does not need to be modified for LP shares\\r\\ncontract PairFees {\\r\\n\\r\\n    address internal immutable pair; // The pair it is bonded to\\r\\n    address internal immutable token0; // token0 of pair, saved localy and statically for gas optimization\\r\\n    address internal immutable token1; // Token1 of pair, saved localy and statically for gas optimization\\r\\n\\r\\n    uint256 public toStake0;\\r\\n    uint256 public toStake1;\\r\\n\\r\\n    constructor(address _token0, address _token1) {\\r\\n        pair = msg.sender;\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token,address to,uint256 value) internal {\\r\\n        require(token.code.length > 0);\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\r\\n    }\\r\\n\\r\\n    // Allow the pair to transfer fees to users\\r\\n    function claimFeesFor(address recipient, uint amount0, uint amount1) external {\\r\\n        require(msg.sender == pair);\\r\\n        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\\r\\n        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    function processStakingFees(uint amount, bool isTokenZero) external {\\r\\n        require(msg.sender == pair);\\r\\n        if(amount > 0 && isTokenZero){\\r\\n            toStake0 += amount;\\r\\n        }\\r\\n    \\r\\n        if(amount > 0 && !isTokenZero){\\r\\n            toStake1 += amount;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function withdrawStakingFees(address recipient) external {\\r\\n        require(msg.sender == pair);\\r\\n        if (toStake0 > 0){\\r\\n            _safeTransfer(token0, recipient, toStake0);\\r\\n            toStake0 = 0;\\r\\n        } \\r\\n        if (toStake1 > 0){\\r\\n            _safeTransfer(token1, recipient, toStake1);\\r\\n            toStake1 = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n      \\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REFERRAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dibs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stable\",\"type\":\"bool\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dibs\",\"type\":\"address\"}],\"name\":\"setDibs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refFee\",\"type\":\"uint256\"}],\"name\":\"setReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feehandler\",\"type\":\"address\"}],\"name\":\"setStakingFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStakingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatileFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PairFactoryUpgradeable", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}