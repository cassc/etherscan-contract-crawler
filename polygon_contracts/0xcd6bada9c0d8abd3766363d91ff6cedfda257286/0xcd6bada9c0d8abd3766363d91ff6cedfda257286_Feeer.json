{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/feeer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IAavegotchi {\\r\\n    function getOwnerGotchiLendingsLength(address _lender, bytes32 _status)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function isPetOperatorForAll(address _owner, address _operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool approved_);\\r\\n\\r\\n    function tokenIdsOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint32[] memory tokenIds_);\\r\\n}\\r\\n\\r\\ncontract Feeer is Ownable {\\r\\n    address constant diamond = 0x86935F11C86623deC8a25696E1C19a8659CbF95d;\\r\\n    address constant wmatic = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\r\\n    address constant petter = 0x290000C417a1DE505eb08b7E32b3e8dA878D194E;\\r\\n\\r\\n    uint256 gotchisPerMatic = 4;\\r\\n    uint256 minProRata = 9;\\r\\n    // wmaticReceiver has to be different than owner in case of wallet hack\\r\\n    address constant wmaticReceiver =\\r\\n        0xdC5b665e8135023F80BF4DbF85F65086c7aC3BB1;\\r\\n\\r\\n    address[] private users;\\r\\n    mapping(address => uint256) private usersToIndex;\\r\\n    mapping(address => uint256) private userToLastFeeTimestamp;\\r\\n    mapping(address => uint256) private userToWmaticPaid;\\r\\n    mapping(address => uint256) private userToGotchiAmount;\\r\\n    mapping(address => bool) private isApproved;\\r\\n\\r\\n    event Pay(address _user, uint256 wmaticAmount, uint256 gotchiAmount);\\r\\n    event Regulate(address _user, uint256 wmaticAmount, uint256 gotchiAmount);\\r\\n\\r\\n    constructor() {\\r\\n        // Mandatory, index 0 cannot be empty\\r\\n        _addUser(0x86935F11C86623deC8a25696E1C19a8659CbF95d);\\r\\n    }\\r\\n\\r\\n    modifier onlyApproved() {\\r\\n        require(isApproved[msg.sender] || owner() == msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * G E T T E R S\\r\\n     *************************************************/\\r\\n\\r\\n    function getIsApproved(address _address) external view returns (bool) {\\r\\n        return isApproved[_address];\\r\\n    }\\r\\n\\r\\n    function getIsSignedUp(address _user) public view returns (bool) {\\r\\n        return usersToIndex[_user] > 0;\\r\\n    }\\r\\n\\r\\n    function getUserLastFeeTimestamp(address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return userToLastFeeTimestamp[_user];\\r\\n    }\\r\\n\\r\\n    function getUserToGotchiAmount(address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return userToGotchiAmount[_user];\\r\\n    }\\r\\n\\r\\n    function getUserToWmaticPaid(address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return userToWmaticPaid[_user];\\r\\n    }\\r\\n\\r\\n    function hasApprovedGotchiInteraction(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return IAavegotchi(diamond).isPetOperatorForAll(_user, petter);\\r\\n    }\\r\\n\\r\\n    function getUsers() external view returns (address[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    function getUsersIndexed(uint256 _pointer, uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        address[] memory addresses = new address[](_amount);\\r\\n        for (uint256 i = 0; i < _amount; i++) {\\r\\n            uint256 pointer = _pointer + i;\\r\\n            if (pointer > users.length) break;\\r\\n            addresses[i] = users[pointer];\\r\\n        }\\r\\n        return addresses;\\r\\n    }\\r\\n\\r\\n    function getUsersCount() external view returns (uint256) {\\r\\n        return users.length - 1;\\r\\n    }\\r\\n\\r\\n    function getUsersToIndex(address _user) external view returns (uint256) {\\r\\n        return usersToIndex[_user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev not checking if needs to be removed because\\r\\n        the bot will always check needs to be removed first\\r\\n     */\\r\\n    function getIsTimeToPay(address _user) public view returns (bool) {\\r\\n        uint256 lastFeeTimestamp = userToLastFeeTimestamp[_user];\\r\\n        return lastFeeTimestamp + 30 days < block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getBatchIsTimeToPay(address[] calldata _users)\\r\\n        external\\r\\n        view\\r\\n        returns (bool[] memory status_)\\r\\n    {\\r\\n        uint256 length = _users.length;\\r\\n        status_ = new bool[](length);\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            address user = _users[i];\\r\\n            status_[i] = getIsTimeToPay(user);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWmaticPayPerGotchis(uint256 _amountGochis)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 price;\\r\\n        if (_amountGochis <= gotchisPerMatic) price = 1;\\r\\n        else price = (_amountGochis / gotchisPerMatic) + 1;\\r\\n\\r\\n        return price * 10**18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * returns true if need to be removed\\r\\n     * returns false if everything is fine\\r\\n     */\\r\\n    function getNeedRemoveUser(address _user, uint256 _amountGotchis)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        // Needs to be a user\\r\\n        if (!getIsSignedUp(_user)) return false;\\r\\n\\r\\n        // If has remove isPetOperatorForAll\\r\\n        if (!hasApprovedGotchiInteraction(_user)) return true;\\r\\n\\r\\n        // If it's time to pay and doesn't have enough wmatic\\r\\n        uint256 balanceUser = IERC20(wmatic).balanceOf(_user);\\r\\n        if (\\r\\n            balanceUser < getWmaticPayPerGotchis(_amountGotchis) &&\\r\\n            getIsTimeToPay(_user)\\r\\n        ) return true;\\r\\n\\r\\n        // If needs regulation and doesn't have enough matic\\r\\n        uint256 amountToRegulate = getWmaticRegPerUser(_user, _amountGotchis);\\r\\n        if (amountToRegulate > 0 && amountToRegulate > balanceUser) return true;\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getBatchNeedRemoveUser(\\r\\n        address[] calldata _users,\\r\\n        uint256[] calldata _amountGotchis\\r\\n    ) external view returns (bool[] memory status_) {\\r\\n        uint256 length = _users.length;\\r\\n        require(length == _amountGotchis.length, \\\"Feeer: Array size not equal\\\");\\r\\n        status_ = new bool[](length);\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 gotchis = _amountGotchis[i];\\r\\n            status_[i] = getNeedRemoveUser(user, gotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWmaticRegPerUser(address _user, uint256 _amountGotchis)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Get timings.\\r\\n        uint256 lastFeeTimestamp = userToLastFeeTimestamp[_user];\\r\\n\\r\\n        // Pro rata calc\\r\\n        uint256 daysPassed = (block.timestamp - lastFeeTimestamp) / 1 days;\\r\\n\\r\\n        // Can't regulate after 30 days\\r\\n        if (daysPassed > 30) return 0;\\r\\n\\r\\n        uint256 proRata = ((100 * (30 - daysPassed)) / 30);\\r\\n\\r\\n        // No need to regulate if amount is low\\r\\n        if (proRata < minProRata) return 0;\\r\\n\\r\\n        // Get Wmatic amounts\\r\\n        uint256 paidWmatic = userToWmaticPaid[_user];\\r\\n        uint256 estimation = getWmaticPayPerGotchis(_amountGotchis);\\r\\n\\r\\n        // If the new estimation is higher than the paid or regulated one\\r\\n        if (estimation > paidWmatic) {\\r\\n            uint256 wmaticToPay = (proRata * (estimation - paidWmatic)) / 100;\\r\\n            return wmaticToPay;\\r\\n        } else return 0;\\r\\n    }\\r\\n\\r\\n    function getBatchWmaticRegPerUser(\\r\\n        address[] calldata _users,\\r\\n        uint256[] calldata _amountGotchis\\r\\n    ) external view returns (uint256[] memory status_) {\\r\\n        uint256 length = _users.length;\\r\\n        require(length == _amountGotchis.length, \\\"Feeer: Array size not equal\\\");\\r\\n        status_ = new uint256[](length);\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 gotchis = _amountGotchis[i];\\r\\n            status_[i] = getWmaticRegPerUser(user, gotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * U S E R   F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev no need to check if approved enough matic\\r\\n     * it is done when trying to transfer in _pay()\\r\\n     */\\r\\n    function signUp(uint256 amountGotchis) external {\\r\\n        // Make sure user is not already signed up\\r\\n        require(usersToIndex[msg.sender] == 0, \\\"Feeer: Already user\\\");\\r\\n\\r\\n        // Make sure signs up at least 1 gotchi\\r\\n        require(amountGotchis > 0, \\\"Feeer: 1 gotchi min\\\");\\r\\n\\r\\n        // Make sure user has set petOperatorForAll\\r\\n        require(\\r\\n            hasApprovedGotchiInteraction(msg.sender),\\r\\n            \\\"Feeer: Hasn't set petOperatorForAll\\\"\\r\\n        );\\r\\n\\r\\n        // Make him pay\\r\\n        _pay(msg.sender, amountGotchis);\\r\\n\\r\\n        // Add to the user array\\r\\n        _addUser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function leave() external {\\r\\n        // Check if the user is a user\\r\\n        require(\\r\\n            usersToIndex[msg.sender] > 0,\\r\\n            \\\"Feeer: Can't leave, not registered as user\\\"\\r\\n        );\\r\\n\\r\\n        // Remove from user array\\r\\n        _removeUser(msg.sender);\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * B O T   F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function pay(address _user, uint256 _amountGotchis) public onlyApproved {\\r\\n        require(getIsSignedUp(_user), \\\"Feeer: Can't charge non-users\\\");\\r\\n        _pay(_user, _amountGotchis);\\r\\n    }\\r\\n\\r\\n    function batchPay(\\r\\n        address[] calldata _users,\\r\\n        uint256[] calldata _amountGotchis\\r\\n    ) external onlyApproved {\\r\\n        uint256 length = _users.length;\\r\\n        require(length == _amountGotchis.length, \\\"Feeer: array size not equal\\\");\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 gotchis = _amountGotchis[i];\\r\\n            pay(user, gotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function regulate(address _user, uint256 _amountGotchis)\\r\\n        public\\r\\n        onlyApproved\\r\\n    {\\r\\n        require(getIsSignedUp(_user), \\\"Feeer: Can't regulate non-users\\\");\\r\\n\\r\\n        uint256 wmaticToPay = getWmaticRegPerUser(_user, _amountGotchis);\\r\\n        require(wmaticToPay > 0, \\\"Feeer: No regulation needed\\\");\\r\\n\\r\\n        // Transfer the funds\\r\\n        bool success = IERC20(wmatic).transferFrom(\\r\\n            _user,\\r\\n            wmaticReceiver,\\r\\n            wmaticToPay\\r\\n        );\\r\\n        require(success, \\\"Feeer: transferFrom failed\\\");\\r\\n\\r\\n        /**\\r\\n        this is not the amount actually paid\\r\\n        This is the amount that should have been paid for 30 days\\r\\n        It is necessary to not regulate multiple times a user\\r\\n         */\\r\\n        userToWmaticPaid[_user] = getWmaticPayPerGotchis(_amountGotchis);\\r\\n\\r\\n        // Save amount of gotchis when paid regulation\\r\\n        userToGotchiAmount[_user] = _amountGotchis;\\r\\n\\r\\n        emit Regulate(_user, wmaticToPay, _amountGotchis);\\r\\n    }\\r\\n\\r\\n    function batchRegulate(\\r\\n        address[] calldata _users,\\r\\n        uint256[] calldata _amountGotchis\\r\\n    ) external onlyApproved {\\r\\n        uint256 length = _users.length;\\r\\n        require(length == _amountGotchis.length, \\\"Feeer: array size not equal\\\");\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 gotchis = _amountGotchis[i];\\r\\n            regulate(user, gotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeUser(address _user, uint256 _amountGotchis)\\r\\n        public\\r\\n        onlyApproved\\r\\n    {\\r\\n        // Check if the user is a user\\r\\n        require(\\r\\n            usersToIndex[_user] > 0,\\r\\n            \\\"Feeer: Can't remove, not registered as user\\\"\\r\\n        );\\r\\n\\r\\n        // Has removed gotchi interaction OR can't pay\\r\\n        require(\\r\\n            getNeedRemoveUser(_user, _amountGotchis),\\r\\n            \\\"Feeer: Shouldn't be removed\\\"\\r\\n        );\\r\\n\\r\\n        _removeUser(_user);\\r\\n    }\\r\\n\\r\\n    function batchRemoveUsers(\\r\\n        address[] calldata _users,\\r\\n        uint256[] calldata _amountGotchis\\r\\n    ) external onlyApproved {\\r\\n        uint256 length = _users.length;\\r\\n        require(length == _amountGotchis.length, \\\"Feeer: array size not equal\\\");\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            address user = _users[i];\\r\\n            uint256 gotchis = _amountGotchis[i];\\r\\n            removeUser(user, gotchis);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * I N T E R N A L   F U N C T I O N S\\r\\n     *************************************************/\\r\\n\\r\\n    function _pay(address _user, uint256 _amountGotchis) internal {\\r\\n        // Checking that it has been at least 30 days\\r\\n        require(getIsTimeToPay(_user), \\\"Feeer: 2soon2pay\\\");\\r\\n\\r\\n        // User must have at least 1 gotchi\\r\\n        require(_amountGotchis > 0, \\\"Feeer: Doesn't own a gotchi\\\");\\r\\n\\r\\n        // Pay amount\\r\\n        uint256 amountToPay = getWmaticPayPerGotchis(_amountGotchis);\\r\\n\\r\\n        // User must have enough moni\\r\\n        uint256 balance = IERC20(wmatic).balanceOf(_user);\\r\\n        require(balance >= amountToPay, \\\"Feeer: Not enough Wmatic to pay\\\");\\r\\n\\r\\n        // pay\\r\\n        bool success = IERC20(wmatic).transferFrom(\\r\\n            _user,\\r\\n            wmaticReceiver,\\r\\n            amountToPay\\r\\n        );\\r\\n        require(success, \\\"Feeer: transferFrom failed\\\");\\r\\n\\r\\n        // Save timestamp\\r\\n        userToLastFeeTimestamp[_user] = block.timestamp;\\r\\n\\r\\n        // Save wmatic amount\\r\\n        userToWmaticPaid[_user] = amountToPay;\\r\\n\\r\\n        // Save amount of gotchis\\r\\n        userToGotchiAmount[_user] = _amountGotchis;\\r\\n\\r\\n        emit Pay(_user, amountToPay, _amountGotchis);\\r\\n    }\\r\\n\\r\\n    function _addUser(address _newUser) private {\\r\\n        // No need to add twice the same account\\r\\n        require(usersToIndex[_newUser] == 0, \\\"Feeer: user already added\\\");\\r\\n\\r\\n        // Get the index where the new user is in the array (= last position)\\r\\n        usersToIndex[_newUser] = users.length;\\r\\n\\r\\n        // Add the user in the array\\r\\n        users.push(_newUser);\\r\\n    }\\r\\n\\r\\n    function _removeUser(address _userLeaver) private {\\r\\n        // Cant remove an account that is not a user\\r\\n        require(usersToIndex[_userLeaver] > 0, \\\"Feeer: user already removed\\\");\\r\\n\\r\\n        // Get the index of the leaver\\r\\n        uint256 _indexLeaver = usersToIndex[_userLeaver];\\r\\n\\r\\n        // Get last index\\r\\n        uint256 lastElementIndex = users.length - 1;\\r\\n\\r\\n        // Get Last address in array\\r\\n        address lastAddressInArray = users[lastElementIndex];\\r\\n\\r\\n        // Move the last address in the position of the leaver\\r\\n        users[_indexLeaver] = users[lastElementIndex];\\r\\n\\r\\n        // Change the moved address' index to the new one\\r\\n        usersToIndex[lastAddressInArray] = _indexLeaver;\\r\\n\\r\\n        // Remove last entry in the array and reduce length\\r\\n        users.pop();\\r\\n        usersToIndex[_userLeaver] = 0;\\r\\n    }\\r\\n\\r\\n    /*************************************************\\r\\n     * A D M I N   F U N C T I O N S\\r\\n     *************************************************/\\r\\n    function updateGotchisPerMatic(uint256 _amount) external onlyOwner {\\r\\n        gotchisPerMatic = _amount;\\r\\n    }\\r\\n\\r\\n    function updateMinProRata(uint256 _amount) external onlyOwner {\\r\\n        minProRata = _amount;\\r\\n    }\\r\\n\\r\\n    function updateIsApproved(address _address, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        isApproved[_address] = _status;\\r\\n    }\\r\\n\\r\\n    // If you read the whole contract : <3\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wmaticAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gotchiAmount\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wmaticAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gotchiAmount\",\"type\":\"uint256\"}],\"name\":\"Regulate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"batchPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"batchRegulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"batchRemoveUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"getBatchIsTimeToPay\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"status_\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"getBatchNeedRemoveUser\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"status_\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountGotchis\",\"type\":\"uint256[]\"}],\"name\":\"getBatchWmaticRegPerUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"status_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIsApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIsSignedUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIsTimeToPay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"getNeedRemoveUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLastFeeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserToGotchiAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserToWmaticPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pointer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUsersIndexed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsersToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountGochis\",\"type\":\"uint256\"}],\"name\":\"getWmaticPayPerGotchis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"getWmaticRegPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasApprovedGotchiInteraction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"regulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGotchis\",\"type\":\"uint256\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountGotchis\",\"type\":\"uint256\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGotchisPerMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateIsApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateMinProRata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Feeer", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}