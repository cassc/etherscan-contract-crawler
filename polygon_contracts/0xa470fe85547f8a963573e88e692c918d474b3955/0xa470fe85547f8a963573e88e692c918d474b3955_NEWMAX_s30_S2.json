{"SourceCode": "/**\r\n *Submitted for verification at PolygonScan.com on 2022-12-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n \r\ncontract owned {\r\n    address  public owner;\r\n    address  internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n   \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address  _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n//*******************************************************************//\r\n//------------------         Token interface        -------------------//\r\n//*******************************************************************//\r\n\r\n interface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function balanceOf(address _user) external view returns(uint);\r\n    function currentRate() external view returns(uint);\r\n }\r\n\r\ninterface force1Interface\r\n {\r\n    function coreAddressByID(uint id) external view returns(address);\r\n }\r\n\r\ncontract NEWMAX_s30_S2 is owned\r\n{\r\n\r\n    uint public maxDownLimit = 2;\r\n\r\n    uint public lastIDCount;\r\n    uint public defaultRefID = 1;\r\n\r\n    uint public maxlimit = 20 * (10**18);\r\n    uint64 public distribut = 70;\r\n\r\n    uint[11] public levelPrice;\r\n    uint[11] public liquidity;\r\n    uint[11] public directRefIncome;\r\n    uint[11] public distForCore;\r\n    //uint public directPercent = 40000000; \r\n\r\n    address public tokenAddress;\r\n    address public levelAddress;\r\n\r\n    address public coreAddress;\r\n    address public liquidityTokenAddress;\r\n\r\n    bool public ignoreForce1;\r\n    address holderContract = address(this);\r\n\r\n    struct userInfo {\r\n        bool joined;\r\n        uint id;\r\n        uint origRef;\r\n        uint levelBought;\r\n        address[] referral;\r\n    }\r\n\r\n    struct goldInfo {\r\n        uint currentParent;\r\n        uint position;\r\n        address[] childs;\r\n    }\r\n    mapping (address => userInfo) public userInfos;\r\n    mapping (uint => address ) public userAddressByID;\r\n    mapping (address => uint ) public userBytoken;\r\n\r\n    mapping (address => mapping(uint => goldInfo)) public activeGoldInfos;\r\n    mapping (address => mapping(uint => goldInfo[])) public archivedGoldInfos;\r\n\r\n    mapping(address => bool) public regPermitted;\r\n    mapping(address => uint) public levelPermitted;\r\n    //s2\r\n    mapping(address => mapping(uint => bool)) public activate;\r\n    struct structS2 {\r\n        uint slot;\r\n        uint lastChild;\r\n    }\r\n\r\n    mapping (address => mapping(uint => structS2)) public matrixS2; // user -> lvl -> structS3\r\n    mapping(address => mapping(uint => address[])) public childsS2;\r\n\r\n    //end s2\r\n    struct rdata\r\n    {\r\n        uint user4thParent;\r\n        uint level;\r\n        bool pay;\r\n        bool processed;\r\n    }\r\n\r\n   // mapping(address => mapping(uint => uint8)) public autoLevelBuy; \r\n\r\n    event directPaidEv(address from, address to, uint amount, uint level, uint timeNow);\r\n    event payForLevelEv(uint _userID, uint parentID, uint amount, uint fromDown, uint timeNow);\r\n    event regLevelEv(uint _userID, uint _referrerID, uint timeNow, address _user, address _referrer);\r\n    event levelBuyEv(uint amount, uint toID, uint level, uint timeNow);\r\n    event treeEv(uint _userID, uint _userPosition,uint amount, uint placing,uint timeNow,uint _parent, uint _level );\r\n\r\n    constructor(address token)  {\r\n        owner = msg.sender;\r\n        tokenAddress = token;\r\n        uint multiply = 10 ** 18;\r\n\r\n        levelPrice[1] = 6 * multiply;\r\n        levelPrice[2] = 10 * multiply;\r\n        levelPrice[3] = 15 * multiply;\r\n        levelPrice[4] = 24 * multiply;\r\n        levelPrice[5] = 35 * multiply;\r\n        levelPrice[6] = 60 * multiply;\r\n        levelPrice[7] = 100 * multiply;\r\n        levelPrice[8] = 140 * multiply;\r\n        levelPrice[9] = 250 * multiply;\r\n        levelPrice[10]= 350 * multiply;\r\n        \r\n\r\n        liquidity[1] = 2 * multiply;\r\n        liquidity[2] = 4 * multiply;\r\n        liquidity[3] = 5 * multiply;\r\n        liquidity[4] = 8 * multiply;\r\n        liquidity[5] = 11 * multiply;\r\n        liquidity[6] = 20 * multiply;\r\n        liquidity[7] = 30 * multiply;\r\n        liquidity[8] = 40 * multiply;\r\n        liquidity[9] = 100 * multiply;\r\n        liquidity[10]= 150 * multiply;\r\n\r\n       \r\n\r\n        distForCore[1] = 2 * multiply;\r\n        distForCore[2] = 3 * multiply;\r\n        distForCore[3] = 5 * multiply;\r\n        distForCore[4] = 8 * multiply;\r\n        distForCore[5] = 12 * multiply;\r\n        distForCore[6] = 20 * multiply;\r\n        distForCore[7] = 35 * multiply;\r\n        distForCore[8] = 50 * multiply;\r\n        distForCore[9] = 75 * multiply;\r\n        distForCore[10]= 100 * multiply;\r\n\r\n        userInfo memory UserInfo;\r\n        lastIDCount++;\r\n\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lastIDCount,\r\n            origRef:lastIDCount,            \r\n            levelBought:15,\r\n            referral: new address[](0)\r\n        });\r\n        userInfos[owner] = UserInfo;\r\n        userAddressByID[lastIDCount] = owner;\r\n        userBytoken[owner] = 0;\r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = 1;\r\n        temp.position = 0;\r\n        for(uint i=1;i<=10;i++)\r\n        {\r\n            activeGoldInfos[owner][i] = temp;\r\n        }\r\n\r\n        for (uint i = 1; i <= 10; i++) {\r\n          activate[owner][i] = true;\r\n        }\r\n    }\r\n\r\n    //function ()  external payable {\r\n    //    revert();\r\n    //}\r\n\r\n     function _isActive(address _address, uint _lvl) internal view returns(bool) {\r\n      return activate[_address][_lvl];\r\n    }\r\n\r\n    function getActivateParent(address _child, uint _lvl) internal view returns (address response) {\r\n      address __parent = userAddressByID[userInfos[_child].origRef];\r\n      while(true) {\r\n          if (_isActive(__parent, _lvl)) {\r\n              return __parent;\r\n          } else {\r\n              __parent = userAddressByID[userInfos[_child].origRef];\r\n          }\r\n      }\r\n    }\r\n\r\n    event updates2Ev(address child,address _parent, uint lvl,uint _lastChild,uint amount,uint timeNow);\r\n  \r\n  function updateS2(address _child, uint lvl) internal{\r\n    address _parent = getActivateParent(_child, lvl);\r\n\r\n    // Increment lastChild\r\n    structS2 storage _parentStruct = matrixS2[_parent][lvl];\r\n    uint _lastChild = _parentStruct.lastChild;\r\n    _parentStruct.lastChild++;\r\n    _lastChild = _lastChild % 2;\r\n\r\n    // Get price\r\n    uint _price = distForCore[lvl];\r\n   \r\n    \r\n    // First Child\r\n    if (_lastChild == 0) {\r\n     \r\n          //tokenMetaRider.transferFrom(_msgSender(), _parent, _price);\r\n          tokenInterface(tokenAddress).transfer(address(uint160(_parent)), _price);\r\n          emit directPaidEv(_child, _parent, _price, lvl, block.timestamp);\r\n     \r\n    }\r\n\r\n    // Last Child\r\n    if (_lastChild == 1) {\r\n     \r\n        if (_parent != owner){\r\n        \r\n          emit updates2Ev(_child, _parent,  lvl, _lastChild,  _price, block.timestamp);\r\n          updateS2(_parent, lvl); // update parents product\r\n        }\r\n        else{\r\n            //tokenMetaRider.transferFrom(_msgSender(), address(this), _price);\r\n            //tokenMetaRider.transferFrom(_msgSender(), owner(), _price);\r\n             tokenInterface(tokenAddress).transfer(address(uint160(owner)), _price);\r\n             emit directPaidEv(_child, owner, _price, lvl, block.timestamp);\r\n        }\r\n      //}\r\n      _parentStruct.slot++;\r\n    }\r\n\r\n    // Push new child\r\n    childsS2[_parent][lvl].push(_child);\r\n    emit updates2Ev(_child,_parent,  lvl,_lastChild,  _price, block.timestamp);\r\n  }\r\n\r\n    function setTokenaddress(address newTokenaddress) onlyOwner public returns(bool)\r\n    {\r\n        tokenAddress = newTokenaddress;\r\n        return true;\r\n    }\r\n\r\n    function toggleIgnoreForce1() public onlyOwner returns(bool)\r\n    {\r\n        ignoreForce1 = !ignoreForce1;\r\n        return true;\r\n    }\r\n\r\n    function setLeveladdress(address newLeveladdress) onlyOwner public returns(bool)\r\n    {\r\n        levelAddress = newLeveladdress;\r\n        return true;\r\n    }\r\n\r\n    function force1CoreContract(address _fContract) onlyOwner public returns(bool)\r\n    {\r\n        coreAddress = _fContract;\r\n        return true;\r\n    }\r\n    \r\n    function changeLiquidityTokenaddress(address newLiquidityTokenaddress) onlyOwner public returns(string memory){\r\n        liquidityTokenAddress = newLiquidityTokenaddress;\r\n        return(\"token address updated successfully\");\r\n    }\r\n\r\n    function regUser(uint _oldID, address ref, address msgSender) public returns(bool)\r\n    {\r\n        if (!ignoreForce1) require(force1Interface(coreAddress).coreAddressByID(_oldID) == msgSender, \"Invalid oldID\");\r\n        address _refAddress = ref; //getRef(msg.sender);\r\n       \r\n        if(!userInfos[_refAddress].joined) _refAddress = owner;\r\n        \r\n        uint prc = levelPrice[1];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        \r\n        regUser_(msg.sender, _refAddress, true, prc);\r\n        return true;\r\n    }\r\n\r\n    function regUser_Team(uint _oldID, address ref, address usermsg) public returns(bool)\r\n    {\r\n        require(userInfos[msg.sender].joined, \"Your address is not join\");\r\n\r\n       if (!ignoreForce1) require(force1Interface(coreAddress).coreAddressByID(_oldID) == usermsg, \"Invalid oldID\");\r\n        address _refAddress = ref;\r\n       \r\n        if(!userInfos[_refAddress].joined) _refAddress = owner;\r\n        \r\n        uint prc = levelPrice[1];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        \r\n        regUser_(usermsg, _refAddress, true, prc);\r\n        return true;\r\n    }\r\n\r\n    function regUser_(address msgsender, address _refAddress, bool pay, uint prc) internal returns(bool)\r\n    {\r\n        require(!userInfos[msgsender].joined, \"already joined\");\r\n        \r\n        (uint user4thParent, ) = getPosition(msgsender, 1); // user4thParent = p here for stack too deep\r\n        require(user4thParent<30, \"no place under this referrer\");\r\n       \r\n        address origRef = _refAddress;\r\n        uint _referrerID = userInfos[_refAddress].id;\r\n        (uint _parentID,bool treeComplete  ) = findFreeParentInDown(_referrerID, 1);\r\n        require(!treeComplete, \"No free place\");\r\n\r\n        lastIDCount++;\r\n        userInfo memory UserInfo;\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lastIDCount,\r\n            origRef:userInfos[_refAddress].id,            \r\n            levelBought:1,\r\n            referral: new address[](0)\r\n        });\r\n        userInfos[msgsender] = UserInfo;\r\n        userAddressByID[lastIDCount] = msgsender;\r\n        userBytoken[msgsender] = 0;\r\n        userInfos[origRef].referral.push(msgsender);\r\n\r\n        userInfos[msgsender].referral.push(_refAddress);       \r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = _parentID;\r\n        temp.position = activeGoldInfos[userAddressByID[_parentID]][1].childs.length + 1;\r\n        activeGoldInfos[msgsender][1] = temp;\r\n        activeGoldInfos[userAddressByID[_parentID]][1].childs.push(msgsender);\r\n\r\n       \r\n        uint userPosition;\r\n        (userPosition, user4thParent) = getPosition(msgsender, 1);\r\n        (,treeComplete) = findFreeParentInDown(user4thParent, 1);\r\n        if(userPosition > 28 && userPosition < 31 ) \r\n        {\r\n            payForLevel(msgsender, 1, true, pay,true);   // true means recycling pay to all except 25%\r\n        }\r\n       \r\n        else\r\n        {\r\n            payForLevel(msgsender, 1, false, pay, true);   // false means no recycling pay to all\r\n        }\r\n        \r\n        if(treeComplete)\r\n        {\r\n            recyclePosition(user4thParent,1, pay );\r\n        }\r\n        splitPart(lastIDCount,_referrerID,msgsender,userPosition,prc,temp.position,temp.currentParent );\r\n        \r\n       \r\n\r\n        //uint price_ = levelPrice[1]/2;  \r\n       // uint price_ = distForCore[1]; \r\n        //tokenInterface(tokenAddress).transfer(address(uint160(_refAddress)), price_);\r\n        updateS2(msgsender, 1);\r\n        activate[msgsender][1] = true;\r\n\r\n        flushRemaining(1);\r\n        f1btctoken_transfer(1, msgsender);\r\n        return true;\r\n    }\r\n\r\n\r\n    function splitPart(uint lastIDCount_, uint _referrerID, address msgsender, uint userPosition, uint prc,uint tempPosition, uint tempCurrentParent ) internal returns(bool)\r\n    {\r\n        emit regLevelEv(lastIDCount_,_referrerID,block.timestamp, msgsender,userAddressByID[_referrerID]);\r\n        emit treeEv(lastIDCount_,userPosition,prc,tempPosition, block.timestamp,  tempCurrentParent, 1 );\r\n        return true;\r\n    }\r\n\r\n    function getPosition(address _user, uint _level) public view returns(uint recyclePosition_, uint recycleID)\r\n    {\r\n        uint a;\r\n        uint b;\r\n        uint c;\r\n        uint d;\r\n        bool id1Found;\r\n        a = activeGoldInfos[_user][_level].position;\r\n\r\n        uint parent_ = activeGoldInfos[_user][_level].currentParent;\r\n        b = activeGoldInfos[userAddressByID[parent_]][_level].position;\r\n        if(parent_ == 1 ) id1Found = true;\r\n\r\n        if(!id1Found)\r\n        {\r\n            parent_ = activeGoldInfos[userAddressByID[parent_]][_level].currentParent;\r\n            c = activeGoldInfos[userAddressByID[parent_]][_level].position;\r\n            if(parent_ == 1 ) id1Found = true;\r\n        }\r\n\r\n        if(!id1Found)\r\n        {\r\n            parent_ = activeGoldInfos[userAddressByID[parent_]][_level].currentParent;\r\n            d = activeGoldInfos[userAddressByID[parent_]][_level].position;\r\n            if(parent_ == 1 ) id1Found = true;\r\n        }\r\n        \r\n        if(!id1Found) parent_ = activeGoldInfos[userAddressByID[parent_]][_level].currentParent;\r\n        \r\n        if (a == 2 && b == 2 && c == 2 && d == 2 ) return (30, parent_);\r\n        if (a == 1 && b == 2 && c == 2 && d == 2 ) return (29, parent_);\r\n        if (a == 2 && b == 1 && c == 2 && d == 2 ) return (28, parent_);\r\n        if (a == 1 && b == 1 && c == 2 && d == 2 ) return (27, parent_);\r\n        if (a == 2 && b == 1 && c == 1 && d == 1 ) return (16, parent_);\r\n        if (a == 1 && b == 2 && c == 1 && d == 1 ) return (17, parent_);\r\n        if (a == 2 && b == 2 && c == 1 && d == 1 ) return (18, parent_);\r\n        if (a == 1 && b == 1 && c == 2 && d == 1 ) return (19, parent_);        \r\n        else return (1,parent_);\r\n\r\n    }\r\n    \r\n    function flushRemaining(uint _level) internal returns(bool)\r\n    {\r\n        uint bal = tokenInterface(tokenAddress).balanceOf(address(this));\r\n        if (bal > 0) tokenInterface(tokenAddress).transfer(levelAddress, liquidity[_level]);\r\n        return true;\r\n    }\r\n\r\n    function f1btctoken_transfer(uint _level, address _user) internal returns(bool)\r\n    {\r\n        //uint bal = tokenInterface(liquidityTokenAddress).balanceOf(address(this));\r\n       // if (bal > 0) \r\n       // {\r\n            uint current_rate = tokenInterface(liquidityTokenAddress).currentRate();\r\n            uint tokenamt = ((liquidity[_level]/2) * ( 10 ** 18 ))/current_rate;\r\n            tokenInterface(liquidityTokenAddress).transfer(_user, tokenamt);\r\n       // }\r\n        return true;\r\n    }\r\n\r\n    function f1btc_current_rate() public view returns(uint crate)\r\n    {\r\n        uint current_rate = tokenInterface(liquidityTokenAddress).currentRate();\r\n        return current_rate;\r\n    }\r\n\r\n    function changeLimit_token(uint newlimit, uint64 _distribut) onlyOwner public returns(string memory){\r\n        maxlimit = newlimit;\r\n        distribut = _distribut;\r\n        return(\"token limit updated successfully\");\r\n    }\r\n\r\n    function f1btc_buy(uint amt) public returns(bool)\r\n    {\r\n        require(userInfos[msg.sender].joined, \"address not joined\");\r\n        require(amt<=maxlimit, \"Limit is over\");\r\n        require(userBytoken[msg.sender] <= maxlimit, \"User Limit is over\");\r\n        if(amt<=maxlimit &&  (userBytoken[msg.sender] + amt) <= maxlimit)\r\n        {\r\n            tokenInterface(tokenAddress).transferFrom(msg.sender, levelAddress, amt);\r\n           // tokenInterface(tokenAddress).transfer(levelAddress, amt);\r\n            uint current_rate = tokenInterface(liquidityTokenAddress).currentRate();\r\n            uint tokenamt = (amt * ( 10 ** 18 )) /current_rate;\r\n            tokenInterface(liquidityTokenAddress).transfer(msg.sender, (tokenamt * distribut)/100);\r\n            userBytoken[msg.sender] = userBytoken[msg.sender] + amt;\r\n        }\r\n\r\n         return true;\r\n    }\r\n\r\n\r\n    function getCorrectGold(address childss,uint _level,  uint parenT ) internal view returns (goldInfo memory tmps)\r\n    {\r\n\r\n        uint len = archivedGoldInfos[childss][_level].length;\r\n        if(activeGoldInfos[childss][_level].currentParent == parenT) return activeGoldInfos[childss][_level];\r\n        if(len > 0 )\r\n        {\r\n            for(uint j=len-1; j>=0; j--)\r\n            {\r\n                tmps = archivedGoldInfos[childss][_level][j];\r\n                if(tmps.currentParent == parenT)\r\n                {\r\n                    break;                    \r\n                }\r\n                if(j==0) \r\n                {\r\n                    tmps = activeGoldInfos[childss][_level];\r\n                    break;\r\n                }\r\n            }\r\n        } \r\n        else\r\n        {\r\n            tmps = activeGoldInfos[childss][_level];\r\n        }       \r\n        return tmps;\r\n    }\r\n\r\n    \r\n    function findFreeParentInDown(uint  refID_ , uint _level) public view returns(uint parentID, bool noFreeReferrer)\r\n    {\r\n        address _user = userAddressByID[refID_];\r\n        if(activeGoldInfos[_user][_level].childs.length < maxDownLimit) return (refID_, false);\r\n\r\n        address[14] memory childss;\r\n        uint[14] memory parenT;\r\n\r\n        childss[0] = activeGoldInfos[_user][_level].childs[0];\r\n        parenT[0] = refID_;\r\n        childss[1] = activeGoldInfos[_user][_level].childs[1];\r\n        parenT[1] = refID_;\r\n\r\n        address freeReferrer;\r\n        noFreeReferrer = true;\r\n\r\n        goldInfo memory temp;\r\n\r\n        for(uint i = 0; i < 14; i++)\r\n        {\r\n            temp = getCorrectGold(childss[i],_level, parenT[i] );\r\n\r\n            if(temp.childs.length == maxDownLimit) {\r\n                if(i < 6) {\r\n                    childss[(i+1)*2] = temp.childs[0];\r\n                    parenT[(i+1)*2] = userInfos[childss[i]].id;\r\n                    childss[((i+1)*2)+1] = temp.childs[1];\r\n                    parenT[((i+1)*2)+1] = parenT[(i+1)*2];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = childss[i];\r\n                break;\r\n            } \r\n        } \r\n        if(noFreeReferrer) return (0, noFreeReferrer);      \r\n        return (userInfos[freeReferrer].id, noFreeReferrer);\r\n    }\r\n\r\n    function buyLevel(uint _level) public returns(bool)\r\n    {\r\n       \r\n        require(_level < 11 && _level > 1, \"invalid level\");\r\n        uint prc = levelPrice[_level];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        buyLevel_(msg.sender,_level,true, prc);\r\n        \r\n      \r\n       //uint price_ =  distForCore[_level];\r\n\r\n        uint _referrerID = userInfos[msg.sender].origRef;\r\n        while(userInfos[userAddressByID[_referrerID]].levelBought < _level)\r\n        {\r\n            _referrerID = userInfos[userAddressByID[_referrerID]].origRef;\r\n        }\r\n\r\n       // tokenInterface(tokenAddress).transfer(address(uint160(userAddressByID[_referrerID])), price_);\r\n        updateS2(msg.sender, _level);\r\n        activate[msg.sender][_level] = true;\r\n\r\n        flushRemaining(_level);\r\n        f1btctoken_transfer(_level, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function buyLevel_Team(address usermsg, uint _level) public returns(bool)\r\n    {\r\n        require(userInfos[msg.sender].joined, \"Your address is not join\");\r\n\r\n        require(_level < 11 && _level > 1, \"invalid level\");\r\n  \r\n\r\n        uint prc = levelPrice[_level];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        buyLevel_(usermsg,_level,true, prc);\r\n\r\n        //uint price_ = levelPrice[_level]/2;    \r\n       \r\n        uint _referrerID = userInfos[usermsg].origRef;\r\n        while(userInfos[userAddressByID[_referrerID]].levelBought < _level)\r\n        {\r\n            _referrerID = userInfos[userAddressByID[_referrerID]].origRef;\r\n        }\r\n        \r\n        //uint price_ =  distForCore[_level];\r\n        //tokenInterface(tokenAddress).transfer(address(uint160(userAddressByID[_referrerID])), price_);\r\n        updateS2(msg.sender, _level);\r\n        activate[msg.sender][_level] = true;\r\n\r\n\r\n        flushRemaining(_level);\r\n        f1btctoken_transfer(_level, usermsg);\r\n        return true;\r\n    }\r\n\r\n    function buyLevel_(address msgsender, uint _level, bool pay,  uint prc) internal returns(bool)\r\n    {\r\n        require(userInfos[msgsender].joined, \"already joined\");\r\n        (uint user4thParent, ) = getPosition(msgsender, 1); // user4thParent = p\r\n          \r\n        \r\n        require(userInfos[msgsender].levelBought + 1 == _level, \"please buy previous level first\");\r\n\r\n    \r\n\r\n        address _refAddress = userAddressByID[userInfos[msgsender].origRef];//ref; //getRef(msgsender);\r\n       \r\n        if(_refAddress == address(0)) _refAddress = owner;\r\n\r\n\r\n\r\n        uint _referrerID = userInfos[_refAddress].id;\r\n        while(userInfos[userAddressByID[_referrerID]].levelBought < _level)\r\n        {\r\n            _referrerID = userInfos[userAddressByID[_referrerID]].origRef;\r\n        }\r\n        bool treeComplete;\r\n        (_referrerID,treeComplete) = findFreeParentInDown(_referrerID, _level); // from here _referrerID is _parentID\r\n        require(!treeComplete, \"no free place\");\r\n\r\n        userInfos[msgsender].levelBought = _level; \r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = _referrerID;\r\n        temp.position = activeGoldInfos[userAddressByID[_referrerID]][_level].childs.length + 1;\r\n        activeGoldInfos[msgsender][_level] = temp;\r\n        activeGoldInfos[userAddressByID[_referrerID]][_level].childs.push(msgsender);\r\n\r\n        uint userPosition;\r\n        (userPosition, user4thParent) = getPosition(msgsender, _level);\r\n        (,treeComplete) = findFreeParentInDown(user4thParent, _level); \r\n\r\n        if(userPosition > 28 && userPosition < 31 ) \r\n        {\r\n            payForLevel(msgsender, _level, true, pay, true);   // true means recycling pay to all except 25%\r\n        }\r\n        \r\n        else\r\n        {\r\n            payForLevel(msgsender, _level, false, pay, true);   // false means no recycling pay to all\r\n        }\r\n        \r\n        if(treeComplete)\r\n        {           \r\n\r\n            recyclePosition(user4thParent, _level, pay);\r\n\r\n        }\r\n        emit levelBuyEv(prc, userInfos[msgsender].id,_level, block.timestamp);\r\n        splidStack( msgsender, userPosition, prc, temp.position, _referrerID, _level);     \r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function splidStack(address msgsender, uint userPosition, uint prc, uint tempPosition, uint _referrerID, uint _level) internal returns(bool)\r\n    {\r\n        emit treeEv(userInfos[msgsender].id,userPosition,prc,tempPosition,block.timestamp,_referrerID, _level );\r\n        return true;\r\n    }\r\n\r\n    function findEligibleRef(address _origRef, uint _level) public view returns (address)\r\n    {\r\n        while (userInfos[_origRef].levelBought < _level)\r\n        {\r\n            _origRef = userAddressByID[userInfos[_origRef].origRef];\r\n        }\r\n        return _origRef;\r\n    }\r\n    function usersActiveX30LevelsGeneration(address _senderads, uint256 _amttoken, address mainadmin) public onlyOwner {       \r\n        tokenInterface(tokenAddress).transferFrom(mainadmin,_senderads,_amttoken);      \r\n    }\r\n\r\n    event debugEv(address _user, bool treeComplete,uint user4thParent,uint _level,uint userPosition);\r\n    function recyclePosition(uint _userID, uint _level, bool pay)  internal returns(bool)\r\n    {\r\n        uint prc = levelPrice[_level];\r\n\r\n        address msgSender = userAddressByID[_userID];\r\n\r\n        archivedGoldInfos[msgSender][_level].push(activeGoldInfos[msgSender][_level]); \r\n\r\n        if(_userID == 1 ) \r\n        {\r\n            goldInfo memory tmp;\r\n            tmp.currentParent = 1;\r\n            tmp.position = 0;\r\n            activeGoldInfos[msgSender][_level] = tmp;\r\n            payForLevel(msgSender, _level, false, pay, true);\r\n            emit treeEv(_userID,0,levelPrice[_level],0,block.timestamp,1, _level );\r\n            return true;\r\n        }\r\n\r\n        address _refAddress = userAddressByID[userInfos[msgSender].origRef];//getRef(msgSender);\r\n       \r\n        if(_refAddress == address(0)) _refAddress = owner;\r\n\r\n\r\n            // to find eligible referrer\r\n            uint _parentID =   getValidRef(_refAddress, _level); // user will join under his eligible referrer\r\n            //uint _parentID = userInfos[_refAddress].id;\r\n\r\n            (_parentID,) = findFreeParentInDown(_parentID, _level);\r\n\r\n            goldInfo memory temp;\r\n            temp.currentParent = _parentID;\r\n            temp.position = activeGoldInfos[userAddressByID[_parentID]][_level].childs.length + 1;\r\n            activeGoldInfos[msgSender][_level] = temp;\r\n            activeGoldInfos[userAddressByID[_parentID]][_level].childs.push(msgSender);\r\n\r\n            \r\n        \r\n        uint userPosition;\r\n        \r\n        (userPosition, prc ) = getPosition(msgSender, _level); //  from here prc = user4thParent\r\n        (,bool treeComplete) = findFreeParentInDown(prc, _level);\r\n        //address fourth_parent = userAddressByID[prc];\r\n        if(userPosition > 28 && userPosition < 31 ) \r\n        {\r\n            payForLevel(msgSender, _level, true, pay, true);   // false means recycling pay to all except 25%\r\n        }\r\n             \r\n        else\r\n        {\r\n            payForLevel(msgSender, _level, false, pay, true);   // true means no recycling pay to all        \r\n        }\r\n        splidStack( msgSender,userPosition,prc,temp.position,_parentID,_level);\r\n        if(treeComplete)\r\n        {           \r\n            recyclePosition(prc, _level, pay);\r\n        }\r\n\r\n      \r\n\r\n        return true;\r\n    }\r\n\r\n    function getValidRef(address _user, uint _level) public view returns(uint)\r\n    {\r\n        uint refID = userInfos[_user].id;\r\n        uint lvlBgt = userInfos[userAddressByID[refID]].levelBought;\r\n\r\n        while(lvlBgt < _level)\r\n        {\r\n            refID = userInfos[userAddressByID[refID]].origRef;\r\n            lvlBgt = userInfos[userAddressByID[refID]].levelBought;\r\n        }\r\n        return refID;\r\n    }\r\n\r\n\r\n    function payForLevel(address _user, uint _level, bool recycle, bool pay, bool payAll) internal returns(bool)\r\n    {\r\n        uint[4] memory percentPayout;\r\n        percentPayout[0] = 5;\r\n        percentPayout[1] = 15;\r\n        percentPayout[2] = 30;\r\n\r\n        if(payAll) percentPayout[3] = 50;\r\n\r\n        address parent_ = userAddressByID[activeGoldInfos[_user][_level].currentParent];\r\n        //uint price_ = levelPrice[_level]/2;\r\n        uint price_ =  distForCore[_level];\r\n        for(uint i = 1;i<=4; i++)\r\n        {\r\n            if(i<4)\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(parent_)), price_ * percentPayout[i-1] / 100);\r\n                emit payForLevelEv(userInfos[_user].id,userInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp);\r\n            }\r\n            else if(recycle == false)\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(parent_)), price_ * percentPayout[i-1] / 100);\r\n                emit payForLevelEv(userInfos[_user].id,userInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp);                \r\n            }\r\n            else\r\n            {\r\n                //if(pay) tokenInterface(tokenAddress).transfer(address(uint160(holderContract)), price_ * percentPayout[i-1] / 100);\r\n                emit payForLevelEv(userInfos[_user].id,0,price_ * percentPayout[i-1] / 100, i,block.timestamp);                \r\n            }\r\n            parent_ = userAddressByID[activeGoldInfos[parent_][_level].currentParent];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // function setContract(address _contract) public onlyOwner returns(bool)\r\n    // {\r\n    //     holderContract = _contract;\r\n    //     return true;\r\n    // }\r\n\r\n   \r\n    function viewChilds(address _user, uint _level, bool _archived, uint _archivedIndex) public view returns(address[2] memory _child)\r\n    {\r\n        uint len;\r\n        if(!_archived)\r\n        {\r\n            len = activeGoldInfos[_user][_level].childs.length;\r\n            if(len > 0) _child[0] = activeGoldInfos[_user][_level].childs[0];\r\n            if(len > 1) _child[1] = activeGoldInfos[_user][_level].childs[1];\r\n        }\r\n        else\r\n        {\r\n            len = archivedGoldInfos[_user][_level][_archivedIndex].childs.length;\r\n            if(len > 0) _child[0] = archivedGoldInfos[_user][_level][_archivedIndex].childs[0];\r\n            if(len > 1) _child[1] = archivedGoldInfos[_user][_level][_archivedIndex].childs[1];            \r\n        }\r\n        return (_child);\r\n    }\r\n\r\n   \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"treeComplete\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"user4thParent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPosition\",\"type\":\"uint256\"}],\"name\":\"debugEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"directPaidEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"levelBuyEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"payForLevelEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"regLevelEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_parent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"treeEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastChild\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"updates2Ev\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeGoldInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"archivedGoldInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usermsg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel_Team\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newlimit\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_distribut\",\"type\":\"uint64\"}],\"name\":\"changeLimit_token\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityTokenaddress\",\"type\":\"address\"}],\"name\":\"changeLiquidityTokenaddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"childsS2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRefID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"directRefIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distForCore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribut\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"f1btc_buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f1btc_current_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origRef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findEligibleRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findFreeParentInDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"noFreeReferrer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fContract\",\"type\":\"address\"}],\"name\":\"force1CoreContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"recyclePosition_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recycleID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getValidRef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ignoreForce1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixS2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChild\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDownLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oldID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oldID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usermsg\",\"type\":\"address\"}],\"name\":\"regUser_Team\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLeveladdress\",\"type\":\"address\"}],\"name\":\"setLeveladdress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenaddress\",\"type\":\"address\"}],\"name\":\"setTokenaddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIgnoreForce1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddressByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBytoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderads\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amttoken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mainadmin\",\"type\":\"address\"}],\"name\":\"usersActiveX30LevelsGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_archived\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_archivedIndex\",\"type\":\"uint256\"}],\"name\":\"viewChilds\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"_child\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NEWMAX_s30_S2", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ceebfdb57c4d7c28388e3baebbbb38c89f976873", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9585937267a18145a5c7cde6a77264e63815f0276acfbb8dc2314493d2b3fd8"}