{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract  HybridToken {\r\n    string  public name = \"Hybrid Token\";\r\n    string  public symbol = \"HBD\";\r\n    uint256 public totalSupply = 21000000000000000 * 10 ** 8; // \r\n    uint8   public decimals = 8;\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n \r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract HybridToken_StakingDAPP {\r\n    string public name = \"Hybrid Token Staking App\";\r\n    HybridToken  public HBD ;\r\n\r\n    //declaring owner state variable\r\n    address public owner;\r\n\r\n       //declaring APY for custom staking ( default 0.166% daily or 60% APY yearly)\r\n    uint256 public defaultAPY = 24;\r\n      uint256 public APY2 = 30;\r\n        uint256 public APY3 = 36;\r\n\r\n    //declaring APY for custom staking ( default 0.166% daily or 60% APY yearly)\r\n    uint256 public customAPY = 166;\r\n\r\n    //declaring total staked\r\n    uint256 public totalStaked;\r\n    uint256 public customTotalStaked;\r\n\r\n    //users staking balance\r\n    mapping(address => uint256) public stakingBalance;\r\n    mapping(address => uint256) public stakingPlan;\r\n\r\n    mapping(address => uint256) public customStakingBalance;\r\n\r\n    //mapping list of users who ever staked\r\n    mapping(address => bool) public hasStaked;\r\n    mapping(address => bool) public customHasStaked;\r\n\r\n    //mapping list of users who are staking at the moment\r\n    mapping(address => bool) public isStakingAtm;\r\n    mapping(address => bool) public customIsStakingAtm;\r\n   \r\n\r\n    mapping(address => uint256) public staking_start_time;\r\n    mapping(address => uint256) public staking_end_time;\r\n    mapping(address => uint256) public unstake_time;\r\n      \r\n\r\n\r\n    //array of all stakers\r\n    address[] public stakers;\r\n    address[] public customStakers;\r\n\r\n    constructor(HybridToken _Token) public payable {\r\n        HBD  = _Token;\r\n\r\n        //assigning owner on deployment\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\nfunction transferOwnership(address newOwner) public  {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    //stake tokens function\r\n\r\n\r\n    function stakeTokens(uint256 _amount , uint256 _APY ) public {\r\n        //must be more than 0\r\n        require(_amount > 0, \"amount cannot be 0\");\r\n\r\n        //User adding test tokens\r\n        HBD.transferFrom(msg.sender, address(this), _amount);\r\n\r\n\r\n        totalStaked = totalStaked + _amount;\r\n\r\n        //updating staking balance for user by mapping\r\n        stakingPlan[msg.sender] = _APY;\r\n        stakingBalance[msg.sender] = stakingBalance[msg.sender] + _amount;\r\n\r\n        staking_start_time[msg.sender]= block.timestamp;\r\n        staking_end_time[msg.sender]=staking_start_time[msg.sender] + 86400;\r\n        unstake_time[msg.sender]=staking_start_time[msg.sender] * 86400;\r\n\r\n        //checking if user staked before or not, if NOT staked adding to array of stakers\r\n        if (!hasStaked[msg.sender]) {\r\n            stakers.push(msg.sender);\r\n        }\r\n\r\n        //updating staking status\r\n        \r\n        hasStaked[msg.sender] = true;\r\n        isStakingAtm[msg.sender] = true;\r\n    }\r\n\r\n    //unstake tokens function\r\n\r\n    function unstakeTokens() public {\r\n       \r\n    require(unstake_time[msg.sender] < block.timestamp , \"plase try after staking  Time period hours\");\r\n        uint256 balance = stakingBalance[msg.sender];\r\n\r\n        //amount should be more than 0\r\n        require(balance > 0, \"amount has to be more than 0\");\r\n\r\n        //transfer staked tokens back to user\r\n        HBD.transfer(msg.sender, balance);\r\n        totalStaked = totalStaked - balance;\r\n\r\n        //reseting users staking balance\r\n        stakingBalance[msg.sender] = 0;\r\n\r\n        //updating staking status\r\n        isStakingAtm[msg.sender] = false;\r\n    }\r\n\r\n\r\n    function dailyReward( ) public {\r\n\r\n        require(staking_end_time[msg.sender] < block.timestamp , \"plase try after 24 hours\");\r\n        uint256 balance = stakingBalance[msg.sender];\r\n        uint256 reward ;\r\n\r\n         uint256 plan = stakingPlan[msg.sender];\r\n         if(plan == 180){\r\n             reward =   balance * 670 / 1000000;\r\n\r\n         }\r\n         if(plan == 270){\r\n             reward =   balance * 840 / 1000000;\r\n\r\n         }\r\n         if(plan == 360){\r\n             reward =   balance * 1000 / 1000000;\r\n\r\n         }\r\n\r\n        //amount should be more than 0\r\n        require(balance > 0, \"amount has to be more than 0\");\r\n\r\n        //transfer staked tokens back to user\r\n        HBD.transfer(msg.sender, reward);\r\n\r\n        staking_end_time[msg.sender] = staking_end_time[msg.sender] + 86400;\r\n      \r\n\r\n    }\r\n\r\n    // different APY Pool\r\n    function customStaking(uint256 _amount) internal {\r\n        require(_amount > 0, \"amount cannot be 0\");\r\n        HBD.transferFrom(msg.sender, address(this), _amount);\r\n        customTotalStaked = customTotalStaked + _amount;\r\n        customStakingBalance[msg.sender] =\r\n            customStakingBalance[msg.sender] +\r\n            _amount;\r\n\r\n        if (!customHasStaked[msg.sender]) {\r\n            customStakers.push(msg.sender);\r\n        }\r\n        customHasStaked[msg.sender] = true;\r\n        customIsStakingAtm[msg.sender] = true;\r\n    }\r\n\r\n    function customUnstake() internal {\r\n        uint256 balance = customStakingBalance[msg.sender];\r\n        require(balance > 0, \"amount has to be more than 0\");\r\n        HBD.transfer(msg.sender, balance);\r\n        customTotalStaked = customTotalStaked - balance;\r\n        customStakingBalance[msg.sender] = 0;\r\n        customIsStakingAtm[msg.sender] = false;\r\n    }\r\n\r\n    //airdropp tokens\r\n    function redistributeRewards() internal {\r\n        //only owner can issue airdrop\r\n        require(msg.sender == owner, \"Only contract creator can redistribute\");\r\n\r\n        //doing drop for all addresses\r\n        for (uint256 i = 0; i < stakers.length; i++) {\r\n            address  recipient = stakers[i];\r\n\r\n            //calculating daily apy for user\r\n            uint256 balance = stakingBalance[recipient] * defaultAPY;\r\n            balance = balance / 100000;\r\n\r\n            if (balance > 0) {\r\n                // rISINGBIRD.transfer(recipient, balance);\r\n               payable(recipient).transfer(balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    //customAPY airdrop\r\n    function customRewards() internal  {\r\n        require(msg.sender == owner, \"Only contract creator can redistribute\");\r\n        for (uint256 i = 0; i < customStakers.length; i++) {\r\n            address  recipient = customStakers[i];\r\n            uint256 balance = customStakingBalance[recipient] * customAPY;\r\n            balance = balance / 100000;\r\n\r\n            if (balance > 0) {\r\n                    payable(recipient).transfer(balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    //change APY value for custom staking\r\n    function changeAPY(uint256 _value) public {\r\n        //only owner can issue airdrop\r\n        require(msg.sender == owner, \"Only contract creator can change APY\");\r\n        require(\r\n            _value > 0,\r\n            \"APY value has to be more than 0, try 100 for (0.166% daily) instead\"\r\n        );\r\n        customAPY = _value;\r\n    }\r\n\r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract HybridToken\",\"name\":\"_Token\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"APY2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APY3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HBD\",\"outputs\":[{\"internalType\":\"contract HybridToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customHasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customIsStakingAtm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakingAtm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking_end_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking_start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstake_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HybridToken_StakingDAPP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007b6838c155f2800a0fb99b0382002dbfeee8ce22", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://195e0c4f925d8f03f8022c762d1c0c6f8c009d6a908a98a71ca99f2df980b55a"}