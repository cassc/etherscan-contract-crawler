{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@gnosis.pm/mock-contract/contracts/MockContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface MockInterface {\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when it is called\\n\\t * with any calldata that is not mocked more specifically below\\n\\t * (e.g. using givenMethodReturn).\\n\\t * @param response ABI encoded response that will be returned if method is invoked\\n\\t */\\n\\tfunction givenAnyReturn(bytes calldata response) external;\\n\\tfunction givenAnyReturnBool(bool response) external;\\n\\tfunction givenAnyReturnUint(uint response) external;\\n\\tfunction givenAnyReturnAddress(address response) external;\\n\\n\\tfunction givenAnyRevert() external;\\n\\tfunction givenAnyRevertWithMessage(string calldata message) external;\\n\\tfunction givenAnyRunOutOfGas() external;\\n\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when the given\\n\\t * methodId is called regardless of arguments. If the methodId and arguments\\n\\t * are mocked more specifically (using `givenMethodAndArguments`) the latter\\n\\t * will take precedence.\\n\\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n\\t * @param response ABI encoded response that will be returned if method is invoked\\n\\t */\\n\\tfunction givenMethodReturn(bytes calldata method, bytes calldata response) external;\\n\\tfunction givenMethodReturnBool(bytes calldata method, bool response) external;\\n\\tfunction givenMethodReturnUint(bytes calldata method, uint response) external;\\n\\tfunction givenMethodReturnAddress(bytes calldata method, address response) external;\\n\\n\\tfunction givenMethodRevert(bytes calldata method) external;\\n\\tfunction givenMethodRevertWithMessage(bytes calldata method, string calldata message) external;\\n\\tfunction givenMethodRunOutOfGas(bytes calldata method) external;\\n\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when the given\\n\\t * methodId is called with matching arguments. These exact calldataMocks will take\\n\\t * precedence over all other calldataMocks.\\n\\t * @param call ABI encoded calldata (methodId and arguments)\\n\\t * @param response ABI encoded response that will be returned if contract is invoked with calldata\\n\\t */\\n\\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) external;\\n\\tfunction givenCalldataReturnBool(bytes calldata call, bool response) external;\\n\\tfunction givenCalldataReturnUint(bytes calldata call, uint response) external;\\n\\tfunction givenCalldataReturnAddress(bytes calldata call, address response) external;\\n\\n\\tfunction givenCalldataRevert(bytes calldata call) external;\\n\\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external;\\n\\tfunction givenCalldataRunOutOfGas(bytes calldata call) external;\\n\\n\\t/**\\n\\t * @dev Returns the number of times anything has been called on this mock since last reset\\n\\t */\\n\\tfunction invocationCount() external returns (uint);\\n\\n\\t/**\\n\\t * @dev Returns the number of times the given method has been called on this mock since last reset\\n\\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n\\t */\\n\\tfunction invocationCountForMethod(bytes calldata method) external returns (uint);\\n\\n\\t/**\\n\\t * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\\n\\t * @param call ABI encoded calldata (methodId and arguments)\\n\\t */\\n\\tfunction invocationCountForCalldata(bytes calldata call) external returns (uint);\\n\\n\\t/**\\n\\t * @dev Resets all mocked methods and invocation counts.\\n\\t */\\n\\t function reset() external;\\n}\\n\\n/**\\n * Implementation of the MockInterface.\\n */\\ncontract MockContract is MockInterface {\\n\\tenum MockType { Return, Revert, OutOfGas }\\n\\t\\n\\tbytes32 public constant MOCKS_LIST_START = hex\\\"01\\\";\\n\\tbytes public constant MOCKS_LIST_END = \\\"0xff\\\";\\n\\tbytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\\n\\tbytes4 public constant SENTINEL_ANY_MOCKS = hex\\\"01\\\";\\n\\tbytes public constant DEFAULT_FALLBACK_VALUE = abi.encode(false);\\n\\n\\t// A linked list allows easy iteration and inclusion checks\\n\\tmapping(bytes32 => bytes) calldataMocks;\\n\\tmapping(bytes => MockType) calldataMockTypes;\\n\\tmapping(bytes => bytes) calldataExpectations;\\n\\tmapping(bytes => string) calldataRevertMessage;\\n\\tmapping(bytes32 => uint) calldataInvocations;\\n\\n\\tmapping(bytes4 => bytes4) methodIdMocks;\\n\\tmapping(bytes4 => MockType) methodIdMockTypes;\\n\\tmapping(bytes4 => bytes) methodIdExpectations;\\n\\tmapping(bytes4 => string) methodIdRevertMessages;\\n\\tmapping(bytes32 => uint) methodIdInvocations;\\n\\n\\tMockType fallbackMockType;\\n\\tbytes fallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n\\tstring fallbackRevertMessage;\\n\\tuint invocations;\\n\\tuint resetCount;\\n\\n\\tconstructor() {\\n\\t\\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\t}\\n\\n\\tfunction trackCalldataMock(bytes memory call) private {\\n\\t\\tbytes32 callHash = keccak256(call);\\n\\t\\tif (calldataMocks[callHash].length == 0) {\\n\\t\\t\\tcalldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\\n\\t\\t\\tcalldataMocks[MOCKS_LIST_START] = call;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction trackMethodIdMock(bytes4 methodId) private {\\n\\t\\tif (methodIdMocks[methodId] == 0x0) {\\n\\t\\t\\tmethodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\\n\\t\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _givenAnyReturn(bytes memory response) internal {\\n\\t\\tfallbackMockType = MockType.Return;\\n\\t\\tfallbackExpectation = response;\\n\\t}\\n\\n\\tfunction givenAnyReturn(bytes calldata response) override external {\\n\\t\\t_givenAnyReturn(response);\\n\\t}\\n\\n\\tfunction givenAnyReturnBool(bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenAnyReturn(uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenAnyReturnUint(uint response) override external {\\n\\t\\t_givenAnyReturn(uintToBytes(response));\\t\\n\\t}\\n\\n\\tfunction givenAnyReturnAddress(address response) override external {\\n\\t\\t_givenAnyReturn(uintToBytes(uint(uint160(response))));\\n\\t}\\n\\n\\tfunction givenAnyRevert() override external {\\n\\t\\tfallbackMockType = MockType.Revert;\\n\\t\\tfallbackRevertMessage = \\\"\\\";\\n\\t}\\n\\n\\tfunction givenAnyRevertWithMessage(string calldata message) override external {\\n\\t\\tfallbackMockType = MockType.Revert;\\n\\t\\tfallbackRevertMessage = message;\\n\\t}\\n\\n\\tfunction givenAnyRunOutOfGas() override external {\\n\\t\\tfallbackMockType = MockType.OutOfGas;\\n\\t}\\n\\n\\tfunction _givenCalldataReturn(bytes memory call, bytes memory response) private  {\\n\\t\\tcalldataMockTypes[call] = MockType.Return;\\n\\t\\tcalldataExpectations[call] = response;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) override external  {\\n\\t\\t_givenCalldataReturn(call, response);\\n\\t}\\n\\n\\tfunction givenCalldataReturnBool(bytes calldata call, bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenCalldataReturn(call, uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenCalldataReturnUint(bytes calldata call, uint response) override external {\\n\\t\\t_givenCalldataReturn(call, uintToBytes(response));\\n\\t}\\n\\n\\tfunction givenCalldataReturnAddress(bytes calldata call, address response) override external {\\n\\t\\t_givenCalldataReturn(call, uintToBytes(uint(uint160(response))));\\n\\t}\\n\\n\\tfunction _givenMethodReturn(bytes memory call, bytes memory response) private {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Return;\\n\\t\\tmethodIdExpectations[method] = response;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenMethodReturn(bytes calldata call, bytes calldata response) override external {\\n\\t\\t_givenMethodReturn(call, response);\\n\\t}\\n\\n\\tfunction givenMethodReturnBool(bytes calldata call, bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenMethodReturn(call, uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenMethodReturnUint(bytes calldata call, uint response) override external {\\n\\t\\t_givenMethodReturn(call, uintToBytes(response));\\n\\t}\\n\\n\\tfunction givenMethodReturnAddress(bytes calldata call, address response) override external {\\n\\t\\t_givenMethodReturn(call, uintToBytes(uint(uint160(response))));\\n\\t}\\n\\n\\tfunction givenCalldataRevert(bytes calldata call) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.Revert;\\n\\t\\tcalldataRevertMessage[call] = \\\"\\\";\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRevert(bytes calldata call) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Revert;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.Revert;\\n\\t\\tcalldataRevertMessage[call] = message;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRevertWithMessage(bytes calldata call, string calldata message) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Revert;\\n\\t\\tmethodIdRevertMessages[method] = message;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenCalldataRunOutOfGas(bytes calldata call) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.OutOfGas;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRunOutOfGas(bytes calldata call) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.OutOfGas;\\n\\t\\ttrackMethodIdMock(method);\\t\\n\\t}\\n\\n\\tfunction invocationCount() override external view returns (uint) {\\n\\t\\treturn invocations;\\n\\t}\\n\\n\\tfunction invocationCountForMethod(bytes calldata call) override external view returns (uint) {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\treturn methodIdInvocations[keccak256(abi.encodePacked(resetCount, method))];\\n\\t}\\n\\n\\tfunction invocationCountForCalldata(bytes calldata call) override external view returns (uint) {\\n\\t\\treturn calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\\n\\t}\\n\\n\\tfunction reset() override external {\\n\\t\\t// Reset all exact calldataMocks\\n\\t\\tbytes memory nextMock = calldataMocks[MOCKS_LIST_START];\\n\\t\\tbytes32 mockHash = keccak256(nextMock);\\n\\t\\t// We cannot compary bytes\\n\\t\\twhile(mockHash != MOCKS_LIST_END_HASH) {\\n\\t\\t\\t// Reset all mock maps\\n\\t\\t\\tcalldataMockTypes[nextMock] = MockType.Return;\\n\\t\\t\\tcalldataExpectations[nextMock] = hex\\\"\\\";\\n\\t\\t\\tcalldataRevertMessage[nextMock] = \\\"\\\";\\n\\t\\t\\t// Set next mock to remove\\n\\t\\t\\tnextMock = calldataMocks[mockHash];\\n\\t\\t\\t// Remove from linked list\\n\\t\\t\\tcalldataMocks[mockHash] = \\\"\\\";\\n\\t\\t\\t// Update mock hash\\n\\t\\t\\tmockHash = keccak256(nextMock);\\n\\t\\t}\\n\\t\\t// Clear list\\n\\t\\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\n\\t\\t// Reset all any calldataMocks\\n\\t\\tbytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\\n\\t\\twhile(nextAnyMock != SENTINEL_ANY_MOCKS) {\\n\\t\\t\\tbytes4 currentAnyMock = nextAnyMock;\\n\\t\\t\\tmethodIdMockTypes[currentAnyMock] = MockType.Return;\\n\\t\\t\\tmethodIdExpectations[currentAnyMock] = hex\\\"\\\";\\n\\t\\t\\tmethodIdRevertMessages[currentAnyMock] = \\\"\\\";\\n\\t\\t\\tnextAnyMock = methodIdMocks[currentAnyMock];\\n\\t\\t\\t// Remove from linked list\\n\\t\\t\\tmethodIdMocks[currentAnyMock] = 0x0;\\n\\t\\t}\\n\\t\\t// Clear list\\n\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\n\\t\\tfallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n\\t\\tfallbackMockType = MockType.Return;\\n\\t\\tinvocations = 0;\\n\\t\\tresetCount += 1;\\n\\t}\\n\\n\\tfunction useAllGas() private {\\n\\t\\twhile(true) {\\n\\t\\t\\tbool s;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\t//expensive call to EC multiply contract\\n\\t\\t\\t\\ts := call(sub(gas(), 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction bytesToBytes4(bytes memory b) private pure returns (bytes4) {\\n\\t\\tbytes4 out;\\n\\t\\tfor (uint i = 0; i < 4; i++) {\\n\\t\\t\\tout |= bytes4(b[i] & 0xFF) >> (i * 8);\\n\\t\\t}\\n\\t\\treturn out;\\n\\t}\\n\\n\\tfunction uintToBytes(uint256 x) private pure returns (bytes memory b) {\\n\\t\\tb = new bytes(32);\\n\\t\\tassembly { mstore(add(b, 32), x) }\\n\\t}\\n\\n\\tfunction updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\\n\\t\\trequire(msg.sender == address(this), \\\"Can only be called from the contract itself\\\");\\n\\t\\tinvocations += 1;\\n\\t\\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\\n\\t\\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\\n\\t}\\n\\n\\treceive() payable external {\\n\\t\\tfallbackImpl();\\n\\t}\\n\\tfallback() payable external {\\n\\t\\tfallbackImpl();\\n\\t}\\n\\n\\tfunction fallbackImpl() internal {\\n\\t\\tbytes4 methodId = msg.sig;\\n\\n\\t\\t// First, check exact matching overrides\\n\\t\\tif (calldataMockTypes[msg.data] == MockType.Revert) {\\n\\t\\t\\trevert(calldataRevertMessage[msg.data]);\\n\\t\\t}\\n\\t\\tif (calldataMockTypes[msg.data] == MockType.OutOfGas) {\\n\\t\\t\\tuseAllGas();\\n\\t\\t}\\n\\t\\tbytes memory result = calldataExpectations[msg.data];\\n\\n\\t\\t// Then check method Id overrides\\n\\t\\tif (result.length == 0) {\\n\\t\\t\\tif (methodIdMockTypes[methodId] == MockType.Revert) {\\n\\t\\t\\t\\trevert(methodIdRevertMessages[methodId]);\\n\\t\\t\\t}\\n\\t\\t\\tif (methodIdMockTypes[methodId] == MockType.OutOfGas) {\\n\\t\\t\\t\\tuseAllGas();\\n\\t\\t\\t}\\n\\t\\t\\tresult = methodIdExpectations[methodId];\\n\\t\\t}\\n\\n\\t\\t// Last, use the fallback override\\n\\t\\tif (result.length == 0) {\\n\\t\\t\\tif (fallbackMockType == MockType.Revert) {\\n\\t\\t\\t\\trevert(fallbackRevertMessage);\\n\\t\\t\\t}\\n\\t\\t\\tif (fallbackMockType == MockType.OutOfGas) {\\n\\t\\t\\t\\tuseAllGas();\\n\\t\\t\\t}\\n\\t\\t\\tresult = fallbackExpectation;\\n\\t\\t}\\n\\n\\t\\t// Record invocation as separate call so we don't rollback in case we are called with STATICCALL\\n\\t\\t(, bytes memory r) = address(this).call{gas: 100000}(abi.encodeWithSignature(\\\"updateInvocationCount(bytes4,bytes)\\\", methodId, msg.data));\\n\\t\\tassert(r.length == 0);\\n\\t\\t\\n\\t\\tassembly {\\n\\t\\t\\treturn(add(0x20, result), mload(result))\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Administrated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/**\\n * @author Trevin Hofmann\\n * @title An administrated contract with at least 5 owners\\n * This contract is designed to have a single administrator address and multiple owner addresses.\\n * A 3/5 majority of owners are able to change the administrator, with a perpetual \\\"vote\\\" in place.\\n * A 3/5 majority of owners are also able to add or remove owners.\\n * Any single owner can remove the administrator at any time, in an emergency where the administrator is compromised.\\n * If one owner has been compromised, the only damage they can do is pausing administrative activity until the\\n * other owners remove them and re-elect an administrator.\\n */\\nabstract contract Administrated {\\n\\n    // The single administrator for the contract\\n    address public administrator;\\n\\n    // The contract owners who can replace the administrator\\n    address[] public owners;\\n\\n    // A mapping of the owners, (owner => true) for all owners, for faster lookup\\n    mapping(address => bool) public ownersMap;\\n\\n    // A mapping of votes (voting owner => administrator candidate) for a new administrator\\n    mapping(address => address) public administratorVotes;\\n\\n    // A mapping of votes (voting owner => owner candidate) for adding a new owner\\n    mapping(address => address) public addOwnerVotes;\\n\\n    // A mapping of votes (voting owner => removed owner) for adding a new owner\\n    mapping(address => address) public removeOwnerVotes;\\n\\n    // Emitted when the administrator changes\\n    event AdministratorElected(address indexed administrator);\\n\\n    // Emitted when an owner is added\\n    event OwnerAdded(address indexed owner);\\n\\n    // Emitted when an owner is removed\\n    event OwnerRemoved(address indexed owner);\\n\\n    /**\\n     * @dev Constructor function, it will set the msg.sender as the administrator\\n     *\\n     * @param _owners The addresses of the contract owners\\n     */\\n    constructor(address[] memory _owners) {\\n        administrator = msg.sender;\\n\\n        // Require that there is at least one owner\\n        require(_owners.length >= 5, \\\"There must be at least 5 owners!\\\");\\n\\n        // Initialize the owner and vote maps\\n        owners = _owners;\\n        uint ownersLength = owners.length;\\n        for (uint i = 0; i < ownersLength; i++) {\\n            // Check for duplicate owners\\n            require(!ownersMap[owners[i]], \\\"There cannot be duplicate owners!\\\");\\n            // check that the administrator is not also an owner\\n            require(owners[i] != administrator, \\\"The administrator cannot be an owner!\\\");\\n            ownersMap[owners[i]] = true;\\n            administratorVotes[owners[i]] = administrator;\\n        }\\n\\n        // Emit an event to indicate that an administrator has been elected\\n        emit AdministratorElected(administrator);\\n    }\\n\\n    /**\\n     * @dev Only the administrator can call functions with this modifier\\n     */\\n    modifier onlyAdministrator() {\\n        // Check that an administrator is set\\n        require(administrator != address(0), \\\"An administrator is not currently set!\\\");\\n\\n        // Check that the message sender is the administrator\\n        require(msg.sender == administrator, \\\"Only the administrator can execute this function!\\\");\\n\\n        // The \\\"_\\\" placeholder is used to specify the code that the modifier should wrap\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only an owner can call functions with this modifier\\n     */\\n    modifier onlyOwner() {\\n        // Check that the message sender is an owner\\n        require(ownersMap[msg.sender], \\\"Only an owner can execute this function!\\\");\\n\\n        // The \\\"_\\\" placeholder is used to specify the code that the modifier should wrap\\n        _;\\n    }\\n\\n    /**\\n     * @dev An owner can call this to remove the administrator until a new one is elected.\\n     */\\n    function removeAdministrator() public onlyOwner {\\n        administrator = address(0);\\n        uint ownersLength = owners.length;\\n        for (uint i = 0; i < ownersLength; i++) {\\n            administratorVotes[owners[i]] = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @dev An owner can vote for a new administrator by calling this function and passing the address of a candidate.\\n     *\\n     * @param candidate The address of the candidate to vote for as the new administrator\\n     */\\n    function voteForAdministrator(address candidate) public onlyOwner {\\n        // Store owner's vote\\n        administratorVotes[msg.sender] = candidate;\\n\\n        // Count the number of votes for the candidate\\n        uint votesForCandidate = 0;\\n        uint ownersLength = owners.length;\\n        for (uint i = 0; i < ownersLength; i++) {\\n            if (administratorVotes[owners[i]] == candidate) {\\n                votesForCandidate += 1;\\n            }\\n        }\\n\\n        // Check if the candidate has a 3/5 majority of votes\\n        bool majorityReached = (votesForCandidate * 5 >= owners.length * 3);\\n\\n        // Update the administrator, if applicable\\n        if (majorityReached) {\\n            administrator = candidate;\\n            emit AdministratorElected(administrator);\\n        }\\n    }\\n\\n    /**\\n     * @dev An owner can vote for an additional owner by calling this function and passing the address of a candidate.\\n     *\\n     * @param candidate The address of the candidate to vote for as the added owner\\n     */\\n    function voteToAddOwner(address candidate) public onlyOwner {\\n        // Ensure the candidate address is not the zero address\\n        require(candidate != address(0), \\\"The zero address cannot be added as an owner!\\\");\\n\\n        // Ensure the candidate is not already an owner\\n        require(ownersMap[candidate] == false, \\\"You cannot vote to add someone who is already an owner!\\\");\\n\\n        // Store the vote of the owner\\n        addOwnerVotes[msg.sender] = candidate;\\n\\n        // Count the number of votes for the candidate\\n        uint votesForCandidate = 0;\\n        uint ownersLength = owners.length;\\n        for (uint i = 0; i < ownersLength; i++) {\\n            if (addOwnerVotes[owners[i]] == candidate) {\\n                votesForCandidate += 1;\\n            }\\n        }\\n\\n        // Check if the candidate has a 3/5 majority of votes\\n        bool majorityReached = (votesForCandidate * 5 >= owners.length * 3);\\n\\n        // Add the owner, if applicable\\n        if (majorityReached) {\\n            // Add the owner\\n            ownersMap[candidate] = true;\\n            owners.push(candidate);\\n            administratorVotes[candidate] = administrator;\\n\\n            // Reset the votes\\n            ownersLength = owners.length;\\n            for (uint i = 0; i < ownersLength; i++) {\\n                addOwnerVotes[owners[i]] = address(0);\\n            }\\n\\n            emit OwnerAdded(candidate);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows an owner to vote for a candidate to be removed as an owner.\\n     *\\n     * @param candidate The address of the candidate to vote for as the removed owner\\n     */\\n    function voteToRemoveOwner(address candidate) public onlyOwner {\\n        // Ensure the candidate address is not the zero address\\n        require(candidate != address(0), \\\"The zero address cannot be removed as an owner!\\\");\\n\\n        // Ensure that there will still be at least 5 owners\\n        require(owners.length > 5, \\\"You cannot vote to remove an owner when there are only 5 owners!\\\");\\n\\n        // Ensure the candidate is already an owner\\n        require(ownersMap[candidate] == true, \\\"You cannot vote to remove someone who is not an owner!\\\");\\n\\n        // Store the vote of the owner\\n        removeOwnerVotes[msg.sender] = candidate;\\n\\n        // Count the number of votes for the candidate\\n        uint votesForCandidate = 0;\\n        uint ownersLength = owners.length;\\n        for (uint i = 0; i < ownersLength; i++) {\\n            if (removeOwnerVotes[owners[i]] == candidate) {\\n                votesForCandidate += 1;\\n            }\\n        }\\n\\n        // Check if the candidate has a 3/5 majority of votes\\n        bool majorityReached = (votesForCandidate * 5 >= owners.length * 3);\\n\\n        // Remove the owner, if applicable\\n        if (majorityReached && candidate != administrator) {\\n            // Reset the votes\\n            for (uint i = 0; i < ownersLength; i++) {\\n                removeOwnerVotes[owners[i]] = address(0);\\n            }\\n\\n            // Remove the owner\\n            administratorVotes[candidate] = address(0);\\n            ownersMap[candidate] = false;\\n            ownersLength = owners.length;\\n            for (uint i = 0; i < ownersLength; i++) {\\n                if (owners[i] == candidate) {\\n                    owners[i] = owners[owners.length - 1];\\n                    owners.pop();\\n                    break;\\n                }\\n            }\\n\\n            emit OwnerRemoved(candidate);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/HighscoreNFTSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// An NFT contract for a set of Tokens which can be opened from Packs\\nimport \\\"./NFTSet.sol\\\";\\n\\n/**\\n * @author Trevin Hofmann\\n * @title An NFT Set with associated highscore leaderboards\\n */\\ncontract HighscoreNFTSet is NFTSet {\\n\\n    // A highscore to be associated with a token\\n    struct Highscore {\\n        uint256 tokenId;\\n        uint256 score;\\n        address walletAddress;\\n        string playerName;\\n        uint256 blockNumber;\\n    }\\n\\n    // The name of the NFT Set\\n    string public name;\\n\\n    // If true, then higher scores are better than lower ones for the leaderboard\\n    bool public higherIsBetter;\\n\\n    // The highscores for each Token\\n    mapping(uint256 => Highscore[]) public highscores;\\n\\n    // The global highscores list\\n    Highscore[] public globalHighscores;\\n\\n    // Emitted when a new high score has been added\\n    event NewHighscore(Highscore highscore);\\n\\n    /**\\n     * @dev Constructor for a set of Tokens with highscores\\n     *\\n     * @param _name string the name of the NFT Set\\n     * @param _higherIsBetter bool of whether higher scores are better or not\\n     * @param quantity uint256 number of Packs to be minted for this contract\\n     * @param owners The addresses of the contract owners\\n     * @param coordinator address of the VRF coordinator\\n     * @param subscriptionId subscription ID for the VRF service\\n     * @param keyHash key hash for the VRF service\\n     * @param callbackGasLimit gas limit for the callback function\\n     * @param requestConfirmations number of confirmations required\\n     */\\n    constructor(\\n        string memory _name,\\n        bool _higherIsBetter,\\n        uint256 quantity,\\n        address[] memory owners,\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations\\n    )\\n    NFTSet(quantity, owners, coordinator, subscriptionId, keyHash, callbackGasLimit, requestConfirmations) {\\n        name = _name;\\n        higherIsBetter = _higherIsBetter;\\n    }\\n\\n    /**\\n     * @dev Add a HighScore.\\n     *\\n     * @param tokenId uint256 id of a Token\\n     * @param score uint256 new highscore for the Token\\n     * @param walletAddress address player who earned the score\\n     * @param playerName string name of the player\\n     */\\n    function addHighscore(\\n        uint256 tokenId,\\n        uint256 score,\\n        address walletAddress,\\n        string memory playerName\\n    ) public onlyAdministrator {\\n        // Ensure the wallet address is not the 0x0 address\\n        require(walletAddress != address(0), \\\"The walletAddress cannot be the 0x0 address!\\\");\\n\\n        // Ensure the caller is the owner of the Token with the provided id\\n        require(balanceOf(walletAddress, tokenId) == 1, \\\"A highscore can only be saved for a Token's owner!\\\");\\n\\n        // Create a new Highscore struct with the provided values\\n        Highscore memory newScore = Highscore(\\n            tokenId,\\n            score,\\n            walletAddress,\\n            playerName,\\n            block.number\\n        );\\n\\n        // Add to token highscores if eligible\\n        addToHighscores(highscores[tokenId], newScore, 10);\\n\\n        // Add to global highscores if eligible\\n        addToHighscores(globalHighscores, newScore, 100);\\n    }\\n\\n    /**\\n     * @dev Add a HighScore to the provided list if eligible.\\n     *\\n     * @param scores Highscore[] list of highscores\\n     * @param highscore Highscore the score to be added\\n     * @param lengthLimit maximum size of list, which will be truncated if needed\\n     */\\n    function addToHighscores(\\n        Highscore[] storage scores,\\n        Highscore memory highscore,\\n        uint lengthLimit\\n    ) private {\\n        // Iterate through the current highscores for the provided Token\\n        uint scoresLength = scores.length;\\n\\n        for (uint i = 0; i <= scoresLength; i += 1) {\\n            // If we reach the end of the current highscores, simply add the new score\\n            if (i == scoresLength) {\\n                scores.push(highscore);\\n                break;\\n            }\\n\\n            // Check if the new score is higher or lower than the current score based on the 'higherIsBetter' setting\\n            uint256 currentScore = scores[i].score;\\n            bool higherQualifier = higherIsBetter && highscore.score > currentScore;\\n            bool lowerQualifier = !higherIsBetter && highscore.score < currentScore;\\n            bool qualifies = higherQualifier || lowerQualifier;\\n\\n            // If the new score is higher/lower than the current score, insert it into the correct position\\n            if (qualifies) {\\n                emit NewHighscore(highscore);\\n                uint end = scoresLength - 1;\\n                scores.push(scores[end]);\\n                for (uint j = end; j > i; j -= 1) {\\n                    scores[j] = scores[j - 1];\\n                }\\n                scores[i] = highscore;\\n                break;\\n            }\\n        }\\n\\n        // Ensure the highscores do not exceed 10\\n        if (scores.length > lengthLimit) {\\n            scores.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the highscores for a specific Token.\\n     *\\n     * @param tokenId uint256 id of a Token\\n     * @return Highscore[] the highscores for the provided Token\\n     */\\n    function getTokenScore(uint256 tokenId) public view returns (Highscore[] memory) {\\n        // Return the highscores for the provided Token\\n        return highscores[tokenId];\\n    }\\n\\n    /**\\n     * @dev Get the global highscores.\\n     *\\n     * @return Highscore[] the global highscores\\n     */\\n    function getGlobalScores() public view returns (Highscore[] memory) {\\n        return globalHighscores;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/NFTSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// An open source implementation of the ERC-1155 standard.\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\n\\n// This contract is designed to utilize Chainlink VRF service to generate random numbers\\nimport \\\"./RandomConsumer.sol\\\";\\n\\n// This contract is designed to have a single administrator address and multiple owner addresses\\nimport \\\"./Administrated.sol\\\";\\n\\n/**\\n * @author Trevin Hofmann\\n * @title A contract for random number generation\\n * An NFT contract for a set of Tokens which can be opened from Packs\\n * Token: a unique NFT which can be opened from a Pack\\n * Pack: a fungible item which can be redeemed for a random Token\\n */\\ncontract NFTSet is ERC1155Burnable, Administrated, RandomConsumer {\\n\\n    // The token ID of packs\\n    uint256 public constant PACK_ID = 0;\\n\\n    // The total number of Tokens to be minted\\n    uint256 public supply;\\n\\n    // The number of Packs that have been redeemed for Tokens\\n    uint256 public claimed = 0;\\n\\n    // The number of Tokens that have been minted\\n    uint256 public minted = 0;\\n\\n    // A mapping of random number request IDs to addresses of the Pack redeemers\\n    mapping(uint256 => address) public randomRequests;\\n\\n    // URI with additional metadata for the NFTs\\n    string private contractMetadataUri;\\n\\n    // IDs of Tokens yet to be minted\\n    mapping(uint256 => uint256) private remainingTokenIds;\\n\\n    // Emitted when the minting of Packs has been completed\\n    event MintingComplete();\\n\\n    // Emitted when a Pack has been burned\\n    event Burned(address indexed burner, uint256 requestId);\\n\\n    // Emitted when a Pack has been redeemed for a Token\\n    event Opened(address indexed recipient, uint tokenId);\\n\\n    /**\\n     * @dev Public constructor for a set of Packs and Tokens\\n     *\\n     * @param quantity uint256 total number of Packs to be minted for this contract\\n     * @param owners The addresses of the contract owners\\n     * @param coordinator address of the VRF coordinator\\n     * @param subscriptionId subscription ID for the VRF service\\n     * @param keyHash key hash for the VRF service\\n     * @param callbackGasLimit gas limit for the callback function\\n     * @param requestConfirmations number of confirmations required\\n     */\\n    constructor(\\n        uint256 quantity,\\n        address[] memory owners,\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations\\n    )\\n    ERC1155(\\\"https://www.arcaded.io\\\")\\n    Administrated(owners)\\n    RandomConsumer(coordinator, subscriptionId, keyHash, callbackGasLimit, requestConfirmations) {\\n        supply = quantity;\\n    }\\n\\n    /**\\n     * @dev Set the contract URIs\\n     *\\n     * @param contractUri string URI with additional metadata for the contract\\n     * @param nftUri string URI with additional metadata for the NFTs\\n     */\\n    function setContractUri(string memory contractUri, string memory nftUri) public onlyAdministrator {\\n        // Require that minting has not started yet for this set\\n        require(minted == 0, \\\"Minting has already started for this set!\\\");\\n\\n        // Set the contract and NFT metadata URIs\\n        contractMetadataUri = contractUri;\\n        _setURI(nftUri);\\n    }\\n\\n    /**\\n     * @dev Returns the URI of the contract\\n     *\\n     * @return string memory URI of the contract\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return contractMetadataUri;\\n    }\\n\\n    /**\\n     * @dev This function is used to mint a specified quantity of Packs\\n     *\\n     * @param quantity uint256 The number of Packs to mint\\n     */\\n    function mintPacks(uint256 quantity) public onlyAdministrator {\\n      // Ensure the number of Packs being minted does not exceed the remaining supply limit\\n      require(quantity + minted <= supply, \\\"The number of Packs being minted exceeds the remaining supply limit!\\\");\\n\\n      // Assign tokenIds to the minted packs\\n      for (uint i = 0; i < quantity; i++) {\\n          remainingTokenIds[minted + i] = minted + i + 1;\\n      }\\n\\n      // Mint the Packs\\n      _mint(msg.sender, PACK_ID, quantity, \\\"\\\");\\n\\n      // Update the total number of minted Packs\\n      minted += quantity;\\n\\n      // Check if all Packs have been minted\\n      if (minted == supply) {\\n          emit MintingComplete();\\n      }\\n    }\\n\\n    /**\\n     * @dev Burn a single pack, which will soon be redeemed for a random token\\n     *\\n     * @return requestId The unique id of the request for a random number\\n     */\\n    function open() public returns(uint256) {\\n        // Ensure that all packs have been minted\\n        require(minted == supply, \\\"Packs cannot be opened until after minting completes!\\\");\\n\\n        // Request a random number\\n        uint256 requestId = requestRandom();\\n\\n        // Store the address of the opener in the mapping of randomness requests\\n        randomRequests[requestId] = msg.sender;\\n\\n        // Burn a single pack\\n        _burn(msg.sender, PACK_ID, 1);\\n\\n        // Emit event for this burn\\n        emit Burned(msg.sender, requestId);\\n\\n        // return the request id\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev Allows a user to redeem a Pack using a seed\\n     *\\n     * @param recipient address address of the recipient\\n     * @param seed uint256 seed used to determine which Pack to redeem\\n     */\\n    function redeem(address recipient, uint256 seed) private {\\n        // Check that the recipient address is not the zero address\\n        require(recipient != address(0), \\\"The recipient cannot be the 0x0 address!\\\");\\n\\n        // Calculate the unclaimed Pack count\\n        uint unclaimed = minted - claimed;\\n\\n        // Determine the index of the Pack to redeem\\n        uint index = seed % unclaimed;\\n\\n        // Get the token ID of the Pack at the determined index\\n        uint tokenId = remainingTokenIds[index];\\n\\n        // Replace the redeemed Pack's token ID with the last unclaimed Pack's token ID\\n        remainingTokenIds[index] = remainingTokenIds[unclaimed - 1];\\n        delete remainingTokenIds[unclaimed - 1];\\n\\n        // Increment the number of Packs that have been claimed\\n        claimed++;\\n\\n        // Mint the Pack to the recipient\\n        _mint(recipient, tokenId, 1, \\\"\\\");\\n\\n        // Emit the event to indicate that a Pack has been opened\\n        emit Opened(recipient, tokenId);\\n    }\\n\\n    /**\\n     * @dev Receive the random number for redeeming a burnt pack\\n     *\\n     * @param requestId uint256 unique id for the request\\n     * @param random uint256 the random number\\n     */\\n    function receiveRandom(uint256 requestId, uint256 random) internal override {\\n        // Redeem the burnt pack for a token\\n        redeem(randomRequests[requestId], random);\\n\\n        // Clear the request\\n        randomRequests[requestId] = address(0);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/RandomConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A Chainlink service for verifiable random functions\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n// An interface for the Chainlink VRF coordinator\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\n// This contract is designed to have a single administrator address and multiple owner addresses\\nimport \\\"./Administrated.sol\\\";\\n\\n/**\\n * @author Trevin Hofmann\\n * @title A contract for random number generation\\n * This contract is designed to utilize Chainlink VRF service to generate random numbers\\n */\\nabstract contract RandomConsumer is VRFConsumerBaseV2, Administrated {\\n\\n    // Reference to the Chainlink VRF coordinator\\n    VRFCoordinatorV2Interface private vrfCoordinator;\\n\\n    // The Chainlink VRF subscription ID (https://vrf.chain.link/)\\n    uint64 private vrfSubscriptionId;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    bytes32 private vrfKeyHash;\\n\\n    // When true, random values cannot be requested\\n    bool private paused = false;\\n\\n    // Gas limit for callback function\\n    uint32 private vrfCallbackGasLimit;\\n\\n    // Number of confirmations required\\n    uint16 private vrfRequestConfirmations;\\n\\n    // Number of words in the output\\n    uint16 private constant VRF_NUM_WORDS = 1;\\n\\n    // Emitted when a random number has been requested\\n    event RandomRequestSent(uint256 requestId);\\n\\n    // Emitted when a random number request has been fulfilled\\n    event RandomRequestFulfilled(uint256 requestId, uint256 random);\\n\\n    /**\\n     * @dev Constructor to set up the contract\\n     *\\n     * @param coordinator address of the VRF coordinator\\n     * @param subscriptionId subscription ID for the VRF service\\n     * @param keyHash key hash for the VRF service\\n     * @param callbackGasLimit gas limit for the callback function\\n     * @param requestConfirmations number of confirmations required\\n     */\\n    constructor(\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations\\n    ) VRFConsumerBaseV2(coordinator) {\\n        vrfCoordinator = VRFCoordinatorV2Interface(coordinator);\\n        vrfSubscriptionId = subscriptionId;\\n        vrfKeyHash = keyHash;\\n        vrfCallbackGasLimit = callbackGasLimit;\\n        vrfRequestConfirmations = requestConfirmations;\\n    }\\n\\n    /**\\n     * @dev Function to request a random number\\n     *\\n     * @return requestId - unique id for the request\\n     */\\n    function requestRandom() internal returns(uint256) {\\n        require(!paused, \\\"Random values cannot be requested while paused!\\\");\\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\n            vrfKeyHash,\\n            vrfSubscriptionId,\\n            vrfRequestConfirmations,\\n            vrfCallbackGasLimit,\\n            VRF_NUM_WORDS\\n        );\\n        emit RandomRequestSent(requestId);\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev Function to receive the random number\\n     *\\n     * @param requestId - unique id for the request\\n     * @param random - the random number\\n     */\\n    function receiveRandom(uint256 requestId, uint256 random) internal virtual;\\n\\n    /**\\n     * @dev Function called by VRFV2WrapperConsumerBase to fulfill the random number request\\n     *\\n     * @param requestId - unique id for the request\\n     * @param randomWords - array of random numbers\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        receiveRandom(requestId, randomWords[0]);\\n    }\\n\\n    /**\\n     * @dev Function to pause all random number requests\\n     */\\n    function pauseVRF() public onlyAdministrator {\\n        paused = true;\\n    }\\n\\n    /**\\n     * @dev Function to resume all random number requests\\n     */\\n    function resumeVRF() public onlyAdministrator {\\n        paused = false;\\n    }\\n\\n    /**\\n     * @dev Function to update the contract's VRF configuration\\n     *\\n     * @param coordinator address of the VRF coordinator\\n     * @param subscriptionId subscription ID for the VRF service\\n     * @param keyHash key hash for the VRF service\\n     * @param callbackGasLimit gas limit for the callback function\\n     * @param requestConfirmations number of confirmations required\\n     */\\n    function updateVRFConfiguration(\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations\\n    ) public onlyAdministrator {\\n        vrfCoordinator = VRFCoordinatorV2Interface(coordinator);\\n        vrfSubscriptionId = subscriptionId;\\n        vrfKeyHash = keyHash;\\n        vrfCallbackGasLimit = callbackGasLimit;\\n        vrfRequestConfirmations = requestConfirmations;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/test/Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A mock contract for testing\\nimport \\\"@gnosis.pm/mock-contract/contracts/MockContract.sol\\\";\"\r\n    },\r\n    \"contracts/test/TestHighscoreNFTSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// An NFT Set with associated highscore leaderboards\\nimport \\\"../HighscoreNFTSet.sol\\\";\\n\\n/**\\n * @author Trevin Hofmann\\n * @title A test version of the HighscoreNFTSet\\n * This contract is used for testing only\\n */\\ncontract TestHighscoreNFTSet is HighscoreNFTSet {\\n\\n    /**\\n     * @dev Constructor for a set of Tokens with highscores\\n     *\\n     * @param name string the name of the NFT Set\\n     * @param higherIsBetter bool of whether higher scores are better or not\\n     * @param quantity uint256 number of Packs to be minted for this contract\\n     * @param owners The addresses of the contract owners\\n     * @param coordinator address of the VRF coordinator\\n     * @param subscriptionId subscription ID for the VRF service\\n     * @param keyHash key hash for the VRF service\\n     * @param callbackGasLimit gas limit for the callback function\\n     * @param requestConfirmations number of confirmations required\\n     */\\n    constructor(\\n        string memory name,\\n        bool higherIsBetter,\\n        uint256 quantity,\\n        address[] memory owners,\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations\\n    ) HighscoreNFTSet(\\n        name,\\n        higherIsBetter,\\n        quantity,\\n        owners,\\n        coordinator,\\n        subscriptionId,\\n        keyHash,\\n        callbackGasLimit,\\n        requestConfirmations\\n    ) {\\n        // Empty constructor\\n    }\\n\\n    /**\\n     * @dev Function to test the otherwise-internal fulfillRandomWords function\\n     *\\n     * @param requestId uint256 id of the VRF request\\n     * @param randomWords uint256[] array of random words received from the oracle\\n     */\\n    function testFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) public {\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestNFTSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// An NFT Set\\nimport \\\"../NFTSet.sol\\\";\\n\\n/**\\n * @author Trevin Hofmann\\n * @title A test version of the NFTSet\\n * This contract is used for testing only\\n */\\ncontract TestNFTSet is NFTSet {\\n\\n    /**\\n     * @dev Constructor for a set of Tokens\\n     *\\n     * @param quantity uint256 number of Packs to be minted for this contract\\n     * @param owners The addresses of the contract owners\\n     * @param coordinator address of the VRF coordinator\\n     * @param subscriptionId sub`ription ID for the VRF service\\n     * @param keyHash key hash for the VRF service\\n     * @param callbackGasLimit gas limit for the callback function\\n     * @param requestConfirmations number of confirmations required\\n     */\\n    constructor(\\n        uint256 quantity,\\n        address[] memory owners,\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint16 requestConfirmations\\n    ) NFTSet(quantity, owners, coordinator, subscriptionId, keyHash, callbackGasLimit, requestConfirmations) {\\n        // Empty constructor\\n    }\\n\\n    /**\\n     * @dev Function to test the otherwise-internal fulfillRandomWords function\\n     *\\n     * @param requestId uint256 id of the VRF request\\n     * @param randomWords uint256[] array of random words received from the oracle\\n     */\\n    function testFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) public {\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"AdministratorElected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Opened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"RandomRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomRequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACK_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addOwnerVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"administratorVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintPacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removeOwnerVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftUri\",\"type\":\"string\"}],\"name\":\"setContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"updateVRFConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"voteForAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"voteToAddOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"voteToRemoveOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTSet", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000ae975071be8f8ee67addbc1a82488f1c24858067000000000000000000000000000000000000000000000000000000000000038bcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd0000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000500000000000000000000000030821ae4edbac31368ebf35a94d710b0dc8acc93000000000000000000000000e0935dec5ef04208dc36b8255716460558c5c3c7000000000000000000000000b5d415ec63c9371f4ab31be2702bbe39edc274340000000000000000000000007239ba52e3f4a3d019d881b492b89f0f962574a5000000000000000000000000ddc192a56a83aeb37fa9e8f923de6676a6331b6f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://96003fb0c5f5280542c97b1adbf124adbfd7415facc4a6d13786c72eb415bf1a"}