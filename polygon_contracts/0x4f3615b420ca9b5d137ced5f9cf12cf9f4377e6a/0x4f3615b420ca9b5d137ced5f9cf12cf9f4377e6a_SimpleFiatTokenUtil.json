{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FiatToken/SimpleFiatTokenUtil.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Simplified implementation of FiatTokenUtil.sol\\n * Authors: Samuel Sutch, Amhed Herrera\\n */\\npragma solidity 0.8.19;\\n\\ncontract SimpleFiatTokenUtil {\\n    // keccak256(\\\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\\\")[0:4]\\n    bytes4 private constant _TRANSFER_WITH_AUTHORIZATION_SELECTOR = 0xe3ee160e;\\n\\n    address private _fiatToken;\\n    uint8 public _version;\\n\\n    event TransferFailed(address indexed authorizer, bytes32 indexed nonce);\\n\\n    constructor(address fiatToken, uint8 version) {\\n        _fiatToken = fiatToken;\\n        _version = version;\\n    }\\n\\n    function batchTransferWithAuthorization(\\n        address[] calldata from,\\n        address[] calldata to,\\n        uint256[] calldata value,\\n        uint256[] calldata validAfter,\\n        uint256[] calldata validBefore,\\n        bytes32[] calldata nonce,\\n        uint8[] calldata v,\\n        bytes32[] calldata r,\\n        bytes32[] calldata s,\\n        uint256 _gasLimit\\n    ) public {\\n        require(\\n            from.length == to.length &&\\n                to.length == value.length &&\\n                value.length == validAfter.length &&\\n                validAfter.length == validBefore.length &&\\n                validBefore.length == nonce.length &&\\n                nonce.length == v.length &&\\n                v.length == r.length &&\\n                r.length == s.length,\\n            \\\"FiatTokenUtil: parameter length mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < from.length; i++) {\\n            bytes memory data = abi.encodeWithSelector(\\n                _TRANSFER_WITH_AUTHORIZATION_SELECTOR,\\n                from[i],\\n                to[i],\\n                value[i],\\n                validAfter[i],\\n                validBefore[i],\\n                nonce[i],\\n                v[i],\\n                r[i],\\n                s[i]\\n            );\\n\\n            (bool success, ) = _fiatToken.call{gas: _gasLimit}(data);\\n            \\n            if (!success) {\\n                emit TransferFailed(from[i], nonce[i]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fiatToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validAfter\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validBefore\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"nonce\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"batchTransferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimpleFiatTokenUtil", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}