{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@synthetixio/core-contracts/contracts/errors/AccessError.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title Library for access related errors.\\n */\\nlibrary AccessError {\\n    /**\\n     * @dev Thrown when an address tries to perform an unauthorized action.\\n     * @param addr The address that attempts the action.\\n     */\\n    error Unauthorized(address addr);\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/errors/AddressError.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title Library for address related errors.\\n */\\nlibrary AddressError {\\n    /**\\n     * @dev Thrown when a zero address was passed as a function parameter (0x0000000000000000000000000000000000000000).\\n     */\\n    error ZeroAddress();\\n\\n    /**\\n     * @dev Thrown when an address representing a contract is expected, but no code is found at the address.\\n     * @param contr The address that was expected to be a contract.\\n     */\\n    error NotAContract(address contr);\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/ownership/OwnableStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport \\\"../errors/AccessError.sol\\\";\\n\\nlibrary OwnableStorage {\\n    bytes32 private constant _SLOT_OWNABLE_STORAGE =\\n        keccak256(abi.encode(\\\"io.synthetix.core-contracts.Ownable\\\"));\\n\\n    struct Data {\\n        address owner;\\n        address nominatedOwner;\\n    }\\n\\n    function load() internal pure returns (Data storage store) {\\n        bytes32 s = _SLOT_OWNABLE_STORAGE;\\n        assembly {\\n            store.slot := s\\n        }\\n    }\\n\\n    function onlyOwner() internal view {\\n        if (msg.sender != getOwner()) {\\n            revert AccessError.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    function getOwner() internal view returns (address) {\\n        return OwnableStorage.load().owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/proxy/AbstractProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nabstract contract AbstractProxy {\\n    fallback() external payable {\\n        _forward();\\n    }\\n\\n    receive() external payable {\\n        _forward();\\n    }\\n\\n    function _forward() internal {\\n        address implementation = _getImplementation();\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function _getImplementation() internal view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/proxy/ProxyStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\ncontract ProxyStorage {\\n    bytes32 private constant _SLOT_PROXY_STORAGE =\\n        keccak256(abi.encode(\\\"io.synthetix.core-contracts.Proxy\\\"));\\n\\n    struct ProxyStore {\\n        address implementation;\\n        bool simulatingUpgrade;\\n    }\\n\\n    function _proxyStore() internal pure returns (ProxyStore storage store) {\\n        bytes32 s = _SLOT_PROXY_STORAGE;\\n        assembly {\\n            store.slot := s\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/proxy/UUPSProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport \\\"./AbstractProxy.sol\\\";\\nimport \\\"./ProxyStorage.sol\\\";\\nimport \\\"../errors/AddressError.sol\\\";\\nimport \\\"../utils/AddressUtil.sol\\\";\\n\\ncontract UUPSProxy is AbstractProxy, ProxyStorage {\\n    constructor(address firstImplementation) {\\n        if (firstImplementation == address(0)) {\\n            revert AddressError.ZeroAddress();\\n        }\\n\\n        if (!AddressUtil.isContract(firstImplementation)) {\\n            revert AddressError.NotAContract(firstImplementation);\\n        }\\n\\n        _proxyStore().implementation = firstImplementation;\\n    }\\n\\n    function _getImplementation() internal view virtual override returns (address) {\\n        return _proxyStore().implementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport {UUPSProxy} from \\\"./UUPSProxy.sol\\\";\\nimport {OwnableStorage} from \\\"../ownership/OwnableStorage.sol\\\";\\n\\ncontract UUPSProxyWithOwner is UUPSProxy {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address firstImplementation, address initialOwner) UUPSProxy(firstImplementation) {\\n        OwnableStorage.load().owner = initialOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@synthetixio/core-contracts/contracts/utils/AddressUtil.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nlibrary AddressUtil {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {UUPSProxyWithOwner} from \\\"@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol\\\";\\n\\ncontract Proxy is UUPSProxyWithOwner {\\n    constructor(\\n        address firstImplementation,\\n        address initialOwner\\n    ) UUPSProxyWithOwner(firstImplementation, initialOwner) {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007bf5de9dfc62e9958f5e45bba4b09d4aa59baed4000000000000000000000000dead1426ed8b637ae26fe55f4fb71e65f90374a1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}