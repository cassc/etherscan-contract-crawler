{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract MagicPot {\r\n\r\n    struct NFTInfo {\r\n        uint256 id;\r\n        address sender;\r\n        address projectContractAddress;\r\n        uint256 tokenId;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    address public admin;\r\n    address public to;\r\n    uint256 public currentId;\r\n    NFTInfo[] public nftTransfers;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        to = msg.sender;\r\n        currentId = 1;\r\n    }\r\n\r\n    function generateUniqueId() public returns (uint256) {\r\n        currentId += 1;\r\n        return currentId;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setToAddress(address _to) external onlyAdmin {\r\n        require(_to != address(0), \"Invalid 'to' address\");\r\n        to = _to;\r\n    }\r\n\r\n    function transferMultipleNFTs(address[] calldata projectContractAddresses, uint256[] calldata tokenIds) external {\r\n        require(projectContractAddresses.length == tokenIds.length, \"Length mismatch between tokenIds and projectContractAddresses\");\r\n        uint256 numTokens = tokenIds.length;\r\n\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            IERC721 nftContract = IERC721(projectContractAddresses[i]);\r\n            address nftOwner = nftContract.ownerOf(tokenIds[i]);\r\n            require(nftOwner == msg.sender, \"You don't own all the NFTs\");\r\n            nftTransfers.push(NFTInfo({id : generateUniqueId(), sender : msg.sender, projectContractAddress : projectContractAddresses[i], tokenId : tokenIds[i], timestamp : block.timestamp}));\r\n        }\r\n\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            IERC721(projectContractAddresses[i]).transferFrom(msg.sender, to, tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function getAllNFTTransferInfo() external view returns (NFTInfo[] memory) {\r\n        return nftTransfers;\r\n    }\r\n\r\n    function getNFTTransferInfoBatch(uint256 startIdx, uint256 count) external view returns (NFTInfo[] memory) {\r\n        require(startIdx < nftTransfers.length, \"Start index exceeds the number of NFT transfers\");\r\n        uint256 endIndex = startIdx + count;\r\n        if (endIndex > nftTransfers.length) {\r\n            endIndex = nftTransfers.length;\r\n        }\r\n        NFTInfo[] memory result = new NFTInfo[](endIndex - startIdx);\r\n        for (uint256 i = startIdx; i < endIndex; i++) {\r\n            result[i - startIdx] = nftTransfers[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getLatestNFTTransferInfo(uint256 count) external view returns (NFTInfo[] memory) {\r\n        require(count > 0, \"Count should be greater than 0\");\r\n        uint256 length = nftTransfers.length;\r\n        if (count > length) {\r\n            count = length;\r\n        }\r\n        NFTInfo[] memory result = new NFTInfo[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            result[i] = nftTransfers[length - count + i];\r\n        }\r\n        return result;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateUniqueId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNFTTransferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MagicPot.NFTInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLatestNFTTransferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MagicPot.NFTInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getNFTTransferInfoBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MagicPot.NFTInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"to\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"projectContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferMultipleNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MagicPot", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc0494e8d37d0f516e6f0f5ae801b22ee312ccdbf852fc3888a586ef40352055"}