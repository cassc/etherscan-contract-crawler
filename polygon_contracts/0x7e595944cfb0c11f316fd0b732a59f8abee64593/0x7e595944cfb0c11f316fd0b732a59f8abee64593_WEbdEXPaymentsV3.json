{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v3/WEbdEXPaymentsV3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IWEbdEXStrategiesV3 {\\r\\n    function erc20Transf(\\r\\n        address coin,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function lpMint(\\r\\n        address to,\\r\\n        address coin,\\r\\n        uint256 amount\\r\\n    ) external returns (address);\\r\\n\\r\\n    function lpBurnFrom(address to, address coin, uint256 amount) external;\\r\\n\\r\\n    function updateCoinBalanceAndGasBalance(\\r\\n        address to,\\r\\n        address strategyToken,\\r\\n        address coin,\\r\\n        int256 amount,\\r\\n        int256 gas\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IWEbdEXNetworkPoolV3 {\\r\\n    function addBalance(\\r\\n        address to,\\r\\n        address coin,\\r\\n        uint256 amount,\\r\\n        address lpToken,\\r\\n        address user,\\r\\n        string memory method\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract WEbdEXPaymentsV3 is Ownable {\\r\\n    struct NetworkData {\\r\\n        address wallet;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct PayFeesAmount {\\r\\n        NetworkData[] network;\\r\\n        uint256 seller;\\r\\n        uint256 bot;\\r\\n        uint256 manager;\\r\\n        address token;\\r\\n        address user;\\r\\n    }\\r\\n\\r\\n    struct PayFees {\\r\\n        PayFeesAmount[] list;\\r\\n        address seller;\\r\\n        address bot;\\r\\n        address manager;\\r\\n        IWEbdEXStrategiesV3 webDexStrategiesV3;\\r\\n        IWEbdEXNetworkPoolV3 webDexNetworkPoolV3;\\r\\n    }\\r\\n\\r\\n    event PayFee(address indexed wallet, address indexed coin, uint256 amount);\\r\\n\\r\\n    event OpenPosition(\\r\\n        address indexed wallet,\\r\\n        address indexed coin,\\r\\n        address indexed strategyToken,\\r\\n        string output,\\r\\n        int256 profit,\\r\\n        int256 gas,\\r\\n        string[] coins,\\r\\n        uint256 timeStamp\\r\\n    );\\r\\n\\r\\n    function openPosition(\\r\\n        address strategyToken,\\r\\n        address to,\\r\\n        int256 amount,\\r\\n        string[] memory coins,\\r\\n        int256 gas,\\r\\n        address coin,\\r\\n        IWEbdEXStrategiesV3 webDexStrategiesV3\\r\\n    ) public onlyOwner {\\r\\n        bool isMint = amount > 0;\\r\\n\\r\\n        if (isMint) {\\r\\n            webDexStrategiesV3.lpMint(to, coin, uint256(amount));\\r\\n        } else {\\r\\n            webDexStrategiesV3.lpBurnFrom(to, coin, uint256(-1 * amount));\\r\\n        }\\r\\n\\r\\n        webDexStrategiesV3.updateCoinBalanceAndGasBalance(\\r\\n            to,\\r\\n            strategyToken,\\r\\n            coin,\\r\\n            amount,\\r\\n            gas\\r\\n        );\\r\\n\\r\\n        emit OpenPosition(\\r\\n            to,\\r\\n            coin,\\r\\n            strategyToken,\\r\\n            isMint ? \\\"win\\\" : \\\"loss\\\",\\r\\n            amount,\\r\\n            gas,\\r\\n            coins,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function payFees(PayFees memory payments) public onlyOwner {\\r\\n        for (uint256 i = 0; i < payments.list.length; i++) {\\r\\n            for (uint256 n = 0; n < payments.list[i].network.length; n++) {\\r\\n                _payFee(\\r\\n                    payments.list[i].token,\\r\\n                    payments.list[i].network[n].amount,\\r\\n                    payments.list[i].network[n].wallet,\\r\\n                    payments.list[i].user,\\r\\n                    payments.webDexStrategiesV3,\\r\\n                    payments.webDexNetworkPoolV3\\r\\n                );\\r\\n            }\\r\\n            _payFee(\\r\\n                payments.list[i].token,\\r\\n                payments.list[i].seller,\\r\\n                payments.seller,\\r\\n                payments.list[i].user,\\r\\n                payments.webDexStrategiesV3,\\r\\n                payments.webDexNetworkPoolV3\\r\\n            );\\r\\n            _payFee(\\r\\n                payments.list[i].token,\\r\\n                payments.list[i].bot,\\r\\n                payments.bot,\\r\\n                payments.list[i].user,\\r\\n                payments.webDexStrategiesV3,\\r\\n                payments.webDexNetworkPoolV3\\r\\n            );\\r\\n            _payFee(\\r\\n                payments.list[i].token,\\r\\n                payments.list[i].manager,\\r\\n                payments.manager,\\r\\n                payments.list[i].user,\\r\\n                payments.webDexStrategiesV3,\\r\\n                payments.webDexNetworkPoolV3\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _payFee(\\r\\n        address coin,\\r\\n        uint256 amount,\\r\\n        address to,\\r\\n        address user,\\r\\n        IWEbdEXStrategiesV3 webDexStrategiesV3,\\r\\n        IWEbdEXNetworkPoolV3 webDexNetworkPoolV3\\r\\n    ) internal {\\r\\n        if (to != address(0) && amount > 0) {\\r\\n            webDexStrategiesV3.erc20Transf(\\r\\n                coin,\\r\\n                address(webDexNetworkPoolV3),\\r\\n                amount\\r\\n            );\\r\\n            address lpToken = webDexStrategiesV3.lpMint(to, coin, amount);\\r\\n            webDexNetworkPoolV3.addBalance(\\r\\n                to,\\r\\n                coin,\\r\\n                amount,\\r\\n                lpToken,\\r\\n                user,\\r\\n                \\\"Pay comission operation\\\"\\r\\n            );\\r\\n\\r\\n            emit PayFee(to, coin, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"gas\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"coins\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"string[]\",\"name\":\"coins\",\"type\":\"string[]\"},{\"internalType\":\"int256\",\"name\":\"gas\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"contract IWEbdEXStrategiesV3\",\"name\":\"webDexStrategiesV3\",\"type\":\"address\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WEbdEXPaymentsV3.NetworkData[]\",\"name\":\"network\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"seller\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"manager\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct WEbdEXPaymentsV3.PayFeesAmount[]\",\"name\":\"list\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract IWEbdEXStrategiesV3\",\"name\":\"webDexStrategiesV3\",\"type\":\"address\"},{\"internalType\":\"contract IWEbdEXNetworkPoolV3\",\"name\":\"webDexNetworkPoolV3\",\"type\":\"address\"}],\"internalType\":\"struct WEbdEXPaymentsV3.PayFees\",\"name\":\"payments\",\"type\":\"tuple\"}],\"name\":\"payFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WEbdEXPaymentsV3", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}