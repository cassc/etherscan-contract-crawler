{"SourceCode": "pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Withdraw {\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC721Withdraw {\r\n    /**\r\n    * @dev Approve or remove `operator` as an operator for the caller.\r\n    * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The `operator` cannot be the caller.\r\n    *\r\n    * Emits an {ApprovalForAll} event.\r\n    */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n}\r\n\r\n\r\ncontract CutieAccessControl {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // @dev Address with full contract privileges\r\n    address ownerAddress;\r\n\r\n    // @dev Next owner address\r\n    address pendingOwnerAddress;\r\n\r\n    // @dev Addresses with configuration privileges\r\n    mapping (address => bool) operatorAddress;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwnerAddress, \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operatorAddress[msg.sender] || msg.sender == ownerAddress, \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    constructor () internal {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return ownerAddress;\r\n    }\r\n\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        pendingOwnerAddress = _newOwner;\r\n    }\r\n\r\n    function getPendingOwner() external view returns (address) {\r\n        return pendingOwnerAddress;\r\n    }\r\n\r\n    function claimOwnership() external onlyPendingOwner {\r\n        emit OwnershipTransferred(ownerAddress, pendingOwnerAddress);\r\n        ownerAddress = pendingOwnerAddress;\r\n        pendingOwnerAddress = address(0);\r\n    }\r\n\r\n    function isOperator(address _addr) public view returns (bool) {\r\n        return operatorAddress[_addr];\r\n    }\r\n\r\n    function setOperator(address _newOperator) public onlyOwner {\r\n        require(_newOperator != address(0));\r\n        operatorAddress[_newOperator] = true;\r\n    }\r\n\r\n    function removeOperator(address _operator) public onlyOwner {\r\n        delete(operatorAddress[_operator]);\r\n    }\r\n\r\n    // @dev The balance transfer from CutieCore contract to project owners\r\n    function withdraw(address _receiver) external onlyOwner {\r\n        if (address(this).balance > 0) {\r\n            _receiver.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    // @dev Allow to withdraw ERC20 tokens from contract itself\r\n    function withdrawERC20(IERC20Withdraw _tokenContract) external onlyOwner {\r\n        uint256 balance = _tokenContract.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            _tokenContract.transfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n    // @dev Allow to withdraw ERC721 tokens from contract itself\r\n    function approveERC721(IERC721Withdraw _tokenContract) external onlyOwner {\r\n        _tokenContract.setApprovalForAll(msg.sender, true);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract CutiePausable is CutieAccessControl {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract CutieERC721Metadata is CutiePausable /* is IERC721Metadata */ {\r\n    string public metadataUrlPrefix = \"https://blockchaincuties.com/cutie/\";\r\n    string public metadataUrlSuffix = \".svg\";\r\n\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external pure returns (string) {\r\n        return \"BlockchainCuties\";\r\n    }\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external pure returns (string) {\r\n        return \"CUTIE\";\r\n    }\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenId) external view returns (string infoUrl) {\r\n        return\r\n        concat(toSlice(metadataUrlPrefix),\r\n            toSlice(concat(toSlice(uintToString(_tokenId)), toSlice(metadataUrlSuffix))));\r\n    }\r\n\r\n    function setMetadataUrl(string _metadataUrlPrefix, string _metadataUrlSuffix) public onlyOwner {\r\n        metadataUrlPrefix = _metadataUrlPrefix;\r\n        metadataUrlSuffix = _metadataUrlSuffix;\r\n    }\r\n\r\n    /*\r\n     * @title String & slice utility library for Solidity contracts.\r\n     * @author Nick Johnson <arachnid@notdot.net>\r\n     *\r\n     * @dev Functionality in this library is largely implemented using an\r\n     *      abstraction called a 'slice'. A slice represents a part of a string -\r\n     *      anything from the entire string to a single character, or even no\r\n     *      characters at all (a 0-length slice). Since a slice only has to specify\r\n     *      an offset and a length, copying and manipulating slices is a lot less\r\n     *      expensive than copying and manipulating the strings they reference.\r\n     *\r\n     *      To further reduce gas costs, most functions on slice that need to return\r\n     *      a slice modify the original one instead of allocating a new one; for\r\n     *      instance, `s.split(\".\")` will return the text up to the first '.',\r\n     *      modifying s to only contain the remainder of the string after the '.'.\r\n     *      In situations where you do not want to modify the original slice, you\r\n     *      can make a copy first with `.copy()`, for example:\r\n     *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\r\n     *      Solidity has no memory management, it will result in allocating many\r\n     *      short-lived slices that are later discarded.\r\n     *\r\n     *      Functions that return two slices come in two versions: a non-allocating\r\n     *      version that takes the second slice as an argument, modifying it in\r\n     *      place, and an allocating version that allocates and returns the second\r\n     *      slice; see `nextRune` for example.\r\n     *\r\n     *      Functions that have to copy string data will return strings rather than\r\n     *      slices; these can be cast back to slices for further processing if\r\n     *      required.\r\n     *\r\n     *      For convenience, some functions are provided with non-modifying\r\n     *      variants that create a new slice and return both; for instance,\r\n     *      `s.splitNew('.')` leaves s unmodified, and returns two values\r\n     *      corresponding to the left and right parts of the string.\r\n     */\r\n\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal pure returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private pure {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal pure returns (string) {\r\n        string memory ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n\r\n    function uintToString(uint256 a) internal pure returns (string result) {\r\n        string memory r = \"\";\r\n        do {\r\n            uint b = a % 10;\r\n            a /= 10;\r\n\r\n            string memory c = \"\";\r\n\r\n            if (b == 0) c = \"0\";\r\n            else if (b == 1) c = \"1\";\r\n            else if (b == 2) c = \"2\";\r\n            else if (b == 3) c = \"3\";\r\n            else if (b == 4) c = \"4\";\r\n            else if (b == 5) c = \"5\";\r\n            else if (b == 6) c = \"6\";\r\n            else if (b == 7) c = \"7\";\r\n            else if (b == 8) c = \"8\";\r\n            else if (b == 9) c = \"9\";\r\n\r\n            r = concat(toSlice(c), toSlice(r));\r\n        } while (a > 0);\r\n        result = r;\r\n    }\r\n}\r\n\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0xf0b9e5ba\r\ninterface ERC721TokenReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    ///  than the magic value MUST result in the transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _from The sending address \r\n    /// @param _tokenId The NFT identifier which is being transfered\r\n    /// @param data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function setOwner(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n\r\ninterface TokenRecipientInterface {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\n\r\ncontract BlockchainCutiesToken is CutieERC721Metadata {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    // @dev This struct represents a blockchain Cutie. It was ensured that struct fits well into\r\n    // exactly two 256-bit words. The order of the members in this structure\r\n    // matters because of the Ethereum byte-packing rules.\r\n    // Reference: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Cutie {\r\n        // The Cutie's genetic code is in these 256-bits. Cutie's genes never change.\r\n        uint256 genes;\r\n\r\n        // The timestamp from the block when this cutie was created.\r\n        uint40 birthTime;\r\n\r\n        // The minimum timestamp after which the cutie can start breeding\r\n        // again.\r\n        uint40 cooldownEndTime;\r\n\r\n        // The cutie's parents ID is set to 0 for gen0 cuties.\r\n        uint40 momId;\r\n        uint40 dadId;\r\n\r\n        // Set the index in the cooldown array (see below) that means\r\n        // the current cooldown duration for this Cutie. Starts at 0\r\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\r\n        // Incremented by one for each successful breeding, regardless\r\n        // of being cutie mom or cutie dad.\r\n        uint16 cooldownIndex;\r\n\r\n        // The \"generation number\" of the cutie. Cuties minted by the contract\r\n        // for sale are called \"gen0\" with generation number of 0. All other cuties'\r\n        // generation number is the larger of their parents' two generation\r\n        // numbers, plus one (i.e. max(mom.generation, dad.generation) + 1)\r\n        uint16 generation;\r\n\r\n        // Some optional data used by external contracts\r\n        // Cutie struct is 2x256 bits long.\r\n        uint64 optional;\r\n    }\r\n\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('tokenURI(uint256)'));\r\n\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Enumerable =\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('tokenByIndex(uint256)')) ^\r\n        bytes4(keccak256('tokenOfOwnerByIndex(address, uint256)'));\r\n\r\n    // @dev An mapping containing the Cutie struct for all Cuties in existence.\r\n    // The ID of each cutie is actually an index into this mapping.\r\n    //  ID 0 is the parent of all generation 0 cats, and both parents to itself. It is an invalid genetic code.\r\n    mapping (uint40 => Cutie) public cuties;\r\n\r\n    // @dev Total cuties count\r\n    uint256 total;\r\n\r\n    // @dev Core game contract address\r\n    address public gameAddress;\r\n\r\n    // @dev A mapping from cutie IDs to the address that owns them. All cuties have\r\n    // some valid owner address, even gen0 cuties are created with a non-zero owner.\r\n    mapping (uint40 => address) public cutieIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    // Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    // @dev A mapping from CutieIDs to an address that has been approved to call\r\n    // transferFrom(). A Cutie can have one approved address for transfer\r\n    // at any time. A zero value means that there is no outstanding approval.\r\n    mapping (uint40 => address) public cutieIndexToApproved;\r\n\r\n    // @dev A mapping from Cuties owner (account) to an address that has been approved to call\r\n    // transferFrom() for all cuties, owned by owner.\r\n    // Only one approved address is permitted for each account for transfer\r\n    // at any time. A zero value means there is no outstanding approval.\r\n    mapping (address => mapping (address => bool)) public addressToApprovedAll;\r\n\r\n    // Modifiers to check that inputs can be safely stored with a certain number of bits\r\n    modifier canBeStoredIn40Bits(uint256 _value) {\r\n        require(_value <= 0xFFFFFFFFFF, \"Value can't be stored in 40 bits\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGame {\r\n        require(msg.sender == gameAddress || msg.sender == ownerAddress, \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        // Starts paused.\r\n        paused = true;\r\n    }\r\n\r\n    // @dev Accept all Ether\r\n    function() external payable {}\r\n\r\n    function setup(uint256 _total) external onlyGame whenPaused {\r\n        require(total == 0, \"Contract already initialized\");\r\n        total = _total;\r\n        paused = false;\r\n    }\r\n\r\n    function setGame(address _gameAddress) external onlyOwner {\r\n        gameAddress = _gameAddress;\r\n    }\r\n\r\n    // @notice Query if a contract implements an interface\r\n    // @param interfaceID The interface identifier, as specified in ERC-165\r\n    // @dev Interface identification is specified in ERC-165. This function\r\n    //  uses less than 30,000 gas.\r\n    // @return `true` if the contract implements `interfaceID` and\r\n    //  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n        return\r\n        interfaceID == 0x6466353c ||\r\n        interfaceID == 0x80ac58cd || // ERC721\r\n        interfaceID == INTERFACE_SIGNATURE_ERC721Metadata ||\r\n        interfaceID == INTERFACE_SIGNATURE_ERC721Enumerable ||\r\n        interfaceID == bytes4(keccak256('supportsInterface(bytes4)'));\r\n    }\r\n\r\n    // @notice Returns the total number of Cuties in existence.\r\n    // @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256) {\r\n        return total;\r\n    }\r\n\r\n    // @notice Returns the number of Cuties owned by a specific address.\r\n    // @param _owner The owner address to check.\r\n    // @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != 0x0, \"Owner can't be zero address\");\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    // @notice Returns the address currently assigned ownership of a given Cutie.\r\n    // @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _cutieId) external view canBeStoredIn40Bits(_cutieId) returns (address owner) {\r\n        owner = cutieIndexToOwner[uint40(_cutieId)];\r\n        require(owner != address(0), \"Owner query for nonexistent token\");\r\n    }\r\n\r\n    // @notice Returns the address currently assigned ownership of a given Cutie.\r\n    // @dev do not revert when cutie has no owner\r\n    function ownerOfCutie(uint256 _cutieId) external view canBeStoredIn40Bits(_cutieId) returns (address) {\r\n        return cutieIndexToOwner[uint40(_cutieId)];\r\n    }\r\n\r\n    // @notice Enumerate valid NFTs\r\n    // @dev Throws if `_index` >= `totalSupply()`.\r\n    // @param _index A counter less than `totalSupply()`\r\n    // @return The token identifier for the `_index`th NFT,\r\n    //  (sort order not specified)\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        require(_index < total);\r\n        return _index - 1;\r\n    }\r\n\r\n    // @notice Returns the nth Cutie assigned to an address, with n specified by the\r\n    //  _index argument.\r\n    // @param _owner The owner of the Cuties we are interested in.\r\n    // @param _index The zero-based index of the cutie within the owner's list of cuties.\r\n    //  Must be less than balanceOf(_owner).\r\n    // @dev This method must not be called by smart contract code. It will almost\r\n    //  certainly blow past the block gas limit once there are a large number of\r\n    //  Cuties in existence. Exists only to allow off-chain queries of ownership.\r\n    //  Optional method for ERC-721.\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 cutieId) {\r\n        require(_owner != 0x0, \"Owner can't be 0x0\");\r\n        uint40 count = 0;\r\n        for (uint40 i = 1; i <= totalSupply(); ++i) {\r\n            if (_isOwner(_owner, i)) {\r\n                if (count == _index) {\r\n                    return i;\r\n                } else {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n    // @notice Transfers the ownership of an NFT from one address to another address.\r\n    // @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    //  operator, or the approved address for this NFT. Throws if `_from` is\r\n    //  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    //  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    //  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    //  `onERC721Received` on `_to` and throws if the return value is not\r\n    //  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n    // @param _from The current owner of the NFT\r\n    // @param _to The new owner\r\n    // @param _tokenId The NFT to transfer\r\n    // @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) public whenNotPaused canBeStoredIn40Bits(_tokenId) {\r\n        transferFrom(_from, _to, uint40(_tokenId));\r\n\r\n        if (_isContract(_to)) {\r\n            ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n        }\r\n    }\r\n\r\n    // @notice Transfers the ownership of an NFT from one address to another address\r\n    // @dev This works identically to the other function with an extra data parameter,\r\n    // except this function just sets data to \"\"\r\n    // @param _from The current owner of the NFT\r\n    // @param _to The new owner\r\n    // @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused {\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    // @notice Transfer a Cutie owned by another address, for which the calling address\r\n    //  has been granted transfer approval by the owner.\r\n    // @param _from The address that owns the Cutie to be transferred.\r\n    // @param _to Any address, including the caller address, can take ownership of the Cutie.\r\n    // @param _tokenId The ID of the Cutie to be transferred.\r\n    // @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused canBeStoredIn40Bits(_tokenId) {\r\n        require(_to != address(0), \"Wrong cutie destination\");\r\n        require(_to != address(this), \"Wrong cutie destination\");\r\n\r\n        // Check for approval and valid ownership\r\n        require(_isApprovedOrOwner(msg.sender, uint40(_tokenId)), \"Caller is not owner nor approved\");\r\n        require(_isOwner(_from, uint40(_tokenId)), \"Wrong cutie owner\");\r\n\r\n        // Reassign ownership, clearing pending approvals and emitting Transfer event.\r\n        _transfer(_from, _to, uint40(_tokenId));\r\n    }\r\n\r\n    // @notice Transfers a Cutie to another address. When transferring to a smart\r\n    // contract, ensure that it is aware of ERC-721 (or BlockchainCuties specifically),\r\n    // otherwise the Cutie may be lost forever.\r\n    // @param _to The address of the recipient, can be a user or contract.\r\n    // @param _cutieId The ID of the Cutie to transfer.\r\n    // @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _cutieId) public whenNotPaused canBeStoredIn40Bits(_cutieId) {\r\n        require(_to != address(0), \"Wrong cutie destination\");\r\n\r\n        // You can only send your own cutie.\r\n        require(_isOwner(msg.sender, uint40(_cutieId)), \"Caller is not a cutie owner\");\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, uint40(_cutieId));\r\n    }\r\n\r\n    function transferBulk(address[] to, uint[] tokens) public whenNotPaused {\r\n        require(to.length == tokens.length);\r\n        for (uint i = 0; i < to.length; i++) {\r\n            transfer(to[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n    function transferMany(address to, uint[] tokens) public whenNotPaused {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            transfer(to, tokens[i]);\r\n        }\r\n    }\r\n\r\n    // @notice Grant another address the right to transfer a particular Cutie via transferFrom().\r\n    // This flow is preferred for transferring NFTs to contracts.\r\n    // @param _to The address to be granted transfer approval. Pass address(0) to clear all approvals.\r\n    // @param _cutieId The ID of the Cutie that can be transferred if this call succeeds.\r\n    // @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint256 _cutieId) public whenNotPaused canBeStoredIn40Bits(_cutieId) {\r\n        // Only cutie's owner can grant transfer approval.\r\n        require(_isOwner(msg.sender, uint40(_cutieId)), \"Caller is not a cutie owner\");\r\n        require(msg.sender != _to, \"Approval to current owner\");\r\n\r\n        // Registering approval replaces any previous approval.\r\n        _approve(uint40(_cutieId), _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _cutieId);\r\n    }\r\n\r\n    function delegatedApprove(address _from, address _to, uint40 _cutieId) external whenNotPaused onlyGame {\r\n        require(_isOwner(_from, _cutieId), \"Wrong cutie owner\");\r\n        _approve(_cutieId, _to);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint _tokenId, bytes data) external whenNotPaused returns (bool) {\r\n        approve(_spender, _tokenId);\r\n        TokenRecipientInterface(_spender).receiveApproval(msg.sender, _tokenId, this, data);\r\n        return true;\r\n    }\r\n\r\n    // @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    //  all your asset.\r\n    // @dev Emits the ApprovalForAll event\r\n    // @param _operator Address to add to the set of authorized operators.\r\n    // @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != msg.sender, \"Approve to caller\");\r\n\r\n        if (_approved) {\r\n            addressToApprovedAll[msg.sender][_operator] = true;\r\n        } else {\r\n            delete addressToApprovedAll[msg.sender][_operator];\r\n        }\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    // @notice Get the approved address for a single NFT\r\n    // @dev Throws if `_tokenId` is not a valid NFT\r\n    // @param _tokenId The NFT to find the approved address for\r\n    // @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view canBeStoredIn40Bits(_tokenId) returns (address) {\r\n        require(_tokenId <= total, \"Cutie not exists\");\r\n        return cutieIndexToApproved[uint40(_tokenId)];\r\n    }\r\n\r\n    // @notice Query if an address is an authorized operator for another address\r\n    // @param _owner The address that owns the NFTs\r\n    // @param _operator The address that acts on behalf of the owner\r\n    // @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return addressToApprovedAll[_owner][_operator];\r\n    }\r\n\r\n    // @dev Returns whether `spender` is allowed to manage `cutieId`.\r\n    function _isApprovedOrOwner(address spender, uint40 cutieId) internal view returns (bool) {\r\n        require(_exists(cutieId), \"Cutie not exists\");\r\n        address owner = cutieIndexToOwner[cutieId];\r\n        return (spender == owner || _approvedFor(spender, cutieId) || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    // @dev Checks if a given address is the current owner of a certain Cutie.\r\n    // @param _claimant the address we are validating against.\r\n    // @param _cutieId cutie id, only valid when > 0\r\n    function _isOwner(address _claimant, uint40 _cutieId) internal view returns (bool) {\r\n        return cutieIndexToOwner[_cutieId] == _claimant;\r\n    }\r\n\r\n    function _exists(uint40 _cutieId) internal view returns (bool) {\r\n        return cutieIndexToOwner[_cutieId] != address(0);\r\n    }\r\n\r\n    // @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    //  approval. Setting _approved to address(0) clears all transfer approval.\r\n    //  NOTE: _approve() does NOT send the Approval event. This is done on purpose:\r\n    //  _approve() and transferFrom() are used together for putting Cuties on auction.\r\n    //  There is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint40 _cutieId, address _approved) internal {\r\n        cutieIndexToApproved[_cutieId] = _approved;\r\n    }\r\n\r\n    // @dev Checks if a given address currently has transferApproval for a certain Cutie.\r\n    // @param _claimant the address we are confirming the cutie is approved for.\r\n    // @param _cutieId cutie id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint40 _cutieId) internal view returns (bool) {\r\n        return cutieIndexToApproved[_cutieId] == _claimant;\r\n    }\r\n\r\n    // @dev Assigns ownership of a particular Cutie to an address.\r\n    function _transfer(address _from, address _to, uint40 _cutieId) internal {\r\n\r\n        // since the number of cuties is capped to 2^40\r\n        // there is no way to overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        cutieIndexToOwner[_cutieId] = _to;\r\n        // When creating new cuties _from is 0x0, but we cannot account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete cutieIndexToApproved[_cutieId];\r\n        }\r\n        // Emit the transfer event.\r\n        emit Transfer(_from, _to, _cutieId);\r\n    }\r\n\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n    function _isContract(address _account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(_account) }\r\n        return size > 0;\r\n    }\r\n\r\n    // @dev For transferring a cutie owned by this contract to the specified address.\r\n    //  Used to rescue lost cuties. (There is no \"proper\" flow where this contract\r\n    //  should be the owner of any Cutie. This function exists for us to reassign\r\n    //  the ownership of Cuties that users may have accidentally sent to our address.)\r\n    // @param _cutieId - ID of cutie\r\n    // @param _recipient - Address to send the cutie to\r\n    function restoreCutieToAddress(uint40 _cutieId, address _recipient) external whenNotPaused onlyOperator {\r\n        require(_isOwner(this, _cutieId));\r\n        _transfer(this, _recipient, _cutieId);\r\n    }\r\n\r\n    // @dev An method that creates a new cutie and stores it. This\r\n    //  method does not check anything and should only be called when the\r\n    //  input data is valid for sure. Will generate both a Birth event\r\n    //  and a Transfer event.\r\n    // @param _momId The cutie ID of the mom of this cutie (zero for gen0)\r\n    // @param _dadId The cutie ID of the dad of this cutie (zero for gen0)\r\n    // @param _generation The generation number of this cutie, must be computed by caller.\r\n    // @param _genes The cutie's genetic code.\r\n    // @param _owner The initial owner of this cutie, must be non-zero (except for the unCutie, ID 0)\r\n    function createCutie(\r\n        address _owner,\r\n        uint40 _momId,\r\n        uint40 _dadId,\r\n        uint16 _generation,\r\n        uint16 _cooldownIndex,\r\n        uint256 _genes,\r\n        uint40 _birthTime\r\n    ) external whenNotPaused onlyGame returns (uint40) {\r\n        Cutie memory _cutie = Cutie({\r\n            genes : _genes,\r\n            birthTime : _birthTime,\r\n            cooldownEndTime : 0,\r\n            momId : _momId,\r\n            dadId : _dadId,\r\n            cooldownIndex : _cooldownIndex,\r\n            generation : _generation,\r\n            optional : 0\r\n        });\r\n\r\n        total++;\r\n        uint256 newCutieId256 = total;\r\n\r\n        // Check if id can fit into 40 bits\r\n        require(newCutieId256 <= 0xFFFFFFFFFF);\r\n\r\n        uint40 newCutieId = uint40(newCutieId256);\r\n        cuties[newCutieId] = _cutie;\r\n\r\n        // This will assign ownership, as well as emit the Transfer event as per ERC721 draft\r\n        _transfer(0, _owner, newCutieId);\r\n\r\n        return newCutieId;\r\n    }\r\n\r\n    // @dev Recreate the cutie if it stuck on old contracts and cannot be migrated smoothly\r\n    function restoreCutie(\r\n        address owner,\r\n        uint40 id,\r\n        uint256 _genes,\r\n        uint40 _momId,\r\n        uint40 _dadId,\r\n        uint16 _generation,\r\n        uint40 _cooldownEndTime,\r\n        uint16 _cooldownIndex,\r\n        uint40 _birthTime\r\n    ) external whenNotPaused onlyGame {\r\n        require(owner != address(0), \"Restore to zero address\");\r\n        require(total >= id, \"Cutie restore is not allowed\");\r\n        require(cuties[id].birthTime == 0, \"Cutie overwrite is forbidden\");\r\n\r\n        Cutie memory cutie = Cutie({\r\n            genes: _genes,\r\n            momId: _momId,\r\n            dadId: _dadId,\r\n            generation: _generation,\r\n            cooldownEndTime: _cooldownEndTime,\r\n            cooldownIndex: _cooldownIndex,\r\n            birthTime: _birthTime,\r\n            optional: 0\r\n        });\r\n\r\n        cuties[id] = cutie;\r\n        cutieIndexToOwner[id] = owner;\r\n        ownershipTokenCount[owner]++;\r\n    }\r\n\r\n    // @notice Returns all the relevant information about a certain cutie.\r\n    // @param _id The ID of the cutie of interest.\r\n    function getCutie(uint40 _id) external view returns (\r\n        uint256 genes,\r\n        uint40 birthTime,\r\n        uint40 cooldownEndTime,\r\n        uint40 momId,\r\n        uint40 dadId,\r\n        uint16 cooldownIndex,\r\n        uint16 generation\r\n    ) {\r\n        require(_exists(_id), \"Cutie not exists\");\r\n\r\n        Cutie storage cutie = cuties[_id];\r\n\r\n        genes = cutie.genes;\r\n        birthTime = cutie.birthTime;\r\n        cooldownEndTime = cutie.cooldownEndTime;\r\n        momId = cutie.momId;\r\n        dadId = cutie.dadId;\r\n        cooldownIndex = cutie.cooldownIndex;\r\n        generation = cutie.generation;\r\n    }\r\n\r\n    function getGenes(uint40 _id) external view returns (uint256) {\r\n        return cuties[_id].genes;\r\n    }\r\n\r\n    function setGenes(uint40 _id, uint256 _genes) external whenNotPaused onlyGame {\r\n        cuties[_id].genes = _genes;\r\n    }\r\n\r\n    function getCooldownEndTime(uint40 _id) external view returns (uint40) {\r\n        return cuties[_id].cooldownEndTime;\r\n    }\r\n\r\n    function setCooldownEndTime(uint40 _id, uint40 _cooldownEndTime) external whenNotPaused onlyGame {\r\n        cuties[_id].cooldownEndTime = _cooldownEndTime;\r\n    }\r\n\r\n    function getCooldownIndex(uint40 _id) external view returns (uint16) {\r\n        return cuties[_id].cooldownIndex;\r\n    }\r\n\r\n    function setCooldownIndex(uint40 _id, uint16 _cooldownIndex) external whenNotPaused onlyGame {\r\n        cuties[_id].cooldownIndex = _cooldownIndex;\r\n    }\r\n\r\n    function getGeneration(uint40 _id) external view returns (uint16) {\r\n        return cuties[_id].generation;\r\n    }\r\n\r\n    function setGeneration(uint40 _id, uint16 _generation) external whenNotPaused onlyGame {\r\n        cuties[_id].generation = _generation;\r\n    }\r\n\r\n    function getOptional(uint40 _id) external view returns (uint64) {\r\n        return cuties[_id].optional;\r\n    }\r\n\r\n    function setOptional(uint40 _id, uint64 _optional) external whenNotPaused onlyGame {\r\n        cuties[_id].optional = _optional;\r\n    }\r\n}\r\n", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"cuties\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint40\"},{\"name\":\"cooldownEndTime\",\"type\":\"uint40\"},{\"name\":\"momId\",\"type\":\"uint40\"},{\"name\":\"dadId\",\"type\":\"uint40\"},{\"name\":\"cooldownIndex\",\"type\":\"uint16\"},{\"name\":\"generation\",\"type\":\"uint16\"},{\"name\":\"optional\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"cutieIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getCooldownIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"cutieId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getOptional\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"approveERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_momId\",\"type\":\"uint40\"},{\"name\":\"_dadId\",\"type\":\"uint40\"},{\"name\":\"_generation\",\"type\":\"uint16\"},{\"name\":\"_cooldownIndex\",\"type\":\"uint16\"},{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_birthTime\",\"type\":\"uint40\"}],\"name\":\"createCutie\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"},{\"name\":\"_cooldownIndex\",\"type\":\"uint16\"}],\"name\":\"setCooldownIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadataUrlPrefix\",\"type\":\"string\"},{\"name\":\"_metadataUrlSuffix\",\"type\":\"string\"}],\"name\":\"setMetadataUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"},{\"name\":\"_generation\",\"type\":\"uint16\"}],\"name\":\"setGeneration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"transferBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getGenes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"restoreCutieToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"ownerOfCutie\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"},{\"name\":\"_cooldownEndTime\",\"type\":\"uint40\"}],\"name\":\"setCooldownEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToApprovedAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"cutieIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadataUrlPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadataUrlSuffix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"transferMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getCutie\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint40\"},{\"name\":\"cooldownEndTime\",\"type\":\"uint40\"},{\"name\":\"momId\",\"type\":\"uint40\"},{\"name\":\"dadId\",\"type\":\"uint40\"},{\"name\":\"cooldownIndex\",\"type\":\"uint16\"},{\"name\":\"generation\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint40\"},{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_momId\",\"type\":\"uint40\"},{\"name\":\"_dadId\",\"type\":\"uint40\"},{\"name\":\"_generation\",\"type\":\"uint16\"},{\"name\":\"_cooldownEndTime\",\"type\":\"uint40\"},{\"name\":\"_cooldownIndex\",\"type\":\"uint16\"},{\"name\":\"_birthTime\",\"type\":\"uint40\"}],\"name\":\"restoreCutie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"},{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"setGenes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getCooldownEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"delegatedApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"},{\"name\":\"_optional\",\"type\":\"uint64\"}],\"name\":\"setOptional\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "BlockchainCutiesToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}