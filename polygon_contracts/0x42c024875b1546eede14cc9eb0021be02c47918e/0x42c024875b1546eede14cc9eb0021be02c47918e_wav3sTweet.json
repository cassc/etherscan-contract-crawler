{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/modules/reference/wav3sErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    /**\\n     * @dev Emitted when checks fail.\\n\\n     */\\n    //V1\\n    event wav3sMirrorV1__process__ArrayLengthMismatch(string error);\\n    event wav3sMirrorV1__process__PostNotInitiated(uint256 index, string error);\\n    event wav3sMirrorV1__process__FollowerAlreadyMirrored(uint256 index, string error);\\n    event wav3sMirrorV1__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3sMirrorV1__process__NotEnoughBudgetForThatReward(uint256 index, string error);\\n    event wav3sMirrorV1__process__InvalidProfileAddress(uint256 index, string error);\\n    event wav3sMirrorV1__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3sMirrorV1__process__InvalidPubId(uint256 index, string error);\\n    event wav3sMirrorV1__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3sMirrorV1__process__InvalidpubOwnerAddress(uint256 index, string error);\\n\\n    //V2\\nevent wav3sMirrorV2__process__ArrayLengthMismatch(string error);\\n    event wav3sMirrorV2__process__PostNotInitiated(uint256 index, string error);\\n    event wav3sMirrorV2__process__FollowerAlreadyMirrored(uint256 index, string error);\\n    event wav3sMirrorV2__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3sMirrorV2__process__NotEnoughBudgetForThatReward(uint256 index, string error);\\n    event wav3sMirrorV2__process__InvalidProfileAddress(uint256 index, string error);\\n    event wav3sMirrorV2__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3sMirrorV2__process__InvalidPubId(uint256 index, string error);\\n    event wav3sMirrorV2__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3sMirrorV2__process__InvalidpubOwnerAddress(uint256 index, string error);\\n\\n    //V1 SPONSOR\\n      event wav3sSponsorMirrorV1__process__ArrayLengthMismatch(string error);\\n    event wav3sSponsorMirrorV1__process__PostNotInitiated(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__FollowerAlreadyMirrored(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__NotEnoughBudgetForThatReward(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__InvalidProfileAddress(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__InvalidPubId(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3sSponsorMirrorV1__process__InvalidpubOwnerAddress(uint256 index, string error);\\n\\n    // Wav3s Tweet Errores\\n    event wav3sTweet__process__ArrayLengthMismatch(string error);\\n    event wav3sTweet__process__PostNotInitiated(uint256 index, string error);\\n    event wav3sTweet__process__FollowerAlreadyMirrored(uint256 index, string error);\\n    event wav3sTweet__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3sTweet__process__NotEnoughBudgetForThatReward(uint256 index, string error);\\n    event wav3sTweet__process__InvalidProfileAddress(uint256 index, string error);\\n    event wav3sTweet__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3sTweet__process__InvalidPubId(uint256 index, string error);\\n    event wav3sTweet__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3sTweet__process__InvalidpubOwnerAddress(uint256 index, string error);\\n    //\\n}\\n\"\r\n    },\r\n    \"contracts/core/modules/reference/wav3sEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Events {\\n    /**\\n     * @dev Emitted when funds are withdrawn from a profile's post budget.\\n\\n     */\\n        event wav3sMirrorV2__PostFunded(\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        address consumerAppAddress,\\n        string socialGraph,\\n        string pubId\\n    );\\n\\n    event wav3sMirrorV2__MirrorProcessed(\\n        uint256 currentBudget,\\n        uint256 reward,\\n        address mirrorerAddress,\\n        address integratedApp,\\n        string socialGraph,\\n        string pubId\\n    );\\n    event wav3sMirrorV2__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        string socialGraph,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n    event wav3sMirrorV2__SocialGraphWhitelisted(string socialGraph);\\n  \\n    event wav3sMirrorV2__PubFinished(string socialGraph, string pubId);\\n\\n    event wav3sMirrorV2__TriggerSet(address trigger, address sender);\\n    event wav3sMirrorV2__MsigSet(address msig, address sender);\\n    event wav3sMirrorV2__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        string socialGraph,\\n        address sender\\n    );\\n    event wav3sMirrorV2__integratedAppWhitelisted(address integratedAppAddress);\\n     event wav3sMirrorV2__consumerAppWhitelisted(address consumerAppAddress);\\n    event wav3sMirrorV2__integratedAppUnlisted(address integratedAppAddress);\\n\\n    event wav3sMirrorV2__integratedAppPaid(\\n        address integratedAppAddress,\\n        uint256 integratedAppFees\\n    );\\n    event wav3sMirrorV2__CircuitBreak(bool stop);\\n\\n    event wav3sMirrorV2__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3sMirrorV2__EmergencyAppFeeWithdraw(\\n        address appAddress,\\n        uint256 appFees\\n    );\\n    event wav3sMirrorV2__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sMirrorV2__backdoor(uint256 balance);\\n\\n    // V1\\n        event wav3sMirrorV1__PostFunded(\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        address consumerAppAddress,\\n        string socialGraph,\\n        string pubId\\n    );\\n\\n    event wav3sMirrorV1__MirrorProcessed(\\n        uint256 currentBudget,\\n        uint256 reward,\\n        address mirrorerAddress,\\n        address integratedApp,\\n        string socialGraph,\\n        string pubId\\n    );\\n    event wav3sMirrorV1__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        string socialGraph,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n    event wav3sMirrorV1__SocialGraphWhitelisted(string socialGraph);\\n  \\n    event wav3sMirrorV1__PubFinished(string socialGraph, string pubId);\\n\\n    event wav3sMirrorV1__TriggerSet(address trigger, address sender);\\n    event wav3sMirrorV1__MsigSet(address msig, address sender);\\n    event wav3sMirrorV1__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        string socialGraph,\\n        address sender\\n    );\\n    event wav3sMirrorV1__integratedAppWhitelisted(address integratedAppAddress);\\n     event wav3sMirrorV1__consumerAppWhitelisted(address consumerAppAddress);\\n    event wav3sMirrorV1__integratedAppUnlisted(address integratedAppAddress);\\n\\n    event wav3sMirrorV1__integratedAppPaid(\\n        address integratedAppAddress,\\n        uint256 integratedAppFees\\n    );\\n    event wav3sMirrorV1__CircuitBreak(bool stop);\\n\\n    event wav3sMirrorV1__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3sMirrorV1__EmergencyAppFeeWithdraw(\\n        address appAddress,\\n        uint256 appFees\\n    );\\n    event wav3sMirrorV1__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sMirrorV1__backdoor(uint256 balance);\\n\\n        // Tweet\\n        event wav3sTweet__PostFunded(\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        address consumerAppAddress,\\n        uint256 pubIndex\\n    );\\n\\n    event wav3sTweet__MirrorProcessed(\\n        uint256 currentBudget,\\n        uint256 reward,\\n        address mirrorerAddress,\\n        string pubId\\n    );\\n    event wav3sTweet__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n  \\n    event wav3sTweet__PubFinished(string pubId);\\n\\n    event wav3sTweet__TriggerSet(address trigger, address sender);\\n    event wav3sTweet__MsigSet(address msig, address sender);\\n    event wav3sTweet__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        address sender\\n    );\\n    event wav3sTweet__integratedAppWhitelisted(address integratedAppAddress);\\n     event wav3sTweet__consumerAppWhitelisted(address consumerAppAddress);\\n    event wav3sTweet__integratedAppUnlisted(address integratedAppAddress);\\n\\n    event wav3sTweet__integratedAppPaid(\\n        address integratedAppAddress,\\n        uint256 integratedAppFees\\n    );\\n    event wav3sTweet__CircuitBreak(bool stop);\\n\\n    event wav3sTweet__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3sTweet__EmergencyAppFeeWithdraw(\\n        address appAddress,\\n        uint256 appFees\\n    );\\n    event wav3sTweet__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sTweet__backdoor(uint256 balance);\\n\\n    /// Sponsor MirrorV1\\n      event wav3sSponsorMirrorV1__PostFunded(\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        address consumerAppAddress,\\n        string socialGraph\\n    );\\n\\n    event wav3sSponsorMirrorV1__MirrorProcessed(\\n        uint256 currentBudget,\\n        uint256 reward,\\n        address mirrorerAddress,\\n        address integratedApp,\\n        string socialGraph,\\n        string pubId\\n    );\\n    event wav3sSponsorMirrorV1__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        string socialGraph,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n    event wav3sSponsorMirrorV1__SocialGraphWhitelisted(string socialGraph);\\n  \\n    event wav3sSponsorMirrorV1__PubFinished(string socialGraph, string pubId);\\n\\n    event wav3sSponsorMirrorV1__TriggerSet(address trigger, address sender);\\n    event wav3sSponsorMirrorV1__MsigSet(address msig, address sender);\\n    event wav3sSponsorMirrorV1__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        string socialGraph,\\n        address sender\\n    );\\n    event wav3sSponsorMirrorV1__integratedAppWhitelisted(address integratedAppAddress);\\n    event wav3sSponsorMirrorV1__consumerAppWhitelisted(address consumerAppAddress);\\n\\n    event wav3sSponsorMirrorV1__integratedAppUnlisted(address integratedAppAddress);\\n\\n    event wav3sSponsorMirrorV1__integratedAppPaid(\\n        address integratedAppAddress,\\n        uint256 integratedAppFees\\n    );\\n    event wav3sSponsorMirrorV1__CircuitBreak(bool stop);\\n\\n    event wav3sSponsorMirrorV1__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3sSponsorMirrorV1__EmergencyAppFeeWithdraw(\\n        address appAddress,\\n        uint256 appFees\\n    );\\n    event wav3sSponsorMirrorV1__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sSponsorMirrorV1__backdoor(uint256 balance);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/core/modules/reference/wav3sTweet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {Events} from \\\"./wav3sEvents.sol\\\";\\nimport {Errors} from \\\"./wav3sErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title wav3sTweet\\n * @author Daniel Beltr\u00e1n for wav3s\\n * @notice A contract to transfer rewards to profile's accounts that interacts with a Publication\\n * on Twitter that the user previously fund with a budget.\\n */\\n\\n/**\\n * @notice A struct containing the necessary data to execute funded mirror actions on a given profile and post.\\n *\\n * @param budget The total budget to pay mirrorers.\\n * @param reward The amount to be paid to each mirrorer.\\n * @param pubOwnerAddress The address associated with the profile owner of the Publication.\\n * @param consumerAppAddress The app where the wav3 was created\\n\\n */\\n\\n\\nstruct PostData {\\n    uint256 budget;\\n    uint256 reward;\\n    uint256 minFollowers;\\n    address pubOwnerAddress;\\n    address consumerAppAddress;\\n    uint256 withdrawalTime;\\n    string pubId;\\n    bool pubIdSet;\\n    bool initiatedWav3;\\n}\\n\\ncontract wav3sTweet {\\n    using Events for *;\\n\\n    event wav3sTweet__PostFunded(\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        address consumerAppAddress,\\n        uint256 pubId\\n    );\\n\\n    event wav3sTweet__MirrorProcessed(\\n        uint256 currentBudget,\\n        uint256 reward,\\n        address mirrorerAddress,\\n        string pubId\\n    );\\n    event wav3sTweet__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n  \\n    event wav3sTweet__PubFinished(string pubId);\\n\\n    event wav3sTweet__TriggerSet(address trigger, address sender);\\n    event wav3sTweet__MsigSet(address msig, address sender);\\n    event wav3sTweet__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        address sender\\n    );\\n    event wav3sTweet__consumerAppWhitelisted(address consumerAppAddress);\\n\\n    event wav3sTweet__CircuitBreak(bool stop);\\n\\n    event wav3sTweet__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n  \\n    event wav3sTweet__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sTweet__backdoor(uint256 balance);\\n\\n    // Errores\\n    event wav3sTweet__process__ArrayLengthMismatch(string error);\\n    event wav3sTweet__process__PostNotInitiated(uint256 index, string error);\\n    event wav3sTweet__process__FollowerAlreadyMirrored(uint256 index, string error);\\n    event wav3sTweet__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3sTweet__process__NotEnoughBudgetForThatReward(uint256 index, string error);\\n    event wav3sTweet__process__InvalidProfileAddress(uint256 index, string error);\\n    event wav3sTweet__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3sTweet__process__InvalidPubId(uint256 index, string error);\\n    event wav3sTweet__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3sTweet__process__InvalidpubOwnerAddress(uint256 index, string error);\\n    //\\n\\n    // Address of the deployer.\\n    address public owner;\\n    // The address of the wav3s multisig contract.\\n    address public s_multisig;\\n    // The addresses of whitelisted currencies.\\n    address private immutable i_wMatic;\\n    // Circuit breaker\\n    bool private stopped = false;\\nuint256 public nextId = 1;\\n\\n    // The address of the wav3sTrigger contract.\\n    address public s_wav3sTrigger;\\n    // The fee that will be charged in percentage.\\n    uint256 immutable i_wav3s_fee;\\n    // The minimum reward possible.\\n    uint256 immutable i_minReward;\\n    // SafeERC20 to transfer tokens.\\n    using SafeERC20 for IERC20;\\n    // Post variables\\n    // The budget for the post pointed to\\n    uint256 private budget;\\n    // The reward for the post pointed to\\n    uint256 private reward;\\n    // The currency address for the post pointed to\\n    address private currency;\\n     // The currency address for the post pointed to\\n    uint256 private minFollowers;\\n    // Mapping to store the data associated with a wav3s before knowing the pubid, indexed by social graph and Publication ID\\n    mapping(string => PostData) postDataByPublicationId;\\n    // Mapping to store the data associated with a wav3s after knowing the pubid, indexed by social graph and Publication ID\\n    mapping(uint256 => PostData) postDataByPublicationIndex;\\n    // Mapping to store whether a given follower has mirrored a given post or not\\n    mapping(string => mapping(address => bool)) s_PubIdToFollowerHasMirrored;\\n    // Mapping to track fees to apps\\n    mapping(address => uint256) s_appToFees;\\n    // Whitelisted apps to track fees\\n    mapping(address => bool) s_appWhitelisted;\\n    // Whitelisted social graph\\n    mapping(string => bool) s_socialGraphWhitelisted;\\n    // Whitelisted triggers\\n    mapping(address => bool) s_triggerWhitelisted;\\n    // Whitdrawal time\\n    mapping(string => uint256) s_PublicationToWithdrawalTime;\\n\\n\\n    constructor(uint256 wav3s_fee, address wMatic) {\\n        i_wav3s_fee = wav3s_fee;\\n        i_wMatic = wMatic;\\n        i_minReward = 1E17;\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only the owner can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier onlyWav3sTrigger() {\\n        require(\\n            s_triggerWhitelisted[msg.sender] == true,\\n            \\\"Errors.Only whitelisted triggers can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier stopInEmergency() {\\n        require(\\n            !stopped,\\n            \\\"Emergency stop is active, function execution is prevented.\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyInEmergency() {\\n        require(stopped, \\\"Not in Emergency, function execution is prevented.\\\");\\n        _;\\n    }\\n        // Counter to keep track of the next available ID\\n/**\\n     * @dev Funds a wav3sTweet post. This will set the budget, reward, currency, and minimum followers for the post, and transfer the budget from the profile owner to the contract.\\n     * @param budget The budget for the post.\\n     * @param reward The reward for each mirror of the post.\\n     * //pubId The ID of the post.\\n     * @param pubOwnerAddress The address of the profile that isfunding the post the post.\\n     * @param consumerAppAddress The address of the app where the wav3 is being funded.\\n     * @param consumerAppFee The percentage representing the fee the app will charge on top of wav3s and frontends.\\n     */\\n\\n   \\n    function fundTweet(\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        uint256 minFollowers,\\n        address consumerAppAddress,\\n        uint256 consumerAppFee\\n    ) external stopInEmergency returns(uint256) {\\n        // Check if the msg.sender is the profile owner\\n        require(\\n            msg.sender == pubOwnerAddress,\\n            \\\"Errors.wav3sTweet__fundTweet__SenderNotOwner()\\\"\\n        );\\n       // Check if the app is a whitelisted one\\n        if (!s_appWhitelisted[consumerAppAddress]) {\\n            revert(\\n                \\\"Errors.wav3sTweet__fundTweet__AppNotWhitelisted()\\\"\\n            );\\n        }\\n      \\n        // Check if consumerAppFee fits the parameters\\n        require(\\n            consumerAppFee < (100 - (i_wav3s_fee)),\\n            \\\"Errors.wav3sTweet__fundTweet__InvalidAppFee()\\\"\\n        );\\n        uint256 total_fees =i_wav3s_fee+ consumerAppFee;\\n        // Separate budget from fees.\\n        uint256 fees_amount = (budget / (100 + total_fees)) * (total_fees);\\n        // Set the budget.\\n\\n        postDataByPublicationIndex[nextId].budget += budget - fees_amount;\\n        // Check if the reward is less than the minimum reward\\n        require(\\n            reward >= i_minReward,\\n            \\\"Errors.wav3sTweet__fundTweet__RewardBelowMinimum()\\\"\\n        );\\n        // Check if the budget is enough for the reward\\n        require(\\n            reward <= postDataByPublicationIndex[nextId].budget,\\n            \\\"Errors.wav3sTweet__fundTweet__NotEnoughBudgetForThatReward()\\\"\\n        );\\n        /* Check if the post ID is valid\\n        require(\\n            bytes(pubIdHash).length != 0,\\n            \\\"Errors.wav3sTweet__fundTweet__InvalidPubId()\\\"\\n        );*/\\n\\n\\n        // Set the reward, currency, currency address, profile address and consumerApp address of this Publication.\\n        postDataByPublicationIndex[nextId].reward = reward;\\n        postDataByPublicationIndex[nextId].pubOwnerAddress = pubOwnerAddress;\\n        postDataByPublicationIndex[nextId].consumerAppAddress =consumerAppAddress;\\n        postDataByPublicationIndex[nextId].minFollowers = minFollowers;\\n        postDataByPublicationIndex[nextId].initiatedWav3 = true;\\n        postDataByPublicationIndex[nextId].pubIdSet = false;\\n        //dataBySocialGraphByPublicationHash[socialGraph][pubIdHash].pubId = pubIdHash;\\n\\n        // Set withdrawal time\\n        postDataByPublicationIndex[nextId].withdrawalTime = block.timestamp + 2 days;\\n\\n        // Transfer funds from the budget owner to wav3s contract\\n        IERC20(i_wMatic).safeTransferFrom(\\n            pubOwnerAddress,\\n            address(this),\\n            budget\\n        );\\n\\n        // Transfer wav3s_fee% to the wav3s multisig.\\n        IERC20(i_wMatic).safeTransferFrom(\\n            address(this),\\n            s_multisig,\\n            ((fees_amount * i_wav3s_fee) / (total_fees))\\n        );\\n\\n        // Transfer consumerAppFee% to the app address.\\n        IERC20(i_wMatic).safeTransferFrom(\\n            address(this),\\n            consumerAppAddress,\\n            ((fees_amount * consumerAppFee) / (total_fees))\\n        );\\n\\n        emit Events.wav3sTweet__PostFunded(\\n            postDataByPublicationIndex[nextId].budget,\\n            reward,\\n            pubOwnerAddress,\\n            consumerAppAddress,\\n            nextId\\n            );\\n\\n        return nextId++;\\n    }\\n\\n    function setPubId(uint256 id, string calldata pubId) external onlyWav3sTrigger{\\n        require(\\n            !postDataByPublicationIndex[id].pubIdSet,\\n            \\\"Errors.wav3sTweet__setPubId__PostAlreadyFunded/Set()\\\"\\n        );\\n\\n  // Update the pubId field of the corresponding PostData struct\\n        postDataByPublicationId[pubId].pubId = pubId;\\n        postDataByPublicationId[pubId].pubIdSet = true;\\n        postDataByPublicationId[pubId].budget = postDataByPublicationIndex[id].budget;\\n        postDataByPublicationId[pubId].reward = postDataByPublicationIndex[id].reward;\\n        postDataByPublicationId[pubId].pubOwnerAddress = postDataByPublicationIndex[id].pubOwnerAddress;\\n        postDataByPublicationId[pubId].consumerAppAddress = postDataByPublicationIndex[id].consumerAppAddress;\\n        postDataByPublicationId[pubId].minFollowers =  postDataByPublicationIndex[id].minFollowers;\\n        postDataByPublicationId[pubId].initiatedWav3 = true;\\n        postDataByPublicationId[pubId].withdrawalTime = postDataByPublicationIndex[id].withdrawalTime;\\n\\n        postDataByPublicationIndex[id].pubIdSet = true;\\n    }\\n    /**\\n     * @dev Processes a mirror action. This will transfer funds to the owner of the profile that initiated the mirror.\\n     * @param pubId The ID of the post that was mirrored.\\n     * @param mirrorerAddress The address of the follower who mirrored the post.\\n\\n     */\\n        function processMirror(\\n        string calldata pubId,\\n        address mirrorerAddress,\\n        uint256 followersCount\\n    ) external stopInEmergency onlyWav3sTrigger {\\n        // Check if the publication is initiated\\n        require(\\n            postDataByPublicationId[pubId].initiatedWav3 != false,\\n            \\\"Errors.wav3sTweet__process__PostNotInitiated(): Post is not funded yet\\\"\\n        );\\n\\n        // Get the budget for the post pointed to\\n        budget = postDataByPublicationId[pubId].budget;\\n        // Get the reward for the post pointed to\\n        reward = postDataByPublicationId[pubId].reward;\\n        // Get the currency address for the post pointed to\\n        // Get the minimum followers for the post pointed to\\n        minFollowers = postDataByPublicationId[pubId].minFollowers;\\n\\n        // Check if the follower has already mirrored this post\\n        require(\\n            !s_PubIdToFollowerHasMirrored[pubId][mirrorerAddress],\\n            \\\"Errors.wav3sTweet__process__FollowerAlreadyMirrored()\\\"\\n        );\\n\\n        // Check if there's enough budget to pay the reward\\n        require(\\n            reward <= budget,\\n            \\\"Errors.wav3sTweet__process__NotEnoughBudgetForThatReward()\\\"\\n        );\\n\\n        // Check if the mirrorer has enough followers\\n        require(\\n            followersCount >= minFollowers,\\n            \\\"Errors.wav3sTweet__process__NeedMoreFollowers()\\\"\\n        );\\n\\n        // Check if the profile address is valid\\n        require(\\n            mirrorerAddress != address(0),\\n            \\\"Errors.wav3sTweet__process__InvalidProfileAddress(): Invalid profile address\\\"\\n        );\\n\\n        // Check if the publication ID is valid\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sTweet__process__InvalidPubId(): Invalid publication ID\\\"\\n        );\\n\\n        // Transfer the reward to the mirror creator\\n        IERC20(i_wMatic).safeTransferFrom(\\n            address(this),\\n            mirrorerAddress,\\n            reward\\n        );\\n        // Update Budget\\n        postDataByPublicationId[pubId].budget -= reward;\\n        // Set the flag indicating that the follower has mirrored this profile\\n        s_PubIdToFollowerHasMirrored[pubId][mirrorerAddress] = true;\\n    \\n\\n        emit Events.wav3sTweet__MirrorProcessed(\\n            postDataByPublicationId[pubId].budget,\\n            reward,\\n            mirrorerAddress,\\n            pubId\\n        );\\n\\n\\n        if (postDataByPublicationId[pubId].budget == 0) {\\n            emit Events.wav3sTweet__PubFinished(pubId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the budget for a Publication.\\n     * @param pubId The ID of the Publication.\\n     * @return The budget for the Publication.\\n     */\\n    function getMirrorBudget(\\n        string calldata pubId\\n    ) external view returns (uint256) {\\n        // Get budget for this Publication\\n        return postDataByPublicationId[pubId].budget;\\n    }\\n\\n    function getPubData(\\n        string calldata pubId\\n    ) external view returns (PostData memory) {\\n        // Get PostData for this Publication\\n        return postDataByPublicationId[pubId];\\n    }\\n\\n    /**\\n     * @dev Sets the wav3s trigger addresses. This can only be called by the contract owner.\\n     * @param wav3sTrigger The new wav3s trigger address.\\n     */\\n    function whitelistWav3sTrigger(address wav3sTrigger) external onlyOwner {\\n        //mapping para guardar true en triggers whitelisted\\n        s_triggerWhitelisted[wav3sTrigger] = true;\\n        emit Events.wav3sTweet__TriggerSet(wav3sTrigger, msg.sender);\\n    }\\n\\n    function isTrigger(address wav3sTrigger) external view returns (bool) {\\n        return s_triggerWhitelisted[wav3sTrigger];\\n    }\\n\\n    /**\\n     * @dev Sets the multisig address. This can only be called by the contract owner.\\n     * @param multisig The new multisig address.\\n     */\\n    function setMultisig(address multisig) external onlyOwner {\\n        s_multisig = multisig;\\n        emit Events.wav3sTweet__MsigSet(multisig, msg.sender);\\n    }\\n\\n    function getMultisig() external view returns (address) {\\n        return s_multisig;\\n    }\\n\\n    /**\\n     * @dev Withdraws funds from the budget of a post.\\n     * @param pubId The ID of the post.\\n     *  amount The amount to withdraw.\\n     */\\n    function withdrawMirrorBudget(\\n        string calldata pubId /*, uint256 amount*/\\n    ) external stopInEmergency {\\n        // Check pubid validity\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sTweet__withdraw__InvalidPubId()\\\"\\n        );\\n\\n        // Check if the Publication is initiated\\n        require(\\n            postDataByPublicationId[pubId].initiatedWav3 == true,\\n            \\\"Errors.wav3sTweet__withdraw__PostNotInitiated()\\\"\\n        );\\n        // Check that the sender is the owner of the given profile\\n        require(\\n            postDataByPublicationId[pubId].pubOwnerAddress == msg.sender,\\n            \\\"Errors.wav3sTweet__withdraw__NotSenderProfileToWithdraw()\\\"\\n        );\\n        // Check the withdrawal time has passed\\n        require(block.timestamp >=  s_PublicationToWithdrawalTime[pubId], \\\"Funds are still locked\\\");\\n\\n\\n        // Get the post budget and currency for the given post\\n        budget = postDataByPublicationId[pubId].budget;\\n\\n        // Check that there is enough funds in the post budget to withdraw\\n        require(\\n            budget > 0,\\n            \\\"Errors.wav3sTweet__withdraw__BudgetEmpty()\\\"\\n        );\\n\\n        IERC20(i_wMatic).safeTransferFrom(address(this), msg.sender, budget);\\n        postDataByPublicationId[pubId].budget = 0;\\n        s_PublicationToWithdrawalTime[pubId]=0;\\n        emit Events.wav3sTweet__PubWithdrawn(budget,pubId, msg.sender);\\n    }\\n\\n    function whitelistConsumerApp(address consumerAppAddress) external onlyOwner returns (bool) {\\n        emit Events.wav3sTweet__consumerAppWhitelisted(consumerAppAddress);\\n        return s_appWhitelisted[consumerAppAddress] = true;\\n    }\\n\\n  function appWhitelisted(address appAddress) public view returns (bool) {\\n        return s_appWhitelisted[appAddress];\\n    }\\n\\n    function isWav3(string calldata pubId) external view returns (bool) {\\n        // Fetch budget for this Publication\\n        return postDataByPublicationId[pubId].initiatedWav3;\\n    }\\n\\n    function circuitBreaker() external onlyOwner {\\n        // You can add an additional modifier that restricts stopping a contract to be based on another action, such as a vote of users\\n        stopped = !stopped;\\n        emit Events.wav3sTweet__CircuitBreak(stopped);\\n    }\\n\\n    function withdrawPub(\\n        string calldata pubId\\n    ) external onlyInEmergency onlyWav3sTrigger {\\n        // Check pubid validity\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sTweet__EmergencyWithdraw__InvalidPubId()\\\"\\n        );\\n\\n        // Check if the Publication is initiated\\n        require(\\n            postDataByPublicationId[pubId].initiatedWav3 == true,\\n            \\\"Errors.wav3sTweet__EmergencyWithdraw__Wav3NotInitiated()\\\"\\n        );\\n       \\n        budget = postDataByPublicationId[pubId].budget;\\n        // Check that there is enough funds in the post budget to withdraw\\n        require(\\n            budget > 0,\\n            \\\"Errors.wav3sTweet__EmergencyWithdraw__NotEnoughBudgetToWithdraw()\\\"\\n        );\\n\\n        IERC20(i_wMatic).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            postDataByPublicationId[pubId].budget\\n        );\\n        emit Events.wav3sTweet__EmergencyWithdraw(\\n            pubId,\\n            postDataByPublicationId[pubId].budget,\\n            msg.sender\\n        );\\n        postDataByPublicationId[pubId].budget = 0;\\n    }\\n\\n    function backdoor() external onlyInEmergency onlyOwner {\\n        uint256 balance = IERC20(i_wMatic).balanceOf(address(this));\\n        IERC20(i_wMatic).safeTransferFrom(address(this), msg.sender, balance);\\n        emit Events.wav3sTweet__backdoor(balance);\\n    }\\n    /** @notice To be able to pay and fallback\\n     */\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wav3s_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wMatic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"wav3sTweet__CircuitBreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sTweet__EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"wav3sTweet__MirrorProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msig\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sTweet__MsigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pubOwnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"wav3sTweet__PostFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budgetFinal\",\"type\":\"uint256\"}],\"name\":\"wav3sTweet__PostFundedInEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"wav3sTweet__PubFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sTweet__PubWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsWitdrawn\",\"type\":\"uint256\"}],\"name\":\"wav3sTweet__RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sTweet__TriggerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"wav3sTweet__backdoor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"}],\"name\":\"wav3sTweet__consumerAppWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__AppAddressNotWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__ArrayLengthMismatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__FollowerAlreadyMirrored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__InvalidAppAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__InvalidProfileAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__InvalidPubId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__InvalidpubOwnerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__NeedMoreFollowers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__NotEnoughBudgetForThatReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"wav3sTweet__process__PostNotInitiated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"appWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backdoor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pubOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFollowers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"consumerAppFee\",\"type\":\"uint256\"}],\"name\":\"fundTweet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"getMirrorBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"getPubData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFollowers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pubOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"pubIdSet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initiatedWav3\",\"type\":\"bool\"}],\"internalType\":\"struct PostData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wav3sTrigger\",\"type\":\"address\"}],\"name\":\"isTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"isWav3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mirrorerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"followersCount\",\"type\":\"uint256\"}],\"name\":\"processMirror\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_wav3sTrigger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"setPubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"}],\"name\":\"whitelistConsumerApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wav3sTrigger\",\"type\":\"address\"}],\"name\":\"whitelistWav3sTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"withdrawMirrorBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"withdrawPub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wav3sTweet", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}