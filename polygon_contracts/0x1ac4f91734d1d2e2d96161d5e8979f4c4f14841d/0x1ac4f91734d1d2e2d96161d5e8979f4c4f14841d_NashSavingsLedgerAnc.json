{"SourceCode": "// Sources flattened with hardhat v2.10.0 https://hardhat.org\r\n\r\n// File contracts/libs/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IAccessControl).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bytes32)\r\n    {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(\r\n            account == _msgSender(),\r\n            \"AccessControl: can only renounce roles for self\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NashSavingsLedgerAnchor.sol\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8;\r\n\r\n\r\n/// @title Nash's savings contract for Anchor's interest bearing aUST token.\r\n/// @notice Access Anchor's interest bearing aUST token on Ethereum, yet at relatively low cost for deposits and withdrawals.\r\n/// @dev The contract supports any ERC20 token (it does not necessarily have to be aUST).\r\ncontract NashSavingsLedgerAnchor is AccessControl {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @dev Underlying (interest bearing) token.\r\n    IERC20 private token;\r\n    /// @dev That token's precision/decimals.\r\n    uint8 private decimals;\r\n\r\n    /// @dev Used by Nash backend to update the user balance if a user withdraws funds manually.\r\n    event ManualWithdrawal(address indexed user, uint48 amount);\r\n\r\n    /// @dev Used by Nash backend to verify the UpdateBalances went through\r\n    event UpdateBalances(address indexed user, bytes32 hash);\r\n\r\n    /// @dev Used by Nash backend to verify the management fee was changed\r\n    event SetManagementFee(uint16 managementFee);\r\n\r\n    /** @dev Role that makes programmatic call to the smart contract, \r\n    private key is held by the backend, can only update the balances\r\n    */\r\n    bytes32 public constant UPDATE_BALANCES_ROLE =\r\n        keccak256(\"UPDATE_BALANCES_ROLE\");\r\n\r\n    /** @dev Role that makes programmatic call to the smart contract, \r\n    private key is held by the backend, can only update the management fee\r\n    */\r\n    bytes32 public constant SET_MANAGEMENT_FEE_ROLE =\r\n        keccak256(\"SET_MANAGEMENT_FEE_ROLE\");\r\n\r\n    /** @dev\r\n    User state is encoded as follows:\r\n    Most significant 16 bits = nonce\r\n    Least significant 48 bits = balance\r\n\r\n    Since the user state is stored on-chain, which is expensive, one design goal is to\r\n    require the least space possible while allowing suficciently many updates. A 16 bit\r\n    nonce gives us 65k updates that Nash can apply to the user's balance. We intend to\r\n    implement a limit of about 1 update per (user and) day, which means that a user can\r\n    do daily updates for 179 years before having to switch her address.\r\n\r\n    One design goal for the balance is to require the least space possible as well. At\r\n    the same time it should provide sufficient size and precision. A 48 bit balance\r\n    provides both: almost 2.8 billion maximum balance per user at 5 decimals precision.\r\n  */\r\n    mapping(address => uint64) private userStates;\r\n\r\n    /// @dev internal precision/decimals.\r\n    uint8 private immutable decimals_internal;\r\n\r\n    /// @dev Used to keep track of how much of the smart contract's funds has been allocated to users. 64 bits allow us to allocate 184 trillion to users at 5 decimals precision.\r\n    uint64 private allocatedFunds;\r\n\r\n    /// @dev Unit of (both manaual withdrawal and management) fees is basis points, i.e., 1/10k.\r\n    uint16 private constant feeUnit = 10_000;\r\n\r\n    /// @notice Manual withdrawal fee in basis points (i.e., 100 = 1%). Can be changed by calling setManualWithdrawalFee().\r\n    uint16 public manualWithdrawalFee;\r\n\r\n    /// @notice Maximum manual withdrawal fee in basis points.\r\n    /// @dev Can be set in the constructor.\r\n    uint16 public immutable manualWithdrawalFeeMax;\r\n\r\n    /// @notice Management fee in basis points (i.e., 100 = 1%). Can be changed by calling setManagementFee().\r\n    uint16 public managementFee;\r\n\r\n    /// @notice Maximum management fee in basis points.\r\n    /// @dev Can be set in the constructor.\r\n    uint16 public immutable managementFeeMax;\r\n\r\n    /// @dev Time stamp when management fee was updated last.\r\n    uint256 private managementFeeTimestamp = block.timestamp;\r\n\r\n    ///* @dev management fee offset allows us to change the management fee over time.\r\n    // The initial factor (i.e., an offset of 0) is 0xffff_ffff_ffff_ffff and decreases over time (the greater the management fee the faster it decreases).\r\n    // A 64 bit bucket allows the smart contract to run basically forever without a significant error in management fee computation.\r\n    uint64 private constant managementFeeOffsetMax = 0xffff_ffff_ffff_ffff;\r\n    uint64 private managementFeeOffset = managementFeeOffsetMax;\r\n\r\n    /// @notice Hash domain separator, has to be unique for each deployment to mitigate replay attacks.\r\n    bytes23 public immutable hash_domain;\r\n\r\n    /// @dev Deposits just consist of user and amount but no signature require, because Nash can unilaterally conduct deposits, i.e., increase a user's balance, (within the limits of unallocated buffer funds.)\r\n    struct DepositData {\r\n        address user;\r\n        uint48 amount;\r\n    }\r\n\r\n    /// @dev Withdrawals require users' signatures (i.e., v, r, and s).\r\n    struct WithdrawalData {\r\n        address user;\r\n        uint48 amount;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    /// @dev We use a constructor so that we can deploy the contract in dev environments without having to change code. Setting hashDomainInsecureAndForTestingOnly to true in production facilitates replay attacks. Unfortunately, solidity does not support overloading of constructors and rewriting the test code to support dynamic hash domain separators is tricky, so we use that boolean instead.\r\n    /// @param _token aUST: 0xa8De3e3c934e2A1BB08B010104CcaBBD4D6293ab on Ethereum mainnet\r\n    /// @param _decimals 18\r\n    /// @param _decimals_internal 5 The balance for each user is stored in a 48 bit int. With 5 decimals internal precision, we get 2.8B max balance. (2^48-1)/10^5. The more precise we store the balance within the contract, the lower the maximum balance.\r\n    /// @param _manualWithdrawalFee 100\r\n    /// @param _manualWithdrawalFeeMax 300\r\n    /// @param _managementFee 100\r\n    /// @param _managementFeeMax 300\r\n    /// @param hashDomainInsecureAndForTestingOnly used to have a constant hash domain separator for testing.\r\n    constructor(\r\n        address _token,\r\n        uint8 _decimals,\r\n        uint8 _decimals_internal,\r\n        uint16 _manualWithdrawalFee,\r\n        uint16 _manualWithdrawalFeeMax,\r\n        uint16 _managementFee,\r\n        uint16 _managementFeeMax,\r\n        bool hashDomainInsecureAndForTestingOnly\r\n    ) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(UPDATE_BALANCES_ROLE, msg.sender);\r\n        _setupRole(SET_MANAGEMENT_FEE_ROLE, msg.sender);\r\n        token = IERC20(_token);\r\n        decimals = _decimals;\r\n        decimals_internal = _decimals_internal;\r\n        require(decimals >= decimals_internal, \"Invalid decimals\");\r\n        manualWithdrawalFee = _manualWithdrawalFee;\r\n        manualWithdrawalFeeMax = _manualWithdrawalFeeMax;\r\n        managementFee = _managementFee;\r\n        managementFeeMax = _managementFeeMax;\r\n        // the hash domain separator must be unique. by computing it dynamically the hash domain separator does not have to be set manually on each deployment. in this way, we can avoid human error.\r\n        // at the same time, we give miners a chance to set the hash domain separator, but the chance is presumably negligible as miners have only very limited ways to influence the result.\r\n        hash_domain = hashDomainInsecureAndForTestingOnly\r\n            ? bytes23(\"NashSavingsLedgerAnchor\")\r\n            : bytes23(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"Nash savings\",\r\n                        block.number,\r\n                        block.timestamp,\r\n                        msg.sender,\r\n                        msg.data,\r\n                        block.chainid\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    /// @notice Create 64 bit cell from user values (i.e., balance and nonce).\r\n    /// @dev We use a single 64 bit cell to save on gas fees.\r\n    /// @param nonce User nonce, used to ensure that deposits and withdrawals are fresh (and not replayed).\r\n    /// @param balance User balance.\r\n    /// @return A single 64 bit cell.\r\n    function packUser(uint16 nonce, uint48 balance)\r\n        private\r\n        pure\r\n        returns (uint64)\r\n    {\r\n        return (uint64(nonce) << 48) | balance;\r\n    }\r\n\r\n    /// @notice Create user values (i.e., balance and nonce) from 64 bit cell.\r\n    /// @dev We use a single 64 bit cell to save on gas fees.\r\n    /// @param userdata Packed user values (64 bit cell).\r\n    /// @return User values (balance and nonce) as a tuple.\r\n    function readUser(uint64 userdata) private pure returns (uint16, uint48) {\r\n        uint16 nonce = uint16(userdata >> 48);\r\n        uint48 balance = uint48(userdata & 0xffff_ffff_ffff);\r\n        return (nonce, balance);\r\n    }\r\n\r\n    /// @notice Retrieve nonce and balance for a particular user. Needed to generate the message (and signature) for a withdrawal, also to withdraw funds manually.\r\n    /// @param user Address of the user to retrieve nonce and balance for.\r\n    /// @return User values (balance adjusted wrt to management fees and nonce) as a tuple.\r\n    function getUserData(address user) external view returns (uint16, uint48) {\r\n        (uint16 nonce, uint48 balance) = readUser(userStates[user]);\r\n        uint256 balance_managed = (uint256(balance) *\r\n            getManagementFeeFactor()) / managementFeeOffsetMax;\r\n        // cast to 48bit int is safe, because getManagementFeeFactor() <= managementFeeOffsetMax, which implies amount_adjusted <= amount\r\n        return (nonce, uint48(balance_managed));\r\n    }\r\n\r\n    /// @notice Convert given amount to not account for management fees.\r\n    /// @param amount Amount to be converted.\r\n    /// @return Converted amount (>= amount)\r\n    function convertToUnmanaged(uint48 amount) private view returns (uint48) {\r\n        uint256 amount_adjusted = (uint256(amount) * managementFeeOffsetMax) /\r\n            getManagementFeeFactor();\r\n        require(amount_adjusted < 2**48, \"Invalid amount\");\r\n        return (uint48(amount_adjusted));\r\n    }\r\n\r\n    /// @notice Get total funds allocated to users, accounting for management fees and token decimals.\r\n    /// @return Total funds allocated to users, accounting for management fees and token decimals.\r\n    function getAllocatedFunds() private view returns (uint256) {\r\n        return\r\n            scaleAmount(\r\n                (uint256(allocatedFunds) * getManagementFeeFactor()) /\r\n                    managementFeeOffsetMax\r\n            );\r\n    }\r\n\r\n    /// @notice Set new fee for manual withdrawals. Unit is basis points, i.e., 1% = 100.\r\n    /// @param feeBasisPoints New fee for manual withdrawals in basis points.\r\n    function setManualWithdrawalFee(uint16 feeBasisPoints)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        manualWithdrawalFee = feeBasisPoints < manualWithdrawalFeeMax\r\n            ? feeBasisPoints\r\n            : manualWithdrawalFeeMax;\r\n    }\r\n\r\n    /// @notice Compute conversion factor that is used to adjust the stored users' balances in order to account for management fees.\r\n    /// @return 0 <= management fee factor <= managementFeeOffsetMax\r\n    function getManagementFeeFactor() private view returns (uint256) {\r\n        uint256 time_diff = block.timestamp - managementFeeTimestamp;\r\n        require(time_diff > 0, \"Invalid timestamp\");\r\n\r\n        // compound interest for all past periods (i.e., years)\r\n        uint256 seconds_per_year = 31_557_600;\r\n        uint256 offset_prev_years = managementFeeOffset;\r\n        uint256 i;\r\n        for (i = 0; i < time_diff / seconds_per_year; i++) {\r\n            offset_prev_years -= (offset_prev_years * managementFee) / feeUnit;\r\n        }\r\n        time_diff -= i * seconds_per_year;\r\n\r\n        // add interest for current period\r\n        uint256 offset_current_year = (offset_prev_years *\r\n            time_diff *\r\n            managementFee) /\r\n            feeUnit /\r\n            seconds_per_year;\r\n        return offset_prev_years - offset_current_year;\r\n    }\r\n\r\n    /// @notice Set yearly management fee. Unit is basis points, i.e., 1% = 100.\r\n    /// @param feeBasisPoints Set yearly management fee in basis points.\r\n    function setManagementFee(uint16 feeBasisPoints)\r\n        external\r\n        onlyRole(SET_MANAGEMENT_FEE_ROLE)\r\n    {\r\n        managementFeeOffset = uint64(getManagementFeeFactor());\r\n        managementFeeTimestamp = block.timestamp;\r\n        managementFee = feeBasisPoints < managementFeeMax\r\n            ? feeBasisPoints\r\n            : managementFeeMax;\r\n\r\n        emit SetManagementFee(managementFee);\r\n    }\r\n\r\n    /// @notice Generate message for the client to sign.\r\n    /// @dev Resulting message needs to be hashed with Keccak256.\r\n    /// @param user Address of the particular user.\r\n    /// @param amount Amount to withdraw.\r\n    function getMessage(address user, uint48 amount)\r\n        external\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        (uint16 nonce, ) = readUser(userStates[user]);\r\n        return encodeMessage(nonce, amount);\r\n    }\r\n\r\n    /// @notice Encode nonce and amount into our contract-internal message format.\r\n    /// @dev Resulting message needs to be hashed with Keccak256.\r\n    /// @param nonce User nonce.\r\n    /// @param amount Amount to withdraw.\r\n    function encodeMessage(uint16 nonce, uint48 amount)\r\n        private\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return abi.encodePacked(hash_domain, nonce, amount);\r\n    }\r\n\r\n    /// @notice Update users' balances, i.e., increase or decrease their balances. Apply batches of withdrawals and deposits to save on gas fees.\r\n    /// @dev For protection against reentry attacks, we must ensure that no external function is called before updating the internal state, i.e., userStates[user] = packUser(user).\r\n    /// @param withdrawals List of withdrawals.\r\n    /// @param deposits List of deposits.\r\n    function updateBalances(\r\n        WithdrawalData[] calldata withdrawals,\r\n        DepositData[] calldata deposits\r\n    ) external onlyRole(UPDATE_BALANCES_ROLE) {\r\n        // decrease balance of a user. requires user's signature\r\n        for (uint8 i = 0; i < withdrawals.length; i++) {\r\n            WithdrawalData calldata withdrawal = withdrawals[i];\r\n            (uint16 nonce, uint48 balance) = readUser(\r\n                userStates[withdrawal.user]\r\n            );\r\n            uint48 amount = convertToUnmanaged(withdrawal.amount);\r\n            require(balance >= amount, \"Insufficient balance\");\r\n            if (nonce == 0xfffe) require(amount == balance, \"Final withdrawal\"); // protect against user's funds getting stuck in the contract due to full nonce;\r\n\r\n            // verify that the balance decrease is fresh (current nonce) and signed by the user.\r\n            bytes32 hash = keccak256(encodeMessage(nonce, withdrawal.amount));\r\n            require(\r\n                ecrecover(hash, withdrawal.v, withdrawal.r, withdrawal.s) ==\r\n                    withdrawal.user,\r\n                \"Invalid signature\"\r\n            );\r\n\r\n            nonce += 1;\r\n            balance -= amount;\r\n            allocatedFunds -= amount;\r\n            userStates[withdrawal.user] = packUser(nonce, balance);\r\n        }\r\n\r\n        // increase balance of a user. no signature required (Nash can unilaterally *increase* the user's balance without explicit consent of the user)\r\n        // Reentry protection, we must ensure that no external function is called before updating the nonce's state, i.e., userStates[user] = packUser(user);\r\n        for (uint8 i = 0; i < deposits.length; i++) {\r\n            DepositData calldata deposit = deposits[i];\r\n            uint48 amount = convertToUnmanaged(deposit.amount);\r\n            (uint16 nonce, uint48 balance) = readUser(userStates[deposit.user]);\r\n            require(nonce < 0xfffe, \"No more deposit\"); // protect against user's funds getting stuck in the contract due to full nonce;\r\n            nonce += 1;\r\n            balance += amount;\r\n            allocatedFunds += amount;\r\n            userStates[deposit.user] = packUser(nonce, balance);\r\n        }\r\n        if (deposits.length > 0) {\r\n            // ensure that Nash cannot allocate more funds to users than is available to the smart contract\r\n            require(\r\n                getAllocatedFunds() <= token.balanceOf(address(this)),\r\n                \"Insufficient buffer balance\"\r\n            );\r\n        }\r\n\r\n        emit UpdateBalances(\r\n            msg.sender,\r\n            keccak256(abi.encode(hash_domain, withdrawals, deposits))\r\n        );\r\n    }\r\n\r\n    /// @notice Retrieve size of (smart contract internal) buffer funds.\r\n    /// @return Size of (smart contract internal) buffer funds in internal precision.\r\n    function getBufferFunds() external view returns (uint256) {\r\n        return\r\n            (token.balanceOf(address(this)) - getAllocatedFunds()) /\r\n            (10**(decimals - decimals_internal));\r\n    }\r\n\r\n    /// @notice Convert amount in our contract's internal precision (i.e., 5 decimals) to the precision used in the external token's contract.\r\n    /// @dev Used in functions that call the underlying token contract, i.e., withdrawManually(), getBufferFunds(), and withdrawNash().\r\n    /// @param amount Amount to be converted, given in our contract's internal precision.\r\n    /// @return Amount in the precision used in the external token's contract.\r\n    function scaleAmount(uint256 amount) private view returns (uint256) {\r\n        return amount * (10**(decimals - decimals_internal));\r\n    }\r\n\r\n    /// @notice Allow users to withdraw funds manually, i.e., directly from this contract without Nash's cooperation.\r\n    /// @param amount Amount to be withdrawn, given in our contract's internal precision.\r\n    function withdrawManually(uint48 amount) external {\r\n        // if msg.sender does not exist in userStates, 0 is returned and the user's balance is therefore 0.\r\n        (uint16 nonce, uint48 balance) = readUser(userStates[msg.sender]);\r\n        uint48 amount_internal = convertToUnmanaged(amount);\r\n        require(balance >= amount_internal, \"Insufficient balance\");\r\n        // if it is the last possible withdrawal withdraw everything, to protect against the user's funds getting stuck in the contract due to full nonce;\r\n        if (nonce == 0xfffe)\r\n            require(amount_internal == balance, \"Final withdrawal\"); // protect against user's funds getting stuck in the contract due to full nonce;\r\n        allocatedFunds -= amount_internal;\r\n        balance -= amount_internal;\r\n        nonce += 1;\r\n        // reentry protection (modify state *before* any external function is called)\r\n        userStates[msg.sender] = packUser(nonce, balance);\r\n        // send token amount (minus manual withdrawal fee) from contract to msg.sender\r\n        token.safeTransfer(\r\n            msg.sender,\r\n            (scaleAmount(amount) * (feeUnit - manualWithdrawalFee)) / feeUnit\r\n        );\r\n        // emit event so that the backend can update the user's balance\r\n        emit ManualWithdrawal(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Allow Nash to withdraw unallocated smart contract's buffer funds.\r\n    /// @dev Use getBufferFunds() get the funds available to Nash.\r\n    /// @param amount Amount to be withdrawn, given in our contract's internal precision.\r\n    function withdrawNash(uint48 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        uint256 amountScaled = scaleAmount(amount);\r\n        // ensure that Nash can only withdraw unallocated funds.\r\n        require(\r\n            amountScaled <=\r\n                token.balanceOf(address(this)) - getAllocatedFunds(),\r\n            \"Insufficient balance\"\r\n        );\r\n        // send token amount from contract to Nash\r\n        token.safeTransfer(msg.sender, amountScaled);\r\n    }\r\n\r\n    /// @notice Just in case we need to recover some other ERC20 token.\r\n    /// @dev This is just a safety measure and has nothing to do with the savings contract per se..\r\n    /// @param token_resc Address of the ERC20 token to be recovered.\r\n    /// @param amount Amount to be converted, given in token contract's precision.\r\n    function rescueToken(IERC20 token_resc, uint256 amount)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        // ensure that Nash cannot transfer aUST this way..\r\n        require(address(token_resc) != address(token), \"CANNOT_RESCUE\");\r\n        token_resc.safeTransfer(msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_decimals_internal\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_manualWithdrawalFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_manualWithdrawalFeeMax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_managementFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_managementFeeMax\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"hashDomainInsecureAndForTestingOnly\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"amount\",\"type\":\"uint48\"}],\"name\":\"ManualWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"managementFee\",\"type\":\"uint16\"}],\"name\":\"SetManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"UpdateBalances\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_MANAGEMENT_FEE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_BALANCES_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"amount\",\"type\":\"uint48\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hash_domain\",\"outputs\":[{\"internalType\":\"bytes23\",\"name\":\"\",\"type\":\"bytes23\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFeeMax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdrawalFeeMax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_resc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setManualWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"amount\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct NashSavingsLedgerAnchor.WithdrawalData[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"amount\",\"type\":\"uint48\"}],\"internalType\":\"struct NashSavingsLedgerAnchor.DepositData[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"amount\",\"type\":\"uint48\"}],\"name\":\"withdrawManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"amount\",\"type\":\"uint48\"}],\"name\":\"withdrawNash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NashSavingsLedgerAnchor", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a0801bad20b6c62d86c566ca90688a6b9ea1d3f00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea74eb13979c6f28195cff05136c3b67daffebba933a85d06d70090b347acb3c"}