{"SourceCode": "// File: contracts/Staking/Owned.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n// File: contracts/Utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: contracts/Uniswap/Interfaces/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n// File: contracts/Uniswap/TransferHelper.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n// File: contracts/Utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.11 <0.9.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: contracts/Common/Context.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: contracts/Curve/IveC3.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\npragma abicoder v2;\r\n\r\ninterface IveC3 {\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    function commit_transfer_ownership(address addr) external;\r\n    function apply_transfer_ownership() external;\r\n    function commit_smart_wallet_checker(address addr) external;\r\n    function apply_smart_wallet_checker() external;\r\n    function toggleEmergencyUnlock() external;\r\n    function recoverERC20(address token_addr, uint256 amount) external;\r\n    function get_last_user_slope(address addr) external view returns (int128);\r\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256);\r\n    function locked__end(address _addr) external view returns (uint256);\r\n    function checkpoint() external;\r\n    function deposit_for(address _addr, uint256 _value) external;\r\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\r\n    function increase_amount(uint256 _value) external;\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n    function withdraw() external;\r\n    function balanceOf(address addr) external view returns (uint256);\r\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\r\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function totalSupply(uint256 t) external view returns (uint256);\r\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\r\n    function totalC3Supply() external view returns (uint256);\r\n    function totalC3SupplyAt(uint256 _block) external view returns (uint256);\r\n    function changeController(address _newController) external;\r\n    function token() external view returns (address);\r\n    function supply() external view returns (uint256);\r\n    function locked(address addr) external view returns (LockedBalance memory);\r\n    function epoch() external view returns (uint256);\r\n    function point_history(uint256 arg0) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_history(address arg0, uint256 arg1) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_epoch(address arg0) external view returns (uint256);\r\n    function slope_changes(uint256 arg0) external view returns (int128);\r\n    function controller() external view returns (address);\r\n    function transfersEnabled() external view returns (bool);\r\n    function emergencyUnlockActive() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function future_smart_wallet_checker() external view returns (address);\r\n    function smart_wallet_checker() external view returns (address);\r\n    function admin() external view returns (address);\r\n    function future_admin() external view returns (address);\r\n}\r\n// File: contracts/Math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File: contracts/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: contracts/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory __name, string memory __symbol) public {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for `accounts`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/Math/Math.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n// File: contracts/Staking/C3/C3_StakingRewardsDualV5.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ======================= StakingRewardsDualV5 =======================\r\n// ====================================================================\r\n// Includes veFXS boost logic\r\n// Unlocked deposits are removed to free up space\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Jason Huan: https://github.com/jasonhuan\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Sam Sun: https://github.com/samczsun\r\n\r\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team\r\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"../../Frax/Frax.sol\";\r\n\r\n\r\n\r\n// Inheritance\r\n\r\n\r\ncontract C3StakingRewardsDualV5 is Owned, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Instances\r\n    IveC3 private veC3;\r\n    ERC20 private rewardsToken0;\r\n    ERC20 private rewardsToken1;\r\n    IUniswapV2Pair private stakingToken;\r\n    \r\n    // Constant for various precisions\r\n    uint256 private constant MULTIPLIER_PRECISION = 1e18;\r\n\r\n    // Admin addresses\r\n    address public timelock_address; // Governance timelock address\r\n    address public controller_address; // Gauge controller\r\n\r\n    // Time tracking\r\n    uint256 public periodFinish;\r\n    uint256 public lastUpdateTime;\r\n\r\n    // Lock time and multiplier settings\r\n    uint256 public lock_max_multiplier = uint256(3e18); // E18. 1x = e18\r\n    uint256 public lock_time_for_max_multiplier = 3 * 365 * 86400; // 3 years\r\n    uint256 public lock_time_min = 86400; // 1 * 86400  (1 day)\r\n\r\n    // veC3 related\r\n    uint256 public vec3_per_c3_for_max_boost = uint256(4e18); // E18. 4e18 means 4 veC3 must be held by the staker per 1 FRAX\r\n    uint256 public vec3_max_multiplier = uint256(2e18); // E18. 1x = 1e18\r\n    mapping(address => uint256) private _vec3MultiplierStored;\r\n\r\n    // Max reward per second\r\n    uint256 public rewardRate0;\r\n    uint256 public rewardRate1;\r\n\r\n    // Reward period\r\n    uint256 public rewardsDuration = 604800; // 7 * 86400  (7 days)\r\n\r\n    // Reward tracking\r\n    uint256 private rewardPerTokenStored0;\r\n    uint256 private rewardPerTokenStored1 = 0;\r\n    mapping(address => uint256) public userRewardPerTokenPaid0;\r\n    mapping(address => uint256) public userRewardPerTokenPaid1;\r\n    mapping(address => uint256) public rewards0;\r\n    mapping(address => uint256) public rewards1;\r\n\r\n    // Balance tracking\r\n    uint256 private _total_liquidity_locked;\r\n    uint256 private _total_combined_weight;\r\n    mapping(address => uint256) private _locked_liquidity;\r\n    mapping(address => uint256) private _combined_weights;\r\n\r\n    // Uniswap related\r\n    bool c3_is_token0;\r\n\r\n    // Stake tracking\r\n    mapping(address => LockedStake[]) private lockedStakes;\r\n\r\n    // List of valid migrators (set by governance)\r\n    mapping(address => bool) public valid_migrators;\r\n\r\n    // Stakers set which migrator(s) they want to use\r\n    mapping(address => mapping(address => bool)) public staker_allowed_migrators;\r\n\r\n    // Greylisting of bad addresses\r\n    mapping(address => bool) public greylist;\r\n\r\n    // Administrative booleans\r\n    bool public token1_rewards_on = true;\r\n    bool public migrationsOn; // Used for migrations. Prevents new stakes, but allows LP and reward withdrawals\r\n    bool public stakesUnlocked; // Release locked stakes in case of system migration or emergency\r\n    bool public withdrawalsPaused; // For emergencies\r\n    bool public rewardsCollectionPaused; // For emergencies\r\n    bool public stakingPaused; // For emergencies\r\n\r\n    /* ========== STRUCTS ========== */\r\n    \r\n    struct LockedStake {\r\n        bytes32 kek_id;\r\n        uint256 start_timestamp;\r\n        uint256 liquidity;\r\n        uint256 ending_timestamp;\r\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == owner || msg.sender == timelock_address, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwnGovCtrlr() {\r\n        require(msg.sender == owner || msg.sender == timelock_address || msg.sender == controller_address, \"Not own, tlk, or ctrlr\");\r\n        _;\r\n    }\r\n\r\n    modifier isMigrating() {\r\n        require(migrationsOn == true, \"Not in migration\");\r\n        _;\r\n    }\r\n\r\n    modifier notStakingPaused() {\r\n        require(stakingPaused == false, \"Staking paused\");\r\n        _;\r\n    }\r\n\r\n    modifier updateRewardAndBalance(address account, bool sync_too) {\r\n        _updateRewardAndBalance(account, sync_too);\r\n        _;\r\n    }\r\n    \r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner,\r\n        address _rewardsToken0,\r\n        address _rewardsToken1,\r\n        address _stakingToken,\r\n        address _c3_address,\r\n        address _timelock_address,\r\n        address _veC3_address\r\n    ) Owned(_owner){\r\n        rewardsToken0 = ERC20(_rewardsToken0);\r\n        rewardsToken1 = ERC20(_rewardsToken1);\r\n        stakingToken = IUniswapV2Pair(_stakingToken);\r\n        veC3 = IveC3(_veC3_address);\r\n        timelock_address = _timelock_address;\r\n\r\n        // 10 C3 a day\r\n        rewardRate0 = 0; // (uint256(3650e18)).div(365 * 86400); \r\n\r\n        // 1 token1 a day\r\n        rewardRate1 = 0; // (uint256(365e18)).div(365 * 86400); \r\n\r\n        // Uniswap related. Need to know which token c3 is (0 or 1)\r\n        address token0 = stakingToken.token0();\r\n        if (token0 == _c3_address) c3_is_token0 = true;\r\n        else c3_is_token0 = false;\r\n        \r\n        // Other booleans\r\n        migrationsOn = false;\r\n        stakesUnlocked = false;\r\n\r\n        // Initialization\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(rewardsDuration);\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // Total locked liquidity tokens\r\n    function totalLiquidityLocked() external view returns (uint256) {\r\n        return _total_liquidity_locked;\r\n    }\r\n\r\n    // Locked liquidity for a given account\r\n    function lockedLiquidityOf(address account) external view returns (uint256) {\r\n        return _locked_liquidity[account];\r\n    }\r\n\r\n    // Total 'balance' used for calculating the percent of the pool the account owns\r\n    // Takes into account the locked stake time multiplier and veC3 multiplier\r\n    function totalCombinedWeight() external view returns (uint256) {\r\n        return _total_combined_weight;\r\n    }\r\n\r\n    // Combined weight for a specific account\r\n    function combinedWeightOf(address account) external view returns (uint256) {\r\n        return _combined_weights[account];\r\n    }\r\n\r\n    // All the locked stakes for a given account\r\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\r\n        return lockedStakes[account];\r\n    }\r\n\r\n    function lockMultiplier(uint256 secs) public view returns (uint256) {\r\n        uint256 lock_multiplier =\r\n            uint256(MULTIPLIER_PRECISION).add(\r\n                secs\r\n                    .mul(lock_max_multiplier.sub(MULTIPLIER_PRECISION))\r\n                    .div(lock_time_for_max_multiplier)\r\n            );\r\n        if (lock_multiplier > lock_max_multiplier) lock_multiplier = lock_max_multiplier;\r\n        return lock_multiplier;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() internal view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function c3PerLPToken() public view returns (uint256) {\r\n        // Get the amount of FRAX 'inside' of the lp tokens\r\n        uint256 c3_per_lp_token;\r\n        {\r\n            uint256 total_c3_reserves;\r\n            (uint256 reserve0, uint256 reserve1, ) = (stakingToken.getReserves());\r\n            if (c3_is_token0) total_c3_reserves = reserve0;\r\n            else total_c3_reserves = reserve1;\r\n\r\n            c3_per_lp_token = total_c3_reserves.mul(1e18).div(stakingToken.totalSupply());\r\n        }\r\n        return c3_per_lp_token;\r\n    }\r\n\r\n    function userStakedC3(address account) public view returns (uint256) {\r\n        return (c3PerLPToken()).mul(_locked_liquidity[account]).div(1e18);\r\n    }\r\n\r\n    function minVeC3ForMaxBoost(address account) public view returns (uint256) {\r\n        return (userStakedC3(account)).mul(vec3_per_c3_for_max_boost).div(MULTIPLIER_PRECISION);\r\n    }\r\n\r\n    function veC3Multiplier(address account) public view returns (uint256) {\r\n        // The claimer gets a boost depending on amount of veC3 they have relative to the amount of FRAX 'inside'\r\n        // of their locked LP tokens\r\n        uint256 veC3_needed_for_max_boost = minVeC3ForMaxBoost(account);\r\n        if (veC3_needed_for_max_boost > 0){\r\n            uint256 user_vec3_fraction = (veC3.balanceOf(account)).mul(MULTIPLIER_PRECISION).div(veC3_needed_for_max_boost);\r\n            \r\n            uint256 vec3_multiplier = ((user_vec3_fraction).mul(vec3_max_multiplier)).div(MULTIPLIER_PRECISION);\r\n\r\n            // Cap the boost to the vec3_max_multiplier\r\n            if (vec3_multiplier > vec3_max_multiplier) vec3_multiplier = vec3_max_multiplier;\r\n\r\n            return vec3_multiplier;\r\n        }\r\n        else return 0; // This will happen with the first stake, when user_staked_c3 is 0\r\n    }\r\n\r\n    function calcCurCombinedWeight(address account) public view\r\n        returns (\r\n            uint256 old_combined_weight,\r\n            uint256 new_vec3_multiplier,\r\n            uint256 new_combined_weight\r\n        )\r\n    {\r\n        // Get the old combined weight\r\n        old_combined_weight = _combined_weights[account];\r\n\r\n        // Get the veC3 multipliers\r\n        // For the calculations, use the midpoint (analogous to midpoint Riemann sum)\r\n        new_vec3_multiplier = veC3Multiplier(account);\r\n        \r\n        uint256 midpoint_vec3_multiplier;\r\n        if (_locked_liquidity[account] == 0 && _combined_weights[account] == 0) {\r\n            // This is only called for the first stake to make sure the veC3 multiplier is not cut in half\r\n            midpoint_vec3_multiplier = new_vec3_multiplier;\r\n        }\r\n        else {\r\n            midpoint_vec3_multiplier = ((new_vec3_multiplier).add(_vec3MultiplierStored[account])).div(2);\r\n        }\r\n\r\n        // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\r\n        new_combined_weight = 0;\r\n        for (uint256 i = 0; i < lockedStakes[account].length; i++) {\r\n            LockedStake memory thisStake = lockedStakes[account][i];\r\n            uint256 lock_multiplier = thisStake.lock_multiplier;\r\n\r\n            // If the lock period is over, drop the lock multiplier down to 1x for the weight calculations\r\n            if (thisStake.ending_timestamp <= block.timestamp){\r\n                lock_multiplier = MULTIPLIER_PRECISION;\r\n            }\r\n\r\n            uint256 liquidity = thisStake.liquidity;\r\n            uint256 combined_boosted_amount = liquidity.mul(lock_multiplier.add(midpoint_vec3_multiplier)).div(MULTIPLIER_PRECISION);\r\n            new_combined_weight = new_combined_weight.add(combined_boosted_amount);\r\n        }\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256, uint256) {\r\n        if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\r\n            return (rewardPerTokenStored0, rewardPerTokenStored1);\r\n        }\r\n        else {\r\n            return (\r\n                rewardPerTokenStored0.add(\r\n                    lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate0).mul(1e18).div(_total_combined_weight)\r\n                ),\r\n                rewardPerTokenStored1.add(\r\n                    lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate1).mul(1e18).div(_total_combined_weight)\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256, uint256) {\r\n        (uint256 rew_per_token0, uint256 rew_per_token1) = rewardPerToken();\r\n        if (_combined_weights[account] == 0){\r\n            return (0, 0);\r\n        }\r\n        return (\r\n            (_combined_weights[account].mul(rew_per_token0.sub(userRewardPerTokenPaid0[account]))).div(1e18).add(rewards0[account]),\r\n            (_combined_weights[account].mul(rew_per_token1.sub(userRewardPerTokenPaid1[account]))).div(1e18).add(rewards1[account])\r\n        );\r\n    }\r\n\r\n    function getRewardForDuration() external view returns (uint256, uint256) {\r\n        return (\r\n            rewardRate0.mul(rewardsDuration),\r\n            rewardRate1.mul(rewardsDuration)\r\n        );\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function _updateRewardAndBalance(address account, bool sync_too) internal {\r\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\r\n        if (sync_too){\r\n            sync();\r\n        }\r\n        \r\n        if (account != address(0)) {\r\n            // To keep the math correct, the user's combined weight must be recomputed to account for their\r\n            // ever-changing veC3 balance.\r\n            (   \r\n                uint256 old_combined_weight,\r\n                uint256 new_vec3_multiplier,\r\n                uint256 new_combined_weight\r\n            ) = calcCurCombinedWeight(account);\r\n\r\n            // Calculate the earnings first\r\n            _syncEarned(account);\r\n\r\n            // Update the user's stored veC3 multipliers\r\n            _vec3MultiplierStored[account] = new_vec3_multiplier;\r\n\r\n            // Update the user's and the global combined weights\r\n            if (new_combined_weight >= old_combined_weight) {\r\n                uint256 weight_diff = new_combined_weight.sub(old_combined_weight);\r\n                _total_combined_weight = _total_combined_weight.add(weight_diff);\r\n                _combined_weights[account] = old_combined_weight.add(weight_diff);\r\n            } else {\r\n                uint256 weight_diff = old_combined_weight.sub(new_combined_weight);\r\n                _total_combined_weight = _total_combined_weight.sub(weight_diff);\r\n                _combined_weights[account] = old_combined_weight.sub(weight_diff);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function _syncEarned(address account) internal {\r\n        if (account != address(0)) {\r\n            // Calculate the earnings\r\n            (uint256 earned0, uint256 earned1) = earned(account);\r\n            rewards0[account] = earned0;\r\n            rewards1[account] = earned1;\r\n            userRewardPerTokenPaid0[account] = rewardPerTokenStored0;\r\n            userRewardPerTokenPaid1[account] = rewardPerTokenStored1;\r\n        }\r\n    }\r\n\r\n    // Staker can allow a migrator \r\n    function stakerAllowMigrator(address migrator_address) external {\r\n        require(valid_migrators[migrator_address], \"Invalid migrator address\");\r\n        staker_allowed_migrators[msg.sender][migrator_address] = true; \r\n    }\r\n\r\n    // Staker can disallow a previously-allowed migrator  \r\n    function stakerDisallowMigrator(address migrator_address) external {\r\n        // Delete from the mapping\r\n        delete staker_allowed_migrators[msg.sender][migrator_address];\r\n    }\r\n    \r\n    // Two different stake functions are needed because of delegateCall and msg.sender issues (important for migration)\r\n    function stakeLocked(uint256 liquidity, uint256 secs) nonReentrant public {\r\n        _stakeLocked(msg.sender, msg.sender, liquidity, secs, block.timestamp);\r\n    }\r\n\r\n    // If this were not internal, and source_address had an infinite approve, this could be exploitable\r\n    // (pull funds from source_address and stake for an arbitrary staker_address)\r\n    function _stakeLocked(\r\n        address staker_address, \r\n        address source_address, \r\n        uint256 liquidity, \r\n        uint256 secs,\r\n        uint256 start_timestamp\r\n    ) internal updateRewardAndBalance(staker_address, true) {\r\n        require(!stakingPaused || valid_migrators[msg.sender] == true, \"Staking paused or in migration\");\r\n        require(liquidity > 0, \"Must stake more than zero\");\r\n        require(greylist[staker_address] == false, \"Address has been greylisted\");\r\n        require(secs >= lock_time_min, \"Minimum stake time not met\");\r\n        require(secs <= lock_time_for_max_multiplier,\"Trying to lock for too long\");\r\n\r\n        uint256 lock_multiplier = lockMultiplier(secs);\r\n        bytes32 kek_id = keccak256(abi.encodePacked(staker_address, start_timestamp, liquidity, _locked_liquidity[staker_address]));\r\n        lockedStakes[staker_address].push(LockedStake(\r\n            kek_id,\r\n            start_timestamp,\r\n            liquidity,\r\n            start_timestamp.add(secs),\r\n            lock_multiplier\r\n        ));\r\n\r\n        // Pull the tokens from the source_address\r\n        TransferHelper.safeTransferFrom(address(stakingToken), source_address, address(this), liquidity);\r\n\r\n        // Update liquidities\r\n        _total_liquidity_locked = _total_liquidity_locked.add(liquidity);\r\n        _locked_liquidity[staker_address] = _locked_liquidity[staker_address].add(liquidity);\r\n\r\n        // Need to call to update the combined weights\r\n        _updateRewardAndBalance(staker_address, false);\r\n\r\n        emit StakeLocked(staker_address, liquidity, secs, kek_id, source_address);\r\n    }\r\n\r\n    // Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues (important for migration)\r\n    function withdrawLocked(bytes32 kek_id) nonReentrant public {\r\n        require(withdrawalsPaused == false, \"Withdrawals paused\");\r\n        _withdrawLocked(msg.sender, msg.sender, kek_id);\r\n    }\r\n\r\n    // No withdrawer == msg.sender check needed since this is only internally callable and the checks are done in the wrapper\r\n    // functions like withdraw(), migrator_withdraw_unlocked() and migrator_withdraw_locked()\r\n    function _withdrawLocked(address staker_address, address destination_address, bytes32 kek_id) internal  {\r\n        // Collect rewards first and then update the balances\r\n        _getReward(staker_address, destination_address);\r\n\r\n        LockedStake memory thisStake;\r\n        thisStake.liquidity = 0;\r\n        uint theArrayIndex;\r\n        for (uint i = 0; i < lockedStakes[staker_address].length; i++){ \r\n            if (kek_id == lockedStakes[staker_address][i].kek_id){\r\n                thisStake = lockedStakes[staker_address][i];\r\n                theArrayIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        require(thisStake.kek_id == kek_id, \"Stake not found\");\r\n        require(block.timestamp >= thisStake.ending_timestamp || stakesUnlocked == true || valid_migrators[msg.sender] == true, \"Stake is still locked!\");\r\n\r\n        uint256 liquidity = thisStake.liquidity;\r\n\r\n        if (liquidity > 0) {\r\n            // Update liquidities\r\n            _total_liquidity_locked = _total_liquidity_locked.sub(liquidity);\r\n            _locked_liquidity[staker_address] = _locked_liquidity[staker_address].sub(liquidity);\r\n\r\n            // Remove the stake from the array\r\n            delete lockedStakes[staker_address][theArrayIndex];\r\n\r\n            // Need to call to update the combined weights\r\n            _updateRewardAndBalance(staker_address, false);\r\n\r\n            // Give the tokens to the destination_address\r\n            // Should throw if insufficient balance\r\n            stakingToken.transfer(destination_address, liquidity);\r\n\r\n            emit WithdrawLocked(staker_address, liquidity, kek_id, destination_address);\r\n        }\r\n\r\n    }\r\n    \r\n    // Two different getReward functions are needed because of delegateCall and msg.sender issues (important for migration)\r\n    function getReward() external nonReentrant returns (uint256, uint256) {\r\n        require(rewardsCollectionPaused == false,\"Rewards collection paused\");\r\n        return _getReward(msg.sender, msg.sender);\r\n    }\r\n\r\n    // No withdrawer == msg.sender check needed since this is only internally callable\r\n    // This distinction is important for the migrator\r\n    function _getReward(address rewardee, address destination_address) internal updateRewardAndBalance(rewardee, true) returns (uint256 reward0, uint256 reward1) {\r\n        reward0 = rewards0[rewardee];\r\n        reward1 = rewards1[rewardee];\r\n        if (reward0 > 0) {\r\n            rewards0[rewardee] = 0;\r\n            rewardsToken0.transfer(destination_address, reward0);\r\n            emit RewardPaid(rewardee, reward0, address(rewardsToken0), destination_address);\r\n        }\r\n        // if (token1_rewards_on){\r\n            if (reward1 > 0) {\r\n                rewards1[rewardee] = 0;\r\n                rewardsToken1.transfer(destination_address, reward1);\r\n                emit RewardPaid(rewardee, reward1, address(rewardsToken1), destination_address);\r\n            }\r\n        // }\r\n\r\n    }\r\n\r\n    // If the period expired, renew it\r\n    function retroCatchUp() internal {\r\n        // Failsafe check\r\n        require(block.timestamp > periodFinish, \"Period has not expired yet!\");\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\r\n        uint balance0 = rewardsToken0.balanceOf(address(this));\r\n        uint balance1 = rewardsToken1.balanceOf(address(this));\r\n        require(rewardRate0.mul(rewardsDuration).mul(num_periods_elapsed + 1) <= balance0, \"Not enough C3 available\");\r\n        \r\n        if (token1_rewards_on){\r\n            require(rewardRate1.mul(rewardsDuration).mul(num_periods_elapsed + 1) <= balance1, \"Not enough token1 available for rewards!\");\r\n        }\r\n        \r\n        // uint256 old_lastUpdateTime = lastUpdateTime;\r\n        // uint256 new_lastUpdateTime = block.timestamp;\r\n\r\n        // lastUpdateTime = periodFinish;\r\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDuration));\r\n\r\n        (uint256 reward0, uint256 reward1) = rewardPerToken();\r\n        rewardPerTokenStored0 = reward0;\r\n        rewardPerTokenStored1 = reward1;\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n\r\n        emit RewardsPeriodRenewed(address(stakingToken));\r\n    }\r\n\r\n    function sync() public {\r\n        if (block.timestamp > periodFinish) {\r\n            retroCatchUp();\r\n        }\r\n        else {\r\n            (uint256 reward0, uint256 reward1) = rewardPerToken();\r\n            rewardPerTokenStored0 = reward0;\r\n            rewardPerTokenStored1 = reward1;\r\n            lastUpdateTime = lastTimeRewardApplicable();\r\n        }\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Migrator can stake for someone else (they won't be able to withdraw it back though, only staker_address can). \r\n    function migrator_stakeLocked_for(address staker_address, uint256 amount, uint256 secs, uint256 start_timestamp) external isMigrating {\r\n        require(staker_allowed_migrators[staker_address][msg.sender] && valid_migrators[msg.sender], \"Mig. invalid or unapproved\");\r\n        _stakeLocked(staker_address, msg.sender, amount, secs, start_timestamp);\r\n    }\r\n\r\n    // Used for migrations\r\n    function migrator_withdraw_locked(address staker_address, bytes32 kek_id) external isMigrating {\r\n        require(staker_allowed_migrators[staker_address][msg.sender] && valid_migrators[msg.sender], \"Mig. invalid or unapproved\");\r\n        _withdrawLocked(staker_address, msg.sender, kek_id);\r\n    }\r\n\r\n    // Adds supported migrator address \r\n    function addMigrator(address migrator_address) external onlyByOwnGov {\r\n        valid_migrators[migrator_address] = true;\r\n    }\r\n\r\n    // Remove a migrator address\r\n    function removeMigrator(address migrator_address) external onlyByOwnGov {\r\n        require(valid_migrators[migrator_address] == true, \"Address nonexistant\");\r\n        \r\n        // Delete from the mapping\r\n        delete valid_migrators[migrator_address];\r\n    }\r\n\r\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Admin cannot withdraw the staking token from the contract unless currently migrating\r\n        if(!migrationsOn){\r\n            require(tokenAddress != address(stakingToken), \"Not in migration\"); // Only Governance / Timelock can trigger a migration\r\n        }\r\n        // Only the owner address can ever receive the recovery withdrawal\r\n        ERC20(tokenAddress).transfer(owner, tokenAmount);\r\n        emit Recovered(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyByOwnGovCtrlr {\r\n        require(\r\n            periodFinish == 0 || block.timestamp > periodFinish,\r\n            \"Reward period incomplete\"\r\n        );\r\n        rewardsDuration = _rewardsDuration;\r\n        emit RewardsDurationUpdated(rewardsDuration);\r\n    }\r\n\r\n    function setMultipliers(uint256 _lock_max_multiplier, uint256 _vec3_max_multiplier, uint256 _vec3_per_c3_for_max_boost) external onlyByOwnGov {\r\n        require(_lock_max_multiplier >= MULTIPLIER_PRECISION, \"Mult must be >= MULTIPLIER_PRECISION\");\r\n        require(_vec3_max_multiplier >= 0, \"veC3 mul must be >= 0\");\r\n        require(_vec3_per_c3_for_max_boost > 0, \"veC3 pct max must be >= 0\");\r\n\r\n        lock_max_multiplier = _lock_max_multiplier;\r\n        vec3_max_multiplier = _vec3_max_multiplier;\r\n        vec3_per_c3_for_max_boost = _vec3_per_c3_for_max_boost;\r\n\r\n        emit MaxVeC3Multiplier(vec3_max_multiplier);\r\n        emit LockedStakeMaxMultiplierUpdated(lock_max_multiplier);\r\n        emit veC3PerC3ForMaxBoostUpdated(vec3_per_c3_for_max_boost);\r\n    }\r\n\r\n    function setLockedStakeTimeForMinAndMaxMultiplier(uint256 _lock_time_for_max_multiplier, uint256 _lock_time_min) external onlyByOwnGov {\r\n        require(_lock_time_for_max_multiplier >= 1, \"Mul max time must be >= 1\");\r\n        require(_lock_time_min >= 1, \"Mul min time must be >= 1\");\r\n\r\n        lock_time_for_max_multiplier = _lock_time_for_max_multiplier;\r\n        lock_time_min = _lock_time_min;\r\n\r\n        emit LockedStakeTimeForMaxMultiplier(lock_time_for_max_multiplier);\r\n        emit LockedStakeMinTime(_lock_time_min);\r\n    }\r\n\r\n    function greylistAddress(address _address) external onlyByOwnGov {\r\n        greylist[_address] = !(greylist[_address]);\r\n    }\r\n\r\n    function unlockStakes() external onlyByOwnGov {\r\n        stakesUnlocked = !stakesUnlocked;\r\n    }\r\n\r\n    function toggleMigrations() external onlyByOwnGov {\r\n        migrationsOn = !migrationsOn;\r\n    }\r\n\r\n    function toggleStaking() external onlyByOwnGov {\r\n        stakingPaused = !stakingPaused;\r\n    }\r\n\r\n    function toggleWithdrawals() external onlyByOwnGov {\r\n        withdrawalsPaused = !withdrawalsPaused;\r\n    }\r\n\r\n    function toggleRewardsCollection() external onlyByOwnGov {\r\n        rewardsCollectionPaused = !rewardsCollectionPaused;\r\n    }\r\n\r\n    function setRewardRates(uint256 _new_rate0, uint256 _new_rate1, bool sync_too) external onlyByOwnGovCtrlr {\r\n        rewardRate0 = _new_rate0;\r\n        rewardRate1 = _new_rate1;\r\n\r\n        if (sync_too){\r\n            sync();\r\n        }\r\n    }\r\n\r\n    function toggleToken1Rewards() external onlyByOwnGov {\r\n        if (token1_rewards_on) {\r\n            rewardRate1 = 0;\r\n        }\r\n        token1_rewards_on = !token1_rewards_on;\r\n    }\r\n\r\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\r\n        timelock_address = _new_timelock;\r\n    }\r\n\r\n    function setController(address _controller_address) external onlyByOwnGov {\r\n        controller_address = _controller_address;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\r\n    event WithdrawLocked(address indexed user, uint256 amount, bytes32 kek_id, address destination_address);\r\n    event RewardPaid(address indexed user, uint256 reward, address token_address, address destination_address);\r\n    event RewardsDurationUpdated(uint256 newDuration);\r\n    event Recovered(address token, uint256 amount);\r\n    event RewardsPeriodRenewed(address token);\r\n    event LockedStakeMaxMultiplierUpdated(uint256 multiplier);\r\n    event LockedStakeTimeForMaxMultiplier(uint256 secs);\r\n    event LockedStakeMinTime(uint256 secs);\r\n    event MaxVeC3Multiplier(uint256 multiplier);\r\n    event veC3PerC3ForMaxBoostUpdated(uint256 scale_factor);\r\n}\r\n\r\n// File: contracts/Staking/C3_Variants/C3_StakingRewardsDualV5_FRAX_C3.sol\r\n\r\n\r\npragma solidity >=0.6.11;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract StakingRewardsDualV5_FRAX_C3 is C3StakingRewardsDualV5 {\r\n    constructor (\r\n        address _owner,\r\n        address _rewardsToken0,\r\n        address _rewardsToken1, // KLIMA is E9\r\n        address _stakingToken, \r\n        address _c3_address,\r\n        address _timelock_address,\r\n        address _veC3_address\r\n    ) \r\n    C3StakingRewardsDualV5(_owner, _rewardsToken0, _rewardsToken1, _stakingToken, _c3_address, _timelock_address, _veC3_address )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_c3_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veC3_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"LockedStakeMaxMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"LockedStakeMinTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"LockedStakeTimeForMaxMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"MaxVeC3Multiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardsPeriodRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source_address\",\"type\":\"address\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"WithdrawLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale_factor\",\"type\":\"uint256\"}],\"name\":\"veC3PerC3ForMaxBoostUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"addMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c3PerLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcCurCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"old_combined_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_vec3_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_combined_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"combinedWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"greylistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"lockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_for_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedLiquidityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedStakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ending_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lock_multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct C3StakingRewardsDualV5.LockedStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"}],\"name\":\"migrator_stakeLocked_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"migrator_withdraw_locked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minVeC3ForMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"removeMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller_address\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock_time_for_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_time_min\",\"type\":\"uint256\"}],\"name\":\"setLockedStakeTimeForMinAndMaxMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vec3_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vec3_per_c3_for_max_boost\",\"type\":\"uint256\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_rate0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_rate1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\"}],\"name\":\"setRewardRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"stakerAllowMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"stakerDisallowMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staker_allowed_migrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMigrations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRewardsCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleToken1Rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1_rewards_on\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userStakedC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valid_migrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"veC3Multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vec3_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vec3_per_c3_for_max_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingRewardsDualV5_FRAX_C3", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008c250a8128c76b25103174d0cf9dee4800ebfecd000000000000000000000000ad01dffe604cdc172d8237566ee3a3ab6524d4c60000000000000000000000001a3acf6d19267e2d3e7f898f42803e90c9219062000000000000000000000000b5600746f947c25c0cbc36429f87e6c88f9d6a88000000000000000000000000ad01dffe604cdc172d8237566ee3a3ab6524d4c60000000000000000000000009dca574b1b6bd51cbd02a3d98716597bd84c45eb0000000000000000000000006a88a0abb9be9f9050ff87753b84613f4e28361b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6276d72ae8aefcc45d87e6a7e587708255fb297570b2bad94ff0593532709e60"}