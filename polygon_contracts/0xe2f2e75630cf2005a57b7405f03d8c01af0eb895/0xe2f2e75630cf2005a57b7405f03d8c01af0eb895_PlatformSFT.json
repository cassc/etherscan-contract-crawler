{"SourceCode": "// Sources flattened with hardhat v2.13.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.7.3\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IERC721.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.1;\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n *  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev This emits when ownership of any NFT changes by any mechanism.\r\n     *  This event emits when NFTs are created (`from` == 0) and destroyed\r\n     *  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n     *  may be created and assigned without emitting Transfer. At the time of\r\n     *  any transfer, the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /**\r\n     * @dev This emits when the approved address for an NFT is changed or\r\n     *  reaffirmed. The zero address indicates there is no approved address.\r\n     *  When a Transfer event emits, this also indicates that the approved\r\n     *  address for that NFT (if any) is reset to none.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /**\r\n     * @dev This emits when an operator is enabled or disabled for an owner.\r\n     *  The operator can manage all NFTs of the owner.\r\n     */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /**\r\n     * @notice Count all NFTs assigned to an owner\r\n     * @dev NFTs assigned to the zero address are considered invalid, and this\r\n     *  function throws for queries about the zero address.\r\n     * @param _owner An address for whom to query the balance\r\n     * @return The number of NFTs owned by `_owner`, possibly zero\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Find the owner of an NFT\r\n     * @dev NFTs assigned to zero address are considered invalid, and queries\r\n     *  about them do throw.\r\n     * @param _tokenId The identifier for an NFT\r\n     * @return The address of the owner of the NFT\r\n     */\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Transfers the ownership of an NFT from one address to another address\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\r\n     *  operator, or the approved address for this NFT. Throws if `_from` is\r\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\r\n     *  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n     *  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     *  `onERC721Received` on `_to` and throws if the return value is not\r\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT\r\n     * @param _to The new owner\r\n     * @param _tokenId The NFT to transfer\r\n     * @param data Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of an NFT from one address to another address\r\n     * @dev This works identically to the other function with an extra data parameter,\r\n     *  except this function just sets data to \"\".\r\n     * @param _from The current owner of the NFT\r\n     * @param _to The new owner\r\n     * @param _tokenId The NFT to transfer\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n     *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n     *  THEY MAY BE PERMANENTLY LOST\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\r\n     *  operator, or the approved address for this NFT. Throws if `_from` is\r\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\r\n     *  `_tokenId` is not a valid NFT.\r\n     * @param _from The current owner of the NFT\r\n     * @param _to The new owner\r\n     * @param _tokenId The NFT to transfer\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @notice Change or reaffirm the approved address for an NFT\r\n     * @dev The zero address indicates there is no approved address.\r\n     *  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n     *  operator of the current owner.\r\n     * @param _approved The new approved NFT controller\r\n     * @param _tokenId The NFT to approve\r\n     */\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage\r\n     *  all of `msg.sender`'s assets\r\n     * @dev Emits the ApprovalForAll event. The contract MUST allow\r\n     *  multiple operators per owner.\r\n     * @param _operator Address to add to the set of authorized operators\r\n     * @param _approved True if the operator is approved, false to revoke approval\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /**\r\n     * @notice Get the approved address for a single NFT\r\n     * @dev Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId The NFT to find the approved address for\r\n     * @return The approved address for this NFT, or the zero address if there is none\r\n     */\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Query if an address is an authorized operator for another address\r\n     * @param _owner The address that owns the NFTs\r\n     * @param _operator The address that acts on behalf of the owner\r\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/extensions/IERC721Metadata.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.1;\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n *  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @notice A descriptive name for a collection of NFTs in this contract\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice An abbreviated name for NFTs in this contract\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n     *  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n     *  Metadata JSON Schema\".\r\n     */\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/IERC3525.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title ERC-3525 Semi-Fungible Token Standard\r\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\r\n * Note: the ERC-165 identifier for this interface is 0xd5358140.\r\n */\r\ninterface IERC3525 is IERC165, IERC721 {\r\n    /**\r\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\r\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\r\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\r\n     * @param _fromTokenId The token id to transfer value from\r\n     * @param _toTokenId The token id to transfer value to\r\n     * @param _value The transferred value\r\n     */\r\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\r\n\r\n    /**\r\n     * @dev MUST emits when the approval value of a token is set or changed.\r\n     * @param _tokenId The token to approve\r\n     * @param _operator The operator to approve for\r\n     * @param _value The maximum value that `_operator` is allowed to manage\r\n     */\r\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\r\n\r\n    /**\r\n     * @dev MUST emit when the slot of a token is set or changed.\r\n     * @param _tokenId The token of which slot is set or changed\r\n     * @param _oldSlot The previous slot of the token\r\n     * @param _newSlot The updated slot of the token\r\n     */\r\n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\r\n\r\n    /**\r\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\r\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\r\n     *  Considering the compatibility with third-party wallets, this function is defined as\r\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with ERC20 tokens.\r\n     * @return The number of decimals for value\r\n     */\r\n    function valueDecimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @notice Get the value of a token.\r\n     * @param _tokenId The token for which to query the balance\r\n     * @return The value of `_tokenId`\r\n     */\r\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the slot of a token.\r\n     * @param _tokenId The identifier for a token\r\n     * @return The slot of the token\r\n     */\r\n    function slotOf(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Allow an operator to manage the value of a token, up to the `_value` amount.\r\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\r\n     *  address for `_tokenId`.\r\n     *  MUST emit ApprovalValue event.\r\n     * @param _tokenId The token to approve\r\n     * @param _operator The operator to be approved\r\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\r\n     */\r\n    function approve(uint256 _tokenId, address _operator, uint256 _value) external payable;\r\n\r\n    /**\r\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\r\n     * @param _tokenId The token for which to query the allowance\r\n     * @param _operator The address of an operator\r\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\r\n     */\r\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Transfer value from a specified token to another specified token with the same slot.\r\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\r\n     *  approved the whole `_fromTokenId` or part of it.\r\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\r\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\r\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\r\n     *  operator.\r\n     *  MUST emit `TransferValue` event.\r\n     * @param _fromTokenId The token to transfer value from\r\n     * @param _toTokenId The token to transfer value to\r\n     * @param _value The transferred value\r\n     */\r\n    function transferFrom(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value) external payable;\r\n\r\n    /**\r\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\r\n     *  `_to` is capable of receiving ERC3525 tokens.\r\n     * @dev This function MUST create a new ERC3525 token with the same slot for `_to` to receive\r\n     *  the transferred value.\r\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\r\n     *  MUST revert if `_to` is zero address.\r\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\r\n     *  operator.\r\n     *  MUST emit `Transfer` and `TransferValue` events.\r\n     * @param _fromTokenId The token to transfer value from\r\n     * @param _to The address to transfer value to\r\n     * @param _value The transferred value\r\n     * @return ID of the new token created for `_to` which receives the transferred value\r\n     */\r\n    function transferFrom(uint256 _fromTokenId, address _to, uint256 _value) external payable returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/extensions/IERC3525Metadata.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.1;\r\n/**\r\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\r\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\r\n *  (URI) for the ERC3525 contract as well as a specified slot.\r\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\r\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\r\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\r\n *  to any resource stored in a centralized system.\r\n *  See https://eips.ethereum.org/EIPS/eip-3525\r\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\r\n */\r\ninterface IERC3525Metadata is IERC3525, IERC721Metadata {\r\n    /**\r\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\r\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\r\n     *  header `data:application/json;`.\r\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\r\n     * @return The JSON formatted URI of the current ERC3525 contract\r\n     */\r\n    function contractURI() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\r\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\r\n     *  `data:application/json;`.\r\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\r\n     * @return The JSON formatted URI of `_slot`\r\n     */\r\n    function slotURI(uint256 _slot) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/extensions/IERC721Enumerable.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.1;\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n *  Note: the ERC-165 identifier for this interface is 0x780e9d63.\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @notice Count NFTs tracked by this contract\r\n     * @return A count of valid NFTs tracked by this contract, where each one of\r\n     *  them has an assigned and queryable owner not equal to the zero address\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Enumerate valid NFTs\r\n     * @dev Throws if `_index` >= `totalSupply()`.\r\n     * @param _index A counter less than `totalSupply()`\r\n     * @return The token identifier for the `_index`th NFT,\r\n     *  (sort order not specified)\r\n     */\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Enumerate NFTs assigned to an owner\r\n     * @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n     *  `_owner` is the zero address, representing invalid NFTs.\r\n     * @param _owner An address where we are interested in NFTs owned by them\r\n     * @param _index A counter less than `balanceOf(_owner)`\r\n     * @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n     *  (sort order not specified)\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/IERC3525Receiver.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @title EIP-3525 token receiver interface\r\n * @dev Interface for a smart contract that wants to be informed by EIP-3525 contracts when\r\n *  receiving values from ANY addresses or EIP-3525 tokens.\r\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\r\n */\r\ninterface IERC3525Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an EIP-3525 token value.\r\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the\r\n     *  recipient contract, if the recipient contract implements this function, the EIP-3525\r\n     *  contract MUST call this function after a value transfer (i.e. `transferFrom(uint256,\r\n     *  uint256,uint256,bytes)`).\r\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\r\n     *  uint256,bytes)'))`) if the transfer is accepted.\r\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\r\n     * @param _operator The address which triggered the transfer\r\n     * @param _fromTokenId The token id to transfer value from\r\n     * @param _toTokenId The token id to transfer value to\r\n     * @param _value The transferred value\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))`\r\n     *  unless the transfer is rejected.\r\n     */\r\n    function onERC3525Received(\r\n        address _operator,\r\n        uint256 _fromTokenId,\r\n        uint256 _toTokenId,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/IERC721Receiver.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\r\n *  Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     *  after a `transfer`. This function MAY throw to revert and reject the\r\n     *  transfer. Return of other than the magic value MUST result in the\r\n     *  transaction being reverted.\r\n     *  Note: the contract address is always the message sender.\r\n     * @param _operator The address which called `safeTransferFrom` function\r\n     * @param _from The address which previously owned the token\r\n     * @param _tokenId The NFT identifier which is being transferred\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     *  unless throwing\r\n     */\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)\r\n        external\r\n        returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/periphery/interface/IERC3525MetadataDescriptor.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC3525MetadataDescriptor {\r\n    function constructContractURI() external view returns (string memory);\r\n\r\n    function constructSlotURI(uint256 slot) external view returns (string memory);\r\n\r\n    function constructTokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/ERC3525.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\ncontract ERC3525 is Context, IERC3525Metadata, IERC721Enumerable {\r\n    using Strings for address;\r\n    using Strings for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    event SetMetadataDescriptor(address indexed metadataDescriptor);\r\n\r\n    struct TokenData {\r\n        uint256 id;\r\n        uint256 slot;\r\n        uint256 balance;\r\n        address owner;\r\n        address approved;\r\n        address[] valueApprovals;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint256[] ownedTokens;\r\n        mapping(uint256 => uint256) ownedTokensIndex;\r\n        mapping(address => bool) approvals;\r\n    }\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    Counters.Counter private _tokenIdGenerator;\r\n\r\n    // id => (approval => allowance)\r\n    // @dev _approvedValues cannot be defined within TokenData, cause struct containing mappings cannot be constructed.\r\n    mapping(uint256 => mapping(address => uint256)) private _approvedValues;\r\n\r\n    TokenData[] private _allTokens;\r\n\r\n    // key: id\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    IERC3525MetadataDescriptor public metadataDescriptor;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId || interfaceId == type(IERC3525).interfaceId\r\n            || interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC3525Metadata).interfaceId\r\n            || interfaceId == type(IERC721Enumerable).interfaceId || interfaceId == type(IERC721Metadata).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals the token uses for value.\r\n     */\r\n    function valueDecimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\r\n        _requireMinted(tokenId_);\r\n        return _allTokens[_allTokensIndex[tokenId_]].balance;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId_) public view virtual override returns (address owner_) {\r\n        _requireMinted(tokenId_);\r\n        owner_ = _allTokens[_allTokensIndex[tokenId_]].owner;\r\n        require(owner_ != address(0), \"ERC3525: invalid token ID\");\r\n    }\r\n\r\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\r\n        _requireMinted(tokenId_);\r\n        return _allTokens[_allTokensIndex[tokenId_]].slot;\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function contractURI() public view virtual override returns (string memory) {\r\n        string memory baseURI = _baseURI();\r\n        return address(metadataDescriptor) != address(0)\r\n            ? metadataDescriptor.constructContractURI()\r\n            : bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, \"contract/\", Strings.toHexString(address(this))))\r\n                : \"\";\r\n    }\r\n\r\n    function slotURI(uint256 slot_) public view virtual override returns (string memory) {\r\n        string memory baseURI = _baseURI();\r\n        return address(metadataDescriptor) != address(0)\r\n            ? metadataDescriptor.constructSlotURI(slot_)\r\n            : bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, \"slot/\", slot_.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId_);\r\n        string memory baseURI = _baseURI();\r\n        return address(metadataDescriptor) != address(0)\r\n            ? metadataDescriptor.constructTokenURI(tokenId_)\r\n            : bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId_.toString())) : \"\";\r\n    }\r\n\r\n    function approve(uint256 tokenId_, address to_, uint256 value_) public payable virtual override {\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        require(to_ != owner, \"ERC3525: approval to current owner\");\r\n\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: approve caller is not owner nor approved\");\r\n\r\n        _approveValue(tokenId_, to_, value_);\r\n    }\r\n\r\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\r\n        _requireMinted(tokenId_);\r\n        return _approvedValues[tokenId_][operator_];\r\n    }\r\n\r\n    function transferFrom(uint256 fromTokenId_, address to_, uint256 value_)\r\n        public\r\n        payable\r\n        virtual\r\n        override\r\n        returns (uint256 newTokenId)\r\n    {\r\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\r\n\r\n        newTokenId = _createDerivedTokenId(fromTokenId_);\r\n        _mint(to_, newTokenId, ERC3525.slotOf(fromTokenId_), 0);\r\n        _transferValue(fromTokenId_, newTokenId, value_);\r\n    }\r\n\r\n    function transferFrom(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) public payable virtual override {\r\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\r\n        _transferValue(fromTokenId_, toTokenId_, value_);\r\n    }\r\n\r\n    function balanceOf(address owner_) public view virtual override returns (uint256 balance) {\r\n        require(owner_ != address(0), \"ERC3525: balance query for the zero address\");\r\n        return _addressData[owner_].ownedTokens.length;\r\n    }\r\n\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) public payable virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\r\n        _transferTokenId(from_, to_, tokenId_);\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_)\r\n        public\r\n        payable\r\n        virtual\r\n        override\r\n    {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\r\n        _safeTransferTokenId(from_, to_, tokenId_, data_);\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) public payable virtual override {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    function approve(address to_, uint256 tokenId_) public payable virtual override {\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        require(to_ != owner, \"ERC3525: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || ERC3525.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC3525: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to_, tokenId_);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId_) public view virtual override returns (address) {\r\n        _requireMinted(tokenId_);\r\n        return _allTokens[_allTokensIndex[tokenId_]].approved;\r\n    }\r\n\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator_, approved_);\r\n    }\r\n\r\n    function isApprovedForAll(address owner_, address operator_) public view virtual override returns (bool) {\r\n        return _addressData[owner_].approvals[operator_];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index_) public view virtual override returns (uint256) {\r\n        require(index_ < ERC3525.totalSupply(), \"ERC3525: global index out of bounds\");\r\n        return _allTokens[index_].id;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner_, uint256 index_) public view virtual override returns (uint256) {\r\n        require(index_ < ERC3525.balanceOf(owner_), \"ERC3525: owner index out of bounds\");\r\n        return _addressData[owner_].ownedTokens[index_];\r\n    }\r\n\r\n    function _setApprovalForAll(address owner_, address operator_, bool approved_) internal virtual {\r\n        require(owner_ != operator_, \"ERC3525: approve to caller\");\r\n\r\n        _addressData[owner_].approvals[operator_] = approved_;\r\n\r\n        emit ApprovalForAll(owner_, operator_, approved_);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address operator_, uint256 tokenId_) internal view virtual returns (bool) {\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        return (\r\n            operator_ == owner || ERC3525.isApprovedForAll(owner, operator_)\r\n                || ERC3525.getApproved(tokenId_) == operator_\r\n        );\r\n    }\r\n\r\n    function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual {\r\n        uint256 currentAllowance = ERC3525.allowance(tokenId_, operator_);\r\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= value_, \"ERC3525: insufficient allowance\");\r\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\r\n        }\r\n    }\r\n\r\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\r\n        return _allTokens.length != 0 && _allTokens[_allTokensIndex[tokenId_]].id == tokenId_;\r\n    }\r\n\r\n    function _requireMinted(uint256 tokenId_) internal view virtual {\r\n        require(_exists(tokenId_), \"ERC3525: invalid token ID\");\r\n    }\r\n\r\n    function _mint(address to_, uint256 slot_, uint256 value_) internal virtual returns (uint256 tokenId) {\r\n        tokenId = _createOriginalTokenId();\r\n        _mint(to_, tokenId, slot_, value_);\r\n    }\r\n\r\n    function _mint(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual {\r\n        require(to_ != address(0), \"ERC3525: mint to the zero address\");\r\n        require(tokenId_ != 0, \"ERC3525: cannot mint zero tokenId\");\r\n        require(!_exists(tokenId_), \"ERC3525: token already minted\");\r\n\r\n        _beforeValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\r\n        __mintToken(to_, tokenId_, slot_);\r\n        __mintValue(tokenId_, value_);\r\n        _afterValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\r\n    }\r\n\r\n    function _mintValue(uint256 tokenId_, uint256 value_) internal virtual {\r\n        address owner = ERC3525.ownerOf(tokenId_);\r\n        uint256 slot = ERC3525.slotOf(tokenId_);\r\n        _beforeValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\r\n        __mintValue(tokenId_, value_);\r\n        _afterValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\r\n    }\r\n\r\n    function __mintValue(uint256 tokenId_, uint256 value_) private {\r\n        _allTokens[_allTokensIndex[tokenId_]].balance += value_;\r\n        emit TransferValue(0, tokenId_, value_);\r\n    }\r\n\r\n    function __mintToken(address to_, uint256 tokenId_, uint256 slot_) private {\r\n        TokenData memory tokenData = TokenData({\r\n            id: tokenId_,\r\n            slot: slot_,\r\n            balance: 0,\r\n            owner: to_,\r\n            approved: address(0),\r\n            valueApprovals: new address[](0)\r\n        });\r\n\r\n        _addTokenToAllTokensEnumeration(tokenData);\r\n        _addTokenToOwnerEnumeration(to_, tokenId_);\r\n\r\n        emit Transfer(address(0), to_, tokenId_);\r\n        emit SlotChanged(tokenId_, 0, slot_);\r\n    }\r\n\r\n    function _burn(uint256 tokenId_) internal virtual {\r\n        _requireMinted(tokenId_);\r\n\r\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\r\n        address owner = tokenData.owner;\r\n        uint256 slot = tokenData.slot;\r\n        uint256 value = tokenData.balance;\r\n\r\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\r\n\r\n        _clearApprovedValues(tokenId_);\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId_);\r\n        _removeTokenFromAllTokensEnumeration(tokenId_);\r\n\r\n        emit TransferValue(tokenId_, 0, value);\r\n        emit SlotChanged(tokenId_, slot, 0);\r\n        emit Transfer(owner, address(0), tokenId_);\r\n\r\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\r\n    }\r\n\r\n    function _burnValue(uint256 tokenId_, uint256 burnValue_) internal virtual {\r\n        _requireMinted(tokenId_);\r\n\r\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\r\n        address owner = tokenData.owner;\r\n        uint256 slot = tokenData.slot;\r\n        uint256 value = tokenData.balance;\r\n\r\n        require(value >= burnValue_, \"ERC3525: burn value exceeds balance\");\r\n\r\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\r\n\r\n        tokenData.balance -= burnValue_;\r\n        emit TransferValue(tokenId_, 0, burnValue_);\r\n\r\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to_, uint256 tokenId_) private {\r\n        _allTokens[_allTokensIndex[tokenId_]].owner = to_;\r\n\r\n        _addressData[to_].ownedTokensIndex[tokenId_] = _addressData[to_].ownedTokens.length;\r\n        _addressData[to_].ownedTokens.push(tokenId_);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from_, uint256 tokenId_) private {\r\n        _allTokens[_allTokensIndex[tokenId_]].owner = address(0);\r\n\r\n        AddressData storage ownerData = _addressData[from_];\r\n        uint256 lastTokenIndex = ownerData.ownedTokens.length - 1;\r\n        uint256 lastTokenId = ownerData.ownedTokens[lastTokenIndex];\r\n        uint256 tokenIndex = ownerData.ownedTokensIndex[tokenId_];\r\n\r\n        ownerData.ownedTokens[tokenIndex] = lastTokenId;\r\n        ownerData.ownedTokensIndex[lastTokenId] = tokenIndex;\r\n\r\n        delete ownerData.ownedTokensIndex[tokenId_];\r\n        ownerData.ownedTokens.pop();\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(TokenData memory tokenData_) private {\r\n        _allTokensIndex[tokenData_.id] = _allTokens.length;\r\n        _allTokens.push(tokenData_);\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId_) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId_];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        TokenData memory lastTokenData = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenData; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenData.id] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId_];\r\n        _allTokens.pop();\r\n    }\r\n\r\n    function _approve(address to_, uint256 tokenId_) internal virtual {\r\n        _allTokens[_allTokensIndex[tokenId_]].approved = to_;\r\n        emit Approval(ERC3525.ownerOf(tokenId_), to_, tokenId_);\r\n    }\r\n\r\n    function _approveValue(uint256 tokenId_, address to_, uint256 value_) internal virtual {\r\n        require(to_ != address(0), \"ERC3525: approve value to the zero address\");\r\n        if (!_existApproveValue(to_, tokenId_)) {\r\n            _allTokens[_allTokensIndex[tokenId_]].valueApprovals.push(to_);\r\n        }\r\n        _approvedValues[tokenId_][to_] = value_;\r\n\r\n        emit ApprovalValue(tokenId_, to_, value_);\r\n    }\r\n\r\n    function _clearApprovedValues(uint256 tokenId_) internal virtual {\r\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\r\n        uint256 length = tokenData.valueApprovals.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address approval = tokenData.valueApprovals[i];\r\n            delete _approvedValues[tokenId_][approval];\r\n        }\r\n        delete tokenData.valueApprovals;\r\n    }\r\n\r\n    function _existApproveValue(address to_, uint256 tokenId_) internal view virtual returns (bool) {\r\n        uint256 length = _allTokens[_allTokensIndex[tokenId_]].valueApprovals.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (_allTokens[_allTokensIndex[tokenId_]].valueApprovals[i] == to_) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _transferValue(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) internal virtual {\r\n        require(_exists(fromTokenId_), \"ERC3525: transfer from invalid token ID\");\r\n        require(_exists(toTokenId_), \"ERC3525: transfer to invalid token ID\");\r\n\r\n        TokenData storage fromTokenData = _allTokens[_allTokensIndex[fromTokenId_]];\r\n        TokenData storage toTokenData = _allTokens[_allTokensIndex[toTokenId_]];\r\n\r\n        require(fromTokenData.balance >= value_, \"ERC3525: insufficient balance for transfer\");\r\n        require(fromTokenData.slot == toTokenData.slot, \"ERC3525: transfer to token with different slot\");\r\n\r\n        _beforeValueTransfer(\r\n            fromTokenData.owner, toTokenData.owner, fromTokenId_, toTokenId_, fromTokenData.slot, value_\r\n        );\r\n\r\n        fromTokenData.balance -= value_;\r\n        toTokenData.balance += value_;\r\n\r\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\r\n\r\n        _afterValueTransfer(\r\n            fromTokenData.owner, toTokenData.owner, fromTokenId_, toTokenId_, fromTokenData.slot, value_\r\n        );\r\n\r\n        require(\r\n            _checkOnERC3525Received(fromTokenId_, toTokenId_, value_, \"\"),\r\n            \"ERC3525: transfer rejected by ERC3525Receiver\"\r\n        );\r\n    }\r\n\r\n    function _transferTokenId(address from_, address to_, uint256 tokenId_) internal virtual {\r\n        require(ERC3525.ownerOf(tokenId_) == from_, \"ERC3525: transfer from invalid owner\");\r\n        require(to_ != address(0), \"ERC3525: transfer to the zero address\");\r\n\r\n        uint256 slot = ERC3525.slotOf(tokenId_);\r\n        uint256 value = ERC3525.balanceOf(tokenId_);\r\n\r\n        _beforeValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\r\n\r\n        _approve(address(0), tokenId_);\r\n        _clearApprovedValues(tokenId_);\r\n\r\n        _removeTokenFromOwnerEnumeration(from_, tokenId_);\r\n        _addTokenToOwnerEnumeration(to_, tokenId_);\r\n\r\n        emit Transfer(from_, to_, tokenId_);\r\n\r\n        _afterValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\r\n    }\r\n\r\n    function _safeTransferTokenId(address from_, address to_, uint256 tokenId_, bytes memory data_) internal virtual {\r\n        _transferTokenId(from_, to_, tokenId_);\r\n        require(_checkOnERC721Received(from_, to_, tokenId_, data_), \"ERC3525: transfer to non ERC721Receiver\");\r\n    }\r\n\r\n    function _checkOnERC3525Received(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_, bytes memory data_)\r\n        private\r\n        returns (bool)\r\n    {\r\n        address to = ERC3525.ownerOf(toTokenId_);\r\n        if (to.isContract() && IERC165(to).supportsInterface(type(IERC3525Receiver).interfaceId)) {\r\n            bytes4 retval =\r\n                IERC3525Receiver(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_);\r\n            return retval == IERC3525Receiver.onERC3525Received.selector;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from_ address representing the previous owner of the given token ID\r\n     * @param to_ target address that will receive the tokens\r\n     * @param tokenId_ uint256 ID of the token to be transferred\r\n     * @param data_ bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from_, address to_, uint256 tokenId_, bytes memory data_)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (to_.isContract()) {\r\n            try IERC721Receiver(to_).onERC721Received(_msgSender(), from_, tokenId_, data_) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* solhint-disable */\r\n    function _beforeValueTransfer(\r\n        address from_,\r\n        address to_,\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 slot_,\r\n        uint256 value_\r\n    ) internal virtual {}\r\n\r\n    function _afterValueTransfer(\r\n        address from_,\r\n        address to_,\r\n        uint256 fromTokenId_,\r\n        uint256 toTokenId_,\r\n        uint256 slot_,\r\n        uint256 value_\r\n    ) internal virtual {}\r\n    /* solhint-enable */\r\n\r\n    function _setMetadataDescriptor(address metadataDescriptor_) internal virtual {\r\n        metadataDescriptor = IERC3525MetadataDescriptor(metadataDescriptor_);\r\n        emit SetMetadataDescriptor(metadataDescriptor_);\r\n    }\r\n\r\n    function _createOriginalTokenId() internal virtual returns (uint256) {\r\n        _tokenIdGenerator.increment();\r\n        return _tokenIdGenerator.current();\r\n    }\r\n\r\n    function _createDerivedTokenId(uint256 fromTokenId_) internal virtual returns (uint256) {\r\n        fromTokenId_;\r\n        return _createOriginalTokenId();\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.7.3\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/IPlatformSFT.sol\r\n\r\n//\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPlatformSFT {\r\n    function mint(address mintTo_, uint256 slot_, uint256 value_) external returns (uint256);\r\n\r\n    function mintValue(uint256 tokenId_, uint256 value_) external;\r\n\r\n    // function burn(uint256 tokenId_) external; // to avoid exceed size\r\n\r\n    function burnValue(uint256 tokenId_, uint256 burnValue_) external;\r\n}\r\n\r\n\r\n// File contracts/pools/Pool.sol\r\n\r\n// \r\npragma solidity ^0.8.0;\r\nabstract contract Pool {\r\n    address public platform;\r\n\r\n    // Processing second bookkeeping and sub-ledgers\r\n    function distributeFT(address ft, uint64 mainType, uint64 subType, address player, uint256 amount)\r\n        external\r\n        virtual;\r\n\r\n    modifier onlyPlatform() {\r\n        require(msg.sender == platform, \"Not granted\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Roles.sol\r\n\r\n// \r\npragma solidity >0.8.0;\r\ncontract Roles is AccessControl {\r\n    error NotAuthorizedError(address sender);\r\n\r\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\r\n\r\n    constructor(address _owner) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n            revert NotAuthorizedError(_msgSender());\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        if (!hasRole(MANAGER_ROLE, _msgSender())) {\r\n            revert NotAuthorizedError(_msgSender());\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/PlatformSFT.sol\r\n\r\n//\r\n\r\npragma solidity ^0.8.0;\r\ninterface IPayment {\r\n    function payment(uint64 mainType) external view returns (address);\r\n}\r\n\r\n// Ownable is designed to conform to OpenSea's presentation standards and facilitate the import\r\ncontract PlatformSFT is IPlatformSFT, ERC3525, Pool, Ownable {\r\n    // slot => totalSupply\r\n    mapping(uint256 => uint256) public totalShare; // share\r\n\r\n    mapping(uint64 => uint256) public totalFT; // USDT\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, address platform_)\r\n        ERC3525(name_, symbol_, decimals_)\r\n    {\r\n        platform = platform_;\r\n    }\r\n\r\n    function mint(address mintTo_, uint256 slot_, uint256 value_) external onlyPlatform returns (uint256) {\r\n        uint256 tokenId_ = _createOriginalTokenId();\r\n        ERC3525._mint(mintTo_, tokenId_, slot_, value_);\r\n        totalShare[slot_] += value_;\r\n        return tokenId_;\r\n    }\r\n\r\n    function mintValue(uint256 tokenId_, uint256 value_) external onlyPlatform {\r\n        uint256 slot = ERC3525.slotOf(tokenId_);\r\n        totalShare[slot] += value_;\r\n        ERC3525._mintValue(tokenId_, value_);\r\n    }\r\n\r\n    function burnValue(uint256 tokenId_, uint256 burnValue_) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: caller is not token owner nor approved\");\r\n        ERC3525._burnValue(tokenId_, burnValue_);\r\n        // platformSFT itself is a sharePool for all kind (mainType) of games\r\n        // query FT of this slot, than transfer FT.\r\n        // FT transfer to ownerOf tokenId_ ??? or to approved msg.sender ???\r\n        uint64 slot = uint64(ERC3525.slotOf(tokenId_));\r\n\r\n        IERC20 FT = IERC20(IPayment(platform).payment(slot));\r\n        // FT.transfer(_msgSender(), FT.balanceOf(address(this)) * burnValue_ / totalSupply[slot]);\r\n        uint256 ftAmount = totalFT[slot] * burnValue_ / totalShare[slot];\r\n        FT.transfer(_msgSender(), ftAmount);\r\n        totalFT[slot] -= ftAmount;\r\n        totalShare[slot] -= burnValue_;\r\n    }\r\n\r\n    // mainType => distributeImpl\r\n    mapping(uint64 => address) public distributeImpls;\r\n\r\n    event ConfigDistributeImpl(uint64 mainType, address impl);\r\n\r\n    function configDistributeImpl(uint64 mainType, address impl) external onlyOwner {\r\n        // require(distributeImpls[mainType] == address(0), \"Already Configured\"); // comment out to avoid mistake\r\n        // require(impl != address(0), \"Zero address\"); // comment out to allow zero address\r\n        distributeImpls[mainType] = impl;\r\n        emit ConfigDistributeImpl(mainType, impl);\r\n    }\r\n\r\n    function distributeFT(address FT, uint64 mainType, uint64 subType, address player, uint256 amount)\r\n        external\r\n        override\r\n        onlyPlatform\r\n    {\r\n        totalFT[mainType] += amount;\r\n\r\n        address impl = distributeImpls[mainType];\r\n        if (impl != address(0)) {\r\n            Pool(impl).distributeFT(FT, mainType, subType, player, amount);\r\n        }\r\n    }\r\n\r\n    function setMetadataDescriptor(address _descriptor) external onlyOwner {\r\n        ERC3525._setMetadataDescriptor(_descriptor);\r\n    }\r\n\r\n    mapping(address => bool) public allowedApprove;\r\n\r\n    event ConfigAllowedApprove(address addr, bool approved);\r\n\r\n    function configAllowedApprove(address addr, bool approved) external onlyOwner {\r\n        allowedApprove[addr] = approved;\r\n        emit ConfigAllowedApprove(addr, approved);\r\n    }\r\n\r\n    function _approve(address to_, uint256 tokenId_) internal override {\r\n        require(allowedApprove[to_], \"Forbidden to approve\");\r\n        ERC3525._approve(to_, tokenId_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"platform_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApprovalValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ConfigAllowedApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"mainType\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"ConfigDistributeImpl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"metadataDescriptor\",\"type\":\"address\"}],\"name\":\"SetMetadataDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_oldSlot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newSlot\",\"type\":\"uint256\"}],\"name\":\"SlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferValue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnValue_\",\"type\":\"uint256\"}],\"name\":\"burnValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"configAllowedApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"mainType\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"configDistributeImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"FT\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"mainType\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"subType\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"distributeImpls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataDescriptor\",\"outputs\":[{\"internalType\":\"contract IERC3525MetadataDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintTo_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"mintValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"setMetadataDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"slotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"}],\"name\":\"slotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"totalFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PlatformSFT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000060000000000000000000000008dddfa63a0a175bd90c00a67364bbcf4fe2a66ee000000000000000000000000000000000000000000000000000000000000000758204c75636b7900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000758204c75636b7900000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e0dbb062df555b1b133a4a221cfc6b59a69d49933df0dea13f4cd075002b0ef"}