{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/unboxing/Unboxer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface IPrize is IERC721 {\\n    function exists(uint256 tokenId) external returns (bool);\\n\\n    function mintById(address to, uint256 tokenId) external;\\n}\\n\\ninterface IBox is IERC721 {\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\n/**\\n * @title Unboxer\\n * @notice Contract for unboxing ERC721 tokens\\n */\\ncontract Unboxer is Ownable, IERC165 {\\n    error TranferringAlreadyInDesiredState();\\n    error TransferringNotActive();\\n    error PrizeAlreadyMinted();\\n    error NotBoxOwner();\\n    error UnboxingDelayNotPassed();\\n    error BoxAlreadyTransferred();\\n    error BoxNotTransferred();\\n    error BoxAlreadyUnboxed();\\n\\n    event BoxTransferred(uint256 indexed boxId, address indexed owner);\\n    event PrizeUnboxed(\\n        uint256 indexed boxId, uint256 indexed prizeId, address indexed prizeRecipient, address boxOwner\\n    );\\n    event TransferringActiveChange(bool unboxingActive);\\n    event UnboxingDelayChange(uint256 oldDelay, uint256 newDelay);\\n\\n    struct BoxStorage {\\n        // Mapping from owner to list of owned token IDs\\n        mapping(address => uint256[]) ownedTokens;\\n        // Mapping from token ID to index of the owner tokens list\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        // Array with all token ids, used for enumeration\\n        uint256[] allTokens;\\n        // Mapping from token id to position in the allTokens array\\n        mapping(uint256 => uint256) allTokensIndex;\\n        // Mapping from token id to block number at time of transferring\\n        mapping(uint256 => uint256) boxTransferBlockstamp;\\n    }\\n\\n    //The ERC-165 identifier for the ERC-173 Ownable standard is 0x7f5828d0\\n    bytes4 private constant INTERFACE_ID_ERC173 = 0x7f5828d0;\\n\\n    bool public transferringActive;\\n    IBox public boxCollection;\\n    IPrize public prizeCollection;\\n    uint256 public unboxingDelay;\\n    uint256 public startingPrizeId;\\n    mapping(uint256 => bool) isBoxUnboxed;\\n\\n    BoxStorage private boxes;\\n\\n    constructor(\\n        address _owner,\\n        address _boxCollection,\\n        address _prizeCollection,\\n        uint256 _unboxingDelay,\\n        uint256 _startingPrizeId\\n    ) {\\n        _transferOwnership(_owner);\\n        boxCollection = IBox(_boxCollection);\\n        prizeCollection = IPrize(_prizeCollection);\\n        unboxingDelay = _unboxingDelay;\\n        startingPrizeId = _startingPrizeId;\\n    }\\n\\n    function setTransferringActive(bool _active) public onlyOwner {\\n        if (_active == transferringActive) {\\n            revert TranferringAlreadyInDesiredState();\\n        }\\n        transferringActive = _active;\\n        emit TransferringActiveChange(_active);\\n    }\\n\\n    function setUnboxingDelay(uint256 _unboxingDelay) public onlyOwner {\\n        emit UnboxingDelayChange(unboxingDelay, _unboxingDelay);\\n        unboxingDelay = _unboxingDelay;\\n    }\\n\\n    /**\\n     * @dev Called after giving approval to the Unboxer.\\n     * This method transfers a box from the _msgSender it into the Unboxer's custody\\n     */\\n    function transfer(uint256 _boxId) public {\\n        address from = _msgSender();\\n\\n        boxCollection.transferFrom(from, address(this), _boxId);\\n\\n        _onTransfer(_boxId, from);\\n    }\\n\\n    function onERC721Received(address, address from, uint256 _boxId, bytes calldata) public returns (bytes4) {\\n        if (boxCollection.ownerOf(_boxId) != address(this)) {\\n            revert BoxNotTransferred();\\n        }\\n\\n        _onTransfer(_boxId, from);\\n\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev Called by the user to burn the box and mint the new prize\\n     */\\n    function unbox(uint256 _boxId, address _recipient) public {\\n        address sender = _msgSender();\\n\\n        uint256 prizeId = startingPrizeId + _boxId;\\n       \\n        if (prizeCollection.exists(prizeId)) {\\n            revert PrizeAlreadyMinted();\\n        }\\n        if (!isBoxOwner(sender, _boxId)) {\\n            revert NotBoxOwner();\\n        }\\n        if (!hasUnboxingDelayPassed(_boxId)) {\\n            revert UnboxingDelayNotPassed();\\n        }\\n\\n        _removeBoxFromAllTokensEnumeration(_boxId);\\n        _removeBoxFromOwnerEnumeration(sender, _boxId);\\n\\n        isBoxUnboxed[_boxId] = true;\\n\\n        prizeCollection.mintById(_recipient, prizeId);\\n\\n        emit PrizeUnboxed(_boxId, prizeId, _recipient, sender);\\n    }\\n\\n    function isBoxOwner(address _account, uint256 _boxId) public view returns (bool) {\\n        if (boxes.ownedTokens[_account].length == 0) {\\n            return false;\\n        }\\n\\n        return boxes.ownedTokens[_account][boxes.ownedTokensIndex[_boxId]] == _boxId;\\n    }\\n\\n    function isBoxTransferred(uint256 _boxId) public view returns (bool) {\\n        if (boxes.allTokens.length == 0) {\\n            return false;\\n        }\\n\\n        return boxes.allTokens[boxes.allTokensIndex[_boxId]] == _boxId;\\n    }\\n\\n    function canUnbox(uint256 _boxId) public view returns (bool) {\\n        if (!isBoxTransferred(_boxId)) {\\n            return false;\\n        }\\n\\n        return hasUnboxingDelayPassed(_boxId);\\n    }\\n\\n    function hasUnboxingDelayPassed(uint256 _boxId) public view returns (bool) {\\n        return boxes.boxTransferBlockstamp[_boxId] + unboxingDelay <= block.number;\\n    }\\n\\n    function enumerateBoxes(uint256 start, uint256 count) public view returns (uint256[] memory ids, uint256 total) {\\n        uint256 length = boxes.allTokens.length;\\n        if (start + count > length) {\\n            count = length - start;\\n        }\\n\\n        ids = new uint256[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            ids[i] = boxes.allTokens[start + i];\\n        }\\n\\n        return (ids, length);\\n    }\\n\\n    function enumerateBoxesOfOwner(address account, uint256 start, uint256 count)\\n        public\\n        view\\n        returns (uint256[] memory ids, uint256 total)\\n    {\\n        uint256 length = boxes.ownedTokens[account].length;\\n        if (start + count > length) {\\n            count = length - start;\\n        }\\n\\n        ids = new uint256[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            ids[i] = boxes.ownedTokens[account][start + i];\\n        }\\n\\n        return (ids, length);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return interfaceId == type(IERC721Receiver).interfaceId || interfaceId == INTERFACE_ID_ERC173;\\n    }\\n\\n    function _onTransfer(uint256 _boxId, address from) private {\\n        if (!transferringActive) {\\n            revert TransferringNotActive();\\n        }\\n\\n        uint256 prizeId = startingPrizeId + _boxId;\\n       \\n        if (prizeCollection.exists(prizeId)) {\\n            revert PrizeAlreadyMinted();\\n        }\\n\\n        if (isBoxUnboxed[_boxId]) {\\n            revert BoxAlreadyUnboxed();\\n        }\\n\\n        boxes.allTokens.push(_boxId);\\n        boxes.allTokensIndex[_boxId] = boxes.allTokens.length - 1;\\n\\n        boxes.ownedTokens[from].push(_boxId);\\n        boxes.ownedTokensIndex[_boxId] = boxes.ownedTokens[from].length - 1;\\n\\n        boxes.boxTransferBlockstamp[_boxId] = block.number;\\n\\n        emit BoxTransferred(_boxId, from);\\n    }\\n\\n    function _removeBoxFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = boxes.allTokens.length - 1;\\n        uint256 tokenIndex = boxes.allTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = boxes.allTokens[lastTokenIndex];\\n\\n            boxes.allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            boxes.allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete boxes.allTokensIndex[tokenId];\\n        boxes.allTokens.pop();\\n    }\\n\\n    function _removeBoxFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = boxes.ownedTokens[from].length - 1;\\n        uint256 tokenIndex = boxes.ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = boxes.ownedTokens[from][lastTokenIndex];\\n\\n            boxes.ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            boxes.ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete boxes.ownedTokensIndex[tokenId];\\n        boxes.ownedTokens[from].pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boxCollection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizeCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unboxingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrizeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BoxAlreadyTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoxAlreadyUnboxed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoxNotTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBoxOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrizeAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TranferringAlreadyInDesiredState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferringNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnboxingDelayNotPassed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BoxTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boxOwner\",\"type\":\"address\"}],\"name\":\"PrizeUnboxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unboxingActive\",\"type\":\"bool\"}],\"name\":\"TransferringActiveChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"UnboxingDelayChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"boxCollection\",\"outputs\":[{\"internalType\":\"contract IBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"}],\"name\":\"canUnbox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"enumerateBoxes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"enumerateBoxesOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"}],\"name\":\"hasUnboxingDelayPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"}],\"name\":\"isBoxOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"}],\"name\":\"isBoxTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeCollection\",\"outputs\":[{\"internalType\":\"contract IPrize\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setTransferringActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unboxingDelay\",\"type\":\"uint256\"}],\"name\":\"setUnboxingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingPrizeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferringActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boxId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unboxingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Unboxer", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000034d6631240697c4bfd348f977ca4f1e5af3c03a9000000000000000000000000babf4b68abc18e703440e50e1ed19eee26353b5f00000000000000000000000090c45bb702384812825da4971054fdb6836582a000000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000001a5a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}