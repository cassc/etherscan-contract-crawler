{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Partial interface of the ERC20 standard according to the needs of the e2p contract.\r\n */\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract Bridge is Ownable {\r\n    event NewDeposit(uint256 depositId, uint256 amount, address userAddress);\r\n\r\n    uint256 _depositsNumber;\r\n    uint256 _creditsNumber;\r\n    uint256 _fee;\r\n    uint256 _totalFee;\r\n\r\n    address _manager; // address for sending unlock transactions\r\n\r\n    struct Deposit {\r\n        uint256 depositId;\r\n        uint256 amount;\r\n        address userAddress;\r\n        uint256 fee;\r\n        uint256 time;\r\n    }\r\n    struct Credit {\r\n        uint256 creditId;\r\n        uint256 amount;\r\n        address userAddress;\r\n        uint256 time;\r\n    }\r\n    mapping (uint256 => Deposit) _deposits;\r\n    mapping (uint256 => Credit) _credits;\r\n    IERC20 _etnaContract;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyManager() {\r\n        require(_manager == _msgSender(), \"Caller is not the manager\");\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address tokenAddress,\r\n        address newOwner,\r\n        address newManager,\r\n        uint256 fee\r\n    ) {\r\n        require(tokenAddress != address(0), 'Token address can not be zero');\r\n        require(newManager != address(0), 'Manager address can not be zero');\r\n        require(newOwner != address(0), 'Owner address can not be zero');\r\n\r\n        _etnaContract = IERC20(tokenAddress);\r\n        transferOwnership(newOwner);\r\n        _manager = newManager;\r\n        _fee = fee;\r\n    }\r\n\r\n    function depositTokens (uint256 amount) external returns (bool) {\r\n        require(_etnaContract.transferFrom(msg.sender, address(this), amount + _fee),\r\n            'ETNA payment failed, please check ETNA balance and allowance for this contract address');\r\n        _depositsNumber++;\r\n        Deposit memory depositInstance = Deposit({\r\n            depositId: _depositsNumber,\r\n            amount: amount,\r\n            userAddress: msg.sender,\r\n            fee: _fee,\r\n            time: block.timestamp\r\n        });\r\n        _deposits[_depositsNumber] = depositInstance;\r\n        _totalFee += _fee;\r\n        emit NewDeposit(depositInstance.depositId, amount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function addCredit (address userAddress, uint256 amount, uint256 depositId) external onlyManager returns (bool) {\r\n        require(depositId == _creditsNumber + 1, 'Gap in credits records is not allowed');\r\n        Credit memory creditInstance = Credit({\r\n            creditId: depositId,\r\n            amount: amount,\r\n            userAddress: userAddress,\r\n            time: block.timestamp\r\n        });\r\n        _creditsNumber = depositId;\r\n        _credits[_creditsNumber] = creditInstance;\r\n        require(_etnaContract.transfer(userAddress, amount), 'ETNA payment failed');\r\n        return true;\r\n    }\r\n\r\n    function withdrawAdmin (uint256 amount) external onlyOwner returns (bool) {\r\n        require(_etnaContract.transfer(msg.sender, amount),\r\n            'ETNA withdraw failed');\r\n        return true;\r\n    }\r\n\r\n    function getTotalFee () external view returns (uint256) {\r\n        return _totalFee;\r\n    }\r\n\r\n    function getDepositsNumber () external view returns (uint256) {\r\n        return _depositsNumber;\r\n    }\r\n\r\n    function getDepositData (uint256 depositId) external view returns (uint256, address, uint256, uint256) {\r\n        return (\r\n            _deposits[depositId].amount,\r\n            _deposits[depositId].userAddress,\r\n            _deposits[depositId].fee,\r\n            _deposits[depositId].time\r\n        );\r\n    }\r\n\r\n    function getCreditsNumber () external view returns (uint256) {\r\n        return _creditsNumber;\r\n    }\r\n\r\n    function getCreditData (uint256 creditId) external view returns (uint256, address, uint256) {\r\n        return (\r\n            _credits[creditId].amount,\r\n            _credits[creditId].userAddress,\r\n            _credits[creditId].time\r\n        );\r\n    }\r\n\r\n    function getManager () external view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    function setManager (address managerAddress) external onlyOwner returns (bool) {\r\n        _manager = managerAddress;\r\n        return true;\r\n    }\r\n\r\n    function getFee () external view returns (uint256) {\r\n        return _fee;\r\n    }\r\n\r\n    function setFee (uint256 amount) external onlyOwner returns (bool) {\r\n        _fee = amount;\r\n        return true;\r\n    }\r\n\r\n    function getEtnaContract () external view returns (address) {\r\n        return address(_etnaContract);\r\n    }\r\n\r\n    function setEtnaContract (address tokenAddress) external onlyOwner returns (bool) {\r\n        require(tokenAddress != address(0), 'Token address can not be zero');\r\n        _etnaContract = IERC20(tokenAddress);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"addCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creditId\",\"type\":\"uint256\"}],\"name\":\"getCreditData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtnaContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setEtnaContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000015c425f6dfabc31e1464cc4339954339f096061000000000000000000000000ebfb288d442809f1ba8aa8106fcf2dde5d82c02c00000000000000000000000042594798685dc9090e377ec02df97301d6e8a75d0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b270cc0596af3ad4561661d1ea201916398960a2c2923cdb67ef51821893f23"}