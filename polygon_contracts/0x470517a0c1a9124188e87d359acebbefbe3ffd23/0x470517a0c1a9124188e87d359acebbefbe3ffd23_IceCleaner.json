{"SourceCode": "{\"AccessController.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG----\\n\\npragma solidity ^0.8.13;\\n\\ncontract AccessController {\\n\\n    address public ceoAddress;\\n    mapping (address =\\u003e bool) public isWorker;\\n\\n    event CEOSet(\\n        address newCEO\\n    );\\n\\n    event WorkerAdded(\\n        address newWorker\\n    );\\n\\n    event WorkerRemoved(\\n        address existingWorker\\n    );\\n\\n    constructor() {\\n\\n        address creator = msg.sender;\\n        ceoAddress = creator;\\n        isWorker[creator] = true;\\n\\n        emit CEOSet(\\n            creator\\n        );\\n\\n        emit WorkerAdded(\\n            creator\\n        );\\n    }\\n\\n    modifier onlyCEO() {\\n        require(\\n            msg.sender == ceoAddress,\\n            \\\"AccessControl: CEO_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker() {\\n        require(\\n            isWorker[msg.sender] == true,\\n            \\\"AccessControl: WORKER_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(\\n        address checkingAddress\\n    ) {\\n        require(\\n            checkingAddress != address(0x0),\\n            \\\"AccessControl: INVALID_ADDRESS\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCEO(\\n        address _newCEO\\n    )\\n        external\\n        nonZeroAddress(_newCEO)\\n        onlyCEO\\n    {\\n        ceoAddress = _newCEO;\\n\\n        emit CEOSet(\\n            ceoAddress\\n        );\\n    }\\n\\n    function addWorker(\\n        address _newWorker\\n    )\\n        external\\n        onlyCEO\\n    {\\n        _addWorker(\\n            _newWorker\\n        );\\n    }\\n\\n    function addWorkerBulk(\\n        address[] calldata _newWorkers\\n    )\\n        external\\n        onlyCEO\\n    {\\n        for (uint8 index = 0; index \\u003c _newWorkers.length; index++) {\\n            _addWorker(_newWorkers[index]);\\n        }\\n    }\\n\\n    function _addWorker(\\n        address _newWorker\\n    )\\n        internal\\n        nonZeroAddress(_newWorker)\\n    {\\n        require(\\n            isWorker[_newWorker] == false,\\n            \\u0027AccessControl: worker already exist\\u0027\\n        );\\n\\n        isWorker[_newWorker] = true;\\n\\n        emit WorkerAdded(\\n            _newWorker\\n        );\\n    }\\n\\n    function removeWorker(\\n        address _existingWorker\\n    )\\n        external\\n        onlyCEO\\n    {\\n        _removeWorker(\\n            _existingWorker\\n        );\\n    }\\n\\n    function removeWorkerBulk(\\n        address[] calldata _workerArray\\n    )\\n        external\\n        onlyCEO\\n    {\\n        for (uint8 index = 0; index \\u003c _workerArray.length; index++) {\\n            _removeWorker(_workerArray[index]);\\n        }\\n    }\\n\\n    function _removeWorker(\\n        address _existingWorker\\n    )\\n        internal\\n        nonZeroAddress(_existingWorker)\\n    {\\n        require(\\n            isWorker[_existingWorker] == true,\\n            \\\"AccessControl: worker not detected\\\"\\n        );\\n\\n        isWorker[_existingWorker] = false;\\n\\n        emit WorkerRemoved(\\n            _existingWorker\\n        );\\n    }\\n}\\n\"},\"CleanEvents.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG---\\n\\npragma solidity ^0.8.13;\\n\\ncontract CleanEvents {\\n\\n    event Cleaning(\\n        uint256 indexed tokenId,\\n        address indexed tokenAddress,\\n        address indexed playerAddress,\\n        uint256 pointsAmount\\n    );\\n\\n    event Purchased(\\n        uint256 indexed tokenId,\\n        address indexed tokenAddress,\\n        address indexed playerAddress,\\n        uint256 pointsAmount\\n    );\\n}\\n\"},\"IceCleaner.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG---\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AccessController.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"./CleanEvents.sol\\\";\\n\\ninterface RegistrantContract {\\n\\n    function getHash(\\n        address _tokenAddress,\\n        uint256 _tokenId\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\\ncontract IceCleaner is AccessController, TransferHelper, CleanEvents {\\n\\n    address public immutable tokenAddressDG;\\n    address public immutable tokenAddressICE;\\n\\n    RegistrantContract public immutable registrantContract;\\n\\n    uint256 public costPerPointDG;\\n    uint256 public costPerPointICE;\\n\\n    address public depositAddressDG;\\n    address public depositAddressICE;\\n\\n    mapping(address =\\u003e uint256) public totalSpent;\\n    mapping(address =\\u003e mapping(bytes32 =\\u003e uint256)) public pointLevel;\\n    mapping(address =\\u003e mapping(bytes32 =\\u003e uint256)) public spentPerNFT;\\n\\n    mapping(uint256 =\\u003e uint256) public pointsBulksDG;\\n    mapping(uint256 =\\u003e uint256) public pointsBulksICE;\\n\\n    constructor(\\n        address _tokenAddressDG,\\n        address _tokenAddressICE,\\n        address _registrantContract\\n    ) {\\n        tokenAddressDG = _tokenAddressDG;\\n        tokenAddressICE = _tokenAddressICE;\\n\\n        registrantContract = RegistrantContract(\\n            _registrantContract\\n        );\\n    }\\n\\n    function buyAndSpendBulk(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _bulkPriceDG,\\n        uint256 _bulkPriceICE\\n    )\\n        external\\n        onlyWorker\\n    {\\n        uint256 totalPointsForDG = pointsBulksDG[_bulkPriceDG];\\n        uint256 totalPointsForICE = pointsBulksICE[_bulkPriceICE];\\n\\n        uint256 totalPoints = totalPointsForDG + totalPointsForICE;\\n\\n        require(\\n            totalPoints \\u003e 0,\\n            \\\"IceCleaner: NO_POINTS\\\"\\n        );\\n\\n        _buyAndSpend(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            totalPoints,\\n            _bulkPriceDG,\\n            _bulkPriceICE\\n        );\\n    }\\n\\n    function buyAndSpend(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _pointsAmount\\n    )\\n        external\\n        onlyWorker\\n    {\\n        uint256 totalPriceDG = costPerPointDG\\n            * _pointsAmount;\\n\\n        uint256 totalPriceICE = costPerPointICE\\n            * _pointsAmount;\\n\\n        _buyAndSpend(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            _pointsAmount,\\n            totalPriceDG,\\n            totalPriceICE\\n        );\\n    }\\n\\n    function _buyAndSpend(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _pointsAmount,\\n        uint256 _totalPriceDG,\\n        uint256 _totalPriceICE\\n    )\\n        internal\\n    {\\n        bytes32 tokenHash = registrantContract.getHash(\\n            _tokenAddress,\\n            _tokenId\\n        );\\n\\n        totalSpent[_playerAddress] =\\n        totalSpent[_playerAddress] + _pointsAmount;\\n\\n        spentPerNFT[_playerAddress][tokenHash] =\\n        spentPerNFT[_playerAddress][tokenHash] + _pointsAmount;\\n\\n        _takePayment(\\n            _totalPriceDG,\\n            _totalPriceICE,\\n            _playerAddress\\n        );\\n\\n        emit Cleaning(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            _pointsAmount\\n        );\\n    }\\n\\n    function buyPoints(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _pointsAmount\\n    )\\n        external\\n        onlyWorker\\n    {\\n        uint256 totalPriceDG = costPerPointDG\\n            * _pointsAmount;\\n\\n        uint256 totalPriceICE = costPerPointICE\\n            * _pointsAmount;\\n\\n        _buyPoints(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            _pointsAmount,\\n            totalPriceDG,\\n            totalPriceICE\\n        );\\n    }\\n\\n    function buyPointsBulk(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _bulkPriceDG,\\n        uint256 _bulkPriceICE\\n    )\\n        external\\n        onlyWorker\\n    {\\n        uint256 totalPointsForDG = pointsBulksDG[_bulkPriceDG];\\n        uint256 totalPointsForICE = pointsBulksICE[_bulkPriceICE];\\n\\n        uint256 totalPoints = totalPointsForDG + totalPointsForICE;\\n\\n        require(\\n            totalPoints \\u003e 0,\\n            \\\"IceCleaner: NO_POINTS\\\"\\n        );\\n\\n        _buyPoints(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            totalPoints,\\n            _bulkPriceDG,\\n            _bulkPriceICE\\n        );\\n    }\\n\\n    function _buyPoints(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _pointsAmount,\\n        uint256 _totalPriceDG,\\n        uint256 _totalPriceICE\\n    )\\n        internal\\n    {\\n        bytes32 tokenHash = registrantContract.getHash(\\n            _tokenAddress,\\n            _tokenId\\n        );\\n\\n        pointLevel[_playerAddress][tokenHash] =\\n        pointLevel[_playerAddress][tokenHash] + _pointsAmount;\\n\\n        _takePayment(\\n            _totalPriceDG,\\n            _totalPriceICE,\\n            _playerAddress\\n        );\\n\\n        emit Purchased(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            _pointsAmount\\n        );\\n    }\\n\\n    function spendPoints(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        address _playerAddress,\\n        uint256 _pointsAmount\\n    )\\n        external\\n        onlyWorker\\n    {\\n        bytes32 tokenHash = registrantContract.getHash(\\n            _tokenAddress,\\n            _tokenId\\n        );\\n\\n        totalSpent[_playerAddress] =\\n        totalSpent[_playerAddress] + _pointsAmount;\\n\\n        spentPerNFT[_playerAddress][tokenHash] =\\n        spentPerNFT[_playerAddress][tokenHash] + _pointsAmount;\\n\\n        pointLevel[_playerAddress][tokenHash] =\\n        pointLevel[_playerAddress][tokenHash] - _pointsAmount;\\n\\n        emit Cleaning(\\n            _tokenId,\\n            _tokenAddress,\\n            _playerAddress,\\n            _pointsAmount\\n        );\\n    }\\n\\n    function _takePayment(\\n        uint256 _dgAmount,\\n        uint256 _iceAmount,\\n        address _playerAddress\\n    )\\n        internal\\n    {\\n        if (_dgAmount \\u003e 0) {\\n            safeTransferFrom(\\n                tokenAddressDG,\\n                _playerAddress,\\n                depositAddressDG,\\n                _dgAmount\\n            );\\n        }\\n\\n        if (_iceAmount \\u003e 0) {\\n            safeTransferFrom(\\n                tokenAddressICE,\\n                _playerAddress,\\n                depositAddressICE,\\n                _iceAmount\\n            );\\n        }\\n    }\\n\\n    function setCostPerPointDG(\\n        uint256 _costPerPointDG\\n    )\\n        external\\n        onlyCEO\\n    {\\n        costPerPointDG = _costPerPointDG;\\n    }\\n\\n    function setCostPerPointICE(\\n        uint256 _costPerPointICE\\n    )\\n        external\\n        onlyCEO\\n    {\\n        costPerPointICE = _costPerPointICE;\\n    }\\n\\n    function setDepositAddressDG(\\n        address _depositAddressDG\\n    )\\n        external\\n        onlyCEO\\n    {\\n        depositAddressDG = _depositAddressDG;\\n    }\\n\\n    function setDepositAddressICE(\\n        address _depositAddressICE\\n    )\\n        external\\n        onlyCEO\\n    {\\n        depositAddressICE = _depositAddressICE;\\n    }\\n\\n    function setPointsBulkDG(\\n        uint256 _bulkPrice,\\n        uint256 _bulkPoints\\n    )\\n        external\\n        onlyCEO\\n    {\\n        pointsBulksDG[_bulkPrice] = _bulkPoints;\\n    }\\n\\n    function setPointsBulkICE(\\n        uint256 _bulkPrice,\\n        uint256 _bulkPoints\\n    )\\n        external\\n        onlyCEO\\n    {\\n        pointsBulksICE[_bulkPrice] = _bulkPoints;\\n    }\\n}\\n\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG----\\n\\npragma solidity ^0.8.13;\\n\\ncontract TransferHelper {\\n\\n    bytes4 private constant TRANSFER = bytes4(\\n        keccak256(\\n            bytes(\\n                \\\"transfer(address,uint256)\\\" // 0xa9059cbb\\n            )\\n        )\\n    );\\n\\n    bytes4 private constant TRANSFER_FROM = bytes4(\\n        keccak256(\\n            bytes(\\n                \\\"transferFrom(address,address,uint256)\\\" // 0x23b872dd\\n            )\\n        )\\n    );\\n\\n    function safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory data) = _token.call(\\n            abi.encodeWithSelector(\\n                TRANSFER, // 0xa9059cbb\\n                _to,\\n                _value\\n            )\\n        );\\n\\n        require(\\n            success \\u0026\\u0026 (\\n                data.length == 0 || abi.decode(\\n                    data, (bool)\\n                )\\n            ),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint _value\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory data) = _token.call(\\n            abi.encodeWithSelector(\\n                TRANSFER_FROM,\\n                _from,\\n                _to,\\n                _value\\n            )\\n        );\\n\\n        require(\\n            success \\u0026\\u0026 (\\n                data.length == 0 || abi.decode(\\n                    data, (bool)\\n                )\\n            ),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddressDG\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddressICE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrantContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"CEOSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsAmount\",\"type\":\"uint256\"}],\"name\":\"Cleaning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsAmount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"WorkerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"existingWorker\",\"type\":\"address\"}],\"name\":\"WorkerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWorker\",\"type\":\"address\"}],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newWorkers\",\"type\":\"address[]\"}],\"name\":\"addWorkerBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pointsAmount\",\"type\":\"uint256\"}],\"name\":\"buyAndSpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bulkPriceDG\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bulkPriceICE\",\"type\":\"uint256\"}],\"name\":\"buyAndSpendBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pointsAmount\",\"type\":\"uint256\"}],\"name\":\"buyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bulkPriceDG\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bulkPriceICE\",\"type\":\"uint256\"}],\"name\":\"buyPointsBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerPointDG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerPointICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAddressDG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAddressICE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pointLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsBulksDG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsBulksICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrantContract\",\"outputs\":[{\"internalType\":\"contract RegistrantContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existingWorker\",\"type\":\"address\"}],\"name\":\"removeWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_workerArray\",\"type\":\"address[]\"}],\"name\":\"removeWorkerBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_costPerPointDG\",\"type\":\"uint256\"}],\"name\":\"setCostPerPointDG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_costPerPointICE\",\"type\":\"uint256\"}],\"name\":\"setCostPerPointICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositAddressDG\",\"type\":\"address\"}],\"name\":\"setDepositAddressDG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositAddressICE\",\"type\":\"address\"}],\"name\":\"setDepositAddressICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bulkPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bulkPoints\",\"type\":\"uint256\"}],\"name\":\"setPointsBulkDG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bulkPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bulkPoints\",\"type\":\"uint256\"}],\"name\":\"setPointsBulkICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pointsAmount\",\"type\":\"uint256\"}],\"name\":\"spendPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"spentPerNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddressDG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddressICE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IceCleaner", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002a93172c8dccbfbc60a39d56183b7279a2f647b4000000000000000000000000c6c855ad634dcdad23e64da71ba85b8c51e5ad7c000000000000000000000000e7a97600ff5b4d19843f9a30a11af627f8d1abc2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab16b80b3f297302cef375056e51e16876712bb5a577c9356aae898cf3d47619"}