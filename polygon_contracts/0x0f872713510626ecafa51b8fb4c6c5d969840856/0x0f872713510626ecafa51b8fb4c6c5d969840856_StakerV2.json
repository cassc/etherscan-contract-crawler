{"SourceCode": "// File: contracts/utils/StringNumbersConstant.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract StringNumbersConstant {\r\n\r\n   // Decimals Numbers\r\n   uint public constant DECIMALS_18 = 1e18;\r\n   uint public constant START_DEPOSIT_LIMIT = DECIMALS_18 * 100; // 100 DAI\r\n\r\n   // Date and times\r\n   uint public constant TIME_7D = 60*60*24*7;\r\n   uint public constant TIME_1D = 60*60*24;\r\n   uint public constant TIME_30D = 60*60*24*30;\r\n   uint public constant TIME_1Y = 60*60*24*365;\r\n   \r\n   // Storage Sizes\r\n   uint public constant STORAGE_1TB_IN_MB = 1048576;\r\n   uint public constant STORAGE_10GB_IN_MB = 10240; // 10 GB;\r\n   uint public constant STORAGE_100GB_IN_MB = 102400; // 100 GB;\r\n  \r\n   // nax blocks after proof depends of network, most of them 256 is ok\r\n   uint public constant MAX_BLOCKS_AFTER_PROOF = 256;\r\n\r\n   // Polygon Network Settigns\r\n   address public constant PAIR_TOKEN_START_ADDRESS = 0x081Ec4c0e30159C8259BAD8F4887f83010a681DC; // DAI in Polygon\r\n   address public constant DEFAULT_FEE_COLLECTOR = 0x5f84192D83A49C2D7Aac6C859a7BDABf18e970b8; // DeNet Labs Polygon Multisig\r\n   uint public constant NETWORK_ID = 137;\r\n\r\n   // StorageToken Default Vars\r\n   uint16 public constant DIV_FEE = 10000;\r\n   uint16 public constant START_PAYOUT_FEE = 500; // 5%\r\n   uint16 public constant START_PAYIN_FEE = 500; // 5%\r\n   uint16 public constant START_MINT_PERCENT = 5000; // 50% from fee will minted\r\n   uint16 public constant START_UNBURN_PERCENT = 5000; // 50% from fee will not burned\r\n}\r\n// File: contracts/interfaces/IContractStorage.sol\r\n\r\n\r\n\r\n/*\r\n    Created by DeNet\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IContractStorage {\r\n\r\n    function stringToContractName(string calldata nameString) external pure returns(bytes32);\r\n\r\n    function getContractAddress(bytes32 contractName, uint networkId) external view returns (address);\r\n\r\n    function getContractAddressViaName(string calldata contractString, uint networkId) external view returns (address);\r\n\r\n    function getContractListOfNetwork(uint networkId) external view returns (string[] memory);\r\n\r\n    function getNetworkLists() external view returns (uint[] memory);\r\n}\r\n// File: contracts/interfaces/IPoSAdmin.sol\r\n\r\n\r\n/*\r\n    Created by DeNet\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPoSAdmin {\r\n    event ChangePoSAddress(\r\n        address indexed newPoSAddress\r\n    );\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IVendamVaribles.sol\r\n\r\n\r\n\r\n/*\r\n    Created by Community Interface for Voting\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IVendamVaribles {\r\n    /**\r\n    * @notice Sets the minimum fee required for renting in WEI.\r\n    * @dev Only the DAO (Decentralized Autonomous Organization) is allowed to invoke this function.\r\n    * @param newFee The new minimum fee value to be set.\r\n    * Requirements:\r\n    * - The new fee must be between 0.0001 ETH (1e14 WEI) and 1 ETH (1e18 WEI).\r\n    */\r\n    function setMinFee(uint256 newFee) external;\r\n\r\n    /**\r\n    * @notice Sets the minimum period of time for renting.\r\n    * @dev Only the DAO is allowed to invoke this function.\r\n    * @param newTime The new minimum rent period value in seconds.\r\n    * Requirements:\r\n    * - The new time must be between 1 hour (3600 seconds) and 30 days (2592000 seconds).\r\n    */\r\n    function setMinRentPeriod(uint256 newTime) external;\r\n\r\n    /**\r\n    * @notice Sets the maximum period of time for renting.\r\n    * @dev Only the DAO is allowed to invoke this function.\r\n    * @param newTime The new maximum rent period value in seconds.\r\n    * Requirements:\r\n    * - The new time must be between 31 days (2678400 seconds) and 1 year (31536000 seconds).\r\n    */\r\n    function setMaxRentPeriod(uint256 newTime) external;\r\n\r\n    /**\r\n    * @notice Sets the minimum interest rate for renting.\r\n    * @dev Only the DAO is allowed to invoke this function.\r\n    * @param newRate The new minimum interest rate value in basis points (0.1% increments).\r\n    * Requirements:\r\n    * - The new rate must be between 10 (0.1%) and 1000 (10%).\r\n    */\r\n    function setMinInterestRate(uint256 newRate) external;\r\n\r\n    /**\r\n    * @notice Sets the maximum interest rate for renting.\r\n    * @dev Only the DAO is allowed to invoke this function.\r\n    * @param newRate The new maximum interest rate value in basis points (0.1% increments).\r\n    * Requirements:\r\n    * - The new rate must be between 5000 (50%) and 100000 (1000%).\r\n    */\r\n    function setMaxInterestRate(uint256 newRate) external;\r\n\r\n    /**\r\n    * @notice Sets the grace fee for late rent payments.\r\n    * @dev Only the DAO is allowed to invoke this function.\r\n    * @param newRate The new grace fee value in basis points (0.1% increments).\r\n    * Requirements:\r\n    * - The new rate must be between 500 (5%) and 3000 (30%).\r\n    */\r\n    function setGraceFee(uint256 newRate) external;\r\n\r\n\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Unsafe.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) public _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"Exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"Decreased allowance < zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"From zero address\");\r\n        require(recipient != address(0), \"To zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"Mint to zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"Burn from zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"Burn exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"Approve from zero address\");\r\n        require(spender != address(0), \"Approve to zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/PoSAdmin.sol\r\n\r\n\r\n/*\r\n    Created by DeNet\r\n\r\n    Contract is modifier only\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract PoSAdmin  is IPoSAdmin, Ownable, StringNumbersConstant {\r\n    address public proofOfStorageAddress = address(0);\r\n    address public storagePairTokenAddress = address(0);\r\n    address public contractStorageAddress;\r\n    address public daoContractAddress;\r\n    address public gasTokenAddress;\r\n    \r\n    constructor (address _contractStorageAddress) {\r\n        contractStorageAddress = _contractStorageAddress;\r\n    }\r\n\r\n    modifier onlyPoS() {\r\n        require(msg.sender == proofOfStorageAddress, \"PoSAdmin.msg.sender != POS\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDAO() {\r\n        require(msg.sender == daoContractAddress, \"PoSAdmin:msg.sender != DAO\");\r\n        _;\r\n    }\r\n\r\n    function changePoS(address _newAddress) public onlyOwner {\r\n        proofOfStorageAddress = _newAddress;\r\n        emit ChangePoSAddress(_newAddress);\r\n    }\r\n\r\n    function sync() public onlyOwner {\r\n        IContractStorage contractStorage = IContractStorage(contractStorageAddress);\r\n        proofOfStorageAddress = contractStorage.getContractAddressViaName(\"proofofstorage\", NETWORK_ID);\r\n        storagePairTokenAddress = contractStorage.getContractAddressViaName(\"pairtoken\", NETWORK_ID);\r\n        daoContractAddress = contractStorage.getContractAddressViaName(\"daowallet\", NETWORK_ID);\r\n        gasTokenAddress = contractStorage.getContractAddressViaName(\"gastoken\", NETWORK_ID);\r\n        emit ChangePoSAddress(proofOfStorageAddress);\r\n        _afterSync();\r\n    }\r\n\r\n    function _afterSync() internal virtual {}\r\n}\r\n// File: contracts/RentGasToken.sol\r\n\r\n\r\n\r\n/*\r\n* Use Rent token to launch Datakeeper\r\n* Deposit to earn from rent.\r\n* This is Turbo Version (work with setup fees)\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract NonTransferToken  {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping (address => uint256) public _balances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual  returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual  returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"Mint to zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"Burn from zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"Burn exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract Renter is NonTransferToken, Ownable {\r\n    constructor ()  NonTransferToken(\"Rented Storage Gastoken\", \"rentedTBY\") {\r\n    }\r\n\r\n    function mint(address account, uint amount) external onlyOwner{\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint amount) external onlyOwner{\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\ncontract VendamVaribles is PoSAdmin, IVendamVaribles {\r\n\r\n    uint256 public  minRentPeriod = 60*60; // 1 hour\r\n    uint256 public  maxRentPeriod = 7776000; // 3 Months\r\n    uint256 public  minInterestRate = 200; // 2%\r\n    uint256 public  maxInterestRate = 100000; // 10x\r\n    uint256 public  minFee = 1e16; // 0.01 TBY\r\n    uint256 public  graceFee = 500; // 5% for close Rent\r\n\r\n    constructor (address _adm) PoSAdmin(_adm) {sync();}\r\n\r\n    // Setup Min Fee for rent in WEI\r\n    function setMinFee(uint256 newFee) external override onlyDAO {\r\n        require(newFee >= 1e14 && newFee <= 1e18, \"setMinFee: newFee < 1e14 or > 1e18\");\r\n        minFee = newFee;\r\n    }\r\n\r\n    // Setup min period of rent (1 hour to 30 days)\r\n    function setMinRentPeriod(uint256 newTime) external override onlyDAO() {\r\n        require(newTime >= 60*60 && newTime <= TIME_30D, \"setMinRentPeriod: not  1 hour < newTime > 30 days\");\r\n        minRentPeriod = newTime;\r\n    }\r\n\r\n    // Setup max period of rent (31 days to 1 year)\r\n    function setMaxRentPeriod(uint256 newTime) external override onlyDAO() {\r\n        require(newTime >= TIME_30D + TIME_1D && newTime <= TIME_1Y, \"setMaxRentPeriod: not  1 hour < newTime > 30 days\");\r\n        maxRentPeriod = newTime;\r\n    }\r\n\r\n    function setMinInterestRate(uint256 newRate) external override onlyDAO() {\r\n        require(newRate >= 10 && newRate <= 1000, \"setMinInterestRate: not in from 0.1% to 10%\");\r\n        minInterestRate = newRate;\r\n    }\r\n\r\n    function setMaxInterestRate(uint256 newRate) external override onlyDAO() {\r\n        require(newRate >= 5000 && newRate <= 100000, \"setMaxInterestRate: not in from 50% to 1000%\");\r\n        maxInterestRate = newRate;\r\n    }\r\n\r\n    function setGraceFee(uint256 newRate) external override onlyDAO() {\r\n        require(newRate >= 500 && newRate <= 3000, \"setGraceFee: not in from 5% to 30%\");\r\n        graceFee = newRate;\r\n    }\r\n}\r\n\r\ncontract StakerV2 is ERC20, VendamVaribles {\r\n\r\n    mapping(address => uint256) private _stakedAmount;\r\n    uint256 public reserve = 0;\r\n    address public rentTokenAddress;\r\n    uint256 public rentCount = 0;\r\n\r\n    struct rentPosition {\r\n        address owner;\r\n        uint256 lockedReserve;\r\n        uint256 graceReward;\r\n        uint256 deadline;\r\n    }\r\n\r\n    // rentId => Rent\r\n    mapping (uint256 => rentPosition) public rentMap;\r\n\r\n    constructor(\r\n        address adminAddress\r\n    ) ERC20(\"Automated Staked Storage GasToken\", \"stakedTBY\") VendamVaribles(adminAddress){\r\n        Renter rent = new Renter();\r\n        rentTokenAddress = address(rent);\r\n        \r\n        // Initial Stake\r\n        reserve = DECIMALS_18;\r\n        _mint(msg.sender, DECIMALS_18);\r\n    }\r\n\r\n    function getRentMapRange(uint _from, uint _to) public view returns (rentPosition[] memory) {\r\n        rentPosition[] memory  _returns;\r\n        for (uint i = _from; i < _to; i++) {\r\n            _returns[i % (_to - _from)] = rentMap[i];\r\n        }\r\n        return _returns;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n    function getInterest(uint _amount, uint rentPeriod) public view returns(uint256) {\r\n        rentPeriod = max(rentPeriod, minRentPeriod);\r\n        rentPeriod = min(maxRentPeriod, rentPeriod);\r\n        IERC20 tok = IERC20(gasTokenAddress);\r\n        uint curBalance = tok.balanceOf(address(this));\r\n        uint borrowed = curBalance - reserve + _amount;\r\n        uint avInterestRate = maxInterestRate - minInterestRate;\r\n        uint interestRate = minInterestRate + (borrowed*uint256(DIV_FEE)*10 / curBalance)*avInterestRate/uint256(DIV_FEE)/10;\r\n        uint interestValue = interestRate * _amount * rentPeriod / TIME_1Y / DIV_FEE;\r\n        return max(interestValue, minFee);\r\n    }\r\n\r\n    function Repay(uint rentId) public {\r\n        rentPosition memory tmpPosition = rentMap[rentId];\r\n        require(tmpPosition.deadline <= block.timestamp, \"Repay: deadline > timestamp\");\r\n    \r\n        // Burn Rented Token\r\n        Renter rentToken = Renter(rentTokenAddress);\r\n        rentToken.burn(tmpPosition.owner, tmpPosition.lockedReserve);  \r\n\r\n        // Unlock Reserve\r\n        _add_reserve(tmpPosition.lockedReserve);\r\n\r\n        // Stake Reward\r\n        _burn(address(this), tmpPosition.graceReward);\r\n        _mint(msg.sender, tmpPosition.graceReward);\r\n        \r\n        // Flash this rent\r\n        rentMap[rentId] = rentPosition(address(0), 0, 0, 0);\r\n        rentMap[rentId] = rentMap[rentCount - 1]; // remove from map (if it last, it will already flashed)\r\n        rentCount -= 1;\r\n    }\r\n\r\n\r\n    function Borrow(uint _amount, uint rentPeriod, uint maxFee) public {\r\n        rentPeriod = max(rentPeriod, minRentPeriod);\r\n        rentPeriod = min(rentPeriod, maxRentPeriod);\r\n\r\n        require(_amount <= reserve, \"Borrow: reserve < _amount\");\r\n        uint feeInterest = getInterest(_amount, rentPeriod);\r\n        require(feeInterest <= maxFee, \"Borrow: maxFee < feeInterest\");\r\n\r\n        IERC20 tok = IERC20(gasTokenAddress);\r\n        uint balanceBefore = tok.balanceOf(address(this));\r\n        tok.transferFrom(msg.sender, address(this), feeInterest);\r\n        uint balanceAfter = tok.balanceOf(address(this));\r\n        uint feeAmount = balanceAfter - balanceBefore;\r\n        require(feeAmount == feeInterest, \"Borrow: wrong feeAmount\");\r\n        // calc grace fee \r\n        uint graceFeeGastoken = graceFee * feeAmount / uint256(DIV_FEE);\r\n        \r\n        // Mint Grace Reward to contract\r\n        uint stakedGraceReward = getStakeReturns(graceFeeGastoken, balanceBefore);\r\n        _mint(address(this), stakedGraceReward);\r\n\r\n        feeAmount = feeAmount - graceFeeGastoken;\r\n        _add_reserve(feeAmount);\r\n        _del_reserve(_amount);\r\n        rentMap[rentCount] = rentPosition(\r\n            msg.sender,\r\n            _amount,\r\n            stakedGraceReward,\r\n            block.timestamp + rentPeriod\r\n        );\r\n        rentCount += 1;\r\n\r\n        Renter rentToken = Renter(rentTokenAddress);\r\n        rentToken.mint(msg.sender, _amount);        \r\n    }\r\n\r\n    function _add_reserve(uint _amount) internal {\r\n        require(_amount > 0, \"_add_reserve: _amount < 0\");\r\n        reserve = reserve + _amount; \r\n    }\r\n\r\n    function _del_reserve(uint _amount) internal {\r\n        require(_amount > 0, \"_del_reserve: _amount < 0\");\r\n        require(reserve >= _amount, \"_del_reserve: reserve < amount\");\r\n        reserve = reserve - _amount;\r\n    }\r\n\r\n    function getStakeReturns(uint _amount, uint _balanceBefore) public view returns(uint256){\r\n        require(_amount > 0, \"getStakeReturns: amount <= 0\");\r\n        require(_balanceBefore > 0, \"getStakeReturns: _balanceBefore <= 0\");\r\n        return totalSupply() * _amount * uint256(DIV_FEE) / _balanceBefore / uint256(DIV_FEE);\r\n    }\r\n\r\n    function getUnstakeAmount(uint _amount) public view returns(uint256) {\r\n        require(_amount <= totalSupply(), \"getUnstakeAmount: amount <= totalSupply\");\r\n        IERC20 tok = IERC20(gasTokenAddress);\r\n        uint currentBalance = tok.balanceOf(address(this));\r\n        return uint256(DIV_FEE) * currentBalance * _amount / totalSupply() / uint256(DIV_FEE);\r\n    }\r\n\r\n    function stake(uint256 _amount) public {\r\n        IERC20 tok = IERC20(gasTokenAddress);\r\n        uint balanceBefore = tok.balanceOf(address(this));\r\n        tok.transferFrom(msg.sender, address(this), _amount);\r\n        uint balanceAfter = tok.balanceOf(address(this));\r\n        uint pushedAmount = balanceAfter - balanceBefore;\r\n        uint mintAmount = getStakeReturns(pushedAmount, balanceBefore);\r\n        _mint(msg.sender, mintAmount);\r\n        _add_reserve(pushedAmount);\r\n    }\r\n\r\n    function unstake(uint _amount) public {\r\n        uint stakerBalance = balanceOf(msg.sender);\r\n        require(stakerBalance >= _amount, \"unstake: _amount < stakerBalance\");\r\n        uint tokAmount =  getUnstakeAmount(_amount);\r\n        require(tokAmount <= reserve, \"unstake: tokAmount > reserve\");\r\n        _del_reserve(tokAmount);\r\n        _burn(msg.sender, _amount);\r\n        IERC20 tok = IERC20(gasTokenAddress);\r\n        tok.transfer(msg.sender, tokAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoSAddress\",\"type\":\"address\"}],\"name\":\"ChangePoSAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS_18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FEE_COLLECTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIV_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BLOCKS_AFTER_PROOF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR_TOKEN_START_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rentId\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_MINT_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_PAYIN_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_PAYOUT_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_UNBURN_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORAGE_100GB_IN_MB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORAGE_10GB_IN_MB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORAGE_1TB_IN_MB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_1D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_1Y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_30D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_7D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changePoS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentPeriod\",\"type\":\"uint256\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getRentMapRange\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"graceReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct StakerV2.rentPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceBefore\",\"type\":\"uint256\"}],\"name\":\"getStakeReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUnstakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"graceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofOfStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"graceReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setGraceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setMaxInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMaxRentPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setMinInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMinRentPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePairTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakerV2", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000b6b309ae66a12d69259566220a2d0e35fe4bc556", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa82d0e2701712086d3b14f0fda6ef77d51d6c1a54fd0816ca290bd98ea655fb"}