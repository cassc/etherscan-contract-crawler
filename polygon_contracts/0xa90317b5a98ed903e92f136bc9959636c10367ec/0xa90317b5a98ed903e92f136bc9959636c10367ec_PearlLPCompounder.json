{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.18;\r\n\r\n// TokenizedStrategy interface used for internal view delegateCalls.\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\r\n *\r\n * _Available since v4.7._\r\n */\r\ninterface IERC4626 is IERC20, IERC20Metadata {\r\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     *\r\n     * - MUST be an ERC-20 token contract.\r\n     * - MUST NOT revert.\r\n     */\r\n    function asset() external view returns (address assetTokenAddress);\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     *\r\n     * - SHOULD include any compounding that occurs from yield.\r\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT revert.\r\n     */\r\n    function totalAssets() external view returns (uint256 totalManagedAssets);\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     *\r\n     * - MUST return a limited value if receiver is subject to some deposit limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\r\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\r\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   deposit execution, and are accounted for during deposit.\r\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\r\n     * - MUST return a limited value if receiver is subject to some mint limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxMint(address receiver) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\r\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\r\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\r\n     */\r\n    function previewMint(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\r\n     *   execution, and are accounted for during mint.\r\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\r\n     * Vault, through a withdraw call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\r\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\r\n     *   called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\r\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   withdraw execution, and are accounted for during withdraw.\r\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\r\n     * through a redeem call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\r\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\r\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\r\n     */\r\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   redeem execution, and are accounted for during redeem.\r\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 assets);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// Interface that implements the 4626 standard and the implementation functions\r\ninterface ITokenizedStrategy is IERC4626, IERC20Permit {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event UpdatePendingManagement(address indexed newPendingManagement);\r\n\r\n    event UpdateManagement(address indexed newManagement);\r\n\r\n    event UpdateKeeper(address indexed newKeeper);\r\n\r\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\r\n\r\n    event UpdatePerformanceFeeRecipient(\r\n        address indexed newPerformanceFeeRecipient\r\n    );\r\n\r\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\r\n\r\n    event StrategyShutdown();\r\n\r\n    event Reported(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 protocolFees,\r\n        uint256 performanceFees\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           INITILIZATION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function init(\r\n        address _asset,\r\n        string memory _name,\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    NON-STANDARD 4626 OPTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function isKeeperOrManagement(address _sender) external view;\r\n\r\n    function isManagement(address _sender) external view;\r\n\r\n    function isShutdown() external view returns (bool);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        KEEPERS FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function tend() external;\r\n\r\n    function report() external returns (uint256 _profit, uint256 _loss);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function MIN_FEE() external view returns (uint16);\r\n\r\n    function MAX_FEE() external view returns (uint16);\r\n\r\n    function FACTORY() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalIdle() external view returns (uint256);\r\n\r\n    function totalDebt() external view returns (uint256);\r\n\r\n    function management() external view returns (address);\r\n\r\n    function pendingManagement() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function performanceFee() external view returns (uint16);\r\n\r\n    function performanceFeeRecipient() external view returns (address);\r\n\r\n    function fullProfitUnlockDate() external view returns (uint256);\r\n\r\n    function profitUnlockingRate() external view returns (uint256);\r\n\r\n    function profitMaxUnlockTime() external view returns (uint256);\r\n\r\n    function lastReport() external view returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPendingManagement(address) external;\r\n\r\n    function acceptManagement() external;\r\n\r\n    function setKeeper(address _keeper) external;\r\n\r\n    function setPerformanceFee(uint16 _performanceFee) external;\r\n\r\n    function setPerformanceFeeRecipient(\r\n        address _performanceFeeRecipient\r\n    ) external;\r\n\r\n    function setProfitMaxUnlockTime(uint256 _profitMaxUnlockTime) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function emergencyWithdraw(uint256 _amount) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           ERC20 ADD ONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external returns (bool);\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title YearnV3 Base Tokenized Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseTokenizedStrategy implements all of the required functionality to\r\n *  seamlessly integrate with the `TokenizedStrategy` implementation contract\r\n *  allowing anyone to easily build a fully permisionless ERC-4626 compliant\r\n *  Vault by inheriting this contract and overriding three simple functions.\r\n\r\n *  It utilizes an immutable proxy pattern that allows the BaseTokenizedStrategy\r\n *  to remain simple and small. All standard logic is held within the\r\n *  `TokenizedStrategy` and is reused over any n strategies all using the\r\n *  `fallback` function to delegatecall the implementation so that strategists\r\n *  can only be concerned with writing their strategy specific code.\r\n *\r\n *  This contract should be inherited and the three main abstract methods\r\n *  `_deployFunds`, `_freeFunds` and `_harvestAndReport` implemented to adapt\r\n *  the Strategy to the particular needs it has to create a return. There are\r\n *  other optional methods that can be implemented to further customize of\r\n *  the strategy if desired.\r\n *\r\n *  All default storage for the strategy is controlled and updated by the\r\n *  `TokenizedStrategy`. The implementation holds a storage struct that\r\n *  contains all needed global variables in a manual storage slot. This\r\n *  means strategists can feel free to implement their own custom storage\r\n *  variables as they need with no concern of collisions. All global variables\r\n *  can be viewed within the Strategy by a simple call using the\r\n *  `TokenizedStrategy` variable. IE: TokenizedStrategy.globalVariable();.\r\n */\r\nabstract contract BaseTokenizedStrategy {\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev Used on TokenizedStrategy callback functions to make sure it is post\r\n     * a delegateCall from this address to the TokenizedStrategy.\r\n     */\r\n    modifier onlySelf() {\r\n        _onlySelf();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from the strategies management.\r\n     */\r\n    modifier onlyManagement() {\r\n        TokenizedStrategy.isManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the keeper.\r\n     */\r\n    modifier onlyKeepers() {\r\n        TokenizedStrategy.isKeeperOrManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    function _onlySelf() internal view {\r\n        require(msg.sender == address(this), \"!Authorized\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * This is the address of the TokenizedStrategy implementation\r\n     * contract that will be used by all strategies to handle the\r\n     * accounting, logic, storage etc.\r\n     *\r\n     * Any external calls to the that don't hit one of the functions\r\n     * defined in this base or the strategy will end up being forwarded\r\n     * through the fallback function, which will delegateCall this address.\r\n     *\r\n     * This address should be the same for every strategy, never be adjusted\r\n     * and always be checked before any integration with the Strategy.\r\n     */\r\n    address public constant tokenizedStrategyAddress =\r\n        0xAE69a93945133c00B9985D9361A1cd882d107622;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * This variable is set to address(this) during initialization of each strategy.\r\n     *\r\n     * This can be used to retrieve storage data within the strategy\r\n     * contract as if it were a linked library.\r\n     *\r\n     *       i.e. uint256 totalAssets = TokenizedStrategy.totalAssets()\r\n     *\r\n     * Using address(this) will mean any calls using this variable will lead\r\n     * to a call to itself. Which will hit the fallback function and\r\n     * delegateCall that to the actual TokenizedStrategy.\r\n     */\r\n    ITokenizedStrategy internal immutable TokenizedStrategy;\r\n\r\n    // Underlying asset the Strategy is earning yield on.\r\n    address public immutable asset;\r\n\r\n    /**\r\n     * @notice Used to initialize the strategy on deployment.\r\n     *\r\n     * This will set the `TokenizedStrategy` variable for easy\r\n     * internal view calls to the implementation. As well as\r\n     * initializing the default storage variables based on the\r\n     * parameters and using the deployer for the permisioned roles.\r\n     *\r\n     * @param _asset Address of the underlying asset.\r\n     * @param _name Name the strategy will use.\r\n     */\r\n    constructor(address _asset, string memory _name) {\r\n        asset = _asset;\r\n\r\n        // Set instance of the implementation for internal use.\r\n        TokenizedStrategy = ITokenizedStrategy(address(this));\r\n\r\n        // Initilize the strategies storage variables.\r\n        _init(_asset, _name, msg.sender, msg.sender, msg.sender);\r\n\r\n        // Store the tokenizedStrategyAddress at the standard implementation\r\n        // address storage slot so etherscan picks up the interface. This gets\r\n        // stored on initialization and never updated.\r\n        assembly {\r\n            sstore(\r\n                // keccak256('eip1967.proxy.implementation' - 1)\r\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\r\n                tokenizedStrategyAddress\r\n            )\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Should deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Will attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * The amount of 'asset' that is already loose has already\r\n     * been accounted for.\r\n     *\r\n     * This function is called during {withdraw} and {redeem} calls.\r\n     * Meaning that unless a whitelist is implemented it will be\r\n     * entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * Should not rely on asset.balanceOf(address(this)) calls other than\r\n     * for diff accounting purposes.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * This can still be called post a shutdown, a strategist can check\r\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\r\n     * redeployed or simply realize any profits/losses.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        virtual\r\n        returns (uint256 _totalAssets);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    OPTIONAL TO OVERRIDE BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Optional function for strategist to override that can\r\n     *  be called in between reports.\r\n     *\r\n     * If '_tend' is used tendTrigger() will also need to be overridden.\r\n     *\r\n     * This call can only be called by a permissioned role so may be\r\n     * through protected relays.\r\n     *\r\n     * This can be used to harvest and compound rewards, deposit idle funds,\r\n     * perform needed poisition maintenance or anything else that doesn't need\r\n     * a full report for.\r\n     *\r\n     *   EX: A strategy that can not deposit funds without getting\r\n     *       sandwiched can use the tend when a certain threshold\r\n     *       of idle to totalAssets has been reached.\r\n     *\r\n     * The TokenizedStrategy contract will do all needed debt and idle updates\r\n     * after this has finished and will have no effect on PPS of the strategy\r\n     * till report() is called.\r\n     *\r\n     * @param _totalIdle The current amount of idle funds that are available to deploy.\r\n     */\r\n    function _tend(uint256 _totalIdle) internal virtual {}\r\n\r\n    /**\r\n     * @notice Returns weather or not tend() should be called by a keeper.\r\n     * @dev Optional trigger to override if tend() will be used by the strategy.\r\n     * This must be implemented if the strategy hopes to invoke _tend().\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     */\r\n    function tendTrigger() external view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that an address can deposit.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overriden by strategists.\r\n     *\r\n     * This function will be called before any deposit or mints to enforce\r\n     * any limits desired by the strategist. This can be used for either a\r\n     * traditional deposit limit or for implementing a whitelist etc.\r\n     *\r\n     *   EX:\r\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\r\n     *\r\n     * This does not need to take into account any conversion rates\r\n     * from shares to assets. But should know that any non max uint256\r\n     * amounts may be converted to shares. So it is recommended to keep\r\n     * custom amounts low enough as not to cause overflow when multiplied\r\n     * by `totalSupply`.\r\n     *\r\n     * @param . The address that is depositing into the strategy.\r\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\r\n     */\r\n    function availableDepositLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that can be withdrawn.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overriden by strategists.\r\n     *\r\n     * This function will be called before any withdraw or redeem to enforce\r\n     * any limits desired by the strategist. This can be used for illiquid\r\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\r\n     *\r\n     *   EX:\r\n     *       return TokenIzedStrategy.totalIdle();\r\n     *\r\n     * This does not need to take into account the `_owner`'s share balance\r\n     * or conversion rates from shares to assets.\r\n     *\r\n     * @param . The address that is withdrawing from the strategy.\r\n     * @return . The available amount that can be withdrawn in terms of `asset`\r\n     */\r\n    function availableWithdrawLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @dev Optional function for a strategist to override that will\r\n     * allow management to manually withdraw deployed funds from the\r\n     * yield source if a strategy is shutdown.\r\n     *\r\n     * This should attempt to free `_amount`, noting that `_amount` may\r\n     * be more than is currently deployed.\r\n     *\r\n     * NOTE: This will not realize any profits or losses. A separate\r\n     * {report} will be needed in order to record any profit/loss. If\r\n     * a report may need to be called after a shutdown it is important\r\n     * to check if the strategy is shutdown during {_harvestAndReport}\r\n     * so that it does not simply re-deploy all funds that had been freed.\r\n     *\r\n     * EX:\r\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\r\n     *       depositFunds...\r\n     *    }\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        TokenizedStrategy HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Should deploy up to '_amount' of 'asset' in yield source.\r\n     * @dev Callback for the TokenizedStrategy to call during a {deposit}\r\n     * or {mint} to tell the strategy it can deploy funds.\r\n     *\r\n     * Since this can only be called after a {deposit} or {mint}\r\n     * delegateCall to the TokenizedStrategy msg.sender == address(this).\r\n     *\r\n     * Unless a whitelist is implemented this will be entirely permissionless\r\n     * and thus can be sandwiched or otherwise manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should\r\n     * attemppt to deposit in the yield source.\r\n     */\r\n    function deployFunds(uint256 _amount) external onlySelf {\r\n        _deployFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Will attempt to free the '_amount' of 'asset'.\r\n     * @dev Callback for the TokenizedStrategy to call during a withdraw\r\n     * or redeem to free the needed funds to service the withdraw.\r\n     *\r\n     * This can only be called after a 'withdraw' or 'redeem' delegateCall\r\n     * to the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt to free up.\r\n     */\r\n    function freeFunds(uint256 _amount) external onlySelf {\r\n        _freeFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the accurate amount of all funds currently\r\n     * held by the Strategy.\r\n     * @dev Callback for the TokenizedStrategy to call during a report to\r\n     * get an accurate accounting of assets the strategy controls.\r\n     *\r\n     * This can only be called after a report() delegateCall to the\r\n     * TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @return . A trusted and accurate account for the total amount\r\n     * of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function harvestAndReport() external onlySelf returns (uint256) {\r\n        return _harvestAndReport();\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_tend' when a keeper tends the strategy.\r\n     * @dev Callback for the TokenizedStrategy to initiate a _tend call in the strategy.\r\n     *\r\n     * This can only be called after a tend() delegateCall to the TokenizedStrategy \r\n     * so msg.sender == address(this).\r\n     *\r\n     * We name the function `tendThis` so that `tend` calls are forwarded to \r\n     * the TokenizedStrategy so it can do the necessary accounting.\r\n\r\n     * @param _totalIdle The amount of current idle funds that can be \r\n     * deployed during the tend\r\n     */\r\n    function tendThis(uint256 _totalIdle) external onlySelf {\r\n        _tend(_totalIdle);\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_emergencyWithdraw' function.\r\n     * @dev Callback for the TokenizedStrategy during an emergency withdraw.\r\n     *\r\n     * This can only be called after a emergencyWithdraw() delegateCall to\r\n     * the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * We name the function `shutdownWithdraw` so that `emergencyWithdraw`\r\n     * calls are forwarded to the TokenizedStrategy so it can do the necessary\r\n     * accounting after the withdraw.\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function shutdownWithdraw(uint256 _amount) external onlySelf {\r\n        _emergencyWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Funciton used on initialization to delegate call the\r\n     * TokenizedStrategy to setup the default storage for the strategy.\r\n     *\r\n     * We cannot use the `TokenizedStrategy` variable call since this\r\n     * contract is not deployed fully yet. So we need to manually\r\n     * delegateCall the TokenizedStrategy.\r\n     *\r\n     * This is the only time an internal delegateCall should not\r\n     * be for a view function\r\n     */\r\n    function _init(\r\n        address _asset,\r\n        string memory _name,\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) private {\r\n        (bool success, ) = tokenizedStrategyAddress.delegatecall(\r\n            abi.encodeCall(\r\n                ITokenizedStrategy.init,\r\n                (_asset, _name, _management, _performanceFeeRecipient, _keeper)\r\n            )\r\n        );\r\n\r\n        require(success, \"init failed\");\r\n    }\r\n\r\n    // exeute a function on the TokenizedStrategy and return any value.\r\n    fallback() external {\r\n        // load our target address\r\n        address _tokenizedStrategyAddress = tokenizedStrategyAddress;\r\n        // Execute external function using delegatecall and return any value.\r\n        assembly {\r\n            // Copy function selector and any arguments.\r\n            calldatacopy(0, 0, calldatasize())\r\n            // Execute function delegatecall.\r\n            let result := delegatecall(\r\n                gas(),\r\n                _tokenizedStrategyAddress,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            // Get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // Return any return value or error back to the caller\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *   @title Base Health Check\r\n *   @author Yearn.finance\r\n *   @notice This contract can be inherited by any Yearn\r\n *   V3 strategy wishing to implement a health check during\r\n *   the `report` function in order to prevent any unexpected\r\n *   behavior from being permanently recorded as well as the\r\n *   `checkHealth` modifier.\r\n *\r\n *   A strategist simply needs to inherit this contract. Set\r\n *   the limit ratios to the desired amounts and then call\r\n *   `_executeHealthCheck(...)` during the  `_harvestAndReport()`\r\n *   execution. If the profit or loss that would be recorded is\r\n *   outside the acceptable bounds the tx will revert.\r\n *\r\n *   The healthcheck does not prevent a strategy from reporting\r\n *   losses, but rather can make sure manual intervention is\r\n *   needed before reporting an unexpected loss or profit.\r\n */\r\nabstract contract BaseHealthCheck is BaseTokenizedStrategy {\r\n    // Optional modifier that can be placed on any function\r\n    // to perform checks such as debt/PPS before running.\r\n    // Must override `_checkHealth()` for this to work.\r\n    modifier checkHealth() {\r\n        _checkHealth();\r\n        _;\r\n    }\r\n\r\n    // Can be used to determine if a healthcheck should be called.\r\n    // Defaults to true;\r\n    bool public doHealthCheck = true;\r\n\r\n    uint256 internal constant MAX_BPS = 10_000;\r\n\r\n    // Default profit limit to 100%.\r\n    uint256 private _profitLimitRatio = MAX_BPS;\r\n\r\n    // Defaults loss limit to 0.\r\n    uint256 private _lossLimitRatio;\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name\r\n    ) BaseTokenizedStrategy(_asset, _name) {}\r\n\r\n    /**\r\n     * @notice Returns the current profit limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current profit limit ratio.\r\n     */\r\n    function profitLimitRatio() public view returns (uint256) {\r\n        return _profitLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current loss limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current loss limit ratio.\r\n     */\r\n    function lossLimitRatio() public view returns (uint256) {\r\n        return _lossLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `profitLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function setProfitLimitRatio(\r\n        uint256 _newProfitLimitRatio\r\n    ) external onlyManagement {\r\n        _setProfitLimitRatio(_newProfitLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the profit limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function _setProfitLimitRatio(uint256 _newProfitLimitRatio) internal {\r\n        require(_newProfitLimitRatio > 0, \"!zero profit\");\r\n        _profitLimitRatio = _newProfitLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `lossLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function setLossLimitRatio(\r\n        uint256 _newLossLimitRatio\r\n    ) external onlyManagement {\r\n        _setLossLimitRatio(_newLossLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the loss limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function _setLossLimitRatio(uint256 _newLossLimitRatio) internal {\r\n        require(_newLossLimitRatio < MAX_BPS, \"!loss limit\");\r\n        _lossLimitRatio = _newLossLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Turns the healthcheck on and off.\r\n     * @dev If turned off the next report will auto turn it back on.\r\n     * @param _doHealthCheck Bool if healthCheck should be done.\r\n     */\r\n    function setDoHealthCheck(bool _doHealthCheck) public onlyManagement {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice Check important invariants for the strategy.\r\n     * @dev This can be overriden to check any important strategy\r\n     *  specific invariants.\r\n     *\r\n     *  NOTE: Should revert if unhealthy for the modifier to work.\r\n     */\r\n    function _checkHealth() internal virtual {}\r\n\r\n    /**\r\n     * @dev To be called during a report to make sure the profit\r\n     * or loss being recorded is within the acceptable bound.\r\n     *\r\n     * @param _newTotalAssets The amount that will be reported.\r\n     */\r\n    function _executeHealthCheck(uint256 _newTotalAssets) internal virtual {\r\n        if (!doHealthCheck) {\r\n            doHealthCheck = true;\r\n            return;\r\n        }\r\n\r\n        // Get the curent total assets from the implementation.\r\n        uint256 currentTotalAssets = TokenizedStrategy.totalAssets();\r\n\r\n        if (_newTotalAssets > currentTotalAssets) {\r\n            require(\r\n                ((_newTotalAssets - currentTotalAssets) <=\r\n                    (currentTotalAssets * _profitLimitRatio) / MAX_BPS),\r\n                \"healthCheck\"\r\n            );\r\n        } else if (currentTotalAssets > _newTotalAssets) {\r\n            require(\r\n                (currentTotalAssets - _newTotalAssets <=\r\n                    ((currentTotalAssets * _lossLimitRatio) / MAX_BPS)),\r\n                \"healthCheck\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *   @title Custom Strategy Trigger Base.\r\n *   @author Yearn.finance\r\n */\r\nabstract contract CustomStrategyTriggerBase {\r\n    /**\r\n     * @notice Returns if a strategy should report any accrued profits/losses.\r\n     * @dev This can be used to implement a custom trigger if the default\r\n     * flow is not desired by a strategies managent.\r\n     *\r\n     * Should complete any needed checks and then return `true` if the strategy\r\n     * should report and `false` if not.\r\n     *\r\n     * @param _strategy The address of the strategy to check.\r\n     * @return . Bool repersenting if the strategy is ready to report.\r\n     * @return . Bytes with either the calldata or reason why False.\r\n     */\r\n    function reportTrigger(\r\n        address _strategy\r\n    ) external view virtual returns (bool, bytes memory);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IPearlRouter {\r\n    struct route {\r\n        address from;\r\n        address to;\r\n        bool stable;\r\n    }\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        route[] memory routes\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        address tokenIn,\r\n        address tokenOut\r\n    ) external view returns (uint256 amount, bool stable);\r\n\r\n    function quoteRemoveLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        bool stable,\r\n        uint256 liquidity\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function quoteAddLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        bool stable,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        bool stable,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        bool stable,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        route[] calldata routes,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function pairFor(\r\n        address tokenA,\r\n        address tokenB,\r\n        bool stable\r\n    ) external returns (address pair);\r\n\r\n    function swapExactTokensForTokensSimple(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address tokenFrom,\r\n        address tokenTo,\r\n        bool stable,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPair {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function stable() external view returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _reserve0,\r\n            uint256 _reserve1,\r\n            uint256 _blockTimestampLast\r\n        );\r\n\r\n    function claimable0(address _user) external view returns (uint256);\r\n\r\n    function claimable1(address _user) external view returns (uint256);\r\n\r\n    function claimFees() external returns (uint256, uint256);\r\n\r\n    function getAmountOut(uint256, address) external view returns (uint256);\r\n}\r\n\r\ninterface IRewardPool {\r\n    function deposit(uint256 amount) external;\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getReward() external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function stakingToken() external view returns (address);\r\n\r\n    function rewardsToken() external view returns (address);\r\n\r\n    function emergency() external view returns (bool);\r\n\r\n    function emergencyWithdraw() external;\r\n}\r\n\r\ninterface IVoter {\r\n    function _ve() external view returns (address);\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function gauges(address _pair) external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function minter() external view returns (address);\r\n\r\n    function emergencyCouncil() external view returns (address);\r\n\r\n    function emitDeposit(\r\n        uint256 _tokenId,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function emitWithdraw(\r\n        uint256 _tokenId,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function isWhitelisted(address token) external view returns (bool);\r\n\r\n    function notifyRewardAmount(uint256 amount) external;\r\n\r\n    function distribute(address _gauge) external;\r\n\r\n    function distributeAll() external;\r\n\r\n    function distribute(uint256 start, uint256 finiash) external;\r\n\r\n    function distributeFees(address[] memory _gauges) external;\r\n\r\n    function internal_bribes(address _gauge) external view returns (address);\r\n\r\n    function external_bribes(address _gauge) external view returns (address);\r\n\r\n    function usedWeights(uint256 id) external view returns (uint256);\r\n\r\n    function lastVoted(uint256 id) external view returns (uint256);\r\n\r\n    function poolVote(\r\n        uint256 id,\r\n        uint256 _index\r\n    ) external view returns (address _pair);\r\n\r\n    function votes(\r\n        uint256 id,\r\n        address _pool\r\n    ) external view returns (uint256 votes);\r\n\r\n    function poolVoteLength(uint256 tokenId) external view returns (uint256);\r\n\r\n    function length() external view returns (uint256);\r\n\r\n    function getIncentivizedPools() external view returns (address[] memory);\r\n\r\n    function isBribe(address _bribe) external view returns (bool);\r\n\r\n    function reset(uint256 _tokenId) external;\r\n\r\n    function poke(uint256 _tokenId) external;\r\n}\r\n\r\ninterface IUSDRExchange {\r\n    function swapFromUnderlying(\r\n        uint256 amountIn,\r\n        address to\r\n    ) external returns (uint256 amountOut);\r\n\r\n    function swapToUnderlying(\r\n        uint256 amountIn,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    function withdrawalFee() external view returns (uint256);\r\n}\r\n\r\ninterface IStableSwapPool {\r\n    // pool data view functions\r\n    function getA() external view returns (uint256);\r\n\r\n    function getToken(uint8 index) external view returns (IERC20);\r\n\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n\r\n    function getTokenBalance(uint8 index) external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    // min return calculation functions\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calculateTokenAmount(\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calculateRemoveLiquidity(\r\n        uint256 amount\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function calculateRemoveLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view returns (uint256 availableTokenAmount);\r\n\r\n    // state modifying functions\r\n    function initialize(\r\n        IERC20[] memory pooledTokens,\r\n        uint8[] memory decimals,\r\n        string memory lpTokenName,\r\n        string memory lpTokenSymbol,\r\n        uint256 a,\r\n        uint256 fee,\r\n        uint256 adminFee,\r\n        address lpTokenTargetAddress\r\n    ) external;\r\n\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory);\r\n\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface ICurvePool {\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external returns (uint256 dy);\r\n\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external returns (uint256 dy);\r\n\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n}\r\n\r\ncontract PearlLPCompounder is BaseHealthCheck, CustomStrategyTriggerBase {\r\n    using SafeERC20 for ERC20;\r\n\r\n    IUSDRExchange private constant USDR_EXCHANGE =\r\n        IUSDRExchange(0x195F7B233947d51F4C3b756ad41a5Ddb34cEBCe0);\r\n    IPearlRouter private constant PEARL_ROUTER =\r\n        IPearlRouter(0xcC25C0FD84737F44a7d38649b69491BBf0c7f083); // use value from: https://docs.pearl.exchange/protocol-details/contract-addresses-v1.5\r\n    IStableSwapPool private constant SYNAPSE_STABLE_POOL =\r\n        IStableSwapPool(0x85fCD7Dd0a1e1A9FCD5FD886ED522dE8221C3EE5);\r\n    ICurvePool private constant CURVE_AAVE_POOL =\r\n        ICurvePool(0x445FE580eF8d70FF569aB36e80c647af338db351);\r\n\r\n    ERC20 private constant USDR =\r\n        ERC20(0x40379a439D4F6795B6fc9aa5687dB461677A2dBa);\r\n    ERC20 private constant PEARL =\r\n        ERC20(0x7238390d5f6F64e67c3211C343A410E2A3DEc142);\r\n    ERC20 private constant DAI =\r\n        ERC20(0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063);\r\n\r\n    address private constant GOV = 0xC4ad0000E223E398DC329235e6C497Db5470B626; //yearn governance on polygon\r\n    uint256 private constant USDR_TO_DAI_PRECISION = 1e9;\r\n    int128 private constant CURVE_DAI_INDEX = 0;\r\n    int128 private constant UNSUPPORTED = -99;\r\n\r\n    IRewardPool private immutable pearlRewards;\r\n    IPair private immutable lpToken;\r\n    bool private immutable isStable;\r\n\r\n    uint256 public keepPEARL; // 0 is default. the percentage of PEARL we re-lock for boost (in basis points)\r\n    /// @notice Value in PEARL\r\n    uint256 public minRewardsToSell = 10e18; // ~ $3\r\n    /// @notice Value in USDR\r\n    uint256 public minFeesToClaim = 1e9; // ~ $1\r\n    /// @notice Value in BPS\r\n    uint256 public slippageStable = 50; // 0.5% slippage in BPS\r\n    /// @notice The difference to favor token0 compared to token1 when swapping and adding liquidity, 5_000 is equal to both tokens\r\n    uint256 public swapTokenRatio = 5_000;\r\n    /// @notice The address to keep pearl.\r\n    address public keepPearlAddress;\r\n    bool public useCurveStable; // if true, use Curve AAVE pool for stable swaps, default synapse\r\n    int128 public curveStableIndex = UNSUPPORTED; // index of lp token in Curve AAVE pool\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name\r\n    ) BaseHealthCheck(_asset, _name) {\r\n        lpToken = IPair(_asset);\r\n        IVoter pearlVoter = IVoter(0xa26C2A6BfeC5512c13Ae9EacF41Cb4319d30cCF0);\r\n        address _gauge = pearlVoter.gauges(_asset);\r\n        require(_gauge != address(0), \"!gauge\");\r\n        pearlRewards = IRewardPool(_gauge);\r\n\r\n        ERC20(asset).safeApprove(address(pearlRewards), type(uint256).max);\r\n        ERC20(lpToken.token0()).safeApprove(\r\n            address(PEARL_ROUTER),\r\n            type(uint256).max\r\n        );\r\n        ERC20(lpToken.token1()).safeApprove(\r\n            address(PEARL_ROUTER),\r\n            type(uint256).max\r\n        );\r\n\r\n        USDR.safeApprove(address(USDR_EXCHANGE), type(uint256).max);\r\n        PEARL.safeApprove(address(PEARL_ROUTER), type(uint256).max);\r\n\r\n        isStable = lpToken.stable();\r\n        if (isStable) {\r\n            // approve synapse pool for stables only\r\n            DAI.safeApprove(address(SYNAPSE_STABLE_POOL), type(uint256).max);\r\n\r\n            // approve curve pool for stables only\r\n            address usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n            address usdc = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\r\n            if (lpToken.token0() == usdc || lpToken.token1() == usdc) {\r\n                ERC20(address(DAI)).safeApprove(\r\n                    address(CURVE_AAVE_POOL),\r\n                    type(uint256).max\r\n                );\r\n                curveStableIndex = 1; // usdc index\r\n            } else if (lpToken.token0() == usdt || lpToken.token1() == usdt) {\r\n                ERC20(address(DAI)).safeApprove(\r\n                    address(CURVE_AAVE_POOL),\r\n                    type(uint256).max\r\n                );\r\n                curveStableIndex = 2; // usdt index\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Set the amount and address of PEARL to be kept\r\n    /// @dev cannot set if the address is zero\r\n    /// @param _keepPEARL amount of PEARL to be locked\r\n    function setKeepPEARL(uint256 _keepPEARL) external onlyManagement {\r\n        require(keepPearlAddress != address(0), \"!keepPearlAddress\");\r\n        keepPEARL = _keepPEARL;\r\n    }\r\n\r\n    /// @notice Set the address to keep PEARL\r\n    /// @dev cannot be zero address\r\n    /// @param _keepPearlAddress address to keep PEARL\r\n    function setKeepPEARLAddress(\r\n        address _keepPearlAddress\r\n    ) external onlyManagement {\r\n        require(_keepPearlAddress != address(0), \"!keepPearlAddress\");\r\n        keepPearlAddress = _keepPearlAddress;\r\n    }\r\n\r\n    /// @notice Set the amount of PEARL to be sold for asset from each harvest\r\n    /// @param _minRewardsToSell amount of PEARL to be sold for asset from each harvest\r\n    function setMinRewardsToSell(\r\n        uint256 _minRewardsToSell\r\n    ) external onlyManagement {\r\n        minRewardsToSell = _minRewardsToSell;\r\n    }\r\n\r\n    /// @notice Set the amount of mint fees to be claimed\r\n    /// @param _minFeesToClaim amount of mint fees to be claimed\r\n    function setMinFeesToClaim(\r\n        uint256 _minFeesToClaim\r\n    ) external onlyManagement {\r\n        minFeesToClaim = _minFeesToClaim;\r\n    }\r\n\r\n    /// @notice Set slippage for swapping stable to stable\r\n    /// @param _slippageStable slippage in BPS\r\n    function setSlippageStable(\r\n        uint256 _slippageStable\r\n    ) external onlyManagement {\r\n        require(_slippageStable < MAX_BPS, \"!slippageStable\");\r\n        slippageStable = _slippageStable;\r\n    }\r\n\r\n    /// @notice Set the ratio of token0 to token1 when adding liquidity\r\n    /// @param _swapTokenRatio 6_000 is equal to 60% token0 and 40% token1.\r\n    /// MAX_BPS is max value.\r\n    function setSwapTokenRatio(\r\n        uint256 _swapTokenRatio\r\n    ) external onlyManagement {\r\n        require(_swapTokenRatio < MAX_BPS, \"!swapTokenRatio\");\r\n        swapTokenRatio = _swapTokenRatio;\r\n    }\r\n\r\n    /// @notice Set if we should use Curve AAVE pool for stable swaps\r\n    /// @param _useCurveStable true if we should use Curve AAVE pool for stable swaps\r\n    // Review: when would this method be used?\r\n    // Doesn't the contructor take care of checking if a stable swap is possible?\r\n    function setUseCurveStable(bool _useCurveStable) external onlyManagement {\r\n        require(curveStableIndex != UNSUPPORTED, \"!curveUnsupported\");\r\n        useCurveStable = _useCurveStable;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Should deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permsionless and thus can be sandwhiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attemppt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal override {\r\n        pearlRewards.deposit(_amount);\r\n    }\r\n\r\n    function balanceOfAsset() public view returns (uint256) {\r\n        return ERC20(asset).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfStakedAssets() public view returns (uint256) {\r\n        return pearlRewards.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfRewards() public view returns (uint256) {\r\n        return PEARL.balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Get pending value of rewards in DAI\r\n    /// @return value of PEARL in DAI\r\n    function getClaimableRewards() external view returns (uint256) {\r\n        uint256 pendingPearl = pearlRewards.earned(address(this));\r\n        return _getValueOfPearlInDai(pendingPearl);\r\n    }\r\n\r\n    /// @notice Get value of rewards in DAI\r\n    /// @return value of PEARL in DAI\r\n    function getRewardsValue() external view returns (uint256) {\r\n        uint256 pearlBalance = PEARL.balanceOf(address(this));\r\n        return _getValueOfPearlInDai(pearlBalance);\r\n    }\r\n\r\n    /// @notice Get value of LP fees in DAI\r\n    /// @return value of LP fees in DAI\r\n    function getClaimableFeesValue() external view returns (uint256) {\r\n        uint256 fees = _getClaimableFees();\r\n        IPearlRouter.route[] memory routes = new IPearlRouter.route[](1);\r\n        routes[0] = IPearlRouter.route(address(USDR), address(DAI), true);\r\n        uint256[] memory amounts = PEARL_ROUTER.getAmountsOut(fees, routes);\r\n        return amounts[1]; // 2 amounts, use the last one\r\n    }\r\n\r\n    /**\r\n     * @dev Will attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal override {\r\n        pearlRewards.withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        override\r\n        returns (uint256 _totalAssets)\r\n    {\r\n        if (!TokenizedStrategy.isShutdown()) {\r\n            if (_getClaimableFees() > minFeesToClaim) {\r\n                lpToken.claimFees();\r\n            }\r\n\r\n            if (\r\n                pearlRewards.earned(address(this)) + balanceOfRewards() >\r\n                minRewardsToSell\r\n            ) {\r\n                _claimAndSellRewards();\r\n            }\r\n\r\n            // add liquidity earned from fees and rewards\r\n            _addLiquidity();\r\n\r\n            uint256 _balanceOfAsset = balanceOfAsset();\r\n            if (_balanceOfAsset > 0) {\r\n                _deployFunds(_balanceOfAsset);\r\n            }\r\n        }\r\n        _totalAssets = balanceOfAsset() + balanceOfStakedAssets();\r\n\r\n        _executeHealthCheck(_totalAssets);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns wether or not report() should be called by a keeper.\r\n     * @dev Check if the strategy is not shutdown and if there are any rewards to be claimed.\r\n     * @return . Should return true if report() should be called by keeper or false if not.\r\n     */\r\n    function reportTrigger(\r\n        address /*_strategy*/\r\n    ) external view override returns (bool, bytes memory) {\r\n        if (TokenizedStrategy.isShutdown()) return (false, bytes(\"Shutdown\"));\r\n        // gas cost is not concern here\r\n        // check if there are any rewards or fees to be claimed\r\n        if (\r\n            pearlRewards.earned(address(this)) + balanceOfRewards() >\r\n            minRewardsToSell ||\r\n            _getClaimableFees() > minFeesToClaim\r\n        ) {\r\n            return (\r\n                true,\r\n                abi.encodeWithSelector(TokenizedStrategy.report.selector)\r\n            );\r\n        }\r\n\r\n        return (\r\n            // Return true is the full profit unlock time has passed since the last report.\r\n            block.timestamp - TokenizedStrategy.lastReport() >\r\n                TokenizedStrategy.profitMaxUnlockTime(),\r\n            // Return the report function sig as the calldata.\r\n            abi.encodeWithSelector(TokenizedStrategy.report.selector)\r\n        );\r\n    }\r\n\r\n    /// @dev claimable values are update on each deposit/mint and withdraw/burn of lp tokens\r\n    function _getClaimableFees() internal view returns (uint256 claimable) {\r\n        claimable = _getValueInUSDR(\r\n            lpToken.token0(),\r\n            lpToken.claimable0(address(this))\r\n        );\r\n        claimable += _getValueInUSDR(\r\n            lpToken.token1(),\r\n            lpToken.claimable1(address(this))\r\n        );\r\n    }\r\n\r\n    function _getValueInUSDR(\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal view returns (uint256 amountInUsdr) {\r\n        if (_token == address(USDR)) {\r\n            return _amount;\r\n        }\r\n        if (_amount > 0) {\r\n            (amountInUsdr, ) = PEARL_ROUTER.getAmountOut(\r\n                _amount,\r\n                _token,\r\n                address(USDR)\r\n            );\r\n        }\r\n    }\r\n\r\n    function _swapUSDRForToken(\r\n        uint256 _usdrAmount,\r\n        address _tokenOut\r\n    ) internal returns (uint256 amountOut) {\r\n        if (_tokenOut != address(USDR)) {\r\n            //if we need anything but USDR, let's withdraw from tangible or sell on pearl to get DAI first\r\n            if (isStable) {\r\n                amountOut = _swapStable(_tokenOut, _usdrAmount);\r\n            } else {\r\n                amountOut = PEARL_ROUTER.swapExactTokensForTokensSimple(\r\n                    _usdrAmount,\r\n                    0,\r\n                    address(USDR),\r\n                    _tokenOut,\r\n                    false, // not stable swap\r\n                    address(this),\r\n                    block.timestamp\r\n                )[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapStable(\r\n        address _tokenOut,\r\n        uint256 _usdrAmount\r\n    ) internal returns (uint256 amountOut) {\r\n        amountOut = _swapUsdrToDai(_usdrAmount);\r\n\r\n        if (_tokenOut != address(DAI)) {\r\n            uint256 minAmountOut = (amountOut * (MAX_BPS - slippageStable)) /\r\n                MAX_BPS;\r\n            // remove decimals if needed\r\n            uint256 tokenOutDecimals = ERC20(_tokenOut).decimals();\r\n            if (tokenOutDecimals < 18) {\r\n                minAmountOut = minAmountOut / 10 ** (18 - tokenOutDecimals);\r\n            }\r\n\r\n            if (useCurveStable) {\r\n                amountOut = CURVE_AAVE_POOL.exchange_underlying(\r\n                    CURVE_DAI_INDEX,\r\n                    curveStableIndex,\r\n                    amountOut,\r\n                    minAmountOut\r\n                );\r\n            } else {\r\n                uint8 daiId = SYNAPSE_STABLE_POOL.getTokenIndex(address(DAI));\r\n                uint8 tokenOutId = SYNAPSE_STABLE_POOL.getTokenIndex(_tokenOut);\r\n\r\n                amountOut = SYNAPSE_STABLE_POOL.swap(\r\n                    daiId,\r\n                    tokenOutId,\r\n                    amountOut,\r\n                    minAmountOut,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev swap USDR to DAI using PEARL router or redeem from tangible\r\n    function _swapUsdrToDai(uint256 _usdrAmount) internal returns (uint256) {\r\n        // Get the expected amount of `asset` out with the withdrawal fee.\r\n        uint256 outWithFee = (_usdrAmount -\r\n            ((_usdrAmount * USDR_EXCHANGE.withdrawalFee()) / MAX_BPS)) *\r\n            USDR_TO_DAI_PRECISION;\r\n\r\n        // If we can get more from the Pearl pool use that.\r\n        (uint256 daiSwap, bool stable) = PEARL_ROUTER.getAmountOut(\r\n            _usdrAmount,\r\n            address(USDR),\r\n            address(DAI)\r\n        );\r\n        if (daiSwap > outWithFee) {\r\n            return\r\n                PEARL_ROUTER.swapExactTokensForTokensSimple(\r\n                    _usdrAmount,\r\n                    outWithFee,\r\n                    address(USDR),\r\n                    address(DAI),\r\n                    stable,\r\n                    address(this),\r\n                    block.timestamp\r\n                )[1];\r\n        } else {\r\n            return USDR_EXCHANGE.swapToUnderlying(_usdrAmount, address(this));\r\n        }\r\n    }\r\n\r\n    function _getValueOfPearlInDai(\r\n        uint256 _amount\r\n    ) internal view returns (uint256) {\r\n        IPearlRouter.route[] memory routes = new IPearlRouter.route[](2);\r\n        routes[0] = IPearlRouter.route(address(PEARL), address(USDR), false);\r\n        routes[1] = IPearlRouter.route(address(USDR), address(DAI), true);\r\n        uint256[] memory amounts = PEARL_ROUTER.getAmountsOut(_amount, routes);\r\n        return amounts[2]; // 3 amounts, use the last one\r\n    }\r\n\r\n    function _claimAndSellRewards() internal {\r\n        uint256 pearlBalance = _claimRewards();\r\n        uint256 usdrBalance = PEARL_ROUTER.swapExactTokensForTokensSimple(\r\n            pearlBalance,\r\n            0, // there is no oracle for PEARL, use min amount 0\r\n            address(PEARL),\r\n            address(USDR),\r\n            false, // pearl is not stable\r\n            address(this),\r\n            block.timestamp\r\n        )[1];\r\n\r\n        // swap only half of the rewards to other token\r\n        uint256 usdrToToken0 = (usdrBalance * swapTokenRatio) / MAX_BPS;\r\n        _swapUSDRForToken(usdrToToken0, lpToken.token0());\r\n        _swapUSDRForToken(usdrBalance - usdrToToken0, lpToken.token1());\r\n    }\r\n\r\n    function _addLiquidity() internal {\r\n        address tokenA = lpToken.token0();\r\n        address tokenB = lpToken.token1();\r\n\r\n        uint256 amountA = ERC20(tokenA).balanceOf(address(this));\r\n        uint256 amountB = ERC20(tokenB).balanceOf(address(this));\r\n\r\n        if (amountA > 0 && amountB > 0) {\r\n            PEARL_ROUTER.addLiquidity(\r\n                tokenA,\r\n                tokenB,\r\n                isStable,\r\n                amountA,\r\n                amountB,\r\n                1,\r\n                1,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _claimRewards() internal returns (uint256) {\r\n        uint256 pearlBalanceBefore = PEARL.balanceOf(address(this));\r\n        pearlRewards.getReward();\r\n        uint256 pearlBalance = PEARL.balanceOf(address(this));\r\n\r\n        if (keepPEARL > 0 && pearlBalance - pearlBalanceBefore > 0) {\r\n            PEARL.safeTransfer(\r\n                keepPearlAddress,\r\n                ((pearlBalance - pearlBalanceBefore) * keepPEARL) / MAX_BPS\r\n            );\r\n            pearlBalance = PEARL.balanceOf(address(this));\r\n        }\r\n        return pearlBalance;\r\n    }\r\n\r\n    function claimFees() external onlyManagement {\r\n        lpToken.claimFees();\r\n    }\r\n\r\n    function claimAndSellRewards() external onlyManagement {\r\n        _claimAndSellRewards();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw funds from gauge\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal override {\r\n        uint256 balanceOfStakedLp = balanceOfStakedAssets();\r\n        // avoid possible reverts\r\n        pearlRewards.withdraw(\r\n            _amount > balanceOfStakedLp ? balanceOfStakedLp : _amount\r\n        );\r\n    }\r\n\r\n    /// @notice Sweep all ERC20 tokens to the management\r\n    /// @dev Cannot sweep the tokenized asset or PEARL, only callable by governance\r\n    /// @param _token The ERC20 token to sweep\r\n    function sweep(address _token) external {\r\n        require(msg.sender == GOV, \"!governance\");\r\n        require(_token != asset, \"!asset\");\r\n        require(_token != address(PEARL), \"!PEARL\");\r\n        ERC20 token = ERC20(_token);\r\n        token.safeTransfer(GOV, token.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfStakedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndSellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveStableIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deployFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableFeesValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepPEARL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepPearlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFeesToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRewardsToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reportTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepPEARL\",\"type\":\"uint256\"}],\"name\":\"setKeepPEARL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keepPearlAddress\",\"type\":\"address\"}],\"name\":\"setKeepPEARLAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLossLimitRatio\",\"type\":\"uint256\"}],\"name\":\"setLossLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minFeesToClaim\",\"type\":\"uint256\"}],\"name\":\"setMinFeesToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRewardsToSell\",\"type\":\"uint256\"}],\"name\":\"setMinRewardsToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProfitLimitRatio\",\"type\":\"uint256\"}],\"name\":\"setProfitLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageStable\",\"type\":\"uint256\"}],\"name\":\"setSlippageStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokenRatio\",\"type\":\"uint256\"}],\"name\":\"setSwapTokenRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCurveStable\",\"type\":\"bool\"}],\"name\":\"setUseCurveStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"shutdownWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalIdle\",\"type\":\"uint256\"}],\"name\":\"tendThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizedStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCurveStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PearlLPCompounder", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bd02973b441aa83c8eecea158b98b5984bb1036e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000194441492d5553445220506561726c20436f6d706f756e64657200000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "1", "Implementation": "0xae69a93945133c00b9985d9361a1cd882d107622", "SwarmSource": "ipfs://407cfe2e91c9d3ac06b875abbc9b9d0d228420b5dc976a33ffb7db492f65320b"}