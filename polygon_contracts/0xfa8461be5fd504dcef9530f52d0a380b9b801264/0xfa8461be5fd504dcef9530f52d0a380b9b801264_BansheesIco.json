{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ico/BansheesIco.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../libs/UniversalERC20.sol\\\";\\n\\ncontract BansheesIco is Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    using UniversalERC20 for IERC20;\\n\\n    struct ContributeData {\\n        address referrer; // Referrer of this contributor\\n        bool experienced; // User experienced this ico (flag for validating the referrer)\\n        bool claimed; // User claimed his contribution or not\\n        uint256 amount;\\n    }\\n\\n    uint256 private constant MAX_REFERRAL_FEE = 3000; // Max referral fee 30%\\n    uint256 private constant DENOMINATOR_BASIS_POINT = 10_000;\\n\\n    IERC20 private immutable _icoToken;\\n    address payable private immutable _icoOwner; // ICO owner wallet address\\n    address payable private immutable _icoTreasury; // ICO treasury wallet address\\n    uint16 private immutable _treasuryFee; // ICO treasury fee\\n\\n    uint256 private _referralFee = 1_000; // Referral fee (basis point is 10_000)\\n\\n    uint256 private _startDate = 1698166800; // When to start ICO - October 24, 2023 17:00:00 UTC\\n    uint256 private _endDate = 1699376400; // When to end ICO - Novemeber 7, 2023 17:00:00 UTC\\n    uint256 private _claimDate = 1699380000; // When to claim ICO - November 7, 2023 18:00:00 UTC\\n\\n    uint256 private _hardcap = 33600 ether; // hard cap\\n    uint256 private _softcap = 16800 ether; // softcap\\n    uint256 private _icoPrice = 0.000_008 ether; // token price\\n    uint256 private _minPerUser = 2 ether; // min amount per user\\n    uint256 private _maxPerUser = 33600 ether; // max amount per user\\n\\n    bool private _fundsWithdrawn;\\n    uint256 private _totalContributed; // Total contributed amount in buy token\\n    uint256 private _totalClaimed; // Total claimed amount in buy token\\n\\n    mapping(address => uint256) private _referredCounts; // Referred user count per referrer (referrer => referred user count)\\n    mapping(address => uint256) private _referredContributes; // Contributes amount by the referred accounts (referrer => contributed amount by the referred users)\\n    mapping(address => uint256) private _referrerDistributes; // Referral commission distributed to the referrers (referrer => distributed amount to the referrer)\\n    mapping(address => ContributeData) private _userDatas; // User contributed data\\n\\n    event Claimed(\\n        address account,\\n        address referrer,\\n        uint256 userAmount,\\n        uint256 referrerAmount\\n    );\\n    event Contributed(address account, address referrer, uint256 amount);\\n    event Refunded(address account, uint256 amount);\\n\\n    constructor(\\n        IERC20 icoToken_,\\n        address payable icoTreasury_,\\n        address payable icoOwner_,\\n        uint16 treasuryFee_\\n    ) {\\n        icoToken_.balanceOf(address(this)); // To check the IERC20 contract\\n        _icoToken = icoToken_;\\n\\n        require(\\n            icoOwner_ != address(0) && icoTreasury_ != address(0),\\n            \\\"Invalid owner / treasury\\\"\\n        );\\n        _icoOwner = icoOwner_;\\n        _icoTreasury = icoTreasury_;\\n        _treasuryFee = treasuryFee_;\\n    }\\n\\n    /**\\n     * @dev Contribute ICO\\n     *\\n     * @dev Only available when ICO is opened\\n     *\\n     * @param referrer_ Referrer of the caller\\n     */\\n    function contribute(address referrer_) external payable {\\n        require(\\n            block.timestamp >= _startDate && block.timestamp < _endDate,\\n            \\\"ICO not opened\\\"\\n        );\\n\\n        uint256 contributeAmount = msg.value;\\n        require(contributeAmount > 0, \\\"Zero contribution\\\");\\n\\n        address contributor = _msgSender();\\n        ContributeData storage userData = _userDatas[contributor];\\n\\n        uint256 contributedSoFar = userData.amount + contributeAmount;\\n        require(\\n            contributedSoFar >= _minPerUser && contributedSoFar <= _maxPerUser,\\n            \\\"Out of limit\\\"\\n        );\\n\\n        userData.amount = contributedSoFar;\\n        _totalContributed += contributeAmount;\\n        require(_totalContributed <= _hardcap, \\\"Reached hardcap\\\");\\n\\n        address currentReferrer = userData.referrer;\\n\\n        if (!userData.experienced) {\\n            userData.experienced = true;\\n            // referrer is available for the first-experienced user only\\n            // zero address or self address can not be used as referrer\\n            if (referrer_ != address(0) && referrer_ != contributor) {\\n                currentReferrer = referrer_;\\n                userData.referrer = currentReferrer;\\n                ++_referredCounts[currentReferrer];\\n            }\\n        }\\n\\n        // Update the total contributed amount by the users who are referred by this referrer\\n        if (currentReferrer != address(0))\\n            _referredContributes[currentReferrer] += contributeAmount;\\n\\n        emit Contributed(contributor, currentReferrer, contributeAmount);\\n    }\\n\\n    /**\\n     * @notice Return the contributed funds from the ICO\\n     * @dev Users can refund their contribution before the ICO ends\\n     */\\n    function refundContribution() external {\\n        require(\\n            block.timestamp >= _startDate && block.timestamp < _endDate,\\n            \\\"ICO not opened\\\"\\n        );\\n\\n        address contributor = _msgSender();\\n        ContributeData storage userData = _userDatas[contributor];\\n\\n        uint256 contributedAmount = userData.amount;\\n        require(contributedAmount > 0, \\\"Nothing contributed\\\");\\n\\n        userData.amount = 0;\\n        _totalContributed -= contributedAmount;\\n\\n        payable(contributor).sendValue(contributedAmount);\\n\\n        address referrer = userData.referrer;\\n        // Update the total contributed amount by the users who are referred by this referrer\\n        if (referrer != address(0))\\n            _referredContributes[referrer] -= contributedAmount;\\n\\n        emit Refunded(contributor, contributedAmount);\\n    }\\n\\n    /**\\n     * @dev Claim tokens from his contributed amount\\n     *\\n     * Only available after claim date\\n     */\\n    function claimTokens() external {\\n        require(block.timestamp > _claimDate, \\\"Wait more\\\");\\n\\n        address contributor = _msgSender();\\n        ContributeData storage userData = _userDatas[contributor];\\n        uint256 userContributedAmount = userData.amount;\\n\\n        require(!userData.claimed, \\\"Already claimed\\\");\\n        require(userContributedAmount > 0, \\\"Not contributed\\\");\\n\\n        uint256 userReceiveAmount = (userContributedAmount *\\n            10 ** (_icoToken.universalDecimals())) / _icoPrice;\\n\\n        if (userReceiveAmount > 0)\\n            _icoToken.safeTransfer(contributor, userReceiveAmount);\\n\\n        address referrer = userData.referrer;\\n        uint256 referralFeeAmount;\\n        if (referrer != address(0)) {\\n            referralFeeAmount =\\n                (userReceiveAmount * _referralFee) /\\n                DENOMINATOR_BASIS_POINT;\\n            if (referralFeeAmount > 0) {\\n                _icoToken.safeTransfer(referrer, referralFeeAmount);\\n                _referrerDistributes[referrer] += referralFeeAmount;\\n            }\\n        }\\n\\n        userData.claimed = true;\\n        _totalClaimed += userContributedAmount;\\n\\n        emit Claimed(\\n            contributor,\\n            referrer,\\n            userReceiveAmount,\\n            referralFeeAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Finalize ICO when it was filled or by some reasons\\n     *\\n     * It should indicate claim date\\n     * Only ICO owner is allowed to call this function\\n     */\\n    function finalizeIco(uint256 claimDate_) external {\\n        require(_msgSender() == _icoOwner, \\\"Unpermitted\\\");\\n        require(block.timestamp < _endDate, \\\"Already finished\\\");\\n        require(block.timestamp < claimDate_, \\\"Invalid claim date\\\");\\n\\n        if (_startDate > block.timestamp) _startDate = block.timestamp;\\n        _endDate = block.timestamp;\\n        _claimDate = claimDate_;\\n    }\\n\\n    /**\\n     * @dev Withdraw remained tokens\\n     *\\n     * Only ICO owner is allowed to call this function\\n     */\\n    function withdrawRemainedTokens() external {\\n        require(_msgSender() == _icoOwner, \\\"Unpermitted\\\");\\n        require(block.timestamp >= _endDate, \\\"ICO not finished\\\");\\n        uint256 contractTokens = _icoToken.balanceOf(address(this));\\n        uint256 unclaimedTokens = ((_totalContributed - _totalClaimed) *\\n            10 ** (_icoToken.universalDecimals())) / _icoPrice;\\n\\n        _icoToken.safeTransfer(_msgSender(), contractTokens - unclaimedTokens);\\n    }\\n\\n    /**\\n     * @dev Withdraw contributed funds\\n     *\\n     * Only ICO owner is allowed to call this function\\n     */\\n    function withdrawFunds() external {\\n        require(_msgSender() == _icoOwner, \\\"Unpermitted\\\");\\n        require(block.timestamp >= _endDate, \\\"ICO not finished\\\");\\n        require(!_fundsWithdrawn, \\\"Already withdrawn\\\");\\n\\n        // Transfer treasury funds first\\n        uint256 treasuryFunds = (_totalContributed * _treasuryFee) /\\n            DENOMINATOR_BASIS_POINT;\\n        _icoTreasury.sendValue(treasuryFunds);\\n\\n        // Transfer redundant funds\\n        _icoOwner.sendValue(_totalContributed - treasuryFunds);\\n\\n        _fundsWithdrawn = true;\\n    }\\n\\n    function viewIcoToken() external view returns (address) {\\n        return address(_icoToken);\\n    }\\n\\n    function viewIcoOwner() external view returns (address payable) {\\n        return _icoOwner;\\n    }\\n\\n    function viewIcoTreasury() external view returns (address payable) {\\n        return _icoTreasury;\\n    }\\n\\n    function viewTreasuryFee() external view returns (uint16) {\\n        return _treasuryFee;\\n    }\\n\\n    function viewTotalContributed() external view returns (uint256) {\\n        return _totalContributed;\\n    }\\n\\n    function viewTotalClaimed() external view returns (uint256) {\\n        return _totalClaimed;\\n    }\\n\\n    function viewUserContributed(\\n        address account_\\n    ) external view returns (uint256, bool) {\\n        return (_userDatas[account_].amount, _userDatas[account_].claimed);\\n    }\\n\\n    /**\\n     * @notice View if the user already experienced this ICO\\n     * @param account_ to check\\n     */\\n    function viewUserExperienced(\\n        address account_\\n    ) external view returns (bool) {\\n        return _userDatas[account_].experienced;\\n    }\\n\\n    /**\\n     * @dev Update ICO start / end / claim date\\n     *\\n     * Only owner is allowed to call this function\\n     */\\n    function updateIcoDates(\\n        uint256 startDate_,\\n        uint256 endDate_,\\n        uint256 claimDate_\\n    ) external onlyOwner {\\n        require(block.timestamp < _startDate, \\\"ICO already started\\\");\\n        require(block.timestamp < startDate_, \\\"Must be future time\\\");\\n        require(startDate_ < endDate_, \\\"startDate must before endDate\\\");\\n        require(endDate_ < claimDate_, \\\"endDate must before claimDate\\\");\\n\\n        _startDate = startDate_;\\n        _endDate = endDate_;\\n        _claimDate = claimDate_;\\n    }\\n\\n    function viewIcoDates() external view returns (uint256, uint256, uint256) {\\n        return (_startDate, _endDate, _claimDate);\\n    }\\n\\n    /**\\n     * @notice Update the referral fee\\n     *\\n     * @dev Only owner is allowed to call this function\\n     */\\n    function updateReferralFee(uint256 referralFee_) external onlyOwner {\\n        require(referralFee_ <= MAX_REFERRAL_FEE, \\\"Overflow\\\");\\n\\n        _referralFee = referralFee_;\\n    }\\n\\n    /**\\n     * @notice View the referral fee\\n     */\\n    function viewReferralFee() external view returns (uint256) {\\n        return _referralFee;\\n    }\\n\\n    /**\\n     * @dev Update ICO hardcap / softcap\\n     *\\n     * Only owner is allowed to call this function\\n     */\\n    function updateCap(uint256 softcap_, uint256 hardcap_) external onlyOwner {\\n        require(block.timestamp < _startDate, \\\"ICO already started\\\");\\n        require(hardcap_ > 0 && softcap_ > 0, \\\"Non zero values\\\");\\n        require(softcap_ <= hardcap_, \\\"Invalid values\\\");\\n        _hardcap = hardcap_;\\n        _softcap = softcap_;\\n    }\\n\\n    function viewCap() external view returns (uint256, uint256) {\\n        return (_softcap, _hardcap);\\n    }\\n\\n    /**\\n     * @dev Update user contribute min / max limitation\\n     *\\n     * Only owner is allowed to call this function\\n     */\\n    function updateLimitation(\\n        uint256 minPerUser_,\\n        uint256 maxPerUser_\\n    ) external onlyOwner {\\n        require(minPerUser_ <= maxPerUser_, \\\"Invalid values\\\");\\n        require(maxPerUser_ > 0, \\\"Invalid max value\\\");\\n        _minPerUser = minPerUser_;\\n        _maxPerUser = maxPerUser_;\\n    }\\n\\n    function viewLimitation() external view returns (uint256, uint256) {\\n        return (_minPerUser, _maxPerUser);\\n    }\\n\\n    /**\\n     * @dev Update ICO price\\n     *\\n     * Only owner is allowed to call this function\\n     */\\n    function updateIcoPrice(uint256 icoPrice_) external onlyOwner {\\n        require(block.timestamp < _startDate, \\\"ICO already started\\\");\\n        require(icoPrice_ > 0, \\\"Invalid price\\\");\\n        _icoPrice = icoPrice_;\\n    }\\n\\n    function viewIcoPrice() external view returns (uint256) {\\n        return _icoPrice;\\n    }\\n\\n    /**\\n     * @notice View referrer of the given account\\n     * @param account_ Referred account\\n     */\\n    function viewReferrer(address account_) external view returns (address) {\\n        return _userDatas[account_].referrer;\\n    }\\n\\n    /**\\n     * @notice View referred user count of the given referrer\\n     */\\n    function viewReferredCount(\\n        address account_\\n    ) external view returns (uint256) {\\n        return _referredCounts[account_];\\n    }\\n\\n    /**\\n     * @notice View total contributed amount by the users who are referred by this referrer\\n     * @param referrer_ Given referrer\\n     */\\n    function viewReferredContributes(\\n        address referrer_\\n    ) external view returns (uint256) {\\n        return _referredContributes[referrer_];\\n    }\\n\\n    /**\\n     * @notice View distributed referral fee amount to this referrer\\n     * @param referrer_ Given referrer\\n     */\\n    function viewReferrerDistributes(\\n        address referrer_\\n    ) external view returns (uint256) {\\n        return _referrerDistributes[referrer_];\\n    }\\n\\n    /**\\n     * @dev Recover ETH sent to the contract\\n     *\\n     * Only owner allowed to call this function\\n     */\\n    function recoverETH() external onlyOwner {\\n        require(_fundsWithdrawn, \\\"Not available until withdraw funds\\\");\\n        uint256 etherBalance = address(this).balance;\\n        require(etherBalance > 0, \\\"No ETH\\\");\\n        payable(_msgSender()).transfer(etherBalance);\\n    }\\n\\n    /**\\n     * @dev It allows the admin to recover tokens sent to the contract\\n     * @param token_: the address of the token to withdraw\\n     * @param amount_: the number of tokens to withdraw\\n     *\\n     * This function is only callable by owner\\n     */\\n    function recoverToken(address token_, uint256 amount_) external onlyOwner {\\n        require(token_ != address(_icoToken), \\\"Not allowed token\\\");\\n        require(amount_ > 0, \\\"Non zero value\\\");\\n        IERC20(token_).safeTransfer(_msgSender(), amount_);\\n    }\\n\\n    /**\\n     * @dev To receive ETH in the ICO contract\\n     */\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// File: contracts/UniversalERC20.sol\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary UniversalERC20 {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    IERC20 private constant ZERO_ADDRESS =\\n        IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant ETH_ADDRESS =\\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        if (isETH(token)) {\\n            payable(address(uint160(to))).sendValue(amount);\\n            return amount;\\n        } else {\\n            uint256 balanceBefore = token.balanceOf(to);\\n            token.safeTransfer(to, amount);\\n            uint256 balanceAfter = token.balanceOf(to);\\n            return balanceAfter - balanceBefore;\\n        }\\n    }\\n\\n    function universalTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        if (isETH(token)) {\\n            require(\\n                from == msg.sender && msg.value >= amount,\\n                \\\"Wrong usage of ETH.universalTransferFrom\\\"\\n            );\\n            if (to != address(this)) {\\n                payable(address(uint160(to))).sendValue(amount);\\n            }\\n            if (msg.value > amount) {\\n                // refund redundant amount\\n                payable(msg.sender).sendValue(msg.value - amount);\\n            }\\n            return amount;\\n        } else {\\n            uint256 balanceBefore = token.balanceOf(to);\\n            token.safeTransferFrom(from, to, amount);\\n            uint256 balanceAfter = token.balanceOf(to);\\n            return balanceAfter - balanceBefore;\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        if (isETH(token)) {\\n            require(\\n                msg.value >= amount,\\n                \\\"Wrong usage of ETH.universalTransferFromSenderToThis\\\"\\n            );\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                payable(msg.sender).sendValue(msg.value - amount);\\n            }\\n            return amount;\\n        } else {\\n            uint256 balanceBefore = token.balanceOf(address(this));\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n            uint256 balanceAfter = token.balanceOf(address(this));\\n            return balanceAfter - balanceBefore;\\n        }\\n    }\\n\\n    function universalApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (!isETH(token)) {\\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, amount);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return 18;\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{\\n            gas: 10000\\n        }(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        if (!success || data.length == 0) {\\n            (success, data) = address(token).staticcall{gas: 10000}(\\n                abi.encodeWithSignature(\\\"DECIMALS()\\\")\\n            );\\n        }\\n\\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (address(token) == address(ZERO_ADDRESS) ||\\n            address(token) == address(ETH_ADDRESS));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"icoToken_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"icoTreasury_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"icoOwner_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFee_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimDate_\",\"type\":\"uint256\"}],\"name\":\"finalizeIco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"softcap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap_\",\"type\":\"uint256\"}],\"name\":\"updateCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimDate_\",\"type\":\"uint256\"}],\"name\":\"updateIcoDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"icoPrice_\",\"type\":\"uint256\"}],\"name\":\"updateIcoPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPerUser_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerUser_\",\"type\":\"uint256\"}],\"name\":\"updateLimitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralFee_\",\"type\":\"uint256\"}],\"name\":\"updateReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewIcoDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewIcoOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewIcoPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewIcoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewIcoTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewLimitation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"}],\"name\":\"viewReferredContributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"viewReferredCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"viewReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"}],\"name\":\"viewReferrerDistributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTreasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"viewUserContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"viewUserExperienced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BansheesIco", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004b28fa4b5941768078fd471802e74607341d3b7c000000000000000000000000992a08125bc0d8b5717626e93287e9a2d21867f6000000000000000000000000992a08125bc0d8b5717626e93287e9a2d21867f600000000000000000000000000000000000000000000000000000000000000c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}