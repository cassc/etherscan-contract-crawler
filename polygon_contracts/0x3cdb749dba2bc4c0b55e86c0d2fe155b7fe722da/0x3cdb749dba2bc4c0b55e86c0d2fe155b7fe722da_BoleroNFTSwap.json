{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BoleroNFTSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588          \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2580    \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588        \u2584\u2588\u2588\u2588\u2584\u2584\u2584      \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2580 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580     \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580   \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584   \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \\n                        \u2580                        \u2588\u2588\u2588    \u2588\u2588\u2588   \\n*/\\n\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/IBoleroERC721.sol\\\";\\n\\ninterface IBoleroABI {\\n    function management() external view returns (address);\\n\\n    function rewards() external view returns (address);\\n}\\n\\ninterface IBoleroNFT {\\n    struct Royalties {\\n        uint256 boleroFeesPrimary;\\n        uint256 boleroFeesSecondary;\\n        uint256 artistRoyalties;\\n    }\\n\\n    struct Collection {\\n        address artist;\\n        address payment;\\n        address privateSaleToken;\\n        string collectionName;\\n        uint256 collectionId;\\n        uint256 cap;\\n        Royalties royalties;\\n        uint256 privateSaleThreshold;\\n        bool isWithPaymentSplitter;\\n    }\\n\\n    function royaltiesForBolero() external view returns (uint256);\\n\\n    function royaltiesForArtist() external view returns (uint256);\\n\\n    function artistPayment(uint256 _tokenID) external view returns (address);\\n\\n    function getRoyalties(uint256 _tokenID) external view returns (uint256);\\n\\n    function setSecondaryMarketStatus(uint256 _tokenID) external;\\n\\n    function getIsSecondaryMarket(uint256 _tokenID) external view returns (bool);\\n\\n    function canSwap(address _userAddress, uint256 _tokenID)\\n        external\\n        view\\n        returns (bool);\\n    \\n    /******************************************************************\\n    * @dev Returns if the token is locked (non-transferrable) or not.\\n    ******************************************************************/\\n    function isLocked(uint256 _id) external view returns(bool);\\n\\n    /******************************************************************\\n    * @dev Locks a token, preventing it from being transferrable\\n    /******************************************************************/\\n    function lockId(uint256 _id) external;\\n\\n    /******************************************************************\\n    * @dev Unlocks a token.\\n    ******************************************************************/\\n    function unlockId(uint256 _id) external;\\n\\n    function autoLockId(uint256 _id) external; \\n      \\n    function getCollectionForToken(uint256 _tokenID) external returns (Collection memory);\\n}\\n\\ncontract Controller {\\n    address public bolero = address(0); //Management address\\n    address public rewards = address(0); //address used to send the rewards\\n\\n    IBoleroABI public boleroContract;\\n\\n    bool public isEmergencyPause = false;\\n\\n    modifier onlyBolero() {\\n        require(\\n            address(msg.sender) == IBoleroABI(bolero).management(),\\n            \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notEmergency() {\\n        require(isEmergencyPause == false, \\\"emergency pause\\\");\\n        _;\\n    }\\n\\n    function getManagement() public view returns (address) {\\n        return IBoleroABI(bolero).management();\\n    }\\n}\\n\\ncontract BoleroNFTSwap is Controller {\\n    using Counters for Counters.Counter;\\n    struct Offer {\\n        address from; // NFT SELLER\\n        address fromPayment; // PAYMENT ADDRESS\\n        address to; // NFT BUYER\\n        address nftAddress; //ADDRESS OF THE NFT CONTRACT\\n        address wantAddress; //ADDRESS OF THE ERC20 CONTRACT\\n        uint256 nftTokenID; //TOKEN ID OF THE NFT TO EXCHANGE\\n        uint256 wantAmount; //AMOUNT OF THE ERC20 TO EXCHANGE\\n        bytes32 status; // Open, Executed, Cancelled\\n    }\\n    struct Bid {\\n        address from; // NFT SELLER\\n        address fromPayment; // PAYMENT ADDRESS\\n        address to; // Current best offer\\n        address nftAddress; //ADDRESS OF THE NFT CONTRACT\\n        address wantAddress; //ADDRESS OF THE ERC20 CONTRACT\\n        uint256 nftTokenID; //TOKEN ID OF THE NFT TO EXCHANGE\\n        uint256 startOffer; //STARTING PRICE FOR THIS AUCTION\\n        uint256 bestOffer; //BEST OFFER OF THE NFT TO EXCHANGE, OR INITIAL PRICE\\n        uint256 startTime; //TIMESTAMP OF THE START OF THE AUCTION\\n        uint256 endTime; //TIMESTAMP OF THE END OF THE AUCTION\\n        bytes32 status; // Open, Executed, Cancelled\\n    }\\n    struct BidMemory {\\n        address from; //Bider\\n        uint256 offer; //Amount of bid\\n        bytes32 status; // Open, Executed, Cancelled\\n    }\\n    struct LastSale {\\n        uint8 saleType; //0 = none, 1 = buy, 2 = sell, 3 = bid\\n        uint256 id; //id of the sale\\n        uint256 timestamp; //when executed\\n        uint256 amount; //amount of want token in exchange\\n        address buyer; //buyer of the sale\\n        address wantToken; //address of the want token\\n    }\\n    struct PaymentConfiguration {\\n        bool isSecondaryMarket;\\n        uint256 royaltiesForBolero;\\n        uint256 royaltiesForArtist;\\n        uint256 amountForBolero;\\n        uint256 amountForArtist;\\n        uint256 amountForSeller;\\n        address artistPayment;\\n    }\\n\\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    mapping(uint256 => Offer) public sellOffers;\\n    mapping(uint256 => Offer) public buyOffers;\\n    mapping(uint256 => Bid) public bids;\\n    mapping(address => mapping(uint256 => uint256[])) public sellOffersEnum;\\n    mapping(address => mapping(uint256 => uint256[])) public buyOffersEnum;\\n    mapping(address => mapping(uint256 => uint256[])) public bidsEnum;\\n    mapping(address => mapping(uint256 => BidMemory[])) public bidsValues;\\n    mapping(address => mapping(uint256 => LastSale)) public lastSale;\\n    Counters.Counter private sellCounter;\\n    Counters.Counter private buyCounter;\\n    Counters.Counter private bidCounter;\\n\\n    event CreateSellOffer(\\n        uint256 indexed sellCounter,\\n        address from,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 wantAmount,\\n        string status\\n    );\\n    event CancelSellOffer(\\n        uint256 indexed sellCounter,\\n        address from,\\n        address indexed nftAddress,\\n        uint256 indexed nftTokenID,\\n        string status\\n    );\\n    event ExecuteSellOffer(\\n        uint256 indexed sellCounter,\\n        address from,\\n        address to,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 wantAmount,\\n        string status\\n    );\\n    event GrantToken(\\n        uint256 indexed sellCounter,\\n        address from,\\n        address to,\\n        address indexed nftAddress,\\n        uint256 indexed nftTokenID\\n    );\\n    event CreateBuyOffer(\\n        uint256 indexed buyCounter,\\n        address from,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 wantAmount,\\n        string status\\n    );\\n    event CancelBuyOffer(\\n        uint256 indexed buyCounter,\\n        address from,\\n        address indexed nftAddress,\\n        uint256 indexed nftTokenID,\\n        string status\\n    );\\n    event ExecuteBuyOffer(\\n        uint256 indexed buyCounter,\\n        address from,\\n        address to,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 wantAmount,\\n        string status\\n    );\\n    event OpenBid(\\n        uint256 indexed bidCounter,\\n        address from,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 startOffer,\\n        uint256 startTime,\\n        uint256 endTime,\\n        string status\\n    );\\n    event PerformBid(\\n        uint256 indexed bidCounter,\\n        address from,\\n        address to,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 startOffer\\n    );\\n    event CancelBid(\\n        uint256 indexed bidCounter,\\n        address from,\\n        address indexed nftAddress,\\n        uint256 indexed nftTokenID,\\n        string status\\n    );\\n    event CancelBidOffer(\\n        uint256 indexed bidOfferCounter,\\n        address from,\\n        address indexed nftAddress,\\n        uint256 indexed nftTokenID,\\n        string status\\n    );\\n    event ExecuteBid(\\n        uint256 indexed bidCounter,\\n        address from,\\n        address to,\\n        address indexed nftAddress,\\n        address wantAddress,\\n        uint256 indexed nftTokenID,\\n        uint256 wantAmount,\\n        string status\\n    );\\n\\n\\n    constructor(address _management, address _rewards) {\\n        rewards = _rewards;\\n        bolero = _management;\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Open a new sell offer. A sell offer can occurs when a user has\\n     *          a NFT and want to sell it. To a specific price.\\n     *          The sell order will be added on chain and available for anyone\\n     *          to buy it.\\n     *\\n     *  @dev The NFT is locked in the contract until the trade is executed or cancelled.\\n     *       The trade will fail if the NFT is not approved.\\n     *\\n     *  @param _nftAddress address of the Bolero NFT contract to sell\\n     *  @param _wantAddress address of the ERC20 contract the user wants in countervalue\\n     *  @param _payment address to use to receive the payment\\n     *  @param _nftTokenID ID of the NFT to sell\\n     *  @param _wantAmount amount of the ERC20 the user wants.\\n     *************************************************************************************/\\n    function openSellOffer(\\n        address _nftAddress,\\n        address _wantAddress,\\n        address _payment,\\n        uint256 _nftTokenID,\\n        uint256 _wantAmount\\n    ) public {\\n        sellCounter.increment();\\n        uint256 _sellCounter = sellCounter.current();\\n        IERC721(_nftAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _nftTokenID\\n        );\\n        sellOffersEnum[_nftAddress][_nftTokenID].push(_sellCounter);\\n        sellOffers[_sellCounter] = Offer({\\n            from: msg.sender,\\n            fromPayment: _payment,\\n            to: address(0),\\n            nftAddress: _nftAddress,\\n            nftTokenID: _nftTokenID,\\n            wantAddress: _wantAddress,\\n            wantAmount: _wantAmount,\\n            status: \\\"Open\\\"\\n        });\\n        emit CreateSellOffer(\\n            _sellCounter,\\n            msg.sender,\\n            _nftAddress,\\n            _wantAddress,\\n            _nftTokenID,\\n            _wantAmount,\\n            \\\"Open\\\"\\n        );\\n    }\\n\\n    function openSellOffer(\\n        address _nftAddress,\\n        address _wantAddress,\\n        address _owner,\\n        address _payment,\\n        uint256 _nftTokenID,\\n        uint256 _wantAmount\\n    ) public {\\n        sellCounter.increment();\\n        uint256 _sellCounter = sellCounter.current();\\n        IERC721(_nftAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _nftTokenID\\n        );\\n        sellOffersEnum[_nftAddress][_nftTokenID].push(_sellCounter);\\n        sellOffers[_sellCounter] = Offer({\\n            from: _owner,\\n            fromPayment: _payment,\\n            to: address(0),\\n            nftAddress: _nftAddress,\\n            nftTokenID: _nftTokenID,\\n            wantAddress: _wantAddress,\\n            wantAmount: _wantAmount,\\n            status: \\\"Open\\\"\\n        });\\n        emit CreateSellOffer(\\n            _sellCounter,\\n            _owner,\\n            _nftAddress,\\n            _wantAddress,\\n            _nftTokenID,\\n            _wantAmount,\\n            \\\"Open\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Cancel one of my existing trades. Only by the owner of the trade. Only\\n     *          if the trade is not executed.\\n     *\\n     *  @dev The NFT will be returned to the user and the trade set as Cancelled.\\n     *\\n     *  @param _sellCounter ID of the trade to cancel\\n     *************************************************************************************/\\n    function cancelSellOffer(uint256 _sellCounter) public {\\n        Offer memory offer = sellOffers[_sellCounter];\\n        require(msg.sender == offer.from, \\\"!not seller\\\");\\n        require(offer.status == \\\"Open\\\", \\\"!open\\\");\\n        sellOffers[_sellCounter].status = \\\"Cancelled\\\";\\n\\n        IERC721(offer.nftAddress).transferFrom(\\n            address(this),\\n            offer.from,\\n            offer.nftTokenID\\n        );\\n        emit CancelSellOffer(\\n            _sellCounter,\\n            msg.sender,\\n            offer.nftAddress,\\n            offer.nftTokenID,\\n            \\\"Cancelled\\\"\\n        );\\n    }\\n\\n    function configurePaymentOption(address _nftAddress, uint256 _tokenID, uint256 wantAmount) internal returns (PaymentConfiguration memory) {\\n        PaymentConfiguration memory payment;\\n        payment.isSecondaryMarket = IBoleroNFT(_nftAddress).getIsSecondaryMarket(_tokenID);\\n        payment.royaltiesForBolero = payment.isSecondaryMarket ? IBoleroNFT(_nftAddress).getCollectionForToken(_tokenID).royalties.boleroFeesSecondary : IBoleroNFT(_nftAddress).getCollectionForToken(_tokenID).royalties.boleroFeesPrimary;\\n        payment.royaltiesForArtist = IBoleroNFT(_nftAddress).getRoyalties(_tokenID);\\n        payment.amountForBolero = (wantAmount * payment.royaltiesForBolero) / 10000;\\n        payment.amountForArtist = (wantAmount * payment.royaltiesForArtist) / 10000;\\n        payment.amountForSeller = payment.isSecondaryMarket ? wantAmount - (payment.amountForBolero + payment.amountForArtist) : wantAmount - payment.amountForBolero;\\n\\n        //Retrieve the address of the artist and the address of BoleroRewards to increment\\n        //their treasures.\\n        payment.artistPayment = IBoleroNFT(_nftAddress).artistPayment(_tokenID);\\n        return payment;\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Execute a trade. Can be called by anyone but the seller. The trade should\\n     *          be in the Open state.\\n     *          Some royalties will be paid to the artist and Bolero based on the values\\n     *          set in the NFT Contract. Theses fees will be substracted from the amount\\n     *          of ERC20 the seller will get and put in a treasury, ready to be claimed.\\n     *\\n     *  @param _sellCounter ID of the trade to cancel\\n     *************************************************************************************/\\n    function executeMetaSellOffer(uint256 _sellCounter, address recipient)\\n        public\\n        notEmergency\\n    {\\n        Offer memory offer = sellOffers[_sellCounter];\\n        require(offer.status == \\\"Open\\\", \\\"!open\\\");\\n        require(offer.from != msg.sender, \\\"!msg.sender\\\");\\n        require(\\n            IBoleroNFT(offer.nftAddress).canSwap(msg.sender, offer.nftTokenID),\\n            \\\"!whitelist\\\"\\n        );\\n\\n        sellOffers[_sellCounter].to = recipient;\\n        sellOffers[_sellCounter].status = \\\"Executed\\\";\\n\\n        //Compute the royalties for Bolero and the artist, and get the final amount\\n        //for the seller.\\n         \\n        PaymentConfiguration memory config = configurePaymentOption(offer.nftAddress,offer.nftTokenID, offer.wantAmount);\\n\\n        //Transfering the offer to this contract\\n        require(\\n            IERC20(offer.wantAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                offer.wantAmount\\n            )\\n        );\\n\\n        //Send the fees to Bolero and the Artist paiement contract. Sending the paiement to the seller\\n        require(IERC20(offer.wantAddress).transfer(rewards, config.amountForBolero));\\n\\n        if(config.isSecondaryMarket){\\n            require(\\n                IERC20(offer.wantAddress).transfer(config.artistPayment, config.amountForArtist)\\n            );\\n        }\\n        require(\\n            IERC20(offer.wantAddress).transfer(offer.from, config.amountForSeller)\\n        );\\n\\n        //Send the nft to the buyer\\n        IERC721(offer.nftAddress).transferFrom(\\n            address(this),\\n            recipient,\\n            offer.nftTokenID\\n        );\\n\\n        if(!config.isSecondaryMarket) IBoleroNFT(offer.nftAddress).autoLockId(offer.nftTokenID);\\n        IBoleroNFT(offer.nftAddress).setSecondaryMarketStatus(offer.nftTokenID);\\n        lastSale[offer.nftAddress][offer.nftTokenID] = LastSale(\\n            2,\\n            _sellCounter,\\n            block.timestamp,\\n            offer.wantAmount,\\n            recipient,\\n            offer.wantAddress\\n        );\\n\\n        emit ExecuteSellOffer(\\n            _sellCounter,\\n            offer.from,\\n            recipient,\\n            offer.nftAddress,\\n            offer.wantAddress,\\n            offer.nftTokenID,\\n            offer.wantAmount,\\n            \\\"Executed\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Execute a trade. Can be called by anyone but the seller. The trade should\\n     *          be in the Open state.\\n     *          Some royalties will be paid to the artist and Bolero based on the values\\n     *          set in the NFT Contract. Theses fees will be substracted from the amount\\n     *          of ERC20 the seller will get and put in a treasury, ready to be claimed.\\n     *\\n     *  @param _sellCounter ID of the trade to cancel\\n     *************************************************************************************/\\n    function executeSellOffer(uint256 _sellCounter) public notEmergency {\\n        Offer memory offer = sellOffers[_sellCounter];\\n        require(offer.status == \\\"Open\\\", \\\"!open\\\");\\n        require(offer.from != msg.sender, \\\"!msg.sender\\\");\\n        require(\\n            IBoleroNFT(offer.nftAddress).canSwap(msg.sender, offer.nftTokenID),\\n            \\\"!whitelist\\\"\\n        );\\n\\n        sellOffers[_sellCounter].to = msg.sender;\\n        sellOffers[_sellCounter].status = \\\"Executed\\\";\\n\\n        //Compute the royalties for Bolero and the artist, and get the final amount\\n        //for the seller.\\n        PaymentConfiguration memory config = configurePaymentOption(offer.nftAddress, offer.nftTokenID, offer.wantAmount);\\n            \\n        //Transfering the offer to this contract\\n        require(\\n            IERC20(offer.wantAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                offer.wantAmount\\n            )\\n        );\\n\\n        //Send the fees to Bolero and the Artist paiement contract. Sending the paiement to the seller\\n        require(IERC20(offer.wantAddress).transfer(rewards, config.amountForBolero));\\n        if(config.isSecondaryMarket){\\n            require(\\n                IERC20(offer.wantAddress).transfer(config.artistPayment, config.amountForArtist)\\n            );\\n        }\\n        require(\\n            IERC20(offer.wantAddress).transfer(\\n                offer.fromPayment,\\n                config.amountForSeller\\n            )\\n        );\\n\\n        //Send the nft to the buyer\\n        IERC721(offer.nftAddress).transferFrom(\\n            address(this),\\n            msg.sender,\\n            offer.nftTokenID\\n        );\\n\\n        if(!config.isSecondaryMarket) IBoleroNFT(offer.nftAddress).autoLockId(offer.nftTokenID);\\n        IBoleroNFT(offer.nftAddress).setSecondaryMarketStatus(offer.nftTokenID);\\n        lastSale[offer.nftAddress][offer.nftTokenID] = LastSale(\\n            2,\\n            _sellCounter,\\n            block.timestamp,\\n            offer.wantAmount,\\n            msg.sender,\\n            offer.wantAddress\\n        );\\n\\n        emit ExecuteSellOffer(\\n            _sellCounter,\\n            offer.from,\\n            msg.sender,\\n            offer.nftAddress,\\n            offer.wantAddress,\\n            offer.nftTokenID,\\n            offer.wantAmount,\\n            \\\"Executed\\\"\\n        );\\n    }\\n\\n    function executeBulkSellOffer(uint256[] memory _sellCounters) public notEmergency {\\n      for (uint256 index = 0; index < _sellCounters.length; index++) {\\n        Offer memory offer = sellOffers[_sellCounters[index]];\\n        require(offer.status == \\\"Open\\\", \\\"!open\\\");\\n        require(offer.from != msg.sender, \\\"!msg.sender\\\");\\n        require(\\n            IBoleroNFT(offer.nftAddress).canSwap(msg.sender, offer.nftTokenID),\\n            \\\"!whitelist\\\"\\n        );\\n        \\n        sellOffers[_sellCounters[index]].to = msg.sender;\\n        sellOffers[_sellCounters[index]].status = \\\"Executed\\\";\\n\\n        //Compute the royalties for Bolero and the artist, and get the final amount\\n        //for the seller.\\n        PaymentConfiguration memory config = configurePaymentOption(offer.nftAddress, offer.nftTokenID, offer.wantAmount);\\n\\n        //Transfering the offer to this contract\\n        require(\\n            IERC20(offer.wantAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                offer.wantAmount\\n            )\\n        );\\n\\n        //Send the fees to Bolero and the Artist paiement contract. Sending the paiement to the seller\\n        require(IERC20(offer.wantAddress).transfer(rewards, config.amountForBolero));\\n        if(config.isSecondaryMarket){\\n            require(\\n                IERC20(offer.wantAddress).transfer(config.artistPayment, config.amountForArtist)\\n            );\\n        }\\n        require(\\n            IERC20(offer.wantAddress).transfer(\\n                offer.fromPayment,\\n                config.amountForSeller\\n            )\\n        );\\n\\n        //Send the nft to the buyer\\n        IERC721(offer.nftAddress).transferFrom(\\n            address(this),\\n            msg.sender,\\n            offer.nftTokenID\\n        );\\n\\n        if(!config.isSecondaryMarket) IBoleroNFT(offer.nftAddress).autoLockId(offer.nftTokenID);\\n        IBoleroNFT(offer.nftAddress).setSecondaryMarketStatus(offer.nftTokenID);\\n        lastSale[offer.nftAddress][offer.nftTokenID] = LastSale(\\n            2,\\n            _sellCounters[index],\\n            block.timestamp,\\n            offer.wantAmount,\\n            msg.sender,\\n            offer.wantAddress\\n        );\\n\\n        emit ExecuteSellOffer(\\n            _sellCounters[index],\\n            offer.from,\\n            msg.sender,\\n            offer.nftAddress,\\n            offer.wantAddress,\\n            offer.nftTokenID,\\n            offer.wantAmount,\\n            \\\"Executed\\\"\\n        );\\n      }\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Open a new buy offer. A buy offer can occurs when a user wants to buy an\\n     *          NFT to a specific price, even if there is no sell order currently\\n     *          available.\\n     *          The buy order will be added on chain and available the NFT owner to sell.\\n     *\\n     *  @dev The payout is locked in the contract until the trade is executed or\\n     *       cancelled. The trade will fail if the tokens are not approved.\\n     *\\n     *  @param _nftAddress address of the Bolero NFT contract to sell\\n     *  @param _wantAddress address of the ERC20 contract the user wants in countervalue\\n     *  @param _nftTokenID ID of the NFT to sell\\n     *  @param _wantAmount amount of the ERC20 the user wants.\\n     *************************************************************************************/\\n    function openBuyOffer(\\n        address _nftAddress,\\n        address _wantAddress,\\n        uint256 _nftTokenID,\\n        uint256 _wantAmount\\n    ) public {\\n        require(\\n            IERC20(_wantAddress).balanceOf(msg.sender) >= _wantAmount,\\n            \\\"!balance\\\"\\n        );\\n        require(\\n            IERC20(_wantAddress).allowance(msg.sender, address(this)) >=\\n                _wantAmount,\\n            \\\"!balance\\\"\\n        );\\n        require(\\n            IBoleroNFT(_nftAddress).canSwap(msg.sender, _nftTokenID),\\n            \\\"!whitelist\\\"\\n        );\\n\\n        buyCounter.increment();\\n        uint256 _buyCounter = buyCounter.current();\\n        buyOffersEnum[_nftAddress][_nftTokenID].push(_buyCounter);\\n        buyOffers[_buyCounter] = Offer({\\n            from: msg.sender,\\n            fromPayment: msg.sender,\\n            to: address(0),\\n            nftAddress: _nftAddress,\\n            nftTokenID: _nftTokenID,\\n            wantAddress: _wantAddress,\\n            wantAmount: _wantAmount,\\n            status: \\\"Open\\\"\\n        });\\n        emit CreateBuyOffer(\\n            _buyCounter,\\n            msg.sender,\\n            _nftAddress,\\n            _wantAddress,\\n            _nftTokenID,\\n            _wantAmount,\\n            \\\"Open\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Cancel one of my existing trades. Only by the owner of the trade. Only\\n     *          if the trade is not executed.\\n     *\\n     *  @dev The wantAmount will be returned to the user and the trade set as Cancelled.\\n     *\\n     *  @param _buyCounter ID of the trade to cancel\\n     *************************************************************************************/\\n    function cancelBuyOffer(uint256 _buyCounter) public {\\n        Offer memory offer = buyOffers[_buyCounter];\\n        require(msg.sender == offer.from, \\\"!authorized\\\");\\n        require(offer.status == \\\"Open\\\", \\\"!open\\\");\\n        buyOffers[_buyCounter].status = \\\"Cancelled\\\";\\n        emit CancelBuyOffer(\\n            _buyCounter,\\n            msg.sender,\\n            offer.nftAddress,\\n            offer.nftTokenID,\\n            \\\"Cancelled\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Execute a trade. The trade should be in the Open state.\\n     *          Some royalties will be paid to the artist and Bolero based on the values\\n     *          set in the NFT Contract. Theses fees will be substracted from the amount\\n     *          of ERC20 the seller will get and put in a treasury, ready to be claimed.\\n     *\\n     *  @param _buyCounter ID of the trade to cancel\\n     *************************************************************************************/\\n    function executeBuyOffer(uint256 _buyCounter)\\n        public\\n        notEmergency\\n    {\\n        Offer memory offer = buyOffers[_buyCounter];\\n        require(offer.status == \\\"Open\\\", \\\"!open\\\");\\n        require(offer.from != msg.sender, \\\"!msg.sender\\\");\\n\\n        buyOffers[_buyCounter].to = msg.sender;\\n        buyOffers[_buyCounter].status = \\\"Executed\\\";\\n\\n        //Compute the royalties for Bolero and the artist, and get the final amount\\n        //for the seller.\\n \\n        PaymentConfiguration memory config = configurePaymentOption(offer.nftAddress, offer.nftTokenID, offer.wantAmount);\\n        //Transfering the offer to this contract\\n        require(\\n            IERC20(offer.wantAddress).transferFrom(\\n                offer.from,\\n                address(this),\\n                offer.wantAmount\\n            )\\n        );\\n\\n        //Send the fees to Bolero and the Artist paiement contract. Sending the paiement to the seller\\n        require(IERC20(offer.wantAddress).transfer(rewards, config.amountForBolero));\\n        if(config.isSecondaryMarket){\\n            require(\\n                IERC20(offer.wantAddress).transfer(config.artistPayment, config.amountForArtist)\\n            );\\n            require(IERC20(offer.wantAddress).transfer(msg.sender, config.amountForSeller));\\n        } else {\\n            require(IERC20(offer.wantAddress).transfer(config.artistPayment, config.amountForSeller));\\n        }\\n\\n        //Send the nft to the buyer\\n        IERC721(offer.nftAddress).transferFrom(\\n            msg.sender,\\n            offer.from,\\n            offer.nftTokenID\\n        );\\n       \\n        if(!config.isSecondaryMarket) IBoleroNFT(offer.nftAddress).autoLockId(offer.nftTokenID);\\n        IBoleroNFT(offer.nftAddress).setSecondaryMarketStatus(offer.nftTokenID);\\n\\n        lastSale[offer.nftAddress][offer.nftTokenID] = LastSale(\\n            1,\\n            _buyCounter,\\n            block.timestamp,\\n            offer.wantAmount,\\n            offer.from,\\n            offer.wantAddress\\n        );\\n\\n        emit ExecuteBuyOffer(\\n            _buyCounter,\\n            offer.from,\\n            msg.sender,\\n            offer.nftAddress,\\n            offer.wantAddress,\\n            offer.nftTokenID,\\n            offer.wantAmount,\\n            \\\"Executed\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Create a new auction. An auction can occurs when a user wants to sell an\\n     *          NFT to a non specific price and let buyers bid on it.\\n     *\\n     *  @dev The NFT is locked in the contract until the trade is executed or cancelled.\\n     *       The trade will fail if the NFT is not approved.\\n     *\\n     *  @param _nftAddress address of the Bolero NFT contract to sell\\n     *  @param _wantAddress address of the ERC20 contract the user wants in countervalue\\n     *  @param _nftTokenID ID of the NFT to sell\\n     *  @param _startOffer start price for this bid\\n     *************************************************************************************/\\n\\n    function openBid(\\n        address _nftAddress,\\n        address _wantAddress,\\n        address _fromPayment,\\n        uint256 _nftTokenID,\\n        uint256 _startOffer,\\n        uint256[2] memory _startEndTime\\n    ) public {\\n        require(\\n            _startEndTime[0] >= block.timestamp || _startEndTime[0] == 0,\\n            \\\"!timestamp\\\"\\n        );\\n        require(_startEndTime[1] > _startEndTime[0], \\\"!endTime\\\");\\n        bidCounter.increment();\\n        uint256 _bidCounter = bidCounter.current();\\n        IERC721(_nftAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _nftTokenID\\n        );\\n        bidsEnum[_nftAddress][_nftTokenID].push(_bidCounter);\\n        bidsValues[_nftAddress][_nftTokenID].push(\\n            BidMemory(address(0), _startOffer, \\\"Open\\\")\\n        );\\n        bids[_bidCounter] = Bid({\\n            from: msg.sender,\\n            fromPayment: _fromPayment,\\n            to: address(0),\\n            nftAddress: _nftAddress,\\n            nftTokenID: _nftTokenID,\\n            wantAddress: _wantAddress,\\n            startOffer: _startOffer,\\n            bestOffer: _startOffer,\\n            startTime: _startEndTime[0],\\n            endTime: _startEndTime[1],\\n            status: \\\"Open\\\"\\n        });\\n        emit OpenBid(\\n            _bidCounter,\\n            msg.sender,\\n            _nftAddress,\\n            _wantAddress,\\n            _nftTokenID,\\n            _startOffer,\\n            _startEndTime[0],\\n            _startEndTime[1],\\n            \\\"Open\\\"\\n        );\\n    }\\n\\n    function openBid(\\n        address _nftAddress,\\n        address _wantAddress,\\n        address _owner,\\n        address _fromPayment,\\n        uint256 _nftTokenID,\\n        uint256 _startOffer,\\n        uint256[2] memory _startEndTime\\n    ) public returns (uint256) {\\n        require(\\n            _startEndTime[0] >= block.timestamp || _startEndTime[0] == 0,\\n            \\\"!timestamp\\\"\\n        );\\n        require(_startEndTime[1] > _startEndTime[0], \\\"!endTime\\\");\\n        bidCounter.increment();\\n        uint256 _bidCounter = bidCounter.current();\\n        IERC721(_nftAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _nftTokenID\\n        );\\n        bidsEnum[_nftAddress][_nftTokenID].push(_bidCounter);\\n        bidsValues[_nftAddress][_nftTokenID].push(\\n            BidMemory(address(0), _startOffer, \\\"Open\\\")\\n        );\\n        bids[_bidCounter] = Bid({\\n            from: _owner,\\n            fromPayment: _fromPayment,\\n            to: address(0),\\n            nftAddress: _nftAddress,\\n            nftTokenID: _nftTokenID,\\n            wantAddress: _wantAddress,\\n            startOffer: _startOffer,\\n            bestOffer: _startOffer,\\n            startTime: _startEndTime[0],\\n            endTime: _startEndTime[1],\\n            status: \\\"Open\\\"\\n        });\\n        emit OpenBid(\\n            _bidCounter,\\n            _owner,\\n            _nftAddress,\\n            _wantAddress,\\n            _nftTokenID,\\n            _startOffer,\\n            _startEndTime[0],\\n            _startEndTime[1],\\n            \\\"Open\\\"\\n        );\\n        return _nftTokenID;\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Add a new bid to an existing auction.\\n     *\\n     *  @dev This function will check if the bidder has enough ERC20 to pay the bid, and\\n     *       if the ERC20 are approved by the contract. It will also check if the\\n     *       auction is still open, and if the bid is higher than the current best.\\n     *       No funds are transfered, only the approval is checked.\\n     *\\n     *  @param _bidCounter ID of the auction to bid on\\n     *  @param _offer amount to bid\\n     *************************************************************************************/\\n    function performBid(uint256 _bidCounter, uint256 _offer) public {\\n        Bid memory bid = bids[_bidCounter];\\n        require(bid.status == \\\"Open\\\", \\\"!open\\\");\\n        require(\\n            block.timestamp >= bid.startTime || bid.startTime == 0,\\n            \\\"!timestamp\\\"\\n        );\\n        require(block.timestamp < bid.endTime, \\\"!endTime\\\");\\n        require(bid.from != msg.sender, \\\"!msg.sender\\\");\\n        require(bid.bestOffer < _offer, \\\"!offer\\\");\\n        require(\\n            IERC20(bid.wantAddress).balanceOf(msg.sender) >= _offer,\\n            \\\"!balance\\\"\\n        );\\n        require(\\n            IERC20(bid.wantAddress).allowance(msg.sender, address(this)) >=\\n                _offer,\\n            \\\"!balance\\\"\\n        );\\n        require(\\n            IBoleroNFT(bid.nftAddress).canSwap(msg.sender, bid.nftTokenID),\\n            \\\"!whitelist\\\"\\n        );\\n\\n        bids[_bidCounter].to = msg.sender;\\n        bids[_bidCounter].bestOffer = _offer;\\n        bidsValues[bid.nftAddress][bid.nftTokenID].push(\\n            BidMemory(msg.sender, _offer, \\\"Open\\\")\\n        );\\n        emit PerformBid(\\n            _bidCounter,\\n            bid.from,\\n            msg.sender,\\n            bid.nftAddress,\\n            bid.wantAddress,\\n            bid.nftTokenID,\\n            _offer\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Cancel an auction.\\n     *\\n     *  @dev This function will check if the auction is still open, and if the caller is\\n     *       the owner of the auction. The NFT is transfered back to the owner.\\n     *\\n     *  @param _bidCounter ID of the auction to bid on\\n     *************************************************************************************/\\n    function cancelBid(uint256 _bidCounter) public {\\n        Bid memory bid = bids[_bidCounter];\\n        require(bid.status == \\\"Open\\\", \\\"!open\\\");\\n        require(bid.from == msg.sender, \\\"!authorized\\\");\\n        bids[_bidCounter].status = \\\"Cancelled\\\";\\n        IERC721(bid.nftAddress).transferFrom(\\n            address(this),\\n            bid.from,\\n            bid.nftTokenID\\n        );\\n\\n        emit CancelBid(\\n            _bidCounter,\\n            bid.from,\\n            bid.nftAddress,\\n            bid.nftTokenID,\\n            \\\"Cancelled\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Cancel an user bid\\n     *\\n     *  @param _bidCounter ID of the auction to cancel\\n     *  @param _bidIndex ID of the bid Offer to cancel\\n     *************************************************************************************/\\n    function cancelBidOffer(uint256 _bidCounter, uint256 _bidIndex) public {\\n        Bid memory bid = bids[_bidCounter];\\n        require(bid.status == \\\"Open\\\", \\\"!open\\\");\\n\\n        BidMemory memory bidToCancel = bidsValues[bid.nftAddress][\\n            bid.nftTokenID\\n        ][_bidIndex];\\n        require(bidToCancel.status == \\\"Open\\\", \\\"!open\\\");\\n        require(bidToCancel.from == msg.sender, \\\"!authorized\\\");\\n        bidsValues[bid.nftAddress][bid.nftTokenID][_bidIndex]\\n            .status = \\\"Cancelled\\\";\\n\\n        emit CancelBidOffer(\\n            _bidIndex,\\n            bidToCancel.from,\\n            bid.nftAddress,\\n            bid.nftTokenID,\\n            \\\"Cancelled\\\"\\n        );\\n    }\\n\\n    /*************************************************************************************\\n     *  @notice Allow the owner of the NFT to accept the highest bid.\\n     *\\n     *  @dev This function will check if the bid is not executed yet and will try to take\\n     *       the ERC20 from the bidder to execute the paiement. This will fail is the\\n     *       bidder no longer has enough funds.\\n     *\\n     *  @param _bidCounter ID of the auction to bid on\\n     *  @param _bidIndex ID of the bid Offer to accept\\n     *************************************************************************************/\\n    function acceptBid(uint256 _bidCounter, uint256 _bidIndex) public {\\n        Bid memory bid = bids[_bidCounter];\\n        require(bid.status == \\\"Open\\\", \\\"!open\\\");\\n        require(bid.from == msg.sender, \\\"!authorized\\\");\\n\\n        BidMemory memory bidToAccept = bidsValues[bid.nftAddress][\\n            bid.nftTokenID\\n        ][_bidIndex];\\n        require(bidToAccept.status == \\\"Open\\\", \\\"!open\\\");\\n        require(bidToAccept.from != address(0), \\\"!address0\\\");\\n        require(bidToAccept.offer != 0, \\\"!offer\\\");\\n\\n        bids[_bidCounter].status = \\\"Executed\\\";\\n        bidsValues[bid.nftAddress][bid.nftTokenID][_bidIndex]\\n            .status = \\\"Executed\\\";\\n\\n        //Compute the royalties for Bolero and the artist, and get the final amount\\n        //for the seller.\\n        PaymentConfiguration memory config = configurePaymentOption(bid.nftAddress, bid.nftTokenID, bidToAccept.offer);\\n\\n        //Transfering the bid to this contract\\n        require(\\n            IERC20(bid.wantAddress).transferFrom(\\n                bidToAccept.from,\\n                address(this),\\n                bidToAccept.offer\\n            )\\n        );\\n\\n        //Send the fees to Bolero and the Artist paiement contract. Sending the paiement to the seller\\n        require(IERC20(bid.wantAddress).transfer(rewards, config.amountForBolero));\\n        if(config.isSecondaryMarket){\\n            require(\\n                IERC20(bid.wantAddress).transfer(config.artistPayment, config.amountForArtist)\\n            );\\n        }\\n        require(\\n            IERC20(bid.wantAddress).transfer(bid.fromPayment, config.amountForSeller)\\n        );\\n\\n        lastSale[bid.nftAddress][bid.nftTokenID] = LastSale(\\n            3,\\n            _bidCounter,\\n            block.timestamp,\\n            bidToAccept.offer,\\n            bidToAccept.from,\\n            bid.wantAddress\\n        );\\n\\n        //Send the nft to the buyer\\n        IERC721(bid.nftAddress).transferFrom(\\n            address(this),\\n            bidToAccept.from,\\n            bid.nftTokenID\\n        );\\n        \\n        if(!config.isSecondaryMarket) IBoleroNFT(bid.nftAddress).autoLockId(bid.nftTokenID);\\n        IBoleroNFT(bid.nftAddress).setSecondaryMarketStatus(bid.nftTokenID);\\n\\n        emit ExecuteBid(\\n            _bidCounter,\\n            bid.from,\\n            bidToAccept.from,\\n            bid.nftAddress,\\n            bid.wantAddress,\\n            bid.nftTokenID,\\n            bidToAccept.offer,\\n            \\\"Executed\\\"\\n        );\\n    }\\n\\n    /*******************************************************************************\\n     *  @notice\\n     *  Allow bolero to send tokens to a list of recipients\\n     *  @param recipients: List of addresses to receive the tokens\\n     *  @param nftAddress: nft address contract \\n     *  @param tokenIds: Tokens list to send\\n     *******************************************************************************/\\n    function grantTokens(address[] memory recipients, address nftAddress, uint256[] memory tokenIds)\\n        external\\n        onlyBolero\\n    {\\n        for (uint256 i = 0; i < recipients.length; i++){\\n            IERC721(nftAddress).transferFrom(address(this), recipients[i], tokenIds[i]);\\n                sellOffers[(sellOffersEnum[nftAddress][tokenIds[i]][sellOffersEnum[nftAddress][tokenIds[i]].length - 1])].to = recipients[i];\\n                sellOffers[(sellOffersEnum[nftAddress][tokenIds[i]][sellOffersEnum[nftAddress][tokenIds[i]].length - 1])].status = \\\"Executed\\\";\\n                \\n            if(!IBoleroNFT(nftAddress).getIsSecondaryMarket(tokenIds[i])) {\\n                IBoleroNFT(nftAddress).autoLockId(tokenIds[i]);\\n                IBoleroNFT(nftAddress).setSecondaryMarketStatus(tokenIds[i]);\\n            }\\n                emit GrantToken(\\n                    (sellOffersEnum[nftAddress][tokenIds[i]][sellOffersEnum[nftAddress][tokenIds[i]].length - 1]),\\n                    address(this),\\n                    recipients[i],\\n                    nftAddress,\\n                    tokenIds[i]\\n                );\\n            }\\n    }\\n\\n    function countBids(address _nftAddress, uint256 _nftTokenID)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (bidsEnum[_nftAddress][_nftTokenID]).length;\\n    }\\n\\n    function countSellOffers(address _nftAddress, uint256 _nftTokenID)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (sellOffersEnum[_nftAddress][_nftTokenID]).length;\\n    }\\n\\n    function countBuyOffers(address _nftAddress, uint256 _nftTokenID)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (buyOffersEnum[_nftAddress][_nftTokenID]).length;\\n    }\\n\\n    function countOffersForBid(uint256 _bidCounter)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Bid memory bid = bids[_bidCounter];\\n        return (bidsValues[bid.nftAddress][bid.nftTokenID]).length;\\n    }\\n\\n    function getLastBid(address _nftAddress, uint256 _nftTokenID)\\n        public\\n        view\\n        returns (Bid memory)\\n    {\\n        uint256 numberOfBids = (bidsEnum[_nftAddress][_nftTokenID]).length;\\n        uint256 lastBidEnum = bidsEnum[_nftAddress][_nftTokenID][\\n            numberOfBids - 1\\n        ];\\n        return bids[lastBidEnum];\\n    }\\n\\n    function getLastSell(address _nftAddress, uint256 _nftTokenID)\\n        public\\n        view\\n        returns (Offer memory)\\n    {\\n        uint256 numberOfSells = (sellOffersEnum[_nftAddress][_nftTokenID])\\n            .length;\\n        uint256 lastSellEnum = sellOffersEnum[_nftAddress][_nftTokenID][\\n            numberOfSells - 1\\n        ];\\n        return sellOffers[lastSellEnum];\\n    }\\n\\n    function setRewards(address _newRewards) public onlyBolero {\\n        rewards = _newRewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IBoleroERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IBoleroERC721 {\\n\\n\\t/**\\n\\t * @dev Returns if the token is locked (non-transferrable) or not.\\n\\t */\\n\\tfunction isLocked(uint256 _id) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Locks a token, preventing it from being transferrable\\n\\t */\\n\\tfunction lockId(uint256 _id) external;\\n\\n\\t/**\\n\\t * @dev Unlocks a token.\\n\\t */\\n\\tfunction unlockId(uint256 _id) external;\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidOfferCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"CancelBidOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"CancelBuyOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"CancelSellOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"CreateBuyOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"CreateSellOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"ExecuteBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"ExecuteBuyOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"ExecuteSellOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"}],\"name\":\"GrantToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startOffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"OpenBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startOffer\",\"type\":\"uint256\"}],\"name\":\"PerformBid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIndex\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromPayment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidsEnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidsValues\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bolero\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boleroContract\",\"outputs\":[{\"internalType\":\"contract IBoleroABI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyOffers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromPayment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyOffersEnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidCounter\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIndex\",\"type\":\"uint256\"}],\"name\":\"cancelBidOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyCounter\",\"type\":\"uint256\"}],\"name\":\"cancelBuyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellCounter\",\"type\":\"uint256\"}],\"name\":\"cancelSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"}],\"name\":\"countBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"}],\"name\":\"countBuyOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidCounter\",\"type\":\"uint256\"}],\"name\":\"countOffersForBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"}],\"name\":\"countSellOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_sellCounters\",\"type\":\"uint256[]\"}],\"name\":\"executeBulkSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyCounter\",\"type\":\"uint256\"}],\"name\":\"executeBuyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellCounter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"executeMetaSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellCounter\",\"type\":\"uint256\"}],\"name\":\"executeSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"}],\"name\":\"getLastBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromPayment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"internalType\":\"struct BoleroNFTSwap.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"}],\"name\":\"getLastSell\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromPayment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"internalType\":\"struct BoleroNFTSwap.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"grantTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastSale\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromPayment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_startEndTime\",\"type\":\"uint256[2]\"}],\"name\":\"openBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromPayment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_startEndTime\",\"type\":\"uint256[2]\"}],\"name\":\"openBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmount\",\"type\":\"uint256\"}],\"name\":\"openBuyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmount\",\"type\":\"uint256\"}],\"name\":\"openSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmount\",\"type\":\"uint256\"}],\"name\":\"openSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offer\",\"type\":\"uint256\"}],\"name\":\"performBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOffers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromPayment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOffersEnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoleroNFTSwap", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000004669dfeb2da0c21517447f3a3426ac4adf068168000000000000000000000000631e6bdb902ad0d3cb05d363f7c34853d2c5604e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}