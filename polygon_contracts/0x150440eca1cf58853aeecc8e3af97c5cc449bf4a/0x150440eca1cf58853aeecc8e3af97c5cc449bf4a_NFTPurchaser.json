{"SourceCode": "{\"AccessController.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG----\\n\\npragma solidity ^0.8.13;\\n\\ncontract AccessController {\\n\\n    address public ceoAddress;\\n    mapping (address =\\u003e bool) public isWorker;\\n\\n    event CEOSet(\\n        address newCEO\\n    );\\n\\n    event WorkerAdded(\\n        address newWorker\\n    );\\n\\n    event WorkerRemoved(\\n        address existingWorker\\n    );\\n\\n    constructor() {\\n\\n        address creator = msg.sender;\\n        ceoAddress = creator;\\n        isWorker[creator] = true;\\n\\n        emit CEOSet(\\n            creator\\n        );\\n\\n        emit WorkerAdded(\\n            creator\\n        );\\n    }\\n\\n    modifier onlyCEO() {\\n        require(\\n            msg.sender == ceoAddress,\\n            \\\"AccessControl: CEO_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker() {\\n        require(\\n            isWorker[msg.sender] == true,\\n            \\\"AccessControl: WORKER_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(\\n        address checkingAddress\\n    ) {\\n        require(\\n            checkingAddress != address(0x0),\\n            \\\"AccessControl: INVALID_ADDRESS\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCEO(\\n        address _newCEO\\n    )\\n        external\\n        nonZeroAddress(_newCEO)\\n        onlyCEO\\n    {\\n        ceoAddress = _newCEO;\\n\\n        emit CEOSet(\\n            ceoAddress\\n        );\\n    }\\n\\n    function addWorker(\\n        address _newWorker\\n    )\\n        external\\n        onlyCEO\\n    {\\n        _addWorker(\\n            _newWorker\\n        );\\n    }\\n\\n    function addWorkerBulk(\\n        address[] calldata _newWorkers\\n    )\\n        external\\n        onlyCEO\\n    {\\n        for (uint8 index = 0; index \\u003c _newWorkers.length; index++) {\\n            _addWorker(_newWorkers[index]);\\n        }\\n    }\\n\\n    function _addWorker(\\n        address _newWorker\\n    )\\n        internal\\n        nonZeroAddress(_newWorker)\\n    {\\n        require(\\n            isWorker[_newWorker] == false,\\n            \\u0027AccessControl: worker already exist\\u0027\\n        );\\n\\n        isWorker[_newWorker] = true;\\n\\n        emit WorkerAdded(\\n            _newWorker\\n        );\\n    }\\n\\n    function removeWorker(\\n        address _existingWorker\\n    )\\n        external\\n        onlyCEO\\n    {\\n        _removeWorker(\\n            _existingWorker\\n        );\\n    }\\n\\n    function removeWorkerBulk(\\n        address[] calldata _workerArray\\n    )\\n        external\\n        onlyCEO\\n    {\\n        for (uint8 index = 0; index \\u003c _workerArray.length; index++) {\\n            _removeWorker(_workerArray[index]);\\n        }\\n    }\\n\\n    function _removeWorker(\\n        address _existingWorker\\n    )\\n        internal\\n        nonZeroAddress(_existingWorker)\\n    {\\n        require(\\n            isWorker[_existingWorker] == true,\\n            \\\"AccessControl: worker not detected\\\"\\n        );\\n\\n        isWorker[_existingWorker] = false;\\n\\n        emit WorkerRemoved(\\n            _existingWorker\\n        );\\n    }\\n}\\n\"},\"EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: -- vitally.eth --\\n\\npragma solidity =0.8.14;\\n\\ncontract EIP712Base {\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        )\\n    );\\n\\n    bytes32 internal domainSeperator;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _version\\n    ) {\\n        domainSeperator = keccak256(abi.encode(\\n\\t\\t\\tEIP712_DOMAIN_TYPEHASH,\\n\\t\\t\\tkeccak256(bytes(_name)),\\n\\t\\t\\tkeccak256(bytes(_version)),\\n\\t\\t\\tgetChainID(),\\n\\t\\t\\taddress(this)\\n\\t\\t));\\n    }\\n\\n    function getChainID()\\n        internal\\n        pure\\n        returns (uint256 id)\\n    {\\n\\t\\tassembly {\\n\\t\\t\\tid := 1\\n\\t\\t}\\n\\t}\\n\\n    function getDomainSeperator()\\n        private\\n        view\\n        returns(bytes32)\\n    {\\n\\t\\treturn domainSeperator;\\n\\t}\\n\\n    function toTypedMessageHash(\\n        bytes32 _messageHash\\n    )\\n        internal\\n        view\\n        returns(bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeperator(),\\n                _messageHash\\n            )\\n        );\\n    }\\n}\\n\"},\"EIP712MetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: -- vitally.eth --\\n\\npragma solidity =0.8.14;\\n\\nimport \\\"./EIP712Base.sol\\\";\\n\\nabstract contract EIP712MetaTransaction is EIP712Base {\\n\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n\\n    mapping(address =\\u003e uint256) internal nonces;\\n\\n    struct MetaTransaction {\\n\\t\\tuint256 nonce;\\n\\t\\taddress from;\\n        bytes functionSignature;\\n\\t}\\n\\n    function executeMetaTransaction(\\n        address _userAddress,\\n        bytes memory _functionSignature,\\n        bytes32 _sigR,\\n        bytes32 _sigS,\\n        uint8 _sigV\\n    )\\n        public\\n        payable\\n        returns(bytes memory)\\n    {\\n        MetaTransaction memory metaTx = MetaTransaction(\\n            {\\n                nonce: nonces[_userAddress],\\n                from: _userAddress,\\n                functionSignature: _functionSignature\\n            }\\n        );\\n\\n        require(\\n            verify(\\n                _userAddress,\\n                metaTx,\\n                _sigR,\\n                _sigS,\\n                _sigV\\n            ), \\\"EIP712MetaTransaction: INVALID_SIGNATURE\\\"\\n        );\\n\\n\\t    nonces[_userAddress] =\\n\\t    nonces[_userAddress] + 1;\\n\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(\\n                _functionSignature,\\n                _userAddress\\n            )\\n        );\\n\\n        require(\\n            success,\\n            \\\"EIP712MetaTransaction: INVALID_CALL\\\"\\n        );\\n\\n        emit MetaTransactionExecuted(\\n            _userAddress,\\n            payable(msg.sender),\\n            _functionSignature\\n        );\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(\\n        MetaTransaction memory _metaTx\\n    )\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n\\t\\treturn keccak256(\\n\\t\\t    abi.encode(\\n                META_TRANSACTION_TYPEHASH,\\n                _metaTx.nonce,\\n                _metaTx.from,\\n                keccak256(_metaTx.functionSignature)\\n            )\\n        );\\n\\t}\\n\\n    function verify(\\n        address _user,\\n        MetaTransaction memory _metaTx,\\n        bytes32 _sigR,\\n        bytes32 _sigS,\\n        uint8 _sigV\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address signer = ecrecover(\\n            toTypedMessageHash(\\n                hashMetaTransaction(_metaTx)\\n            ),\\n            _sigV,\\n            _sigR,\\n            _sigS\\n        );\\n\\n        require(\\n            signer != address(0x0),\\n            \\\"EIP712MetaTransaction: INVALID_SIGNATURE\\\"\\n        );\\n\\n\\t\\treturn signer == _user;\\n\\t}\\n\\n    function msgSender()\\n        internal\\n        view\\n        returns(address sender)\\n    {\\n        if (msg.sender == address(this)) {\\n\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n\\n        return sender;\\n    }\\n\\n    function getNonce(\\n        address _user\\n    )\\n        external\\n        view\\n        returns(uint256 nonce)\\n    {\\n        nonce = nonces[_user];\\n    }\\n}\\n\"},\"Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG----\\n\\npragma solidity ^0.8.12;\\n\\ninterface ERC721 {\\n\\n    function ownerOf(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external;\\n}\\n\\ninterface ERC20 {\\n\\n    function burn(\\n        uint256 _amount\\n    )\\n        external;\\n}\\n\\ninterface DGAccessories  {\\n\\n    function issueTokens(\\n        address[] calldata _beneficiaries,\\n        uint256[] calldata _itemIds\\n    )\\n        external;\\n\\n    function encodeTokenId(\\n        uint256 _itemId,\\n        uint256 _issuedId\\n    )\\n        external\\n        pure\\n        returns (uint256 id);\\n\\n    function decodeTokenId(\\n        uint256 _tokenId\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 itemId,\\n            uint256 issuedId\\n        );\\n\\n    function items(\\n        uint256 _id\\n    )\\n        external\\n        view\\n        returns (\\n            string memory rarity,\\n            uint256 maxSupply,\\n            uint256 totalSupply,\\n            uint256 price,\\n            address beneficiary,\\n            string memory metadata,\\n            string memory contentHash\\n        );\\n\\n    function itemsCount()\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"},\"NFTPurchaser.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG---\\n\\npragma solidity =0.8.14;\\n\\nimport \\\"./EIP712MetaTransaction.sol\\\";\\nimport \\\"./AccessController.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\n\\ncontract NFTPurchaser is AccessController, TransferHelper, EIP712MetaTransaction {\\n\\n    uint256 public buyingPrice;\\n    address public paymentToken;\\n\\n    uint256 public saleCount;\\n    uint256 public saleFrame;\\n    uint256 public saleLimit;\\n\\n    bool public allowChangeSaleLimit;\\n\\n    mapping (address =\\u003e address) public targets;\\n    mapping (address =\\u003e uint256) public frames;\\n    mapping (uint256 =\\u003e uint256) public limits;\\n\\n    event Buy(\\n        uint256 indexed tokenId,\\n        uint256 indexed buyCount,\\n        address indexed tokenOwner\\n    );\\n\\n    event SupplyCheck(\\n        string rarity,\\n        uint256 maxSupply,\\n        uint256 price,\\n        address indexed beneficiary,\\n        string indexed metadata,\\n        string indexed contentHash\\n    );\\n\\n    constructor(\\n        uint256 _buyingPrice,\\n        address _paymentToken,\\n        address _accessoriesContract\\n    )\\n        EIP712Base(\\\"NFTPurchaser\\\", \\\"v1.5\\\")\\n    {\\n        saleLimit = 500;\\n        saleFrame = 1 hours;\\n\\n        paymentToken = _paymentToken;\\n        buyingPrice = _buyingPrice;\\n\\n        allowChangeSaleLimit = true;\\n        targets[_accessoriesContract] = _accessoriesContract;\\n\\n        limits[0] = 100;\\n    }\\n\\n    function changeBuyingPrice(\\n        uint256 _newBuyingPrice\\n    )\\n        external\\n        onlyCEO\\n    {\\n        buyingPrice = _newBuyingPrice;\\n    }\\n\\n    function changeBuyingLimits(\\n        uint256 _itemId,\\n        uint256 _newLimit\\n    )\\n        external\\n        onlyCEO\\n    {\\n        limits[_itemId] = _newLimit;\\n    }\\n\\n    function changeSaleFrame(\\n        uint256 _newSaleFrame\\n    )\\n        external\\n        onlyCEO\\n    {\\n        saleFrame = _newSaleFrame;\\n    }\\n\\n    function changeSaleLimit(\\n        uint256 _newSaleLimit\\n    )\\n        external\\n        onlyCEO\\n    {\\n        require(\\n            allowChangeSaleLimit == true,\\n            \\\"NFTPurchaser: DISABLED\\\"\\n        );\\n\\n        saleLimit = _newSaleLimit;\\n    }\\n\\n    function disabledSaleLimitChange()\\n        external\\n        onlyCEO\\n    {\\n        allowChangeSaleLimit = false;\\n    }\\n\\n    function changePaymentToken(\\n        address _newPaymentToken\\n    )\\n        external\\n        onlyCEO\\n    {\\n        paymentToken = _newPaymentToken;\\n    }\\n\\n    function changeTargetContract(\\n        address _tokenAddress,\\n        address _accessoriesContract\\n    )\\n        external\\n        onlyCEO\\n    {\\n        targets[_tokenAddress] = _accessoriesContract;\\n    }\\n\\n    function purchaseToken(\\n        uint256 _itemId,\\n        address _buyerAddress,\\n        address _tokenAddress\\n    )\\n        external\\n    {\\n        require(\\n            saleLimit \\u003e saleCount,\\n            \\\"NFTPurchaser: SOLD_OUT\\\"\\n        );\\n\\n        unchecked {\\n            saleCount =\\n            saleCount + 1;\\n        }\\n\\n        require(\\n            limits[_itemId] \\u003e 0,\\n            \\\"NFTPurchaser: LIMITED\\\"\\n        );\\n\\n        unchecked {\\n            limits[_itemId] =\\n            limits[_itemId] - 1;\\n        }\\n\\n        require(\\n            canPurchaseAgain(_buyerAddress),\\n            \\\"NFTPurchaser: COOL_DOWN_DETECTED\\\"\\n        );\\n\\n        frames[_buyerAddress] = block.timestamp;\\n\\n        safeTransferFrom(\\n            paymentToken,\\n            msgSender(),\\n            ceoAddress,\\n            buyingPrice\\n        );\\n\\n        DGAccessories target = DGAccessories(\\n            targets[_tokenAddress]\\n        );\\n\\n        uint256 newTokenId = target.encodeTokenId(\\n            _itemId,\\n            getSupply(_itemId, targets[_tokenAddress]) + 1\\n        );\\n\\n        address[] memory beneficiaries = new address[](1);\\n        beneficiaries[0] = _buyerAddress;\\n\\n        uint256[] memory itemIds = new uint256[](1);\\n        itemIds[0] = _itemId;\\n\\n        target.issueTokens(\\n            beneficiaries,\\n            itemIds\\n        );\\n\\n        emit Buy(\\n            newTokenId,\\n            saleCount,\\n            _buyerAddress\\n        );\\n    }\\n\\n    function canPurchaseAgain(\\n        address _buyerAddress\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return block.timestamp - frames[_buyerAddress] \\u003e saleFrame;\\n    }\\n\\n    function getSupply(\\n        uint256 _itemId,\\n        address _accessoriesContract\\n    )\\n        public\\n        returns (uint256)\\n    {\\n        (   string memory rarity,\\n            uint256 maxSupply,\\n            uint256 totalSupply,\\n            uint256 price,\\n            address beneficiary,\\n            string memory metadata,\\n            string memory contentHash\\n\\n        ) = DGAccessories(_accessoriesContract).items(_itemId);\\n\\n        emit SupplyCheck(\\n            rarity,\\n            maxSupply,\\n            price,\\n            beneficiary,\\n            metadata,\\n            contentHash\\n        );\\n\\n        return totalSupply;\\n    }\\n}\\n\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: ---DG----\\n\\npragma solidity ^0.8.13;\\n\\ncontract TransferHelper {\\n\\n    bytes4 private constant TRANSFER = bytes4(\\n        keccak256(\\n            bytes(\\n                \\\"transfer(address,uint256)\\\" // 0xa9059cbb\\n            )\\n        )\\n    );\\n\\n    bytes4 private constant TRANSFER_FROM = bytes4(\\n        keccak256(\\n            bytes(\\n                \\\"transferFrom(address,address,uint256)\\\" // 0x23b872dd\\n            )\\n        )\\n    );\\n\\n    function safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory data) = _token.call(\\n            abi.encodeWithSelector(\\n                TRANSFER, // 0xa9059cbb\\n                _to,\\n                _value\\n            )\\n        );\\n\\n        require(\\n            success \\u0026\\u0026 (\\n                data.length == 0 || abi.decode(\\n                    data, (bool)\\n                )\\n            ),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint _value\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory data) = _token.call(\\n            abi.encodeWithSelector(\\n                TRANSFER_FROM,\\n                _from,\\n                _to,\\n                _value\\n            )\\n        );\\n\\n        require(\\n            success \\u0026\\u0026 (\\n                data.length == 0 || abi.decode(\\n                    data, (bool)\\n                )\\n            ),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessoriesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyCount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"CEOSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"}],\"name\":\"SupplyCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"WorkerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"existingWorker\",\"type\":\"address\"}],\"name\":\"WorkerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWorker\",\"type\":\"address\"}],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newWorkers\",\"type\":\"address[]\"}],\"name\":\"addWorkerBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowChangeSaleLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"}],\"name\":\"canPurchaseAgain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"changeBuyingLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyingPrice\",\"type\":\"uint256\"}],\"name\":\"changeBuyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPaymentToken\",\"type\":\"address\"}],\"name\":\"changePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleFrame\",\"type\":\"uint256\"}],\"name\":\"changeSaleFrame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleLimit\",\"type\":\"uint256\"}],\"name\":\"changeSaleLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessoriesContract\",\"type\":\"address\"}],\"name\":\"changeTargetContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabledSaleLimitChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_accessoriesContract\",\"type\":\"address\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existingWorker\",\"type\":\"address\"}],\"name\":\"removeWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_workerArray\",\"type\":\"address[]\"}],\"name\":\"removeWorkerBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFrame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTPurchaser", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000007e37be2022c0914b2680000000000000000000000000000000c6c855ad634dcdad23e64da71ba85b8c51e5ad7c000000000000000000000000c6c855ad634dcdad23e64da71ba85b8c51e5ad7c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://738d19c4497396798feb6c62e4c739ce5a853e927911c2badf6cf009133a9997"}