{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot's contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler's defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction's gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor() internal {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    uint256 c = a + b;\r\n    if (c < a) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b > a) return (false, 0);\r\n    return (true, a - b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) return (true, 0);\r\n    uint256 c = a * b;\r\n    if (c / a != b) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a / b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a % b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {trySub}.\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting with custom message when dividing by zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryMod}.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain`call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    // solhint-disable-next-line max-line-length\r\n    require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function withdraw(uint256) external;\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) external pure returns (uint256 amountB);\r\n\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountOut);\r\n\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountIn);\r\n\r\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n}\r\n\r\ninterface IFireBirdRouter {\r\n  event Exchange(address pair, uint256 amountOut, address output);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function formula() external view returns (address);\r\n\r\n  function WETH() external view returns (address);\r\n\r\n  function addLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function swapExactTokensForTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    address tokenOut,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    address tokenIn,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    address tokenOut,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountA,\r\n    uint256 amountB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee,\r\n    address to\r\n  ) external returns (uint256 liquidity);\r\n\r\n  function createPairETH(\r\n    address token,\r\n    uint256 amountToken,\r\n    uint32 tokenWeight,\r\n    uint32 swapFee,\r\n    address to\r\n  ) external payable returns (uint256 liquidity);\r\n\r\n  function removeLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountETH);\r\n}\r\n\r\ninterface IFireBirdFactory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function formula() external view returns (address);\r\n\r\n  function protocolFee() external view returns (uint256);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee\r\n  ) external view returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function isPair(address) external view returns (bool);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee\r\n  ) external returns (address pair);\r\n\r\n  function getWeightsAndSwapFee(address pair)\r\n    external\r\n    view\r\n    returns (\r\n      uint32 tokenWeight0,\r\n      uint32 tokenWeight1,\r\n      uint32 swapFee\r\n    );\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n\r\n  function setProtocolFee(uint256) external;\r\n}\r\n\r\ninterface IOriginUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IFireBirdPair {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n  event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n  function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n  function getSwapFee() external view returns (uint32);\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function mint(address to) external returns (uint256 liquidity);\r\n\r\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(\r\n    address,\r\n    address,\r\n    uint32,\r\n    uint32\r\n  ) external;\r\n}\r\n\r\n/*\r\n    Bancor Formula interface\r\n*/\r\ninterface IFireBirdFormula {\r\n  function getFactoryReserveAndWeights(\r\n    address factory,\r\n    address pair,\r\n    address tokenA,\r\n    uint8 dexId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      address tokenB,\r\n      uint256 reserveA,\r\n      uint256 reserveB,\r\n      uint32 tokenWeightA,\r\n      uint32 tokenWeightB,\r\n      uint32 swapFee\r\n    );\r\n\r\n  function getFactoryWeightsAndSwapFee(\r\n    address factory,\r\n    address pair,\r\n    uint8 dexId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint32 tokenWeight0,\r\n      uint32 tokenWeight1,\r\n      uint32 swapFee\r\n    );\r\n\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut,\r\n    uint32 tokenWeightIn,\r\n    uint32 tokenWeightOut,\r\n    uint32 swapFee\r\n  ) external view returns (uint256 amountIn);\r\n\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut,\r\n    uint32 tokenWeightIn,\r\n    uint32 tokenWeightOut,\r\n    uint32 swapFee\r\n  ) external view returns (uint256 amountOut);\r\n\r\n  function getFactoryAmountsIn(\r\n    address factory,\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds\r\n  ) external view returns (uint256[] memory amounts);\r\n\r\n  function getFactoryAmountsOut(\r\n    address factory,\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds\r\n  ) external view returns (uint256[] memory amounts);\r\n\r\n  function ensureConstantValue(\r\n    uint256 reserve0,\r\n    uint256 reserve1,\r\n    uint256 balance0Adjusted,\r\n    uint256 balance1Adjusted,\r\n    uint32 tokenWeight0\r\n  ) external view returns (bool);\r\n\r\n  function getReserves(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB\r\n  ) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n  function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\r\n\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) external pure returns (uint256 amountB);\r\n\r\n  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n  function mintLiquidityFee(\r\n    uint256 totalLiquidity,\r\n    uint112 reserve0,\r\n    uint112 reserve1,\r\n    uint32 tokenWeight0,\r\n    uint32 tokenWeight1,\r\n    uint112 collectedFee0,\r\n    uint112 collectedFee1\r\n  ) external view returns (uint256 amount);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n  function safeApprove(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\r\n  }\r\n\r\n  function safeTransfer(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n  }\r\n\r\n  function safeTransferETH(address to, uint256 value) internal {\r\n    (bool success, ) = to.call{value: value}(new bytes(0));\r\n    require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n  }\r\n}\r\n\r\nlibrary Babylonian {\r\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n    if (y > 3) {\r\n      z = y;\r\n      uint256 x = y / 2 + 1;\r\n      while (x < z) {\r\n        z = x;\r\n        x = (y / x + x) / 2;\r\n      }\r\n    } else if (y != 0) {\r\n      z = 1;\r\n    }\r\n    // else z = 0\r\n  }\r\n}\r\n\r\ncontract FireBirdZap is ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // governance\r\n  address public governance;\r\n  address public WBNB;\r\n  address private constant BNB_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n  IFireBirdRouter public fireBirdRouter;\r\n  address public fireBirdFactory;\r\n  IFireBirdFormula public fireBirdFormula;\r\n  mapping(address => bool) public whitelistUniRouter;\r\n\r\n  struct PoolLiquidityInfo {\r\n    address router;\r\n    address pair;\r\n    uint256 amountAMin;\r\n    uint256 amountBMin;\r\n  }\r\n\r\n  event ZapIn(address indexed sender, address from, uint256 amtFrom, address pool, uint256 amtLp);\r\n  event ZapOut(address indexed sender, address pool, uint256 amtLp, address to, uint256 amtTo);\r\n  event Withdraw(address indexed token, uint256 amount, address to);\r\n  event LogGovernance(address governance);\r\n\r\n  receive() external payable {\r\n    require(msg.sender != tx.origin, \"Zap: Do not send ETH directly\");\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(msg.sender == governance, \"Zap: !governance\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhitelistUniRouter(address _uniRouter) {\r\n    require(whitelistUniRouter[_uniRouter] || _uniRouter == address(fireBirdRouter), \"Zap: !router\");\r\n    _;\r\n  }\r\n\r\n  constructor(IFireBirdRouter _fireBirdRouter) public {\r\n    governance = msg.sender;\r\n    fireBirdRouter = _fireBirdRouter;\r\n    fireBirdFactory = _fireBirdRouter.factory();\r\n    fireBirdFormula = IFireBirdFormula(_fireBirdRouter.formula());\r\n    WBNB = _fireBirdRouter.WETH();\r\n  }\r\n\r\n  /* ========== External Functions ========== */\r\n\r\n  // _to: must be a pair lp\r\n  // _from: must be in lp\r\n  // _amounts: amount_from, _minTokenB, _minLp\r\n  function zapInToken(\r\n    address _from,\r\n    uint256[] calldata amounts,\r\n    address _to,\r\n    uint8 dexId,\r\n    address uniRouter,\r\n    bool transferResidual\r\n  ) external onlyWhitelistUniRouter(uniRouter) nonReentrant returns (uint256 lpAmt) {\r\n    require(_from == IFireBirdPair(_to).token0() || _from == IFireBirdPair(_to).token1(), \"Zap: !pair\");\r\n    require(IFireBirdPair(_to).factory() == IFireBirdRouter(uniRouter).factory(), \"Zap: Incompatible factory\");\r\n\r\n    IERC20(_from).safeTransferFrom(msg.sender, address(this), amounts[0]);\r\n    _approveTokenIfNeeded(_from, uniRouter);\r\n\r\n    // swap half amount for other\r\n    address other;\r\n    uint256 sellAmount;\r\n    {\r\n      address token0 = IFireBirdPair(_to).token0();\r\n      address token1 = IFireBirdPair(_to).token1();\r\n      other = _from == token0 ? token1 : token0;\r\n      sellAmount = calculateSwapInAmount(_to, _from, amounts[0], token0, dexId);\r\n    }\r\n    uint256 otherAmount = _swap(_from, sellAmount, other, address(this), _to, dexId);\r\n    require(otherAmount >= amounts[1], \"Zap: Insufficient Receive Amount\");\r\n\r\n    (, , lpAmt) = _pairDeposit(_to, _from, other, amounts[0] - sellAmount, otherAmount, 1, 1, uniRouter, transferResidual);\r\n\r\n    require(lpAmt >= amounts[2], \"Zap: High Slippage In\");\r\n    emit ZapIn(msg.sender, _from, amounts[0], _to, lpAmt);\r\n    return lpAmt;\r\n  }\r\n\r\n  // _to: must be a pair lp\r\n  function zapIn(\r\n    address _to,\r\n    uint256 _minTokenB,\r\n    uint256 _minLp,\r\n    uint8 dexId,\r\n    address uniRouter,\r\n    bool transferResidual\r\n  ) external payable onlyWhitelistUniRouter(uniRouter) nonReentrant returns (uint256) {\r\n    require(IFireBirdPair(_to).factory() == IFireBirdRouter(uniRouter).factory(), \"Zap: Incompatible factory\");\r\n\r\n    uint256 lpAmt = _swapBNBToLp(IFireBirdPair(_to), msg.value, _minTokenB, dexId, uniRouter, transferResidual);\r\n    require(lpAmt >= _minLp, \"Zap: High Slippage In\");\r\n    emit ZapIn(msg.sender, WBNB, msg.value, _to, lpAmt);\r\n    return lpAmt;\r\n  }\r\n\r\n  // _from: must be a pair lp\r\n  function zapOutToPair(\r\n    address _from,\r\n    uint256 amount,\r\n    address uniRouter\r\n  ) public onlyWhitelistUniRouter(uniRouter) nonReentrant returns (uint256 amountA, uint256 amountB) {\r\n    require(IFireBirdPair(_from).factory() == IFireBirdRouter(uniRouter).factory(), \"Zap: Incompatible factory\");\r\n\r\n    IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\r\n    _approveTokenIfNeeded(_from, uniRouter);\r\n\r\n    IFireBirdPair pair = IFireBirdPair(_from);\r\n    address token0 = pair.token0();\r\n    address token1 = pair.token1();\r\n\r\n    address _WBNB = WBNB;\r\n    if (token0 == _WBNB || token1 == _WBNB) {\r\n      if (uniRouter == address(fireBirdRouter)) {\r\n        (amountA, amountB) = fireBirdRouter.removeLiquidityETH(_from, token0 != _WBNB ? token0 : token1, amount, 1, 1, msg.sender, block.timestamp);\r\n      } else {\r\n        (amountA, amountB) = IUniswapV2Router(uniRouter).removeLiquidityETH(token0 != _WBNB ? token0 : token1, amount, 1, 1, msg.sender, block.timestamp);\r\n      }\r\n    } else {\r\n      (amountA, amountB) = _removeLiquidity(_from, token0, token1, amount, 1, 1, uniRouter);\r\n    }\r\n  }\r\n\r\n  function zapOutToPairWithPermit(\r\n    address _from,\r\n    uint256 _amount,\r\n    address _uniRouter,\r\n    uint256 _approvalAmount,\r\n    uint256 _deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB) {\r\n    // permit\r\n    IFireBirdPair(_from).permit(msg.sender, address(this), _approvalAmount, _deadline, v, r, s);\r\n\r\n    return zapOutToPair(_from, _amount, _uniRouter);\r\n  }\r\n\r\n  // _from: must be a pair lp\r\n  // _toToken: must be in lp\r\n  function zapOut(\r\n    address _from,\r\n    uint256 amount,\r\n    address _toToken,\r\n    uint256 _minTokensRec,\r\n    uint8 dexId,\r\n    address uniRouter\r\n  ) public onlyWhitelistUniRouter(uniRouter) nonReentrant returns (uint256) {\r\n    require(IFireBirdPair(_from).factory() == IFireBirdRouter(uniRouter).factory(), \"Zap: Incompatible factory\");\r\n\r\n    IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\r\n    address token0;\r\n    address token1;\r\n    uint256 amountA;\r\n    uint256 amountB;\r\n    {\r\n      IFireBirdPair pair = IFireBirdPair(_from);\r\n      token0 = pair.token0();\r\n      token1 = pair.token1();\r\n      (amountA, amountB) = _removeLiquidity(_from, token0, token1, amount, 1, 1, uniRouter);\r\n    }\r\n\r\n    uint256 tokenBought;\r\n    _approveTokenIfNeeded(token0, uniRouter);\r\n    _approveTokenIfNeeded(token1, uniRouter);\r\n    if (_toToken == BNB_ADDRESS) {\r\n      address _lpOfFromAndTo = WBNB == token0 || WBNB == token1 ? _from : address(0);\r\n      if (_lpOfFromAndTo == address(0)) revert(\"Zap: !pairBNB\");\r\n      tokenBought = _swapTokenForBNB(token0, amountA, address(this), _lpOfFromAndTo, dexId);\r\n      tokenBought = tokenBought.add(_swapTokenForBNB(token1, amountB, address(this), _lpOfFromAndTo, dexId));\r\n    } else {\r\n      address _lpOfFromAndTo = _toToken == token0 || _toToken == token1 ? _from : address(0);\r\n      if (_lpOfFromAndTo == address(0)) revert(\"Zap: !pair\");\r\n      tokenBought = _swap(token0, amountA, _toToken, address(this), _lpOfFromAndTo, dexId);\r\n      tokenBought += _swap(token1, amountB, _toToken, address(this), _lpOfFromAndTo, dexId);\r\n    }\r\n\r\n    require(tokenBought >= _minTokensRec, \"Zap: High Slippage Out\");\r\n    if (_toToken == BNB_ADDRESS) {\r\n      TransferHelper.safeTransferETH(msg.sender, tokenBought);\r\n    } else {\r\n      IERC20(_toToken).safeTransfer(msg.sender, tokenBought);\r\n    }\r\n\r\n    emit ZapOut(msg.sender, _from, amount, _toToken, tokenBought);\r\n    return tokenBought;\r\n  }\r\n\r\n  function zapOutWithPermit(\r\n    address _from,\r\n    uint256 amount,\r\n    address _toToken,\r\n    uint256 _minTokensRec,\r\n    uint8 dexId,\r\n    address uniRouter,\r\n    uint256 _approvalAmount,\r\n    uint256 _deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256) {\r\n    // permit\r\n    IFireBirdPair(_from).permit(msg.sender, address(this), _approvalAmount, _deadline, v, r, s);\r\n\r\n    return zapOut(_from, amount, _toToken, _minTokensRec, dexId, uniRouter);\r\n  }\r\n\r\n  function migrateWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    PoolLiquidityInfo calldata oldPair,\r\n    PoolLiquidityInfo calldata newPair,\r\n    uint256 liquidity,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    IFireBirdPair(oldPair.pair).permit(msg.sender, address(this), liquidity, deadline, v, r, s);\r\n\r\n    return migrate(tokenA, tokenB, oldPair, newPair, liquidity);\r\n  }\r\n\r\n  // msg.sender should have approved 'liquidity' amount of LP token of 'tokenA' and 'tokenB'\r\n  function migrate(\r\n    address tokenA,\r\n    address tokenB,\r\n    PoolLiquidityInfo memory oldPair,\r\n    PoolLiquidityInfo calldata newPair,\r\n    uint256 liquidity\r\n  ) public onlyWhitelistUniRouter(oldPair.router) onlyWhitelistUniRouter(newPair.router) {\r\n    if (oldPair.router != address(fireBirdRouter)) {\r\n      address uniFactory = IUniswapV2Router(oldPair.router).factory();\r\n      oldPair.pair = IOriginUniswapV2Factory(uniFactory).getPair(tokenA, tokenB);\r\n    }\r\n    IERC20(oldPair.pair).safeTransferFrom(msg.sender, address(this), liquidity);\r\n\r\n    // Remove liquidity from the old router with permit\r\n    (uint256 amountA, uint256 amountB) = _removeLiquidity(oldPair.pair, tokenA, tokenB, liquidity, oldPair.amountAMin, oldPair.amountBMin, oldPair.router);\r\n\r\n    // Add liquidity to the new router\r\n    _pairDeposit(\r\n      newPair.pair,\r\n      tokenA,\r\n      tokenB,\r\n      amountA,\r\n      amountB,\r\n      newPair.amountAMin,\r\n      newPair.amountBMin,\r\n      newPair.router,\r\n      true // Send remaining tokens to msg.sender\r\n    );\r\n  }\r\n\r\n  /* ========== View Functions ===========*/\r\n  // _from: token A\r\n  // return amount B that will be convert from A to perform zap in\r\n  // return amount A that will be convert to B to perform zap in\r\n  function getAmountBToZapIn(\r\n    address _from,\r\n    uint256 _fromAmount,\r\n    address lp,\r\n    uint8 dexId\r\n  ) external view returns (uint256 amountBConverted, uint256 amountASell) {\r\n    address other;\r\n    uint256 sellAmount;\r\n    {\r\n      IFireBirdPair pair = IFireBirdPair(lp);\r\n      address token0 = pair.token0();\r\n      address token1 = pair.token1();\r\n      other = _from == token0 ? token1 : token0;\r\n      sellAmount = calculateSwapInAmount(lp, _from, _fromAmount, token0, dexId);\r\n    }\r\n\r\n    address[] memory path = new address[](1);\r\n    path[0] = lp;\r\n    uint8[] memory dexIds = new uint8[](1);\r\n    dexIds[0] = dexId;\r\n    uint256[] memory amounts = fireBirdFormula.getFactoryAmountsOut(fireBirdFactory, _from, other, sellAmount, path, dexIds);\r\n    return (amounts[amounts.length - 1], sellAmount);\r\n  }\r\n\r\n  // _from: lp pair\r\n  // return amountOtherSell _otherToken that will be removed from pair\r\n  // return amountToConverted _toToken that will be converted from other\r\n  // return amountToOrigin _toToken that will be removed from pair\r\n  function getAmountToZapOut(\r\n    address _from,\r\n    uint256 amount,\r\n    address _toToken,\r\n    uint8 dexId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 amountOtherSell,\r\n      uint256 amountToConverted,\r\n      uint256 amountToOrigin\r\n    )\r\n  {\r\n    address other;\r\n    {\r\n      IFireBirdPair pair = IFireBirdPair(_from);\r\n      address token0 = pair.token0();\r\n      address token1 = pair.token1();\r\n      other = _toToken == token0 ? token1 : token0;\r\n    }\r\n    uint256 sellAmount;\r\n    uint256 amountToRemoved;\r\n    {\r\n      uint256 _totalSupply = IERC20(_from).totalSupply();\r\n      sellAmount = amount.mul(IERC20(other).balanceOf(_from)) / _totalSupply;\r\n      amountToRemoved = amount.mul(IERC20(_toToken).balanceOf(_from)) / _totalSupply;\r\n    }\r\n\r\n    uint256 _amountOut = _getRemovedReserveAmountOut(_from, other, sellAmount, amountToRemoved, dexId);\r\n    return (sellAmount, _amountOut, amountToRemoved);\r\n  }\r\n\r\n  function calculateSwapInAmount(\r\n    address pair,\r\n    address tokenIn,\r\n    uint256 userIn,\r\n    address pairToken0,\r\n    uint8 dexId\r\n  ) internal view returns (uint256) {\r\n    (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee) = fireBirdFormula.getFactoryWeightsAndSwapFee(fireBirdFactory, pair, dexId);\r\n\r\n    if (tokenWeight0 == 50) {\r\n      (uint256 res0, uint256 res1, ) = IFireBirdPair(pair).getReserves();\r\n      uint256 reserveIn = tokenIn == pairToken0 ? res0 : res1;\r\n      uint256 rMul = uint256(10000).sub(uint256(swapFee));\r\n      return _getExactSwapInAmount(reserveIn, userIn, rMul);\r\n    } else {\r\n      uint256 otherWeight = tokenIn == pairToken0 ? uint256(tokenWeight1) : uint256(tokenWeight0);\r\n      return userIn.mul(otherWeight).div(100);\r\n    }\r\n  }\r\n\r\n  /* ========== Private Functions ========== */\r\n  function _getExactSwapInAmount(\r\n    uint256 reserveIn,\r\n    uint256 userIn,\r\n    uint256 rMul\r\n  ) internal pure returns (uint256) {\r\n    return Babylonian.sqrt(reserveIn.mul(userIn.mul(40000).mul(rMul) + reserveIn.mul(rMul.add(10000)).mul(rMul.add(10000)))).sub(reserveIn.mul(rMul.add(10000))) / (rMul.mul(2));\r\n  }\r\n\r\n  function _getRemovedReserveAmountOut(\r\n    address pair,\r\n    address tokenIn,\r\n    uint256 sellAmount,\r\n    uint256 amountToRemoved,\r\n    uint8 dexId\r\n  ) internal view returns (uint256) {\r\n    (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = fireBirdFormula.getFactoryReserveAndWeights(fireBirdFactory, pair, tokenIn, dexId);\r\n    return fireBirdFormula.getAmountOut(sellAmount, reserveIn.sub(sellAmount), reserveOut.sub(amountToRemoved), tokenWeightIn, tokenWeightOut, swapFee);\r\n  }\r\n\r\n  function _approveTokenIfNeeded(address token, address uniRouter) private {\r\n    if (IERC20(token).allowance(address(this), address(uniRouter)) == 0) {\r\n      IERC20(token).safeApprove(address(uniRouter), uint256(~0));\r\n    }\r\n    if (IERC20(token).allowance(address(this), address(fireBirdRouter)) == 0) {\r\n      IERC20(token).safeApprove(address(fireBirdRouter), uint256(~0));\r\n    }\r\n  }\r\n\r\n  function _removeLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address uniRouter\r\n  ) internal returns (uint256 amountA, uint256 amountB) {\r\n    _approveTokenIfNeeded(pair, uniRouter);\r\n\r\n    if (uniRouter == address(fireBirdRouter)) {\r\n      return fireBirdRouter.removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, address(this), block.timestamp);\r\n    } else {\r\n      return IUniswapV2Router(uniRouter).removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, address(this), block.timestamp);\r\n    }\r\n  }\r\n\r\n  function _pairDeposit(\r\n    address _pair,\r\n    address _poolToken0,\r\n    address _poolToken1,\r\n    uint256 token0Bought,\r\n    uint256 token1Bought,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address uniRouter,\r\n    bool transferResidual\r\n  )\r\n    internal\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 lpAmt\r\n    )\r\n  {\r\n    _approveTokenIfNeeded(_poolToken0, uniRouter);\r\n    _approveTokenIfNeeded(_poolToken1, uniRouter);\r\n\r\n    if (uniRouter == address(fireBirdRouter)) {\r\n      (amountA, amountB, lpAmt) = fireBirdRouter.addLiquidity(_pair, _poolToken0, _poolToken1, token0Bought, token1Bought, amountAMin, amountBMin, msg.sender, block.timestamp);\r\n    } else {\r\n      (amountA, amountB, lpAmt) = IUniswapV2Router(uniRouter).addLiquidity(_poolToken0, _poolToken1, token0Bought, token1Bought, amountAMin, amountBMin, msg.sender, block.timestamp);\r\n    }\r\n\r\n    if (transferResidual) {\r\n      uint256 amountAResidual = token0Bought.sub(amountA);\r\n      if (amountAResidual > 0) {\r\n        //Returning residue in token0, if any.\r\n        _transferToken(_poolToken0, msg.sender, amountAResidual);\r\n      }\r\n\r\n      uint256 amountBRedisual = token1Bought.sub(amountB);\r\n      if (amountBRedisual > 0) {\r\n        //Returning residue in token1, if any\r\n        _transferToken(_poolToken1, msg.sender, amountBRedisual);\r\n      }\r\n    }\r\n\r\n    return (amountA, amountB, lpAmt);\r\n  }\r\n\r\n  function _swapBNBToLp(\r\n    IFireBirdPair pair,\r\n    uint256 amount,\r\n    uint256 _minTokenB,\r\n    uint8 dexId,\r\n    address uniRouter,\r\n    bool transferResidual\r\n  ) private returns (uint256 lpAmt) {\r\n    address _WBNB = WBNB;\r\n    require(pair.token0() == _WBNB || pair.token1() == _WBNB, \"FireBirdZap: !pairBNB\");\r\n    // Lp\r\n    address token = pair.token0() == _WBNB ? pair.token1() : pair.token0();\r\n    uint256 swapValue = calculateSwapInAmount(address(pair), _WBNB, amount, pair.token0(), dexId);\r\n    uint256 tokenAmount = _swapBNBForToken(token, swapValue, address(this), address(pair), dexId);\r\n    require(tokenAmount >= _minTokenB, \"Zap: Insufficient Receive Amount\");\r\n\r\n    uint256 wbnbAmount = amount.sub(swapValue);\r\n    IWETH(_WBNB).deposit{value: wbnbAmount}();\r\n    (, , lpAmt) = _pairDeposit(address(pair), _WBNB, token, wbnbAmount, tokenAmount, 1, 1, uniRouter, transferResidual);\r\n  }\r\n\r\n  function _swapBNBForToken(\r\n    address token,\r\n    uint256 value,\r\n    address _receiver,\r\n    address lpBNBToken,\r\n    uint8 dexId\r\n  ) private returns (uint256) {\r\n    if (token == WBNB) {\r\n      address _WBNB = WBNB;\r\n      IWETH(_WBNB).deposit{value: value}();\r\n      if (_receiver != address(this)) {\r\n        IERC20(_WBNB).safeTransfer(_receiver, value);\r\n      }\r\n      return value;\r\n    }\r\n    address[] memory path = new address[](1);\r\n    path[0] = lpBNBToken;\r\n    uint8[] memory dexIds = new uint8[](1);\r\n    dexIds[0] = dexId;\r\n\r\n    uint256 balanceBefore = IERC20(token).balanceOf(_receiver);\r\n    fireBirdRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: value}(token, 1, path, dexIds, _receiver, block.timestamp);\r\n    return IERC20(token).balanceOf(_receiver).sub(balanceBefore);\r\n  }\r\n\r\n  function _swapTokenForBNB(\r\n    address token,\r\n    uint256 amount,\r\n    address _receiver,\r\n    address lpTokenBNB,\r\n    uint8 dexId\r\n  ) private returns (uint256) {\r\n    if (token == WBNB) {\r\n      _transferToken(WBNB, _receiver, amount);\r\n      return amount;\r\n    }\r\n    address[] memory path = new address[](1);\r\n    path[0] = lpTokenBNB;\r\n    uint8[] memory dexIds = new uint8[](1);\r\n    dexIds[0] = dexId;\r\n\r\n    uint256 balanceBefore = address(_receiver).balance;\r\n    fireBirdRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(token, amount, 1, path, dexIds, _receiver, block.timestamp);\r\n    return address(_receiver).balance.sub(balanceBefore);\r\n  }\r\n\r\n  function _swap(\r\n    address _from,\r\n    uint256 _amount,\r\n    address _to,\r\n    address _receiver,\r\n    address _lpOfFromTo,\r\n    uint8 dexId\r\n  ) internal returns (uint256) {\r\n    if (_from == _to) {\r\n      if (_receiver != address(this)) {\r\n        IERC20(_from).safeTransfer(_receiver, _amount);\r\n      }\r\n      return _amount;\r\n    }\r\n    address[] memory path = new address[](1);\r\n    path[0] = _lpOfFromTo;\r\n    uint8[] memory dexIds = new uint8[](1);\r\n    dexIds[0] = dexId;\r\n\r\n    uint256 balanceBefore = IERC20(_to).balanceOf(_receiver);\r\n    fireBirdRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(_from, _to, _amount, 1, path, dexIds, _receiver, block.timestamp);\r\n    return IERC20(_to).balanceOf(_receiver).sub(balanceBefore);\r\n  }\r\n\r\n  function _transferToken(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) internal {\r\n    if (amount == 0) {\r\n      return;\r\n    }\r\n\r\n    if (token == WBNB) {\r\n      IWETH(WBNB).withdraw(amount);\r\n      if (to != address(this)) {\r\n        TransferHelper.safeTransferETH(to, amount);\r\n      }\r\n    } else {\r\n      IERC20(token).safeTransfer(to, amount);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /* ========== RESTRICTED FUNCTIONS ========== */\r\n  function setWhitelistUniRouter(address _uniRouter, bool _isWhitelist) external onlyGovernance {\r\n    whitelistUniRouter[_uniRouter] = _isWhitelist;\r\n  }\r\n\r\n  function withdrawToken(address[] memory tokens, address to) public onlyGovernance {\r\n    require(to != address(0), \"Zap: !receiver\");\r\n\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      _withdraw(tokens[i], to);\r\n    }\r\n  }\r\n\r\n  function withdrawTokenAmount(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external onlyGovernance {\r\n    require(to != address(0), \"Zap: !receiver\");\r\n    IERC20(token).safeTransfer(to, amount);\r\n    emit Withdraw(token, amount, to);\r\n  }\r\n\r\n  /**\r\n   * @dev Use only for some special tokens\r\n   */\r\n  function manualApproveAllowance(\r\n    IERC20[] calldata tokens,\r\n    address[] calldata spenders,\r\n    uint256 allowance\r\n  ) external onlyGovernance {\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      for (uint256 j = 0; j < spenders.length; j++) {\r\n        tokens[i].safeApprove(spenders[j], allowance);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _withdraw(address _token, address _to) internal {\r\n    if (_token == BNB_ADDRESS) {\r\n      TransferHelper.safeTransferETH(_to, address(this).balance);\r\n      emit Withdraw(_token, address(this).balance, _to);\r\n      return;\r\n    }\r\n\r\n    uint256 _balance = IERC20(_token).balanceOf(address(this));\r\n    IERC20(_token).safeTransfer(_to, _balance);\r\n    emit Withdraw(_token, _balance, _to);\r\n  }\r\n\r\n  function setGovernance(address _governance) external onlyGovernance {\r\n    governance = _governance;\r\n    emit LogGovernance(governance);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"_fireBirdRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"LogGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtTo\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFormula\",\"outputs\":[{\"internalType\":\"contract IFireBirdFormula\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdRouter\",\"outputs\":[{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"}],\"name\":\"getAmountBToZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountASell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"}],\"name\":\"getAmountToZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOtherSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToOrigin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"manualApproveAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"oldPair\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"newPair\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"oldPair\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"newPair\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"migrateWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelistUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistUniRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"}],\"name\":\"zapOutToPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutToPairWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FireBirdZap", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000b31d1b1ea48ce4bf10ed697d44b747287e785ad4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://08a4ea80e46215800b3bcba001712b87fdaafcdd7a4db5e56911fb00df6c9a1f"}