{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/UV3Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport {TickMath} from \\\"@cryptoalgebra/v1-core/contracts/libraries/TickMath.sol\\\";\\nimport {LiquidityAmounts} from \\\"@cryptoalgebra/v1-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport {DataStorageLibrary} from \\\"@cryptoalgebra/v1-periphery/contracts/libraries/DataStorageLibrary.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary UV3Math {\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /*******************\\n     * Tick Math\\n     *******************/\\n    \\n    function getSqrtRatioAtTick(\\n        int24 currentTick\\n    ) public pure returns(uint160 sqrtPriceX96) {\\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(currentTick);\\n    }\\n\\n    /*******************\\n     * LiquidityAmounts\\n     *******************/\\n\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) public pure returns (uint256 amount0, uint256 amount1) {\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            sqrtRatioX96,\\n            sqrtRatioAX96,\\n            sqrtRatioBX96,\\n            liquidity);\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) public pure returns (uint128 liquidity) {\\n        liquidity = LiquidityAmounts.getLiquidityForAmounts(\\n            sqrtRatioX96,\\n            sqrtRatioAX96,\\n            sqrtRatioBX96,\\n            amount0,\\n            amount1);\\n    }\\n\\n    /*******************\\n     * OracleLibrary\\n     *******************/\\n\\n    function consult(\\n        address _pool, \\n        uint32 _twapPeriod\\n    ) public view returns(int24 timeWeightedAverageTick) {\\n        timeWeightedAverageTick = DataStorageLibrary.consult(_pool, _twapPeriod);\\n    }\\n\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) public pure returns (uint256 quoteAmount) {\\n        quoteAmount = DataStorageLibrary.getQuoteAtTick(tick, baseAmount, baseToken, quoteToken);\\n    }\\n\\n    /*******************\\n     * SafeUnit128\\n     *******************/\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint128\\n    function toUint128(uint256 y) public  pure returns (uint128 z) {\\n        require((z = uint128(y)) == y, \\\"SafeUint128: overflow\\\");\\n    }\\n\\n\\n    /******************************\\n     * ICHIVault specific functions\\n     ******************************/\\n\\n    /**\\n     @dev Computes a unique vault's symbol for vaults created through Ramses factory.\\n     @param value index of the vault to be created\\n     */\\n    function computeIVsymbol(uint256 value) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"IV-\\\", Strings.toString(value), \\\"-QS\\\"));\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TickMath {\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = -887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\\r\\n    // get abs value\\r\\n    int24 mask = tick >> (24 - 1);\\r\\n    uint256 absTick = uint256((tick ^ mask) - mask);\\r\\n    require(absTick <= uint256(MAX_TICK), 'T');\\r\\n\\r\\n    uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n    if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n    if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n    if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n    if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n    if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n    if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n    if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n    if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n    if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n    if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n    if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n    if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n    if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n    if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n    if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n    if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n    if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n    if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n    if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n    price = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n  /// ever return.\\r\\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\\r\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\\r\\n    // second inequality must be < because the price can never reach the price at the max tick\\r\\n    require(price >= MIN_SQRT_RATIO && price < MAX_SQRT_RATIO, 'R');\\r\\n    uint256 ratio = uint256(price) << 32;\\r\\n\\r\\n    uint256 r = ratio;\\r\\n    uint256 msb = 0;\\r\\n\\r\\n    assembly {\\r\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(4, gt(r, 0xFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(3, gt(r, 0xFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(2, gt(r, 0xF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(1, gt(r, 0x3))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := gt(r, 0x1)\\r\\n      msb := or(msb, f)\\r\\n    }\\r\\n\\r\\n    if (msb >= 128) r = ratio >> (msb - 127);\\r\\n    else r = ratio << (127 - msb);\\r\\n\\r\\n    int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(63, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(62, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(61, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(60, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(59, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(58, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(57, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(56, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(55, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(54, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(53, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(52, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(51, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(50, f))\\r\\n    }\\r\\n\\r\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-periphery/contracts/libraries/LiquidityAmounts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '@cryptoalgebra/v1-core/contracts/libraries/FullMath.sol';\\r\\nimport '@cryptoalgebra/v1-core/contracts/libraries/Constants.sol';\\r\\n\\r\\n/// @title Liquidity amount functions\\r\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\nlibrary LiquidityAmounts {\\r\\n    /// @notice Downcasts uint256 to uint128\\r\\n    /// @param x The uint258 to be downcasted\\r\\n    /// @return y The passed value, downcasted to uint128\\r\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\r\\n        require((y = uint128(x)) == x);\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\r\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount0 The amount0 being sent in\\r\\n    /// @return liquidity The amount of returned liquidity\\r\\n    function getLiquidityForAmount0(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount0\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Constants.Q96);\\r\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\r\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount1 The amount1 being sent in\\r\\n    /// @return liquidity The amount of returned liquidity\\r\\n    function getLiquidityForAmount1(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount1\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n        return toUint128(FullMath.mulDiv(amount1, Constants.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\r\\n    /// pool prices and the prices at the tick boundaries\\r\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount0 The amount of token0 being sent in\\r\\n    /// @param amount1 The amount of token1 being sent in\\r\\n    /// @return liquidity The maximum amount of liquidity received\\r\\n    function getLiquidityForAmounts(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\r\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\r\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\r\\n\\r\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\r\\n        } else {\\r\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount0 The amount of token0\\r\\n    function getAmount0ForLiquidity(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount0) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return\\r\\n            FullMath.mulDiv(uint256(liquidity) << Constants.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96) /\\r\\n            sqrtRatioAX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount1 The amount of token1\\r\\n    function getAmount1ForLiquidity(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Constants.Q96);\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\r\\n    /// pool prices and the prices at the tick boundaries\\r\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount0 The amount of token0\\r\\n    /// @return amount1 The amount of token1\\r\\n    function getAmountsForLiquidity(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\r\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\r\\n        } else {\\r\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-periphery/contracts/libraries/DataStorageLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0 <0.8.0;\\r\\n\\r\\nimport '@cryptoalgebra/v1-core/contracts/libraries/FullMath.sol';\\r\\nimport '@cryptoalgebra/v1-core/contracts/libraries/TickMath.sol';\\r\\nimport '@cryptoalgebra/v1-core/contracts/interfaces/IAlgebraPool.sol';\\r\\nimport '@cryptoalgebra/v1-core/contracts/libraries/LowGasSafeMath.sol';\\r\\nimport '../libraries/PoolAddress.sol';\\r\\n\\r\\n/// @title DataStorage library\\r\\n/// @notice Provides functions to integrate with pool dataStorage\\r\\nlibrary DataStorageLibrary {\\r\\n    /// @notice Fetches time-weighted average tick using Algebra dataStorage\\r\\n    /// @param pool Address of Algebra pool that we want to getTimepoints\\r\\n    /// @param period Number of seconds in the past to start calculating time-weighted average\\r\\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\\r\\n    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\\r\\n        require(period != 0, 'BP');\\r\\n\\r\\n        uint32[] memory secondAgos = new uint32[](2);\\r\\n        secondAgos[0] = period;\\r\\n        secondAgos[1] = 0;\\r\\n\\r\\n        (int56[] memory tickCumulatives, , , ) = IAlgebraPool(pool).getTimepoints(secondAgos);\\r\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\r\\n\\r\\n        timeWeightedAverageTick = int24(tickCumulativesDelta / period);\\r\\n\\r\\n        // Always round to negative infinity\\r\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % period != 0)) timeWeightedAverageTick--;\\r\\n    }\\r\\n\\r\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\r\\n    /// @param tick Tick value used to calculate the quote\\r\\n    /// @param baseAmount Amount of token to be converted\\r\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\r\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\r\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\r\\n    function getQuoteAtTick(\\r\\n        int24 tick,\\r\\n        uint128 baseAmount,\\r\\n        address baseToken,\\r\\n        address quoteToken\\r\\n    ) internal pure returns (uint256 quoteAmount) {\\r\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\r\\n\\r\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\r\\n        if (sqrtRatioX96 <= type(uint128).max) {\\r\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\r\\n            quoteAmount = baseToken < quoteToken\\r\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\r\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\r\\n        } else {\\r\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\r\\n            quoteAmount = baseToken < quoteToken\\r\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\r\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.4.0 || ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    // 512-bit multiply [prod1 prod0] = a * b\\r\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n    // then use the Chinese Remainder Theorem to reconstruct\\r\\n    // the 512 bit result. The result is stored in two 256\\r\\n    // variables such that product = prod1 * 2**256 + prod0\\r\\n    uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n    uint256 prod1; // Most significant 256 bits of the product\\r\\n    assembly {\\r\\n      let mm := mulmod(a, b, not(0))\\r\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n    }\\r\\n\\r\\n    // Make sure the result is less than 2**256.\\r\\n    // Also prevents denominator == 0\\r\\n    require(denominator > prod1);\\r\\n\\r\\n    // Handle non-overflow cases, 256 by 256 division\\r\\n    if (prod1 == 0) {\\r\\n      assembly {\\r\\n        result := div(prod0, denominator)\\r\\n      }\\r\\n      return result;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////////////////////\\r\\n    // 512 by 256 division.\\r\\n    ///////////////////////////////////////////////\\r\\n\\r\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n    // Compute remainder using mulmod\\r\\n    // Subtract 256 bit remainder from 512 bit number\\r\\n    assembly {\\r\\n      let remainder := mulmod(a, b, denominator)\\r\\n      prod1 := sub(prod1, gt(remainder, prod0))\\r\\n      prod0 := sub(prod0, remainder)\\r\\n    }\\r\\n\\r\\n    // Factor powers of two out of denominator\\r\\n    // Compute largest power of two divisor of denominator.\\r\\n    // Always >= 1.\\r\\n    uint256 twos = -denominator & denominator;\\r\\n    // Divide denominator by power of two\\r\\n    assembly {\\r\\n      denominator := div(denominator, twos)\\r\\n    }\\r\\n\\r\\n    // Divide [prod1 prod0] by the factors of two\\r\\n    assembly {\\r\\n      prod0 := div(prod0, twos)\\r\\n    }\\r\\n    // Shift in bits from prod1 into prod0. For this we need\\r\\n    // to flip `twos` such that it is 2**256 / twos.\\r\\n    // If twos is zero, then it becomes one\\r\\n    assembly {\\r\\n      twos := add(div(sub(0, twos), twos), 1)\\r\\n    }\\r\\n    prod0 |= prod1 * twos;\\r\\n\\r\\n    // Invert denominator mod 2**256\\r\\n    // Now that denominator is an odd number, it has an inverse\\r\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n    // Compute the inverse by starting with a seed that is correct\\r\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n    uint256 inv = (3 * denominator) ^ 2;\\r\\n    // Now use Newton-Raphson iteration to improve the precision.\\r\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n    // arithmetic, doubling the correct bits in each step.\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n    // Because the division is now exact we can divide by multiplying\\r\\n    // with the modular inverse of denominator. This will give us the\\r\\n    // correct result modulo 2**256. Since the preconditions guarantee\\r\\n    // that the outcome is less than 2**256, this is the final result.\\r\\n    // We don't need to compute the high bits of the result and prod1\\r\\n    // is no longer required.\\r\\n    result = prod0 * inv;\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    if (a == 0 || ((result = a * b) / a == b)) {\\r\\n      require(denominator > 0);\\r\\n      assembly {\\r\\n        result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n      }\\r\\n    } else {\\r\\n      result = mulDiv(a, b, denominator);\\r\\n      if (mulmod(a, b, denominator) > 0) {\\r\\n        require(result < type(uint256).max);\\r\\n        result++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nlibrary Constants {\\r\\n  uint8 internal constant RESOLUTION = 96;\\r\\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\\r\\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\r\\n  // fee value in hundredths of a bip, i.e. 1e-6\\r\\n  uint16 internal constant BASE_FEE = 100;\\r\\n  int24 internal constant TICK_SPACING = 60;\\r\\n\\r\\n  // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\r\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;\\r\\n\\r\\n  uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\r\\n  uint8 internal constant MAX_COMMUNITY_FEE = 250;\\r\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/IAlgebraPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolDerivedState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\n\\r\\n/**\\r\\n * @title The interface for a Algebra Pool\\r\\n * @dev The pool interface is broken up into many smaller pieces.\\r\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolDerivedState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary LowGasSafeMath {\\r\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require((z = x + y) >= x);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require((z = x - y) <= x);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x * y, reverts if overflows\\r\\n  /// @param x The multiplicand\\r\\n  /// @param y The multiplier\\r\\n  /// @return z The product of x and y\\r\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require(x == 0 || (z = x * y) / x == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    require((z = x + y) >= x == (y >= 0));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if overflows or underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    require((z = x - y) <= x == (y >= 0));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add128(uint128 x, uint128 y) internal pure returns (uint128 z) {\\r\\n    require((z = x + y) >= x);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-periphery/contracts/libraries/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\nlibrary PoolAddress {\\r\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0x6ec6c9c8091d160c0aa74b2b14ba9c1717e95093bd3ac085cee99a49aab294a4;\\r\\n\\r\\n    /// @notice The identifying key of the pool\\r\\n    struct PoolKey {\\r\\n        address token0;\\r\\n        address token1;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\r\\n    /// @param tokenA The first token of a pool, unsorted\\r\\n    /// @param tokenB The second token of a pool, unsorted\\r\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\r\\n    function getPoolKey(address tokenA, address tokenB) internal pure returns (PoolKey memory) {\\r\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\r\\n        return PoolKey({token0: tokenA, token1: tokenB});\\r\\n    }\\r\\n\\r\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\r\\n    /// @param factory The Algebra factory contract address\\r\\n    /// @param key The PoolKey\\r\\n    /// @return pool The contract address of the V3 pool\\r\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\r\\n        require(key.token0 < key.token1);\\r\\n        pool = address(\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        hex'ff',\\r\\n                        factory,\\r\\n                        keccak256(abi.encode(key.token0, key.token1)),\\r\\n                        POOL_INIT_CODE_HASH\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/pool/IAlgebraPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '../IDataStorageOperator.sol';\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /**\\r\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\r\\n   * @return The operator address\\r\\n   */\\r\\n  function dataStorageOperator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\r\\n   * @return The contract address\\r\\n   */\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The first of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The second of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The pool tick spacing\\r\\n   * @dev Ticks can only be used at multiples of this value\\r\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n   * This value is an int24 to avoid casting even though it is always positive.\\r\\n   * @return The tick spacing\\r\\n   */\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /**\\r\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n   * @return The max amount of liquidity per tick\\r\\n   */\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/pool/IAlgebraPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n  /**\\r\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n   * and is exposed as a single method to save gas when accessed externally.\\r\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\r\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\r\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\r\\n   * boundary;\\r\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\r\\n   * Returns timepointIndex The index of the last written timepoint;\\r\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\r\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\r\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\r\\n   */\\r\\n  function globalState()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint160 price,\\r\\n      int24 tick,\\r\\n      uint16 fee,\\r\\n      uint16 timepointIndex,\\r\\n      uint8 communityFeeToken0,\\r\\n      uint8 communityFeeToken1,\\r\\n      bool unlocked\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The currently in range liquidity available to the pool\\r\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\r\\n   * Returned value cannot exceed type(uint128).max\\r\\n   */\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Look up information about a specific tick in the pool\\r\\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\\r\\n   * @param tick The tick to look up\\r\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\r\\n   * tick upper;\\r\\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\r\\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\r\\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\r\\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\r\\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\r\\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\r\\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\r\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\r\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n   * a specific position.\\r\\n   */\\r\\n  function ticks(int24 tick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 liquidityTotal,\\r\\n      int128 liquidityDelta,\\r\\n      uint256 outerFeeGrowth0Token,\\r\\n      uint256 outerFeeGrowth1Token,\\r\\n      int56 outerTickCumulative,\\r\\n      uint160 outerSecondsPerLiquidity,\\r\\n      uint32 outerSecondsSpent,\\r\\n      bool initialized\\r\\n    );\\r\\n\\r\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about a position by the position's key\\r\\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\r\\n   * @return liquidityAmount The amount of liquidity in the position;\\r\\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\r\\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\r\\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\r\\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\r\\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n   */\\r\\n  function positions(bytes32 key)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 liquidityAmount,\\r\\n      uint32 lastLiquidityAddTimestamp,\\r\\n      uint256 innerFeeGrowth0Token,\\r\\n      uint256 innerFeeGrowth1Token,\\r\\n      uint128 fees0,\\r\\n      uint128 fees1\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data about a specific timepoint index\\r\\n   * @param index The element of the timepoints array to fetch\\r\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\r\\n   * ago, rather than at a specific index in the array.\\r\\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\\r\\n   * Returns blockTimestamp The timestamp of the timepoint;\\r\\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns averageTick Time-weighted average tick;\\r\\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about active incentive\\r\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\r\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  function activeIncentive() external view returns (address virtualPool);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the lock time for added liquidity\\r\\n   */\\r\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/pool/IAlgebraPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Pool state that is not stored\\r\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\r\\n * blockchain. The functions here may have variable gas costs.\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolDerivedState {\\r\\n  /**\\r\\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\r\\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\r\\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\r\\n   * you must call it with secondsAgos = [3600, 0].\\r\\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\r\\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\r\\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\r\\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\r\\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\r\\n   * from the current block timestamp\\r\\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\r\\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\r\\n   */\\r\\n  function getTimepoints(uint32[] calldata secondsAgos)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\r\\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\r\\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\r\\n   * snapshot is taken and the second snapshot is taken.\\r\\n   * @param bottomTick The lower tick of the range\\r\\n   * @param topTick The upper tick of the range\\r\\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\\r\\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\r\\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\r\\n   */\\r\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 innerTickCumulative,\\r\\n      uint160 innerSecondsSpentPerLiquidity,\\r\\n      uint32 innerSecondsSpent\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/pool/IAlgebraPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /**\\r\\n   * @notice Sets the initial price for the pool\\r\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n   * @param price the initial sqrt price of the pool as a Q64.96\\r\\n   */\\r\\n  function initialize(uint160 price) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\r\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n   * @param sender The address which will receive potential surplus of paid tokens\\r\\n   * @param recipient The address for which the liquidity will be created\\r\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\r\\n   * @param topTick The upper tick of the position in which to add liquidity\\r\\n   * @param amount The desired amount of liquidity to mint\\r\\n   * @param data Any data that should be passed through to the callback\\r\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return liquidityActual The actual minted amount of liquidity\\r\\n   */\\r\\n  function mint(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amount0,\\r\\n      uint256 amount1,\\r\\n      uint128 liquidityActual\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Collects tokens owed to a position\\r\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n   * @param recipient The address which should receive the fees collected\\r\\n   * @param bottomTick The lower tick of the position for which to collect fees\\r\\n   * @param topTick The upper tick of the position for which to collect fees\\r\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n   * @return amount0 The amount of fees collected in token0\\r\\n   * @return amount1 The amount of fees collected in token1\\r\\n   */\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n   * @dev Fees must be collected separately via a call to #collect\\r\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n   * @param topTick The upper tick of the position for which to burn liquidity\\r\\n   * @param amount How much liquidity to burn\\r\\n   * @return amount0 The amount of token0 sent to the recipient\\r\\n   * @return amount1 The amount of token1 sent to the recipient\\r\\n   */\\r\\n  function burn(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount\\r\\n  ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\r\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param sender The address called this function (Comes from the Router)\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swapSupportingFeeOnInputTokens(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\r\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\r\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\r\\n   * the donation amount(s) from the callback\\r\\n   * @param recipient The address which will receive the token0 and token1 amounts\\r\\n   * @param amount0 The amount of token0 to send\\r\\n   * @param amount1 The amount of token1 to send\\r\\n   * @param data Any data to be passed through to the callback\\r\\n   */\\r\\n  function flash(\\r\\n    address recipient,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Permissioned pool actions\\r\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /**\\r\\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\r\\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\r\\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\r\\n   */\\r\\n  function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an active incentive\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\r\\n   */\\r\\n  function setIncentive(address virtualPoolAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets new lock time for added liquidity\\r\\n   * @param newLiquidityCooldown The time in seconds\\r\\n   */\\r\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/pool/IAlgebraPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /**\\r\\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\r\\n   * @param price The initial sqrt price of the pool, as a Q64.96\\r\\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n   */\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when liquidity is minted for a given position\\r\\n   * @param sender The address that minted the liquidity\\r\\n   * @param owner The owner of the position and recipient of any minted liquidity\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity minted to the position range\\r\\n   * @param amount0 How much token0 was required for the minted liquidity\\r\\n   * @param amount1 How much token1 was required for the minted liquidity\\r\\n   */\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when fees are collected by the owner of a position\\r\\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\r\\n   * @param owner The owner of the position for which fees are collected\\r\\n   * @param recipient The address that received fees\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param amount0 The amount of token0 fees collected\\r\\n   * @param amount1 The amount of token1 fees collected\\r\\n   */\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a position's liquidity is removed\\r\\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n   * @param owner The owner of the position for which liquidity is removed\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity to remove\\r\\n   * @param amount0 The amount of token0 withdrawn\\r\\n   * @param amount1 The amount of token1 withdrawn\\r\\n   */\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any swaps between token0 and token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the output of the swap\\r\\n   * @param amount0 The delta of the token0 balance of the pool\\r\\n   * @param amount1 The delta of the token1 balance of the pool\\r\\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n   * @param liquidity The liquidity of the pool after the swap\\r\\n   * @param tick The log base 1.0001 of price of the pool after the swap\\r\\n   */\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any flashes of token0/token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the tokens from flash\\r\\n   * @param amount0 The amount of token0 that was flashed\\r\\n   * @param amount1 The amount of token1 that was flashed\\r\\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n   */\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the community fee is changed by the pool\\r\\n   * @param communityFee0New The updated value of the token0 community fee percent\\r\\n   * @param communityFee1New The updated value of the token1 community fee percent\\r\\n   */\\r\\n  event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when new activeIncentive is set\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  event Incentive(address indexed virtualPoolAddress);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the fee changes\\r\\n   * @param fee The value of the token fee\\r\\n   */\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the LiquidityCooldown changes\\r\\n   * @param liquidityCooldown The value of locktime for added liquidity\\r\\n   */\\r\\n  event LiquidityCooldown(uint32 liquidityCooldown);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/interfaces/IDataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '../libraries/AdaptiveFee.sol';\\r\\n\\r\\ninterface IDataStorageOperator {\\r\\n  event FeeConfiguration(AdaptiveFee.Configuration feeConfig);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data belonging to a certain timepoint\\r\\n   * @param index The index of timepoint in the array\\r\\n   * @dev There is more convenient function to fetch a timepoint: observe(). Which requires not an index but seconds\\r\\n   * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\r\\n   * blockTimestamp The timestamp of the observation,\\r\\n   * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\r\\n   * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\r\\n   * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\r\\n   * averageTick Time-weighted average tick,\\r\\n   * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\r\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\r\\n  /// @param tick Initial tick\\r\\n  function initialize(uint32 time, int24 tick) external;\\r\\n\\r\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\r\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\r\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\r\\n  /// at exactly the timestamp between the two timepoints.\\r\\n  /// @param time The current block timestamp\\r\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\r\\n  function getSingleTimepoint(\\r\\n    uint32 time,\\r\\n    uint32 secondsAgo,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint112 volatilityCumulative,\\r\\n      uint256 volumePerAvgLiquidity\\r\\n    );\\r\\n\\r\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\r\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\r\\n  function getTimepoints(\\r\\n    uint32 time,\\r\\n    uint32[] memory secondsAgos,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return TWVolatilityAverage The average volatility in the recent range\\r\\n  /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\r\\n  function getAverages(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\r\\n\\r\\n  /// @notice Writes an dataStorage timepoint to the array\\r\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param blockTimestamp The timestamp of the new timepoint\\r\\n  /// @param tick The active tick at the time of the new timepoint\\r\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\r\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\r\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\r\\n  function write(\\r\\n    uint16 index,\\r\\n    uint32 blockTimestamp,\\r\\n    int24 tick,\\r\\n    uint128 liquidity,\\r\\n    uint128 volumePerLiquidity\\r\\n  ) external returns (uint16 indexUpdated);\\r\\n\\r\\n  /// @notice Changes fee configuration for the pool\\r\\n  function changeFeeConfiguration(AdaptiveFee.Configuration calldata feeConfig) external;\\r\\n\\r\\n  /// @notice Calculates gmean(volume/liquidity) for block\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @param amount0 Total amount of swapped token0\\r\\n  /// @param amount1 Total amount of swapped token1\\r\\n  /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\r\\n  function calculateVolumePerLiquidity(\\r\\n    uint128 liquidity,\\r\\n    int256 amount0,\\r\\n    int256 amount1\\r\\n  ) external pure returns (uint128 volumePerLiquidity);\\r\\n\\r\\n  /// @return windowLength Length of window used to calculate averages\\r\\n  function window() external view returns (uint32 windowLength);\\r\\n\\r\\n  /// @notice Calculates fee based on combination of sigmoids\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\r\\n  function getFee(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint16 fee);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/v1-core/contracts/libraries/AdaptiveFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title AdaptiveFee\\r\\n/// @notice Calculates fee based on combination of sigmoids\\r\\nlibrary AdaptiveFee {\\r\\n  // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\r\\n  struct Configuration {\\r\\n    uint16 alpha1; // max value of the first sigmoid\\r\\n    uint16 alpha2; // max value of the second sigmoid\\r\\n    uint32 beta1; // shift along the x-axis for the first sigmoid\\r\\n    uint32 beta2; // shift along the x-axis for the second sigmoid\\r\\n    uint16 gamma1; // horizontal stretch factor for the first sigmoid\\r\\n    uint16 gamma2; // horizontal stretch factor for the second sigmoid\\r\\n    uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\r\\n    uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\r\\n    uint16 baseFee; // minimum possible fee\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates fee based on formula:\\r\\n  /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\\r\\n  /// maximum value capped by baseFee + alpha1 + alpha2\\r\\n  function getFee(\\r\\n    uint88 volatility,\\r\\n    uint256 volumePerLiquidity,\\r\\n    Configuration memory config\\r\\n  ) internal pure returns (uint16 fee) {\\r\\n    uint256 sumOfSigmoids = sigmoid(volatility, config.gamma1, config.alpha1, config.beta1) +\\r\\n      sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\\r\\n\\r\\n    if (sumOfSigmoids > type(uint16).max) {\\r\\n      // should be impossible, just in case\\r\\n      sumOfSigmoids = type(uint16).max;\\r\\n    }\\r\\n\\r\\n    return uint16(config.baseFee + sigmoid(volumePerLiquidity, config.volumeGamma, uint16(sumOfSigmoids), config.volumeBeta)); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\\r\\n  }\\r\\n\\r\\n  /// @notice calculates \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\r\\n  /// that is a sigmoid with a maximum value of \u03b1, x-shifted by \u03b2, and stretched by \u03b3\\r\\n  /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\\r\\n  function sigmoid(\\r\\n    uint256 x,\\r\\n    uint16 g,\\r\\n    uint16 alpha,\\r\\n    uint256 beta\\r\\n  ) internal pure returns (uint256 res) {\\r\\n    if (x > beta) {\\r\\n      x = x - beta;\\r\\n      if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\\r\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\r\\n      uint256 ex = exp(x, g, g8); // < 155 bits\\r\\n      res = (alpha * ex) / (g8 + ex); // in worst case: (16 + 155 bits) / 155 bits\\r\\n      // so res <= alpha\\r\\n    } else {\\r\\n      x = beta - x;\\r\\n      if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\\r\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\r\\n      uint256 ex = g8 + exp(x, g, g8); // < 156 bits\\r\\n      res = (alpha * g8) / ex; // in worst case: (16 + 128 bits) / 156 bits\\r\\n      // g8 <= ex, so res <= alpha\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice calculates e^(x/g) * g^8 in a series, since (around zero):\\r\\n  /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\\r\\n  /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\\r\\n  function exp(\\r\\n    uint256 x,\\r\\n    uint16 g,\\r\\n    uint256 gHighestDegree\\r\\n  ) internal pure returns (uint256 res) {\\r\\n    // calculating:\\r\\n    // g**8 + x * g**7 + (x**2 * g**6) / 2 + (x**3 * g**5) / 6 + (x**4 * g**4) / 24 + (x**5 * g**3) / 120 + (x**6 * g^2) / 720 + x**7 * g / 5040 + x**8 / 40320\\r\\n\\r\\n    // x**8 < 152 bits (19*8) and g**8 < 128 bits (8*16)\\r\\n    // so each summand < 152 bits and res < 155 bits\\r\\n    uint256 xLowestDegree = x;\\r\\n    res = gHighestDegree; // g**8\\r\\n\\r\\n    gHighestDegree /= g; // g**7\\r\\n    res += xLowestDegree * gHighestDegree;\\r\\n\\r\\n    gHighestDegree /= g; // g**6\\r\\n    xLowestDegree *= x; // x**2\\r\\n    res += (xLowestDegree * gHighestDegree) / 2;\\r\\n\\r\\n    gHighestDegree /= g; // g**5\\r\\n    xLowestDegree *= x; // x**3\\r\\n    res += (xLowestDegree * gHighestDegree) / 6;\\r\\n\\r\\n    gHighestDegree /= g; // g**4\\r\\n    xLowestDegree *= x; // x**4\\r\\n    res += (xLowestDegree * gHighestDegree) / 24;\\r\\n\\r\\n    gHighestDegree /= g; // g**3\\r\\n    xLowestDegree *= x; // x**5\\r\\n    res += (xLowestDegree * gHighestDegree) / 120;\\r\\n\\r\\n    gHighestDegree /= g; // g**2\\r\\n    xLowestDegree *= x; // x**6\\r\\n    res += (xLowestDegree * gHighestDegree) / 720;\\r\\n\\r\\n    xLowestDegree *= x; // x**7\\r\\n    res += (xLowestDegree * g) / 5040 + (xLowestDegree * x) / (40320);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"computeIVsymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_twapPeriod\",\"type\":\"uint32\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"timeWeightedAverageTick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioAX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioBX96\",\"type\":\"uint160\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"getAmountsForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioAX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioBX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getLiquidityForAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getQuoteAtTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"}],\"name\":\"getSqrtRatioAtTick\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"toUint128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "UV3Math", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}