{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// LIBRARIES\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// SAFEMATH its a Openzeppelin Lib. Check out for more info @ https://docs.openzeppelin.com/contracts/2.x/api/math\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INTERFACES\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMCONTROLLER\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmController {\r\n    function _checkWLSC(address Controller, address Client)\r\n        external\r\n        pure\r\n        returns (bool);\r\n\r\n    function _getNFM() external pure returns (address);\r\n\r\n    function _getNFMStaking() external pure returns (address);\r\n\r\n    function _getNFMStakingTreasuryERC20() external pure returns (address);\r\n\r\n    function _getNFMStakingTreasuryETH() external pure returns (address);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMSTAKINGRESERVEERC20\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmStakingReserveERC20 {\r\n    function _updateStake() external returns (bool);\r\n\r\n    function _returnDayCounter() external view returns (uint256);\r\n\r\n    function _returnNextUpdateTime() external view returns (uint256);\r\n\r\n    function _returnCurrenciesArrayLength() external view returns (uint256);\r\n\r\n    function _returnCurrencies()\r\n        external\r\n        view\r\n        returns (address[] memory CurrenciesArray);\r\n\r\n    function _returnTotalAmountPerDayForRewards(address Coin, uint256 Day)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function _returnDailyRewardPer1NFM(address Coin, uint256 Day)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function _realizePayments(\r\n        address Coin,\r\n        uint256 Amount,\r\n        address Staker\r\n    ) external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// IERC20\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n/// @title NFMStaking.sol\r\n/// @author Fernando Viktor Seidl E-mail: viktorseidl@gmail.com\r\n/// @notice This contract holds all deposits of the investors and manages them as well as the interest calculations to be generated from them\r\n/// @dev This contract holds all deposits of the investors and manages them as well as the interest calculations to be generated from them\r\n///\r\n///\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ncontract NFMStaking {\r\n    //include SafeMath\r\n    using SafeMath for uint256;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    CONTROLLER\r\n    OWNER = MSG.SENDER ownership will be handed over to dao\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    INfmController private _Controller;\r\n    address private _Owner;\r\n    address private _SController;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    TotalDepositsOnStake        =>  total investments\r\n    generalIndex                =>  Unique Index\r\n    CurrenciesReserveArray      =>  Array includes all allowed currencies\r\n    Staker                      =>  Tuple containing all information about a user and his investment\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    uint256 public TotalDepositsOnStake;\r\n    uint256 public generalIndex;\r\n    address[] public CurrenciesReserveArray;\r\n    uint256 private _locked = 0;\r\n    //Struct for each deposit\r\n    struct Staker {\r\n        uint256 index;\r\n        uint256 startday;\r\n        uint256 inicialtimestamp;\r\n        uint256 deposittimeDays;\r\n        uint256 amountNFMStaked;\r\n        address ofStaker;\r\n        bool claimed;\r\n    }\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    MAPPINGS\r\n    StakerInfo(UniqueIndex => Tuple Staker)        =>  //GIndex => Staker\r\n    DepositsOfStaker(Staker address => UniqueIndexes)        =>  //Address Staker => Array GIndexes by Staker\r\n    TotalStakedPerDay(DayIndex => Totaldeposits)        =>  //Day => TotalDeposits\r\n    ClaimingConfirmation(UniqueIndex => (Staker address => 0=false 1=true))        =>  //GIndex => Coin address => 1 if paid\r\n    RewardsToWithdraw(UniqueIndex => Array Amounts)        =>  //Gindex => Array of Claimed Rewards\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    mapping(uint256 => Staker) public StakerInfo;\r\n    mapping(address => uint256[]) public DepositsOfStaker;\r\n    mapping(uint256 => uint256) public TotalStakedPerDay;\r\n    mapping(uint256 => mapping(address => uint256)) public ClaimingConfirmation;\r\n    mapping(uint256 => uint256[]) public RewardsToWithdraw;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /* \r\n    MODIFIER\r\n    onlyOwner       => Only Controller listed Contracts and Owner can interact with this contract.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(\r\n            _Controller._checkWLSC(_SController, msg.sender) == true ||\r\n                _Owner == msg.sender,\r\n            \"oO\"\r\n        );\r\n        require(msg.sender != address(0), \"0A\");\r\n        _;\r\n    }\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    MODIFIER\r\n    reentrancyGuard       => secures the protocol against reentrancy attacks\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    modifier reentrancyGuard() {\r\n        require(_locked == 0);\r\n        _locked = 1;\r\n        _;\r\n        _locked = 0;\r\n    }\r\n\r\n    constructor(address Controller) {\r\n        _Owner = msg.sender;\r\n        INfmController Cont = INfmController(Controller);\r\n        _Controller = Cont;\r\n        _SController = Controller;\r\n        generalIndex = 0;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_updateCurrenciesList() returns (bool);\r\n        This function checks the currencies in the NFMStakingReserveERC20. If the array in the NFMStakingReserveERC20 is longer, then update array\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _updateCurrenciesList() internal returns (bool) {\r\n        if (\r\n            CurrenciesReserveArray.length <\r\n            INfmStakingReserveERC20(\r\n                address(_Controller._getNFMStakingTreasuryERC20())\r\n            )._returnCurrenciesArrayLength()\r\n        ) {\r\n            CurrenciesReserveArray = INfmStakingReserveERC20(\r\n                address(_Controller._getNFMStakingTreasuryERC20())\r\n            )._returnCurrencies();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_returnTotalDepositsOnStake() returns (uint256);\r\n        This function returns the total amount of all deposits\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _returnTotalDepositsOnStake() public view returns (uint256) {\r\n        return TotalDepositsOnStake;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_returngeneralIndex() returns (uint256);\r\n        This function returns the unique Index\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _returngeneralIndex() public view returns (uint256) {\r\n        return generalIndex;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_returnStakerInfo(uint256) returns (struct Staker);\r\n        This function returns the complete information of a specific deposit\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _returnStakerInfo(uint256 Gindex)\r\n        public\r\n        view\r\n        returns (Staker memory)\r\n    {\r\n        return StakerInfo[Gindex];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_returnDepositsOfDay(uint256) returns (uint256);\r\n        This function returns all deposits of a specific day\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _returnDepositsOfDay(uint256 Day) public view returns (uint256) {\r\n        return TotalStakedPerDay[Day];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_returnDepositsOfStaker() returns (uint256[]);\r\n        This function returns all deposits from a specific investor\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _returnDepositsOfStaker() public view returns (uint256[] memory) {\r\n        return DepositsOfStaker[msg.sender];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_returnClaimingConfirmation(address, uint256) returns (uint256);\r\n        This function returns a numeric boolean whether the withdrawal has occurred\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _returnClaimingConfirmation(address Coin, uint256 Gindex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ClaimingConfirmation[Gindex][Coin];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_setDepositOnDailyMap(uint256,uint256,uint256) returns (bool);\r\n        This function saves the deposit in the appropriate times for calculation.\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _setDepositOnDailyMap(\r\n        uint256 Amount,\r\n        uint256 Startday,\r\n        uint256 Period\r\n    ) internal returns (bool) {\r\n        for (uint256 i = Startday; i < (Startday + Period); i++) {\r\n            TotalStakedPerDay[i] += Amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_calculateRewardPerDeposit(address, uint256, uint256) returns (uint256);\r\n        This function calculates interest on a specific day for a specific deposit.\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _calculateRewardPerDeposit(\r\n        address Coin,\r\n        uint256 RewardAmount,\r\n        uint256 DepositAmount\r\n    ) public view returns (uint256) {\r\n        uint256 CoinDecimal = IERC20(address(Coin)).decimals();\r\n        if (CoinDecimal < 18) {\r\n            return\r\n                SafeMath.div(\r\n                    SafeMath.div(\r\n                        SafeMath.mul(\r\n                            (RewardAmount * 10**(18 - CoinDecimal)),\r\n                            DepositAmount\r\n                        ),\r\n                        10**18\r\n                    ),\r\n                    (10**(18 - CoinDecimal))\r\n                );\r\n        } else {\r\n            return\r\n                SafeMath.div(SafeMath.mul(RewardAmount, DepositAmount), 10**18);\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_calculateEarnings(address, uint256, uint256, uint256) returns (uint256);\r\n        This function calculates the total interest on a specific day for a specific period on a deposit.\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _calculateEarnings(\r\n        address Coin,\r\n        uint256 StakedAmount,\r\n        uint256 StartDay,\r\n        uint256 Period\r\n    ) public view returns (uint256) {\r\n        uint256 Earned;\r\n        for (uint256 i = StartDay; i < (StartDay + Period); i++) {\r\n            Earned += _calculateRewardPerDeposit(\r\n                Coin,\r\n                INfmStakingReserveERC20(\r\n                    address(_Controller._getNFMStakingTreasuryERC20())\r\n                )._returnDailyRewardPer1NFM(Coin, i),\r\n                StakedAmount\r\n            );\r\n        }\r\n        return Earned;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_deposit(uint256, uint256) returns (bool);\r\n        This function invests an amount X of NFM in this contract. The NFM must be released beforehand to the contract by means of approval\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _deposit(uint256 Amount, uint256 Period) public returns (bool) {\r\n        if (\r\n            INfmStakingReserveERC20(\r\n                address(_Controller._getNFMStakingTreasuryERC20())\r\n            )._returnNextUpdateTime() < block.timestamp\r\n        ) {\r\n            require(\r\n                INfmStakingReserveERC20(\r\n                    address(_Controller._getNFMStakingTreasuryERC20())\r\n                )._updateStake() == true,\r\n                \"NU\"\r\n            );\r\n        }\r\n        _updateCurrenciesList();\r\n        require(\r\n            Period == 7 ||\r\n                Period == 15 ||\r\n                Period == 30 ||\r\n                Period == 45 ||\r\n                Period == 60,\r\n            \"NIP\"\r\n        );\r\n        require(\r\n            IERC20(address(_Controller._getNFM())).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                Amount\r\n            ) == true,\r\n            \"<A\"\r\n        );\r\n        require(\r\n            _setDepositOnDailyMap(\r\n                Amount,\r\n                INfmStakingReserveERC20(\r\n                    address(_Controller._getNFMStakingTreasuryERC20())\r\n                )._returnDayCounter(),\r\n                Period\r\n            ) == true,\r\n            \"NDD\"\r\n        );\r\n        StakerInfo[generalIndex] = Staker(\r\n            generalIndex,\r\n            INfmStakingReserveERC20(\r\n                address(_Controller._getNFMStakingTreasuryERC20())\r\n            )._returnDayCounter(),\r\n            block.timestamp,\r\n            Period,\r\n            Amount,\r\n            msg.sender,\r\n            false\r\n        );\r\n        TotalDepositsOnStake += Amount;\r\n        DepositsOfStaker[msg.sender].push(generalIndex);\r\n        generalIndex++;\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_claimRewards(uint256) returns (bool);\r\n        This function is responsible for claiming the interest\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _claimRewards(uint256 Index)\r\n        public\r\n        reentrancyGuard\r\n        returns (bool)\r\n    {\r\n        if (\r\n            INfmStakingReserveERC20(\r\n                address(_Controller._getNFMStakingTreasuryERC20())\r\n            )._returnNextUpdateTime() < block.timestamp\r\n        ) {\r\n            require(\r\n                INfmStakingReserveERC20(\r\n                    address(_Controller._getNFMStakingTreasuryERC20())\r\n                )._updateStake() == true,\r\n                \"NU\"\r\n            );\r\n        }\r\n        _updateCurrenciesList();\r\n        require(StakerInfo[Index].ofStaker == msg.sender, \"oO\");\r\n        require(\r\n            StakerInfo[Index].inicialtimestamp +\r\n                (86400 * StakerInfo[Index].deposittimeDays) <\r\n                block.timestamp,\r\n            \"CNT\"\r\n        );\r\n        require(StakerInfo[Index].claimed == false, \"AC\");\r\n        for (uint256 i = 0; i < CurrenciesReserveArray.length; i++) {\r\n            RewardsToWithdraw[Index].push(\r\n                _calculateEarnings(\r\n                    CurrenciesReserveArray[i],\r\n                    StakerInfo[Index].amountNFMStaked,\r\n                    StakerInfo[Index].startday,\r\n                    StakerInfo[Index].deposittimeDays\r\n                )\r\n            );\r\n        }\r\n        StakerInfo[Index].claimed = true;\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n        @_withdrawDepositAndRewards(uint256) returns (bool);\r\n        This function is responsible for the payment and withdrawal of interest and deposit\r\n    */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _withdrawDepositAndRewards(uint256 Index)\r\n        public\r\n        reentrancyGuard\r\n        returns (bool)\r\n    {\r\n        require(ClaimingConfirmation[Index][_Controller._getNFM()] == 0, \"AW\");\r\n        require(\r\n            StakerInfo[Index].inicialtimestamp +\r\n                (86400 * StakerInfo[Index].deposittimeDays) <\r\n                block.timestamp,\r\n            \"CNT\"\r\n        );\r\n        require(StakerInfo[Index].claimed == true, \"AC\");\r\n        require(StakerInfo[Index].ofStaker == msg.sender, \"oO\");\r\n        for (uint256 i = 0; i < RewardsToWithdraw[Index].length; i++) {\r\n            require(\r\n                INfmStakingReserveERC20(\r\n                    address(_Controller._getNFMStakingTreasuryERC20())\r\n                )._realizePayments(\r\n                        CurrenciesReserveArray[i],\r\n                        RewardsToWithdraw[Index][i],\r\n                        msg.sender\r\n                    ) == true,\r\n                \"NP\"\r\n            );\r\n            ClaimingConfirmation[Index][CurrenciesReserveArray[i]] = 1;\r\n        }\r\n        require(\r\n            IERC20(address(_Controller._getNFM())).transfer(\r\n                msg.sender,\r\n                StakerInfo[Index].amountNFMStaked\r\n            ) == true,\r\n            \"NDP\"\r\n        );\r\n        TotalDepositsOnStake -= StakerInfo[Index].amountNFMStaked;\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_getWithdraw(address Coin,address To,uint256 amount,bool percent) returns (bool);\r\n    This function is used by Vault Contracts for generating addictional income on Investments.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _getWithdraw(\r\n        address Coin,\r\n        address To,\r\n        uint256 amount,\r\n        bool percent\r\n    ) public onlyOwner returns (bool) {\r\n        require(To != address(0), \"0A\");\r\n        uint256 CoinAmount = IERC20(address(Coin)).balanceOf(address(this));\r\n        if (percent == true) {\r\n            //makeCalcs on Percentatge\r\n            uint256 AmountToSend = SafeMath.div(\r\n                SafeMath.mul(CoinAmount, amount),\r\n                100\r\n            );\r\n            IERC20(address(Coin)).transfer(To, AmountToSend);\r\n            return true;\r\n        } else {\r\n            if (amount == 0) {\r\n                IERC20(address(Coin)).transfer(To, CoinAmount);\r\n            } else {\r\n                IERC20(address(Coin)).transfer(To, amount);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ClaimingConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CurrenciesReserveArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepositsOfStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RewardsToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inicialtimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposittimeDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNFMStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ofStaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalDepositsOnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TotalStakedPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"StakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Period\",\"type\":\"uint256\"}],\"name\":\"_calculateEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"RewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositAmount\",\"type\":\"uint256\"}],\"name\":\"_calculateRewardPerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Index\",\"type\":\"uint256\"}],\"name\":\"_claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Period\",\"type\":\"uint256\"}],\"name\":\"_deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"percent\",\"type\":\"bool\"}],\"name\":\"_getWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Gindex\",\"type\":\"uint256\"}],\"name\":\"_returnClaimingConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Day\",\"type\":\"uint256\"}],\"name\":\"_returnDepositsOfDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_returnDepositsOfStaker\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Gindex\",\"type\":\"uint256\"}],\"name\":\"_returnStakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inicialtimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposittimeDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNFMStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ofStaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct NFMStaking.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_returnTotalDepositsOnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_returngeneralIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Index\",\"type\":\"uint256\"}],\"name\":\"_withdrawDepositAndRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFMStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4dc0c3c0141477742078e4676c909650e29a71b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://152b69ccfff907142ceb9ff771feadd69f88fb4ab2d9aa0289cb5902f0948ffb"}