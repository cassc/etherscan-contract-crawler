{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: Contracts/ISLAMI_P2P_V2.sol\r\n\r\n\r\n\r\n/*\r\n@dev: P2P smart contract ISLAMI P2P V 2\r\n*/\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.19;\r\nusing SafeMath for uint256;\r\n\r\nuint256 constant MAX_UINT = 2**256 - 1;\r\n\r\ninterface IDODOV2 {\r\n    function querySellBase(address trader, uint256 payBaseAmount)\r\n        external\r\n        view\r\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\r\n\r\n    function querySellQuote(address trader, uint256 payQuoteAmount)\r\n        external\r\n        view\r\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\r\n}\r\n\r\ninterface IDODOProxy {\r\n    function dodoSwapV2TokenToToken(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external returns (uint256 returnAmount);\r\n}\r\n\r\ncontract Swap {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant burn = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public slippage = 1;\r\n    uint256 public burned;\r\n\r\n    function getPriceBuy(\r\n        address _pool,\r\n        address _sender,\r\n        uint256 _amount,\r\n        uint256 _slippage\r\n    ) public view returns (uint256 _Price) {\r\n        (uint256 receivedBaseAmount, ) = IDODOV2(_pool).querySellQuote(\r\n            _sender,\r\n            _amount\r\n        );\r\n        uint256 minReturnAmount = receivedBaseAmount.mul(100 - _slippage).div(\r\n            100\r\n        );\r\n        return (minReturnAmount);\r\n    }\r\n\r\n    function getPriceSell(\r\n        address _pool,\r\n        address _sender,\r\n        uint256 _amount,\r\n        uint256 _slippage\r\n    ) public view returns (uint256 _Price) {\r\n        (uint256 receivedQuoteAmount, ) = IDODOV2(_pool).querySellBase(\r\n            _sender,\r\n            _amount\r\n        );\r\n        uint256 minReturnAmount = receivedQuoteAmount.mul(100 - _slippage).div(\r\n            100\r\n        );\r\n        return (minReturnAmount);\r\n    }\r\n\r\n    address USDCpool = 0x9723520d16690075e80cd8108f7C474784F96bCe; //ISLAMI pool on DODO\r\n    address USDTpool = 0x14afbB9E6Ab4Ab761f067fA131e46760125301Fc;\r\n    address USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n    address USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\r\n    address dodoApprove = 0x6D310348d5c12009854DFCf72e0DF9027e8cb4f4; //Dodo Approve Address\r\n    address dodoProxy = 0xa222e6a71D1A1Dd5F279805fbe38d5329C1d0e70; //Dodo proxy address\r\n\r\n    function useDodoSwapV2(\r\n        address _owner,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 _amount,\r\n        uint256 _slippage,\r\n        uint256 directions\r\n    ) internal {\r\n        address dodoV2Pool = 0x9723520d16690075e80cd8108f7C474784F96bCe;\r\n        if (fromToken == USDT || toToken == USDT) {\r\n            dodoV2Pool = USDTpool;\r\n        }\r\n        uint256 minAmount;\r\n        if (_slippage < slippage) {\r\n            _slippage = slippage;\r\n        }\r\n        // check swap if buy or sell\r\n        IERC20(fromToken).transferFrom(msg.sender, address(this), _amount);\r\n        if (directions == 0 || directions == 1) {\r\n            minAmount = getPriceBuy(dodoV2Pool, msg.sender, _amount, slippage);\r\n        } else {\r\n            minAmount = getPriceSell(dodoV2Pool, msg.sender, _amount, slippage);\r\n        }\r\n        //check dodo pair\r\n        address[] memory dodoPairs = new address[](1); //one-hop\r\n        dodoPairs[0] = dodoV2Pool;\r\n        //set dead line\r\n        uint256 deadline = block.timestamp + 60 * 10;\r\n        //approve tokens\r\n        _generalApproveMax(fromToken, dodoApprove, _amount);\r\n        // get return amount\r\n        uint256 returnAmount = IDODOProxy(dodoProxy).dodoSwapV2TokenToToken(\r\n            fromToken,\r\n            toToken,\r\n            _amount,\r\n            minAmount,\r\n            dodoPairs,\r\n            directions,\r\n            false,\r\n            deadline\r\n        );\r\n        if (_owner == burn) {\r\n            IERC20(toToken).safeTransfer(burn, returnAmount);\r\n            burned += returnAmount;\r\n        } else {\r\n            IERC20(toToken).safeTransfer(msg.sender, returnAmount);\r\n        }\r\n    }\r\n\r\n    function _generalApproveMax(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 allowance = IERC20(token).allowance(address(this), to);\r\n        if (allowance < amount) {\r\n            if (allowance > 0) {\r\n                IERC20(token).safeApprove(to, 0);\r\n            }\r\n            IERC20(token).safeApprove(to, MAX_UINT);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ISLAMIp2p_V2 is Swap {\r\n    /*\r\n@dev: Private values\r\n*/\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    address public owner;\r\n\r\n    IERC20 ISLAMI = IERC20(0x9c891326Fd8b1a713974f73bb604677E1E63396D);\r\n\r\n    uint256 public orN; //represents order number created\r\n    uint256 public sellOrders;\r\n    uint256 public buyOrders;\r\n    uint256 public totalOrders;\r\n    uint256 public maxUserOrders = 6;\r\n    uint256 public canceledOrders;\r\n    uint256 public ISLAMIinOrder;\r\n    uint256 public USDinOrder;\r\n\r\n    uint256 private maxISLAMI;\r\n    uint256 private constant ISLAMIdcml = 10**7;\r\n\r\n    uint256 public activationFee = 1000 * 10**7;\r\n    uint256 public p2pFee = 1;\r\n    uint256 public feeFactor = 1000;\r\n    uint256 public feeInUSDT = 1 * 10**6;\r\n    uint256 public range = 30;\r\n\r\n    struct orderDetails {\r\n        uint256 orderType; // 1 = sell , 2 = buy\r\n        uint256 orderNumber;\r\n        address sB; //seller or buyer\r\n        IERC20 orderCurrency;\r\n        uint256 remainAmount;\r\n        uint256 orderPrice;\r\n        uint256 remainCurrency;\r\n        uint256 dateCreated;\r\n        uint256 orderLife;\r\n        bool orderStatus; // represents if order is completed or not\r\n    }\r\n    struct userHistory {\r\n        uint256 ordersCount;\r\n        uint256 sold;\r\n        uint256 bought;\r\n    }\r\n\r\n    event orderCreated(\r\n        address OrderOwner,\r\n        uint256 Type,\r\n        uint256 Amount,\r\n        uint256 Price,\r\n        IERC20 Currency\r\n    );\r\n    event orderCancelled(address OrderOwner, uint256 Type);\r\n    event TokensReturned(address OrderOwner, uint256 OrderType, uint256 Amount);\r\n    event orderFilled(address OrderOwner, uint256 Type);\r\n    event orderBuy(\r\n        address OrderOwner,\r\n        address OrderTaker,\r\n        uint256 Amount,\r\n        uint256 Price\r\n    );\r\n    event orderSell(\r\n        address OrderOwner,\r\n        address OrderTaker,\r\n        uint256 Amount,\r\n        uint256 Price\r\n    );\r\n    event ISLAMIswap(string Type, uint256 Amount, address Swaper);\r\n\r\n    mapping(address => mapping(uint256 => orderDetails)) public p2p;\r\n    mapping(address => uint256) public monopoly;\r\n    mapping(address => userHistory) public userOrders;\r\n    mapping(address => bool) public canCreateOrder;\r\n    mapping(address => bool) public isActivated;\r\n    mapping(address => uint256) public activeOrders;\r\n    mapping(uint256 => uint256) public orderIdToIndex;\r\n\r\n    uint256[] public orders;\r\n    address[] public users;\r\n\r\n/* @dev: Check if contract owner */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not Owner!\");\r\n        _;\r\n    }     \r\n    /*\r\n    @dev: prevent reentrancy when function is executed\r\n*/\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        orN = 0;\r\n        maxISLAMI = 33000 * ISLAMIdcml;\r\n    }\r\n\r\n    function setMaxISLAMI(uint256 _newMax) external onlyOwner{\r\n        maxISLAMI = _newMax * ISLAMIdcml;\r\n    }\r\n\r\n    function ISLAMIprice1() public view returns (uint256 _price) {\r\n        _price = getPriceSell(USDTpool, address(this), 10000000, 1);\r\n        return (_price);\r\n    }\r\n\r\n    function ISLAMIprice() public view returns (uint256 _price) {\r\n        _price = getPriceSell(USDCpool, address(this), 10000000, 1);\r\n        return (_price);\r\n    }\r\n\r\n    function swapISLAMI(\r\n        uint256 _type,\r\n        address _currency,\r\n        uint256 _amount,\r\n        uint256 _slippage\r\n    ) external {\r\n        string memory Type;\r\n        address _fromToken;\r\n        address _toToken;\r\n        if (_type == 0 || _type == 1) {\r\n            Type = \"Buy\";\r\n            _fromToken = _currency;\r\n            _toToken = address(ISLAMI);\r\n        } else {\r\n            Type = \"Sell\";\r\n            _fromToken = address(ISLAMI);\r\n            _toToken = _currency;\r\n            require(_amount <= maxISLAMI, \"Price impact is too high\");\r\n        }\r\n        useDodoSwapV2(\r\n            msg.sender,\r\n            _fromToken,\r\n            _toToken,\r\n            _amount,\r\n            _slippage,\r\n            _type\r\n        );\r\n        emit ISLAMIswap(Type, _amount, msg.sender);\r\n    }\r\n\r\n    function changeFee(\r\n        uint256 _activationFee,\r\n        uint256 _p2pFee,\r\n        uint256 _feeFactor\r\n    ) external onlyOwner{\r\n        require(_p2pFee >= 1 && _feeFactor >= 100, \"Fee can't be zero\");\r\n        activationFee = _activationFee.mul(ISLAMIdcml);\r\n        p2pFee = _p2pFee;\r\n        feeFactor = _feeFactor;\r\n    }\r\n\r\n    function changeRange(uint256 _range) external onlyOwner{\r\n        range = _range;\r\n    }\r\n\r\n    function activateP2P() external nonReentrant {\r\n        require(\r\n            isActivated[msg.sender] != true,\r\n            \"User P2P is already activated!\"\r\n        );\r\n        if (ISLAMI.balanceOf(msg.sender) >= activationFee) {\r\n            //require approve from ISLAMI smart contract\r\n            ISLAMI.transferFrom(msg.sender, burn, activationFee);\r\n            burned += activationFee;\r\n        } else {\r\n            require(\r\n                IERC20(USDT).balanceOf(msg.sender) >= feeInUSDT,\r\n                \"need 1 USDT to activate p2p\"\r\n            );\r\n            //require approve from USDT smart contract\r\n            useDodoSwapV2(burn, USDT, address(ISLAMI), feeInUSDT, 1, 1);\r\n        }\r\n\r\n        // canCreateOrder[msg.sender] = true;\r\n        isActivated[msg.sender] = true;\r\n    }\r\n\r\n    //if updated keep ativated users\r\n    function byPassP2P(address[] memory _user) external onlyOwner{\r\n        for (uint256 i = 1; i < _user.length; i++) {\r\n            // canCreateOrder[_user[i]] = true;\r\n            isActivated[_user[i]] = true;\r\n        }\r\n    }\r\n\r\n    function createOrder(\r\n        uint256 _type,\r\n        uint256 _islamiAmount,\r\n        uint256 _price,\r\n        IERC20 _currency\r\n    ) public nonReentrant {\r\n        require(isActivated[msg.sender],\"P2P is not activated\");\r\n        require(_type == 1 || _type == 2, \"Type not found (Buy or Sell)\");\r\n        require(activeOrders[msg.sender] < maxUserOrders, \"Max orders for user reached\");\r\n        totalOrders++;\r\n        orN++;\r\n        uint256 islamiAmount = _islamiAmount.div(ISLAMIdcml);\r\n        uint256 _currencyAmount = _price.mul(islamiAmount);\r\n        uint256 _p2pFee;\r\n\r\n        uint256 dexPrice = ISLAMIprice();\r\n        uint256 _limit = dexPrice.mul(range).div(100);\r\n        uint256 _up = dexPrice.add(_limit);\r\n        uint256 _down = dexPrice.sub(_limit);\r\n        require(_price < _up && _price > _down, \"behing range\");\r\n\r\n        p2p[msg.sender][orN] = orderDetails({\r\n            orderType: _type,\r\n            orderNumber: orN,\r\n            sB: msg.sender,\r\n            orderCurrency: _currency,\r\n            remainAmount: _islamiAmount,\r\n            orderPrice: _price,\r\n            remainCurrency: _price.mul(_islamiAmount),\r\n            dateCreated: block.timestamp,\r\n            orderLife: block.timestamp.add(3 days),\r\n            orderStatus: true\r\n        });\r\n\r\n        if (_type == 1) {\r\n            //sell ISLAMI\r\n            p2p[msg.sender][orN].remainAmount = _islamiAmount;\r\n            p2p[msg.sender][orN].remainCurrency = 0;\r\n            _p2pFee = _islamiAmount.mul(p2pFee).div(feeFactor);\r\n            //require approve from ISLAMICOIN contract\r\n            require(\r\n                ISLAMI.transferFrom(msg.sender, address(this), _islamiAmount),\r\n                \"Check ISLAMI Balance or Allowance!\"\r\n            );\r\n            require(\r\n                ISLAMI.transferFrom(msg.sender, burn, _p2pFee),\r\n                \"Check ISLAMI Balance\"\r\n            );\r\n            ISLAMIinOrder += _islamiAmount;\r\n            sellOrders++;\r\n            burned += _p2pFee;\r\n        } else if (_type == 2) {\r\n            //buy ISLAMI\r\n            p2p[msg.sender][orN].remainCurrency = _currencyAmount;\r\n            p2p[msg.sender][orN].remainAmount = 0;\r\n            _p2pFee = _currencyAmount.mul(p2pFee).div(feeFactor);\r\n            require(\r\n                _currency.transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    _currencyAmount\r\n                ),\r\n                \"Check currency balance or allowance\"\r\n            );\r\n            useDodoSwapV2(\r\n                burn,\r\n                address(_currency),\r\n                address(ISLAMI),\r\n                _p2pFee,\r\n                1,\r\n                1\r\n            );\r\n            USDinOrder += _currencyAmount;\r\n            buyOrders++;\r\n        }\r\n\r\n        orders.push(orN);\r\n        orderIdToIndex[orN] = orders.length - 1;\r\n        activeOrders[msg.sender]++;\r\n        if(userOrders[msg.sender].ordersCount == 0){\r\n            users.push(msg.sender);\r\n        }\r\n        userOrders[msg.sender].ordersCount++;\r\n        emit orderCreated(msg.sender, _type, _islamiAmount, _price, _currency);\r\n    }\r\n\r\n    function getOrders()\r\n        public\r\n        view\r\n        returns (\r\n            orderDetails[] memory _buyOrders,\r\n            orderDetails[] memory _sellOrders\r\n        )\r\n    {\r\n        uint256 buyCount;\r\n        uint256 sellCount;\r\n\r\n        // Count the number of active buy and sell orders for each user\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            for (uint256 j = 0; j < orders.length; j++) {\r\n                if (p2p[user][orders[j]].orderStatus) {\r\n                    if (p2p[user][orders[j]].orderType == 1) {\r\n                        buyCount++;\r\n                    } else if (p2p[user][orders[j]].orderType == 2) {\r\n                        sellCount++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Initialize the arrays to store buy and sell orders\r\n        _buyOrders = new orderDetails[](buyCount);\r\n        _sellOrders = new orderDetails[](sellCount);\r\n\r\n        // Iterate through the orders and populate the buy and sell arrays\r\n        uint256 buyIndex;\r\n        uint256 sellIndex;\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            for (uint256 j = 0; j < orders.length; j++) {\r\n                orderDetails memory order = p2p[user][orders[j]];\r\n                if (order.orderStatus) {\r\n                    if (order.orderType == 1) {\r\n                        _buyOrders[buyIndex] = order;\r\n                        buyIndex++;\r\n                    } else if (order.orderType == 2) {\r\n                        _sellOrders[sellIndex] = order;\r\n                        sellIndex++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (_buyOrders, _sellOrders);\r\n    }\r\n\r\n    function editOrderPrice(uint256 orderId, uint256 newPrice) public {\r\n        require(orderIdToIndex[orderId] != 0, \"Invalid order ID\");\r\n\r\n        uint256 index = orderIdToIndex[orderId];\r\n        require(index < orders.length, \"Invalid order ID\");\r\n\r\n        orderDetails storage order = p2p[msg.sender][orderId];\r\n        require(order.sB == msg.sender, \"You can only edit your own orders\");\r\n\r\n        order.orderPrice = newPrice;\r\n    }\r\n\r\n    function _cancelOrder(address orderOwner, uint256 orderId) private {\r\n        require(orderIdToIndex[orderId] != 0, \"Invalid order ID\");\r\n\r\n        uint256 index = orderIdToIndex[orderId];\r\n        require(index < orders.length, \"Invalid order ID\");\r\n\r\n        orderDetails storage order = p2p[orderOwner][orderId];\r\n        require(order.sB == orderOwner, \"Caller not Owner of order or Admin\");\r\n\r\n        uint256 returnAmount;\r\n\r\n        if (order.orderType == 1) {\r\n            // Sell order\r\n            returnAmount = order.remainAmount;\r\n            ISLAMI.transfer(orderOwner, returnAmount);\r\n            ISLAMIinOrder -= returnAmount;\r\n        } else if (order.orderType == 2) {\r\n            // Buy order\r\n            returnAmount = order.remainCurrency;\r\n            order.orderCurrency.transfer(orderOwner, returnAmount);\r\n            USDinOrder -= returnAmount;\r\n        }\r\n\r\n        order.orderStatus = false;\r\n        activeOrders[orderOwner]--;\r\n\r\n        // Remove the order from the orders array\r\n        uint256 lastOrderId = orders[orders.length - 1];\r\n        orders[index] = lastOrderId;\r\n        orderIdToIndex[lastOrderId] = index;\r\n        orders.pop();\r\n        delete p2p[orderOwner][orderId];\r\n        delete orderIdToIndex[orderId];\r\n\r\n        emit orderCancelled(orderOwner, order.orderType);\r\n        emit TokensReturned(orderOwner, order.orderType, returnAmount);\r\n    }\r\n\r\n    function cancelOrder(uint256 orderId) public{\r\n        _cancelOrder(msg.sender, orderId);\r\n    }\r\n\r\n    function superCancelOrder(address orderOwner, uint256 orderId) external onlyOwner{\r\n        _cancelOrder(orderOwner, orderId);\r\n    }\r\n\r\n    function takeOrder(\r\n        address orderOwner,\r\n        uint256 orderId,\r\n        uint256 amount\r\n    ) public {\r\n        // require(orderId < orders.length, \"Invalid order ID\");\r\n        orderDetails storage order = p2p[orderOwner][orderId];\r\n        require(order.orderStatus, \"Order is already completed\");\r\n\r\n        IERC20 _currency = order.orderCurrency;\r\n        uint256 priceUSD = order.orderPrice;\r\n        uint256 amountUSD = amount; //.mul(USDdcml);\r\n        uint256 amountISLAMI = amount; //.mul(ISLAMIdcml);\r\n        uint256 toPay = amount.div(ISLAMIdcml).mul(priceUSD);\r\n        uint256 toReceive = amountUSD.mul(ISLAMIdcml).div(priceUSD);\r\n        uint256 _p2pFee = amountISLAMI.mul(p2pFee).div(feeFactor);\r\n\r\n        if (order.orderType == 1) {\r\n            // Sell order take (Buying ISLAMI from p2p user)\r\n            require(amount <= order.remainAmount, \"Invalid amount\");\r\n            require(\r\n                _currency.balanceOf(msg.sender) >= toPay,\r\n                \"Not enought USD\"\r\n            );\r\n\r\n            ISLAMI.transfer(burn, _p2pFee);\r\n            require(\r\n                _currency.transferFrom(msg.sender, orderOwner, toPay),\r\n                \"Check Currency Allowance\"\r\n            );\r\n            ISLAMI.transfer(msg.sender, amountISLAMI.sub(_p2pFee));\r\n\r\n            order.remainAmount -= amount;\r\n\r\n            userOrders[msg.sender].bought += amountISLAMI;\r\n\r\n            ISLAMIinOrder -= amountISLAMI;\r\n            burned += _p2pFee;\r\n            userOrders[order.sB].sold += amountISLAMI;\r\n\r\n            emit orderBuy(orderOwner, msg.sender, toPay, priceUSD);\r\n\r\n            if (order.remainAmount == 0) {\r\n                _deleteOrder(order.sB, orderId);\r\n            }\r\n        } else if (order.orderType == 2) {\r\n            // Buy order take (Selling ISLAMI to p2p user)\r\n            require(amountUSD <= order.remainCurrency, \"Invalid amount\");\r\n            require(\r\n                ISLAMI.balanceOf(msg.sender) >= amountISLAMI,\r\n                \"Not enought ISLAMI\"\r\n            );\r\n            _p2pFee = amountUSD.mul(p2pFee).div(feeFactor);\r\n\r\n            order.remainCurrency -= amountUSD;\r\n            USDinOrder -= amountUSD;\r\n\r\n            require(\r\n                ISLAMI.transferFrom(msg.sender, orderOwner, toReceive),\r\n                \"Check ISLAMI Allowance\"\r\n            );\r\n            _currency.transfer(msg.sender, amountUSD);\r\n\r\n            useDodoSwapV2(burn, address(_currency), address(ISLAMI), _p2pFee,1,1);\r\n\r\n            userOrders[order.sB].bought += toReceive;\r\n            userOrders[msg.sender].sold += toReceive;\r\n\r\n            emit orderSell(orderOwner, msg.sender, toReceive, priceUSD);\r\n\r\n            if (order.remainCurrency == 0) {\r\n                _deleteOrder(order.sB, orderId);\r\n            }\r\n        }\r\n\r\n        emit orderFilled(msg.sender, order.orderType);\r\n    }\r\n\r\n    function _deleteOrder(address user, uint256 orderId) internal {\r\n        activeOrders[user]--;\r\n        orderDetails storage order = p2p[user][orderId];\r\n        order.orderStatus = false;\r\n\r\n        // Remove the order from the orders array\r\n        uint256 index = orderIdToIndex[orderId];\r\n        uint256 lastOrderId = orders[orders.length - 1];\r\n        orders[index] = lastOrderId;\r\n        orderIdToIndex[lastOrderId] = index;\r\n        orders.pop();\r\n        delete p2p[user][orderId];\r\n        delete orderIdToIndex[orderId];\r\n    }\r\n\r\n    function getOrdersByUser(address user)\r\n        public\r\n        view\r\n        returns (orderDetails[] memory)\r\n    {\r\n        uint256 userOrderCount = activeOrders[user];\r\n        orderDetails[] memory userOrderList = new orderDetails[](\r\n            userOrderCount\r\n        );\r\n        uint256 counter = 0;\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            uint256 orderId = orders[i];\r\n            orderDetails storage order = p2p[user][orderId];\r\n            if (order.sB == user && order.orderStatus == true) {\r\n                userOrderList[counter] = order;\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return userOrderList;\r\n    }\r\n}\r\n                /*************************************************************\\\r\n                    Proudly Developed by Jaafar Krayem Copyright 2023\r\n                \\*************************************************************/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Swaper\",\"type\":\"address\"}],\"name\":\"ISLAMIswap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OrderType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"TokensReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderTaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"orderBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Type\",\"type\":\"uint256\"}],\"name\":\"orderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"Currency\",\"type\":\"address\"}],\"name\":\"orderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Type\",\"type\":\"uint256\"}],\"name\":\"orderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OrderTaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"orderSell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ISLAMIinOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISLAMIprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISLAMIprice1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDinOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateP2P\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"byPassP2P\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canCreateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canceledOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p2pFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeFactor\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"changeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_islamiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"editOrderPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sB\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"orderCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderLife\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"}],\"internalType\":\"struct ISLAMIp2p_V2.orderDetails[]\",\"name\":\"_buyOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sB\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"orderCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderLife\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"}],\"internalType\":\"struct ISLAMIp2p_V2.orderDetails[]\",\"name\":\"_sellOrders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOrdersByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sB\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"orderCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderLife\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"}],\"internalType\":\"struct ISLAMIp2p_V2.orderDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"getPriceBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"getPriceSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUserOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"monopoly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderIdToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"p2p\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sB\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"orderCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderLife\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2pFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"range\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxISLAMI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"superCancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"swapISLAMI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ordersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ISLAMIp2p_V2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://098a093afae3d000b1cb58a62e396453f91312e62055b02b3cd77dba229abd58"}