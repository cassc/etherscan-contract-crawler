{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"test/scripts/PoolEventsEmitterMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../src/interfaces/pools/IPoolEventsEmitter.sol\\\";\\n\\ncontract PoolEventsEmitterMock is IPoolEventsEmitter {\\n    address public owner;\\n    mapping(address => bool) public validPool;\\n    address public poolFactory;\\n\\n    constructor(address _daoGovernanceAddress, address _controller) {\\n        owner = _controller;\\n        validPool[_controller] = true;\\n    }\\n\\n    modifier onlyOwnerMock() {\\n        require(msg.sender == owner, \\\"PoolEventsEmitterMock: Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    function setValidPoolMock(address _poolAddress, bool _valid) external onlyOwnerMock {\\n        validPool[_poolAddress] = _valid;\\n    }\\n\\n    function setValidPool(address _poolAddress, bool _valid) external override onlyOwnerMock {\\n        validPool[_poolAddress] = _valid;\\n        emit PoolValidSet(_poolAddress, _valid);\\n    }\\n\\n    function setPoolFactory(address _poolFactory) external override onlyOwnerMock {\\n        poolFactory = _poolFactory;\\n        validPool[_poolFactory] = true;\\n    }\\n\\n    modifier onlyValidPool() {\\n        require(validPool[msg.sender], \\\"PoolEventsEmitter: Pool is not valid\\\");\\n        _;\\n    }\\n\\n    function emitNewPoolDeployedEvent(\\n        uint256 _poolIndex,\\n        address _poolRaisePool,\\n        address _poolActivePool,\\n        address _poolUnwindPool,\\n        address _poolManagement\\n    ) external override onlyValidPool {\\n        emit NewPoolDeployed(_poolIndex, _poolRaisePool, _poolActivePool, _poolUnwindPool, _poolManagement);\\n    }\\n\\n    function emitSetPoolInfoEvent(uint256 _poolIndex, PoolInfo memory _poolInfo) external override onlyValidPool {\\n        emit SetPoolInfo(_poolIndex, _poolInfo);\\n    }\\n\\n    function emitLpTokenTransferEnabledEvent(uint256 _poolIndex, bool _transferEnabled)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit LpTokenTransferEnabled(_poolIndex, _transferEnabled);\\n    }\\n\\n    function emitSetPoolBackingEvent(uint256 _poolIndex, PoolBacking memory _poolBacking)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit SetPoolBacking(_poolIndex, _poolBacking);\\n    }\\n\\n    function emitAllPoolStatusSet(uint256 _poolIndex, AllPoolStatus _allPoolStatus) external override onlyValidPool {\\n        emit AllPoolStatusSet(_poolIndex, _allPoolStatus);\\n    }\\n\\n    function emitSetPoolTargetReturnsEvent(uint256 _poolIndex, PoolTargetReturns memory _poolDetails)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit SetPoolTargetReturns(_poolIndex, _poolDetails);\\n    }\\n\\n    function emitSetDaoApprovalPoolEvent(uint256 _poolIndex, PoolStatus _status, address _approver)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit SetDaoApprovalPool(_poolIndex, _status, _approver);\\n    }\\n\\n    // function emitSetRaisePoolStatusEvent(\\n    //   uint256 _poolIndex,\\n    //   RaisePoolDepositStatus _status\\n    // ) external override onlyValidPool {\\n    //   emit SetRaisePoolStatus(_poolIndex, _status);\\n    // }\\n\\n    // function emitSetActivePoolStatusEvent(\\n    //   uint256 _poolIndex,\\n    //   ActivePoolStatus _status\\n    // ) external override onlyValidPool {\\n    //   emit SetActivePoolStatus(_poolIndex, _status);\\n    // }\\n\\n    // function emitSetUnwindPoolStatusEvent(\\n    //   uint256 _poolIndex,\\n    //   UnWindPoolState _status\\n    // ) external override onlyValidPool {\\n    //   emit SetUnwindPoolStatus(_poolIndex, _status);\\n    // }\\n\\n    function emitSetTargetReturnsInfoEvent(uint256 _poolIndex, PoolTargetReturns memory _poolDetails)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit SetTargetReturnsInfo(_poolIndex, _poolDetails);\\n    }\\n\\n    function emitPoolAddressUpdate(\\n        uint256 _poolIndex,\\n        address _poolRaisePool,\\n        address _poolActivePool,\\n        address _poolUnwindPool,\\n        address _poolManagement\\n    ) external override onlyValidPool {\\n        emit PoolAddressUpdate(_poolIndex, _poolRaisePool, _poolActivePool, _poolUnwindPool, _poolManagement);\\n    }\\n\\n    function emitSetPoolGeneralInformationEvent(uint256 _poolIndex, PoolInfo memory _poolInfo)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit SetPoolGeneralInformation(_poolIndex, _poolInfo);\\n    }\\n\\n    function emitSetPoolBackingInformationEvent(uint256 _poolIndex, PoolBacking memory _poolBacking)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit SetPoolBackingInformation(_poolIndex, _poolBacking);\\n    }\\n\\n    function emitPoolTransferRaiseToActiveEvent(uint256 _poolIndex, uint256 _amount) external override onlyValidPool {\\n        emit PoolTransferRaiseToActive(_poolIndex, _amount);\\n    }\\n\\n    function emitRaisePoolFinalizedEvent(uint256 _poolIndex, uint256 _totalUsdcInvested, uint256 _totalLpTokensMinted)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit RaisePoolFinalized(_poolIndex, _totalUsdcInvested, _totalLpTokensMinted);\\n    }\\n\\n    function emitActivePoolFinalizedEvent(uint256 _poolIndex, int256 _returnOnPrincipal, uint256 _totalToUnwindPool)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit ActivePoolFinalized(_poolIndex, _returnOnPrincipal, _totalToUnwindPool);\\n    }\\n\\n    function emitUnwindPoolFinalizedEvent(uint256 _poolIndex, uint256 _stablePerLpToken, uint256 _stakePerLpToken)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit UnwindPoolFinalized(_poolIndex, _stablePerLpToken, _stakePerLpToken);\\n    }\\n\\n    function emitActivePoolBondRepayment(\\n        uint256 _poolIndex,\\n        uint256 _bondIndex,\\n        uint256 _repaymentAmount,\\n        uint256 _interestAmount\\n    ) external override onlyValidPool {\\n        emit ActivePoolBondRepayment(_poolIndex, _bondIndex, _repaymentAmount, _interestAmount);\\n    }\\n\\n    function emitActiveResultUpdate(\\n        uint256 _poolIndex,\\n        uint256 _totalPrincipalOutstanding,\\n        uint256 _totalInterestCollected,\\n        uint256 _totalPrincipalDefaulted,\\n        uint256 _totalInterestDefaulted\\n    ) external override onlyValidPool {\\n        emit ActivePoolResultUpdate(\\n            _poolIndex,\\n            _totalPrincipalOutstanding,\\n            _totalInterestCollected,\\n            _totalPrincipalDefaulted,\\n            _totalInterestDefaulted\\n        );\\n    }\\n\\n    function emitActivePoolInventoryBondPurchase(\\n        uint256 _poolIndex,\\n        uint256 _bondIndex,\\n        uint256 _principalAmount,\\n        uint256 _expectedNetInterest,\\n        uint256 _expectedDuration\\n    ) external override onlyValidPool {\\n        emit ActivePoolInventoryBondPurchase(\\n            _poolIndex, _bondIndex, _principalAmount, _expectedNetInterest, _expectedDuration\\n        );\\n    }\\n\\n    function emitUnwindPoolSetFuelPerLpToken(uint256 _poolIndex, uint256 _fuelPerLpToken)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit UnwindPoolSetFuelPerLpToken(_poolIndex, _fuelPerLpToken);\\n    }\\n\\n    function emitUnwindPoolStakeTokenToLpToken(uint256 _poolIndex, uint256 _stakeTokenToLpTokenRatioForBonus)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit UnwindPoolStakeTokenToLpToken(_poolIndex, _stakeTokenToLpTokenRatioForBonus);\\n    }\\n\\n    function emitNewPoolManagerAccountEvent(uint256 _poolIndex, address _poolManagerAccount)\\n        external\\n        override\\n        onlyValidPool\\n    {\\n        emit PoolNewPoolManagerAccount(_poolIndex, _poolManagerAccount);\\n    }\\n\\n    function emitPoolUniqueLpUpdateEvent(uint256 _poolIndex, bool _uniqueLpAdded) external override onlyValidPool {\\n        emit PoolUniqueLpUpdate(_poolIndex, _uniqueLpAdded);\\n    }\\n\\n    function emitPoolUserTransaction(\\n        uint256 _poolIndex,\\n        address _user,\\n        PoolAction _action,\\n        uint256 _amount,\\n        uint256 _lpTokens\\n    ) external override onlyValidPool {\\n        emit PoolUserTransaction(_poolIndex, _user, _action, _amount, _lpTokens);\\n    }\\n}\\n\\n// function emitRaisePoolDepositEvent(\\n//   uint256 _poolIndex,\\n//   uint256 _amount,\\n//   uint256 _lpTokens,\\n//   uint256 _uniqueLps,\\n//   uint256 _totalUsdcInvested\\n// ) external override onlyValidPool {\\n//   emit RaisePoolDeposit(_poolIndex, _amount, _uniqueLps, _totalUsdcInvested);\\n// }\\n\\n// function emitRaisePoolDepositCancelEvent(\\n//   uint256 _poolIndex,\\n//   uint256 _amountLpToken,\\n//   uint256 _amountStablecoin,\\n//   uint256 _uniqueLps,\\n//   uint256 _totalUsdcInvested\\n// ) external override onlyValidPool {\\n//   emit RaisePoolDepositCancel(\\n//     _poolIndex,\\n//     _amountLpToken,\\n//     _amountStablecoin,\\n//     _uniqueLps,\\n//     _totalUsdcInvested\\n//   );\\n// }\\n\\n// function emitRaisePoolRedeemTargetNotReachedUser(\\n//   uint256 _poolIndex,\\n//   address _user,\\n//   uint256 _amount\\n// ) external override onlyValidPool {\\n//   emit RaisePoolRedeemTargetNotReachedUser(_poolIndex, _user, _amount);\\n// }\\n\"\r\n    },\r\n    \"src/interfaces/pools/IPoolEventsEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../AllStructs.sol\\\";\\n\\ninterface IPoolEventsEmitter {\\n    function setValidPool(address _poolAddress, bool _valid) external;\\n\\n    function emitNewPoolDeployedEvent(\\n        uint256 _poolIndex,\\n        address _poolRaisePool,\\n        address _poolActivePool,\\n        address _poolUnwindPool,\\n        address _poolManagement\\n    ) external;\\n\\n    function emitAllPoolStatusSet(uint256 _poolIndex, AllPoolStatus _allPoolStatus) external;\\n\\n    function emitSetPoolInfoEvent(uint256 _poolIndex, PoolInfo memory _poolInfo) external;\\n\\n    function setPoolFactory(address _poolFactory) external;\\n\\n    function emitSetPoolBackingEvent(uint256 _poolIndex, PoolBacking memory _poolBacking) external;\\n\\n    function emitLpTokenTransferEnabledEvent(uint256 _poolIndex, bool _transferEnabled) external;\\n\\n    function emitSetDaoApprovalPoolEvent(uint256 _poolIndex, PoolStatus _status, address _approver) external;\\n\\n    function emitActivePoolFinalizedEvent(uint256 _poolIndex, int256 _returnOnPrincipal, uint256 _totalToUnwindPool)\\n        external;\\n\\n    function emitRaisePoolFinalizedEvent(uint256 _poolIndex, uint256 _totalUsdcInvested, uint256 _totalLpTokensMinted)\\n        external;\\n\\n    function emitUnwindPoolFinalizedEvent(uint256 _poolIndex, uint256 _stablePerLpToken, uint256 _stakePerLpToken)\\n        external;\\n\\n    // function emitSetActivePoolStatusEvent(uint256 _poolIndex, ActivePoolStatus _status) external;\\n\\n    // function emitSetUnwindPoolStatusEvent(uint256 _poolIndex, UnWindPoolState _status) external;\\n\\n    // function emitSetRaisePoolStatusEvent(uint256 _poolIndex, RaisePoolDepositStatus _status) external;\\n\\n    // function emitRaisePoolRedeemTargetNotReachedUser(\\n    //   uint256 _poolIndex,\\n    //   address _user,\\n    //   uint256 _amount\\n    // ) external;\\n\\n    function emitSetPoolBackingInformationEvent(uint256 _poolIndex, PoolBacking memory _poolBacking) external;\\n\\n    function emitSetTargetReturnsInfoEvent(uint256 _poolIndex, PoolTargetReturns memory _poolDetails) external;\\n\\n    function emitActivePoolBondRepayment(\\n        uint256 _poolIndex,\\n        uint256 _bondIndex,\\n        uint256 _repaymentAmount,\\n        uint256 _interestAmount\\n    ) external;\\n\\n    function emitSetPoolGeneralInformationEvent(uint256 _poolIndex, PoolInfo memory _poolInfo) external;\\n\\n    // function emitRaisePoolDepositEvent(\\n    //   uint256 _poolIndex,\\n    //   uint256 _amount,\\n    //   uint256 _lpTokens,\\n    //   uint256 _totalUsdcInvested\\n    // ) external;\\n\\n    function emitPoolTransferRaiseToActiveEvent(uint256 _poolIndex, uint256 _amount) external;\\n\\n    // function emitRaisePoolDepositCancelEvent(\\n    //   uint256 _poolIndex,\\n    //   uint256 _amountLpToken,\\n    //   uint256 _amountStablecoin,\\n    //   uint256 _totalUsdcInvested\\n    // ) external;\\n\\n    function emitPoolAddressUpdate(\\n        uint256 _poolIndex,\\n        address _poolRaisePool,\\n        address _poolActivePool,\\n        address _poolUnwindPool,\\n        address _poolManagement\\n    ) external;\\n\\n    function emitSetPoolTargetReturnsEvent(uint256 _poolIndex, PoolTargetReturns memory _poolDetails) external;\\n\\n    function emitActiveResultUpdate(\\n        uint256 _poolIndex,\\n        uint256 _totalPrincipalOutstanding,\\n        uint256 _totalInterestCollected,\\n        uint256 _totalPrincipalDefaulted,\\n        uint256 _totalInterestDefaulted\\n    ) external;\\n\\n    function emitActivePoolInventoryBondPurchase(\\n        uint256 _poolIndex,\\n        uint256 _bondIndex,\\n        uint256 _principalAmount,\\n        uint256 _expectedNetInterest,\\n        uint256 _expectedDuration\\n    ) external;\\n\\n    function emitUnwindPoolStakeTokenToLpToken(uint256 _poolIndex, uint256 _stakeTokenToLpTokenRatioForBonus)\\n        external;\\n\\n    function emitPoolUserTransaction(\\n        uint256 _poolIndex,\\n        address _user,\\n        PoolAction _action,\\n        uint256 _amount,\\n        uint256 _lpTokens\\n    ) external;\\n\\n    function emitPoolUniqueLpUpdateEvent(uint256 _poolIndex, bool _uniqueLpAdded) external;\\n\\n    function emitUnwindPoolSetFuelPerLpToken(uint256 _poolIndex, uint256 _fuelPerLpToken) external;\\n\\n    function emitNewPoolManagerAccountEvent(uint256 _poolIndex, address _poolManagerAccount) external;\\n\\n    // EVENTS\\n\\n    event LpTokenTransferEnabled(uint256 _poolIndex, bool _transferEnabled);\\n\\n    event PoolNewPoolManagerAccount(uint256 poolIndex, address poolManagerAccount);\\n\\n    event SetPoolBacking(uint256 indexed _poolIndex, PoolBacking _poolBacking);\\n\\n    event SetPoolTargetReturns(uint256 indexed _poolIndex, PoolTargetReturns _poolDetails);\\n\\n    event SetPoolInfo(uint256 indexed _poolIndex, PoolInfo _poolInfo);\\n\\n    event SetDaoApprovalPool(uint256 indexed _poolIndex, PoolStatus status, address daoDelegate);\\n\\n    event NewPoolDeployed(\\n        uint256 poolIndex, address poolRaisePool, address poolActivePool, address poolUnwindPool, address poolManagement\\n    );\\n\\n    event PoolAddressUpdate(\\n        uint256 indexed poolIndex,\\n        address poolRaisePool,\\n        address poolActivePool,\\n        address poolUnwindPool,\\n        address poolManagement\\n    );\\n\\n    event PoolUserTransaction(\\n        uint256 indexed poolIndex, address indexed user, PoolAction action, uint256 amount, uint256 lpTokens\\n    );\\n\\n    event ActivePoolInventoryBondPurchase(\\n        uint256 indexed poolIndex,\\n        uint256 bondIndex,\\n        uint256 principalAmount,\\n        uint256 expectedNetInterest,\\n        uint256 expectedDuration\\n    );\\n\\n    event UnwindPoolSetFuelPerLpToken(uint256 _poolIndex, uint256 _fuelPerLpToken);\\n\\n    event UnwindPoolStakeTokenToLpToken(uint256 _poolIndex, uint256 _stakeTokenToLpTokenRatioForBonus);\\n\\n    event PoolTransferRaiseToActive(uint256 indexed _poolIndex, uint256 _amount);\\n\\n    event PoolValidSet(address poolAddress, bool valid);\\n\\n    // event SetActivePoolStatus(uint256 indexed _poolIndex, ActivePoolStatus _status);\\n\\n    // event SetUnwindPoolStatus(uint256 indexed _poolIndex, UnWindPoolState _status);\\n\\n    // event SetRaisePoolStatus(uint256 indexed _poolIndex, RaisePoolDepositStatus _status);\\n\\n    event SetPoolBackingInformation(uint256 indexed _poolIndex, PoolBacking _poolBacking);\\n\\n    event SetPoolGeneralInformation(uint256 indexed _poolIndex, PoolInfo _poolInfo);\\n\\n    event SetTargetReturnsInfo(uint256 indexed _poolIndex, PoolTargetReturns _poolDetails);\\n\\n    event AllPoolStatusSet(uint256 _poolIndex, AllPoolStatus allPoolStatus);\\n\\n    event UnwindPoolFinalized(uint256 indexed poolIndex, uint256 stablePerLpToken, uint256 stakePerLpToken);\\n\\n    event ActivePoolFinalized(uint256 indexed poolIndex, int256 _returnOnPrincipal, uint256 _totalToUnwindPool);\\n\\n    event RaisePoolFinalized(uint256 indexed poolIndex, uint256 totalUsdcInvested, uint256 totalLpTokensMinted);\\n\\n    // event RaisePoolDeposit(\\n    //   uint256 indexed _poolIndex,\\n    //   uint256 _amount,\\n    //   uint256 _lpTokens,\\n    //   uint256 _totalUsdcInvested\\n    // );\\n\\n    event ActivePoolBondRepayment(\\n        uint256 indexed poolIndex, uint256 bondIndex, uint256 repaymentAmount, uint256 interestAmount\\n    );\\n\\n    // event RaisePoolDepositCancel(\\n    //   uint256 poolIndex,\\n    //   uint256 amountLpToken,\\n    //   uint256 amountStablecoin,\\n    //   uint256 totalUsdcInvested\\n    // );\\n\\n    event PoolUniqueLpUpdate(uint256 poolIndex, bool uniqueLpAdded);\\n\\n    // event RaisePoolRedeemTargetNotReachedUser(\\n    //   uint256 indexed _poolIndex,\\n    //   address indexed _user,\\n    //   uint256 _amount\\n    // );\\n\\n    event ActivePoolResultUpdate(\\n        uint256 indexed _poolIndex,\\n        uint256 totalPrincipalOutstanding,\\n        uint256 totalInterestCollected,\\n        uint256 totalPrincipalDefaulted,\\n        uint256 totalInterestDefaulted\\n    );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/AllStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// structs InventoryBond Registry\\n\\nenum InventoryBondStatus {\\n    NONE,\\n    CREATED_UNAPPROVED,\\n    APPROVED,\\n    REJECTED,\\n    CANCELLED,\\n    ACTIVE,\\n    DEFAULTED,\\n    REPAID,\\n    OTHER\\n}\\n\\nenum LoanType {\\n    NONE,\\n    BULLET_LOAN,\\n    AMORTIZED_LOAN\\n}\\n\\nstruct FinancingNumbers {\\n    LoanType loanType;\\n    uint96 principalAmount;\\n    uint32 loanDurationTarget;\\n    uint96 totalDueOnRepayment;\\n    uint32 interestRateToYear;\\n}\\n\\nenum InventoryBondType {\\n    NONE,\\n    EVENT_LOAN,\\n    EO_CREDITLINE\\n}\\n\\n// Struct to store repayment data\\nstruct Repayment {\\n    uint96 repaymentAmountTotal;\\n    uint128 repaymentAmountFuel;\\n    uint32 repaymentTimestamp;\\n}\\n\\nstruct InventoryBondInfo {\\n    InventoryBondStatus bondStatus;\\n    InventoryBondType inventoryBondType;\\n    FinancingNumbers financingNumbers;\\n    address integratorAccountAddress;\\n    address eventOrganiserAccountAddress;\\n    uint32 purchasedTimestamp;\\n    uint96 totalRepaid;\\n}\\n\\n// struct CreditLineDetails {\\n//   string name;\\n//   string description;\\n//   string urlToDetails;\\n//   address integratorAccount;\\n//   address eventOrganiserAccount;\\n//   address creditLineAccount;\\n//   uint32 collateralTokenIndexIntegrator;\\n//   uint32 collateralTokenIndexEventOrganiser;\\n//   uint32 creditLineCreated;\\n//   EventDetailsInfo eventDetailsInfo;\\n// }\\n\\nstruct EventLoanDetails {\\n    string name;\\n    string description;\\n    string urlToDetails;\\n    address integratorAccount;\\n    address eventOrganiserAccount;\\n    uint32 collateralTokenIndexIntegrator;\\n    uint32 collateralTokenIndexEventOrganiser;\\n    uint32 eventLoanCreatedTimestamp;\\n    uint256[] palletIndexesEvent;\\n    uint32 eventIndex;\\n}\\n\\n// Chamber of commerce\\n\\nenum AccountType {\\n    NONE,\\n    INTEGRATOR,\\n    POOL_MANAGER,\\n    EVENT_ORGANISER,\\n    DAO_DELEGATE\\n}\\n\\n// Inventory pallet structs\\n\\nstruct InventoryPalletInfo {\\n    bool executed;\\n    uint32 eventIndex;\\n    address eventOrganiserAddress;\\n    uint32 averagePriceTranche;\\n    uint32 amountOfTickets;\\n    uint32 startIndexTickets;\\n    uint32 stopIndexTickets;\\n    address eventImplementationAddress;\\n}\\n\\n// uint32 integratorIndex;\\n// uint32 ticketSaleStartTimestamp;\\n// uint32 eventStartTimestamp;\\n// address integratorAddress;\\n\\n// enum PalletApprovedStatus {\\n//   NOT_APPROVED,\\n//   APPROVED,\\n//   REJECTED\\n// }\\n\\n// Collateral Vault Structs\\n\\nenum WithdrawalType {\\n    Owner,\\n    EscrowManager,\\n    DAO,\\n    Contract\\n}\\n\\nenum CollateralType {\\n    NONE,\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\nenum PoolAction {\\n    NONE,\\n    DEPOSIT,\\n    CANCEL_BEFORE,\\n    CANCEL_CANCELLED,\\n    WITHDRAW\\n}\\n\\n// PoolFactory Structs\\n\\nenum PoolStatus {\\n    NONE,\\n    CREATED_NOT_YET_APPROVED,\\n    APPROVED,\\n    REJECTED_BY_DAO\\n}\\n\\nstruct PoolInfo {\\n    string poolName;\\n    string poolDescription;\\n    string termsUrl;\\n    string poolManagerURI;\\n    string poolStrategyURI;\\n    string poolRisksURI;\\n    string poolOverviewURI;\\n    uint256 integratorIndex; // note this is not certain approach\\n}\\n\\nstruct PoolBacking {\\n    string poolBackingURI;\\n    uint64 backingByIntegrator;\\n    uint64 backingByProtocol;\\n    uint64 backingByEventOrganiser;\\n    uint64 collateralToPoolRateTarget;\\n}\\n\\n/**\\n * The PoolTargetReturns stores all the information about the target returns of the pool, numerical, purely focussing on the yield in USDC and GET/xGET\\n */\\nstruct PoolTargetReturns {\\n    uint96 poolAmountTargetMax; // amount the integrator wants to raise maximum\\n    uint96 poolAmountMin; // amount the integrator wants to raise minimum\\n    uint64 poolStartApprox; // timestamp the pool is expected to become active\\n    uint64 poolDurationTarget; // in seconds duration, from the momennt the pool becomes active\\n    uint64 usdcInterestRateTargetLowerRange; // for the entire duration of the pool, the lower range\\n    uint64 usdcInterestRateTargetUpperRange; // for the entire duration of the pool, the upper range\\n    uint64 stakeTokenReturnTargetLowerRange; // for the entire duration of the pool, the lower range\\n    uint64 stakeTokenReturnTargetUpperRange; // for the entire duration of the pool, the upper range\\n    uint64 bonusForStakeTokenHolders; // bonus for stake token holders\\n    uint64 valueOfStakeToken; // value of the stake token\\n    uint32 stableToUsdcExchangeRate; // the exchange rate of the stable coin to USDC\\n}\\n\\n// DAO Delegate structs\\n\\nenum DelegateStatus {\\n    NONE,\\n    VALIDATED,\\n    INVALID\\n}\\n\\nstruct DAODelegateInfo {\\n    string delegateNickname;\\n    string delegateDescription;\\n    address delegateAddress;\\n    DelegateStatus delegateStatus;\\n}\\n\\n// PoolFactory Structs\\n\\nstruct PoolAddresses {\\n    address poolManagement;\\n    address poolRaisePool;\\n    address poolActivePool;\\n    address poolUnwindPool;\\n}\\n\\n// ActivePool Structs\\n\\n// enum ActivePoolStatus {\\n//   NONE,\\n//   ACTIVE_INACTIVE,\\n//   ACTIVE_ACTIVE,\\n//   ACTIVE_FINALIZED\\n// }\\n\\n// RaisePool Structs\\n\\n// enum RaisePoolDepositStatus {\\n//   NONE,\\n//   RAISE_AWAITING_DEPOSIT_OPEN,\\n//   RAISE_DEPOSIT_OPEN,\\n//   RAISE_PAUSED_DEPOSIT_CLOSED, // this is a bit of a paused state\\n//   RAISE_DEPOSIT_CLOSED_FINALIZED,\\n//   RAISE_CLOSED_TARGET_NOT_REACHED\\n// }\\n\\nenum AllPoolStatus {\\n    NONE,\\n    RAISE_AWAITING_DEPOSIT_OPEN,\\n    RAISE_DEPOSIT_OPEN,\\n    RAISE_PAUSED_DEPOSIT_CLOSED, // this is a bit of a paused state\\n    RAISE_DEPOSIT_CLOSED_FINALIZED,\\n    RAISE_CLOSED_TARGET_NOT_REACHED,\\n    ACTIVE_INACTIVE,\\n    ACTIVE_ACTIVE,\\n    ACTIVE_FINALIZED,\\n    UNWIND_AWAITING_FINALIZATION,\\n    UNWIND_FINALIZED_REDEEMABLE\\n}\\n\\n// UnwindPool Structs\\n\\n// enum UnWindPoolState {\\n//   NONE,\\n//   UNWIND_AWAITING_FINALIZATION,\\n//   UNWIND_FINALIZED_REDEEMABLE\\n// }\\n\\n// AssertationRegistry Structs\\n\\nenum AttestationType {\\n    NONE,\\n    BACKING,\\n    DUE_DILLIGENCE\\n}\\n\\nenum BackingType {\\n    NONE,\\n    PERSONAL_GAURANTEE,\\n    BUSINESS_GAURANTEE,\\n    OTHER\\n}\\n\\nenum BackingExtent {\\n    NONE,\\n    MAXIMUM,\\n    MAX_DOLLAR_VALUE,\\n    RATIO_OF_DOWSIDE,\\n    INSURANCE_FUND\\n}\\n\\nstruct AttestationInfo {\\n    address issuedBy;\\n    address issuedTo;\\n    BackingType attestationType;\\n    BackingExtent attestationExtent;\\n    string attestationInfoURL;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    uint256 maxDollarValue; // if applicable\\n    address insurancePoolAddress; // if applicable\\n}\\n\\nstruct DueDilligenceInfo {\\n    address issuedBy;\\n    address issuedTo;\\n    string dueDilligenceInfoURL;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n}\\n\\n// PoolManager Structs\\n\\nstruct PoolManagerInfo {\\n    string poolManagerNickname;\\n    string poolManagerDescription;\\n    string poolManagerLogoUrl;\\n    string poolManagerWebsiteUrl;\\n}\\n\\n// Intergrator Account Structs\\n\\nstruct IntegratorData {\\n    string name;\\n    string description;\\n    string website;\\n    string legalTerms;\\n    string logoURL;\\n    uint24 integratorIndex;\\n}\\n\\n// Event Organiser Structs\\n\\n// struct EventOrganiserInfo {\\n//     string name;\\n//     string description;\\n//     string logoURL;\\n// }\\n\\nstruct EventOrganiserInfo {\\n    string eventOrganiserNickname;\\n    string eventOrganiserDescription;\\n    string eventOrganiserLogoUrl;\\n}\\n\\n// Event Details Structs\\n\\nenum EventCategory {\\n    NONE,\\n    CONFERENCE,\\n    CONCERT,\\n    FESTIVAL,\\n    SPORTS,\\n    OTHER\\n}\\n\\nenum EventType {\\n    NONE,\\n    SINGLE,\\n    SERIES,\\n    CONTINUOUS,\\n    OTHER\\n}\\n\\n// todo i think we need to add some function that represents when the loan is active\\nenum EventStatus {\\n    NONE,\\n    REGISTERED_UNCONFIGURED,\\n    INVENTORY_CONFIGURED,\\n    ACTIVE_AS_COLLATERAL,\\n    CANCELLED_REVERTED,\\n    FINALIZED // state probably unused\\n}\\n\\n// function getEventStatusString(EventStatus status) public pure returns (string memory) {\\n//     if (status == EventStatus.NONE) {\\n//         return \\\"NONE\\\";\\n//     } else if (status == EventStatus.REGISTERED_UNCONFIGURED) {\\n//         return \\\"REGISTERED_UNCONFIGURED\\\";\\n//     } else if (status == EventStatus.INVENTORY_CONFIGURED) {\\n//         return \\\"INVENTORY_CONFIGURED\\\";\\n//     } else if (status == EventStatus.ACTIVE_AS_COLLATERAL) {\\n//         return \\\"ACTIVE_AS_COLLATERAL\\\";\\n//     } else if (status == EventStatus.CANCELLED_REVERTED) {\\n//         return \\\"CANCELLED_REVERTED\\\";\\n//     } else if (status == EventStatus.FINALIZED) {\\n//         return \\\"FINALIZED\\\";\\n//     } else {\\n//         return \\\"UNKNOWN\\\";\\n//     }\\n// }\\n\\nstruct TotalEventInventoryNumbers {\\n    uint32 totalCapacity;\\n    uint32 totalInventory;\\n    uint32 averageTicketPrice;\\n    uint32 eventStartApproximate;\\n    uint32 eventEndApproximate;\\n    uint32 primaryMarketStartApproximate;\\n}\\n\\nstruct EventDetailsInfo {\\n    string name;\\n    string description;\\n    string logoURL;\\n    string website;\\n    string location;\\n    address eventImplementation;\\n    address integratorAddress;\\n    EventCategory eventCategory;\\n    EventType eventType;\\n    EventStatus status;\\n    TotalEventInventoryNumbers inventoryNumbers;\\n}\\n// uint256[] palletIndexes;\\n\\n// Escrow locker structs\\n\\n//   enum WithdrawalType {\\n//     Owner,\\n//     EscrowManager,\\n//     DAO\\n//   }\\n\\n// Inventory bond struct\\n\\n//   enum WithdrawalType {\\n//     Owner,\\n//     EscrowManager,\\n//     DAO\\n//   }\\n\\n// Asset Holder structs\\n\\n// enum WithdrawalType {\\n//   Owner,\\n//   EscrowManager,\\n//   DAO\\n// }\\n\\n// ActivePool Structs\\n\\n// struct InventoryBondInfo {\\n//   bool isActive;\\n//   bool isLiquidated;\\n//   bool isRepaid;\\n//   uint32 inventoryBondIndex;\\n//   uint96 stableCoinAmount; // principal\\n//   uint96 interestAmount;\\n//   uint32 interestRate;\\n//   uint32 expectedDurationSeconds;\\n// }\\n\\n// struct PoolRepayment {\\n//   uint32 inventoryBondIndex;\\n//   uint96 stableCoinAmountToPrincipal;\\n//   uint96 stableCoinAmountToInterest;\\n// }\\n\\n// Pool Structs\\n\\n// struct PoolAddresses {\\n//   address poolRaisePool;\\n//   address poolActivePool;\\n//   address poolUnwindPool;\\n// }\\n\\n// TokenHolder Structs\\n\\n// enum WithdrawalType {\\n//   Owner,\\n//   EscrowManager,\\n//   DAO\\n// }\\n\\n// enum SnapshotPoolStatus {\\n//   NONE,\\n//   SNAPSHOT_DISABLED,\\n//   SNAPSHOT_ENABLED,\\n//   SNAPSHOT_FINALIZED,\\n//   FINALIZED\\n// }\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoGovernanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"ActivePoolBondRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_returnOnPrincipal\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalToUnwindPool\",\"type\":\"uint256\"}],\"name\":\"ActivePoolFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedNetInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedDuration\",\"type\":\"uint256\"}],\"name\":\"ActivePoolInventoryBondPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrincipalOutstanding\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterestCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrincipalDefaulted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterestDefaulted\",\"type\":\"uint256\"}],\"name\":\"ActivePoolResultUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AllPoolStatus\",\"name\":\"allPoolStatus\",\"type\":\"uint8\"}],\"name\":\"AllPoolStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_transferEnabled\",\"type\":\"bool\"}],\"name\":\"LpTokenTransferEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolRaisePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolActivePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolUnwindPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolManagement\",\"type\":\"address\"}],\"name\":\"NewPoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolRaisePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolActivePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolUnwindPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolManagement\",\"type\":\"address\"}],\"name\":\"PoolAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolManagerAccount\",\"type\":\"address\"}],\"name\":\"PoolNewPoolManagerAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PoolTransferRaiseToActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"uniqueLpAdded\",\"type\":\"bool\"}],\"name\":\"PoolUniqueLpUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PoolAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"name\":\"PoolUserTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"PoolValidSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsdcInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLpTokensMinted\",\"type\":\"uint256\"}],\"name\":\"RaisePoolFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PoolStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoDelegate\",\"type\":\"address\"}],\"name\":\"SetDaoApprovalPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolBackingURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"backingByIntegrator\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByProtocol\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByEventOrganiser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"collateralToPoolRateTarget\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct PoolBacking\",\"name\":\"_poolBacking\",\"type\":\"tuple\"}],\"name\":\"SetPoolBacking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolBackingURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"backingByIntegrator\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByProtocol\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByEventOrganiser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"collateralToPoolRateTarget\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct PoolBacking\",\"name\":\"_poolBacking\",\"type\":\"tuple\"}],\"name\":\"SetPoolBackingInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"termsUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolManagerURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolStrategyURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolRisksURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolOverviewURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"integratorIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PoolInfo\",\"name\":\"_poolInfo\",\"type\":\"tuple\"}],\"name\":\"SetPoolGeneralInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"termsUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolManagerURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolStrategyURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolRisksURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolOverviewURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"integratorIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PoolInfo\",\"name\":\"_poolInfo\",\"type\":\"tuple\"}],\"name\":\"SetPoolInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolAmountTargetMax\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"poolAmountMin\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"poolStartApprox\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"poolDurationTarget\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusForStakeTokenHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"valueOfStakeToken\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"stableToUsdcExchangeRate\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct PoolTargetReturns\",\"name\":\"_poolDetails\",\"type\":\"tuple\"}],\"name\":\"SetPoolTargetReturns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolAmountTargetMax\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"poolAmountMin\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"poolStartApprox\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"poolDurationTarget\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusForStakeTokenHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"valueOfStakeToken\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"stableToUsdcExchangeRate\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct PoolTargetReturns\",\"name\":\"_poolDetails\",\"type\":\"tuple\"}],\"name\":\"SetTargetReturnsInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablePerLpToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePerLpToken\",\"type\":\"uint256\"}],\"name\":\"UnwindPoolFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fuelPerLpToken\",\"type\":\"uint256\"}],\"name\":\"UnwindPoolSetFuelPerLpToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeTokenToLpTokenRatioForBonus\",\"type\":\"uint256\"}],\"name\":\"UnwindPoolStakeTokenToLpToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bondIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestAmount\",\"type\":\"uint256\"}],\"name\":\"emitActivePoolBondRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_returnOnPrincipal\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_totalToUnwindPool\",\"type\":\"uint256\"}],\"name\":\"emitActivePoolFinalizedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bondIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedNetInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedDuration\",\"type\":\"uint256\"}],\"name\":\"emitActivePoolInventoryBondPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPrincipalOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInterestCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPrincipalDefaulted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInterestDefaulted\",\"type\":\"uint256\"}],\"name\":\"emitActiveResultUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum AllPoolStatus\",\"name\":\"_allPoolStatus\",\"type\":\"uint8\"}],\"name\":\"emitAllPoolStatusSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_transferEnabled\",\"type\":\"bool\"}],\"name\":\"emitLpTokenTransferEnabledEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolRaisePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolActivePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolUnwindPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolManagement\",\"type\":\"address\"}],\"name\":\"emitNewPoolDeployedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolManagerAccount\",\"type\":\"address\"}],\"name\":\"emitNewPoolManagerAccountEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolRaisePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolActivePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolUnwindPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolManagement\",\"type\":\"address\"}],\"name\":\"emitPoolAddressUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emitPoolTransferRaiseToActiveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_uniqueLpAdded\",\"type\":\"bool\"}],\"name\":\"emitPoolUniqueLpUpdateEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum PoolAction\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokens\",\"type\":\"uint256\"}],\"name\":\"emitPoolUserTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUsdcInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLpTokensMinted\",\"type\":\"uint256\"}],\"name\":\"emitRaisePoolFinalizedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum PoolStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"emitSetDaoApprovalPoolEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolBackingURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"backingByIntegrator\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByProtocol\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByEventOrganiser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"collateralToPoolRateTarget\",\"type\":\"uint64\"}],\"internalType\":\"struct PoolBacking\",\"name\":\"_poolBacking\",\"type\":\"tuple\"}],\"name\":\"emitSetPoolBackingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolBackingURI\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"backingByIntegrator\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByProtocol\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"backingByEventOrganiser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"collateralToPoolRateTarget\",\"type\":\"uint64\"}],\"internalType\":\"struct PoolBacking\",\"name\":\"_poolBacking\",\"type\":\"tuple\"}],\"name\":\"emitSetPoolBackingInformationEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"termsUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolManagerURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolStrategyURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolRisksURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolOverviewURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"integratorIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolInfo\",\"name\":\"_poolInfo\",\"type\":\"tuple\"}],\"name\":\"emitSetPoolGeneralInformationEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"termsUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolManagerURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolStrategyURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolRisksURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolOverviewURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"integratorIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolInfo\",\"name\":\"_poolInfo\",\"type\":\"tuple\"}],\"name\":\"emitSetPoolInfoEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolAmountTargetMax\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"poolAmountMin\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"poolStartApprox\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"poolDurationTarget\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusForStakeTokenHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"valueOfStakeToken\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"stableToUsdcExchangeRate\",\"type\":\"uint32\"}],\"internalType\":\"struct PoolTargetReturns\",\"name\":\"_poolDetails\",\"type\":\"tuple\"}],\"name\":\"emitSetPoolTargetReturnsEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolAmountTargetMax\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"poolAmountMin\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"poolStartApprox\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"poolDurationTarget\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"usdcInterestRateTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetLowerRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeTokenReturnTargetUpperRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusForStakeTokenHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"valueOfStakeToken\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"stableToUsdcExchangeRate\",\"type\":\"uint32\"}],\"internalType\":\"struct PoolTargetReturns\",\"name\":\"_poolDetails\",\"type\":\"tuple\"}],\"name\":\"emitSetTargetReturnsInfoEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stablePerLpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakePerLpToken\",\"type\":\"uint256\"}],\"name\":\"emitUnwindPoolFinalizedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fuelPerLpToken\",\"type\":\"uint256\"}],\"name\":\"emitUnwindPoolSetFuelPerLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTokenToLpTokenRatioForBonus\",\"type\":\"uint256\"}],\"name\":\"emitUnwindPoolStakeTokenToLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"setPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"setValidPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"setValidPoolMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolEventsEmitterMock", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008b8b256d83aee0fed9a5d2fcca223297be2cb30d0000000000000000000000008b8b256d83aee0fed9a5d2fcca223297be2cb30d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}