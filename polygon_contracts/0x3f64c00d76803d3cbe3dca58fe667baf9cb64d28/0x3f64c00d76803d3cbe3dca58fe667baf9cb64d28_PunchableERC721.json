{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PunchableERC721.sol\": {\r\n      \"content\": \"pragma solidity 0.8.7;\\n\\nimport \\\"./ERC721_WhiteListMint.sol\\\";\\n\\ncontract PunchableERC721 is ERC721WhiteListMint{\\n\\n    struct PunchCard{\\n        address puncherAddress;\\n        uint8 maxPunches;\\n    }\\n\\n    mapping(string => PunchCard) public punchBook;\\n    mapping(uint => mapping(string => uint8)) nftPunchBook;\\n\\n    constructor(uint _reservedIDs) ERC721WhiteListMint(_reservedIDs){}\\n\\n    function createPunchCard(string memory eventId, address puncherAddress,uint8 maxPunches) external onlyOwner {\\n        require(address(punchBook[eventId].puncherAddress) == address(0) &&  punchBook[eventId].maxPunches == 0,\\n                \\\"201\\\" );\\n        punchBook[eventId] = PunchCard(puncherAddress, maxPunches);\\n    }\\n\\n    function updatePuncherAddress(string memory eventId, address puncherAddress) external onlyOwner {\\n        punchBook[eventId].puncherAddress = puncherAddress;\\n    }\\n\\n    function updateMaxPunches(string memory eventId, uint8 maxPunches) external onlyOwner {\\n        punchBook[eventId].maxPunches = maxPunches;\\n    }\\n\\n    function burnPunchCard(string memory eventId) external onlyOwner {\\n        punchBook[eventId] = PunchCard(address(0), 0);\\n    }\\n\\n    function punchACard(string memory eventId, uint256 _tID, uint8 increment) external {\\n        require( _msgSender() == punchBook[eventId].puncherAddress, \\\"202\\\");\\n        require(nftPunchBook[_tID][eventId] + increment <= punchBook[eventId].maxPunches, \\\"203\\\");\\n        nftPunchBook[_tID][eventId] += increment;\\n    }\\n\\n    function getNFTPunchesPerCard(string memory eventId, uint256 _tID) external view returns (uint){\\n        require(_exists(_tID), \\\"001\\\");\\n        return nftPunchBook[_tID][eventId];\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/ERC721_WhiteListMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//repo\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./SDKERC_721.sol\\\";\\n\\ncontract ERC721WhiteListMint is SDKERC721{\\n\\n  // State info for the next TID to mint. No NFTs can be minted above this number\\n  uint256 nextTID;\\n //NFT Minting info\\n  address mintingAddress;\\n\\n  modifier allowedMinter (){\\n    require( owner() == _msgSender() || mintingAddress == _msgSender(), \\\"101\\\");\\n    _;\\n  }\\n\\n /*****************************************************************************************\\n     constructor: Function to create a reserved set of ids to mint as well as a \\\"nextTID\\\" variable\\n     @param _reservedIDs: The id's that below are reserved\\n *****************************************************************************************/\\n\\n  constructor(uint _reservedIDs) SDKERC721(_reservedIDs){\\n      nextTID = _reservedIDs;\\n  }\\n\\n/*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, no metadata provided initially with this function\\n      The NFT ID Must be less than nextTID (essentially reservedIDs or any burnt NFT)\\n     @param _to: Recipeint of the NFT\\n     @param _tID: the Token ID of the NFT\\n     @param _eID: the Token's expereince ID of the NFT\\n *****************************************************************************************/\\n function mint(address _to, uint256 _tID, uint256 _eID) external override allowedMinter {\\n   require(_tID <= nextTID, \\\"102\\\");\\n   super._mint(_to, _tID);\\n   EID[_tID] = _eID;\\n }\\n\\n /*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, and specific _Uri for metadata\\n     The NFT ID Must be less than nextTID (essentially reservedIDs or any burnt NFT)\\n     @param _to: Recipeint of the NFT\\n     @param _tID: the Token ID of the NFT\\n     @param _eID: the Token's expereince ID of the NFT\\n     @param _Uri: the Token's URI\\n *****************************************************************************************/\\n function mint(address _to, uint256 _tID, uint256 _eID, string memory _Uri) external override allowedMinter {\\n   require(_tID <= nextTID, \\\"102\\\");\\n   super._mint(_to, _tID);\\n   EID[_tID] = _eID;\\n   nftTokenUri[_tID] = _Uri;\\n }\\n\\n /*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, no metadata provided initially with this function\\n     The NFT ID Must be less than nextTID (essentially reservedIDs or any burnt NFT)\\n     @param _to: Recipeint of the NFT\\n     @param _eID: the Token's expereince ID of the NFT\\n *****************************************************************************************/\\n function mint(address _to, uint256 _eID) external  allowedMinter {\\n   nextTID += 1;\\n   super._mint(_to, nextTID);\\n   EID[nextTID] = _eID;\\n }\\n\\n /*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, and specific _Uri for metadata\\n     The NFT ID Must be less than nextTID (essentially reservedIDs or any burnt NFT)\\n     @param _to: Recipeint of the NFT\\n     @param _eID: the Token's expereince ID of the NFT\\n     @param _Uri: the Token's URI\\n *****************************************************************************************/\\n function mint(address _to, uint256 _eID, string memory _Uri) external allowedMinter {\\n   nextTID += 1;\\n   super._mint(_to, nextTID);\\n   EID[nextTID] = _eID;\\n   nftTokenUri[nextTID] = _Uri;\\n }\\n\\n /*****************************************************************************************\\n     @dev Sets the minter address\\n     @param _minterAddress Address of who can mint the NFT\\n   *****************************************************************************************/\\n  function setMinter(address _minterAddress ) external onlyOwner {\\n      //changes the minter address\\n      mintingAddress = _minterAddress;\\n  }\\n\\n /*****************************************************************************************\\n     minter: Returns address of who can mint\\n     @return address: the address of who can mint\\n *****************************************************************************************/\\n function minter() public view returns (address) {\\n   return mintingAddress;\\n }\\n\\n /*****************************************************************************************\\n     @dev Burns an NFT.\\n\\n     @notice that this burn implementation allows the minter to re-mint a burned NFT.\\n\\n     @param _tokenId ID of the NFT to be burned.\\n   *****************************************************************************************/\\n  function burn(uint256 _tokenId ) external {\\n    require( owner() == _msgSender() || mintingAddress == _msgSender(), \\\"101\\\");\\n      //clearing the uri\\n      nftTokenUri[_tokenId] = \\\"\\\";\\n      //clearing the experience\\n      EID[_tokenId] = 0;\\n      //burning the token for good\\n      super._burn(_tokenId);\\n  }\\n\\n  /*****************************************************************************************\\n     setTokenEID: Function to set the experience ID of a given NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @param _eID: the experience ID of the NFT\\n\\n *****************************************************************************************/\\n function setTokenEID(uint256 _tID, uint256 _eID) external  {\\n   require( owner() == _msgSender() || mintingAddress == _msgSender(), \\\"101\\\");\\n   require(_exists(_tID), \\\"001\\\");\\n   EID[_tID] = _eID;\\n }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/SDKERC_721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//repo\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n\\ncontract SDKERC721 is ERC721, Ownable{\\n\\n   //Global metadata\\n  string private globalMetadata;\\n\\n //Metadata per _experienceID\\n mapping (uint256 => string) internal tokenUri;\\n //EID\\n mapping (uint256 => uint256) internal EID;\\n\\n //Metadata per _nftID\\n mapping (uint256 => string) internal nftTokenUri;\\n\\n string private _contractURI;\\n\\n //royalty info\\n  address royaltyRecipient;\\n\\n  uint16 royaltyValue;\\n\\n  //For Rarible royalty standard\\n  bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n  uint immutable public reservedIDs;\\n\\n  event RoyaltiesSet(uint256 tokenId, Part royalties);\\n\\n\\n constructor(uint _reservedIDs) ERC721(\\\"Volcom Metaboard\\\", \\\"MBRD\\\") {\\n      reservedIDs = _reservedIDs;\\n }\\n\\n\\n /*****************************************************************************************\\n     makeMetadata: Function for updating metadata per specific NFT. Overrides default\\n                   \\\"experience\\\" metadata\\n\\n     @param _tID: Token ID to have metadata modified for\\n\\n     @param _Uri: The URI that has a JSON packet of metadata\\n *****************************************************************************************/\\n function makeMetadata(uint256 _tID, string memory _Uri) external onlyOwner {\\n   require(_exists(_tID),\\\"001\\\");\\n   nftTokenUri[_tID] = _Uri;\\n }\\n\\n /*****************************************************************************************\\n     makeExperience: Function for updating or creating a set of metadata for all NFTs in\\n                   a given experience.\\n\\n     @param _eID: Token experience ID to have metadata modified for\\n\\n     @param _Uri: The URI that has a JSON packet of metadata\\n *****************************************************************************************/\\n function makeExperience(uint256 _eID, string memory _Uri) external onlyOwner {\\n   tokenUri[_eID] = _Uri;\\n }\\n\\n  /*****************************************************************************************\\n     setTokenEID: Function to set the experience ID of a given NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @param _eID: the experience ID of the NFT\\n\\n *****************************************************************************************/\\n//  function setTokenEID(uint256 _tID, uint256 _eID) external virtual onlyOwner {\\n//    require(_exists(_tID), \\\"Nonexistent token\\\");\\n//    EID[_tID] = _eID;\\n//  }\\n\\n /*****************************************************************************************\\n     contractURI: Function for updating or creating the metadata of the contract. Used by opensea\\n\\n     @param _Uri: The URI that has a JSON packet of metadata\\n\\n     EX: {\\n       \\\"name\\\": \\\"OpenSea Creatures\\\",\\n       \\\"description\\\": \\\"OpenSea Creatures are adorable aquatic beings primarily for demonstrating what can be done using the OpenSea platform. Adopt one today to try out all the OpenSea buying, selling, and bidding feature set.\\\",\\n       \\\"image\\\": \\\"https://openseacreatures.io/image.png\\\",\\n       \\\"external_link\\\": \\\"https://openseacreatures.io\\\",\\n       \\\"seller_fee_basis_points\\\": 100, # Indicates a 1% seller fee.\\n       \\\"fee_recipient\\\": \\\"0xA97F337c39cccE66adfeCB2BF99C1DdC54C2D721\\\" # Where seller fees will be paid to.\\n     }\\n *****************************************************************************************/\\n function setContractURI(string memory _Uri) external onlyOwner {\\n     _contractURI = _Uri;\\n }\\n\\n /*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, no metadata provided initially with this function\\n\\n     @param _to: Recipeint of the NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @param _eID: the Token's expereince ID of the NFT\\n\\n *****************************************************************************************/\\n function mint(address _to, uint256 _tID, uint256 _eID) external virtual onlyOwner {\\n   super._mint(_to, _tID);\\n   EID[_tID] = _eID;\\n }\\n\\n /*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, and specific _Uri for metadata\\n\\n     @param _to: Recipeint of the NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @param _eID: the Token's expereince ID of the NFT\\n\\n     @param _Uri: the Token's URI\\n\\n *****************************************************************************************/\\n function mint(address _to, uint256 _tID, uint256 _eID, string memory _Uri) external virtual onlyOwner {\\n   super._mint(_to, _tID);\\n   EID[_tID] = _eID;\\n   nftTokenUri[_tID] = _Uri;\\n\\n }\\n\\n /*****************************************************************************************\\n     mint: Function to mint a particular token with a specific _eID, no metadata provided initially with this function\\n\\n     @param _to: Recipeint of the NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @param _eID: the Token's expereince ID of the NFT\\n\\n//  *****************************************************************************************/\\n//  function mint(address _to, uint256 _eID) external virtual onlyOwner {\\n//    uint newId = getMaxId() + 1;\\n//    super._mint(_to, newId);\\n//    EID[newId] = _eID;\\n//  }\\n\\n//  /*****************************************************************************************\\n//      mint: Function to mint a particular token with a specific _eID, and specific _Uri for metadata\\n\\n//      @param _to: Recipeint of the NFT\\n\\n//      @param _tID: the Token ID of the NFT\\n\\n//      @param _eID: the Token's expereince ID of the NFT\\n\\n//      @param _Uri: the Token's URI\\n\\n//  *****************************************************************************************/\\n//  function mint(address _to, uint256 _eID, string memory _Uri) external virtual onlyOwner {\\n//    uint newId = getMaxId() + 1;\\n//    super._mint(_to, newId);\\n//    EID[newId] = _eID;\\n//    nftTokenUri[newId] = _Uri;\\n\\n//  }\\n\\n  /*****************************************************************************************\\n     @dev Burns an NFT.\\n\\n     @notice that this burn implementation allows the minter to re-mint a burned NFT.\\n\\n     @param _tokenId ID of the NFT to be burned.\\n   *****************************************************************************************/\\n  // function burn(uint256 _tokenId ) external virtual onlyOwner {\\n  //     //clearing the uri\\n  //     nftTokenUri[_tokenId] = \\\"\\\";\\n  //     //clearing the experience\\n  //     EID[_tokenId] = 0;\\n  //     //burning the token for good\\n  //     super._burn(_tokenId);\\n  // }\\n\\n /*****************************************************************************************\\n      @dev Sets the metadata for all the NFTs. If it's not empty (\\\"\\\"), all NFTs will\\n      have this metadata showing.\\n      @param _uri the URI of the metadata.\\n  *****************************************************************************************/\\n  function setGlobalMetadata(string memory _uri) external onlyOwner {\\n      globalMetadata = _uri;\\n  }\\n\\n /*****************************************************************************************\\n     contractURI: Function to return the URI json metadata of a smart contract\\n\\n     @return string: the URI of the contract\\n\\n *****************************************************************************************/\\n function contractURI() public view returns (string memory) {\\n     return _contractURI;\\n }\\n\\n\\n /*****************************************************************************************\\n     tokenEID: Function to return the experience ID of a given NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @return uint256: the expereicen ID of a particular NFT\\n\\n *****************************************************************************************/\\n function tokenEID(uint256 _tID) public view returns (uint256) {\\n   require(_exists(_tID), \\\"001\\\");\\n   return EID[_tID];\\n }\\n\\n /*****************************************************************************************\\n     _experienceEmpty: Helper function to determine if Token URI is empty of not for given NFT\\n\\n     @param _tID: the Token ID of the NFT\\n\\n     @return bool: If the tokenURI is empty and needs to be overriden\\n\\n *****************************************************************************************/\\n function _experienceEmpty(uint256 _tID) internal view returns (bool) {\\n   require(_exists(_tID), \\\"001\\\");\\n   string memory empty = \\\"\\\";\\n   return keccak256(bytes(tokenUri[EID[_tID]])) == keccak256(bytes(empty));\\n }\\n\\n /*****************************************************************************************\\n     @dev: Helper function to determine if Token URI is empty of not for given NFT\\n     @param _tID: the Token ID of the NFT\\n     @return bool: If the tokenURI is empty and needs to be overriden\\n\\n *****************************************************************************************/\\n function _globalUriEmpty() internal view returns (bool) {\\n   string memory empty = \\\"\\\";\\n   return keccak256(bytes(globalMetadata)) == keccak256(bytes(empty));\\n }\\n\\n /*****************************************************************************************\\n     supportsInterface: Overrides the default interface of ERC721 to allow for support of royalties\\n\\n     @param interfaceId: the interface ID to see if it is accepted\\n\\n     @return bool: True for any ERC721 interface as well as royalties\\n\\n *****************************************************************************************/\\n bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n bytes4 private constant _INTERFACE_ID_RARIBLE_ROYALTIES = 0xcad96cca;\\n function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\\n\\n     return\\n         interfaceId == _INTERFACE_ID_ERC2981 ||\\n         interfaceId == _INTERFACE_ID_RARIBLE_ROYALTIES ||\\n         super.supportsInterface(interfaceId);\\n }\\n\\n\\n /*****************************************************************************************\\n     @dev Sets the royalties for the NFTs\\n     @notice that since all the NFTs will have the same percentage and address for royalties,\\n     it's not required to set individual values for each NFT. Instead, A global address and\\n     percentage is set for all of them.\\n     @param _royaltiesReceipientAddress: the address receiving the royalties\\n     @param _percentage: percentage of the tx to pay for royalties. Must be\\n      amplified 100 times.\\n     @notice that _percentageBasisPoints is amplified 100 Xs in order to be able to have\\n     0.01% accuracy.\\n  *****************************************************************************************/\\n     function setRoyalties(address _royaltiesReceipientAddress, uint16 _percentage) public onlyOwner {\\n       require(_percentage < 10000, '002');\\n       royaltyRecipient = _royaltiesReceipientAddress;\\n       royaltyValue = _percentage;\\n       emit RoyaltiesSet(0, Part(payable(royaltyRecipient), royaltyValue));\\n   }\\n\\n  /*****************************************************************************************\\n      @dev Called with the sale price to determine how much royalty is owed and to whom.\\n      @notice this is the only method specified to comply with the ERC2981 standard\\n      @param _tokenId - the NFT asset queried for royalty information. @notice this\\n      parameter is not really used in this implementation since all NFTs have the same\\n      percentage and recipient address. It is only part of the method to comply with\\n      the standard.\\n      @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n      @return receiver - address of who should be sent the royalty payment\\n      @return royaltyAmount - the royalty payment amount for value sale price\\n  *****************************************************************************************/\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (royaltyRecipient, (_salePrice * royaltyValue) / 10000);\\n    }\\n\\n    /*****************************************************************************************\\n      @dev\\n     *****************************************************************************************/\\n     function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n\\n    /*****************************************************************************************\\n      @dev\\n    *****************************************************************************************/\\n    function getRaribleV2Royalties(uint256 id) external view returns (Part memory){\\n      Part memory raribleRoyalty = Part(payable(royaltyRecipient), royaltyValue);\\n      return raribleRoyalty;\\n    }\\n\\n /*****************************************************************************************\\n     @dev Returns the metadata URI of the token.\\n     @param _tID: the Token ID of the NFT\\n     @return string: The URI with the URL to the JSON metadata packet.\\n     @notice Return varies depending if the global metadata is set or not, or if the\\n     experience has metadata set or not since these act as masks for the NFT URI.\\n *****************************************************************************************/\\n function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n   require(_exists(tokenId), \\\"001\\\");\\n   if (!_globalUriEmpty()){\\n     return globalMetadata;\\n\\n   }else if(!_experienceEmpty(tokenId)){\\n       return tokenUri[EID[tokenId]];\\n   }\\n   else{\\n       return nftTokenUri[tokenId];\\n   }\\n }\\n\\n\\n /*****************************************************************************************\\n     appendUintToString: Returns a string composed of a string and a number passed into said string\\n\\n     @param inStr: the input string\\n\\n     @param v: the number to append to the string\\n\\n     @return string: the inputted string with the number as a string inputted.\\n\\n *****************************************************************************************/\\n   function appendUintToString(string memory inStr, uint v) internal pure returns (string memory) {\\n     uint maxlength = 100;\\n     bytes memory reversed = new bytes(maxlength);\\n     uint i = 0;\\n     while (v != 0) {\\n         uint remainder = v % 10;\\n         v = v / 10;\\n         reversed[i++] = bytes1(uint8(48 + remainder));\\n     }\\n     bytes memory inStrb = bytes(inStr);\\n     bytes memory s = new bytes(inStrb.length + i);\\n     uint j;\\n     for (j = 0; j < inStrb.length; j++) {\\n         s[j] = inStrb[j];\\n     }\\n     for (j = 0; j < i; j++) {\\n         s[j + inStrb.length] = reversed[i - 1 - j];\\n     }\\n     return string(s);\\n }\\n\\n\\n /*****************************************************************************************\\n     owns: Returns a string composed of a particular wallet's NFTs\\n\\n     @param owner: the address of the person being checked\\n\\n\\n     @return string: a sting in a json list of all the NFTs that are owned\\n\\n *****************************************************************************************/\\n\\n function owns(address owner) public view returns (string memory) {\\n   uint256 _j = 1;\\n   uint maxGap = reservedIDs + 100;\\n   uint gap=0;\\n\\n   string memory message = \\\"[\\\";\\n   string memory empty = \\\"[\\\";\\n\\n   while(gap < maxGap){\\n     if (_exists(_j)){\\n        gap=0;\\n        if(ownerOf(_j) == owner){\\n\\n            if(keccak256(bytes(message)) != keccak256(bytes(empty))){\\n              message = string(abi.encodePacked(message, \\\", \\\"));\\n            }\\n            else{\\n              message = string(abi.encodePacked(message, \\\" \\\"));\\n            }\\n            message = appendUintToString( message, _j);\\n\\n        }\\n     }else{\\n          gap++;\\n      }\\n     _j++;\\n   }\\n   message = string(abi.encodePacked(message, \\\" ]\\\"));\\n   return message;\\n }\\n\\n\\n /*****************************************************************************************\\n     experiences: Returns a string composed of a particular wallet's NFTs and their corresponding experiences\\n\\n     @param owner: the address of the person being checked\\n\\n\\n     @return string: a string in a key value pair for NFT IDs and their experiences\\n\\n *****************************************************************************************/\\n\\n function experiences(address owner) public view returns (string memory) {\\n   uint256 _j = 1;\\n   uint maxGap = reservedIDs + 100;\\n   uint gap=0;\\n\\n   string memory message = \\\"{\\\";\\n   string memory empty = \\\"{\\\";\\n\\n    while(gap < maxGap){\\n      if (_exists(_j)){\\n        gap=0;\\n        if(ownerOf(_j) == owner){\\n\\n          if(keccak256(bytes(message)) != keccak256(bytes(empty))){\\n            message = string(abi.encodePacked(message, \\\", \\\"));\\n          }\\n          else{\\n            message = string(abi.encodePacked(message, \\\" \\\"));\\n          }\\n\\n         message = appendUintToString( message, _j);\\n         message = string(abi.encodePacked(message, \\\":\\\"));\\n         message = appendUintToString( message, tokenEID(_j));\\n\\n        }\\n      }else{\\n          gap++;\\n      }\\n     _j++;\\n   }\\n   message = string(abi.encodePacked(message, \\\" }\\\"));\\n   return message;\\n }\\n\\n function tokenExperience(uint tokenId) external view returns (uint) {\\n    return EID[tokenId];\\n }\\n\\n\\n /*****************************************************************************************\\n     totalSupply: Returns the total supply of NFTs on the contract\\n\\n     @return uint256: the number of NFTs in the contract\\n\\n *****************************************************************************************/\\n function totalSupply() public view returns (uint256) {\\n   uint maxGap = reservedIDs + 100;\\n   uint gap=0;\\n   uint i = 0;\\n   uint256 total = 0;\\n   while(gap < maxGap){\\n     if (_exists(i)){\\n        total++;\\n        gap=0;\\n     }else{\\n       gap++;\\n     }\\n     i++;\\n   }\\n   return total;\\n }\\n\\n /*****************************************************************************************\\n     totalExperiences: Returns the total number of NFT experiences on the contract\\n\\n     @return uint256: the number of experiences\\n\\n *****************************************************************************************/\\n function totalExperiences() public view returns (uint256) {\\n   uint maxGap = reservedIDs + 100;\\n   uint gap=0;\\n   uint i = 1;\\n   uint total = 0;\\n   while(gap < maxGap){\\n      if (bytes(tokenUri[i]).length!=0){\\n          total++;\\n          gap=0;\\n      }else{\\n          gap++;\\n        }\\n      i++;\\n   }\\n   return total;\\n }\\n\\n\\n// function getMaxId() public view returns (uint){\\n//    uint maxGap = reservedIDs + 2;\\n//    uint gap=0;\\n//    uint i = reservedIDs;\\n//    uint256 maxId = reservedIDs;\\n//    while(gap < maxGap){\\n//      if (_exists(i)){\\n//         maxId = i;\\n//         gap=0;\\n//      }else{\\n//        gap++;\\n//      }\\n//      i++;\\n//    }\\n//    return maxId;\\n// }\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservedIDs\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct SDKERC721.Part\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"}],\"name\":\"burnPunchCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"puncherAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"maxPunches\",\"type\":\"uint8\"}],\"name\":\"createPunchCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"experiences\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getNFTPunchesPerCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct SDKERC721.Part\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_Uri\",\"type\":\"string\"}],\"name\":\"makeExperience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_Uri\",\"type\":\"string\"}],\"name\":\"makeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eID\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eID\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_Uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_Uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"owns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"increment\",\"type\":\"uint8\"}],\"name\":\"punchACard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"punchBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"puncherAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"maxPunches\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setGlobalMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltiesReceipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_percentage\",\"type\":\"uint16\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eID\",\"type\":\"uint256\"}],\"name\":\"setTokenEID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"tokenEID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExperience\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExperiences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"maxPunches\",\"type\":\"uint8\"}],\"name\":\"updateMaxPunches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"puncherAddress\",\"type\":\"address\"}],\"name\":\"updatePuncherAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PunchableERC721", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}