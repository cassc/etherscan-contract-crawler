{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/chainlink/interfaces/KeeperRegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice config of the registry\\r\\n * @dev only used in params and return values\\r\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\r\\n * being reimbursed for gas, measured in parts per billion\\r\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\r\\n * priced in MicroLink; can be used in conjunction with or independently of\\r\\n * paymentPremiumPPB\\r\\n * @member blockCountPerTurn number of blocks each oracle has during their turn to\\r\\n * perform upkeep before it will be the next keeper's turn to submit\\r\\n * @member checkGasLimit gas limit when checking for upkeep\\r\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\r\\n * be stale before switching to the fallback pricing\\r\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\r\\n * when calculating the payment ceiling for keepers\\r\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\r\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\r\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\r\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\r\\n * @member transcoder address of the transcoder contract\\r\\n * @member registrar address of the registrar contract\\r\\n */\\r\\nstruct Config {\\r\\n  uint32 paymentPremiumPPB;\\r\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\r\\n  uint24 blockCountPerTurn;\\r\\n  uint32 checkGasLimit;\\r\\n  uint24 stalenessSeconds;\\r\\n  uint16 gasCeilingMultiplier;\\r\\n  uint96 minUpkeepSpend;\\r\\n  uint32 maxPerformGas;\\r\\n  uint256 fallbackGasPrice;\\r\\n  uint256 fallbackLinkPrice;\\r\\n  address transcoder;\\r\\n  address registrar;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice config of the registry\\r\\n * @dev only used in params and return values\\r\\n * @member nonce used for ID generation\\r\\n * @ownerLinkBalance withdrawable balance of LINK by contract owner\\r\\n * @numUpkeeps total number of upkeeps on the registry\\r\\n */\\r\\nstruct State {\\r\\n  uint32 nonce;\\r\\n  uint96 ownerLinkBalance;\\r\\n  uint256 expectedLinkBalance;\\r\\n  uint256 numUpkeeps;\\r\\n}\\r\\n\\r\\ninterface KeeperRegistryBaseInterface {\\r\\n  function registerUpkeep(\\r\\n    address target,\\r\\n    uint32 gasLimit,\\r\\n    address admin,\\r\\n    bytes calldata checkData\\r\\n  ) external returns (uint256 id);\\r\\n\\r\\n  function performUpkeep(uint256 id, bytes calldata performData) external returns (bool success);\\r\\n\\r\\n  function cancelUpkeep(uint256 id) external;\\r\\n  \\r\\n  function withdrawFunds(uint256 id, address to) external;\\r\\n\\r\\n  function addFunds(uint256 id, uint96 amount) external;\\r\\n\\r\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\r\\n\\r\\n  function getMinBalanceForUpkeep(uint256 id) external view returns (uint96 minBalance);\\r\\n\\r\\n  function getUpkeep(uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address target,\\r\\n      uint32 executeGas,\\r\\n      bytes memory checkData,\\r\\n      uint96 balance,\\r\\n      address lastKeeper,\\r\\n      address admin,\\r\\n      uint64 maxValidBlocknumber,\\r\\n      uint96 amountSpent\\r\\n    );\\r\\n\\r\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\r\\n\\r\\n  function getKeeperInfo(address query)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address payee,\\r\\n      bool active,\\r\\n      uint96 balance\\r\\n    );\\r\\n\\r\\n  function getState()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      State memory,\\r\\n      Config memory,\\r\\n      address[] memory\\r\\n    );\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev The view methods are not actually marked as view in the implementation\\r\\n * but we want them to be easily queried off-chain. Solidity will not compile\\r\\n * if we actually inherit from this interface, so we document it here.\\r\\n */\\r\\ninterface KeeperRegistryInterface is KeeperRegistryBaseInterface {\\r\\n  function checkUpkeep(uint256 upkeepId, address from)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bytes memory performData,\\r\\n      uint256 maxLinkPayment,\\r\\n      uint256 gasLimit,\\r\\n      int256 gasWei,\\r\\n      int256 linkEth\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface KeeperRegistryExecutableInterface is KeeperRegistryBaseInterface {\\r\\n  function checkUpkeep(uint256 upkeepId, address from)\\r\\n    external\\r\\n    returns (\\r\\n      bytes memory performData,\\r\\n      uint256 maxLinkPayment,\\r\\n      uint256 gasLimit,\\r\\n      uint256 adjustedGasWei,\\r\\n      uint256 linkEth\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"contracts/chainlink/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool success);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  function decimals() external view returns (uint8 decimalPlaces);\\r\\n\\r\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\r\\n\\r\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\r\\n\\r\\n  function name() external view returns (string memory tokenName);\\r\\n\\r\\n  function symbol() external view returns (string memory tokenSymbol);\\r\\n\\r\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool success);\\r\\n\\r\\n  function transferAndCall(\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  ) external returns (bool success);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool success);\\r\\n}\"\r\n    },\r\n    \"contracts/DeFi/Silos/SiloManagerFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../interfaces/ISiloManager.sol\\\";\\nimport {KeeperRegistryInterface, State, Config} from \\\"../../chainlink/interfaces/KeeperRegistryInterface.sol\\\";\\nimport \\\"../../chainlink/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"../../interfaces/ILinkToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IPegSwap.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../../interfaces/ISiloFactory.sol\\\";\\nimport \\\"../../interfaces/ISilo.sol\\\";\\n\\ncontract SiloManagerFactory is Ownable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    address public managerImplementation;\\n    mapping(address => bool) public isManager;\\n    //address public keeperRegistry;\\n    address public siloFactory;\\n    KeeperRegistryInterface Registry;\\n    mapping(address => address) public userToManager;\\n    uint256 public minFundingAmount = 5000000000000000000; //5 Link\\n    uint256 public lastCheckedUpkeepId = 0;\\n    uint256 public maxBatchSize = 450;\\n    uint32 public GAS_LIMIT = 5000000;\\n    uint8 public SOURCE = 144;\\n    uint64 private constant UINT64_MAX = 2 ** 64 - 1;\\n    uint256 public managerCount;\\n    uint256[] public managerUpkeeps;\\n\\n    bool public factoryUpkeepCreated;\\n\\n    uint96 public riskBuffer = 15000; //based off a number 10000 -> \u221e\\n    uint96 public rejoinBuffer = 30000;\\n\\n    uint96 public bufferPerSilo = 750;\\n\\n    //polygon\\n    address public constant ERC20_LINK_ADDRESS =\\n        0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39; //Mainnet ERC20 _LINK_ADDRESS\\n    address public constant ERC677_LINK_ADDRESS =\\n        0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\n    address public constant PEGSWAP_ADDRESS =\\n        0xAA1DC356dc4B18f30C347798FD5379F3D77ABC5b;\\n\\n    address public REGISTRAR_ADDRESS =\\n        0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d; //Mainnet\\n    bytes4 private constant FUNC_SELECTOR =\\n        bytes4(\\n            keccak256(\\n                \\\"register(string,bytes,address,uint32,address,bytes,uint96,uint8,address)\\\"\\n            )\\n        );\\n\\n    IERC20 ERC20Link = IERC20(ERC20_LINK_ADDRESS);\\n    // ILinkToken ERC677Link = ILinkToken(ERC677_LINK_ADDRESS);\\n    LinkTokenInterface ERC677Link = LinkTokenInterface(ERC677_LINK_ADDRESS);\\n    IPegSwap PegSwap = IPegSwap(PEGSWAP_ADDRESS);\\n\\n    //for migrations\\n    uint256 public migrationBorrow = 2500000000000000000; //how much Link Managers \\\"borrow\\\" to migrate their upkeep\\n    uint256 public minMigrationBalance = 5000000000000000000; //min balance needed to have upkeep automatically migrated\\n    EnumerableSet.UintSet private upkeepSetAlpha;\\n    EnumerableSet.UintSet private upkeepSetBeta;\\n    bool public alphaOrBeta = true; //initially used alpha registry\\n    EnumerableSet.UintSet private needSponsor; //used to temporarily store upkeeps that need a sponsor\\n    bool public migrate;\\n    address public alphaRegistry;\\n    address public betaRegistry;\\n    uint256 public sponsorFee = 100; //based of 10000 ie 1%\\n\\n    event SiloManagerCreate(address owner, address manager, uint256 upkeepId);\\n    event SiloManagerCancel(address owner, address manager, uint256 upkeepId);\\n    event SiloManagerFund(\\n        address owner,\\n        address manager,\\n        uint256 upkeepId,\\n        uint256 amount\\n    );\\n    event SiloManagerWithdraw(\\n        address owner,\\n        address manager,\\n        uint256 upkeepId,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _keeperRegistry,\\n        address _siloFactory,\\n        address _managerImplementation\\n    ) {\\n        alphaRegistry = _keeperRegistry;\\n        Registry = KeeperRegistryInterface(_keeperRegistry);\\n        (, Config memory _config, ) = Registry.getState();\\n        REGISTRAR_ADDRESS = _config.registrar;\\n        siloFactory = _siloFactory;\\n        managerImplementation = _managerImplementation;\\n    }\\n\\n    function udpateSiloFactory(address _siloFactory) external onlyOwner {\\n        siloFactory = _siloFactory;\\n    }\\n\\n    function udpateManager(address _manager) external onlyOwner {\\n        managerImplementation = _manager;\\n    }\\n\\n    function adjustSiloBuffer(uint96 _buffer) external onlyOwner {\\n        bufferPerSilo = _buffer;\\n    }\\n\\n    function adjustRiskBuffer(uint96 _buffer) external onlyOwner {\\n        require(_buffer > 10000, \\\"Risk Buffer not valid\\\");\\n        riskBuffer = _buffer;\\n    }\\n\\n    function adjustRejoinBuffer(uint96 _buffer) external onlyOwner {\\n        require(_buffer > 10000, \\\"Rejoin Buffer not valid\\\");\\n        rejoinBuffer = _buffer;\\n    }\\n\\n    function adjustMaxBatchSize(uint256 _newBatchSize) external onlyOwner {\\n        maxBatchSize = _newBatchSize;\\n    }\\n\\n    function adjustMinFundingAmount(uint256 _amount) external onlyOwner {\\n        minFundingAmount = _amount;\\n    }\\n\\n    function updateCurrentKeepersRegistry(\\n        address _registry\\n    ) external onlyOwner {\\n        if (alphaOrBeta) {\\n            alphaRegistry = _registry;\\n        } else {\\n            betaRegistry = _registry;\\n        }\\n        Registry = KeeperRegistryInterface(_registry);\\n        (, Config memory _config, ) = Registry.getState();\\n        REGISTRAR_ADDRESS = _config.registrar;\\n    }\\n\\n    function adjustSponsorFee(uint256 _newFee) external onlyOwner {\\n        require(_newFee <= 1000, \\\"Sponsor Fee capped at 10%\\\");\\n        sponsorFee = _newFee;\\n    }\\n\\n    function createSiloManager(uint256 _amount) external {\\n        require(userToManager[msg.sender] == address(0), \\\"has already manager\\\");\\n        require(_amount >= minFundingAmount, \\\"Amount too small\\\");\\n        address manager = Clones.clone(managerImplementation);\\n        ISiloManager(manager).initialize(address(this), msg.sender);\\n        isManager[manager] = true;\\n        userToManager[msg.sender] = manager;\\n\\n        uint256 beforeBalance = ERC677Link.balanceOf(address(this));\\n        //swap ERC20 Link if need be\\n        if (ERC677Link.balanceOf(msg.sender) < _amount) {\\n            //if caller does not own enough ERC677 Link, then swap ERC20 Link for ERC677 Link\\n            SafeERC20.safeTransferFrom(\\n                ERC20Link,\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n            ERC20Link.approve(PEGSWAP_ADDRESS, _amount);\\n            PegSwap.swap(_amount, ERC20_LINK_ADDRESS, ERC677_LINK_ADDRESS);\\n        } else {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(ERC677_LINK_ADDRESS),\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n        }\\n        //create upkeep\\n        string memory name = string(\\n            abi.encodePacked(\\\"Silo Manager: \\\", Strings.toString(managerCount))\\n        );\\n        uint96 amount = uint96(\\n            ERC677Link.balanceOf(address(this)) - beforeBalance\\n        );\\n        bytes memory data = abi.encodeWithSelector(\\n            FUNC_SELECTOR,\\n            name,\\n            hex\\\"\\\",\\n            manager,\\n            GAS_LIMIT,\\n            address(this),\\n            hex\\\"\\\",\\n            amount,\\n            SOURCE,\\n            address(this)\\n        );\\n\\n        (State memory state, , ) = Registry.getState();\\n        uint256 numUpkeeps = state.numUpkeeps;\\n        ERC677Link.transferAndCall(REGISTRAR_ADDRESS, amount, data);\\n        managerCount += 1;\\n        (state, , ) = Registry.getState();\\n\\n        if (state.numUpkeeps > numUpkeeps) {\\n            uint256[] memory ids = Registry.getActiveUpkeepIDs(numUpkeeps, 0);\\n            uint256 maxCount = ids.length;\\n            for (uint256 idx; idx < maxCount; ) {\\n                uint256 id = ids[maxCount - idx - 1];\\n                (address target, , , , , , , ) = Registry.getUpkeep(id);\\n                if (target == manager) {\\n                    ISiloManager(manager).setUpkeepId(id);\\n                    emit SiloManagerCreate(msg.sender, manager, id);\\n                    break;\\n                }\\n                unchecked {\\n                    idx++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function checkRegistryState()\\n        external\\n        view\\n        returns (\\n            State memory state,\\n            Config memory config,\\n            address[] memory keepers\\n        )\\n    {\\n        (state, config, keepers) = Registry.getState();\\n    }\\n\\n    function fundManager(address _user, uint256 _amount) external {\\n        address manager = userToManager[_user];\\n        require(manager != address(0), \\\"User has no manager\\\");\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        require(id != 0, \\\"Manager not approved\\\");\\n        //swap ERC20 Link if need be\\n        if (ERC677Link.balanceOf(msg.sender) < _amount) {\\n            //if caller does not own enough ERC677 Link, then swap ERC20 Link for ERC677 Link\\n            SafeERC20.safeTransferFrom(\\n                ERC20Link,\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n            ERC20Link.approve(PEGSWAP_ADDRESS, _amount);\\n            PegSwap.swap(_amount, ERC20_LINK_ADDRESS, ERC677_LINK_ADDRESS);\\n        } else {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(ERC677_LINK_ADDRESS),\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n        }\\n        ERC677Link.approve(getKeeperRegistry(), _amount);\\n        Registry.addFunds(id, uint96(_amount));\\n\\n        emit SiloManagerFund(_user, manager, id, _amount);\\n    }\\n\\n    function setUserRiskBuffer(uint96 _buffer) external {\\n        require(_buffer >= 10000, \\\"Risk Buffer not valid\\\");\\n        address manager = userToManager[msg.sender];\\n        require(manager != address(0), \\\"User does not have a manager\\\");\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        require(id != 0, \\\"Manager not approved\\\");\\n        ISiloManager(manager).setCustomRiskBuffer(_buffer);\\n    }\\n\\n    function setUserRejoinBuffer(uint96 _buffer) external {\\n        require(_buffer >= 10000, \\\"Rejoin Buffer not valid\\\");\\n        address manager = userToManager[msg.sender];\\n        require(manager != address(0), \\\"User does not have a manager\\\");\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        require(id != 0, \\\"Manager not approved\\\");\\n        ISiloManager(manager).setCustomRejoinBuffer(_buffer);\\n    }\\n\\n    function getKeeperRegistry() public view returns (address) {\\n        return alphaOrBeta ? alphaRegistry : betaRegistry;\\n    }\\n\\n    function getOldKeeperRegistry() public view returns (address) {\\n        return alphaOrBeta ? betaRegistry : alphaRegistry;\\n    }\\n\\n    function getMinimumUpkeepBalance(\\n        address _user\\n    ) public view returns (uint96 balance) {\\n        address manager = userToManager[_user];\\n        if (manager != address(0)) {\\n            ISiloManager Manager = ISiloManager(manager);\\n            uint256 id = Manager.upkeepId();\\n            if (id != 0) {\\n                balance =\\n                    (Registry.getMinBalanceForUpkeep(id) *\\n                        Manager.getRiskBuffer()) /\\n                    uint96(10000);\\n            }\\n        }\\n        // require(manager != address(0), \\\"User has no manager\\\");\\n        // ISiloManager Manager = ISiloManager(manager);\\n        // uint256 id = Manager.upkeepId();\\n        // require(id != 0, \\\"Manager not approved\\\");\\n        // return\\n        //     (Registry.getMinBalanceForUpkeep(id) * Manager.getRiskBuffer()) /\\n        //     uint96(10000);\\n    }\\n\\n    function sponsorUpkeep() external {\\n        require(needSponsor.length() > 0, \\\"Nothing to sponsor\\\");\\n        uint256 id = needSponsor.at(0);\\n        (\\n            ,\\n            ,\\n            ,\\n            uint96 balance,\\n            ,\\n            ,\\n            uint256 maxValidBlock,\\n\\n        ) = KeeperRegistryInterface(getOldKeeperRegistry()).getUpkeep(id);\\n        require(\\n            block.number > maxValidBlock,\\n            \\\"Gravity: Valid Block not reached\\\"\\n        );\\n        needSponsor.remove(id); //remove upkeep id from needSponsor\\n        uint256 bal = uint256(balance);\\n        uint256 reward = (bal * sponsorFee) / 10000;\\n        KeeperRegistryInterface(getOldKeeperRegistry()).withdrawFunds(\\n            id,\\n            address(this)\\n        );\\n        uint256 fundsToReturn = bal - reward;\\n        ERC677Link.approve(getKeeperRegistry(), fundsToReturn);\\n        KeeperRegistryInterface(getKeeperRegistry()).addFunds(\\n            id,\\n            uint96(fundsToReturn)\\n        );\\n        ERC677Link.transfer(msg.sender, reward);\\n    }\\n\\n    function getUpkeepBalance(address _user) external view returns (uint96) {\\n        address manager = userToManager[_user];\\n        if (manager == address(0)) {\\n            //_user doesn't have a manager\\n            return 0;\\n        }\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        (address target, , , uint96 balance, , , , ) = Registry.getUpkeep(id);\\n        if (target != address(manager)) {\\n            //upkeep is not approved\\n            return 0;\\n        }\\n        return balance;\\n    }\\n\\n    function managerApproved(address _user) external view returns (bool) {\\n        address manager = userToManager[_user];\\n        if (manager == address(0)) {\\n            return false;\\n        }\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        (address target, , , , , , uint64 maxValidBlocknumber, ) = Registry\\n            .getUpkeep(id);\\n        bool isAcitve = maxValidBlocknumber == UINT64_MAX;\\n        return target == manager && isAcitve;\\n    }\\n\\n    function managerCanceled(address _user) public view returns (bool) {\\n        address manager = userToManager[_user];\\n\\n        if (manager == address(0)) {\\n            return false;\\n        }\\n        // require(manager != address(0), \\\"Gravity : _user has no manger\\\");\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        (, , , , , , uint64 maxValidBlocknumber, ) = Registry.getUpkeep(id);\\n        bool canceled = maxValidBlocknumber != UINT64_MAX &&\\n            maxValidBlocknumber != 0;\\n        return canceled;\\n    }\\n\\n    function cancelUpkeep() external {\\n        require(!migrate, \\\"Cannot cancel upkeeps while migration is active\\\");\\n        address manager = userToManager[msg.sender];\\n        require(manager != address(0), \\\"Gravity: _user has no manger\\\");\\n\\n        //enforce safety checks\\n        uint256 siloID;\\n        ISilo Silo;\\n        ISiloFactory SiloFactory = ISiloFactory(siloFactory);\\n        uint256 balance = SiloFactory.balanceOf(msg.sender);\\n        for (uint256 i; i < balance; ) {\\n            siloID = SiloFactory.tokenOfOwnerByIndex(msg.sender, i);\\n            Silo = ISilo(SiloFactory.siloMap(siloID));\\n            if (Silo.highRiskAction()) {\\n                require(!Silo.deposited(), \\\"Silo should not be deposited\\\");\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        (, , , , , , uint256 maxValidBlock, ) = Registry.getUpkeep(id);\\n        require(maxValidBlock == UINT64_MAX, \\\"Gravity: Upkeep cancelled\\\");\\n        //remove upkeep from sets if in sets\\n        if (upkeepSetAlpha.contains(id)) {\\n            upkeepSetAlpha.remove(id);\\n        } else if (upkeepSetBeta.contains(id)) {\\n            upkeepSetBeta.remove(id);\\n        }\\n        if (needSponsor.contains(id)) {\\n            needSponsor.remove(id);\\n        }\\n        Registry.cancelUpkeep(id);\\n\\n        emit SiloManagerCancel(msg.sender, manager, id);\\n    }\\n\\n    //have it swap ERC677 Link to ERC20\\n    function withdrawFundsFromCanceled(bool _linkType) external {\\n        address manager = userToManager[msg.sender];\\n        userToManager[msg.sender] = address(0); //user no longer has an upkeep after this function so remove the manager\\n        require(manager != address(0), \\\"Gravity : _user has no manger\\\");\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        (, , , uint96 balance, , , uint256 maxValidBlock, ) = Registry\\n            .getUpkeep(id);\\n        require(\\n            block.number > maxValidBlock,\\n            \\\"Gravity: Valid Block not reached\\\"\\n        );\\n        //remove upkeep from sets if in sets\\n        if (upkeepSetAlpha.contains(id)) {\\n            upkeepSetAlpha.remove(id);\\n        } else if (upkeepSetBeta.contains(id)) {\\n            upkeepSetBeta.remove(id);\\n        }\\n        if (needSponsor.contains(id)) {\\n            needSponsor.remove(id);\\n        }\\n        if (_linkType) {\\n            //user wants erc677 link\\n            Registry.withdrawFunds(id, msg.sender);\\n        } else {\\n            //user wants erc20 link\\n            uint256 beforeBalance = ERC677Link.balanceOf(address(this));\\n            Registry.withdrawFunds(id, address(this));\\n            uint256 currentBalance = ERC677Link.balanceOf(address(this));\\n            ERC677Link.approve(PEGSWAP_ADDRESS, uint256(balance));\\n            PegSwap.swap(\\n                currentBalance - beforeBalance,\\n                ERC677_LINK_ADDRESS,\\n                ERC20_LINK_ADDRESS\\n            );\\n            SafeERC20.safeTransfer(\\n                ERC20Link,\\n                msg.sender,\\n                currentBalance - beforeBalance\\n            );\\n        }\\n\\n        emit SiloManagerWithdraw(msg.sender, manager, id, balance);\\n    }\\n\\n    function fundsWithdrawable(address _user) external view returns (bool) {\\n        address manager = userToManager[_user];\\n        if (manager == address(0)) {\\n            return false;\\n        }\\n        // require(manager != address(0), \\\"Gravity : _user has no manger\\\");\\n        uint256 id = ISiloManager(manager).upkeepId();\\n        if (id == 0) {\\n            return false;\\n        }\\n\\n        // require(id > 0, \\\"manager not approved\\\");\\n        (, , , , , , uint256 maxValidBlock, ) = Registry.getUpkeep(id);\\n        return block.number > maxValidBlock;\\n    }\\n\\n    function canCancelUpkeep(address _user) external view returns (bool) {\\n        uint256 siloID;\\n        ISilo Silo;\\n        ISiloFactory SiloFactory = ISiloFactory(siloFactory);\\n        uint256 balance = SiloFactory.balanceOf(_user);\\n        for (uint256 i; i < balance; ) {\\n            siloID = SiloFactory.tokenOfOwnerByIndex(_user, i);\\n            Silo = ISilo(SiloFactory.siloMap(siloID));\\n            if (Silo.highRiskAction()) {\\n                if (Silo.deposited()) {\\n                    return false;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getUpkeep(\\n        uint256 _id\\n    )\\n        external\\n        view\\n        returns (\\n            address target,\\n            uint32 executeGas,\\n            bytes memory checkData,\\n            uint96 balance,\\n            address lastKeeper,\\n            address admin,\\n            uint64 maxValidBlocknumber,\\n            uint96 amountSpent\\n        )\\n    {\\n        (\\n            target,\\n            executeGas,\\n            checkData,\\n            balance,\\n            lastKeeper,\\n            admin,\\n            maxValidBlocknumber,\\n            amountSpent\\n        ) = Registry.getUpkeep(_id);\\n    }\\n\\n    function getTarget(uint256 _id) external view returns (address target) {\\n        (target, , , , , , , ) = Registry.getUpkeep(_id);\\n    }\\n\\n    function getBalance(uint256 _id) external view returns (uint96 balance) {\\n        (, , , balance, , , , ) = Registry.getUpkeep(_id);\\n    }\\n\\n    function getMinBalance(uint256 _id) external view returns (uint96 balance) {\\n        balance = Registry.getMinBalanceForUpkeep(_id);\\n    }\\n\\n    function getOldMaxValidBlockAndBalance(\\n        uint256 _id\\n    ) external view returns (uint256 mvb, uint96 bal) {\\n        (, , , bal, , , mvb, ) = KeeperRegistryInterface(getOldKeeperRegistry())\\n            .getUpkeep(_id);\\n    }\\n\\n    function getUsersUpkeepId(address _user) public view returns (uint256 id) {\\n        address manager = userToManager[_user];\\n        if (manager != address(0)) {\\n            // require(manager != address(0), \\\"Gravity: _user has no manger\\\");\\n            id = ISiloManager(manager).upkeepId();\\n        }\\n    }\\n\\n    function currentUpkeepToMigrate() public view returns (uint256) {\\n        if (alphaOrBeta) {\\n            //moving from beta to alpha\\n            return upkeepSetBeta.at(0); //remove id  from alpha set\\n        } else {\\n            //moving from alpha to beta\\n            return upkeepSetAlpha.at(0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPegSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwap{\\n    function swap(uint256 amount, address source, address target) external;\\n    function getSwappableAmount(address source, address target) external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISilo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct PriceOracle {\\n    address oracle;\\n    uint256 actionPrice;\\n}\\n\\nenum Statuses {\\n    PAUSED,\\n    DORMANT,\\n    MANAGED,\\n    UNWIND\\n}\\n\\ninterface ISilo {\\n    function initialize(uint256 siloID, uint256 main, address factory) external;\\n\\n    function deposit() external;\\n\\n    function withdraw(uint256 _requestedOut) external;\\n\\n    function maintain() external;\\n\\n    function exitSilo(address caller) external;\\n\\n    function adminCall(address target, bytes memory data) external;\\n\\n    function setStrategy(\\n        address[5] memory input,\\n        bytes[] memory _configurationData,\\n        address[] memory _implementations\\n    ) external;\\n\\n    function getConfig() external view returns (bytes memory config);\\n\\n    function withdrawToken(address token, address recipient) external;\\n\\n    function adjustSiloDelay(uint256 _newDelay) external;\\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    function performUpkeep(bytes calldata performData) external;\\n\\n    function siloDelay() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function lastTimeMaintained() external view returns (uint256);\\n\\n    function setName(string memory name) external;\\n\\n    function deposited() external view returns (bool);\\n\\n    function isNew() external view returns (bool);\\n\\n    function status() external view returns (Statuses);\\n\\n    function setStrategyName(string memory _strategyName) external;\\n\\n    function setStrategyCategory(uint256 _strategyCategory) external;\\n\\n    function strategyName() external view returns (string memory);\\n\\n    function tokenMinimum(address token) external view returns (uint256);\\n\\n    function strategyCategory() external view returns (uint256);\\n\\n    function lastPid() external view returns (uint256);\\n\\n    function adjustStrategy(\\n        uint256 _index,\\n        bytes memory _configurationData,\\n        address _implementation\\n    ) external;\\n\\n    function viewStrategy()\\n        external\\n        view\\n        returns (address[] memory actions, bytes[] memory configData);\\n\\n    function highRiskAction() external view returns (bool);\\n\\n    function showActionStackValidity() external view returns (bool, bool);\\n\\n    function getInputTokens() external view returns (address[5] memory);\\n\\n    function getStatus() external view returns (Statuses);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setActive() external;\\n\\n    function possibleReinvestSilo() external view returns (bool possible);\\n\\n    function getExtraSiloInfo()\\n        external\\n        view\\n        returns (\\n            uint256 strategyType,\\n            uint256 currentBalance,\\n            uint256 possibleWithdraw,\\n            uint256 availableBlock,\\n            uint256 pendingReward,\\n            uint256 lastPid\\n        );\\n\\n    function getReferralInfo()\\n        external\\n        view\\n        returns (uint256 fee, address recipient);\\n\\n    function setReferralInfo(bytes32 _code) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISiloFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ISiloFactory is IERC721Enumerable{\\n    function tokenMinimum(address _token) external view returns(uint _minimum);\\n    function balanceOf(address _owner) external view returns(uint);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    function managerFactory() external view returns(address);\\n    function siloMap(uint _id) external view returns(address);\\n    function tierManager() external view returns(address);\\n    function ownerOf(uint _id) external view returns(address);\\n    function siloToId(address silo) external view returns(uint);\\n    // function createSilo(address recipient) external returns(uint);\\n    function setActionStack(uint siloID, address[5] memory input, address[] memory _implementations, bytes[] memory _configurationData) external;\\n    // function withdraw(uint siloID) external;\\n    function getFeeInfo(address _action) external view returns(uint fee, address recipient);\\n    function strategyMaxGas() external view returns(uint);\\n    function strategyName(string memory _name) external view returns(uint);\\n    \\n    function getCatalogue(uint _type) external view returns(string[] memory);\\n    function getStrategyInputs(uint _id) external view returns(address[5] memory inputs);\\n    function getStrategyActions(uint _id) external view returns(address[] memory actions);\\n    function getStrategyConfigurationData(uint _id) external view returns(bytes[] memory configurationData);\\n    function useCustom(address _action) external view returns(bool);\\n    // function getFeeList(address _action) external view returns(uint[4] memory);\\n    function feeRecipient(address _action) external view returns(address);\\n    function defaultFeeList() external view returns(uint[4] memory);\\n    function defaultRecipient() external view returns(address);\\n    // function getTier(address _silo) external view returns(uint);\\n\\n    function getFeeInfoNoTier(address _action) external view returns(uint[4] memory);\\n    function highRiskActions(address _action) external view returns(bool);\\n    function actionValid(address _action) external view returns(bool);\\n    function skipActionValidTeamCheck(address _user) external view returns(bool);\\n    function skipActionValidLogicCheck(address _user) external view returns(bool);\\n    function isSilo(address _silo) external view returns(bool);\\n\\n    function isSiloManager(address _silo,address _manager) external view returns(bool);\\n\\n    function currentStrategyId() external view returns(uint);\\n    function minBalance() external view returns(uint);\\n    \\n    function subFactory() external view returns(address);\\n    function referral() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISiloManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISiloManager{\\n    function createUpkeep(address _owner, uint _amount) external;\\n    \\n    function setUpkeepId(uint id) external;\\n\\n    function owner() external view returns(address);\\n\\n    function upkeepId() external view returns(uint);\\n\\n    function initialize(address _mangerFactory, address _owner) external;\\n\\n    function getRiskBuffer() external view returns(uint96);\\n\\n    function checkUpkeep(bytes calldata checkData) external returns(bool,bytes memory);\\n\\n    function setCustomRiskBuffer(uint96 _buffer) external ;\\n\\n    function setCustomRejoinBuffer(uint96 _buffer) external;\\n\\n    function getRejoinBuffer() external view returns(uint96);\\n    \\n    function getMinBuffers() external view returns(uint96 minRisk , uint96 minRejoin);\\n\\n    function autoTopup() external view returns(bool);\\n\\n    function addFundsThreshold() external view returns(uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_siloFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managerImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"SiloManagerCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"SiloManagerCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SiloManagerFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SiloManagerWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20_LINK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC677_LINK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PEGSWAP_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRAR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBatchSize\",\"type\":\"uint256\"}],\"name\":\"adjustMaxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adjustMinFundingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_buffer\",\"type\":\"uint96\"}],\"name\":\"adjustRejoinBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_buffer\",\"type\":\"uint96\"}],\"name\":\"adjustRiskBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_buffer\",\"type\":\"uint96\"}],\"name\":\"adjustSiloBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"adjustSponsorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaOrBeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betaRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferPerSilo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canCancelUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRegistryState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"ownerLinkBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"expectedLinkBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numUpkeeps\",\"type\":\"uint256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"internalType\":\"struct Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSiloManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUpkeepToMigrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryUpkeepCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fundsWithdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeeperRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMinBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMinimumUpkeepBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOldKeeperRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOldMaxValidBlockAndBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mvb\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"bal\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUpkeep\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"lastKeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"maxValidBlocknumber\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"amountSpent\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUpkeepBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsersUpkeepId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckedUpkeepId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"managerApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"managerCanceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerUpkeeps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMigrationBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejoinBuffer\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskBuffer\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_buffer\",\"type\":\"uint96\"}],\"name\":\"setUserRejoinBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_buffer\",\"type\":\"uint96\"}],\"name\":\"setUserRiskBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"udpateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloFactory\",\"type\":\"address\"}],\"name\":\"udpateSiloFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateCurrentKeepersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_linkType\",\"type\":\"bool\"}],\"name\":\"withdrawFundsFromCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SiloManagerFactory", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000002777053d6764996e594c3e88af1d58d5363a2e6000000000000000000000000a946452fa2327ef673604d3108d36d3be53a63d80000000000000000000000002b15a665e125f26c7c2a83f59fd157b0d6a0eb9f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}