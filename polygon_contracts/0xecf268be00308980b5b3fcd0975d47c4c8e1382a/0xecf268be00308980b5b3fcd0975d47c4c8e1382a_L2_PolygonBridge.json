{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bridges/L2_PolygonBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./L2_Bridge.sol\\\";\\nimport \\\"../interfaces/polygon/messengers/I_L2_PolygonMessengerProxy.sol\\\";\\n\\n/**\\n * @dev An L2_Bridge for Polygon - https://docs.matic.network/docs\\n */\\n\\ncontract L2_PolygonBridge is L2_Bridge {\\n    I_L2_PolygonMessengerProxy public messengerProxy;\\n\\n    event L1_BridgeMessage(bytes data);\\n\\n    constructor (\\n        I_L2_PolygonMessengerProxy _messengerProxy,\\n        address l1Governance,\\n        HopBridgeToken hToken,\\n        address l1BridgeAddress,\\n        uint256[] memory activeChainIds,\\n        address[] memory bonders\\n    )\\n        public\\n        L2_Bridge(\\n            l1Governance,\\n            hToken,\\n            l1BridgeAddress,\\n            activeChainIds,\\n            bonders\\n        )\\n    {\\n        messengerProxy = _messengerProxy;\\n    }\\n\\n    function _sendCrossDomainMessage(bytes memory message) internal override {\\n        messengerProxy.sendCrossDomainMessage(message);\\n    }\\n\\n    function _verifySender(address expectedSender) internal override {\\n        require(msg.sender == address(messengerProxy), \\\"L2_PLGN_BRG: Caller is not the expected sender\\\");\\n        // Verify that cross-domain sender is expectedSender\\n        require(messengerProxy.xDomainMessageSender() == expectedSender, \\\"L2_PLGN_BRG: Invalid cross-domain sender\\\");\\n    }\\n\\n    /**\\n     * @dev Allows the L1 Bridge to set the messengerProxy proxy\\n     * @param _messengerProxy The new messengerProxy address\\n     */\\n    function setMessengerProxy(I_L2_PolygonMessengerProxy _messengerProxy) external onlyGovernance {\\n        messengerProxy = _messengerProxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridges/L2_Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./Bridge.sol\\\";\\nimport \\\"./HopBridgeToken.sol\\\";\\nimport \\\"../libraries/Lib_MerkleTree.sol\\\";\\n\\ninterface I_L2_AmmWrapper {\\n    function attemptSwap(address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline) external;\\n}\\n\\n/**\\n * @dev The L2_Bridge is responsible for aggregating pending Transfers into TransferRoots. Each newly\\n * createdTransferRoot is then sent to the L1_Bridge. The L1_Bridge may be the TransferRoot's final\\n * destination or the L1_Bridge may forward the TransferRoot to it's destination L2_Bridge.\\n */\\n\\nabstract contract L2_Bridge is Bridge {\\n    using SafeERC20 for IERC20;\\n\\n    address public l1Governance;\\n    HopBridgeToken public immutable hToken;\\n    address public l1BridgeAddress;\\n    address public l1BridgeCaller;\\n    I_L2_AmmWrapper public ammWrapper;\\n    mapping(uint256 => bool) public activeChainIds;\\n    uint256 public minimumForceCommitDelay = 4 hours;\\n    uint256 public maxPendingTransfers = 128;\\n    uint256 public minBonderBps = 2;\\n    uint256 public minBonderFeeAbsolute = 0;\\n\\n    mapping(uint256 => bytes32[]) public pendingTransferIdsForChainId;\\n    mapping(uint256 => uint256) public pendingAmountForChainId;\\n    mapping(uint256 => uint256) public lastCommitTimeForChainId;\\n    uint256 public transferNonceIncrementer;\\n\\n    bytes32 private immutable NONCE_DOMAIN_SEPARATOR;\\n\\n    event TransfersCommitted (\\n        uint256 indexed destinationChainId,\\n        bytes32 indexed rootHash,\\n        uint256 totalAmount,\\n        uint256 rootCommittedAt\\n    );\\n\\n    event TransferSent (\\n        bytes32 indexed transferId,\\n        uint256 indexed chainId,\\n        address indexed recipient,\\n        uint256 amount,\\n        bytes32 transferNonce,\\n        uint256 bonderFee,\\n        uint256 index,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    );\\n\\n    event TransferFromL1Completed (\\n        address indexed recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address indexed relayer,\\n        uint256 relayerFee\\n    );\\n\\n    modifier onlyL1Bridge {\\n        _verifySender(l1BridgeCaller);\\n        _;\\n    }\\n\\n    constructor (\\n        address _l1Governance,\\n        HopBridgeToken _hToken,\\n        address _l1BridgeAddress,\\n        uint256[] memory _activeChainIds,\\n        address[] memory bonders\\n    )\\n        public\\n        Bridge(bonders)\\n    {\\n        l1Governance = _l1Governance;\\n        hToken = _hToken;\\n        l1BridgeAddress = _l1BridgeAddress;\\n\\n        for (uint256 i = 0; i < _activeChainIds.length; i++) {\\n            activeChainIds[_activeChainIds[i]] = true;\\n        }\\n\\n        NONCE_DOMAIN_SEPARATOR = keccak256(\\\"L2_Bridge v1.0\\\");\\n    }\\n\\n    /* ========== Virtual functions ========== */\\n\\n    function _sendCrossDomainMessage(bytes memory message) internal virtual;\\n    function _verifySender(address expectedSender) internal virtual;\\n\\n    /* ========== Public/External functions ========== */\\n\\n    /**\\n     * @notice _amount is the total amount the user wants to send including the Bonder fee\\n     * @dev Send  hTokens to another supported layer-2 or to layer-1 to be redeemed for the underlying asset.\\n     * @param chainId The chainId of the destination chain\\n     * @param recipient The address receiving funds at the destination\\n     * @param amount The amount being sent\\n     * @param bonderFee The amount distributed to the Bonder at the destination. This is subtracted from the `amount`.\\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\\n     * AMM market. 0 if no swap is intended.\\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\\n     * swap is intended.\\n     */\\n    function send(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    )\\n        external\\n    {\\n        require(amount > 0, \\\"L2_BRG: Must transfer a non-zero amount\\\");\\n        require(amount >= bonderFee, \\\"L2_BRG: Bonder fee cannot exceed amount\\\");\\n        require(activeChainIds[chainId], \\\"L2_BRG: chainId is not supported\\\");\\n        uint256 minBonderFeeRelative = amount.mul(minBonderBps).div(10000);\\n        // Get the max of minBonderFeeRelative and minBonderFeeAbsolute\\n        uint256 minBonderFee = minBonderFeeRelative > minBonderFeeAbsolute ? minBonderFeeRelative : minBonderFeeAbsolute;\\n        require(bonderFee >= minBonderFee, \\\"L2_BRG: bonderFee must meet minimum requirements\\\");\\n\\n        bytes32[] storage pendingTransfers = pendingTransferIdsForChainId[chainId];\\n\\n        if (pendingTransfers.length >= maxPendingTransfers) {\\n            _commitTransfers(chainId);\\n        }\\n\\n        hToken.burn(msg.sender, amount);\\n\\n        bytes32 transferNonce = getNextTransferNonce();\\n        transferNonceIncrementer++;\\n\\n        bytes32 transferId = getTransferId(\\n            chainId,\\n            recipient,\\n            amount,\\n            transferNonce,\\n            bonderFee,\\n            amountOutMin,\\n            deadline\\n        );\\n        uint256 transferIndex = pendingTransfers.length;\\n        pendingTransfers.push(transferId);\\n\\n        pendingAmountForChainId[chainId] = pendingAmountForChainId[chainId].add(amount);\\n\\n        emit TransferSent(\\n            transferId,\\n            chainId,\\n            recipient,\\n            amount,\\n            transferNonce,\\n            bonderFee,\\n            transferIndex,\\n            amountOutMin,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @dev Aggregates all pending Transfers to the `destinationChainId` and sends them to the\\n     * L1_Bridge as a TransferRoot.\\n     * @param destinationChainId The chainId of the TransferRoot's destination chain\\n     */\\n    function commitTransfers(uint256 destinationChainId) external {\\n        uint256 minForceCommitTime = lastCommitTimeForChainId[destinationChainId].add(minimumForceCommitDelay);\\n        require(minForceCommitTime < block.timestamp || getIsBonder(msg.sender), \\\"L2_BRG: Only Bonder can commit before min delay\\\");\\n        lastCommitTimeForChainId[destinationChainId] = block.timestamp;\\n\\n        _commitTransfers(destinationChainId);\\n    }\\n\\n    /**\\n     * @dev Mints new hTokens for the recipient and optionally swaps them in the AMM market.\\n     * @param recipient The address receiving funds\\n     * @param amount The amount being distributed\\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\\n     * AMM market. 0 if no swap is intended.\\n     * @param deadline The deadline for swapping in the AMM market. 0 if no\\n     * swap is intended.\\n     * @param relayer The address of the relayer.\\n     * @param relayerFee The amount distributed to the relayer. This is subtracted from the `amount`.\\n     */\\n    function distribute(\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 relayerFee\\n    )\\n        external\\n        onlyL1Bridge\\n        nonReentrant\\n    {\\n        _distribute(recipient, amount, amountOutMin, deadline, relayer, relayerFee);\\n\\n        emit TransferFromL1Completed(\\n            recipient,\\n            amount,\\n            amountOutMin,\\n            deadline,\\n            relayer,\\n            relayerFee\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows the Bonder to bond an individual withdrawal and swap it in the AMM for the\\n     * canonical token on behalf of the user.\\n     * @param recipient The address receiving the Transfer\\n     * @param amount The amount being transferred including the `_bonderFee`\\n     * @param transferNonce Used to avoid transferId collisions\\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\\n     * @param amountOutMin The minimum amount received after attempting to swap in the\\n     * AMM market. 0 if no swap is intended.\\n     * @param deadline The deadline for swapping in the AMM market. 0 if no\\n     * swap is intended.\\n     */\\n    function bondWithdrawalAndDistribute(\\n        address recipient,\\n        uint256 amount,\\n        bytes32 transferNonce,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    )\\n        external\\n        onlyBonder\\n        requirePositiveBalance\\n        nonReentrant\\n    {\\n        bytes32 transferId = getTransferId(\\n            getChainId(),\\n            recipient,\\n            amount,\\n            transferNonce,\\n            bonderFee,\\n            amountOutMin,\\n            deadline\\n        );\\n\\n        _bondWithdrawal(transferId, amount);\\n        _markTransferSpent(transferId);\\n        _distribute(recipient, amount, amountOutMin, deadline, msg.sender, bonderFee);\\n    }\\n\\n    /**\\n     * @dev Allows the L1 Bridge to set a TransferRoot\\n     * @param rootHash The Merkle root of the TransferRoot\\n     * @param totalAmount The total amount being transferred in the TransferRoot\\n     */\\n    function setTransferRoot(bytes32 rootHash, uint256 totalAmount) external onlyL1Bridge {\\n        _setTransferRoot(rootHash, totalAmount);\\n    }\\n\\n    /* ========== Helper Functions ========== */\\n\\n    function _commitTransfers(uint256 destinationChainId) internal {\\n        bytes32[] storage pendingTransfers = pendingTransferIdsForChainId[destinationChainId];\\n        require(pendingTransfers.length > 0, \\\"L2_BRG: Must commit at least 1 Transfer\\\");\\n\\n        bytes32 rootHash = Lib_MerkleTree.getMerkleRoot(pendingTransfers);\\n        uint256 totalAmount = pendingAmountForChainId[destinationChainId];\\n        uint256 rootCommittedAt = block.timestamp;\\n\\n        emit TransfersCommitted(destinationChainId, rootHash, totalAmount, rootCommittedAt);\\n\\n        bytes memory confirmTransferRootMessage = abi.encodeWithSignature(\\n            \\\"confirmTransferRoot(uint256,bytes32,uint256,uint256,uint256)\\\",\\n            getChainId(),\\n            rootHash,\\n            destinationChainId,\\n            totalAmount,\\n            rootCommittedAt\\n        );\\n\\n        pendingAmountForChainId[destinationChainId] = 0;\\n        delete pendingTransferIdsForChainId[destinationChainId];\\n\\n        _sendCrossDomainMessage(confirmTransferRootMessage);\\n    }\\n\\n    function _distribute(\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address feeRecipient,\\n        uint256 fee\\n    )\\n        internal\\n    {\\n        if (fee > 0) {\\n            hToken.mint(feeRecipient, fee);\\n        }\\n        uint256 amountAfterFee = amount.sub(fee);\\n\\n        if (amountOutMin == 0 && deadline == 0) {\\n            hToken.mint(recipient, amountAfterFee);\\n        } else {\\n            hToken.mint(address(this), amountAfterFee);\\n            hToken.approve(address(ammWrapper), amountAfterFee);\\n            ammWrapper.attemptSwap(recipient, amountAfterFee, amountOutMin, deadline);\\n        }\\n    }\\n\\n    /* ========== Override Functions ========== */\\n\\n    function _transferFromBridge(address recipient, uint256 amount) internal override {\\n        hToken.mint(recipient, amount);\\n    }\\n\\n    function _transferToBridge(address from, uint256 amount) internal override {\\n        hToken.burn(from, amount);\\n    }\\n\\n    function _requireIsGovernance() internal override {\\n        _verifySender(l1Governance);\\n    }\\n\\n    /* ========== External Config Management Functions ========== */\\n\\n    function setL1Governance(address _l1Governance) external onlyGovernance {\\n        l1Governance = _l1Governance;\\n    }\\n\\n    function setAmmWrapper(I_L2_AmmWrapper _ammWrapper) external onlyGovernance {\\n        ammWrapper = _ammWrapper;\\n    }\\n\\n    function setL1BridgeAddress(address _l1BridgeAddress) external onlyGovernance {\\n        l1BridgeAddress = _l1BridgeAddress;\\n    }\\n\\n    function setL1BridgeCaller(address _l1BridgeCaller) external onlyGovernance {\\n        l1BridgeCaller = _l1BridgeCaller;\\n    }\\n\\n    function addActiveChainIds(uint256[] calldata chainIds) external onlyGovernance {\\n        for (uint256 i = 0; i < chainIds.length; i++) {\\n            activeChainIds[chainIds[i]] = true;\\n        }\\n    }\\n\\n    function removeActiveChainIds(uint256[] calldata chainIds) external onlyGovernance {\\n        for (uint256 i = 0; i < chainIds.length; i++) {\\n            activeChainIds[chainIds[i]] = false;\\n        }\\n    }\\n\\n    function setMinimumForceCommitDelay(uint256 _minimumForceCommitDelay) external onlyGovernance {\\n        minimumForceCommitDelay = _minimumForceCommitDelay;\\n    }\\n\\n    function setMaxPendingTransfers(uint256 _maxPendingTransfers) external onlyGovernance {\\n        maxPendingTransfers = _maxPendingTransfers;\\n    }\\n\\n    function setHopBridgeTokenOwner(address newOwner) external onlyGovernance {\\n        hToken.transferOwnership(newOwner);\\n    }\\n\\n    function setMinimumBonderFeeRequirements(uint256 _minBonderBps, uint256 _minBonderFeeAbsolute) external onlyGovernance {\\n        require(_minBonderBps <= 10000, \\\"L2_BRG: minBonderBps must not exceed 10000\\\");\\n        minBonderBps = _minBonderBps;\\n        minBonderFeeAbsolute = _minBonderFeeAbsolute;\\n    }\\n\\n    /* ========== Public Getters ========== */\\n\\n    function getNextTransferNonce() public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(NONCE_DOMAIN_SEPARATOR, getChainId(), transferNonceIncrementer));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/polygon/messengers/I_L2_PolygonMessengerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface I_L2_PolygonMessengerProxy {\\n    function sendCrossDomainMessage(bytes memory _calldata) external;\\n    function xDomainMessageSender() external view returns (address);\\n    function processMessageFromRoot(\\n        bytes calldata message\\n    ) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridges/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Accounting.sol\\\";\\nimport \\\"../libraries/Lib_MerkleTree.sol\\\";\\n\\n/**\\n * @dev Bridge extends the accounting system and encapsulates the logic that is shared by both the\\n * L1 and L2 Bridges. It allows to TransferRoots to be set by parent contracts and for those\\n * TransferRoots to be withdrawn against. It also allows the bonder to bond and withdraw Transfers\\n * directly through `bondWithdrawal` and then settle those bonds against their TransferRoot once it\\n * has been set.\\n */\\n\\nabstract contract Bridge is Accounting {\\n    using Lib_MerkleTree for bytes32;\\n\\n    struct TransferRoot {\\n        uint256 total;\\n        uint256 amountWithdrawn;\\n        uint256 createdAt;\\n    }\\n\\n    /* ========== Events ========== */\\n\\n    event Withdrew(\\n        bytes32 indexed transferId,\\n        address indexed recipient,\\n        uint256 amount,\\n        bytes32 transferNonce\\n    );\\n\\n    event WithdrawalBonded(\\n        bytes32 indexed transferId,\\n        uint256 amount\\n    );\\n\\n    event WithdrawalBondSettled(\\n        address indexed bonder,\\n        bytes32 indexed transferId,\\n        bytes32 indexed rootHash\\n    );\\n\\n    event MultipleWithdrawalsSettled(\\n        address indexed bonder,\\n        bytes32 indexed rootHash,\\n        uint256 totalBondsSettled\\n    );\\n\\n    event TransferRootSet(\\n        bytes32 indexed rootHash,\\n        uint256 totalAmount\\n    );\\n\\n    /* ========== State ========== */\\n\\n    mapping(bytes32 => TransferRoot) private _transferRoots;\\n    mapping(bytes32 => bool) private _spentTransferIds;\\n    mapping(address => mapping(bytes32 => uint256)) private _bondedWithdrawalAmounts;\\n\\n    uint256 constant RESCUE_DELAY = 8 weeks;\\n\\n    constructor(address[] memory bonders) public Accounting(bonders) {}\\n\\n    /* ========== Public Getters ========== */\\n\\n    /**\\n     * @dev Get the hash that represents an individual Transfer.\\n     * @param chainId The id of the destination chain\\n     * @param recipient The address receiving the Transfer\\n     * @param amount The amount being transferred including the `_bonderFee`\\n     * @param transferNonce Used to avoid transferId collisions\\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\\n     * AMM market. 0 if no swap is intended.\\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\\n     * swap is intended.\\n     */\\n    function getTransferId(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        bytes32 transferNonce,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    )\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(\\n            chainId,\\n            recipient,\\n            amount,\\n            transferNonce,\\n            bonderFee,\\n            amountOutMin,\\n            deadline\\n        ));\\n    }\\n\\n    /**\\n     * @notice getChainId can be overridden by subclasses if needed for compatibility or testing purposes.\\n     * @dev Get the current chainId\\n     * @return chainId The current chainId\\n     */\\n    function getChainId() public virtual view returns (uint256 chainId) {\\n        this; // Silence state mutability warning without generating any additional byte code\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the TransferRoot id for a given rootHash and totalAmount\\n     * @param rootHash The Merkle root of the TransferRoot\\n     * @param totalAmount The total of all Transfers in the TransferRoot\\n     * @return The calculated transferRootId\\n     */\\n    function getTransferRootId(bytes32 rootHash, uint256 totalAmount) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(rootHash, totalAmount));\\n    }\\n\\n    /**\\n     * @dev Get the TransferRoot for a given rootHash and totalAmount\\n     * @param rootHash The Merkle root of the TransferRoot\\n     * @param totalAmount The total of all Transfers in the TransferRoot\\n     * @return The TransferRoot with the calculated transferRootId\\n     */\\n    function getTransferRoot(bytes32 rootHash, uint256 totalAmount) public view returns (TransferRoot memory) {\\n        return _transferRoots[getTransferRootId(rootHash, totalAmount)];\\n    }\\n\\n    /**\\n     * @dev Get the amount bonded for the withdrawal of a transfer\\n     * @param bonder The Bonder of the withdrawal\\n     * @param transferId The Transfer's unique identifier\\n     * @return The amount bonded for a Transfer withdrawal\\n     */\\n    function getBondedWithdrawalAmount(address bonder, bytes32 transferId) external view returns (uint256) {\\n        return _bondedWithdrawalAmounts[bonder][transferId];\\n    }\\n\\n    /**\\n     * @dev Get the spent status of a transfer ID\\n     * @param transferId The transfer's unique identifier\\n     * @return True if the transferId has been spent\\n     */\\n    function isTransferIdSpent(bytes32 transferId) external view returns (bool) {\\n        return _spentTransferIds[transferId];\\n    }\\n\\n    /* ========== User/Relayer External Functions ========== */\\n\\n    /**\\n     * @notice Can be called by anyone (recipient or relayer)\\n     * @dev Withdraw a Transfer from its destination bridge\\n     * @param recipient The address receiving the Transfer\\n     * @param amount The amount being transferred including the `_bonderFee`\\n     * @param transferNonce Used to avoid transferId collisions\\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\\n     * AMM market. 0 if no swap is intended. (only used to calculate `transferId` in this function)\\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\\n     * swap is intended. (only used to calculate `transferId` in this function)\\n     * @param rootHash The Merkle root of the TransferRoot\\n     * @param transferRootTotalAmount The total amount being transferred in a TransferRoot\\n     * @param transferIdTreeIndex The index of the transferId in the Merkle tree\\n     * @param siblings The siblings of the transferId in the Merkle tree\\n     * @param totalLeaves The total number of leaves in the Merkle tree\\n     */\\n    function withdraw(\\n        address recipient,\\n        uint256 amount,\\n        bytes32 transferNonce,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        bytes32 rootHash,\\n        uint256 transferRootTotalAmount,\\n        uint256 transferIdTreeIndex,\\n        bytes32[] calldata siblings,\\n        uint256 totalLeaves\\n    )\\n        external\\n        nonReentrant\\n    {\\n        bytes32 transferId = getTransferId(\\n            getChainId(),\\n            recipient,\\n            amount,\\n            transferNonce,\\n            bonderFee,\\n            amountOutMin,\\n            deadline\\n        );\\n\\n        require(\\n            rootHash.verify(\\n                transferId,\\n                transferIdTreeIndex,\\n                siblings,\\n                totalLeaves\\n            )\\n        , \\\"BRG: Invalid transfer proof\\\");\\n        bytes32 transferRootId = getTransferRootId(rootHash, transferRootTotalAmount);\\n        _addToAmountWithdrawn(transferRootId, amount);\\n        _fulfillWithdraw(transferId, recipient, amount, uint256(0));\\n\\n        emit Withdrew(transferId, recipient, amount, transferNonce);\\n    }\\n\\n    /**\\n     * @dev Allows the bonder to bond individual withdrawals before their TransferRoot has been committed.\\n     * @param recipient The address receiving the Transfer\\n     * @param amount The amount being transferred including the `_bonderFee`\\n     * @param transferNonce Used to avoid transferId collisions\\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\\n     */\\n    function bondWithdrawal(\\n        address recipient,\\n        uint256 amount,\\n        bytes32 transferNonce,\\n        uint256 bonderFee\\n    )\\n        external\\n        onlyBonder\\n        requirePositiveBalance\\n        nonReentrant\\n    {\\n        bytes32 transferId = getTransferId(\\n            getChainId(),\\n            recipient,\\n            amount,\\n            transferNonce,\\n            bonderFee,\\n            0,\\n            0\\n        );\\n\\n        _bondWithdrawal(transferId, amount);\\n        _fulfillWithdraw(transferId, recipient, amount, bonderFee);\\n    }\\n\\n    /**\\n     * @dev Refunds the Bonder's stake from a bonded withdrawal and counts that withdrawal against\\n     * its TransferRoot.\\n     * @param bonder The Bonder of the withdrawal\\n     * @param transferId The Transfer's unique identifier\\n     * @param rootHash The Merkle root of the TransferRoot\\n     * @param transferRootTotalAmount The total amount being transferred in a TransferRoot\\n     * @param transferIdTreeIndex The index of the transferId in the Merkle tree\\n     * @param siblings The siblings of the transferId in the Merkle tree\\n     * @param totalLeaves The total number of leaves in the Merkle tree\\n     */\\n    function settleBondedWithdrawal(\\n        address bonder,\\n        bytes32 transferId,\\n        bytes32 rootHash,\\n        uint256 transferRootTotalAmount,\\n        uint256 transferIdTreeIndex,\\n        bytes32[] calldata siblings,\\n        uint256 totalLeaves\\n    )\\n        external\\n    {\\n        require(\\n            rootHash.verify(\\n                transferId,\\n                transferIdTreeIndex,\\n                siblings,\\n                totalLeaves\\n            )\\n        , \\\"BRG: Invalid transfer proof\\\");\\n        bytes32 transferRootId = getTransferRootId(rootHash, transferRootTotalAmount);\\n\\n        uint256 amount = _bondedWithdrawalAmounts[bonder][transferId];\\n        require(amount > 0, \\\"L2_BRG: transferId has no bond\\\");\\n\\n        _bondedWithdrawalAmounts[bonder][transferId] = 0;\\n        _addToAmountWithdrawn(transferRootId, amount);\\n        _addCredit(bonder, amount);\\n\\n        emit WithdrawalBondSettled(bonder, transferId, rootHash);\\n    }\\n\\n    /**\\n     * @dev Refunds the Bonder for all withdrawals that they bonded in a TransferRoot.\\n     * @param bonder The address of the Bonder being refunded\\n     * @param transferIds All transferIds in the TransferRoot in order\\n     * @param totalAmount The totalAmount of the TransferRoot\\n     */\\n    function settleBondedWithdrawals(\\n        address bonder,\\n        // transferIds _must_ be calldata or it will be mutated by Lib_MerkleTree.getMerkleRoot\\n        bytes32[] calldata transferIds,\\n        uint256 totalAmount\\n    )\\n        external\\n    {\\n        bytes32 rootHash = Lib_MerkleTree.getMerkleRoot(transferIds);\\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\\n\\n        uint256 totalBondsSettled = 0;\\n        for(uint256 i = 0; i < transferIds.length; i++) {\\n            uint256 transferBondAmount = _bondedWithdrawalAmounts[bonder][transferIds[i]];\\n            if (transferBondAmount > 0) {\\n                totalBondsSettled = totalBondsSettled.add(transferBondAmount);\\n                _bondedWithdrawalAmounts[bonder][transferIds[i]] = 0;\\n            }\\n        }\\n\\n        _addToAmountWithdrawn(transferRootId, totalBondsSettled);\\n        _addCredit(bonder, totalBondsSettled);\\n\\n        emit MultipleWithdrawalsSettled(bonder, rootHash, totalBondsSettled);\\n    }\\n\\n    /* ========== External TransferRoot Rescue ========== */\\n\\n    /**\\n     * @dev Allows governance to withdraw the remaining amount from a TransferRoot after the rescue delay has passed.\\n     * @param rootHash the Merkle root of the TransferRoot\\n     * @param originalAmount The TransferRoot's recorded total\\n     * @param recipient The address receiving the remaining balance\\n     */\\n    function rescueTransferRoot(bytes32 rootHash, uint256 originalAmount, address recipient) external onlyGovernance {\\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\\n        TransferRoot memory transferRoot = getTransferRoot(rootHash, originalAmount);\\n\\n        require(transferRoot.createdAt != 0, \\\"BRG: TransferRoot not found\\\");\\n        assert(transferRoot.total == originalAmount);\\n        uint256 rescueDelayEnd = transferRoot.createdAt.add(RESCUE_DELAY);\\n        require(block.timestamp >= rescueDelayEnd, \\\"BRG: TransferRoot cannot be rescued before the Rescue Delay\\\");\\n\\n        uint256 remainingAmount = transferRoot.total.sub(transferRoot.amountWithdrawn);\\n        _addToAmountWithdrawn(transferRootId, remainingAmount);\\n        _transferFromBridge(recipient, remainingAmount);\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    function _markTransferSpent(bytes32 transferId) internal {\\n        require(!_spentTransferIds[transferId], \\\"BRG: The transfer has already been withdrawn\\\");\\n        _spentTransferIds[transferId] = true;\\n    }\\n\\n    function _addToAmountWithdrawn(bytes32 transferRootId, uint256 amount) internal {\\n        TransferRoot storage transferRoot = _transferRoots[transferRootId];\\n        require(transferRoot.total > 0, \\\"BRG: Transfer root not found\\\");\\n\\n        uint256 newAmountWithdrawn = transferRoot.amountWithdrawn.add(amount);\\n        require(newAmountWithdrawn <= transferRoot.total, \\\"BRG: Withdrawal exceeds TransferRoot total\\\");\\n\\n        transferRoot.amountWithdrawn = newAmountWithdrawn;\\n    }\\n\\n    function _setTransferRoot(bytes32 rootHash, uint256 totalAmount) internal {\\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\\n        require(_transferRoots[transferRootId].total == 0, \\\"BRG: Transfer root already set\\\");\\n        require(totalAmount > 0, \\\"BRG: Cannot set TransferRoot totalAmount of 0\\\");\\n\\n        _transferRoots[transferRootId] = TransferRoot(totalAmount, 0, block.timestamp);\\n\\n        emit TransferRootSet(rootHash, totalAmount);\\n    }\\n\\n    function _bondWithdrawal(bytes32 transferId, uint256 amount) internal {\\n        require(_bondedWithdrawalAmounts[msg.sender][transferId] == 0, \\\"BRG: Withdrawal has already been bonded\\\");\\n        _addDebit(msg.sender, amount);\\n        _bondedWithdrawalAmounts[msg.sender][transferId] = amount;\\n\\n        emit WithdrawalBonded(transferId, amount);\\n    }\\n\\n    /* ========== Private Functions ========== */\\n\\n    /// @dev Completes the Transfer, distributes the Bonder fee and marks the Transfer as spent.\\n    function _fulfillWithdraw(\\n        bytes32 transferId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bonderFee\\n    ) private {\\n        _markTransferSpent(transferId);\\n        _transferFromBridge(recipient, amount.sub(bonderFee));\\n        if (bonderFee > 0) {\\n            _transferFromBridge(msg.sender, bonderFee);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridges/HopBridgeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Hop Bridge Tokens or \\\"hTokens\\\" are layer-2 tokens that represent a deposit in the L1_Bridge\\n * contract. Each Hop Bridge Token is a regular ERC20 that can be minted and burned by the L2_Bridge\\n * that owns it.\\n */\\n\\ncontract HopBridgeToken is ERC20, Ownable {\\n\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    )\\n        public\\n        ERC20(name, symbol)\\n    {\\n        _setupDecimals(decimals);\\n    }\\n\\n    /**\\n     * @dev Mint new hToken for the account\\n     * @param account The account being minted for\\n     * @param amount The amount being minted\\n     */\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev Burn hToken from the account\\n     * @param account The account being burned from\\n     * @param amount The amount being burned\\n     */\\n    function burn(address account, uint256 amount) external onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Lib_MerkleTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_MerkleTree\\n * @author River Keefer\\n */\\nlibrary Lib_MerkleTree {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Calculates a merkle root for a list of 32-byte leaf hashes.  WARNING: If the number\\n     * of leaves passed in is not a power of two, it pads out the tree with zero hashes.\\n     * If you do not know the original length of elements for the tree you are verifying,\\n     * then this may allow empty leaves past _elements.length to pass a verification check down the line.\\n     * Note that the _elements argument is modified, therefore it must not be used again afterwards\\n     * @param _elements Array of hashes from which to generate a merkle root.\\n     * @return Merkle root of the leaves, with zero hashes for non-powers-of-two (see above).\\n     */\\n    function getMerkleRoot(\\n        bytes32[] memory _elements\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _elements.length > 0,\\n            \\\"Lib_MerkleTree: Must provide at least one leaf hash.\\\"\\n        );\\n\\n        if (_elements.length == 1) {\\n            return _elements[0];\\n        }\\n\\n        uint256[16] memory defaults = [\\n            0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563,\\n            0x633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d,\\n            0x890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d,\\n            0x3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd8,\\n            0xecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da,\\n            0xdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da5,\\n            0x617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d7,\\n            0x292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead,\\n            0xe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e10,\\n            0x7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f82,\\n            0xe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e83636516,\\n            0x3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c,\\n            0xad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e,\\n            0xa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab,\\n            0x4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c862,\\n            0x2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf10\\n        ];\\n\\n        // Reserve memory space for our hashes.\\n        bytes memory buf = new bytes(64);\\n\\n        // We'll need to keep track of left and right siblings.\\n        bytes32 leftSibling;\\n        bytes32 rightSibling;\\n\\n        // Number of non-empty nodes at the current depth.\\n        uint256 rowSize = _elements.length;\\n\\n        // Current depth, counting from 0 at the leaves\\n        uint256 depth = 0;\\n\\n        // Common sub-expressions\\n        uint256 halfRowSize;         // rowSize / 2\\n        bool rowSizeIsOdd;           // rowSize % 2 == 1\\n\\n        while (rowSize > 1) {\\n            halfRowSize = rowSize / 2;\\n            rowSizeIsOdd = rowSize % 2 == 1;\\n\\n            for (uint256 i = 0; i < halfRowSize; i++) {\\n                leftSibling  = _elements[(2 * i)    ];\\n                rightSibling = _elements[(2 * i) + 1];\\n                assembly {\\n                    mstore(add(buf, 32), leftSibling )\\n                    mstore(add(buf, 64), rightSibling)\\n                }\\n\\n                _elements[i] = keccak256(buf);\\n            }\\n\\n            if (rowSizeIsOdd) {\\n                leftSibling  = _elements[rowSize - 1];\\n                rightSibling = bytes32(defaults[depth]);\\n                assembly {\\n                    mstore(add(buf, 32), leftSibling)\\n                    mstore(add(buf, 64), rightSibling)\\n                }\\n\\n                _elements[halfRowSize] = keccak256(buf);\\n            }\\n\\n            rowSize = halfRowSize + (rowSizeIsOdd ? 1 : 0);\\n            depth++;\\n        }\\n\\n        return _elements[0];\\n    }\\n\\n    /**\\n     * Verifies a merkle branch for the given leaf hash.  Assumes the original length\\n     * of leaves generated is a known, correct input, and does not return true for indices\\n     * extending past that index (even if _siblings would be otherwise valid.)\\n     * @param _root The Merkle root to verify against.\\n     * @param _leaf The leaf hash to verify inclusion of.\\n     * @param _index The index in the tree of this leaf.\\n     * @param _siblings Array of sibline nodes in the inclusion proof, starting from depth 0 (bottom of the tree).\\n     * @param _totalLeaves The total number of leaves originally passed into.\\n     * @return Whether or not the merkle branch and leaf passes verification.\\n     */\\n    function verify(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        uint256 _index,\\n        bytes32[] memory _siblings,\\n        uint256 _totalLeaves\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _totalLeaves > 0,\\n            \\\"Lib_MerkleTree: Total leaves must be greater than zero.\\\"\\n        );\\n\\n        require(\\n            _index < _totalLeaves,\\n            \\\"Lib_MerkleTree: Index out of bounds.\\\"\\n        );\\n\\n        require(\\n            _siblings.length == _ceilLog2(_totalLeaves),\\n            \\\"Lib_MerkleTree: Total siblings does not correctly correspond to total leaves.\\\"\\n        );\\n\\n        bytes32 computedRoot = _leaf;\\n\\n        for (uint256 i = 0; i < _siblings.length; i++) {\\n            if ((_index & 1) == 1) {\\n                computedRoot = keccak256(\\n                    abi.encodePacked(\\n                        _siblings[i],\\n                        computedRoot\\n                    )\\n                );\\n            } else {\\n                computedRoot = keccak256(\\n                    abi.encodePacked(\\n                        computedRoot,\\n                        _siblings[i]\\n                    )\\n                );\\n            }\\n\\n            _index >>= 1;\\n        }\\n\\n        return _root == computedRoot;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Calculates the integer ceiling of the log base 2 of an input.\\n     * @param _in Unsigned input to calculate the log.\\n     * @return ceil(log_base_2(_in))\\n     */\\n    function _ceilLog2(\\n        uint256 _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        require(\\n            _in > 0,\\n            \\\"Lib_MerkleTree: Cannot compute ceil(log_2) of 0.\\\"\\n        );\\n\\n        if (_in == 1) {\\n            return 0;\\n        }\\n\\n        // Find the highest set bit (will be floor(log_2)).\\n        // Borrowed with <3 from https://github.com/ethereum/solidity-examples\\n        uint256 val = _in;\\n        uint256 highest = 0;\\n        for (uint256 i = 128; i >= 1; i >>= 1) {\\n            if (val & (uint(1) << i) - 1 << i != 0) {\\n                highest += i;\\n                val >>= i;\\n            }\\n        }\\n\\n        // Increment by one if this is not a perfect logarithm.\\n        if ((uint(1) << highest) != _in) {\\n            highest += 1;\\n        }\\n\\n        return highest;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridges/Accounting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @dev Accounting is an abstract contract that encapsulates the most critical logic in the Hop contracts.\\n * The accounting system works by using two balances that can only increase `_credit` and `_debit`.\\n * A bonder's available balance is the total credit minus the total debit. The contract exposes\\n * two external functions that allows a bonder to stake and unstake and exposes two internal\\n * functions to its child contracts that allow the child contract to add to the credit \\n * and debit balance. In addition, child contracts can override `_additionalDebit` to account\\n * for any additional debit balance in an alternative way. Lastly, it exposes a modifier,\\n * `requirePositiveBalance`, that can be used by child contracts to ensure the bonder does not\\n * use more than its available stake.\\n */\\n\\nabstract contract Accounting is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    mapping(address => bool) private _isBonder;\\n\\n    mapping(address => uint256) private _credit;\\n    mapping(address => uint256) private _debit;\\n\\n    event Stake (\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    event Unstake (\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    event BonderAdded (\\n        address indexed newBonder\\n    );\\n\\n    event BonderRemoved (\\n        address indexed previousBonder\\n    );\\n\\n    /* ========== Modifiers ========== */\\n\\n    modifier onlyBonder {\\n        require(_isBonder[msg.sender], \\\"ACT: Caller is not bonder\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance {\\n        _requireIsGovernance();\\n        _;\\n    }\\n\\n    /// @dev Used by parent contract to ensure that the Bonder is solvent at the end of the transaction.\\n    modifier requirePositiveBalance {\\n        _;\\n        require(getCredit(msg.sender) >= getDebitAndAdditionalDebit(msg.sender), \\\"ACT: Not enough available credit\\\");\\n    }\\n\\n    /// @dev Sets the Bonder addresses\\n    constructor(address[] memory bonders) public {\\n        for (uint256 i = 0; i < bonders.length; i++) {\\n            require(_isBonder[bonders[i]] == false, \\\"ACT: Cannot add duplicate bonder\\\");\\n            _isBonder[bonders[i]] = true;\\n            emit BonderAdded(bonders[i]);\\n        }\\n    }\\n\\n    /* ========== Virtual functions ========== */\\n    /**\\n     * @dev The following functions are overridden in L1_Bridge and L2_Bridge\\n     */\\n    function _transferFromBridge(address recipient, uint256 amount) internal virtual;\\n    function _transferToBridge(address from, uint256 amount) internal virtual;\\n    function _requireIsGovernance() internal virtual;\\n\\n    /**\\n     * @dev This function can be optionally overridden by a parent contract to track any additional\\n     * debit balance in an alternative way.\\n     */\\n    function _additionalDebit(address /*bonder*/) internal view virtual returns (uint256) {\\n        this; // Silence state mutability warning without generating any additional byte code\\n        return 0;\\n    }\\n\\n    /* ========== Public/external getters ========== */\\n\\n    /**\\n     * @dev Check if address is a Bonder\\n     * @param maybeBonder The address being checked\\n     * @return true if address is a Bonder\\n     */\\n    function getIsBonder(address maybeBonder) public view returns (bool) {\\n        return _isBonder[maybeBonder];\\n    }\\n\\n    /**\\n     * @dev Get the Bonder's credit balance\\n     * @param bonder The owner of the credit balance being checked\\n     * @return The credit balance for the Bonder\\n     */\\n    function getCredit(address bonder) public view returns (uint256) {\\n        return _credit[bonder];\\n    }\\n\\n    /**\\n     * @dev Gets the debit balance tracked by `_debit` and does not include `_additionalDebit()`\\n     * @param bonder The owner of the debit balance being checked\\n     * @return The debit amount for the Bonder\\n     */\\n    function getRawDebit(address bonder) external view returns (uint256) {\\n        return _debit[bonder];\\n    }\\n\\n    /**\\n     * @dev Get the Bonder's total debit\\n     * @param bonder The owner of the debit balance being checked\\n     * @return The Bonder's total debit balance\\n     */\\n    function getDebitAndAdditionalDebit(address bonder) public view returns (uint256) {\\n        return _debit[bonder].add(_additionalDebit(bonder));\\n    }\\n\\n    /* ========== Bonder external functions ========== */\\n\\n    /** \\n     * @dev Allows the Bonder to deposit tokens and increase its credit balance\\n     * @param bonder The address being staked on\\n     * @param amount The amount being staked\\n     */\\n    function stake(address bonder, uint256 amount) external payable nonReentrant {\\n        require(_isBonder[bonder] == true, \\\"ACT: Address is not bonder\\\");\\n        _transferToBridge(msg.sender, amount);\\n        _addCredit(bonder, amount);\\n\\n        emit Stake(bonder, amount);\\n    }\\n\\n    /**\\n     * @dev Allows the caller to withdraw any available balance and add to their debit balance\\n     * @param amount The amount being unstaked\\n     */\\n    function unstake(uint256 amount) external requirePositiveBalance nonReentrant {\\n        _addDebit(msg.sender, amount);\\n        _transferFromBridge(msg.sender, amount);\\n\\n        emit Unstake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Add Bonder to allowlist\\n     * @param bonder The address being added as a Bonder\\n     */\\n    function addBonder(address bonder) external onlyGovernance {\\n        require(_isBonder[bonder] == false, \\\"ACT: Address is already bonder\\\");\\n        _isBonder[bonder] = true;\\n\\n        emit BonderAdded(bonder);\\n    }\\n\\n    /**\\n     * @dev Remove Bonder from allowlist\\n     * @param bonder The address being removed as a Bonder\\n     */\\n    function removeBonder(address bonder) external onlyGovernance {\\n        require(_isBonder[bonder] == true, \\\"ACT: Address is not bonder\\\");\\n        _isBonder[bonder] = false;\\n\\n        emit BonderRemoved(bonder);\\n    }\\n\\n    /* ========== Internal functions ========== */\\n\\n    function _addCredit(address bonder, uint256 amount) internal {\\n        _credit[bonder] = _credit[bonder].add(amount);\\n    }\\n\\n    function _addDebit(address bonder, uint256 amount) internal {\\n        _debit[bonder] = _debit[bonder].add(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract I_L2_PolygonMessengerProxy\",\"name\":\"_messengerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Governance\",\"type\":\"address\"},{\"internalType\":\"contract HopBridgeToken\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"activeChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"bonders\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBonder\",\"type\":\"address\"}],\"name\":\"BonderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBonder\",\"type\":\"address\"}],\"name\":\"BonderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"L1_BridgeMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBondsSettled\",\"type\":\"uint256\"}],\"name\":\"MultipleWithdrawalsSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"name\":\"TransferFromL1Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TransferSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rootCommittedAt\",\"type\":\"uint256\"}],\"name\":\"TransfersCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalBondSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeChainIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"addActiveChainIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"addBonder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ammWrapper\",\"outputs\":[{\"internalType\":\"contract I_L2_AmmWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"}],\"name\":\"bondWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"bondWithdrawalAndDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"commitTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"getBondedWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getDebitAndAdditionalDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeBonder\",\"type\":\"address\"}],\"name\":\"getIsBonder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTransferNonce\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getRawDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"getTransferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"getTransferRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.TransferRoot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"getTransferRootId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hToken\",\"outputs\":[{\"internalType\":\"contract HopBridgeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"isTransferIdSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastCommitTimeForChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPendingTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messengerProxy\",\"outputs\":[{\"internalType\":\"contract I_L2_PolygonMessengerProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBonderBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBonderFeeAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumForceCommitDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingAmountForChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTransferIdsForChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"removeActiveChainIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"removeBonder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract I_L2_AmmWrapper\",\"name\":\"_ammWrapper\",\"type\":\"address\"}],\"name\":\"setAmmWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setHopBridgeTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"}],\"name\":\"setL1BridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeCaller\",\"type\":\"address\"}],\"name\":\"setL1BridgeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Governance\",\"type\":\"address\"}],\"name\":\"setL1Governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPendingTransfers\",\"type\":\"uint256\"}],\"name\":\"setMaxPendingTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract I_L2_PolygonMessengerProxy\",\"name\":\"_messengerProxy\",\"type\":\"address\"}],\"name\":\"setMessengerProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBonderBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBonderFeeAbsolute\",\"type\":\"uint256\"}],\"name\":\"setMinimumBonderFeeRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumForceCommitDelay\",\"type\":\"uint256\"}],\"name\":\"setMinimumForceCommitDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"setTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferRootTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferIdTreeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"}],\"name\":\"settleBondedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"transferIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"settleBondedWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferNonceIncrementer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferRootTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferIdTreeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "L2_PolygonBridge", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "50000", "ConstructorArguments": "000000000000000000000000f8ef312f977fd610369a6d538bf3c2817bd3193c000000000000000000000000f56e305024b195383245a075737d16dbdb8487fb000000000000000000000000b8901acb165ed027e32754e0ffe830802919727f0000000000000000000000003d4cc8a61c7528fd86c55cfe061a78dcba48edd100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a6303e6b99d451df3566068ebb110708335658f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}