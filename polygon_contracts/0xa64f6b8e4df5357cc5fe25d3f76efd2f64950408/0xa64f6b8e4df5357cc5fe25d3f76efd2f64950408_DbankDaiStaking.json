{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Import necessary libraries\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract DbankDaiStaking {\r\n    IERC20 public daiToken;\r\n    address public owner;\r\n    \r\n    struct Staking {\r\n        uint id;               // Unique staking ID\r\n        uint amount;           // Staked amount\r\n        uint timestamp;        // Timestamp when staked\r\n        uint stakeType;\r\n        uint totalRoi;\r\n        uint noOfdays;\r\n        uint Lasttimestamp;\r\n        bool blocked;\r\n    }\r\n\r\n    struct ROITXN {\r\n        uint stakeid;             \r\n        uint stakeamount;   \r\n        uint roiamount;      \r\n        uint timestamp; \r\n    }\r\n\r\n    struct User {\r\n        uint id;\r\n        string referralCode;\r\n        address referrer;\r\n        uint8 partnercount;\r\n        uint[] levelIncome;\r\n        uint[] levelWiseUsers;\r\n        uint totalStaked;\r\n        uint totalbalance;\r\n        uint balance;        \r\n        address[] partners;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(string => address) public referralCodeToAddress;\r\n    mapping(address => Staking[]) public userStakingTransactions;\r\n    mapping(address => ROITXN[]) public ROItransaction;\r\n    mapping(address => uint256) public _amountWithdrawn;\r\n    uint public lastUserId = 2;\r\n    uint public lastStakeId = 0;\r\n    uint8[9] private getLevelPercentage = [0,10,7,6,5,4,3,2,1];\r\n    \r\n    event UserRegistered(address indexed user, address indexed referrer, uint userId);\r\n    event Stake(address indexed user, uint amount);\r\n    event Withdraw(address indexed account, uint256 value);\r\n    modifier onlyOwner(){\r\n     require(msg.sender == owner, \"Sender is not the owner.\");\r\n     _;\r\n    }\r\n    \r\n    constructor(address _daiToken,string memory referralCode) {\r\n        daiToken = IERC20(_daiToken);\r\n        owner = msg.sender;\r\n        \r\n        // Create a default user\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referralCode: referralCode,\r\n            partnercount: 0,\r\n            referrer: address(0),\r\n            levelIncome: new uint[](8),\r\n            levelWiseUsers: new uint[](8),\r\n            totalStaked: 0,\r\n            totalbalance:0,\r\n            balance:0,\r\n            partners: new address[](0)\r\n        });\r\n        users[owner] = user;\r\n\r\n        idToAddress[1] = msg.sender;\r\n        referralCodeToAddress[referralCode] = msg.sender;\r\n        \r\n        emit UserRegistered(msg.sender, address(0), 1);\r\n    }\r\n    \r\n    // Register a user with a referral link\r\n    function registerUser(address referrer) external {   \r\n        require(users[msg.sender].id == 0, \"User already registered\");\r\n        require(users[referrer].id > 0, \"Referrer does not exist\");\r\n             \r\n        string memory referralCode = generateRandomString(10);\r\n\r\n        users[msg.sender] = User({\r\n            id: lastUserId,\r\n            referralCode: referralCode,\r\n            partnercount : 0,\r\n            referrer: referrer,\r\n            levelIncome: new uint[](8),\r\n            levelWiseUsers: new uint[](8),\r\n            totalStaked: 0,\r\n            totalbalance:0,\r\n            balance:0,\r\n            partners : new address[](0)\r\n        });\r\n\r\n        User storage ref = users[referrer];\r\n        ref.partners.push(msg.sender);\r\n        ref.partnercount++;\r\n\r\n        idToAddress[lastUserId] = msg.sender;\r\n        referralCodeToAddress[referralCode] = msg.sender;\r\n\r\n        updateUplinesCount(msg.sender);\r\n        \r\n        emit UserRegistered(msg.sender, referrer, lastUserId);\r\n        lastUserId++;\r\n    }\r\n\r\n    \r\n    function generateRandomString(uint256 length) public view returns (string memory) {\r\n        require(length > 0, \"Length must be greater than 0\");\r\n        bytes memory result = new bytes(length);\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, gasleft())));\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 randomValue = uint256(keccak256(abi.encodePacked(seed, i)));\r\n            uint256 index = randomValue % 62; // 26 small letters + 26 capital letters + 10 numbers\r\n\r\n            if (index < 26) {\r\n                // Small letter\r\n                result[i] = bytes1(uint8(97 + uint8(index))); // ASCII code for 'a' is 97\r\n            } else if (index < 52) {\r\n                // Capital letter\r\n                result[i] = bytes1(uint8(65 + uint8(index - 26))); // ASCII code for 'A' is 65\r\n            } else {\r\n                // Number\r\n                result[i] = bytes1(uint8(48 + uint8(index - 52))); // ASCII code for '0' is 48\r\n            }\r\n        }\r\n\r\n        result[0] = bytes1(uint8(65 + uint8(seed % 26))); // Ensure the first character is a capital letter\r\n\r\n        return string(result);\r\n    }\r\n\r\n\r\n    function updateUplinesCount(address userAddress) internal {\r\n        User storage user = users[userAddress];\r\n        address upline = user.referrer;\r\n        \r\n        for (uint i = 1; i <= 8 && upline != address(0); i++) {\r\n            User storage uplineUser = users[upline];\r\n            uplineUser.levelWiseUsers[i - 1] += 1;\r\n            upline = uplineUser.referrer;\r\n        }\r\n    }\r\n    \r\n    // Stake DAI tokens\r\n    function stakeTokens(uint256 amount) external {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(amount >= 10, \"Minimum stake requirement not met.\");\r\n\r\n        daiToken.transferFrom(msg.sender, address(this), amount);\r\n        SaveStaking(msg.sender,amount,1);\r\n        distributeStakingRewards(msg.sender, amount);\r\n    }\r\n\r\n    function SaveStaking(address userAddress, uint256 amount, uint stakeType) internal {\r\n        uint uniqueId = ++lastStakeId;\r\n        // Create a new staking transaction\r\n        Staking memory newStaking = Staking({\r\n            id: uniqueId,\r\n            amount: amount,            \r\n            timestamp: block.timestamp,\r\n            stakeType: stakeType,\r\n            totalRoi:0,\r\n            noOfdays:0,\r\n            Lasttimestamp: block.timestamp,\r\n            blocked : false\r\n        });\r\n\r\n        userStakingTransactions[userAddress].push(newStaking);\r\n\r\n        User storage user = users[userAddress];\r\n        user.totalStaked += amount;\r\n        \r\n        emit Stake(userAddress, amount);\r\n    }\r\n    \r\n    // Distribute staking rewards to uplines\r\n    function distributeStakingRewards(address userAddress, uint amount) internal {\r\n        User storage user = users[userAddress];\r\n        address upline = user.referrer;\r\n        \r\n        for (uint i = 1; i <= 8 && upline != address(0); i++) {\r\n            User storage uplineUser = users[upline];\r\n            uint levelReward = (amount * getLevelPercentage[i]) / 100;\r\n            uplineUser.levelIncome[i - 1] += levelReward;\r\n\r\n            // Reward stake\r\n            SaveStaking(upline,levelReward,2);\r\n\r\n            upline = uplineUser.referrer;\r\n        }\r\n    }\r\n\r\n    function getUserStakingTransactions(address userAddress) public view returns (Staking[] memory) {\r\n        return userStakingTransactions[userAddress];    \r\n    }\r\n\r\n    function getUserROITransactions(address userAddress) public view returns (ROITXN[] memory) {\r\n        return ROItransaction[userAddress];    \r\n    }\r\n\r\n    function levelIncome(address userAddress) public view returns(uint[] memory) {\r\n        return (users[userAddress].levelIncome);\r\n    }\r\n\r\n    function levelWiseUsers(address userAddress) public view returns(uint[] memory) {\r\n        return (users[userAddress].levelWiseUsers);\r\n    }\r\n\r\n    function partners(address userAddress) public view returns(address[] memory) {\r\n        return (users[userAddress].partners);\r\n    }\r\n\r\n    function calculateStakingBalance(address userAddress) public {\r\n        require(isUserExists(userAddress), \"user is not exists. Register first.\");\r\n        address userAdd = userAddress;      \r\n        Staking[] storage stakings = userStakingTransactions[userAdd];\r\n        uint userBalance = users[userAdd].balance;\r\n        uint totalbalance = users[userAdd].totalbalance;\r\n\r\n        for (uint i = 0; i < stakings.length; i++) {\r\n            if (!stakings[i].blocked) {\r\n                uint currentTime = block.timestamp;\r\n                uint Lasttimestamp = stakings[i].Lasttimestamp;\r\n\r\n                if (currentTime > Lasttimestamp) {\r\n                    uint timeDifference = (currentTime - Lasttimestamp)/86400;\r\n                    if(timeDifference>0){\r\n                      uint dailyROI = (stakings[i].amount * 3) / 10000; // 0.3%\r\n                      uint dailyROITotal = dailyROI * timeDifference;\r\n                      uint amount3X = stakings[i].amount * 3;\r\n\r\n                      if (amount3X >= stakings[i].totalRoi + dailyROITotal) {\r\n                        stakings[i].totalRoi += dailyROITotal;\r\n                        stakings[i].noOfdays += timeDifference;\r\n                        stakings[i].Lasttimestamp = currentTime;\r\n                        userBalance += dailyROITotal;\r\n                        totalbalance += dailyROITotal;\r\n   \r\n                        // Create a new staking transaction\r\n                        ROITXN memory roitxn = ROITXN({\r\n                            stakeid: stakings[i].id,\r\n                            stakeamount: stakings[i].amount,   \r\n                            roiamount: dailyROITotal,         \r\n                            timestamp: block.timestamp\r\n                        });\r\n                        ROItransaction[userAddress].push(roitxn);\r\n\r\n                      } else {\r\n                        uint amts = amount3X - (stakings[i].totalRoi + dailyROITotal);\r\n                        stakings[i].totalRoi += amts;\r\n                        userBalance += amts;\r\n                        totalbalance += amts;\r\n                        stakings[i].blocked = true;\r\n                        // Create a new staking transaction\r\n                        ROITXN memory roitxn = ROITXN({\r\n                            stakeid: stakings[i].id,\r\n                            stakeamount: stakings[i].amount,   \r\n                            roiamount: amts,         \r\n                            timestamp: block.timestamp\r\n                        });\r\n                        ROItransaction[userAddress].push(roitxn);\r\n                     }  \r\n                    }                    \r\n                }\r\n            }\r\n        }\r\n        \r\n        userStakingTransactions[userAdd] = stakings;\r\n        users[userAdd].totalbalance = totalbalance;\r\n        users[userAdd].balance = userBalance;\r\n    }\r\n\r\n    function restake(uint256 amount) public {\r\n      require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n      require(amount > 0, \"Amount mueszst be greater than 0\");\r\n      require(amount >= 10, \"Minimum stake requirement not met.\");\r\n      require(amount <= users[msg.sender].balance, \"Low Balance DAI.\");\r\n\r\n      SaveStaking(msg.sender,amount,3);\r\n      users[msg.sender].balance -= amount;\r\n      distributeStakingRewards(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n\r\n      /** sender balance check **/\r\n      require(amount <= users[msg.sender].balance, \"Low Balance DAI.\");\r\n      /** update user withdraw balance **/\r\n      _amountWithdrawn[msg.sender] += amount;\r\n      /** update balance of the user after withdraw **/\r\n      users[msg.sender].balance -= amount;\r\n      daiToken.transfer(msg.sender, amount);\r\n      emit Withdraw(msg.sender, amount);\r\n\r\n    }\r\n\r\n    function OwnerWithdraw(address account,uint256 amount) public onlyOwner{\r\n      /** update user withdraw balance **/\r\n      _amountWithdrawn[account] += amount;\r\n      daiToken.transfer(account, amount);\r\n      emit Withdraw(account, amount);\r\n      \r\n    }\r\n\r\n    function getUserBalance(address user) public view returns (uint256) {\r\n        return users[user].balance;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ROItransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_amountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateStakingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"generateRandomString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserROITransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DbankDaiStaking.ROITXN[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakingTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRoi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noOfdays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Lasttimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"internalType\":\"struct DbankDaiStaking.Staking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"levelIncome\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"levelWiseUsers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"referralCodeToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakingTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRoi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noOfdays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Lasttimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"partnercount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalbalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DbankDaiStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a4144747231323467707800000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c514b816bc36c1ee548e00cbb10c797fe95dcbf95a2478347697949c5eeea05b"}