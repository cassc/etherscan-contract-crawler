{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/activity/relation/RActivity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../core/SemanticSBTCore.sol\\\";\\nimport \\\"../../core/SemanticBaseStruct.sol\\\";\\n\\ncontract RActivity is Ownable, Initializable,SemanticSBCore {\\n    using Strings for uint256;\\n    using Strings for address;\\n\\n    struct Signature {\\n        uint8 _v;\\n        bytes32 _r;\\n        bytes32 _s;\\n    }\\n\\n\\n    bytes32 constant MINT_ROLE = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n\\n\\n    mapping(address => mapping(uint256 => mapping(uint256 => bool))) public _ownedSBT;\\n\\n\\n    function isOwnerOf(address account,uint256 _pIndex,uint256 _oIndex)public view returns(bool){\\n        return _ownedSBT[account][_pIndex][_oIndex];\\n    }\\n\\n\\n\\n    function claim(Signature memory signature, uint256 expireTime, uint256 _pIndex,uint256 _oIndex) external{\\n        require(!_ownedSBT[msg.sender][_pIndex][_oIndex], \\\"You have successfully claimed it\\\");\\n        require(expireTime > block.timestamp, \\\"Signature data expired\\\");\\n        string memory originalData = string.concat(\\n                address(this).toHexString(),\\n                msg.sender.toHexString(),\\n                expireTime.toString(),\\n                _pIndex.toString(),\\n                _oIndex.toString());\\n        address signer = _verifyMessage(\\n                keccak256(abi.encodePacked(originalData)),\\n                signature._v,\\n                signature._r,\\n                signature._s\\n            );\\n        require(minters(signer), \\\"SignData exception. Plz join Relation official Discord to open a ticket for support >> https://discord.gg/qmG4AHK6U5\\\");\\n        SubjectPO[] memory subjectPO = new SubjectPO[](1);\\n        subjectPO[0] = SubjectPO(_pIndex, _oIndex);\\n\\n        _mint(msg.sender, 0, new IntPO[](0), new StringPO[](0), new AddressPO[](0),\\n                subjectPO, new BlankNodePO[](0));\\n        _ownedSBT[msg.sender][_pIndex][_oIndex] = true;\\n    }\\n\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *  ISemanticSBT 0xfbafb698\\n     *  ISemanticSBTMetadata 0x58e23bac\\n     *  ISemanticSBTOperator 0x9cd23707\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(SemanticSBCore) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId ||\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\n        interfaceId == type(ISemanticSBT).interfaceId ||\\n        interfaceId == type(ISemanticSBTMetadata).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n\\n\\n\\n    function _verifyMessage(\\n        bytes32 _hashedMessage,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal pure returns (address) {\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(\\n            abi.encodePacked(prefix, _hashedMessage)\\n        );\\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\\n        return signer;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/core/SemanticSBTCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"../interfaces/ISemanticSBTMetadata.sol\\\";\\n\\nimport \\\"../interfaces/ISemanticSBT.sol\\\";\\nimport \\\"./SemanticBaseStruct.sol\\\";\\n\\n\\n/**\\n * @dev Implement ISemanticSBT interface\\n */\\ncontract SemanticSBCore is Ownable, Initializable, ERC165, IERC721Enumerable, ISemanticSBT, ISemanticSBTMetadata {\\n    using Address for address;\\n    using Strings for uint256;\\n    using Strings for uint160;\\n\\n    using Strings for address;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Total number of tokens burned\\n    uint256 private _burnCount;\\n\\n    // Array of all tokens\\n    SPO[] private _tokens;\\n\\n    // Mapping from owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // The operator of mint,burn and add subject\\n    mapping(address => bool) private _minters;\\n\\n    // Default not allow transfer\\n    bool private _transferable;\\n\\n\\n    // Array of all subject\\n    Subject[] private _subjects;\\n\\n    // Mapping from subject to subject index\\n    mapping(uint256 => mapping(string => uint256)) private _subjectIndex;\\n\\n    // Base token URI \\n    string private _baseURI;\\n\\n    // Schema URI\\n    string public schemaURI;\\n\\n\\n    // Mapping from class name to class index\\n    mapping(string => uint256) private _classIndex;\\n    // Array of all class name\\n    string[] private _classNames;\\n\\n    // Mapping from predicate name to predicate index\\n    mapping(string => uint256) private _predicateIndex;\\n    // Array of all Predicate\\n    Predicate[] private _predicates;\\n\\n\\n    // Array of all object value with string type\\n    string[] _stringO;\\n    // Array of all object value with BlankNodeO type \\n    BlankNodeO[] _blankNodeO;\\n\\n    /* ============ Constant Variable ============ */\\n\\n    string  constant TURTLE_LINE_SUFFIX = \\\" ;\\\";\\n    string  constant TURTLE_END_SUFFIX = \\\" . \\\";\\n    string  constant SOUL_CLASS_NAME = \\\"Soul\\\";\\n\\n\\n    string  constant ENTITY_PREFIX = \\\":\\\";\\n    string  constant PROPERTY_PREFIX = \\\"p:\\\";\\n\\n    string  constant CONCATENATION_CHARACTER = \\\"_\\\";\\n    string  constant BLANK_NODE_START_CHARACTER = \\\"[\\\";\\n    string  constant BLANK_NODE_END_CHARACTER = \\\"]\\\";\\n    string  constant BLANK_SPACE = \\\" \\\";\\n\\n    /* ============ Events ============ */\\n    // Add new minter\\n    event EventMinterAdded(address indexed newMinter);\\n\\n    // Remove old minter\\n    event EventMinterRemoved(address indexed oldMinter);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Only minter.\\n     */\\n    modifier onlyMinter() {\\n        require(_minters[msg.sender], \\\"SemanticSBT: must be minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Only allow transfer.\\n     */\\n    modifier onlyTransferable() {\\n        require(_transferable, \\\"SemanticSBT: must transferable\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    constructor() {\\n        // Initialize zero index value\\n        SPO memory _spo = SPO(0, 0, new uint256[](0), new uint256[](0));\\n        Subject memory _subject = Subject(\\\"\\\", 0);\\n        _tokens.push(_spo);\\n        _subjects.push(_subject);\\n\\n        _classNames.push(\\\"\\\");\\n        _predicates.push(Predicate(\\\"\\\", FieldType.INT));\\n    }\\n\\n    function initialize(\\n        address minter,\\n        string memory name_,\\n        string memory symbol_,\\n        string memory baseURI_,\\n        string memory schemaURI_,\\n        string[] memory classes_,\\n        Predicate[] memory predicates_\\n    ) public initializer onlyOwner {\\n        require(keccak256(abi.encode(schemaURI_)) != keccak256(abi.encode(\\\"\\\")), \\\"SemanticSBT: schema URI cannot be empty\\\");\\n        require(predicates_.length > 0, \\\"SemanticSBT: predicate can not be empty\\\");\\n\\n        _minters[minter] = true;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _baseURI = baseURI_;\\n        schemaURI = schemaURI_;\\n\\n        _addClass(classes_);\\n        _addPredicate(predicates_);\\n        emit EventMinterAdded(minter);\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *  ISemanticSBT 0xfbafb698\\n     *  ISemanticSBTMetadata 0x58e23bac\\n     *  ISemanticSBTOperator 0x9cd23707\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId ||\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\n        interfaceId == type(ISemanticSBT).interfaceId ||\\n        interfaceId == type(ISemanticSBTMetadata).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Is this address a minters.\\n     */\\n    function minters(address account) public view returns (bool) {\\n        return _minters[account];\\n    }\\n\\n    /**\\n     * @dev See {ISemanticSBTOperator-transferable}.\\n     * Is this contract allow nft transfer.\\n     */\\n    function transferable() public view returns (bool) {\\n        return _transferable;\\n    }\\n\\n    /**\\n     * @dev Returns the base URI for nft.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n\\n    /**\\n      * @dev Get class index\\n     */\\n    function classIndex(string memory className_) public view returns (uint256 classIndex_) {\\n        classIndex_ = _classIndex[className_];\\n    }\\n\\n    /**\\n      * @dev Get class name\\n     */\\n    function className(uint256 cIndex) public view returns (string memory name_) {\\n        require(cIndex > 0 && cIndex < _classNames.length, \\\"SemanticSBT: class not exist\\\");\\n        name_ = _classNames[cIndex];\\n    }\\n\\n    /**\\n     * @dev Get predicate index\\n     */\\n    function predicateIndex(string memory predicateName_) public view returns (uint256 predicateIndex_) {\\n        predicateIndex_ = _predicateIndex[predicateName_];\\n    }\\n\\n    /**\\n     * @dev Get predicate\\n     */\\n    function predicate(uint256 pIndex) public view returns (string memory name_, FieldType fieldType) {\\n        require(pIndex > 0 && pIndex < _predicates.length, \\\"SemanticSBT: predicate not exist\\\");\\n\\n        Predicate memory predicate_ = _predicates[pIndex];\\n        name_ = predicate_.name;\\n        fieldType = predicate_.fieldType;\\n    }\\n\\n    /**\\n     * @dev Get subject index\\n     */\\n    function subjectIndex(string memory subjectValue, string memory className_) public view returns (uint256){\\n        uint256 sIndex = _subjectIndex[_classIndex[className_]][subjectValue];\\n        require(sIndex > 0, \\\"SemanticSBT: does not exist\\\");\\n        return sIndex;\\n    }\\n\\n    /**\\n     * @dev Get subject\\n     */\\n    function subject(uint256 index) public view returns (string memory subjectValue, string memory className_){\\n        require(index > 0 && index < _subjects.length, \\\"SemanticSBT: does not exist\\\");\\n        subjectValue = _subjects[index].value;\\n        className_ = _classNames[_subjects[index].cIndex];\\n    }\\n\\n    /**\\n     * @dev Get token rdf\\n     */\\n    function rdfOf(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"SemanticSBT: SemanticSBT does not exist\\\");\\n        return _buildRDF(_tokens[tokenId]);\\n    }\\n\\n    /**\\n     * @dev Get  number of minted\\n     */\\n    function getMinted() public view returns (uint256) {\\n        return _tokens.length - 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return getMinted() - _burnCount;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This is implementation is O(n) and should not be\\n     * called by other contracts.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        uint256 currentIndex = 0;\\n        for (uint256 i = 1; i < _tokens.length; i++) {\\n            if (address(_tokens[i].owner) == owner) {\\n                if (currentIndex == index) {\\n                    return i;\\n                }\\n                currentIndex += 1;\\n            }\\n        }\\n        revert(\\\"ERC721Enumerable: owner index out of bounds\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This is implementation is O(n) and should not be\\n     * called by other contracts.\\n     */\\n    function tokenByIndex(uint256 index)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        uint256 currentIndex = 0;\\n        for (uint256 i = 1; i < _tokens.length; i++) {\\n            if (_tokens[i].owner != 0) {\\n                if (currentIndex == index) {\\n                    return i;\\n                }\\n                currentIndex += 1;\\n            }\\n        }\\n        revert(\\\"ERC721Enumerable: token index out of bounds\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return address(_tokens[tokenId].owner);\\n    }\\n\\n    /**\\n     * @dev See {ISemanticSBT-isOwnerOf}.\\n     */\\n    function isOwnerOf(address account, uint256 id)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        address owner = ownerOf(id);\\n        return owner == account;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n        return\\n        bytes(_baseURI).length > 0\\n        ? string(abi.encodePacked(_baseURI, tokenId.toString(), \\\".json\\\"))\\n        : \\\"\\\";\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n    public\\n    override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    override\\n    returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public onlyTransferable override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public onlyTransferable override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public onlyTransferable override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens  existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId > 0 && tokenId <= getMinted() && _tokens[tokenId].owner != 0x0;\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n        getApproved(tokenId) == spender ||\\n        isApprovedForAll(owner, spender));\\n    }\\n\\n\\n\\n    /**\\n     * @dev add class\\n     * @param classList the class array\\n     */\\n    function _addClass(string[] memory classList) internal {\\n        for (uint256 i = 0; i < classList.length; i++) {\\n            string memory className_ = classList[i];\\n            require(\\n                keccak256(abi.encode(className_)) != keccak256(abi.encode(\\\"\\\")),\\n                \\\"SemanticSBT: Class cannot be empty\\\"\\n            );\\n            require(_classIndex[className_] == 0, \\\"SemanticSBT: already added\\\");\\n            _classNames.push(className_);\\n            _classIndex[className_] = _classNames.length - 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev add predicate\\n     * @param predicates the predicate array\\n     */\\n    function _addPredicate(Predicate[] memory predicates) internal {\\n        for (uint256 i = 0; i < predicates.length; i++) {\\n            Predicate memory predicate_ = predicates[i];\\n            require(\\n                keccak256(abi.encode(predicate_.name)) !=\\n                keccak256(abi.encode(\\\"\\\")),\\n                \\\"SemanticSBT: predicate cannot be empty\\\"\\n            );\\n            require(_predicateIndex[predicate_.name] == 0, \\\"SemanticSBT: already added\\\");\\n            _predicates.push(predicate_);\\n            _predicateIndex[predicate_.name] = _predicates.length - 1;\\n        }\\n    }\\n\\n\\n    function _addIntPO(uint256[] storage pIndex, uint256[] storage oIndex, IntPO[] memory intPOList) internal {\\n        for (uint256 i = 0; i < intPOList.length; i++) {\\n            IntPO memory intPO = intPOList[i];\\n            _checkPredicate(intPO.pIndex, FieldType.INT);\\n            pIndex.push(intPO.pIndex);\\n            oIndex.push(intPO.o);\\n        }\\n    }\\n\\n    function _addStringPO(uint256[] storage pIndex, uint256[] storage oIndex, StringPO[] memory stringPOList) internal {\\n        for (uint256 i = 0; i < stringPOList.length; i++) {\\n            StringPO memory stringPO = stringPOList[i];\\n            _checkPredicate(stringPO.pIndex, FieldType.STRING);\\n            uint256 _oIndex = _stringO.length;\\n            _stringO.push(stringPO.o);\\n            pIndex.push(stringPO.pIndex);\\n            oIndex.push(_oIndex);\\n        }\\n    }\\n\\n    function _addAddressPO(uint256[] storage pIndex, uint256[] storage oIndex, AddressPO[] memory addressPOList) internal {\\n        for (uint256 i = 0; i < addressPOList.length; i++) {\\n            AddressPO memory addressPO = addressPOList[i];\\n            _checkPredicate(addressPO.pIndex, FieldType.ADDRESS);\\n            pIndex.push(addressPO.pIndex);\\n            oIndex.push(uint160(addressPO.o));\\n        }\\n    }\\n\\n    function _addSubjectPO(uint256[] storage pIndex, uint256[] storage oIndex, SubjectPO[] memory subjectPOList) internal {\\n        for (uint256 i = 0; i < subjectPOList.length; i++) {\\n            SubjectPO memory subjectPO = subjectPOList[i];\\n            _checkPredicate(subjectPO.pIndex, FieldType.SUBJECT);\\n            require(subjectPO.oIndex > 0 && subjectPO.oIndex < _subjects.length, \\\"SemanticSBT: subject not exist\\\");\\n            pIndex.push(subjectPO.pIndex);\\n            oIndex.push(subjectPO.oIndex);\\n        }\\n    }\\n\\n    function _addBlankNodePO(uint256[] storage pIndex, uint256[] storage oIndex, BlankNodePO[] memory blankNodePOList) internal {\\n        for (uint256 i = 0; i < blankNodePOList.length; i++) {\\n            BlankNodePO memory blankNodePO = blankNodePOList[i];\\n            require(blankNodePO.pIndex < _predicates.length, \\\"SemanticSBT: predicate not exist\\\");\\n\\n            uint256 _blankNodeOIndex = _blankNodeO.length;\\n            _blankNodeO.push(BlankNodeO(new uint256[](0), new uint256[](0)));\\n            uint256[] storage blankNodePIndex = _blankNodeO[_blankNodeOIndex].pIndex;\\n            uint256[] storage blankNodeOIndex = _blankNodeO[_blankNodeOIndex].oIndex;\\n\\n            _addIntPO(blankNodePIndex, blankNodeOIndex, blankNodePO.intO);\\n            _addStringPO(blankNodePIndex, blankNodeOIndex, blankNodePO.stringO);\\n            _addAddressPO(blankNodePIndex, blankNodeOIndex, blankNodePO.addressO);\\n            _addSubjectPO(blankNodePIndex, blankNodeOIndex, blankNodePO.subjectO);\\n\\n            pIndex.push(blankNodePO.pIndex);\\n            oIndex.push(_blankNodeOIndex);\\n        }\\n    }\\n\\n    function _buildRDF(SPO memory spo) internal view returns (string memory _rdf){\\n        _rdf = _buildS(spo);\\n\\n        for (uint256 i = 0; i < spo.pIndex.length; i++) {\\n            Predicate memory p = _predicates[spo.pIndex[i]];\\n            if (FieldType.INT == p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildIntRDF(spo.pIndex[i], spo.oIndex[i]));\\n            } else if (FieldType.STRING == p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildStringRDF(spo.pIndex[i], spo.oIndex[i]));\\n            } else if (FieldType.ADDRESS == p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildAddressRDF(spo.pIndex[i], spo.oIndex[i]));\\n            } else if (FieldType.SUBJECT == p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildSubjectRDF(spo.pIndex[i], spo.oIndex[i]));\\n            } else if (FieldType.BLANKNODE == p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildBlankNodeRDF(spo.pIndex[i], spo.oIndex[i]));\\n            }\\n            string memory suffix = i == spo.pIndex.length - 1 ? \\\".\\\" : \\\";\\\";\\n            _rdf = string.concat(_rdf, suffix);\\n        }\\n    }\\n\\n    function _buildS(SPO memory spo) internal view returns (string memory){\\n        string memory _className = spo.sIndex == 0 ? SOUL_CLASS_NAME : _classNames[spo.sIndex];\\n        string memory subjectValue = spo.sIndex == 0 ? address(spo.owner).toHexString() : _subjects[spo.sIndex].value;\\n        return string.concat(ENTITY_PREFIX, _className, CONCATENATION_CHARACTER, subjectValue, BLANK_SPACE);\\n    }\\n\\n    function _buildIntRDF(uint256 pIndex, uint256 oIndex) internal view returns (string memory){\\n        Predicate memory predicate_ = _predicates[pIndex];\\n        string memory p = string.concat(PROPERTY_PREFIX, predicate_.name);\\n        string memory o = oIndex.toString();\\n        return string.concat(p, BLANK_SPACE, o);\\n    }\\n\\n    function _buildStringRDF(uint256 pIndex, uint256 oIndex) internal view returns (string memory){\\n        Predicate memory predicate_ = _predicates[pIndex];\\n        string memory p = string.concat(PROPERTY_PREFIX, predicate_.name);\\n        string memory o = string.concat('\\\"', _stringO[oIndex], '\\\"');\\n        return string.concat(p, BLANK_SPACE, o);\\n    }\\n\\n    function _buildAddressRDF(uint256 pIndex, uint256 oIndex) internal view returns (string memory){\\n        Predicate memory predicate_ = _predicates[pIndex];\\n        string memory p = string.concat(PROPERTY_PREFIX, predicate_.name);\\n        string memory o = string.concat(ENTITY_PREFIX, SOUL_CLASS_NAME, CONCATENATION_CHARACTER, address(uint160(oIndex)).toHexString());\\n        return string.concat(p, BLANK_SPACE, o);\\n    }\\n\\n\\n    function _buildSubjectRDF(uint256 pIndex, uint256 oIndex) internal view returns (string memory){\\n        Predicate memory predicate_ = _predicates[pIndex];\\n        string memory _className = _classNames[_subjects[oIndex].cIndex];\\n        string memory p = string.concat(PROPERTY_PREFIX, predicate_.name);\\n        string memory o = string.concat(ENTITY_PREFIX, _className, CONCATENATION_CHARACTER, _subjects[oIndex].value);\\n        return string.concat(p, BLANK_SPACE, o);\\n    }\\n\\n\\n    function _buildBlankNodeRDF(uint256 pIndex, uint256 oIndex) internal view returns (string memory){\\n        Predicate memory predicate_ = _predicates[pIndex];\\n        string memory p = string.concat(PROPERTY_PREFIX, predicate_.name);\\n\\n        uint256[] memory blankPList = _blankNodeO[oIndex].pIndex;\\n        uint256[] memory blankOList = _blankNodeO[oIndex].oIndex;\\n\\n        string memory _rdf = \\\"\\\";\\n        for (uint256 i = 0; i < blankPList.length; i++) {\\n            Predicate memory _p = _predicates[blankPList[i]];\\n            if (FieldType.INT == _p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildIntRDF(blankPList[i], blankOList[i]));\\n            } else if (FieldType.STRING == _p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildStringRDF(blankPList[i], blankOList[i]));\\n            } else if (FieldType.ADDRESS == _p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildAddressRDF(blankPList[i], blankOList[i]));\\n            } else if (FieldType.SUBJECT == _p.fieldType) {\\n                _rdf = string.concat(_rdf, _buildSubjectRDF(blankPList[i], blankOList[i]));\\n            }\\n            if (i < blankPList.length - 1) {\\n                _rdf = string.concat(_rdf, TURTLE_LINE_SUFFIX);\\n            }\\n        }\\n\\n        return string.concat(p, BLANK_SPACE, BLANK_NODE_START_CHARACTER, _rdf, BLANK_NODE_END_CHARACTER);\\n    }\\n\\n\\n    function _checkPredicate(uint256 pIndex, FieldType fieldType) internal view {\\n        require(pIndex > 0 && pIndex < _predicates.length, \\\"SemanticSBT: predicate not exist\\\");\\n        require(_predicates[pIndex].fieldType == fieldType, \\\"SemanticSBT: predicate type error\\\");\\n    }\\n\\n    function _mint(address account, uint256 sIndex, IntPO[] memory intPOList, StringPO[] memory stringPOList,\\n        AddressPO[] memory addressPOList, SubjectPO[] memory subjectPOList,\\n        BlankNodePO[] memory blankNodePOList) internal returns (uint256) {\\n        require(account != address(0), \\\"SemanticSBT: mint to the zero address\\\");\\n        require(sIndex < _subjects.length, \\\"SemanticSBT: param error\\\");\\n\\n        uint256 tokenId = _tokens.length;\\n\\n        _tokens.push(SPO(uint160(account), sIndex, new uint256[](0), new uint256[](0)));\\n        uint256[] storage pIndex = _tokens[tokenId].pIndex;\\n        uint256[] storage oIndex = _tokens[tokenId].oIndex;\\n\\n        _addIntPO(pIndex, oIndex, intPOList);\\n        _addStringPO(pIndex, oIndex, stringPOList);\\n        _addAddressPO(pIndex, oIndex, addressPOList);\\n        _addSubjectPO(pIndex, oIndex, subjectPOList);\\n        _addBlankNodePO(pIndex, oIndex, blankNodePOList);\\n\\n        require(pIndex.length > 0, \\\"SemanticSBT: param error\\\");\\n\\n        _balances[account] += 1;\\n\\n\\n        require(\\n            _checkOnERC721Received(address(0), account, tokenId, \\\"\\\"),\\n            \\\"SemanticSBT: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        emit Transfer(address(0), account, tokenId);\\n        emit CreateSBT(msg.sender, account, tokenId, _buildRDF(_tokens[tokenId]));\\n\\n        return tokenId;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n\\n    function addSubject(string memory value, string memory className_) external onlyMinter returns (uint256 sIndex) {\\n        uint256 cIndex = _classIndex[className_];\\n        require(cIndex > 0, \\\"SemanticSBT: param error\\\");\\n        require(_subjectIndex[cIndex][value] == 0, \\\"SemanticSBT: already added\\\");\\n        sIndex = _subjects.length;\\n        _subjectIndex[cIndex][value] = sIndex;\\n        _subjects.push(Subject(value, cIndex));\\n    }\\n\\n    \\n    function mint(address account, uint256 sIndex, IntPO[] memory intPOList, StringPO[] memory stringPOList,\\n        AddressPO[] memory addressPOList, SubjectPO[] memory subjectPOList,\\n        BlankNodePO[] memory blankNodePOList) \\n    external\\n    onlyMinter returns (uint256) {\\n        \\n        return _mint(account, sIndex, intPOList, stringPOList, addressPOList, subjectPOList, blankNodePOList);\\n    }\\n\\n    function burn(address account, uint256 id) external onlyMinter {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), id),\\n            \\\"SemanticSBT: caller is not approved or owner\\\"\\n        );\\n        require(isOwnerOf(account, id), \\\"SemanticSBT: not owner\\\");\\n        string memory _rdf = _buildRDF(_tokens[id]);\\n        // Clear approvals\\n        _approve(address(0), id);\\n        _burnCount++;\\n        _balances[account] -= 1;\\n        _tokens[id].owner = 0;\\n\\n        emit Transfer(account, address(0), id);\\n        emit RemoveSBT(msg.sender, account, id, _rdf);\\n    }\\n\\n    function burnBatch(address account, uint256[] calldata ids)\\n    external\\n    onlyMinter\\n    {\\n        _burnCount += ids.length;\\n        _balances[account] -= ids.length;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 tokenId = ids[i];\\n            require(\\n                _isApprovedOrOwner(_msgSender(), tokenId),\\n                \\\"SemanticSBT: caller is not approved or owner\\\"\\n            );\\n            require(isOwnerOf(account, tokenId), \\\"SemanticSBT: not owner\\\");\\n            string memory _rdf = _buildRDF(_tokens[tokenId]);\\n\\n            // Clear approvals\\n            _approve(address(0), tokenId);\\n            _tokens[tokenId].owner = 0;\\n\\n            emit Transfer(account, address(0), tokenId);\\n            emit RemoveSBT(msg.sender, account, tokenId, _rdf);\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            isOwnerOf(from, tokenId),\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _tokens[tokenId].owner = uint160(to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n            IERC721Receiver(to).onERC721Received(\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                    \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /* ============ Util Functions ============ */\\n    /**\\n     * @dev Sets a new baseURI for all token types.\\n     */\\n    function setURI(string calldata newURI) external onlyOwner {\\n        _baseURI = newURI;\\n    }\\n\\n    /**\\n     * @dev Sets a new transferable for all token types.\\n     */\\n    function setTransferable(bool transferable_) external onlyOwner {\\n        _transferable = transferable_;\\n    }\\n\\n    /**\\n     * @dev Sets a new name for all token types.\\n     */\\n    function setName(string calldata newName) external onlyOwner {\\n        _name = newName;\\n    }\\n\\n    /**\\n     * @dev Sets a new symbol for all token types.\\n     */\\n    function setSymbol(string calldata newSymbol) external onlyOwner {\\n        _symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @dev Add a new minter.\\n     */\\n    function addMinter(address minter) external onlyOwner {\\n        require(minter != address(0), \\\"SemanticSBT: minter must not be null address\\\");\\n        require(!_minters[minter], \\\"SemanticSBT: minter already added\\\");\\n        _minters[minter] = true;\\n        emit EventMinterAdded(minter);\\n    }\\n\\n    /**\\n     * @dev Remove a old minter.\\n     */\\n    function removeMinter(address minter) external onlyOwner {\\n        require(_minters[minter], \\\"SemanticSBT: minter does not exist\\\");\\n        delete _minters[minter];\\n        emit EventMinterRemoved(minter);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/core/SemanticBaseStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum FieldType {\\n    INT,\\n    STRING,\\n    ADDRESS,\\n    SUBJECT,\\n    BLANKNODE\\n}\\n\\nstruct IntPO {\\n    uint256 pIndex;\\n    uint256 o;\\n}\\n\\nstruct StringPO {\\n    uint256 pIndex;\\n    string o;\\n}\\n\\nstruct AddressPO {\\n    uint256 pIndex;\\n    address o;\\n}\\n\\nstruct SubjectPO {\\n    uint256 pIndex;\\n    uint256 oIndex;\\n}\\n\\nstruct BlankNodePO {\\n    uint256 pIndex;\\n    IntPO[] intO;\\n    StringPO[] stringO;\\n    AddressPO[] addressO;\\n    SubjectPO[] subjectO;\\n}\\n\\nstruct BlankNodeO {\\n    uint256[] pIndex;\\n    uint256[] oIndex;\\n}\\n\\nstruct SPO {\\n    uint160 owner;\\n    uint256 sIndex;\\n    uint256[] pIndex;\\n    uint256[] oIndex;\\n}\\n\\nstruct Class {\\n    uint256 index;\\n    string name;\\n}\\n\\nstruct Predicate {\\n    string name;\\n    FieldType fieldType;\\n}\\n\\nstruct Subject {\\n    string value;\\n    uint256 cIndex;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISemanticSBTMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ISemanticSBTMetadata is IERC721Metadata {\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier [URI](https://www.ietf.org/rfc/rfc3986.txt) for semantic metadata\\n     */\\n    function schemaURI() external view returns (string memory);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/ISemanticSBT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev Required interface of an ISemanticData compliant contract.\\n */\\ninterface ISemanticSBT is IERC721 {\\n\\n\\n    event CreateSBT(\\n        address indexed operator,\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        string rdf\\n    );\\n\\n    event RemoveSBT(\\n        address indexed operator,\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        string rdf\\n    );\\n\\n\\n    /**\\n     * @dev returns formatted rdf data\\n     * @param tokenId The token Id\\n     */\\n    function rdfOf(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rdf\",\"type\":\"string\"}],\"name\":\"CreateSBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"EventMinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"EventMinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rdf\",\"type\":\"string\"}],\"name\":\"RemoveSBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownedSBT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"className_\",\"type\":\"string\"}],\"name\":\"addSubject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct RActivity.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"className_\",\"type\":\"string\"}],\"name\":\"classIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"classIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cIndex\",\"type\":\"uint256\"}],\"name\":\"className\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schemaURI_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"classes_\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum FieldType\",\"name\":\"fieldType\",\"type\":\"uint8\"}],\"internalType\":\"struct Predicate[]\",\"name\":\"predicates_\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oIndex\",\"type\":\"uint256\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"o\",\"type\":\"uint256\"}],\"internalType\":\"struct IntPO[]\",\"name\":\"intPOList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"o\",\"type\":\"string\"}],\"internalType\":\"struct StringPO[]\",\"name\":\"stringPOList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"internalType\":\"struct AddressPO[]\",\"name\":\"addressPOList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct SubjectPO[]\",\"name\":\"subjectPOList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"o\",\"type\":\"uint256\"}],\"internalType\":\"struct IntPO[]\",\"name\":\"intO\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"o\",\"type\":\"string\"}],\"internalType\":\"struct StringPO[]\",\"name\":\"stringO\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"internalType\":\"struct AddressPO[]\",\"name\":\"addressO\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct SubjectPO[]\",\"name\":\"subjectO\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BlankNodePO[]\",\"name\":\"blankNodePOList\",\"type\":\"tuple[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pIndex\",\"type\":\"uint256\"}],\"name\":\"predicate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"enum FieldType\",\"name\":\"fieldType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"predicateName_\",\"type\":\"string\"}],\"name\":\"predicateIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"predicateIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rdfOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"transferable_\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subject\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"subjectValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"className_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subjectValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"className_\",\"type\":\"string\"}],\"name\":\"subjectIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RActivity", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}