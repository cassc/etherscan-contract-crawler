{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReferralStorage is Ownable {\r\n\r\n    struct Sales {\r\n        address buyer;\r\n        address seller;\r\n        uint256 fee;\r\n        uint256 date;\r\n    }\r\n\r\n\r\n\r\n    Sales[] _sales;\r\n\r\n    address[] _affiliates;\r\n\r\n    mapping (address => uint256) public _affInterest; // percentuale\r\n    mapping (address => bool) public _isAffiliate; // affiliato o no\r\n    mapping (address => string) public _teamName; // Team Name\r\n    mapping (uint256 => address) public _uid; \r\n    mapping (address => uint256) public _uidAssign;\r\n    mapping (address => uint256) public _invites;\r\n    mapping (address => uint256) public _earnings;\r\n\r\n    uint256 public _totalSold;\r\n    uint256 public _totCommission;\r\n    uint256 _cnt = 1;\r\n    \r\n    function addAffiliate(string memory _name, uint256 _percent, address _aff) public onlyOwner {\r\n        require(_isAffiliate[_aff] == false, \"Address already affiliated!\");\r\n        _teamName[_aff] = _name;\r\n        _affInterest[_aff] = _percent;\r\n        _isAffiliate[_aff] = true;\r\n        _affiliates.push(_aff);\r\n        _uid[_cnt] = _aff;\r\n        _uidAssign[_aff] = _cnt;\r\n        _cnt++;\r\n    }\r\n\r\n    function retrieveAffiliates() public view returns (address[] memory){\r\n        return _affiliates;\r\n    }\r\n\r\n    function retrieveLenght() public view onlyOwner returns (uint256){\r\n        return _affiliates.length;\r\n    }\r\n\r\n    function retrieveSales() public view returns (Sales[] memory) {\r\n        return _sales;\r\n    }\r\n\r\n\r\n    function _withReferralSale(uint256 _amount, address _buyer, address _seller, uint256 _date) internal returns (uint256) {\r\n        uint256 fee = _amount * _affInterest[_seller] / 100;\r\n        _sales.push(Sales(_buyer, _seller, fee, _date));\r\n        _invites[_seller] += 1;\r\n        _earnings[_seller] += fee;\r\n        _totalSold += 1;\r\n        _totCommission += fee;\r\n        return fee;\r\n            }\r\n}\r\n\r\ncontract Netly_Vendor is Ownable, ReferralStorage {\r\n\r\n    uint256 public tokenPrice = 10;\r\n    // count of token sold vaariable\r\n    uint256 public totalsold; \r\n\r\n    uint256 public totalAvailable;\r\n\r\n    bool isActive;\r\n\r\n    IERC20 public usdt = IERC20(0xc2132D05D31c914a87C6611C10748AEb04B58e8F);\r\n\r\n    IERC20 public token = IERC20(0x0524aFaaD43ab0Ab8c2F396e3b4674fFAf0D5e71);\r\n\r\n    event Buy(address sender,uint256 totalvalue); \r\n   \r\n    // constructor \r\n    constructor(uint256 _total){\r\n        totalAvailable = _total;\r\n    }\r\n\r\n    function togglePresale() public onlyOwner {\r\n        isActive = !isActive;\r\n    }\r\n\r\n    function buyNoRef(uint256 _amount) public {\r\n        require(isActive, \"Not allowed yet!\");\r\n        address buyer = _msgSender();\r\n        require(usdt.balanceOf(buyer) > _amount, \"Non hai abbastanza USDT!\");\r\n\r\n        uint256 tokens = (_amount * tokenPrice) * 10**12;\r\n        usdt.transferFrom(buyer, address(this), _amount);\r\n        token.transfer(buyer, tokens);\r\n\r\n        totalsold += tokens;\r\n\r\n        emit Buy(buyer, tokens);\r\n\r\n    }\r\n\r\n    function buyWithRef(uint256 _amount, address _ref) public {\r\n        require(isActive, \"Not allowed yet!\");\r\n        require(_ref != address(0), \"Address 0 as referral not allowed!\");\r\n        require(_isAffiliate[_ref], \"Il tuo referral non e un affiliato!\");\r\n        address buyer = _msgSender();\r\n        require(usdt.balanceOf(buyer) > _amount, \"Non hai abbastanza USDT!\");\r\n\r\n        uint256 affInterest = _affInterest[_ref];\r\n        uint256 fee = _amount * affInterest / 100;\r\n\r\n        uint256 tokens = (_amount * tokenPrice) * 10**12;\r\n\r\n        usdt.transferFrom(buyer, address(this), _amount - fee);\r\n        usdt.transferFrom(buyer, _ref, fee);\r\n        token.transfer(buyer, tokens);\r\n\r\n        totalsold += tokens;\r\n\r\n        _withReferralSale(_amount, _msgSender(), _ref, block.timestamp);\r\n\r\n        emit Buy(buyer, tokens);\r\n\r\n    }\r\n\r\n    // end sale\r\n    function endsale() public onlyOwner {\r\n        // transfer all the remaining tokens to admin\r\n        token.transfer(_msgSender(), token.balanceOf(address(this)));\r\n        usdt.transfer(_msgSender(), usdt.balanceOf(address(this)));\r\n        // transfer all the etherum to admin and self selfdestruct the contract\r\n        selfdestruct(payable(_msgSender()));\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(usdt.balanceOf(_msgSender()) > 0, \"Fondi Insufficienti!\");\r\n        usdt.transfer(_msgSender(), usdt.balanceOf((address(this))));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalvalue\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_affInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isAffiliate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_uid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_uidAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_aff\",\"type\":\"address\"}],\"name\":\"addAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyNoRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buyWithRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveAffiliates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveSales\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralStorage.Sales[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalsold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Netly_Vendor", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000002116545850052128000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b82ba94726c4970cbb0e241482a553c275479f1d1102243f80c28c1c8e169778"}