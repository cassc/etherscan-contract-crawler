{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokens/SkyweaverAssets.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\nimport \\\"@0xsequence/erc-1155/contracts/tokens/ERC1155PackedBalance/ERC1155MintBurnPackedBalance.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/tokens/ERC1155/ERC1155Metadata.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/tokens/ERC2981/ERC2981Global.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/utils/SafeMath.sol\\\";\\n\\n\\n/**\\n * ERC-1155 token contract for skyweaver assets.\\n * This contract manages the various SW asset factories\\n * and ensures that each factory has constraint access in\\n * terms of the id space they are allowed to mint.\\n * @dev Mint permissions use range because factory contracts\\n *      could be minting large numbers of NFTs or be built\\n *      with granular, but efficient permission checks.\\n */\\ncontract SkyweaverAssets is ERC1155MintBurnPackedBalance, ERC1155Metadata, ERC2981Global, Ownable {\\n  using SafeMath for uint256;\\n\\n  /***********************************|\\n  |             Variables             |\\n  |__________________________________*/\\n\\n  // Factory mapping variables\\n  mapping(address => bool) internal isFactoryActive;          // Whether an address can print tokens or not\\n  mapping(address => AssetRange[]) internal mintAccessRanges; // Contains the ID ranges factories are allowed to mint\\n  AssetRange[] internal lockedRanges;                         // Ranges of IDs that can't be granted permission to mint\\n\\n  // Issuance mapping variables\\n  mapping (uint256 => uint256) internal currentIssuance; // Current Issuance of token for tokens that have max issuance ONLY\\n  mapping (uint256 => uint256) internal maxIssuance;     // Issuance is counted and capped to associated maxIssuance if it's non-zero\\n\\n  // Struct for mint ID ranges permissions\\n  struct AssetRange {\\n    uint64 minID;     // Minimum value the ID need to be to fall in the range\\n    uint64 maxID;     // Maximum value the ID need to be to fall in the range\\n    uint64 startTime; // Timestamp when the range becomes valid\\n    uint64 endTime;   // Timestamp after which the range is no longer valid \\n  }\\n\\n  /***********************************|\\n  |               Events              |\\n  |__________________________________*/\\n\\n  event FactoryActivation(address indexed factory);\\n  event FactoryShutdown(address indexed factory);\\n  event MaxIssuancesChanged(uint256[] ids, uint256[] newMaxIssuances);\\n  event MintPermissionAdded(address indexed factory, AssetRange new_range);\\n  event MintPermissionRemoved(address indexed factory, AssetRange deleted_range);\\n  event RangeLocked(AssetRange locked_range);\\n\\n\\n  /***********************************|\\n  |             Constuctor            |\\n  |__________________________________*/\\n  \\n  constructor (address _firstOwner) ERC1155Metadata(\\\"Skyweaver\\\", \\\"\\\") Ownable(_firstOwner) public {}\\n\\n\\n  /***********************************|\\n  |     Factory Management Methods    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will ALLOW factory to print some assets specified in `canPrint` mapping\\n   * @param _factory Address of the factory to activate\\n   */\\n  function activateFactory(address _factory) external onlyOwner() {\\n    isFactoryActive[_factory] = true;\\n    emit FactoryActivation(_factory);\\n  }\\n\\n  /**\\n   * @notice Will DISALLOW factory to print any asset\\n   * @param _factory Address of the factory to shutdown\\n   */\\n  function shutdownFactory(address _factory) external onlyOwner() {\\n    isFactoryActive[_factory] = false;\\n    emit FactoryShutdown(_factory);\\n  }\\n\\n  /**\\n   * @notice Will allow a factory to mint some token ids\\n   * @param _factory   Address of the factory to update permission\\n   * @param _minRange  Minimum ID (inclusive) in id range that factory will be able to mint\\n   * @param _maxRange  Maximum ID (inclusive) in id range that factory will be able to mint\\n   * @param _startTime Timestamp when the range becomes valid\\n   * @param _endTime   Timestamp after which the range is no longer valid \\n   */\\n  function addMintPermission(address _factory, uint64 _minRange, uint64 _maxRange, uint64 _startTime, uint64 _endTime) external onlyOwner() {\\n    require(_maxRange > 0, \\\"SkyweaverAssets#addMintPermission: NULL_RANGE\\\");\\n    require(_minRange <= _maxRange, \\\"SkyweaverAssets#addMintPermission: INVALID_RANGE\\\");\\n    require(_startTime < _endTime, \\\"SkyweaverAssets#addMintPermission: START_TIME_IS_NOT_LESSER_THEN_END_TIME\\\");\\n\\n    // Check if new range has an overlap with locked ranges.\\n    // lockedRanges is expected to be a small array\\n    for (uint256 i = 0; i < lockedRanges.length; i++) {\\n      AssetRange memory locked_range = lockedRanges[i];\\n      require(\\n        (_maxRange < locked_range.minID) || (locked_range.maxID < _minRange),\\n        \\\"SkyweaverAssets#addMintPermission: OVERLAP_WITH_LOCKED_RANGE\\\"\\n      );\\n    }\\n\\n    // Create and store range struct for _factory\\n    AssetRange memory range = AssetRange(_minRange, _maxRange, _startTime, _endTime);\\n    mintAccessRanges[_factory].push(range);\\n    emit MintPermissionAdded(_factory, range);\\n  }\\n\\n  /**\\n   * @notice Will remove the permission a factory has to mint some token ids\\n   * @param _factory    Address of the factory to update permission\\n   * @param _rangeIndex Array's index where the range to delete is located for _factory\\n   */\\n  function removeMintPermission(address _factory, uint256 _rangeIndex) external onlyOwner() {\\n    // Will take the last range and put it where the \\\"hole\\\" will be after\\n    // the AssetRange struct at _rangeIndex is deleted\\n    uint256 last_index = mintAccessRanges[_factory].length - 1; // won't underflow because of require() statement above\\n    AssetRange memory range_to_delete = mintAccessRanges[_factory][_rangeIndex]; // Stored for log\\n\\n    if (_rangeIndex != last_index) {\\n      AssetRange memory last_range = mintAccessRanges[_factory][last_index]; // Retrieve the range that will be moved\\n      mintAccessRanges[_factory][_rangeIndex] = last_range;                  // Overwrite the \\\"to-be-deleted\\\" range\\n    }\\n\\n    // Delete last element of the array\\n    mintAccessRanges[_factory].pop();\\n    emit MintPermissionRemoved(_factory, range_to_delete);\\n  }\\n\\n  /**\\n   * @notice Will forever prevent new mint permissions for provided ids\\n   * @dev THIS ACTION IS IRREVERSIBLE, USE WITH CAUTION\\n   * @dev In order to forever restrict minting of certain ids to a set of factories,\\n   *      one first needs to call `addMintPermission()` for the corresponding factory\\n   *      and the corresponding ids, then call this method to prevent further mint\\n   *      permissions to be granted. One can also remove mint permissions after ids\\n   *      mint permissions where locked down.\\n   * @param _range AssetRange struct for range of asset that can't be granted\\n   *               new mint permission to\\n   */\\n  function lockRangeMintPermissions(AssetRange memory _range) public onlyOwner() {\\n    lockedRanges.push(_range);\\n    emit RangeLocked(_range);\\n  }\\n\\n  /***********************************|\\n  |    Supplies Management Methods    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Set max issuance for some token IDs that can't ever be increased\\n   * @dev Can only decrease the max issuance if already set, but can't set it *back* to 0.\\n   * @param _ids Array of token IDs to set the max issuance\\n   * @param _newMaxIssuances Array of max issuances for each corresponding ID\\n   */\\n  function setMaxIssuances(uint256[] calldata _ids, uint256[] calldata _newMaxIssuances) external onlyOwner() {\\n    require(_ids.length == _newMaxIssuances.length, \\\"SkyweaverAssets#setMaxIssuances: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Can only *decrease* a max issuance\\n    // Can't set max issuance back to 0\\n    for (uint256 i = 0; i < _ids.length; i++ ) {\\n      if (maxIssuance[_ids[i]] > 0) {\\n        require(\\n          0 < _newMaxIssuances[i] && _newMaxIssuances[i] < maxIssuance[_ids[i]],\\n          \\\"SkyweaverAssets#setMaxIssuances: INVALID_NEW_MAX_ISSUANCE\\\"\\n        );\\n      }\\n      maxIssuance[_ids[i]] = _newMaxIssuances[i];\\n    }\\n\\n    emit MaxIssuancesChanged(_ids, _newMaxIssuances);\\n  }\\n\\n  /***********************************|\\n  |    Royalty Management Methods     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will set the basis point and royalty recipient that is applied to all Skyweaver assets\\n   * @param _receiver Fee recipient that will receive the royalty payments\\n   * @param _royaltyBasisPoints Basis points with 3 decimals representing the fee %\\n   *        e.g. a fee of 2% would be 20 (i.e. 20 / 1000 == 0.02, or 2%)\\n   */\\n  function setGlobalRoyaltyInfo(address _receiver, uint256 _royaltyBasisPoints) external onlyOwner() {\\n    _setGlobalRoyaltyInfo(_receiver, _royaltyBasisPoints);\\n  }\\n\\n  /***********************************|\\n  |      Receiver Method Handler      |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Prevents receiving Ether or calls to unsuported methods\\n   */\\n  fallback () external {\\n    revert(\\\"UNSUPPORTED_METHOD\\\");\\n  }\\n\\n  /***********************************|\\n  |          Minting Function         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Mint tokens for each ids in _ids\\n   * @dev This methods assumes ids are sorted by how the ranges are sorted in\\n   *      the corresponding mintAccessRanges[msg.sender] array. Call might throw\\n   *      if they are not.\\n   * @param _to      The address to mint tokens to.\\n   * @param _ids     Array of ids to mint\\n   * @param _amounts Array of amount of tokens to mint per id\\n   * @param _data    Byte array of data to pass to recipient if it's a contract\\n   */\\n  function batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data) public\\n  {\\n    // Validate assets to be minted\\n    _validateMints(_ids, _amounts);\\n\\n    // If hasn't reverted yet, all IDs are allowed for factory\\n    _batchMint(_to, _ids, _amounts, _data);\\n  }\\n\\n  /**\\n   * @notice Mint _amount of tokens of a given id, if allowed.\\n   * @param _to      The address to mint tokens to\\n   * @param _id      Token id to mint\\n   * @param _amount  The amount to be minted\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function mint(address _to, uint256 _id, uint256 _amount, bytes calldata _data) external\\n  {\\n    // Put into array for validation\\n    uint256[] memory ids = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    ids[0] = _id;\\n    amounts[0] = _amount;\\n\\n    // Validate and mint\\n    _validateMints(ids, amounts);\\n    _mint(_to, _id, _amount, _data);\\n  }\\n\\n  /**\\n   * @notice Will validate the ids and amounts to mint\\n   * @dev This methods assumes ids are sorted by how the ranges are sorted in\\n   *      the corresponding mintAccessRanges[msg.sender] array. Call will revert\\n   *      if they are not.\\n   * @dev When the maxIssuance of an asset is set to a non-zero value, the\\n   *      supply manager contract will start keeping track of how many of that\\n   *      token are minted, until the maxIssuance hit.\\n   * @param _ids     Array of ids to mint\\n   * @param _amounts Array of amount of tokens to mint per id\\n   */\\n  function _validateMints(uint256[] memory _ids, uint256[] memory _amounts) internal {\\n    require(isFactoryActive[msg.sender], \\\"SkyweaverAssets#_validateMints: FACTORY_NOT_ACTIVE\\\");\\n\\n    // Number of mint ranges\\n    uint256 n_ranges = mintAccessRanges[msg.sender].length;\\n\\n    // Load factory's default range\\n    AssetRange memory range = mintAccessRanges[msg.sender][0];\\n    uint256 range_index = 0;\\n\\n    // Will make sure that factory is allowed to print all ids\\n    // and that no max issuance is exceeded\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 id = _ids[i];\\n      uint256 amount = _amounts[i];\\n      uint256 max_issuance = maxIssuance[id];\\n\\n      // If ID is out of current range, move to next range, else skip.\\n      // This function only moves forwards in the AssetRange array,\\n      // hence if _ids are not sorted correctly, the call will fail.\\n      while (block.timestamp < range.startTime || block.timestamp > range.endTime || id < range.minID || range.maxID < id) {\\n        range_index += 1;\\n\\n        // Load next range. If none left, ID is assumed to be out of all ranges\\n        require(range_index < n_ranges, \\\"SkyweaverAssets#_validateMints: ID_OUT_OF_RANGE\\\");\\n        range = mintAccessRanges[msg.sender][range_index];\\n      }\\n\\n      // If max supply is specified for id\\n      if (max_issuance > 0) {\\n        uint256 new_current_issuance = currentIssuance[id].add(amount);\\n        require(new_current_issuance <= max_issuance, \\\"SkyweaverAssets#_validateMints: MAX_ISSUANCE_EXCEEDED\\\");\\n        currentIssuance[id] = new_current_issuance;\\n      }\\n    }\\n  }\\n\\n  /***********************************|\\n  |         Getter Functions          |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get the max issuance of multiple asset IDs\\n   * @dev The max issuance of a token does not reflect the maximum supply, only\\n   *      how many tokens can be minted once the maxIssuance for a token is set.\\n   * @param _ids Array containing the assets IDs\\n   * @return The current max issuance of each asset ID in _ids\\n   */\\n  function getMaxIssuances(uint256[] calldata _ids) external view returns (uint256[] memory) {\\n    uint256 nIds = _ids.length;\\n    uint256[] memory max_issuances = new uint256[](nIds);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < nIds; i++) {\\n      max_issuances[i] = maxIssuance[_ids[i]];\\n    }\\n\\n    return max_issuances;\\n  }\\n\\n  /**\\n   * @notice Get the current issuanc of multiple asset ID\\n   * @dev The current issuance of a token does not reflect the current supply, only\\n   *      how many tokens since a max issuance was set for a given token id.\\n   * @param _ids Array containing the assets IDs\\n   * @return The current issuance of each asset ID in _ids\\n   */\\n  function getCurrentIssuances(uint256[] calldata _ids) external view returns (uint256[] memory) {\\n    uint256 nIds = _ids.length;\\n    uint256[] memory current_issuances = new uint256[](nIds);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < nIds; i++) {\\n      current_issuances[i] = currentIssuance[_ids[i]];\\n    }\\n\\n    return current_issuances;\\n  }\\n\\n  /**\\n   * @return Returns whether a factory is active or not\\n   */\\n  function getFactoryStatus(address _factory) external view returns (bool) {\\n    return isFactoryActive[_factory];\\n  }\\n\\n  /**\\n   * @return Returns whether the sale has ended or not\\n   */\\n  function getFactoryAccessRanges(address _factory) external view returns (AssetRange[] memory) {\\n    return mintAccessRanges[_factory];\\n  }\\n\\n  /**\\n   * @return Returns all the ranges that are locked\\n   */\\n  function getLockedRanges() external view returns (AssetRange[] memory) {\\n    return lockedRanges;\\n  }\\n\\n  /***********************************|\\n  |          Burning Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Burn _amount of tokens of a given id from msg.sender\\n   * @dev This will not change the current issuance tracked in _supplyManagerAddr.\\n   * @param _id     Asset id to burn\\n   * @param _amount The amount to be burn\\n   */\\n  function burn(\\n    uint256 _id,\\n    uint256 _amount)\\n    external\\n  {\\n    _burn(msg.sender, _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Burn _amounts of tokens of given ids from msg.sender\\n   * @dev This will not change the current issuance tracked in _supplyManagerAddr.\\n   * @param _ids     Asset id to burn\\n   * @param _amounts The amount to be burn\\n   */\\n  function batchBurn(\\n    uint256[] calldata _ids,\\n    uint256[] calldata _amounts)\\n    external\\n  {\\n    _batchBurn(msg.sender, _ids, _amounts);\\n  }\\n\\n  /***********************************|\\n  |           URI Functions           |\\n  |__________________________________*/\\n\\n  /**\\n   * @dev Will update the base URL of token's URI\\n   * @param _newBaseMetadataURI New base URL of token's URI\\n   */\\n  function setBaseMetadataURI(string calldata _newBaseMetadataURI) external onlyOwner() {\\n    _setBaseMetadataURI(_newBaseMetadataURI);\\n  }\\n\\n  /**\\n   * @dev Will emit default URI log event for corresponding token _id\\n   * @param _tokenIDs Array of IDs of tokens to log default URI\\n   */\\n  function logURIs(uint256[] calldata _tokenIDs) external onlyOwner() {\\n    _logURIs(_tokenIDs);\\n  }\\n\\n  /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID`\\n   */\\n  function supportsInterface(bytes4 _interfaceID) public override(ERC1155PackedBalance, ERC1155Metadata, ERC2981Global) virtual pure returns (bool) {\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISkyweaverAssets.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISkyweaverAssets {\\n\\n  /***********************************|\\n  |               Events              |\\n  |__________________________________*/\\n\\n  event FactoryActivation(address indexed factory);\\n  event FactoryShutdown(address indexed factory);\\n  event MintPermissionAdded(address indexed factory, AssetRange new_range);\\n  event MintPermissionRemoved(address indexed factory, AssetRange deleted_range);\\n\\n  // Struct for mint ID ranges permissions\\n  struct AssetRange {\\n    uint256 minID;\\n    uint256 maxID;\\n  }\\n\\n  /***********************************|\\n  |    Supplies Management Methods    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Set max issuance for some token IDs that can't ever be increased\\n   * @dev Can only decrease the max issuance if already set, but can't set it *back* to 0.\\n   * @param _ids Array of token IDs to set the max issuance\\n   * @param _newMaxIssuances Array of max issuances for each corresponding ID\\n   */\\n  function setMaxIssuances(uint256[] calldata _ids, uint256[] calldata _newMaxIssuances) external;\\n\\n  /***********************************|\\n  |     Factory Management Methods    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will allow a factory to mint some token ids\\n   * @param _factory   Address of the factory to update permission\\n   * @param _minRange  Minimum ID (inclusive) in id range that factory will be able to mint\\n   * @param _maxRange  Maximum ID (inclusive) in id range that factory will be able to mint\\n   * @param _startTime Timestamp when the range becomes valid\\n   * @param _endTime   Timestamp after which the range is no longer valid \\n   */\\n  function addMintPermission(address _factory, uint64 _minRange, uint64 _maxRange, uint64 _startTime, uint64 _endTime) external;\\n\\n  /**\\n   * @notice Will remove the permission a factory has to mint some token ids\\n   * @param _factory    Address of the factory to update permission\\n   * @param _rangeIndex Array's index where the range to delete is located for _factory\\n   */\\n  function removeMintPermission(address _factory, uint256 _rangeIndex) external;\\n\\n  /**\\n   * @notice Will ALLOW factory to print some assets specified in `canPrint` mapping\\n   * @param _factory Address of the factory to activate\\n   */\\n  function activateFactory(address _factory) external;\\n\\n  /**\\n   * @notice Will DISALLOW factory to print any asset\\n   * @param _factory Address of the factory to shutdown\\n   */\\n  function shutdownFactory(address _factory) external;\\n\\n  /**\\n   * @notice Will forever prevent new mint permissions for provided ids\\n   * @param _range AssetRange struct for range of asset that can't be granted\\n   *               new mint permission to\\n   */\\n  function lockRangeMintPermissions(AssetRange calldata _range) external;\\n\\n\\n  /***********************************|\\n  |         Getter Functions          |\\n  |__________________________________*/\\n\\n  /**\\n   * @return Returns whether a factory is active or not\\n   */\\n  function getFactoryStatus(address _factory) external view returns (bool);\\n\\n  /**\\n   * @return Returns whether the sale has ended or not\\n   */\\n  function getFactoryAccessRanges(address _factory) external view returns ( AssetRange[] memory);\\n\\n  /**\\n   * @notice Get the max issuance of multiple asset IDs\\n   * @dev The max issuance of a token does not reflect the maximum supply, only\\n   *      how many tokens can be minted once the maxIssuance for a token is set.\\n   * @param _ids Array containing the assets IDs\\n   * @return The current max issuance of each asset ID in _ids\\n   */\\n  function getMaxIssuances(uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Get the current issuanc of multiple asset ID\\n   * @dev The current issuance of a token does not reflect the current supply, only\\n   *      how many tokens since a max issuance was set for a given token id.\\n   * @param _ids Array containing the assets IDs\\n   * @return The current issuance of each asset ID in _ids\\n   */\\n  function getCurrentIssuances(uint256[] calldata _ids)external view returns (uint256[] memory);\\n\\n  /***************************************|\\n  |           Minting Functions           |\\n  |______________________________________*/\\n\\n  /**\\n   * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n   * @param _to     The address to mint tokens to.\\n   * @param _id     Token id to mint\\n   * @param _amount The amount to be minted\\n   * @param _data   Byte array of data to pass to recipient if it's a contract\\n   */\\n  function mint(address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\n\\n  /**\\n   * @dev Mint tokens for each ids in _ids\\n   * @param _to      The address to mint tokens to.\\n   * @param _ids     Array of ids to mint\\n   * @param _amounts Array of amount of tokens to mint per id\\n   * @param _data    Byte array of data to pass to recipient if it's a contract\\n   */\\n  function batchMint(address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\n\\n\\n  /***************************************|\\n  |           Burning Functions           |\\n  |______________________________________*/\\n\\n  /**\\n   * @notice Burn sender's_amount of tokens of a given token id\\n   * @param _id      Token id to burn\\n   * @param _amount  The amount to be burned\\n   */\\n  function burn(uint256 _id, uint256 _amount) external;\\n\\n  /**\\n   * @notice Burn sender's tokens of given token id for each (_ids[i], _amounts[i]) pair\\n   * @param _ids      Array of token ids to burn\\n   * @param _amounts  Array of the amount to be burned\\n   */\\n  function batchBurn(uint256[] calldata _ids, uint256[] calldata _amounts) external;\\n}\"\r\n    },\r\n    \"contracts/conquest/Conquest.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\nimport \\\"../utils/TieredOwnable.sol\\\";\\nimport \\\"../interfaces/ISkyweaverAssets.sol\\\";\\nimport \\\"../interfaces/IRewardFactory.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/utils/SafeMath.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\n/**\\n * @notice Keep track of players participation in Conquest and used to issue rewards.\\n * @dev This contract must be at least a TIER 1 owner of the silverCardFactory and\\n *      goldCardFactory.\\n */\\ncontract Conquest is IERC1155TokenReceiver, TieredOwnable {\\n  using SafeMath for uint256;\\n\\n  /***********************************|\\n  |             Variables             |\\n  |__________________________________*/\\n\\n  // Parameters\\n  uint256 constant internal TIME_BETWEEN_CONQUESTS = 1 seconds; // Seconds that must elapse between two conquest\\n  uint256 constant internal ENTRIES_DECIMALS = 2;               // Amount of decimals conquest entries have\\n  uint256 constant internal CARDS_DECIMALS = 2;                 // Number of decimals cards have\\n\\n  // Contracts\\n  IRewardFactory immutable public silverCardFactory; // Factory that mints Silver cards\\n  IRewardFactory immutable public goldCardFactory;   // Factory that mints Gold cards\\n  ISkyweaverAssets immutable public skyweaverAssets; // ERC-1155 Skyweaver assets contract\\n  uint256 immutable public conquestEntryID;          // Conquest entry token id\\n\\n  // Mappings\\n  mapping(address => bool) public isActiveConquest;    // Whether a given player is currently in a conquest\\n  mapping(address => uint256) public conquestsEntered; // Number of conquest a given player has entered so far\\n  mapping(address => uint256) public nextConquestTime; // Time when the next conquest can be started for players\\n\\n  // Event\\n  event ConquestEntered(address user, uint256 nConquests);\\n\\n\\n  /***********************************|\\n  |            Constructor            |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Link factories and skyweaver assets, store initial parameters\\n   * @param _firstOwner               Address of the first owner\\n   * @param _skyweaverAssetsAddress   The address of the ERC-1155 Assets Token contract\\n   * @param _silverCardFactoryAddress The address of the Silver Card Factory\\n   * @param _goldCardFactoryAddress   The address of the Gold Card Factory\\n   * @param _conquestEntryTokenId     Conquest entry token id\\n   */\\n  constructor(\\n    address _firstOwner,\\n    address _skyweaverAssetsAddress,\\n    address _silverCardFactoryAddress,\\n    address _goldCardFactoryAddress,\\n    uint256 _conquestEntryTokenId\\n  ) TieredOwnable(_firstOwner) public \\n  {\\n    require(\\n      _skyweaverAssetsAddress != address(0) &&\\n      _silverCardFactoryAddress != address(0) &&\\n      _goldCardFactoryAddress != address(0),\\n      \\\"Conquest#constructor: INVALID_INPUT\\\"\\n    );\\n\\n    // Store parameters\\n    skyweaverAssets = ISkyweaverAssets(_skyweaverAssetsAddress);\\n    silverCardFactory = IRewardFactory(_silverCardFactoryAddress);\\n    goldCardFactory = IRewardFactory(_goldCardFactoryAddress);\\n    conquestEntryID = _conquestEntryTokenId;\\n  }\\n\\n  \\n  /***********************************|\\n  |      Receiver Method Handler      |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Prevents receiving Ether or calls to unsupported methods\\n   */\\n  fallback () external {\\n    revert(\\\"Conquest#_: UNSUPPORTED_METHOD\\\");\\n  }\\n\\n  /**\\n   * @notice Players entering conquest with conquest entry token\\n   * @dev Payload is passed to and verified by onERC1155BatchReceived()\\n   */\\n  function onERC1155Received(\\n    address _operator,\\n    address _from,\\n    uint256 _id, \\n    uint256 _amount, \\n    bytes calldata _data\\n  )\\n    external override returns(bytes4)\\n  {\\n    // Convert payload to arrays to pass to onERC1155BatchReceived()\\n    uint256[] memory ids = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    ids[0] = _id;\\n    amounts[0] = _amount;\\n\\n    // Will revert call if doesn't pass\\n    onERC1155BatchReceived(_operator, _from, ids, amounts, _data);\\n    \\n    // Return success\\n    return IERC1155TokenReceiver.onERC1155Received.selector;\\n  }\\n\\n  /**\\n   * @notice Conquest entry point. Will mark user as having entered conquest if valid entry.\\n   * @param _from    Address who sent the token\\n   * @param _ids     An array containing ids of each Token being transferred\\n   * @param _amounts An array containing amounts of each Token being transferred\\n   */\\n  function onERC1155BatchReceived(\\n    address, // _operator\\n    address _from,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory // _data\\n  )\\n    public override returns(bytes4)\\n  {\\n    require(msg.sender == address(skyweaverAssets), \\\"Conquest#entry: INVALID_ENTRY_TOKEN_ADDRESS\\\");\\n    require(_ids.length == 1, \\\"Conquest#entry: INVALID_IDS_ARRAY_LENGTH\\\");\\n    require(_amounts.length == 1, \\\"Conquest#entry: INVALID_AMOUNTS_ARRAY_LENGTH\\\");\\n    require(_ids[0] == conquestEntryID, \\\"Conquest#entry: INVALID_ENTRY_TOKEN_ID\\\");\\n    require(_amounts[0] == 10**ENTRIES_DECIMALS, \\\"Conquest#entry: INVALID_ENTRY_TOKEN_AMOUNT\\\");\\n    require(!isActiveConquest[_from], \\\"Conquest#entry: PLAYER_ALREADY_IN_CONQUEST\\\");\\n    require(nextConquestTime[_from] <= block.timestamp, \\\"Conquest#entry: NEW_CONQUEST_TOO_EARLY\\\");\\n\\n    // Mark player as playing\\n    isActiveConquest[_from] = true;\\n    conquestsEntered[_from] = conquestsEntered[_from].add(1);\\n    nextConquestTime[_from] = block.timestamp.add(TIME_BETWEEN_CONQUESTS);\\n\\n    // Burn tickets\\n    skyweaverAssets.burn(conquestEntryID, 10**ENTRIES_DECIMALS);\\n\\n    // Emit event\\n    emit ConquestEntered(_from, conquestsEntered[_from]);\\n\\n    // Return success\\n    return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n  }\\n\\n\\n  /***********************************|\\n  |         Minting Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will exit user from conquest and mint tokens to user \\n   * @param _user      The address that exits conquest and receive the rewards\\n   * @param _silverIds Ids of silver cards to mint (duplicate ids if amount > 1)\\n   * @param _goldIds   Ids of gold cards to mint (duplicate ids if amount > 1)\\n   */\\n  function exitConquest(address _user, uint256[] calldata _silverIds, uint256[] calldata _goldIds)\\n    external onlyOwnerTier(1)\\n  { \\n    require(isActiveConquest[_user], \\\"Conquest#exitConquest: USER_IS_NOT_IN_CONQUEST\\\");\\n\\n    // Mark player as not playing anymore\\n    isActiveConquest[_user] = false;\\n\\n    // 0 win - 1 loss ===> 0 rewards\\n    if (_silverIds.length == 0 && _goldIds.length == 0) {\\n      /*  Do nothing if user didn't win any matches  */\\n\\n    // 1 win - 1 loss ===> 1 Silver card\\n    } else if (_silverIds.length == 1 && _goldIds.length == 0) { \\n      silverCardFactory.batchMint(_user, _silverIds, array(1, 10**CARDS_DECIMALS), \\\"\\\");\\n\\n    // 2 wins - 1 loss ===> 2 silver cards\\n    } else if (_silverIds.length == 2 && _goldIds.length == 0) { \\n      silverCardFactory.batchMint(_user, _silverIds, array(2, 10**CARDS_DECIMALS), \\\"\\\");\\n\\n    // 3 wins - 0 loss ===> 1 Silver card and 1 Gold card\\n    } else if (_silverIds.length == 1 && _goldIds.length == 1) { \\n      silverCardFactory.batchMint(_user, _silverIds, array(1, 10**CARDS_DECIMALS), \\\"\\\");\\n      goldCardFactory.batchMint(_user, _goldIds, array(1, 10**CARDS_DECIMALS), \\\"\\\");\\n\\n    // Revert for any other combination\\n    } else {\\n      revert(\\\"Conquest#exitConquest: INVALID_REWARDS\\\");\\n    }\\n  }\\n\\n  /***********************************|\\n  |         Utility Functions         |\\n  |__________________________________*/\\n\\n  /** \\n   * @notice Will create an array of uint _value of length _length\\n   * @param _length Number of elements in array\\n   * @param _value  Value to put in array at each element\\n   */\\n  function array(uint256 _length, uint256 _value) internal pure returns (uint256[] memory) {\\n    uint256[] memory a = new uint256[](_length);\\n    for (uint256 i = 0; i < _length; i++) {\\n      a[i] = _value;\\n    }\\n    return a;\\n  }\\n\\n  /**\\n   * @notice Indicates whether a contract implements a given interface.\\n   * @param interfaceID The ERC-165 interface ID that is queried for support.\\n   * @return True if contract interface is supported.\\n   */\\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n    return  interfaceID == type(IERC165).interfaceId || \\n      interfaceID == type(IERC1155TokenReceiver).interfaceId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/TieredOwnable.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\n/**\\n * @notice The TieredOwnable can assign ownership tiers to addresses,\\n * allowing inheriting contracts to choose which tier can call which function.\\n */\\ncontract TieredOwnable {\\n  uint256 constant internal HIGHEST_OWNER_TIER = 2**256-1; //Highest possible tier\\n\\n  mapping(address => uint256) internal ownerTier;\\n  event OwnershipGranted(address indexed owner, uint256 indexed previousTier, uint256 indexed newTier);\\n\\n  /**\\n   * @dev Sets the _firstOwner provided to highest owner tier\\n   * @dev _firstOwner First address to be a owner of this contract\\n   */\\n  constructor (address _firstOwner) {\\n    require(_firstOwner != address(0), \\\"TieredOwnable#constructor: INVALID_FIRST_OWNER\\\");\\n    ownerTier[_firstOwner] = HIGHEST_OWNER_TIER;\\n    emit OwnershipGranted(_firstOwner, 0, HIGHEST_OWNER_TIER);\\n  }\\n\\n  /**\\n   * @dev Throws if called by an account that's in lower ownership tier than expected\\n   */\\n  modifier onlyOwnerTier(uint256 _minTier) {\\n    require(ownerTier[msg.sender] >= _minTier, \\\"TieredOwnable#onlyOwnerTier: OWNER_TIER_IS_TOO_LOW\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Highest owners can change ownership tier of other owners\\n   * @dev Prevents changing sender's tier to ensure there is always at least one HIGHEST_OWNER_TIER owner.\\n   * @param _address Address of the owner\\n   * @param _tier    Ownership tier assigned to owner\\n   */\\n  function assignOwnership(address _address, uint256 _tier) external onlyOwnerTier(HIGHEST_OWNER_TIER) {\\n    require(_address != address(0), \\\"TieredOwnable#assignOwnership: INVALID_ADDRESS\\\");\\n    require(msg.sender != _address, \\\"TieredOwnable#assignOwnership: UPDATING_SELF_TIER\\\");\\n    emit OwnershipGranted(_address, ownerTier[_address], _tier);\\n    ownerTier[_address] = _tier;\\n  }\\n\\n  /**\\n   * @notice Returns the ownership tier of provided owner\\n   * @param _owner Owner's address to query ownership tier\\n   */\\n  function getOwnerTier(address _owner) external view returns (uint256) {\\n    return ownerTier[_owner];\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\n/**\\n * @notice This is a contract allowing contract owner to mint up to N\\n *         assets per period of 6 hours.\\n * @dev This contract should only be able to mint some assets types\\n */\\ninterface IRewardFactory {\\n\\n  // Event\\n  event PeriodMintLimitChanged(uint256 oldMintingLimit, uint256 newMintingLimit);\\n\\n  /***********************************|\\n  |         Management Methods        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will update the daily mint limit\\n   * @dev This change will take effect immediatly once executed\\n   * @param _newPeriodMintLimit Amount of assets that can be minted within a period\\n   */\\n  function updatePeriodMintLimit(uint256 _newPeriodMintLimit) external;\\n\\n\\n  /***********************************|\\n  |         Minting Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will mint tokens to user\\n   * @dev Can only mint up to the periodMintLimit in a given 6hour period\\n   * @param _to      The address that receives the assets\\n   * @param _ids     Array of Tokens ID that are minted\\n   * @param _amounts Amount of Tokens id minted for each corresponding Token id in _tokenIds\\n   * @param _data    Byte array passed to recipient if recipient is a contract\\n   */\\n  function batchMint(address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\n\\n  /***********************************|\\n  |         Utility Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Returns how many cards can currently be minted by this factory\\n   */\\n  function getAvailableSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculate the current period\\n   */\\n  function livePeriod() external view returns (uint256);\\n\\n  /**\\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\\n   *      This function MUST NOT consume more than 5,000 gas.\\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\\n   */\\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n   * @dev Multiplies two unsigned integers, reverts on overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath#mul: OVERFLOW\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath#div: DIVISION_BY_ZERO\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath#sub: UNDERFLOW\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two unsigned integers, reverts on overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath#add: OVERFLOW\\\");\\n\\n    return c; \\n  }\\n\\n  /**\\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n   * reverts when dividing by zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath#mod: DIVISION_BY_ZERO\\\");\\n    return a % b;\\n  }\\n}\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\n\\n/**\\n * @title ERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas\\n     * @param _interfaceId The interface identifier, as specified in ERC-165\\n     */\\n    function supportsInterface(bytes4 _interfaceId)\\n    external\\n    view\\n    returns (bool);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\nimport './IERC165.sol';\\n\\n\\ninterface IERC1155 is IERC165 {\\n\\n  /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\n\\n  /**\\n   * @dev MUST emit when an approval is updated\\n   */\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\n  /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n  /**\\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\\n    * @dev MUST emit TransferSingle event on success\\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n    * MUST throw if `_to` is the zero address\\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n    * MUST throw on any other error\\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    * @param _from    Source address\\n    * @param _to      Target address\\n    * @param _id      ID of the token type\\n    * @param _amount  Transfered amount\\n    * @param _data    Additional data with no specified format, sent in call to `_to`\\n    */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\n\\n  /**\\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n    * @dev MUST emit TransferBatch event on success\\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n    * MUST throw if `_to` is the zero address\\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n    * MUST throw on any other error\\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n    * @param _from     Source addresses\\n    * @param _to       Target addresses\\n    * @param _ids      IDs of each token type\\n    * @param _amounts  Transfer amounts per token type\\n    * @param _data     Additional data with no specified format, sent in call to `_to`\\n  */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return        The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @dev MUST emit the ApprovalForAll event on success\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _id        The id of the token being transferred\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _ids       An array containing ids of each token being transferred\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/tokens/ERC1155PackedBalance/ERC1155PackedBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\nimport \\\"../../utils/SafeMath.sol\\\";\\nimport \\\"../../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"../../interfaces/IERC1155.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/ERC165.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract. This implementation of the ERC-1155 standard\\n *      utilizes the fact that balances of different token ids can be concatenated within individual\\n *      uint256 storage slots. This allows the contract to batch transfer tokens more efficiently at\\n *      the cost of limiting the maximum token balance each address can hold. This limit is\\n *      2^IDS_BITS_SIZE, which can be adjusted below. In practice, using IDS_BITS_SIZE smaller than 16\\n *      did not lead to major efficiency gains.\\n */\\ncontract ERC1155PackedBalance is IERC1155, ERC165 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n  // onReceive function signatures\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  // Constants regarding bin sizes for balance packing\\n  // IDS_BITS_SIZE **MUST** be a power of 2 (e.g. 2, 4, 8, 16, 32, 64, 128)\\n  uint256 internal constant IDS_BITS_SIZE   = 32;                  // Max balance amount in bits per token ID\\n  uint256 internal constant IDS_PER_UINT256 = 256 / IDS_BITS_SIZE; // Number of ids per uint256\\n\\n  // Operations for _updateIDBalance\\n  enum Operations { Add, Sub }\\n\\n  // Token IDs balances ; balances[address][id] => balance (using array instead of mapping for efficiency)\\n  mapping (address => mapping(uint256 => uint256)) internal balances;\\n\\n  // Operators\\n  mapping (address => mapping(address => bool)) internal operators;\\n\\n\\n  /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    public override\\n  {\\n    // Requirements\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155PackedBalance#safeTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0),\\\"ERC1155PackedBalance#safeTransferFrom: INVALID_RECIPIENT\\\");\\n    // require(_amount <= balances);  Not necessary since checked with _viewUpdateBinValue() checks\\n\\n    _safeTransferFrom(_from, _to, _id, _amount);\\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @dev Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    public override\\n  {\\n    // Requirements\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155PackedBalance#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0),\\\"ERC1155PackedBalance#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\n\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n\\n  /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   */\\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    //Update balances\\n    _updateIDBalance(_from, _id, _amount, Operations.Sub); // Subtract amount from sender\\n    _updateIDBalance(_to,   _id, _amount, Operations.Add); // Add amount to recipient\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n   */\\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\\n    internal\\n  {\\n    // Check if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas:_gasLimit}(msg.sender, _from, _id, _amount, _data);\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155PackedBalance#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @dev Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   */\\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    uint256 nTransfer = _ids.length; // Number of transfer to execute\\n    require(nTransfer == _amounts.length, \\\"ERC1155PackedBalance#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\n\\n    if (_from != _to && nTransfer > 0) {\\n      // Load first bin and index where the token ID balance exists\\n      (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\\n\\n      // Balance for current bin in memory (initialized with first transfer)\\n      uint256 balFrom = _viewUpdateBinValue(balances[_from][bin], index, _amounts[0], Operations.Sub);\\n      uint256 balTo = _viewUpdateBinValue(balances[_to][bin], index, _amounts[0], Operations.Add);\\n\\n      // Last bin updated\\n      uint256 lastBin = bin;\\n\\n      for (uint256 i = 1; i < nTransfer; i++) {\\n        (bin, index) = getIDBinIndex(_ids[i]);\\n\\n        // If new bin\\n        if (bin != lastBin) {\\n          // Update storage balance of previous bin\\n          balances[_from][lastBin] = balFrom;\\n          balances[_to][lastBin] = balTo;\\n\\n          balFrom = balances[_from][bin];\\n          balTo = balances[_to][bin];\\n\\n          // Bin will be the most recent bin\\n          lastBin = bin;\\n        }\\n\\n        // Update memory balance\\n        balFrom = _viewUpdateBinValue(balFrom, index, _amounts[i], Operations.Sub);\\n        balTo = _viewUpdateBinValue(balTo, index, _amounts[i], Operations.Add);\\n      }\\n\\n      // Update storage of the last bin visited\\n      balances[_from][bin] = balFrom;\\n      balances[_to][bin] = balTo;\\n\\n    // If transfer to self, just make sure all amounts are valid\\n    } else {\\n      for (uint256 i = 0; i < nTransfer; i++) {\\n        require(balanceOf(_from, _ids[i]) >= _amounts[i], \\\"ERC1155PackedBalance#_safeBatchTransferFrom: UNDERFLOW\\\");\\n      }\\n    }\\n\\n    // Emit event\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n   */\\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\\n    internal\\n  {\\n    // Pass data if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155PackedBalance#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved)\\n    external override\\n  {\\n    // Update operator status\\n    operators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator)\\n    public override view returns (bool isOperator)\\n  {\\n    return operators[_owner][_operator];\\n  }\\n\\n\\n  /***********************************|\\n  |     Public Balance Functions      |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id)\\n    public override view returns (uint256)\\n  {\\n    uint256 bin;\\n    uint256 index;\\n\\n    //Get bin and index of _id\\n    (bin, index) = getIDBinIndex(_id);\\n    return getValueInBin(balances[_owner][bin], index);\\n  }\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders (sorted owners will lead to less gas usage)\\n   * @param _ids    ID of the Tokens (sorted ids will lead to less gas usage\\n   * @return The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n    */\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n    public override view returns (uint256[] memory)\\n  {\\n    uint256 n_owners = _owners.length;\\n    require(n_owners == _ids.length, \\\"ERC1155PackedBalance#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\n\\n    // First values\\n    (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\\n    uint256 balance_bin = balances[_owners[0]][bin];\\n    uint256 last_bin = bin;\\n\\n    // Initialization\\n    uint256[] memory batchBalances = new uint256[](n_owners);\\n    batchBalances[0] = getValueInBin(balance_bin, index);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 1; i < n_owners; i++) {\\n      (bin, index) = getIDBinIndex(_ids[i]);\\n\\n      // SLOAD if bin changed for the same owner or if owner changed\\n      if (bin != last_bin || _owners[i-1] != _owners[i]) {\\n        balance_bin = balances[_owners[i]][bin];\\n        last_bin = bin;\\n      }\\n\\n      batchBalances[i] = getValueInBin(balance_bin, index);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n\\n  /***********************************|\\n  |      Packed Balance Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Update the balance of a id for a given address\\n   * @param _address    Address to update id balance\\n   * @param _id         Id to update balance of\\n   * @param _amount     Amount to update the id balance\\n   * @param _operation  Which operation to conduct :\\n   *   Operations.Add: Add _amount to id balance\\n   *   Operations.Sub: Substract _amount from id balance\\n   */\\n  function _updateIDBalance(address _address, uint256 _id, uint256 _amount, Operations _operation)\\n    internal\\n  {\\n    uint256 bin;\\n    uint256 index;\\n\\n    // Get bin and index of _id\\n    (bin, index) = getIDBinIndex(_id);\\n\\n    // Update balance\\n    balances[_address][bin] = _viewUpdateBinValue(balances[_address][bin], index, _amount, _operation);\\n  }\\n\\n  /**\\n   * @notice Update a value in _binValues\\n   * @param _binValues  Uint256 containing values of size IDS_BITS_SIZE (the token balances)\\n   * @param _index      Index of the value in the provided bin\\n   * @param _amount     Amount to update the id balance\\n   * @param _operation  Which operation to conduct :\\n   *   Operations.Add: Add _amount to value in _binValues at _index\\n   *   Operations.Sub: Substract _amount from value in _binValues at _index\\n   */\\n  function _viewUpdateBinValue(uint256 _binValues, uint256 _index, uint256 _amount, Operations _operation)\\n    internal pure returns (uint256 newBinValues)\\n  {\\n    uint256 shift = IDS_BITS_SIZE * _index;\\n    uint256 mask = (uint256(1) << IDS_BITS_SIZE) - 1;\\n\\n    if (_operation == Operations.Add) {\\n      newBinValues = _binValues + (_amount << shift);\\n      require(newBinValues >= _binValues, \\\"ERC1155PackedBalance#_viewUpdateBinValue: OVERFLOW\\\");\\n      require(\\n        ((_binValues >> shift) & mask) + _amount < 2**IDS_BITS_SIZE, // Checks that no other id changed\\n        \\\"ERC1155PackedBalance#_viewUpdateBinValue: OVERFLOW\\\"\\n      );\\n\\n    } else if (_operation == Operations.Sub) {\\n      newBinValues = _binValues - (_amount << shift);\\n      require(newBinValues <= _binValues, \\\"ERC1155PackedBalance#_viewUpdateBinValue: UNDERFLOW\\\");\\n      require(\\n        ((_binValues >> shift) & mask) >= _amount, // Checks that no other id changed\\n        \\\"ERC1155PackedBalance#_viewUpdateBinValue: UNDERFLOW\\\"\\n      );\\n\\n    } else {\\n      revert(\\\"ERC1155PackedBalance#_viewUpdateBinValue: INVALID_BIN_WRITE_OPERATION\\\"); // Bad operation\\n    }\\n\\n    return newBinValues;\\n  }\\n\\n  /**\\n  * @notice Return the bin number and index within that bin where ID is\\n  * @param _id  Token id\\n  * @return bin index (Bin number, ID\\\"s index within that bin)\\n  */\\n  function getIDBinIndex(uint256 _id)\\n    public pure returns (uint256 bin, uint256 index)\\n  {\\n    bin = _id / IDS_PER_UINT256;\\n    index = _id % IDS_PER_UINT256;\\n    return (bin, index);\\n  }\\n\\n  /**\\n   * @notice Return amount in _binValues at position _index\\n   * @param _binValues  uint256 containing the balances of IDS_PER_UINT256 ids\\n   * @param _index      Index at which to retrieve amount\\n   * @return amount at given _index in _bin\\n   */\\n  function getValueInBin(uint256 _binValues, uint256 _index)\\n    public pure returns (uint256)\\n  {\\n    // require(_index < IDS_PER_UINT256) is not required since getIDBinIndex ensures `_index < IDS_PER_UINT256`\\n\\n    // Mask to retrieve data for a given binData\\n    uint256 mask = (uint256(1) << IDS_BITS_SIZE) - 1;\\n\\n    // Shift amount\\n    uint256 rightShift = IDS_BITS_SIZE * _index;\\n    return (_binValues >> rightShift) & mask;\\n  }\\n\\n\\n  /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID) public override(ERC165, IERC165) virtual pure returns (bool) {\\n    if (_interfaceID == type(IERC1155).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n\\n  // Default hash for EOA accounts returned by extcodehash\\n  bytes32 constant internal ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract.\\n   * @param _address address of the account to check\\n   * @return Whether the target address is a contract\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    bytes32 codehash;\\n\\n    // Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\\n    assembly { codehash := extcodehash(_address) }\\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\\n  }\\n}\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/utils/ERC165.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID`\\n   */\\n  function supportsInterface(bytes4 _interfaceID) virtual override public pure returns (bool) {\\n    return _interfaceID == this.supportsInterface.selector;\\n  }\\n}\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/tokens/ERC2981/ERC2981Global.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\nimport \\\"../../utils/ERC165.sol\\\";\\nimport \\\"../../utils/SafeMath.sol\\\";\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\n\\n/**\\n * @notice Contract return royalty information for tokens of this contract\\n * @dev This contract sets a global fee information for all token ids.\\n */\\ncontract ERC2981Global is IERC2981, ERC165 {\\n  using SafeMath for uint256;\\n\\n  struct FeeInfo {\\n    address receiver;\\n    uint256 feeBasisPoints;\\n  }\\n\\n  // Royalty Fee information struct\\n  FeeInfo public globalRoyaltyInfo;\\n\\n  /**\\n   * @notice Will set the basis point and royalty recipient that is applied to all assets\\n   * @param _receiver Fee recipient that will receive the royalty payments\\n   * @param _royaltyBasisPoints Basis points with 3 decimals representing the fee %\\n   *        e.g. a fee of 2% would be 20 (i.e. 20 / 1000 == 0.02, or 2%)\\n   */\\n  function _setGlobalRoyaltyInfo(address _receiver, uint256 _royaltyBasisPoints) internal {\\n    require(_receiver != address(0x0), \\\"ERC2981Global#_setGlobalRoyalty: RECIPIENT_IS_0x0\\\");\\n    require(_royaltyBasisPoints <= 1000, \\\"ERC2981Global#_setGlobalRoyalty: FEE_IS_ABOVE_100_PERCENT\\\");\\n    globalRoyaltyInfo.receiver = _receiver;\\n    globalRoyaltyInfo.feeBasisPoints = _royaltyBasisPoints;\\n  }\\n\\n\\n  /***********************************|\\n  |         ERC-2981 Functions        |\\n  |__________________________________*/\\n\\n    /**  \\n    * @notice Called with the sale price to determine how much royalty is owed and to whom.\\n    * @param _saleCost - the sale cost of the NFT asset specified by _tokenId\\n    * @return receiver - address of who should be sent the royalty payment\\n    * @return royaltyAmount - the royalty payment amount for _salePrice\\n    */\\n  function royaltyInfo(\\n    uint256, \\n    uint256 _saleCost\\n  ) external view override returns (address receiver, uint256 royaltyAmount) \\n  {\\n    FeeInfo memory info = globalRoyaltyInfo;\\n    return (info.receiver, _saleCost.mul(info.feeBasisPoints).div(1000));\\n  }\\n\\n\\n  /***********************************|\\n  |         ERC-165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID) public override(ERC165, IERC165) virtual pure returns (bool) {\\n    if (_interfaceID == type(IERC2981).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\nimport './IERC165.sol';\\n\\ninterface IERC2981 is IERC165 {\\n  /**  \\n    * @notice Called with the sale price to determine how much royalty is owed and to whom.\\n    * @param _tokenId - the NFT asset queried for royalty information\\n    * @param _saleCost - the sale cost of the NFT asset specified by _tokenId\\n    * @return receiver - address of who should be sent the royalty payment\\n    * @return royaltyAmount - the royalty payment amount for _salePrice\\n    */\\n  function royaltyInfo(uint256 _tokenId, uint256 _saleCost) external view returns (address receiver, uint256 royaltyAmount);\\n}\"\r\n    },\r\n    \"contracts/factories/RewardFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\nimport \\\"../utils/TieredOwnable.sol\\\";\\nimport \\\"../interfaces/ISkyweaverAssets.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/utils/SafeMath.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @notice This is a contract allowing contract owner to mint up to N \\n *         assets per period of 6 hours.\\n * @dev This contract should only be able to mint some asset types\\n */\\ncontract RewardFactory is TieredOwnable {\\n  using SafeMath for uint256;\\n\\n  /***********************************|\\n  |             Variables             |\\n  |__________________________________*/\\n\\n  // Token information\\n  ISkyweaverAssets immutable public skyweaverAssets; // ERC-1155 Skyweaver assets contract\\n\\n  // Period variables\\n  uint256 internal period;                // Current period\\n  uint256 internal availableSupply;       // Amount of assets that can currently be minted\\n  uint256 public periodMintLimit;         // Amount that can be minted within 6h\\n  uint256 immutable public PERIOD_LENGTH; // Length of each mint periods in seconds\\n\\n  // Whitelist\\n  bool internal immutable MINT_WHITELIST_ONLY;\\n  mapping(uint256 => bool) public mintWhitelist;\\n\\n  // Event\\n  event PeriodMintLimitChanged(uint256 oldMintingLimit, uint256 newMintingLimit);\\n  event AssetsEnabled(uint256[] enabledIds);\\n  event AssetsDisabled(uint256[] disabledIds);\\n  \\n  /***********************************|\\n  |            Constructor            |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Create factory, link skyweaver assets and store initial parameters\\n   * @param _firstOwner      Address of the first owner\\n   * @param _assetsAddr      The address of the ERC-1155 Assets Token contract\\n   * @param _periodLength    Number of seconds each period lasts\\n   * @param _periodMintLimit Can only mint N assets per period\\n   * @param _whitelistOnly   Whether this factory uses a mint whitelist or not\\n   */\\n  constructor(\\n    address _firstOwner,\\n    address _assetsAddr,\\n    uint256 _periodLength,\\n    uint256 _periodMintLimit,\\n    bool _whitelistOnly\\n  ) TieredOwnable(_firstOwner) public {\\n    require(\\n      _assetsAddr != address(0) &&\\n      _periodLength > 0 &&\\n      _periodMintLimit > 0,\\n      \\\"RewardFactory#constructor: INVALID_INPUT\\\"\\n    );\\n\\n    // Assets\\n    skyweaverAssets = ISkyweaverAssets(_assetsAddr);\\n\\n    // Set Period length\\n    PERIOD_LENGTH = _periodLength;\\n\\n    // Set whether this factory uses a mint whitelist or not\\n    MINT_WHITELIST_ONLY = _whitelistOnly;\\n\\n    // Set current period\\n    period = block.timestamp / _periodLength; // From livePeriod()\\n    availableSupply = _periodMintLimit;\\n\\n    // Rewards parameters\\n    periodMintLimit = _periodMintLimit;\\n    emit PeriodMintLimitChanged(0, _periodMintLimit);\\n  }\\n\\n\\n  /***********************************|\\n  |         Management Methods        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will update the daily mint limit\\n   * @dev This change will take effect immediatly once executed\\n   * @param _newPeriodMintLimit Amount of assets that can be minted within a period\\n   */\\n  function updatePeriodMintLimit(uint256 _newPeriodMintLimit) external onlyOwnerTier(HIGHEST_OWNER_TIER) {\\n    // Immediately update supply instead of waiting for next period\\n    if (availableSupply > _newPeriodMintLimit) {\\n      availableSupply = _newPeriodMintLimit;\\n    }\\n\\n    emit PeriodMintLimitChanged(periodMintLimit, _newPeriodMintLimit);\\n    periodMintLimit = _newPeriodMintLimit;\\n  }\\n\\n  /**\\n   * @notice Will enable these tokens to be minted by this factory\\n   * @param _enabledIds IDs this factory can mint\\n   */\\n  function enableMint(uint256[] calldata _enabledIds) external onlyOwnerTier(HIGHEST_OWNER_TIER) {\\n    for (uint256 i = 0; i < _enabledIds.length; i++) {\\n      mintWhitelist[_enabledIds[i]] = true;\\n    }\\n    emit AssetsEnabled(_enabledIds);\\n  }\\n\\n  /**\\n   * @notice Will prevent these ids from being minted by this factory\\n   * @param _disabledIds IDs this factory can mint\\n   */\\n  function disableMint(uint256[] calldata _disabledIds) external onlyOwnerTier(HIGHEST_OWNER_TIER) {\\n    for (uint256 i = 0; i < _disabledIds.length; i++) {\\n      mintWhitelist[_disabledIds[i]] = false;\\n    }\\n    emit AssetsDisabled(_disabledIds);\\n  }\\n\\n\\n  /***********************************|\\n  |      Receiver Method Handler      |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Prevents receiving Ether or calls to unsuported methods\\n   */\\n  fallback () external {\\n    revert(\\\"RewardFactory#_: UNSUPPORTED_METHOD\\\");\\n  }\\n\\n  /***********************************|\\n  |         Minting Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will mint tokens to user\\n   * @dev Can only mint up to the periodMintLimit in a given 6hour period\\n   * @param _to      The address that receives the assets\\n   * @param _ids     Array of Tokens ID that are minted\\n   * @param _amounts Amount of Tokens id minted for each corresponding Token id in _ids\\n   * @param _data    Byte array passed to recipient if recipient is a contract\\n   */\\n  function batchMint(address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data)\\n    external onlyOwnerTier(1)\\n  {\\n    uint256 live_period = livePeriod();\\n    uint256 stored_period = period;\\n    uint256 available_supply;\\n\\n    // Update period and refresh the available supply if period\\n    // is different, otherwise use current available supply.\\n    if (live_period == stored_period) {\\n      available_supply = availableSupply;\\n    } else {\\n      available_supply = periodMintLimit;\\n      period = live_period;\\n    }\\n\\n    // If there is an insufficient available supply, this will revert\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      available_supply = available_supply.sub(_amounts[i]);\\n      if (MINT_WHITELIST_ONLY) {\\n        require(mintWhitelist[_ids[i]], \\\"RewardFactory#batchMint: ID_IS_NOT_WHITELISTED\\\");\\n      }\\n    }\\n\\n    // Store available supply\\n    availableSupply = available_supply;\\n    \\n    // Mint assets\\n    skyweaverAssets.batchMint(_to, _ids, _amounts, _data);\\n  }\\n\\n\\n  /***********************************|\\n  |         Utility Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Returns how many cards can currently be minted by this factory\\n   */\\n  function getAvailableSupply() external view returns (uint256) {\\n    return livePeriod() == period ? availableSupply : periodMintLimit;\\n  }\\n\\n  /**\\n   * @notice Calculate the current period\\n   */\\n  function livePeriod() public view returns (uint256) {\\n    return block.timestamp / PERIOD_LENGTH;\\n  }\\n\\n  /**\\n   * @notice Indicates whether a contract implements a given interface.\\n   * @param interfaceID The ERC-165 interface ID that is queried for support.\\n   * @return True if contract interface is supported.\\n   */\\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n    return  interfaceID == type(IERC165).interfaceId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DelayedOwner.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/utils/SafeMath.sol\\\";\\n\\n/**\\n * @dev This contract allows an owner to execute registered calls after an expiration\\n *      delay has passed. This contract can then be the owner of another contract to\\n *      enforce delayed function calls.\\n * @dev Does not support passing ETH in calls for simplicity, but could be added in V2.\\n */\\ncontract DelayedOwner is Ownable {\\n  using SafeMath for uint256;\\n\\n  // Time transactions must be registered before being executable\\n  uint256 immutable internal EXECUTION_DELAY;\\n  \\n  // Mapping between transaction id and transaction hashes\\n  mapping(uint256 => bytes32) public txHashes;\\n\\n  // Events\\n  event TransactionRegistered(Transaction transaction);\\n  event TransactionCancelled(Transaction transaction);\\n  event TransactionExecuted(Transaction transaction);\\n\\n  // Transaction structure\\n  struct Transaction {\\n    Status status;       // Transaction status\\n    uint256 triggerTime; // Timestamp after which the transaction can be executed\\n    address target;      // Address of the contract to call\\n    uint256 id;          // Transaction identifier (unique)\\n    bytes data;          // calldata to pass\\n  }\\n\\n  enum Status {\\n    NotRegistered, // 0x0 - Transaction was not registered\\n    Pending,       // 0x1 - Transaction was registered but not executed\\n    Executed,      // 0x2 - Transaction was executed\\n    Cancelled      // 0x3 - Transaction was registered and cancelled\\n  }\\n\\n  /**\\n   * @dev Registers the execution delay for this contract \\n   * @param _firstOwner Address of the first owner\\n   * @param _delay Amount of time in seconds the delay will be\\n   */\\n  constructor (address _firstOwner, uint256 _delay) Ownable(_firstOwner) {\\n    EXECUTION_DELAY = _delay;\\n  }\\n\\n\\n  /***********************************|\\n  |           Core Functions          |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Register a transaction to execute post delay\\n   * @param _tx Transaction to execute\\n   */\\n  function register(Transaction memory _tx) onlyOwner() public {\\n    require(txHashes[_tx.id] == 0x0, \\\"DelayedOwner#register: TX_ALREADY_REGISTERED\\\");\\n\\n    // Set trigger time and mark transaction as pending\\n    _tx.triggerTime = block.timestamp.add(EXECUTION_DELAY);\\n    _tx.status = Status.Pending;\\n\\n    // Store transaction\\n    txHashes[_tx.id] = keccak256(abi.encode(_tx));\\n    emit TransactionRegistered(_tx);\\n  }\\n\\n  /**\\n   * @notice Cancels a transaction that was registered but not yet executed or cancelled\\n   * @param _tx Transaction to cancel\\n   */\\n  function cancel(Transaction memory _tx) onlyOwner() onlyValidWitnesses(_tx) public {\\n    require(_tx.status == Status.Pending, \\\"DelayedOwner#cancel: TX_NOT_PENDING\\\");\\n\\n    // Set status to Cancelled\\n    _tx.status = Status.Cancelled;\\n\\n    // Store transaction\\n    txHashes[_tx.id] = keccak256(abi.encode(_tx));\\n    emit TransactionCancelled(_tx);\\n  }\\n\\n  /**\\n   * @notice Will execute transaction specified\\n   * @param _tx Transaction to execute\\n   */\\n  function execute(Transaction memory _tx) onlyValidWitnesses(_tx) public {\\n    require(_tx.status == Status.Pending, \\\"DelayedOwner#execute: TX_NOT_PENDING\\\");\\n    require(_tx.triggerTime <= block.timestamp, \\\"DelayedOwne#execute: TX_NOT_YET_EXECUTABLE\\\");\\n\\n    // Mark transaction as executed, preventing re-entrancy and replay\\n    _tx.status = Status.Executed;\\n\\n    // Store transaction\\n    txHashes[_tx.id] = keccak256(abi.encode(_tx));\\n\\n    // Execute transaction\\n    (bool success,) = _tx.target.call(_tx.data);\\n    require(success, \\\"DelayedOwner#execute: TX_FAILED\\\");\\n    emit TransactionExecuted(_tx); \\n  }\\n\\n\\n  /***********************************|\\n  |         Utility Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Verify if provided transaction object matches registered transaction\\n   * @param _tx Transaction to validate\\n   */\\n  function isValidWitness(Transaction memory _tx) public view returns (bool isValid) {\\n    return txHashes[_tx.id] == keccak256(abi.encode(_tx));\\n  }\\n\\n  /**\\n   * @notice Will enforce that the provided transaction witness is valid\\n   * @param _tx Transaction to validate\\n   */\\n  modifier onlyValidWitnesses(Transaction memory _tx) {\\n    require(\\n      isValidWitness(_tx),\\n      \\\"DelayedOwner#onlyValidWitnesses: INVALID_TX_WITNESS\\\"\\n    );\\n\\n    _;\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address internal owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the specied address\\n   * @param _firstOwner Address of the first owner\\n   */\\n  constructor (address _firstOwner) {\\n    owner = _firstOwner;\\n    emit OwnershipTransferred(address(0), _firstOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the master owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Ownable#onlyOwner: SENDER_IS_NOT_OWNER\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfers the ownership of the contract to new address\\n   * @param _newOwner Address of the new owner\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    require(_newOwner != address(0), \\\"Ownable#transferOwnership: INVALID_ADDRESS\\\");\\n    owner = _newOwner;\\n    emit OwnershipTransferred(owner, _newOwner);\\n  }\\n\\n  /**\\n   * @notice Returns the address of the owner.\\n   */\\n  function getOwner() public view returns (address) {\\n    return owner;\\n  }\\n\\n}\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/tokens/ERC1155PackedBalance/ERC1155MintBurnPackedBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\nimport \\\"./ERC1155PackedBalance.sol\\\";\\n\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions.\\n */\\ncontract ERC1155MintBurnPackedBalance is ERC1155PackedBalance {\\n\\n  /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Mint _amount of tokens of a given id\\n   * @param _to      The address to mint tokens to\\n   * @param _id      Token id to mint\\n   * @param _amount  The amount to be minted\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    internal\\n  {\\n    //Add _amount\\n    _updateIDBalance(_to,   _id, _amount, Operations.Add); // Add amount to recipient\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Mint tokens for each (_ids[i], _amounts[i]) pair\\n   * @param _to       The address to mint tokens to\\n   * @param _ids      Array of ids to mint\\n   * @param _amounts  Array of amount of tokens to mint per id\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurnPackedBalance#_batchMint: INVALID_ARRAYS_LENGTH\\\");\\n\\n    if (_ids.length > 0) {\\n      // Load first bin and index where the token ID balance exists\\n      (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\\n\\n      // Balance for current bin in memory (initialized with first transfer)\\n      uint256 balTo = _viewUpdateBinValue(balances[_to][bin], index, _amounts[0], Operations.Add);\\n\\n      // Number of transfer to execute\\n      uint256 nTransfer = _ids.length;\\n\\n      // Last bin updated\\n      uint256 lastBin = bin;\\n\\n      for (uint256 i = 1; i < nTransfer; i++) {\\n        (bin, index) = getIDBinIndex(_ids[i]);\\n\\n        // If new bin\\n        if (bin != lastBin) {\\n          // Update storage balance of previous bin\\n          balances[_to][lastBin] = balTo;\\n          balTo = balances[_to][bin];\\n\\n          // Bin will be the most recent bin\\n          lastBin = bin;\\n        }\\n\\n        // Update memory balance\\n        balTo = _viewUpdateBinValue(balTo, index, _amounts[i], Operations.Add);\\n      }\\n\\n      // Update storage of the last bin visited\\n      balances[_to][bin] = balTo;\\n    }\\n\\n    // //Emit event\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n\\n  /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Burn _amount of tokens of a given token id\\n   * @param _from    The address to burn tokens from\\n   * @param _id      Token id to burn\\n   * @param _amount  The amount to be burned\\n   */\\n  function _burn(address _from, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    // Substract _amount\\n    _updateIDBalance(_from, _id, _amount, Operations.Sub);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n   * @dev This batchBurn method does not implement the most efficient way of updating\\n   *      balances to reduce the potential bug surface as this function is expected to\\n   *      be less common than transfers. EIP-2200 makes this method significantly\\n   *      more efficient already for packed balances.\\n   * @param _from     The address to burn tokens from\\n   * @param _ids      Array of token ids to burn\\n   * @param _amounts  Array of the amount to be burned\\n   */\\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    // Number of burning to execute\\n    uint256 nBurn = _ids.length;\\n    require(nBurn == _amounts.length, \\\"ERC1155MintBurnPackedBalance#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Executing all burning\\n    for (uint256 i = 0; i < nBurn; i++) {\\n      // Update storage balance\\n      _updateIDBalance(_from,   _ids[i], _amounts[i], Operations.Sub); // Add amount to recipient\\n    }\\n\\n    // Emit batch burn event\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n  }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/tokens/ERC1155/ERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\nimport \\\"../../interfaces/IERC1155Metadata.sol\\\";\\nimport \\\"../../utils/ERC165.sol\\\";\\n\\n\\n/**\\n * @notice Contract that handles metadata related methods.\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\n *      Methods also assume that URI uses hex representation of token IDs.\\n */\\ncontract ERC1155Metadata is IERC1155Metadata, ERC165 {\\n  // URI's default URI prefix\\n  string public baseURI;\\n  string public name;\\n\\n  // set the initial name and base URI\\n  constructor(string memory _name, string memory _baseURI) {\\n    name = _name;\\n    baseURI = _baseURI;\\n  }\\n\\n  /***********************************|\\n  |     Metadata Public Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n   * @dev URIs are defined in RFC 3986.\\n   *      URIs are assumed to be deterministically generated based on token ID\\n   * @return URI string\\n   */\\n  function uri(uint256 _id) public override view returns (string memory) {\\n    return string(abi.encodePacked(baseURI, _uint2str(_id), \\\".json\\\"));\\n  }\\n\\n\\n  /***********************************|\\n  |    Metadata Internal Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will emit default URI log event for corresponding token _id\\n   * @param _tokenIDs Array of IDs of tokens to log default URI\\n   */\\n  function _logURIs(uint256[] memory _tokenIDs) internal {\\n    string memory baseURL = baseURI;\\n    string memory tokenURI;\\n\\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \\\".json\\\"));\\n      emit URI(tokenURI, _tokenIDs[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Will update the base URL of token's URI\\n   * @param _newBaseMetadataURI New base URL of token's URI\\n   */\\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\\n    baseURI = _newBaseMetadataURI;\\n  }\\n\\n  /**\\n   * @notice Will update the name of the contract\\n   * @param _newName New contract name\\n   */\\n  function _setContractName(string memory _newName) internal {\\n    name = _newName;\\n  }\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID) public override virtual pure returns (bool) {\\n    if (_interfaceID == type(IERC1155Metadata).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n\\n\\n  /***********************************|\\n  |    Utility Internal Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Convert uint256 to string\\n   * @param _i Unsigned integer to convert to string\\n   */\\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n\\n    uint256 j = _i;\\n    uint256 ii = _i;\\n    uint256 len;\\n\\n    // Get number of bytes\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len - 1;\\n\\n    // Get each individual ASCII\\n    while (ii != 0) {\\n      bstr[k--] = byte(uint8(48 + ii % 10));\\n      ii /= 10;\\n    }\\n\\n    // Convert to string\\n    return string(bstr);\\n  }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/interfaces/IERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\n\\ninterface IERC1155Metadata {\\n\\n  event URI(string _uri, uint256 indexed _id);\\n\\n  /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n   * @dev URIs are defined in RFC 3986.\\n   *      URIs are assumed to be deterministically generated based on token ID\\n   *      Token IDs are assumed to be represented in their hex format in URIs\\n   * @return URI string\\n   */\\n  function uri(uint256 _id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/mocks/ERC1155MintBurnMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../tokens/ERC1155/ERC1155MintBurn.sol\\\";\\nimport \\\"../tokens/ERC1155/ERC1155Metadata.sol\\\";\\n\\n\\ncontract ERC1155MintBurnMock is ERC1155MintBurn, ERC1155Metadata {\\n\\n  // set the initial name and base URI\\n  constructor(string memory _name, string memory _baseURI) ERC1155Metadata(_name, _baseURI) {}\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @dev Parent contract inheriting multiple contracts with supportsInterface()\\n   *      need to implement an overriding supportsInterface() function specifying\\n   *      all inheriting contracts that have a supportsInterface() function.\\n   * @param _interfaceID The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID`\\n   */\\n  function supportsInterface(\\n    bytes4 _interfaceID\\n  ) public override(\\n    ERC1155,\\n    ERC1155Metadata\\n  ) pure virtual returns (bool) {\\n    return super.supportsInterface(_interfaceID);\\n  }\\n\\n  /***********************************|\\n  |         Minting Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @dev Mint _value of tokens of a given id\\n   * @param _to The address to mint tokens to.\\n   * @param _id token id to mint\\n   * @param _value The amount to be minted\\n   * @param _data Data to be passed if receiver is contract\\n   */\\n  function mintMock(address _to, uint256 _id, uint256 _value, bytes memory _data)\\n    public\\n  {\\n    super._mint(_to, _id, _value, _data);\\n  }\\n\\n  /**\\n   * @dev Mint tokens for each ids in _ids\\n   * @param _to The address to mint tokens to.\\n   * @param _ids Array of ids to mint\\n   * @param _values Array of amount of tokens to mint per id\\n   * @param _data Data to be passed if receiver is contract\\n   */\\n  function batchMintMock(address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data)\\n    public\\n  {\\n    super._batchMint(_to, _ids, _values, _data);\\n  }\\n\\n\\n  /***********************************|\\n  |         Burning Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @dev burn _value of tokens of a given token id\\n   * @param _from The address to burn tokens from.\\n   * @param _id token id to burn\\n   * @param _value The amount to be burned\\n   */\\n  function burnMock(address _from, uint256 _id, uint256 _value)\\n    public\\n  {\\n    super._burn(_from, _id, _value);\\n  }\\n\\n  /**\\n   * @dev burn _value of tokens of a given token id\\n   * @param _from The address to burn tokens from.\\n   * @param _ids Array of token ids to burn\\n   * @param _values Array of the amount to be burned\\n   */\\n  function batchBurnMock(address _from, uint256[] memory _ids, uint256[] memory _values)\\n    public\\n  {\\n    super._batchBurn(_from, _ids, _values);\\n  }\\n  \\n  /***********************************|\\n  |       Unsupported Functions       |\\n  |__________________________________*/\\n\\n  fallback () virtual external {\\n    revert(\\\"ERC1155MetaMintBurnMock: INVALID_METHOD\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/tokens/ERC1155/ERC1155MintBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\nimport \\\"./ERC1155.sol\\\";\\n\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions\\n */\\ncontract ERC1155MintBurn is ERC1155 {\\n  using SafeMath for uint256;\\n\\n  /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Mint _amount of tokens of a given id\\n   * @param _to      The address to mint tokens to\\n   * @param _id      Token id to mint\\n   * @param _amount  The amount to be minted\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    internal\\n  {\\n    // Add _amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Mint tokens for each ids in _ids\\n   * @param _to       The address to mint tokens to\\n   * @param _ids      Array of ids to mint\\n   * @param _amounts  Array of amount of tokens to mint per id\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of mints to execute\\n    uint256 nMint = _ids.length;\\n\\n     // Executing all minting\\n    for (uint256 i = 0; i < nMint; i++) {\\n      // Update storage balance\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n\\n  /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Burn _amount of tokens of a given token id\\n   * @param _from    The address to burn tokens from\\n   * @param _id      Token id to burn\\n   * @param _amount  The amount to be burned\\n   */\\n  function _burn(address _from, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    //Substract _amount\\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n   * @param _from     The address to burn tokens from\\n   * @param _ids      Array of token ids to burn\\n   * @param _amounts  Array of the amount to be burned\\n   */\\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    // Number of mints to execute\\n    uint256 nBurn = _ids.length;\\n    require(nBurn == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Executing all minting\\n    for (uint256 i = 0; i < nBurn; i++) {\\n      // Update storage balance\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n  }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/erc-1155/contracts/tokens/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\nimport \\\"../../utils/SafeMath.sol\\\";\\nimport \\\"../../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"../../interfaces/IERC1155.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/ERC165.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract\\n */\\ncontract ERC1155 is IERC1155, ERC165 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n  // onReceive function signatures\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  // Objects balances\\n  mapping (address => mapping(uint256 => uint256)) internal balances;\\n\\n  // Operator Functions\\n  mapping (address => mapping(address => bool)) internal operators;\\n\\n\\n  /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    public override\\n  {\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\n    // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\\n\\n    _safeTransferFrom(_from, _to, _id, _amount);\\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    public override\\n  {\\n    // Requirements\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\n\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n\\n  /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   */\\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    // Update balances\\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n   */\\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\\n    internal\\n  {\\n    // Check if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas: _gasLimit}(msg.sender, _from, _id, _amount, _data);\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   */\\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of transfer to execute\\n    uint256 nTransfer = _ids.length;\\n\\n    // Executing all transfers\\n    for (uint256 i = 0; i < nTransfer; i++) {\\n      // Update storage balance of previous bin\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit event\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n   */\\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\\n    internal\\n  {\\n    // Pass data if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved)\\n    external override\\n  {\\n    // Update operator status\\n    operators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator)\\n    public override view returns (bool isOperator)\\n  {\\n    return operators[_owner][_operator];\\n  }\\n\\n\\n  /***********************************|\\n  |         Balance Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id)\\n    public override view returns (uint256)\\n  {\\n    return balances[_owner][_id];\\n  }\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n    public override view returns (uint256[] memory)\\n  {\\n    require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\n\\n    // Variables\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < _owners.length; i++) {\\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n\\n  /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID) public override(ERC165, IERC165) virtual pure returns (bool) {\\n    if (_interfaceID == type(IERC1155).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/factories/ConquestEntriesFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\nimport \\\"../utils/TieredOwnable.sol\\\";\\nimport \\\"../interfaces/ISkyweaverAssets.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/utils/SafeMath.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\n/**\\n * @notice Allows players to convert their silver cards and Wrapped DAI (wDAI) to conquest entries.\\n *\\n * @dev Assumes both cards and entries have the same number of decimals, if not, need to change\\n * the amount minted.\\n * \\n * @dev This contract should only be able to mint conquest entries.\\n */\\ncontract ConquestEntriesFactory is IERC1155TokenReceiver, TieredOwnable {\\n  using SafeMath for uint256;\\n  \\n  /***********************************|\\n  |             Variables             |\\n  |__________________________________*/\\n\\n  // Assets\\n  ISkyweaverAssets immutable public skyweaverAssets; // ERC-1155 Skyweaver assets contract\\n  IERC1155 immutable internal wDai;                  // ERC-1155 Wrapped DAI contract\\n  uint256 immutable public wDaiID;                   // ID of wDAI token in respective ERC-1155 contract\\n  uint256 immutable public silverRangeMin;           // Lower bound for the range of asset IDs that can be converted to entries\\n  uint256 immutable public silverRangeMax;           // Upper bound for the range of asset IDs that can be converted to entries\\n\\n  // Conquest entry token id\\n  uint256 immutable public conquestEntryID; \\n\\n  // Parameters\\n  uint256 constant internal CARD_DECIMALS = 2;                     // Number of decimals cards have\\n  uint256 constant internal ENTRIES_DECIMALS = 2;                  // Number of decimals entries have\\n  uint256 constant internal wDAI_DECIMALS = 6;                    // Number of decimals wDAI have\\n  uint256 constant internal wDAI_REQUIRED = 15 * 10**(wDAI_DECIMALS-1); // 1.5 wDAI for 1 conquest entry (after decimals)\\n\\n\\n  /***********************************|\\n  |            Constructor            |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Create factory, link skyweaver assets and store initial parameters\\n   * @param _firstOwner             Address of the first owner\\n   * @param _skyweaverAssetsAddress The address of the ERC-1155 Assets Token contract\\n   * @param _wDaiAddress            The address of the ERC-1155 Wrapped DAI\\n   * @param _wDaiID                 Wrapped DAI token id\\n   * @param _conquestEntryTokenId   Conquest entry token id\\n   * @param _silverRangeMin         Minimum id for silver cards\\n   * @param _silverRangeMax         Maximum id for silver cards\\n   */\\n  constructor(\\n    address _firstOwner,\\n    address _skyweaverAssetsAddress,\\n    address _wDaiAddress,\\n    uint256 _wDaiID,\\n    uint256 _conquestEntryTokenId,\\n    uint256 _silverRangeMin,\\n    uint256 _silverRangeMax\\n  ) TieredOwnable(_firstOwner) public \\n  {\\n    require(\\n      _skyweaverAssetsAddress != address(0) && \\n      _wDaiAddress != address(0) &&\\n      _silverRangeMin < _silverRangeMax,\\n      \\\"ConquestEntriesFactory#constructor: INVALID_INPUT\\\"\\n    );\\n\\n    // Assets\\n    skyweaverAssets = ISkyweaverAssets(_skyweaverAssetsAddress);\\n    wDai = IERC1155(_wDaiAddress);\\n    wDaiID = _wDaiID;\\n    conquestEntryID = _conquestEntryTokenId;\\n    silverRangeMin = _silverRangeMin;\\n    silverRangeMax = _silverRangeMax;\\n  }\\n\\n  \\n  /***********************************|\\n  |      Receiver Method Handler      |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Prevents receiving Ether or calls to unsuported methods\\n   */\\n  fallback () external {\\n    revert(\\\"ConquestEntriesFactory#_: UNSUPPORTED_METHOD\\\");\\n  }\\n\\n  /**\\n   * @notice Players converting silver cards to conquest entries\\n   * @dev Payload is passed to and verified by onERC1155BatchReceived()\\n   */\\n  function onERC1155Received(\\n    address _operator,\\n    address _from,\\n    uint256 _id, \\n    uint256 _amount, \\n    bytes calldata _data\\n  )\\n    external override returns(bytes4)\\n  {\\n    // Convert payload to arrays to pass to onERC1155BatchReceived()\\n    uint256[] memory ids = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    ids[0] = _id;\\n    amounts[0] = _amount;\\n\\n    // Will revert call if doesn't pass\\n    onERC1155BatchReceived(_operator, _from, ids, amounts, _data);\\n    \\n    // Return success\\n    return IERC1155TokenReceiver.onERC1155Received.selector;\\n  }\\n\\n  /**\\n   * @notice Players converting silver cards or wDAIs to conquest entries\\n   * @param _from    Address who sent the token\\n   * @param _ids     An array containing ids of each Token being transferred\\n   * @param _amounts An array containing amounts of each Token being transferred\\n   * @param _data    If data is provided, it should be address who will receive the entries\\n   */\\n  function onERC1155BatchReceived(\\n    address, // _operator\\n    address _from,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  )\\n    public override returns(bytes4)\\n  { \\n    // Number of entries to mint\\n    uint256 n_entries = 0; \\n\\n    // Burn cards or store wDAI\\n    if (msg.sender == address(skyweaverAssets)) {\\n      \\n      // Validate IDs and count number of entries to mint\\n      for (uint256 i = 0; i < _ids.length; i++) {\\n        require(\\n          silverRangeMin <= _ids[i] && _ids[i] <= silverRangeMax, \\n          \\\"ConquestEntriesFactory#onERC1155BatchReceived: ID_IS_OUT_OF_RANGE\\\"\\n        );\\n        n_entries = n_entries.add(_amounts[i]);\\n      }\\n      // Account for cards decimals\\n      n_entries = n_entries.div(10**CARD_DECIMALS);\\n\\n      // Burn silver cards received\\n      skyweaverAssets.batchBurn(_ids, _amounts);\\n\\n    } else if (msg.sender == address(wDai)) {\\n      require(_ids.length == 1, \\\"ConquestEntriesFactory#onERC1155BatchReceived: INVALID_ARRAY_LENGTH\\\");\\n      require(_ids[0] == wDaiID, \\\"ConquestEntriesFactory#onERC1155BatchReceived: INVALID_wDAI_ID\\\");\\n      n_entries = _amounts[0] / wDAI_REQUIRED; \\n\\n      // Do nothing else. wDAIs are stored until withdrawn\\n\\n    } else {\\n      revert(\\\"ConquestEntriesFactory#onERC1155BatchReceived: INVALID_TOKEN_ADDRESS\\\");\\n    }\\n\\n    // If an address is specified in _data, use it as receiver, otherwise use _from address\\n    address receiver = _data.length > 0 ? abi.decode(_data, (address)) : _from;\\n\\n    // Mint conquest entries (with decimals)\\n    skyweaverAssets.mint(receiver, conquestEntryID, n_entries*10**ENTRIES_DECIMALS, \\\"\\\");\\n\\n    // Return success\\n    return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n  }\\n\\n  /**\\n   * @notice Send current wDAI balance of this contract to recipient\\n   * @param _recipient Address where the currency will be sent to\\n   * @param _data      Data to pass with transfer function\\n   */\\n  function withdraw(address _recipient, bytes calldata _data) external onlyOwnerTier(HIGHEST_OWNER_TIER) {\\n    require(_recipient != address(0x0), \\\"ConquestEntriesFactory#withdraw: INVALID_RECIPIENT\\\");\\n    uint256 this_balance = wDai.balanceOf(address(this), wDaiID);\\n    wDai.safeTransferFrom(address(this), _recipient, wDaiID, this_balance, _data);\\n  }\\n\\n\\n  /***********************************|\\n  |         Utility Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Indicates whether a contract implements a given interface.\\n   * @param interfaceID The ERC-165 interface ID that is queried for support.\\n   * @return True if contract interface is supported.\\n   */\\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n    return  interfaceID == type(IERC165).interfaceId || \\n      interfaceID == type(IERC1155TokenReceiver).interfaceId;\\n  }\\n}\"\r\n    },\r\n    \"contracts/mocks/FactoryMock.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\nimport \\\"../interfaces/ISkyweaverAssets.sol\\\";\\n\\ncontract FactoryMock {\\n\\n  ISkyweaverAssets internal skyweaverAssets; //SkyWeaver Curencies Factory Manager Contract\\n\\n  constructor(address _factoryManagerAddr) public {\\n    skyweaverAssets = ISkyweaverAssets(_factoryManagerAddr);\\n  }\\n\\n  function batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data) public\\n  {\\n    skyweaverAssets.batchMint(_to, _ids, _amounts, _data);\\n  }\\n\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data) public\\n  {\\n    skyweaverAssets.mint(_to, _id, _amount, _data);\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/factories/FreemintFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\n\\nimport \\\"../utils/TieredOwnable.sol\\\";\\nimport \\\"../interfaces/ISkyweaverAssets.sol\\\";\\nimport \\\"@0xsequence/erc-1155/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * This is a contract allowing owner to mint any tokens within a given\\n * range. This factory will be used to mint community related assets, special\\n * event assets that are meant to be given away.\\n */\\ncontract FreemintFactory is TieredOwnable {\\n\\n  // ERC-1155 Skyweaver assets contract\\n  ISkyweaverAssets internal skyweaverAssets;\\n\\n  /***********************************|\\n  |            Constructor            |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Create factory & link skyweaver assets\\n   * @param _firstOwner Address of the first owner\\n   * @param _assetsAddr The address of the ERC-1155 Assets Token contract\\n   */\\n  constructor(address _firstOwner, address _assetsAddr) TieredOwnable(_firstOwner) public {\\n    require(\\n      _assetsAddr != address(0),\\n      \\\"FreemintFactory#constructor: INVALID_INPUT\\\"\\n    );\\n    skyweaverAssets = ISkyweaverAssets(_assetsAddr);\\n  }\\n\\n\\n  /***********************************|\\n  |         Minting Function          |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will mint a bundle of tokens to users\\n   * @param _recipients Arrays of addresses to mint _amounts of _ids\\n   * @param _ids        Array of Tokens ID that are minted\\n   * @param _amounts    Amount of Tokens id minted for each corresponding Token id in _ids\\n   */\\n  function batchMint(address[] calldata _recipients, uint256[] calldata _ids, uint256[] calldata _amounts)\\n    external onlyOwnerTier(1)\\n  {\\n    for (uint256 i = 0 ; i < _recipients.length; i++) {\\n      skyweaverAssets.batchMint(_recipients[i], _ids, _amounts, \\\"\\\");\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |          Misc Functions           |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Returns the address of the  skyweaver assets contract\\n   */\\n  function getSkyweaverAssets() external view returns (address) {\\n    return address(skyweaverAssets);\\n  }\\n\\n  /**\\n   * @notice Prevents receiving Ether, ERC-1155 or calls to unsuported methods\\n   */\\n  fallback () external {\\n    revert(\\\"FreemintFactory#_: UNSUPPORTED_METHOD\\\");\\n  }\\n\\n  /**\\n   * @notice Indicates whether a contract implements a given interface.\\n   * @param interfaceID The ERC-165 interface ID that is queried for support.\\n   * @return True if contract interface is supported.\\n   */\\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n    return  interfaceID == type(IERC165).interfaceId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/TieredOwnableMock.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"../utils/TieredOwnable.sol\\\";\\n\\ncontract TieredOwnableMock is TieredOwnable {\\n\\n  constructor(address _firstOwner) TieredOwnable(_firstOwner) public {}\\n\\n  function onlyMaxTier() external onlyOwnerTier(HIGHEST_OWNER_TIER) returns(bool) {\\n    return true;\\n  }\\n\\n  function onlyTierFive() external onlyOwnerTier(5) returns(bool) {\\n    return true;\\n  }\\n\\n  function onlyTierZero() external onlyOwnerTier(0) returns(bool) {\\n    return true;\\n  }\\n\\n  function anyone() external returns(bool) {\\n    return true;\\n  }\\n}\"\r\n    },\r\n    \"contracts/mocks/ERC1155Mock.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"@0xsequence/erc-1155/contracts/mocks/ERC1155MintBurnMock.sol\\\";\\n\\ncontract ERC1155Mock is ERC1155MintBurnMock {\\n\\n  constructor() ERC1155MintBurnMock('ERC1155Mock', \\\"\\\") {}\\n\\n}\"\r\n    },\r\n    \"contracts/mocks/OwnableMock.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\ncontract OwnableMock is Ownable {\\n\\n  constructor(address _firstOwner) Ownable(_firstOwner) public {}\\n\\n  function call_onlyOwner() external onlyOwner() returns(bool) {\\n    return true;\\n  }\\n  function call_anyone() external returns(bool) {\\n    return true;\\n  }\\n\\n  function call_throw() external returns(bool) {\\n    revert(\\\":/\\\");\\n    return true;\\n  }\\n\\n  fallback() external {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"constantOptimizer\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"FactoryActivation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"FactoryShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newMaxIssuances\",\"type\":\"uint256[]\"}],\"name\":\"MaxIssuancesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct SkyweaverAssets.AssetRange\",\"name\":\"new_range\",\"type\":\"tuple\"}],\"name\":\"MintPermissionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct SkyweaverAssets.AssetRange\",\"name\":\"deleted_range\",\"type\":\"tuple\"}],\"name\":\"MintPermissionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct SkyweaverAssets.AssetRange\",\"name\":\"locked_range\",\"type\":\"tuple\"}],\"name\":\"RangeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"activateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maxRange\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"}],\"name\":\"addMintPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getCurrentIssuances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getFactoryAccessRanges\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct SkyweaverAssets.AssetRange[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getFactoryStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getIDBinIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedRanges\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct SkyweaverAssets.AssetRange[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getMaxIssuances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_binValues\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getValueInBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct SkyweaverAssets.AssetRange\",\"name\":\"_range\",\"type\":\"tuple\"}],\"name\":\"lockRangeMintPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"logURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rangeIndex\",\"type\":\"uint256\"}],\"name\":\"removeMintPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleCost\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setGlobalRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newMaxIssuances\",\"type\":\"uint256[]\"}],\"name\":\"setMaxIssuances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"shutdownFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SkyweaverAssets", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000bd8ea13981ded8038224e9c32607131ac3d8492d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb1372790e40e3e548bbc115377592682a7efd66fc87555aa190c17a7e2027e8"}