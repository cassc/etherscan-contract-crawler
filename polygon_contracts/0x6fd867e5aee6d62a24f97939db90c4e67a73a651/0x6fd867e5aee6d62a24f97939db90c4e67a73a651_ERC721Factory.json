{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC721Factory.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\nimport \\\"./utils/Deployer.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/IERC721Template.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20Template.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n/**\\n * @title DTFactory contract\\n * @author Ocean Protocol Team\\n *\\n * @dev Implementation of Ocean datatokens Factory\\n *\\n *      DTFactory deploys datatoken proxy contracts.\\n *      New datatoken proxy contracts are links to the template contract's bytecode.\\n *      Proxy contract functionality is based on Ocean Protocol custom implementation of ERC1167 standard.\\n */\\ncontract ERC721Factory is Deployer, Ownable, ReentrancyGuard, IFactory {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    uint256 private currentNFTCount;\\n    address private erc20Factory;\\n    uint256 private nftTemplateCount;\\n\\n    struct Template {\\n        address templateAddress;\\n        bool isActive;\\n    }\\n\\n    mapping(uint256 => Template) public nftTemplateList;\\n\\n    mapping(uint256 => Template) public templateList;\\n\\n    mapping(address => address) public erc721List;\\n\\n    mapping(address => bool) public erc20List;\\n\\n    event NFTCreated(\\n        address newTokenAddress,\\n        address indexed templateAddress,\\n        string tokenName,\\n        address indexed admin,\\n        string symbol,\\n        string tokenURI,\\n        bool transferable,\\n        address indexed creator\\n    );\\n\\n       uint256 private currentTokenCount = 0;\\n    uint256 public templateCount;\\n    address public router;\\n\\n    event Template721Added(address indexed _templateAddress, uint256 indexed nftTemplateCount);\\n    event Template20Added(address indexed _templateAddress, uint256 indexed nftTemplateCount);\\n  //stored here only for ABI reasons\\n    event TokenCreated(\\n        address indexed newTokenAddress,\\n        address indexed templateAddress,\\n        string name,\\n        string symbol,\\n        uint256 cap,\\n        address creator\\n    );  \\n    \\n    event NewPool(\\n        address poolAddress,\\n        address ssContract,\\n        address baseTokenAddress\\n    );\\n\\n\\n    event NewFixedRate(bytes32 exchangeId, address indexed owner, address exchangeContract, address indexed baseToken);\\n    event NewDispenser(address dispenserContract);\\n\\n    event DispenserCreated(  // emited when a dispenser is created\\n        address indexed datatokenAddress,\\n        address indexed owner,\\n        uint256 maxTokens,\\n        uint256 maxBalance,\\n        address allowedSwapper\\n    );\\n    \\n    // erc721 transfer event, stored here just for readability\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev constructor\\n     *      Called on contract deployment. Could not be called with zero address parameters.\\n     * @param _template721 refers to the address of ERC721 template\\n     * @param _template refers to the address of a deployed datatoken contract.\\n     * @param _router router contract address\\n     */\\n    constructor(\\n        address _template721,\\n        address _template,\\n        address _router\\n    ) {\\n        require(\\n            _template != address(0) &&\\n                _router != address(0) &&\\n                _template721 != address(0),\\n            \\\"ERC721DTFactory: Invalid template/router address\\\"\\n        );\\n        add721TokenTemplate(_template721);\\n        addTokenTemplate(_template);\\n        router = _router;\\n    }\\n\\n\\n    /**\\n     * @dev deployERC721Contract\\n     *      \\n     * @param name NFT name\\n     * @param symbol NFT Symbol\\n     * @param _templateIndex template index we want to use\\n     * @param additionalERC20Deployer if != address(0), we will add it with ERC20Deployer role\\n     * @param additionalMetaDataUpdater if != address(0), we will add it with updateMetadata role\\n     * @param transferable if NFT is transferable. Cannot be changed afterwards\\n     * @param owner owner of the NFT\\n     */\\n\\n    function deployERC721Contract(\\n        string memory name,\\n        string memory symbol,\\n        uint256 _templateIndex,\\n        address additionalERC20Deployer,\\n        address additionalMetaDataUpdater,\\n        string memory tokenURI,\\n        bool transferable,\\n        address owner\\n    ) public returns (address token) {\\n        require(\\n            _templateIndex <= nftTemplateCount && _templateIndex != 0,\\n            \\\"ERC721DTFactory: Template index doesnt exist\\\"\\n        );\\n        Template memory tokenTemplate = nftTemplateList[_templateIndex];\\n\\n        require(\\n            tokenTemplate.isActive,\\n            \\\"ERC721DTFactory: ERC721Token Template disabled\\\"\\n        );\\n        require(\\n            owner!=address(0),\\n            \\\"ERC721DTFactory: address(0) cannot be owner\\\"\\n        );\\n        token = deploy(tokenTemplate.templateAddress);\\n\\n        require(\\n            token != address(0),\\n            \\\"ERC721DTFactory: Failed to perform minimal deploy of a new token\\\"\\n        );\\n       \\n        erc721List[token] = token;\\n        emit NFTCreated(token, tokenTemplate.templateAddress, name, owner, symbol, tokenURI, transferable, msg.sender);\\n        currentNFTCount += 1;\\n        IERC721Template tokenInstance = IERC721Template(token);\\n        require(\\n            tokenInstance.initialize(\\n                owner,\\n                name,\\n                symbol,\\n                address(this),\\n                additionalERC20Deployer,\\n                additionalMetaDataUpdater,\\n                tokenURI,\\n                transferable\\n            ),\\n            \\\"ERC721DTFactory: Unable to initialize token instance\\\"\\n        );\\n\\n        \\n    }\\n    \\n    /**\\n     * @dev get the current token count.\\n     * @return the current token count\\n     */\\n    function getCurrentNFTCount() external view returns (uint256) {\\n        return currentNFTCount;\\n    }\\n\\n    /**\\n     * @dev get the token template Object\\n     * @param _index template Index\\n     * @return the template struct\\n     */\\n    function getNFTTemplate(uint256 _index)\\n        external\\n        view\\n        returns (Template memory)\\n    {\\n        Template memory template = nftTemplateList[_index];\\n        return template;\\n    }\\n\\n      /**\\n     * @dev add a new NFT Template.\\n      Only Factory Owner can call it\\n     * @param _templateAddress new template address\\n     * @return the actual template count\\n     */\\n    \\n    function add721TokenTemplate(address _templateAddress)\\n        public\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        require(\\n            _templateAddress != address(0),\\n            \\\"ERC721DTFactory: ERC721 template address(0) NOT ALLOWED\\\"\\n        );\\n        require(_isContract(_templateAddress), \\\"ERC721Factory: NOT CONTRACT\\\");\\n        nftTemplateCount += 1;\\n        Template memory template = Template(_templateAddress, true);\\n        nftTemplateList[nftTemplateCount] = template;\\n        emit Template721Added(_templateAddress,nftTemplateCount);\\n        return nftTemplateCount;\\n    }\\n      /**\\n     * @dev reactivate a disabled NFT Template.\\n            Only Factory Owner can call it\\n     * @param _index index we want to reactivate\\n     */\\n    \\n    // function to activate a disabled token.\\n    function reactivate721TokenTemplate(uint256 _index) external onlyOwner {\\n        require(\\n            _index <= nftTemplateCount && _index != 0,\\n            \\\"ERC721DTFactory: Template index doesnt exist\\\"\\n        );\\n        Template storage template = nftTemplateList[_index];\\n        template.isActive = true;\\n    }\\n\\n      /**\\n     * @dev disable an NFT Template.\\n      Only Factory Owner can call it\\n     * @param _index index we want to disable\\n     */\\n    function disable721TokenTemplate(uint256 _index) external onlyOwner {\\n        require(\\n            _index <= nftTemplateCount && _index != 0,\\n            \\\"ERC721DTFactory: Template index doesnt exist\\\"\\n        );\\n        Template storage template = nftTemplateList[_index];\\n        template.isActive = false;\\n    }\\n\\n    function getCurrentNFTTemplateCount() external view returns (uint256) {\\n        return nftTemplateCount;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n \\n    struct tokenStruct{\\n        string[] strings;\\n        address[] addresses;\\n        uint256[] uints;\\n        bytes[] bytess;\\n        address owner;\\n    }\\n    /**\\n     * @dev Deploys new datatoken proxy contract.\\n     *      This function is not called directly from here. It's called from the NFT contract.\\n            An NFT contract can deploy multiple ERC20 tokens.\\n     * @param _templateIndex ERC20Template index \\n     * @param strings refers to an array of strings\\n     *                      [0] = name\\n     *                      [1] = symbol\\n     * @param addresses refers to an array of addresses\\n     *                     [0]  = minter account who can mint datatokens (can have multiple minters)\\n     *                     [1]  = paymentCollector  initial paymentCollector  for this DT\\n     *                     [2]  = publishing Market Address\\n     *                     [3]  = publishing Market Fee Token\\n     * @param uints  refers to an array of uints\\n     *                     [0] = cap_ the total ERC20 cap\\n     *                     [1] = publishing Market Fee Amount\\n     * @param bytess  refers to an array of bytes, not in use now, left for future templates\\n     * @return token address of a new proxy datatoken contract\\n     */\\n    function createToken(\\n        uint256 _templateIndex,\\n        string[] memory strings,\\n        address[] memory addresses,\\n        uint256[] memory uints,\\n        bytes[] memory bytess\\n    ) external returns (address token) {\\n        require(\\n            erc721List[msg.sender] == msg.sender,\\n            \\\"ERC721Factory: ONLY ERC721 INSTANCE FROM ERC721FACTORY\\\"\\n        );\\n        token = _createToken(_templateIndex, strings, addresses, uints, bytess, msg.sender);\\n        \\n    }\\n    function _createToken(\\n        uint256 _templateIndex,\\n        string[] memory strings,\\n        address[] memory addresses,\\n        uint256[] memory uints,\\n        bytes[] memory bytess,\\n        address owner\\n    ) internal returns (address token) {\\n        require(uints[0] != 0, \\\"ERC20Factory: zero cap is not allowed\\\");\\n        require(\\n            _templateIndex <= templateCount && _templateIndex != 0,\\n            \\\"ERC20Factory: Template index doesnt exist\\\"\\n        );\\n        Template memory tokenTemplate = templateList[_templateIndex];\\n\\n        require(\\n            tokenTemplate.isActive,\\n            \\\"ERC20Factory: ERC721Token Template disabled\\\"\\n        );\\n        token = deploy(tokenTemplate.templateAddress);\\n        erc20List[token] = true;\\n\\n        require(\\n            token != address(0),\\n            \\\"ERC721Factory: Failed to perform minimal deploy of a new token\\\"\\n        );\\n        emit TokenCreated(token, tokenTemplate.templateAddress, strings[0], strings[1], uints[0], owner);\\n        currentTokenCount += 1;\\n        tokenStruct memory tokenData = tokenStruct(strings,addresses,uints,bytess,owner); \\n        // tokenData.strings = strings;\\n        // tokenData.addresses = addresses;\\n        // tokenData.uints = uints;\\n        // tokenData.owner = owner;\\n        // tokenData.bytess = bytess;\\n        _createTokenStep2(token, tokenData);\\n    }\\n\\n    function _createTokenStep2(address token, tokenStruct memory tokenData) internal {\\n        \\n        IERC20Template tokenInstance = IERC20Template(token);\\n        address[] memory factoryAddresses = new address[](3);\\n        factoryAddresses[0] = tokenData.owner;\\n        \\n        factoryAddresses[1] = router;\\n        \\n        require(\\n            tokenInstance.initialize(\\n                tokenData.strings,\\n                tokenData.addresses,\\n                factoryAddresses,\\n                tokenData.uints,\\n                tokenData.bytess\\n            ),\\n            \\\"ERC20Factory: Unable to initialize token instance\\\"\\n        );\\n        \\n    }\\n\\n    /**\\n     * @dev get the current ERC20token deployed count.\\n     * @return the current token count\\n     */\\n    function getCurrentTokenCount() external view returns (uint256) {\\n        return currentTokenCount;\\n    }\\n\\n    /**\\n     * @dev get the current ERC20token template.\\n      @param _index template Index\\n     * @return the token Template Object\\n     */\\n\\n    function getTokenTemplate(uint256 _index)\\n        external\\n        view\\n        returns (Template memory)\\n    {\\n        Template memory template = templateList[_index];\\n        require(\\n            _index <= templateCount && _index != 0,\\n            \\\"ERC20Factory: Template index doesnt exist\\\"\\n        );\\n        return template;\\n    }\\n\\n    /**\\n     * @dev add a new ERC20Template.\\n      Only Factory Owner can call it\\n     * @param _templateAddress new template address\\n     * @return the actual template count\\n     */\\n\\n    \\n    function addTokenTemplate(address _templateAddress)\\n        public\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        require(\\n            _templateAddress != address(0),\\n            \\\"ERC20Factory: ERC721 template address(0) NOT ALLOWED\\\"\\n        );\\n        require(_isContract(_templateAddress), \\\"ERC20Factory: NOT CONTRACT\\\");\\n        templateCount += 1;\\n        Template memory template = Template(_templateAddress, true);\\n        templateList[templateCount] = template;\\n        emit Template20Added(_templateAddress, templateCount);\\n        return templateCount;\\n    }\\n\\n     /**\\n     * @dev disable an ERC20Template.\\n      Only Factory Owner can call it\\n     * @param _index index we want to disable\\n     */\\n\\n    function disableTokenTemplate(uint256 _index) external onlyOwner {\\n        Template storage template = templateList[_index];\\n        template.isActive = false;\\n    }\\n\\n\\n     /**\\n     * @dev reactivate a disabled ERC20Template.\\n      Only Factory Owner can call it\\n     * @param _index index we want to reactivate\\n     */\\n\\n    // function to activate a disabled token.\\n    function reactivateTokenTemplate(uint256 _index) external onlyOwner {\\n        require(\\n            _index <= templateCount && _index != 0,\\n            \\\"ERC20DTFactory: Template index doesnt exist\\\"\\n        );\\n        Template storage template = templateList[_index];\\n        template.isActive = true;\\n    }\\n\\n    // if templateCount is public we could remove it, or set templateCount to private\\n    function getCurrentTemplateCount() external view returns (uint256) {\\n        return templateCount;\\n    }\\n\\n    struct tokenOrder {\\n        address tokenAddress;\\n        address consumer;\\n        uint256 serviceIndex;\\n        IERC20Template.providerFee _providerFee;\\n        IERC20Template.consumeMarketFee _consumeMarketFee;\\n    }\\n\\n    /**\\n     * @dev startMultipleTokenOrder\\n     *      Used as a proxy to order multiple services\\n     *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\\n     *      Requires previous approval of all :\\n     *          - consumeFeeTokens\\n     *          - publishMarketFeeTokens\\n     *          - erc20 datatokens\\n     *          - providerFees\\n     * @param orders an array of struct tokenOrder\\n     */\\n    function startMultipleTokenOrder(\\n        tokenOrder[] memory orders\\n    ) external nonReentrant {\\n        // TODO: to avoid DOS attack, we set a limit to maximum order (50 ?)\\n        require(orders.length <= 50, 'ERC721Factory: Too Many Orders');\\n        // TO DO.  We can do better here , by groupping publishMarketFeeTokens and consumeFeeTokens and have a single \\n        // transfer for each one, instead of doing it per dt..\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            (address publishMarketFeeAddress, address publishMarketFeeToken, uint256 publishMarketFeeAmount) \\n                = IERC20Template(orders[i].tokenAddress).getPublishingMarketFee();\\n            \\n            // check if we have publishFees, if so transfer them to us and approve dttemplate to take them\\n            if (publishMarketFeeAmount > 0 && publishMarketFeeToken!=address(0) \\n            && publishMarketFeeAddress!=address(0)) {\\n                _pullUnderlying(publishMarketFeeToken,msg.sender,\\n                    address(this),\\n                    publishMarketFeeAmount);\\n                IERC20(publishMarketFeeToken).safeIncreaseAllowance(orders[i].tokenAddress, publishMarketFeeAmount);\\n            }\\n            // check if we have consumeMarketFee, if so transfer them to us and approve dttemplate to take them\\n            if (orders[i]._consumeMarketFee.consumeMarketFeeAmount > 0\\n            && orders[i]._consumeMarketFee.consumeMarketFeeAddress!=address(0) \\n            && orders[i]._consumeMarketFee.consumeMarketFeeToken!=address(0)) {\\n                _pullUnderlying(orders[i]._consumeMarketFee.consumeMarketFeeToken,msg.sender,\\n                    address(this),\\n                    orders[i]._consumeMarketFee.consumeMarketFeeAmount);\\n                IERC20(orders[i]._consumeMarketFee.consumeMarketFeeToken)\\n                .safeIncreaseAllowance(orders[i].tokenAddress, orders[i]._consumeMarketFee.consumeMarketFeeAmount);\\n            }\\n            // handle provider fees\\n            if (orders[i]._providerFee.providerFeeAmount > 0 && orders[i]._providerFee.providerFeeToken!=address(0) \\n            && orders[i]._providerFee.providerFeeAddress!=address(0)) {\\n                _pullUnderlying(orders[i]._providerFee.providerFeeToken,msg.sender,\\n                    address(this),\\n                    orders[i]._providerFee.providerFeeAmount);\\n                IERC20(orders[i]._providerFee.providerFeeToken)\\n                .safeIncreaseAllowance(orders[i].tokenAddress, orders[i]._providerFee.providerFeeAmount);\\n            }\\n            // transfer erc20 datatoken from consumer to us\\n            _pullUnderlying(orders[i].tokenAddress,msg.sender,\\n                    address(this),\\n                    1e18);\\n            IERC20Template(orders[i].tokenAddress).startOrder(\\n                orders[i].consumer,\\n                orders[i].serviceIndex,\\n                orders[i]._providerFee,\\n                orders[i]._consumeMarketFee\\n            );\\n        }\\n    }\\n\\n    struct reuseTokenOrder {\\n        address tokenAddress;\\n        bytes32 orderTxId;\\n        IERC20Template.providerFee _providerFee;\\n    }\\n    /**\\n     * @dev reuseMultipleTokenOrder\\n     *      Used as a proxy to order multiple reuses\\n     *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\\n     *      Requires previous approval of all :\\n     *          - consumeFeeTokens\\n     *          - publishMarketFeeTokens\\n     *          - erc20 datatokens\\n     *          - providerFees\\n     * @param orders an array of struct tokenOrder\\n     */\\n    function reuseMultipleTokenOrder(\\n        reuseTokenOrder[] memory orders\\n    ) external nonReentrant {\\n        // TODO: to avoid DOS attack, we set a limit to maximum order (50 ?)\\n        require(orders.length <= 50, 'ERC721Factory: Too Many Orders');\\n        // TO DO.  We can do better here , by groupping publishMarketFeeTokens and consumeFeeTokens and have a single \\n        // transfer for each one, instead of doing it per dt..\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            // handle provider fees\\n            if (orders[i]._providerFee.providerFeeAmount > 0 && orders[i]._providerFee.providerFeeToken!=address(0) \\n            && orders[i]._providerFee.providerFeeAddress!=address(0)) {\\n                _pullUnderlying(orders[i]._providerFee.providerFeeToken,msg.sender,\\n                    address(this),\\n                    orders[i]._providerFee.providerFeeAmount);\\n                IERC20(orders[i]._providerFee.providerFeeToken)\\n                .safeIncreaseAllowance(orders[i].tokenAddress, orders[i]._providerFee.providerFeeAmount);\\n            }\\n        \\n            IERC20Template(orders[i].tokenAddress).reuseOrder(\\n                orders[i].orderTxId,\\n                orders[i]._providerFee\\n            );\\n        }\\n    }\\n\\n    // helper functions to save number of transactions\\n\\n    /**\\n     * @dev createNftWithErc20\\n     *      Creates a new NFT, then a ERC20,all in one call\\n     * @param _NftCreateData input data for nft creation\\n     * @param _ErcCreateData input data for erc20 creation\\n     \\n     */\\n    function createNftWithErc20(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData\\n    ) external nonReentrant returns (address erc721Address, address erc20Address){\\n        //we are adding ourselfs as a ERC20 Deployer, because we need it in order to deploy the pool\\n        erc721Address = deployERC721Contract(\\n            _NftCreateData.name,\\n            _NftCreateData.symbol,\\n            _NftCreateData.templateIndex,\\n            address(this),\\n            address(0),\\n            _NftCreateData.tokenURI,\\n            _NftCreateData.transferable,\\n            _NftCreateData.owner\\n            );\\n        erc20Address = IERC721Template(erc721Address).createERC20(\\n            _ErcCreateData.templateIndex,\\n            _ErcCreateData.strings,\\n            _ErcCreateData.addresses,\\n            _ErcCreateData.uints,\\n            _ErcCreateData.bytess\\n        );\\n        // remove our selfs from the erc20DeployerRole\\n        IERC721Template(erc721Address).removeFromCreateERC20List(address(this));\\n    }\\n\\n    /**\\n     * @dev createNftWithErc20WithPool\\n     *      Creates a new NFT, then a ERC20, then a Pool, all in one call\\n     *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\\n     * @param _NftCreateData input data for NFT Creation\\n     * @param _ErcCreateData input data for ERC20 Creation\\n     * @param _PoolData input data for Pool Creation\\n     */\\n    function createNftWithErc20WithPool(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData,\\n        PoolData calldata _PoolData\\n    ) external nonReentrant returns (address erc721Address, address erc20Address, address poolAddress){\\n        _pullUnderlying(_PoolData.addresses[1],msg.sender,\\n                    address(this),\\n                    _PoolData.ssParams[4]);\\n        //we are adding ourselfs as a ERC20 Deployer, because we need it in order to deploy the pool\\n        erc721Address = deployERC721Contract(\\n            _NftCreateData.name,\\n            _NftCreateData.symbol,\\n            _NftCreateData.templateIndex,\\n            address(this),\\n            address(0),\\n            _NftCreateData.tokenURI,\\n            _NftCreateData.transferable,\\n            _NftCreateData.owner);\\n        erc20Address = IERC721Template(erc721Address).createERC20(\\n            _ErcCreateData.templateIndex,\\n            _ErcCreateData.strings,\\n            _ErcCreateData.addresses,\\n            _ErcCreateData.uints,\\n            _ErcCreateData.bytess\\n        );\\n        // allow router to take the liquidity\\n        IERC20(_PoolData.addresses[1]).safeIncreaseAllowance(router,_PoolData.ssParams[4]);\\n      \\n        poolAddress = IERC20Template(erc20Address).deployPool(\\n            _PoolData.ssParams,\\n            _PoolData.swapFees,\\n           _PoolData.addresses\\n        );\\n        // remove our selfs from the erc20DeployerRole\\n        IERC721Template(erc721Address).removeFromCreateERC20List(address(this));\\n    \\n   }\\n\\n    /**\\n     * @dev createNftWithErc20WithFixedRate\\n     *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\\n     *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\\n     * @param _NftCreateData input data for NFT Creation\\n     * @param _ErcCreateData input data for ERC20 Creation\\n     * @param _FixedData input data for FixedRate Creation\\n     */\\n    function createNftWithErc20WithFixedRate(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData,\\n        FixedData calldata _FixedData\\n    ) external nonReentrant returns (address erc721Address, address erc20Address, bytes32 exchangeId){\\n        //we are adding ourselfs as a ERC20 Deployer, because we need it in order to deploy the fixedrate\\n        erc721Address = deployERC721Contract(\\n            _NftCreateData.name,\\n            _NftCreateData.symbol,\\n            _NftCreateData.templateIndex,\\n            address(this),\\n            address(0),\\n            _NftCreateData.tokenURI,\\n            _NftCreateData.transferable,\\n            _NftCreateData.owner);\\n        erc20Address = IERC721Template(erc721Address).createERC20(\\n            _ErcCreateData.templateIndex,\\n            _ErcCreateData.strings,\\n            _ErcCreateData.addresses,\\n            _ErcCreateData.uints,\\n            _ErcCreateData.bytess\\n        );\\n        exchangeId = IERC20Template(erc20Address).createFixedRate(\\n            _FixedData.fixedPriceAddress,\\n            _FixedData.addresses,\\n            _FixedData.uints\\n            );\\n        // remove our selfs from the erc20DeployerRole\\n        IERC721Template(erc721Address).removeFromCreateERC20List(address(this));\\n    }\\n\\n    /**\\n     * @dev createNftWithErc20WithDispenser\\n     *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\\n     *      Use this carefully\\n     * @param _NftCreateData input data for NFT Creation\\n     * @param _ErcCreateData input data for ERC20 Creation\\n     * @param _DispenserData input data for Dispenser Creation\\n     */\\n    function createNftWithErc20WithDispenser(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData,\\n        DispenserData calldata _DispenserData\\n    ) external nonReentrant returns (address erc721Address, address erc20Address){\\n        //we are adding ourselfs as a ERC20 Deployer, because we need it in order to deploy the fixedrate\\n        erc721Address = deployERC721Contract(\\n            _NftCreateData.name,\\n            _NftCreateData.symbol,\\n            _NftCreateData.templateIndex,\\n            address(this),\\n            address(0),\\n            _NftCreateData.tokenURI,\\n            _NftCreateData.transferable,\\n            _NftCreateData.owner);\\n        erc20Address = IERC721Template(erc721Address).createERC20(\\n            _ErcCreateData.templateIndex,\\n            _ErcCreateData.strings,\\n            _ErcCreateData.addresses,\\n            _ErcCreateData.uints,\\n            _ErcCreateData.bytess\\n        );\\n        IERC20Template(erc20Address).createDispenser(\\n            _DispenserData.dispenserAddress,\\n            _DispenserData.maxTokens,\\n            _DispenserData.maxBalance,\\n            _DispenserData.withMint,\\n            _DispenserData.allowedSwapper\\n            );\\n        // remove our selfs from the erc20DeployerRole\\n        IERC721Template(erc721Address).removeFromCreateERC20List(address(this));\\n    }\\n\\n\\n    \\n    struct MetaData {\\n        uint8 _metaDataState;\\n        string _metaDataDecryptorUrl;\\n        string _metaDataDecryptorAddress;\\n        bytes flags;\\n        bytes data;\\n        bytes32 _metaDataHash;\\n        IERC721Template.metaDataProof[] _metadataProofs;\\n    }\\n\\n    /**\\n     * @dev createNftWithMetaData\\n     *      Creates a new NFT, then sets the metadata, all in one call\\n     *      Use this carefully\\n     * @param _NftCreateData input data for NFT Creation\\n     * @param _MetaData input metadata\\n     */\\n    function createNftWithMetaData(\\n        NftCreateData calldata _NftCreateData,\\n        MetaData calldata _MetaData\\n    ) external nonReentrant returns (address erc721Address){\\n        //we are adding ourselfs as metadataDeployer , because we need it in order to set metadata\\n        erc721Address = deployERC721Contract(\\n            _NftCreateData.name,\\n            _NftCreateData.symbol,\\n            _NftCreateData.templateIndex,\\n            address(0),\\n            address(this),\\n            _NftCreateData.tokenURI,\\n            _NftCreateData.transferable,\\n            _NftCreateData.owner);\\n        // set metadata\\n        IERC721Template(erc721Address).setMetaData(_MetaData._metaDataState, _MetaData._metaDataDecryptorUrl\\n        , _MetaData._metaDataDecryptorAddress, _MetaData.flags, \\n        _MetaData.data,_MetaData._metaDataHash, _MetaData._metadataProofs);\\n        // remove our selfs from the metadataDeployer role\\n        IERC721Template(erc721Address).removeFromMetadataList(address(this));\\n    }\\n\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        uint256 balanceBefore = IERC20(erc20).balanceOf(to);\\n        IERC20(erc20).safeTransferFrom(from, to, amount);\\n        require(IERC20(erc20).balanceOf(to) >= balanceBefore.add(amount),\\n                    \\\"Transfer amount is too low\\\");\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Deployer.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\n/**\\n * @title Deployer Contract\\n * @author Ocean Protocol Team\\n *\\n * @dev Contract Deployer\\n *      This contract allowes factory contract \\n *      to deploy new contract instances using\\n *      the same library pattern in solidity.\\n *      the logic it self is deployed only once, but\\n *      executed in the context of the new storage \\n *      contract (new contract instance)\\n */\\ncontract Deployer {\\n    event InstanceDeployed(address instance);\\n    \\n    // /**\\n    //  * @dev deploy\\n    //  *      deploy new contract instance \\n    //  * @param _logic the logic contract address\\n    //  * @return  address of the new instance\\n    //  */\\n    function deploy(\\n        address _logic\\n    ) \\n      internal \\n      returns (address instance) \\n    {\\n        bytes20 targetBytes = bytes20(_logic);\\n        // solhint-disable-next-line max-line-length\\n        // Follows OpenZeppelin Implementation https://github.com/OpenZeppelin/openzeppelin-sdk/blob/71c9ad77e0326db079e6a643eca8568ab316d4a9/packages/lib/contracts/upgradeability/ProxyFactory.sol\\n        // solhint-disable-next-line max-line-length\\n        // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n          let clone := mload(0x40)\\n          mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n          mstore(add(clone, 0x14), targetBytes)\\n          mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n          instance := create(0, clone, 0x37)\\n        }\\n        emit InstanceDeployed(address(instance));\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\ninterface IFactory {\\n    function createToken(\\n        uint256 _templateIndex,\\n        string[] calldata strings,\\n        address[] calldata addresses,\\n        uint256[] calldata uints,\\n        bytes[] calldata bytess\\n    ) external returns (address token);\\n\\n    function erc721List(address ERC721address) external returns (address);\\n\\n    function erc20List(address erc20dt) external view returns(bool);\\n\\n\\n    struct NftCreateData{\\n        string name;\\n        string symbol;\\n        uint256 templateIndex;\\n        string tokenURI;\\n        bool transferable;\\n        address owner;\\n    }\\n    struct ErcCreateData{\\n        uint256 templateIndex;\\n        string[] strings;\\n        address[] addresses;\\n        uint256[] uints;\\n        bytes[] bytess;\\n    }\\n\\n    struct PoolData{\\n        uint256[] ssParams;\\n        uint256[] swapFees;\\n        address[] addresses;\\n    }\\n\\n    struct FixedData{\\n        address fixedPriceAddress;\\n        address[] addresses;\\n        uint256[] uints;\\n    }\\n\\n    struct DispenserData{\\n        address dispenserAddress;\\n        uint256 maxTokens;\\n        uint256 maxBalance;\\n        bool withMint;\\n        address allowedSwapper;\\n    }\\n    \\n    function createNftWithErc20(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData\\n    ) external returns (address , address);\\n\\n    function createNftWithErc20WithPool(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData,\\n        PoolData calldata _PoolData\\n    ) external returns (address, address , address);\\n\\n    \\n    function createNftWithErc20WithFixedRate(\\n         NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData,\\n        FixedData calldata _FixedData\\n    ) external returns (address, address , bytes32 );\\n\\n    \\n    function createNftWithErc20WithDispenser(\\n        NftCreateData calldata _NftCreateData,\\n        ErcCreateData calldata _ErcCreateData,\\n        DispenserData calldata _DispenserData\\n    ) external returns (address, address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721Template.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Template {\\n    \\n    enum RolesType {\\n        Manager,\\n        DeployERC20,\\n        UpdateMetadata,\\n        Store\\n    }\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event MetadataCreated(\\n        address indexed createdBy,\\n        uint8 state,\\n        string decryptorUrl,\\n        bytes flags,\\n        bytes data,\\n        string metaDataDecryptorAddress,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n    event MetadataUpdated(\\n        address indexed updatedBy,\\n        uint8 state,\\n        string decryptorUrl,\\n        bytes flags,\\n        bytes data,\\n        string metaDataDecryptorAddress,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function isERC20Deployer(address acount) external view returns (bool);\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, \\n     * it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, \\n     * it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, \\n     * it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    // function safeTransferFrom(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId,\\n    //     bytes calldata data\\n    // ) external;\\n    function transferFrom(address from, address to) external;\\n\\n    function initialize(\\n        address admin,\\n        string calldata name,\\n        string calldata symbol,\\n        address erc20Factory,\\n        address additionalERC20Deployer,\\n        address additionalMetaDataUpdater,\\n        string calldata tokenURI,\\n        bool transferable\\n    ) external returns (bool);\\n\\n     struct Roles {\\n        bool manager;\\n        bool deployERC20;\\n        bool updateMetadata;\\n        bool store;\\n    }\\n\\n    struct metaDataProof {\\n        address validatorAddress;\\n        uint8 v; // v of validator signed message\\n        bytes32 r; // r of validator signed message\\n        bytes32 s; // s of validator signed message\\n    }\\n    function getPermissions(address user) external view returns (Roles memory);\\n\\n    function setDataERC20(bytes32 _key, bytes calldata _value) external;\\n    function setMetaData(uint8 _metaDataState, string calldata _metaDataDecryptorUrl\\n        , string calldata _metaDataDecryptorAddress, bytes calldata flags, \\n        bytes calldata data,bytes32 _metaDataHash, metaDataProof[] memory _metadataProofs) external;\\n    function getMetaData() external view returns (string memory, string memory, uint8, bool);\\n\\n    function createERC20(\\n        uint256 _templateIndex,\\n        string[] calldata strings,\\n        address[] calldata addresses,\\n        uint256[] calldata uints,\\n        bytes[] calldata bytess\\n    ) external returns (address);\\n\\n\\n    function removeFromCreateERC20List(address _allowedAddress) external;\\n    function addToCreateERC20List(address _allowedAddress) external;\\n    function addToMetadataList(address _allowedAddress) external;\\n    function removeFromMetadataList(address _allowedAddress) external;\\n    function getId() pure external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Template.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\ninterface IERC20Template {\\n    struct RolesERC20 {\\n        bool minter;\\n        bool feeManager;\\n    }\\n    struct providerFee{\\n        address providerFeeAddress;\\n        address providerFeeToken; // address of the token marketplace wants to add fee on top\\n        uint256 providerFeeAmount; // amount to be transfered to marketFeeCollector\\n        uint8 v; // v of provider signed message\\n        bytes32 r; // r of provider signed message\\n        bytes32 s; // s of provider signed message\\n        uint256 validUntil; //validity expresses in unix timestamp\\n        bytes providerData; //data encoded by provider\\n    }\\n    struct consumeMarketFee{\\n        address consumeMarketFeeAddress;\\n        address consumeMarketFeeToken; // address of the token marketplace wants to add fee on top\\n        uint256 consumeMarketFeeAmount; // amount to be transfered to marketFeeCollector\\n    }\\n    function initialize(\\n        string[] calldata strings_,\\n        address[] calldata addresses_,\\n        address[] calldata factoryAddresses_,\\n        uint256[] calldata uints_,\\n        bytes[] calldata bytes_\\n    ) external returns (bool);\\n    \\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function cap() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 value) external;\\n    \\n    function isMinter(address account) external view returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permissions(address user)\\n        external\\n        view\\n        returns (RolesERC20 memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function cleanFrom721() external;\\n\\n    function deployPool(\\n        uint256[] memory ssParams,\\n        uint256[] memory swapFees,\\n        address[] memory addresses \\n    ) external returns (address);\\n\\n    function createFixedRate(\\n        address fixedPriceAddress,\\n        address[] memory addresses,\\n        uint[] memory uints\\n    ) external returns (bytes32);\\n    function createDispenser(\\n        address _dispenser,\\n        uint256 maxTokens,\\n        uint256 maxBalance,\\n        bool withMint,\\n        address allowedSwapper) external;\\n        \\n    function getPublishingMarketFee() external view returns (address , address, uint256);\\n    function setPublishingMarketFee(\\n        address _publishMarketFeeAddress, address _publishMarketFeeToken, uint256 _publishMarketFeeAmount\\n    ) external;\\n\\n     function startOrder(\\n        address consumer,\\n        uint256 serviceIndex,\\n        providerFee calldata _providerFee,\\n        consumeMarketFee calldata _consumeMarketFee\\n     ) external;\\n\\n     function reuseOrder(\\n        bytes32 orderTxId,\\n        providerFee calldata _providerFee\\n    ) external;\\n  \\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n    function getERC721Address() external view returns (address);\\n    function isERC20Deployer(address user) external view returns(bool);\\n    function getPools() external view returns(address[] memory);\\n    struct fixedRate{\\n        address contractAddress;\\n        bytes32 id;\\n    }\\n    function getFixedRates() external view returns(fixedRate[] memory);\\n    function getDispensers() external view returns(address[] memory);\\n    function getId() pure external returns (uint8);\\n    function getPaymentCollector() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./ERC721/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/Address.sol\": {\r\n      \"content\": \"\\npragma solidity 0.8.12;\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.0.0\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedSwapper\",\"type\":\"address\"}],\"name\":\"DispenserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"InstanceDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"templateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dispenserContract\",\"type\":\"address\"}],\"name\":\"NewDispenser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"NewFixedRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ssContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_templateAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTemplateCount\",\"type\":\"uint256\"}],\"name\":\"Template20Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_templateAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTemplateCount\",\"type\":\"uint256\"}],\"name\":\"Template721Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"templateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_templateAddress\",\"type\":\"address\"}],\"name\":\"add721TokenTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_templateAddress\",\"type\":\"address\"}],\"name\":\"addTokenTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.NftCreateData\",\"name\":\"_NftCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"strings\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uints\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"bytess\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IFactory.ErcCreateData\",\"name\":\"_ErcCreateData\",\"type\":\"tuple\"}],\"name\":\"createNftWithErc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.NftCreateData\",\"name\":\"_NftCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"strings\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uints\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"bytess\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IFactory.ErcCreateData\",\"name\":\"_ErcCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dispenserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"allowedSwapper\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.DispenserData\",\"name\":\"_DispenserData\",\"type\":\"tuple\"}],\"name\":\"createNftWithErc20WithDispenser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.NftCreateData\",\"name\":\"_NftCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"strings\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uints\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"bytess\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IFactory.ErcCreateData\",\"name\":\"_ErcCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fixedPriceAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IFactory.FixedData\",\"name\":\"_FixedData\",\"type\":\"tuple\"}],\"name\":\"createNftWithErc20WithFixedRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"exchangeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.NftCreateData\",\"name\":\"_NftCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"strings\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uints\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"bytess\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IFactory.ErcCreateData\",\"name\":\"_ErcCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ssParams\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"swapFees\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct IFactory.PoolData\",\"name\":\"_PoolData\",\"type\":\"tuple\"}],\"name\":\"createNftWithErc20WithPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.NftCreateData\",\"name\":\"_NftCreateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_metaDataState\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_metaDataDecryptorUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaDataDecryptorAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"flags\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_metaDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC721Template.metaDataProof[]\",\"name\":\"_metadataProofs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ERC721Factory.MetaData\",\"name\":\"_MetaData\",\"type\":\"tuple\"}],\"name\":\"createNftWithMetaData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"strings\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uints\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"bytess\",\"type\":\"bytes[]\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_templateIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"additionalERC20Deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalMetaDataUpdater\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deployERC721Contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disable721TokenTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disableTokenTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc20List\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc721List\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentNFTTemplateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTemplateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNFTTemplate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"templateAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721Factory.Template\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenTemplate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"templateAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721Factory.Template\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTemplateList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"templateAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"reactivate721TokenTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"reactivateTokenTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderTxId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"providerFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"providerFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"providerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IERC20Template.providerFee\",\"name\":\"_providerFee\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC721Factory.reuseTokenOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"reuseMultipleTokenOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"providerFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"providerFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"providerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IERC20Template.providerFee\",\"name\":\"_providerFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"consumeMarketFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consumeMarketFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"consumeMarketFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Template.consumeMarketFee\",\"name\":\"_consumeMarketFee\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC721Factory.tokenOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"startMultipleTokenOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"templateList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"templateAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721Factory", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007842fa3b2d87ff1cd52c4152382f7c4b3406e5a60000000000000000000000008149276f275eefac110d74afe8afeceaec7d15930000000000000000000000008c98ea273ba22327f896aa1a1a46e1bff56e9b1d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}