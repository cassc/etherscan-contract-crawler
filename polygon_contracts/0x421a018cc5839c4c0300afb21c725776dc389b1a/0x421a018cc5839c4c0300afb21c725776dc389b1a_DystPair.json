{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/core/DystPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../interface/IERC20.sol\\\";\\r\\nimport \\\"../../interface/IERC721Metadata.sol\\\";\\r\\nimport \\\"../../interface/IPair.sol\\\";\\r\\nimport \\\"../../interface/IFactory.sol\\\";\\r\\nimport \\\"../../interface/ICallee.sol\\\";\\r\\nimport \\\"../../interface/IUnderlying.sol\\\";\\r\\nimport \\\"./PairFees.sol\\\";\\r\\nimport \\\"../../lib/Math.sol\\\";\\r\\nimport \\\"../../lib/SafeERC20.sol\\\";\\r\\nimport \\\"../Reentrancy.sol\\\";\\r\\n\\r\\n// The base pair of pools, either stable or volatile\\r\\ncontract DystPair is IERC20, IPair, Reentrancy {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  string public name;\\r\\n  string public symbol;\\r\\n  uint8 public constant decimals = 18;\\r\\n\\r\\n  /// @dev Used to denote stable or volatile pair\\r\\n  bool public immutable stable;\\r\\n\\r\\n  uint public override totalSupply = 0;\\r\\n\\r\\n  mapping(address => mapping(address => uint)) public override allowance;\\r\\n  mapping(address => uint) public override balanceOf;\\r\\n\\r\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\r\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n  uint internal constant _FEE_PRECISION = 1e32;\\r\\n  mapping(address => uint) public nonces;\\r\\n  uint public immutable chainId;\\r\\n\\r\\n  uint internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n  /// @dev 0.05% swap fee\\r\\n  uint internal constant SWAP_FEE = 2000;\\r\\n  /// @dev 50% of swap fee\\r\\n  uint internal constant TREASURY_FEE = 2;\\r\\n  /// @dev Capture oracle reading every 30 minutes\\r\\n  uint internal constant PERIOD_SIZE = 1800;\\r\\n\\r\\n  address public immutable override token0;\\r\\n  address public immutable override token1;\\r\\n  address public immutable fees;\\r\\n  address public immutable factory;\\r\\n  address public immutable treasury;\\r\\n\\r\\n  Observation[] public observations;\\r\\n\\r\\n  uint internal immutable decimals0;\\r\\n  uint internal immutable decimals1;\\r\\n\\r\\n  uint public reserve0;\\r\\n  uint public reserve1;\\r\\n  uint public blockTimestampLast;\\r\\n\\r\\n  uint public reserve0CumulativeLast;\\r\\n  uint public reserve1CumulativeLast;\\r\\n\\r\\n  // index0 and index1 are used to accumulate fees,\\r\\n  // this is split out from normal trades to keep the swap \\\"clean\\\"\\r\\n  // this further allows LP holders to easily claim fees for tokens they have/staked\\r\\n  uint public index0 = 0;\\r\\n  uint public index1 = 0;\\r\\n\\r\\n  // position assigned to each LP to track their current index0 & index1 vs the global position\\r\\n  mapping(address => uint) public supplyIndex0;\\r\\n  mapping(address => uint) public supplyIndex1;\\r\\n\\r\\n  // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\r\\n  mapping(address => uint) public claimable0;\\r\\n  mapping(address => uint) public claimable1;\\r\\n\\r\\n  event Treasury(address indexed sender, uint amount0, uint amount1);\\r\\n  event Fees(address indexed sender, uint amount0, uint amount1);\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint amount0In,\\r\\n    uint amount1In,\\r\\n    uint amount0Out,\\r\\n    uint amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint reserve0, uint reserve1);\\r\\n  event Claim(address indexed sender, address indexed recipient, uint amount0, uint amount1);\\r\\n\\r\\n  constructor() {\\r\\n    factory = msg.sender;\\r\\n    treasury = IFactory(msg.sender).treasury();\\r\\n    (address _token0, address _token1, bool _stable) = IFactory(msg.sender).getInitializable();\\r\\n    (token0, token1, stable) = (_token0, _token1, _stable);\\r\\n    fees = address(new PairFees(_token0, _token1));\\r\\n    if (_stable) {\\r\\n      name = string(abi.encodePacked(\\\"StableV1 AMM - \\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\r\\n      symbol = string(abi.encodePacked(\\\"sAMM-\\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\r\\n    } else {\\r\\n      name = string(abi.encodePacked(\\\"VolatileV1 AMM - \\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\r\\n      symbol = string(abi.encodePacked(\\\"vAMM-\\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\r\\n    }\\r\\n\\r\\n    decimals0 = 10 ** IUnderlying(_token0).decimals();\\r\\n    decimals1 = 10 ** IUnderlying(_token1).decimals();\\r\\n\\r\\n    observations.push(Observation(block.timestamp, 0, 0));\\r\\n\\r\\n    DOMAIN_SEPARATOR = keccak256(\\r\\n      abi.encode(\\r\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n        keccak256(bytes(name)),\\r\\n        keccak256('1'),\\r\\n        block.chainid,\\r\\n        address(this)\\r\\n      )\\r\\n    );\\r\\n    chainId = block.chainid;\\r\\n  }\\r\\n\\r\\n  function observationLength() external view returns (uint) {\\r\\n    return observations.length;\\r\\n  }\\r\\n\\r\\n  function lastObservation() public view returns (Observation memory) {\\r\\n    return observations[observations.length - 1];\\r\\n  }\\r\\n\\r\\n  function metadata() external view returns (\\r\\n    uint dec0,\\r\\n    uint dec1,\\r\\n    uint r0,\\r\\n    uint r1,\\r\\n    bool st,\\r\\n    address t0,\\r\\n    address t1\\r\\n  ) {\\r\\n    return (decimals0, decimals1, reserve0, reserve1, stable, token0, token1);\\r\\n  }\\r\\n\\r\\n  function tokens() external view override returns (address, address) {\\r\\n    return (token0, token1);\\r\\n  }\\r\\n\\r\\n  /// @dev Claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\r\\n  function claimFees() external override returns (uint claimed0, uint claimed1) {\\r\\n    _updateFor(msg.sender);\\r\\n\\r\\n    claimed0 = claimable0[msg.sender];\\r\\n    claimed1 = claimable1[msg.sender];\\r\\n\\r\\n    if (claimed0 > 0 || claimed1 > 0) {\\r\\n      claimable0[msg.sender] = 0;\\r\\n      claimable1[msg.sender] = 0;\\r\\n\\r\\n      PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\r\\n\\r\\n      emit Claim(msg.sender, msg.sender, claimed0, claimed1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Accrue fees on token0\\r\\n  function _update0(uint amount) internal {\\r\\n    uint toTreasury = amount / TREASURY_FEE;\\r\\n    uint toFees = amount - toTreasury;\\r\\n\\r\\n    // transfer the fees out to PairFees and Treasury\\r\\n    IERC20(token0).safeTransfer(treasury, toTreasury);\\r\\n    IERC20(token0).safeTransfer(fees, toFees);\\r\\n    // 1e32 adjustment is removed during claim\\r\\n    uint _ratio = toFees * _FEE_PRECISION / totalSupply;\\r\\n    if (_ratio > 0) {\\r\\n      index0 += _ratio;\\r\\n    }\\r\\n    // keep the same structure of events for compatability\\r\\n    emit Treasury(msg.sender, toTreasury, 0);\\r\\n    emit Fees(msg.sender, toFees, 0);\\r\\n  }\\r\\n\\r\\n  /// @dev Accrue fees on token1\\r\\n  function _update1(uint amount) internal {\\r\\n    uint toTreasury = amount / TREASURY_FEE;\\r\\n    uint toFees = amount - toTreasury;\\r\\n\\r\\n    IERC20(token1).safeTransfer(treasury, toTreasury);\\r\\n    IERC20(token1).safeTransfer(fees, toFees);\\r\\n    uint _ratio = toFees * _FEE_PRECISION / totalSupply;\\r\\n    if (_ratio > 0) {\\r\\n      index1 += _ratio;\\r\\n    }\\r\\n    // keep the same structure of events for compatability\\r\\n    emit Treasury(msg.sender, 0, toTreasury);\\r\\n    emit Fees(msg.sender, 0, toFees);\\r\\n  }\\r\\n\\r\\n  /// @dev This function MUST be called on any balance changes,\\r\\n  ///      otherwise can be used to infinitely claim fees\\r\\n  //       Fees are segregated from core funds, so fees can never put liquidity at risk\\r\\n  function _updateFor(address recipient) internal {\\r\\n    uint _supplied = balanceOf[recipient];\\r\\n    // get LP balance of `recipient`\\r\\n    if (_supplied > 0) {\\r\\n      uint _supplyIndex0 = supplyIndex0[recipient];\\r\\n      // get last adjusted index0 for recipient\\r\\n      uint _supplyIndex1 = supplyIndex1[recipient];\\r\\n      uint _index0 = index0;\\r\\n      // get global index0 for accumulated fees\\r\\n      uint _index1 = index1;\\r\\n      supplyIndex0[recipient] = _index0;\\r\\n      // update user current position to global position\\r\\n      supplyIndex1[recipient] = _index1;\\r\\n      uint _delta0 = _index0 - _supplyIndex0;\\r\\n      // see if there is any difference that need to be accrued\\r\\n      uint _delta1 = _index1 - _supplyIndex1;\\r\\n      if (_delta0 > 0) {\\r\\n        uint _share = _supplied * _delta0 / _FEE_PRECISION;\\r\\n        // add accrued difference for each supplied token\\r\\n        claimable0[recipient] += _share;\\r\\n      }\\r\\n      if (_delta1 > 0) {\\r\\n        uint _share = _supplied * _delta1 / _FEE_PRECISION;\\r\\n        claimable1[recipient] += _share;\\r\\n      }\\r\\n    } else {\\r\\n      supplyIndex0[recipient] = index0;\\r\\n      // new users are set to the default global state\\r\\n      supplyIndex1[recipient] = index1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getReserves() public view override returns (\\r\\n    uint112 _reserve0,\\r\\n    uint112 _reserve1,\\r\\n    uint32 _blockTimestampLast\\r\\n  ) {\\r\\n    _reserve0 = uint112(reserve0);\\r\\n    _reserve1 = uint112(reserve1);\\r\\n    _blockTimestampLast = uint32(blockTimestampLast);\\r\\n  }\\r\\n\\r\\n  /// @dev Update reserves and, on the first call per block, price accumulators\\r\\n  function _update(uint balance0, uint balance1, uint _reserve0, uint _reserve1) internal {\\r\\n    uint blockTimestamp = block.timestamp;\\r\\n    uint timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n    // overflow is desired\\r\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n    unchecked {\\r\\n      reserve0CumulativeLast += _reserve0 * timeElapsed;\\r\\n      reserve1CumulativeLast += _reserve1 * timeElapsed;\\r\\n    }\\r\\n    }\\r\\n\\r\\n    Observation memory _point = lastObservation();\\r\\n    timeElapsed = blockTimestamp - _point.timestamp;\\r\\n    // compare the last observation with current timestamp,\\r\\n    // if greater than 30 minutes, record a new event\\r\\n    if (timeElapsed > PERIOD_SIZE) {\\r\\n      observations.push(Observation(blockTimestamp, reserve0CumulativeLast, reserve1CumulativeLast));\\r\\n    }\\r\\n    reserve0 = balance0;\\r\\n    reserve1 = balance1;\\r\\n    blockTimestampLast = blockTimestamp;\\r\\n    emit Sync(reserve0, reserve1);\\r\\n  }\\r\\n\\r\\n  /// @dev Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n  function currentCumulativePrices() public view returns (\\r\\n    uint reserve0Cumulative,\\r\\n    uint reserve1Cumulative,\\r\\n    uint blockTimestamp\\r\\n  ) {\\r\\n    blockTimestamp = block.timestamp;\\r\\n    reserve0Cumulative = reserve0CumulativeLast;\\r\\n    reserve1Cumulative = reserve1CumulativeLast;\\r\\n\\r\\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n    (uint _reserve0, uint _reserve1, uint _blockTimestampLast) = getReserves();\\r\\n    if (_blockTimestampLast != blockTimestamp) {\\r\\n      // subtraction overflow is desired\\r\\n      uint timeElapsed = blockTimestamp - _blockTimestampLast;\\r\\n    unchecked {\\r\\n      reserve0Cumulative += _reserve0 * timeElapsed;\\r\\n      reserve1Cumulative += _reserve1 * timeElapsed;\\r\\n    }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gives the current twap price measured from amountIn * tokenIn gives amountOut\\r\\n  function current(address tokenIn, uint amountIn) external view returns (uint amountOut) {\\r\\n    Observation memory _observation = lastObservation();\\r\\n    (uint reserve0Cumulative, uint reserve1Cumulative,) = currentCumulativePrices();\\r\\n    if (block.timestamp == _observation.timestamp) {\\r\\n      _observation = observations[observations.length - 2];\\r\\n    }\\r\\n\\r\\n    uint timeElapsed = block.timestamp - _observation.timestamp;\\r\\n    uint _reserve0 = (reserve0Cumulative - _observation.reserve0Cumulative) / timeElapsed;\\r\\n    uint _reserve1 = (reserve1Cumulative - _observation.reserve1Cumulative) / timeElapsed;\\r\\n    amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\r\\n  }\\r\\n\\r\\n  /// @dev As per `current`, however allows user configured granularity, up to the full window size\\r\\n  function quote(address tokenIn, uint amountIn, uint granularity)\\r\\n  external view returns (uint amountOut) {\\r\\n    uint [] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\r\\n    uint priceAverageCumulative;\\r\\n    for (uint i = 0; i < _prices.length; i++) {\\r\\n      priceAverageCumulative += _prices[i];\\r\\n    }\\r\\n    return priceAverageCumulative / granularity;\\r\\n  }\\r\\n\\r\\n  /// @dev Returns a memory set of twap prices\\r\\n  function prices(address tokenIn, uint amountIn, uint points)\\r\\n  external view returns (uint[] memory) {\\r\\n    return sample(tokenIn, amountIn, points, 1);\\r\\n  }\\r\\n\\r\\n  function sample(address tokenIn, uint amountIn, uint points, uint window)\\r\\n  public view returns (uint[] memory) {\\r\\n    uint[] memory _prices = new uint[](points);\\r\\n\\r\\n    uint length = observations.length - 1;\\r\\n    uint i = length - (points * window);\\r\\n    uint nextIndex = 0;\\r\\n    uint index = 0;\\r\\n\\r\\n    for (; i < length; i += window) {\\r\\n      nextIndex = i + window;\\r\\n      uint timeElapsed = observations[nextIndex].timestamp - observations[i].timestamp;\\r\\n      uint _reserve0 = (observations[nextIndex].reserve0Cumulative - observations[i].reserve0Cumulative) / timeElapsed;\\r\\n      uint _reserve1 = (observations[nextIndex].reserve1Cumulative - observations[i].reserve1Cumulative) / timeElapsed;\\r\\n      _prices[index] = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\r\\n      index = index + 1;\\r\\n    }\\r\\n    return _prices;\\r\\n  }\\r\\n\\r\\n  /// @dev This low-level function should be called from a contract which performs important safety checks\\r\\n  ///      standard uniswap v2 implementation\\r\\n  function mint(address to) external lock override returns (uint liquidity) {\\r\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n    uint _balance0 = IERC20(token0).balanceOf(address(this));\\r\\n    uint _balance1 = IERC20(token1).balanceOf(address(this));\\r\\n    uint _amount0 = _balance0 - _reserve0;\\r\\n    uint _amount1 = _balance1 - _reserve1;\\r\\n\\r\\n    uint _totalSupply = totalSupply;\\r\\n    // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n    if (_totalSupply == 0) {\\r\\n      liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\r\\n      // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n      _mint(address(0), MINIMUM_LIQUIDITY);\\r\\n    } else {\\r\\n      liquidity = Math.min(_amount0 * _totalSupply / _reserve0, _amount1 * _totalSupply / _reserve1);\\r\\n    }\\r\\n    require(liquidity > 0, 'DystPair: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n    _mint(to, liquidity);\\r\\n\\r\\n    _update(_balance0, _balance1, _reserve0, _reserve1);\\r\\n    emit Mint(msg.sender, _amount0, _amount1);\\r\\n  }\\r\\n\\r\\n  /// @dev This low-level function should be called from a contract which performs important safety checks\\r\\n  ///      standard uniswap v2 implementation\\r\\n  function burn(address to) external lock override returns (uint amount0, uint amount1) {\\r\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n    (address _token0, address _token1) = (token0, token1);\\r\\n    uint _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n    uint _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n    uint _liquidity = balanceOf[address(this)];\\r\\n\\r\\n    // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n    uint _totalSupply = totalSupply;\\r\\n    // using balances ensures pro-rata distribution\\r\\n    amount0 = _liquidity * _balance0 / _totalSupply;\\r\\n    // using balances ensures pro-rata distribution\\r\\n    amount1 = _liquidity * _balance1 / _totalSupply;\\r\\n    require(amount0 > 0 && amount1 > 0, 'DystPair: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n    _burn(address(this), _liquidity);\\r\\n    IERC20(_token0).safeTransfer(to, amount0);\\r\\n    IERC20(_token1).safeTransfer(to, amount1);\\r\\n    _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n    _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n    _update(_balance0, _balance1, _reserve0, _reserve1);\\r\\n    emit Burn(msg.sender, amount0, amount1, to);\\r\\n  }\\r\\n\\r\\n  /// @dev This low-level function should be called from a contract which performs important safety checks\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {\\r\\n    require(!IFactory(factory).isPaused(), \\\"DystPair: PAUSE\\\");\\r\\n    require(amount0Out > 0 || amount1Out > 0, 'DystPair: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, 'DystPair: INSUFFICIENT_LIQUIDITY');\\r\\n    uint _balance0;\\r\\n    uint _balance1;\\r\\n    {// scope for _token{0,1}, avoids stack too deep errors\\r\\n      (address _token0, address _token1) = (token0, token1);\\r\\n      require(to != _token0 && to != _token1, 'DystPair: INVALID_TO');\\r\\n      // optimistically transfer tokens\\r\\n      if (amount0Out > 0) IERC20(_token0).safeTransfer(to, amount0Out);\\r\\n      // optimistically transfer tokens\\r\\n      if (amount1Out > 0) IERC20(_token1).safeTransfer(to, amount1Out);\\r\\n      // callback, used for flash loans\\r\\n      if (data.length > 0) ICallee(to).hook(msg.sender, amount0Out, amount1Out, data);\\r\\n      _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n      _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n    }\\r\\n    uint amount0In = _balance0 > _reserve0 - amount0Out ? _balance0 - (_reserve0 - amount0Out) : 0;\\r\\n    uint amount1In = _balance1 > _reserve1 - amount1Out ? _balance1 - (_reserve1 - amount1Out) : 0;\\r\\n    require(amount0In > 0 || amount1In > 0, 'DystPair: INSUFFICIENT_INPUT_AMOUNT');\\r\\n    {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n      (address _token0, address _token1) = (token0, token1);\\r\\n      // accrue fees for token0 and move them out of pool\\r\\n      if (amount0In > 0) _update0(amount0In / SWAP_FEE);\\r\\n      // accrue fees for token1 and move them out of pool\\r\\n      if (amount1In > 0) _update1(amount1In / SWAP_FEE);\\r\\n      // since we removed tokens, we need to reconfirm balances,\\r\\n      // can also simply use previous balance - amountIn/ SWAP_FEE,\\r\\n      // but doing balanceOf again as safety check\\r\\n      _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n      _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n      // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\r\\n      require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), 'DystPair: K');\\r\\n    }\\r\\n\\r\\n    _update(_balance0, _balance1, _reserve0, _reserve1);\\r\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n  }\\r\\n\\r\\n  /// @dev Force balances to match reserves\\r\\n  function skim(address to) external lock {\\r\\n    (address _token0, address _token1) = (token0, token1);\\r\\n    IERC20(_token0).safeTransfer(to, IERC20(_token0).balanceOf(address(this)) - (reserve0));\\r\\n    IERC20(_token1).safeTransfer(to, IERC20(_token1).balanceOf(address(this)) - (reserve1));\\r\\n  }\\r\\n\\r\\n  // force reserves to match balances\\r\\n  function sync() external lock {\\r\\n    _update(\\r\\n      IERC20(token0).balanceOf(address(this)),\\r\\n      IERC20(token1).balanceOf(address(this)),\\r\\n      reserve0,\\r\\n      reserve1\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _f(uint x0, uint y) internal pure returns (uint) {\\r\\n    return x0 * (y * y / 1e18 * y / 1e18) / 1e18 + (x0 * x0 / 1e18 * x0 / 1e18) * y / 1e18;\\r\\n  }\\r\\n\\r\\n  function _d(uint x0, uint y) internal pure returns (uint) {\\r\\n    return 3 * x0 * (y * y / 1e18) / 1e18 + (x0 * x0 / 1e18 * x0 / 1e18);\\r\\n  }\\r\\n\\r\\n  function _getY(uint x0, uint xy, uint y) internal pure returns (uint) {\\r\\n    for (uint i = 0; i < 255; i++) {\\r\\n      uint yPrev = y;\\r\\n      uint k = _f(x0, y);\\r\\n      if (k < xy) {\\r\\n        uint dy = (xy - k) * 1e18 / _d(x0, y);\\r\\n        y = y + dy;\\r\\n      } else {\\r\\n        uint dy = (k - xy) * 1e18 / _d(x0, y);\\r\\n        y = y - dy;\\r\\n      }\\r\\n      if (Math.closeTo(y, yPrev, 1)) {\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    return y;\\r\\n  }\\r\\n\\r\\n  function getAmountOut(uint amountIn, address tokenIn) external view override returns (uint) {\\r\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\r\\n    // remove fee from amount received\\r\\n    amountIn -= amountIn / SWAP_FEE;\\r\\n    return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\r\\n  }\\r\\n\\r\\n  function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1) internal view returns (uint) {\\r\\n    if (stable) {\\r\\n      uint xy = _k(_reserve0, _reserve1);\\r\\n      _reserve0 = _reserve0 * 1e18 / decimals0;\\r\\n      _reserve1 = _reserve1 * 1e18 / decimals1;\\r\\n      (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\r\\n      amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\\r\\n      uint y = reserveB - _getY(amountIn + reserveA, xy, reserveB);\\r\\n      return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\\r\\n    } else {\\r\\n      (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\r\\n      return amountIn * reserveB / (reserveA + amountIn);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _k(uint x, uint y) internal view returns (uint) {\\r\\n    if (stable) {\\r\\n      uint _x = x * 1e18 / decimals0;\\r\\n      uint _y = y * 1e18 / decimals1;\\r\\n      uint _a = (_x * _y) / 1e18;\\r\\n      uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\r\\n      // x3y+y3x >= k\\r\\n      return _a * _b / 1e18;\\r\\n    } else {\\r\\n      // xy >= k\\r\\n      return x * y;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //****************************************************************************\\r\\n  //**************************** ERC20 *****************************************\\r\\n  //****************************************************************************\\r\\n\\r\\n  function _mint(address dst, uint amount) internal {\\r\\n    // balances must be updated on mint/burn/transfer\\r\\n    _updateFor(dst);\\r\\n    totalSupply += amount;\\r\\n    balanceOf[dst] += amount;\\r\\n    emit Transfer(address(0), dst, amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address dst, uint amount) internal {\\r\\n    _updateFor(dst);\\r\\n    totalSupply -= amount;\\r\\n    balanceOf[dst] -= amount;\\r\\n    emit Transfer(dst, address(0), amount);\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint amount) external override returns (bool) {\\r\\n    require(spender != address(0), \\\"DystPair: Approve to the zero address\\\");\\r\\n    allowance[msg.sender][spender] = amount;\\r\\n\\r\\n    emit Approval(msg.sender, spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint value,\\r\\n    uint deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external override {\\r\\n    require(deadline >= block.timestamp, 'DystPair: EXPIRED');\\r\\n    bytes32 digest = keccak256(\\r\\n      abi.encodePacked(\\r\\n        '\\\\x19\\\\x01',\\r\\n        DOMAIN_SEPARATOR,\\r\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n      )\\r\\n    );\\r\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n    require(recoveredAddress != address(0) && recoveredAddress == owner, 'DystPair: INVALID_SIGNATURE');\\r\\n    allowance[owner][spender] = value;\\r\\n\\r\\n    emit Approval(owner, spender, value);\\r\\n  }\\r\\n\\r\\n  function transfer(address dst, uint amount) external override returns (bool) {\\r\\n    _transferTokens(msg.sender, dst, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address src, address dst, uint amount) external override returns (bool) {\\r\\n    address spender = msg.sender;\\r\\n    uint spenderAllowance = allowance[src][spender];\\r\\n\\r\\n    if (spender != src && spenderAllowance != type(uint).max) {\\r\\n      require(spenderAllowance >= amount, \\\"DystPair: Insufficient allowance\\\");\\r\\n    unchecked {\\r\\n      uint newAllowance = spenderAllowance - amount;\\r\\n      allowance[src][spender] = newAllowance;\\r\\n      emit Approval(src, spender, newAllowance);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    _transferTokens(src, dst, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _transferTokens(address src, address dst, uint amount) internal {\\r\\n    require(dst != address(0), \\\"DystPair: Transfer to the zero address\\\");\\r\\n\\r\\n    // update fee position for src\\r\\n    _updateFor(src);\\r\\n    // update fee position for dst\\r\\n    _updateFor(dst);\\r\\n\\r\\n    uint srcBalance = balanceOf[src];\\r\\n    require(srcBalance >= amount, \\\"DystPair: Transfer amount exceeds balance\\\");\\r\\n  unchecked {\\r\\n    balanceOf[src] = srcBalance - amount;\\r\\n  }\\r\\n\\r\\n    balanceOf[dst] += amount;\\r\\n\\r\\n    emit Transfer(src, dst, amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n* @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n*/\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n  /**\\r\\n  * @dev Returns the token collection name.\\r\\n  */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token collection symbol.\\r\\n  */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n  */\\r\\n  function tokenURI(uint tokenId) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPair {\\r\\n\\r\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\r\\n  struct Observation {\\r\\n    uint timestamp;\\r\\n    uint reserve0Cumulative;\\r\\n    uint reserve1Cumulative;\\r\\n  }\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n  function getAmountOut(uint, address) external view returns (uint);\\r\\n\\r\\n  function claimFees() external returns (uint, uint);\\r\\n\\r\\n  function tokens() external returns (address, address);\\r\\n\\r\\n  function token0() external returns (address);\\r\\n\\r\\n  function token1() external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFactory {\\r\\n  function treasury() external view returns (address);\\r\\n\\r\\n  function isPair(address pair) external view returns (bool);\\r\\n\\r\\n  function getInitializable() external view returns (address, address, bool);\\r\\n\\r\\n  function isPaused() external view returns (bool);\\r\\n\\r\\n  function pairCodeHash() external pure returns (bytes32);\\r\\n\\r\\n  function getPair(address tokenA, address token, bool stable) external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/ICallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface ICallee {\\r\\n  function hook(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IUnderlying {\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n  function mint(address, uint) external;\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function balanceOf(address) external view returns (uint);\\r\\n\\r\\n  function transfer(address, uint) external returns (bool);\\r\\n\\r\\n  function decimals() external returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/core/PairFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../interface/IERC20.sol\\\";\\r\\nimport \\\"../../lib/SafeERC20.sol\\\";\\r\\n\\r\\n/// @title Base V1 Fees contract is used as a 1:1 pair relationship to split out fees,\\r\\n///        this ensures that the curve does not need to be modified for LP shares\\r\\ncontract PairFees {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @dev The pair it is bonded to\\r\\n  address internal immutable pair;\\r\\n  /// @dev Token0 of pair, saved localy and statically for gas optimization\\r\\n  address internal immutable token0;\\r\\n  /// @dev Token1 of pair, saved localy and statically for gas optimization\\r\\n  address internal immutable token1;\\r\\n\\r\\n  constructor(address _token0, address _token1) {\\r\\n    pair = msg.sender;\\r\\n    token0 = _token0;\\r\\n    token1 = _token1;\\r\\n  }\\r\\n\\r\\n  // Allow the pair to transfer fees to users\\r\\n  function claimFeesFor(address recipient, uint amount0, uint amount1) external {\\r\\n    require(msg.sender == pair, \\\"Not pair\\\");\\r\\n    if (amount0 > 0) {\\r\\n      IERC20(token0).safeTransfer(recipient, amount0);\\r\\n    }\\r\\n    if (amount1 > 0) {\\r\\n      IERC20(token1).safeTransfer(recipient, amount1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nlibrary Math {\\r\\n\\r\\n  function max(uint a, uint b) internal pure returns (uint) {\\r\\n    return a >= b ? a : b;\\r\\n  }\\r\\n\\r\\n  function min(uint a, uint b) internal pure returns (uint) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  function positiveInt128(int128 value) internal pure returns (int128) {\\r\\n    return value < 0 ? int128(0) : value;\\r\\n  }\\r\\n\\r\\n  function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\r\\n    if (a > b) {\\r\\n      if (a - b <= target) {\\r\\n        return true;\\r\\n      }\\r\\n    } else {\\r\\n      if (b - a <= target) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function sqrt(uint y) internal pure returns (uint z) {\\r\\n    if (y > 3) {\\r\\n      z = y;\\r\\n      uint x = y / 2 + 1;\\r\\n      while (x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n    } else if (y != 0) {\\r\\n      z = 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/Reentrancy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nabstract contract Reentrancy {\\r\\n\\r\\n  /// @dev simple re-entrancy check\\r\\n  uint internal _unlocked = 1;\\r\\n\\r\\n  modifier lock() {\\r\\n    require(_unlocked == 1, \\\"Reentrant call\\\");\\r\\n    _unlocked = 2;\\r\\n    _;\\r\\n    _unlocked = 1;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n  /**\\r\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n   */\\r\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of tokens in ``owner``'s account.\\r\\n   */\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the owner of the `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n   * The approval is cleared when the token is transferred.\\r\\n   *\\r\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The caller must own the token or be an approved operator.\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the account approved for `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Approve or remove `operator` as an operator for the caller.\\r\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The `operator` cannot be the caller.\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n   *\\r\\n   * See {setApprovalForAll}\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n    (bool success, bytes memory returndata) = target.call(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Treasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCumulativePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastObservation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"}],\"internalType\":\"struct IPair.Observation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dec0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dec1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"st\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"sample\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DystPair", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}