{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/routers/ConnextRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ConnextRouter\\n *\\n * @author Fujidao Labs\\n *\\n * @notice A Router implementing Connext specific bridging logic.\\n */\\n\\nimport {SafeERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IConnext, IXReceiver} from \\\"../interfaces/connext/IConnext.sol\\\";\\nimport {ConnextHandler} from \\\"./ConnextHandler.sol\\\";\\nimport {BaseRouter} from \\\"../abstracts/BaseRouter.sol\\\";\\nimport {IWETH9} from \\\"../abstracts/WETH9.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IVaultPermissions} from \\\"../interfaces/IVaultPermissions.sol\\\";\\nimport {IChief} from \\\"../interfaces/IChief.sol\\\";\\nimport {IRouter} from \\\"../interfaces/IRouter.sol\\\";\\nimport {IFlasher} from \\\"../interfaces/IFlasher.sol\\\";\\nimport {LibBytes} from \\\"../libraries/LibBytes.sol\\\";\\n\\ncontract ConnextRouter is BaseRouter, IXReceiver {\\n  /**\\n   * @dev Emitted when a new destination router gets added.\\n   *\\n   * @param router the router on another chain\\n   * @param domain the destination domain identifier according Connext nomenclature\\n   */\\n  event NewRouterAdded(address indexed router, uint256 indexed domain);\\n\\n  /**\\n   * @dev Emitted when Connext `xCall` is invoked.\\n   *\\n   * @param transferId the unique identifier of the crosschain transfer\\n   * @param caller the account that called the function\\n   * @param receiver the router on destDomain\\n   * @param destDomain the destination domain identifier according Connext nomenclature\\n   * @param asset the asset being transferred\\n   * @param amount the amount of transferring asset the recipient address receives\\n   * @param callData the calldata sent to destination router that will get decoded and executed\\n   */\\n  event XCalled(\\n    bytes32 indexed transferId,\\n    address indexed caller,\\n    address indexed receiver,\\n    uint256 destDomain,\\n    address asset,\\n    uint256 amount,\\n    bytes callData\\n  );\\n\\n  /**\\n   * @dev Emitted when the router receives a cross-chain call.\\n   *\\n   * @param transferId the unique identifier of the crosschain transfer\\n   * @param originDomain the origin domain identifier according Connext nomenclature\\n   * @param success whether or not the xBundle call succeeds\\n   * @param asset the asset being transferred\\n   * @param amount the amount of transferring asset the recipient address receives\\n   * @param callData the calldata that will get decoded and executed\\n   */\\n  event XReceived(\\n    bytes32 indexed transferId,\\n    uint256 indexed originDomain,\\n    bool success,\\n    address asset,\\n    uint256 amount,\\n    bytes callData\\n  );\\n\\n  /// @dev Custom Errors\\n  error ConnextRouter__setRouter_invalidInput();\\n  error ConnextRouter__xReceive_notReceivedAssetBalance();\\n  error ConnextRouter__xReceive_notAllowedCaller();\\n  error ConnextRouter__xReceiver_noValueTransferUseXbundle();\\n  error ConnnextRouter__xBundleConnext_notSelfCalled();\\n\\n  /// @dev The connext contract on the origin domain.\\n  IConnext public immutable connext;\\n\\n  ConnextHandler public immutable handler;\\n\\n  /**\\n   * @notice A mapping of a domain of another chain and a deployed router there.\\n   *\\n   * @dev For the list of domains supported by Connext,\\n   * plz check: https://docs.connext.network/resources/deployments\\n   */\\n  mapping(uint256 => address) public routerByDomain;\\n\\n  modifier onlySelf() {\\n    if (msg.sender != address(this)) {\\n      revert ConnnextRouter__xBundleConnext_notSelfCalled();\\n    }\\n    _;\\n  }\\n\\n  constructor(IWETH9 weth, IConnext connext_, IChief chief) BaseRouter(weth, chief) {\\n    connext = connext_;\\n    handler = new ConnextHandler(address(this));\\n    _allowCaller(msg.sender, true);\\n  }\\n\\n  /*////////////////////////////////////\\n        Connext specific functions\\n  ////////////////////////////////////*/\\n\\n  /**\\n   * @notice Called by Connext on the destination chain.\\n   *\\n   * @param transferId the unique identifier of the crosschain transfer\\n   * @param amount the amount of transferring asset, after slippage, the recipient address receives\\n   * @param asset the asset being transferred\\n   * @param originSender the address of the contract or EOA that called xcall on the origin chain\\n   * @param originDomain the origin domain identifier according Connext nomenclature\\n   * @param callData the calldata that will get decoded and executed, see \\\"Requirements\\\"\\n   *\\n   * @dev It does not perform authentication of the calling address. As a result of that,\\n   * all txns go through Connext's fast path.\\n   * If `xBundle` fails internally, this contract will send the received funds to {ConnextHandler}.\\n   *\\n   * Requirements:\\n   * - `calldata` parameter must be encoded with the following structure:\\n   *     > abi.encode(Action[] actions, bytes[] args)\\n   * - actions: array of serialized actions to execute from available enum {IRouter.Action}.\\n   * - args: array of encoded arguments according to each action. See {BaseRouter-internalBundle}.\\n   */\\n  function xReceive(\\n    bytes32 transferId,\\n    uint256 amount,\\n    address asset,\\n    address originSender,\\n    uint32 originDomain,\\n    bytes memory callData\\n  )\\n    external\\n    returns (bytes memory)\\n  {\\n    (Action[] memory actions, bytes[] memory args) = abi.decode(callData, (Action[], bytes[]));\\n\\n    uint256 balance;\\n    uint256 beforeSlipped;\\n    if (amount > 0) {\\n      // Ensure that at this entry point expected `asset` `amount` is received.\\n      balance = IERC20(asset).balanceOf(address(this));\\n      if (balance < amount) {\\n        revert ConnextRouter__xReceive_notReceivedAssetBalance();\\n      } else {\\n        _tempTokenToCheck = Snapshot(asset, balance - amount);\\n      }\\n\\n      /**\\n       * @dev Due to the AMM nature of Connext, there could be some slippage\\n       * incurred on the amount that this contract receives after bridging.\\n       * There is also a routing fee of 0.05% of the bridged amount.\\n       * The slippage can't be calculated upfront so that's why we need to\\n       * replace `amount` in the encoded args for the first action if\\n       * the action is Deposit, or Payback.\\n       */\\n      (args[0], beforeSlipped) = _accountForSlippage(amount, actions[0], args[0]);\\n    }\\n\\n    /**\\n     * @dev Connext will keep the custody of the bridged amount if the call\\n     * to `xReceive` fails. That's why we need to ensure the funds are not stuck at Connext.\\n     * Therefore we try/catch instead of directly calling _bundleInternal(...).\\n     */\\n    try this.xBundleConnext(actions, args, beforeSlipped) {\\n      emit XReceived(transferId, originDomain, true, asset, amount, callData);\\n    } catch {\\n      if (balance > 0) {\\n        SafeERC20.safeTransfer(IERC20(asset), address(handler), balance);\\n        handler.recordFailed(transferId, amount, asset, originSender, originDomain, actions, args);\\n      }\\n\\n      // Ensure clear storage for token balance checks.\\n      delete _tempTokenToCheck;\\n      emit XReceived(transferId, originDomain, false, asset, amount, callData);\\n    }\\n\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @notice Function selector created to allow try-catch procedure in Connext message data\\n   * passing.Including argument for `beforeSlipepd` not available in {BaseRouter-xBundle}.\\n   *\\n   * @param actions an array of actions that will be executed in a row\\n   * @param args an array of encoded inputs needed to execute each action\\n   * @param beforeSlipped amount passed by the origin cross-chain router operation\\n   *\\n   * @dev Requirements:\\n   * - Must only be called within the context of this same contract.\\n   */\\n  function xBundleConnext(\\n    Action[] calldata actions,\\n    bytes[] calldata args,\\n    uint256 beforeSlipped\\n  )\\n    external\\n    payable\\n    onlySelf\\n  {\\n    _bundleInternal(actions, args, beforeSlipped);\\n  }\\n\\n  /**\\n   * @dev Decodes and replaces \\\"amount\\\" argument in args with `receivedAmount`\\n   * in Deposit, or Payback.\\n   *\\n   * Refer to:\\n   * https://github.com/Fujicracy/fuji-v2/issues/253#issuecomment-1385995095\\n   */\\n  function _accountForSlippage(\\n    uint256 receivedAmount,\\n    Action action,\\n    bytes memory args\\n  )\\n    internal\\n    pure\\n    returns (bytes memory newArgs, uint256 beforeSlipped)\\n  {\\n    newArgs = args;\\n\\n    // Check first action type and replace with slippage-amount.\\n    if (action == Action.Deposit || action == Action.Payback) {\\n      // For Deposit or Payback.\\n      (IVault vault, uint256 amount, address receiver, address sender) =\\n        abi.decode(args, (IVault, uint256, address, address));\\n\\n      if (amount != receivedAmount) {\\n        beforeSlipped = amount;\\n        newArgs = abi.encode(vault, receivedAmount, receiver, sender);\\n      }\\n    } else if (action == Action.WithdrawETH) {\\n      // For WithdrawETH\\n      (uint256 amount, address receiver) = abi.decode(args, (uint256, address));\\n      if (amount != receivedAmount) {\\n        beforeSlipped = amount;\\n        newArgs = abi.encode(receivedAmount, receiver);\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc BaseRouter\\n  function _crossTransfer(\\n    bytes memory params,\\n    address beneficiary\\n  )\\n    internal\\n    override\\n    returns (address)\\n  {\\n    (\\n      uint256 destDomain,\\n      uint256 slippage,\\n      address asset,\\n      uint256 amount,\\n      address receiver,\\n      address sender\\n    ) = abi.decode(params, (uint256, uint256, address, uint256, address, address));\\n\\n    address beneficiary_ = _checkBeneficiary(beneficiary, receiver);\\n\\n    _safePullTokenFrom(asset, sender, amount);\\n    _safeApprove(asset, address(connext), amount);\\n\\n    bytes32 transferId = connext.xcall(\\n      // _destination: Domain ID of the destination chain\\n      uint32(destDomain),\\n      // _to: address of the target contract\\n      receiver,\\n      // _asset: address of the token contract\\n      asset,\\n      // _delegate: address that has rights to update the original slippage tolerance\\n      // by calling Connext's forceUpdateSlippage function\\n      beneficiary_,\\n      // _amount: amount of tokens to transfer\\n      amount,\\n      // _slippage: can be anything between 0-10000 becaus\\n      // the maximum amount of slippage the user will accept in BPS, 30 == 0.3%\\n      slippage,\\n      // _callData: empty because we're only sending funds\\n      \\\"\\\"\\n    );\\n    emit XCalled(transferId, msg.sender, receiver, destDomain, asset, amount, \\\"\\\");\\n\\n    return beneficiary_;\\n  }\\n\\n  /// @inheritdoc BaseRouter\\n  function _crossTransferWithCalldata(\\n    bytes memory params,\\n    address beneficiary\\n  )\\n    internal\\n    override\\n    returns (address beneficiary_)\\n  {\\n    (\\n      uint256 destDomain,\\n      uint256 slippage,\\n      address asset,\\n      uint256 amount,\\n      address sender,\\n      bytes memory callData\\n    ) = abi.decode(params, (uint256, uint256, address, uint256, address, bytes));\\n\\n    (Action[] memory actions, bytes[] memory args,) =\\n      abi.decode(callData, (Action[], bytes[], uint256));\\n\\n    beneficiary_ = _checkBeneficiary(beneficiary, _getBeneficiaryFromCalldata(actions, args));\\n\\n    _safePullTokenFrom(asset, sender, amount);\\n    _safeApprove(asset, address(connext), amount);\\n\\n    bytes32 transferId = connext.xcall(\\n      // _destination: Domain ID of the destination chain\\n      uint32(destDomain),\\n      // _to: address of the target contract\\n      routerByDomain[destDomain],\\n      // _asset: address of the token contract\\n      asset,\\n      // _delegate: address that can revert or forceLocal on destination\\n      beneficiary_,\\n      // _amount: amount of tokens to transfer\\n      amount,\\n      // _slippage: can be anything between 0-10000 becaus\\n      // the maximum amount of slippage the user will accept in BPS, 30 == 0.3%\\n      slippage,\\n      // _callData: the encoded calldata to send\\n      callData\\n    );\\n\\n    emit XCalled(\\n      transferId, msg.sender, routerByDomain[destDomain], destDomain, asset, amount, callData\\n    );\\n\\n    return beneficiary_;\\n  }\\n\\n  /**\\n   * @dev Returns who is the first receiver of value in `callData`\\n   * Requirements:\\n   * - Must revert if \\\"swap\\\" is first action\\n   *\\n   * @param actions to execute in {BaseRouter-xBundle}\\n   * @param args to execute in {BaseRouter-xBundle}\\n   */\\n  function _getBeneficiaryFromCalldata(\\n    Action[] memory actions,\\n    bytes[] memory args\\n  )\\n    internal\\n    view\\n    override\\n    returns (address beneficiary_)\\n  {\\n    if (actions[0] == Action.Deposit || actions[0] == Action.Payback) {\\n      // For Deposit or Payback.\\n      (,, address receiver,) = abi.decode(args[0], (IVault, uint256, address, address));\\n      beneficiary_ = receiver;\\n    } else if (actions[0] == Action.Withdraw || actions[0] == Action.Borrow) {\\n      // For Withdraw or Borrow\\n      (,,, address owner) = abi.decode(args[0], (IVault, uint256, address, address));\\n      beneficiary_ = owner;\\n    } else if (actions[0] == Action.WithdrawETH) {\\n      // For WithdrawEth\\n      (, address receiver) = abi.decode(args[0], (uint256, address));\\n      beneficiary_ = receiver;\\n    } else if (actions[0] == Action.PermitBorrow || actions[0] == Action.PermitWithdraw) {\\n      (, address owner,,,,,,) = abi.decode(\\n        args[0], (IVaultPermissions, address, address, uint256, uint256, uint8, bytes32, bytes32)\\n      );\\n      beneficiary_ = owner;\\n    } else if (actions[0] == Action.Flashloan) {\\n      (,,,, bytes memory requestorCalldata) =\\n        abi.decode(args[0], (IFlasher, address, uint256, address, bytes));\\n\\n      (Action[] memory newActions, bytes[] memory newArgs) = abi.decode(\\n        LibBytes.slice(requestorCalldata, 4, requestorCalldata.length - 4), (Action[], bytes[])\\n      );\\n\\n      beneficiary_ = _getBeneficiaryFromCalldata(newActions, newArgs);\\n    } else if (actions[0] == Action.XTransfer) {\\n      (,,,, address receiver,) =\\n        abi.decode(args[0], (uint256, uint256, address, uint256, address, address));\\n      beneficiary_ = receiver;\\n    } else if (actions[0] == Action.XTransferWithCall) {\\n      (,,,, bytes memory callData) =\\n        abi.decode(args[0], (uint256, uint256, address, uint256, bytes));\\n\\n      (Action[] memory actions_, bytes[] memory args_,) =\\n        abi.decode(callData, (Action[], bytes[], uint256));\\n\\n      beneficiary_ = _getBeneficiaryFromCalldata(actions_, args_);\\n    } else if (actions[0] == Action.DepositETH) {\\n      /// @dev There is no beneficiary in depositETH, therefore we do a recurssion with i = 1\\n      uint256 len = actions.length;\\n\\n      Action[] memory chopActions = new Action[](len -1);\\n      bytes[] memory chopArgs = new bytes[](len -1);\\n\\n      for (uint256 i = 1; i < len;) {\\n        chopActions[i - 1] = actions[i];\\n        chopArgs[i - 1] = args[i];\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      beneficiary_ = _getBeneficiaryFromCalldata(chopActions, chopArgs);\\n    } else if (actions[0] == Action.Swap) {\\n      /// @dev swap cannot be actions[0].\\n      revert BaseRouter__bundleInternal_swapNotFirstAction();\\n    }\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\\n   *\\n   * @param transferId the unique identifier of the crosschain transaction\\n   */\\n  function bumpTransfer(bytes32 transferId) external payable {\\n    connext.bumpTransfer{value: msg.value}(transferId);\\n  }\\n\\n  /**\\n   * @notice Registers an address of this contract deployed on another chain.\\n   *\\n   * @param domain unique identifier of a chain as defined in\\n   * https://docs.connext.network/resources/deployments\\n   * @param router address of a router deployed on the chain defined by its domain\\n   *\\n   * @dev The mapping domain -> router is used in `xReceive` to verify the origin sender.\\n   * Requirements:\\n   *  - Must be restricted to timelock.\\n   *  - `router` must be a non-zero address.\\n   */\\n  function setRouter(uint256 domain, address router) external onlyTimelock {\\n    if (router == address(0)) {\\n      revert ConnextRouter__setRouter_invalidInput();\\n    }\\n    routerByDomain[domain] = router;\\n\\n    emit NewRouterAdded(router, domain);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/connext/IConnext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IConnext\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the common interfaces and data types used\\n * to interact with Connext Amarok.\\n */\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called). Must match nomad domain schema\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called). Must match nomad domain schema\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local nomad asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\\n\\ninterface IConnext {\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  )\\n    external\\n    payable\\n    returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args)\\n    external\\n    returns (bool success, bytes memory returnData);\\n\\n  function bumpTransfer(bytes32 transferId) external payable;\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n}\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  )\\n    external\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/routers/ConnextHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ConnextHandler\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Handles failed transactions from Connext and keeps custody of\\n * the transferred funds.\\n */\\n\\nimport {ConnextRouter} from \\\"./ConnextRouter.sol\\\";\\nimport {IRouter} from \\\"../interfaces/IRouter.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {ISwapper} from \\\"../interfaces/ISwapper.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ConnextHandler {\\n  /**\\n   * @dev Contains the information of a failed transaction.\\n   */\\n  struct FailedTxn {\\n    bytes32 transferId;\\n    uint256 amount;\\n    address asset;\\n    address originSender;\\n    uint32 originDomain;\\n    IRouter.Action[] actions;\\n    bytes[] args;\\n    uint128 nonce;\\n    bool executed;\\n  }\\n\\n  /**\\n   * @dev Emitted when a failed transaction is recorded.\\n   *\\n   * @param transferId  unique id of the cross-chain txn\\n   * @param amount transferred\\n   * @param asset being transferred\\n   * @param originSender of the cross-chain txn\\n   * @param originDomain of the cross-chain txn\\n   * @param actions to be called in xBundle\\n   * @param args to be called for each action in xBundle\\n   * @param nonce of failed txn\\n   */\\n  event FailedTxnRecorded(\\n    bytes32 indexed transferId,\\n    uint256 amount,\\n    address asset,\\n    address originSender,\\n    uint32 originDomain,\\n    IRouter.Action[] actions,\\n    bytes[] args,\\n    uint128 nonce\\n  );\\n\\n  /**\\n   * @dev Emitted when a failed transaction gets retried.\\n   *\\n   * @param transferId the unique identifier of the cross-chain txn\\n   * @param success boolean\\n   * @param oldArgs of the failed transaction\\n   * @param newArgs attemped in execution\\n   */\\n  event FailedTxnExecuted(\\n    bytes32 indexed transferId,\\n    IRouter.Action[] oldActions,\\n    IRouter.Action[] newActions,\\n    bytes[] oldArgs,\\n    bytes[] newArgs,\\n    uint128 nonce,\\n    bool indexed success\\n  );\\n\\n  /// @dev Custom errors\\n  error ConnextHandler__callerNotConnextRouter();\\n  error ConnextHandler__executeFailed_emptyTxn();\\n  error ConnextHandler__executeFailed_tranferAlreadyExecuted(bytes32 transferId, uint128 nonce);\\n\\n  bytes32 private constant ZERO_BYTES32 =\\n    0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n  ConnextRouter public immutable connextRouter;\\n\\n  /**\\n   * @dev Maps a failed transferId -> nonce -> calldata\\n   * Multiple failed attempts are registered with nonce\\n   */\\n  mapping(bytes32 => mapping(uint256 => FailedTxn)) private _failedTxns;\\n\\n  modifier onlyConnextRouter() {\\n    if (msg.sender != address(connextRouter)) {\\n      revert ConnextHandler__callerNotConnextRouter();\\n    }\\n    _;\\n  }\\n\\n  /// @dev Modifier that checks `msg.sender` is an allowed called in {ConnextRouter}.\\n  modifier onlyAllowedCaller() {\\n    if (!connextRouter.isAllowedCaller(msg.sender)) {\\n      revert ConnextHandler__callerNotConnextRouter();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Constructor that initialized\\n   */\\n  constructor(address connextRouter_) {\\n    connextRouter = ConnextRouter(payable(connextRouter_));\\n  }\\n\\n  /**\\n   * @notice Returns the struct of failed transaction by `transferId`.\\n   *\\n   * @param transferId the unique identifier of the cross-chain txn\\n   * @param nonce attempt of failed tx\\n   */\\n  function getFailedTxn(bytes32 transferId, uint128 nonce) public view returns (FailedTxn memory) {\\n    return _failedTxns[transferId][nonce];\\n  }\\n\\n  function getFailedTxnNextNonce(bytes32 transferId) public view returns (uint128 next) {\\n    next = 0;\\n    for (uint256 i; i < type(uint8).max;) {\\n      if (!isTransferIdRecorded(transferId, uint128(i))) {\\n        next = uint128(i);\\n        break;\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the true if the failed transaction is already recorded.\\n   *\\n   * @param transferId the unique identifier of the cross-chain txn\\n   */\\n  function isTransferIdRecorded(bytes32 transferId, uint128 nonce) public view returns (bool) {\\n    FailedTxn memory ftxn = _failedTxns[transferId][nonce];\\n    if (ftxn.transferId != ZERO_BYTES32 && ftxn.originDomain != 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Records a failed {ConnextRouter-xReceive} call.\\n   *\\n   * @param transferId the unique identifier of the cross-chain txn\\n   * @param amount the amount of transferring asset, after slippage, the recipient address receives\\n   * @param asset the asset being transferred\\n   * @param originSender the address of the contract or EOA that called xcall on the origin chain\\n   * @param originDomain the origin domain identifier according Connext nomenclature\\n   * @param actions that should be executed in {BaseRouter-internalBundle}\\n   * @param args for the actions\\n   *\\n   * @dev At this point of execution {ConnextRouter} sent all balance of `asset` to this contract.\\n   * It has already been verified that `amount` of `asset` is >= to balance sent.\\n   * This function does not need to emit an event since {ConnextRouter} already emit\\n   * a failed `XReceived` event.\\n   */\\n  function recordFailed(\\n    bytes32 transferId,\\n    uint256 amount,\\n    address asset,\\n    address originSender,\\n    uint32 originDomain,\\n    IRouter.Action[] memory actions,\\n    bytes[] memory args\\n  )\\n    external\\n    onlyConnextRouter\\n  {\\n    uint128 nextNonce = getFailedTxnNextNonce(transferId);\\n    _failedTxns[transferId][nextNonce] = FailedTxn(\\n      transferId, amount, asset, originSender, originDomain, actions, args, nextNonce, false\\n    );\\n\\n    emit FailedTxnRecorded(\\n      transferId, amount, asset, originSender, originDomain, actions, args, nextNonce\\n    );\\n  }\\n\\n  /**\\n   * @notice Executes a failed transaction with update `args`\\n   *\\n   * @param transferId the unique identifier of the cross-chain txn\\n   * @param nonce of the failed attempt to execute\\n   * @param actions  that will replace actions of failed txn\\n   * @param args taht will replace args of failed txn\\n   *\\n   * @dev Requirements:\\n   * - Must only be called by an allowed caller in {ConnextRouter}.\\n   * - Must clear the txn from `_failedTxns` mapping if execution succeeds.\\n   * - Must replace `sender` in `args` for value tranfer type actions (Deposit-Payback-Swap}.\\n   */\\n  function executeFailedWithUpdatedArgs(\\n    bytes32 transferId,\\n    uint128 nonce,\\n    IRouter.Action[] memory actions,\\n    bytes[] memory args\\n  )\\n    external\\n    onlyAllowedCaller\\n  {\\n    FailedTxn memory txn = _failedTxns[transferId][nonce];\\n\\n    if (txn.transferId == ZERO_BYTES32 || txn.originDomain == 0) {\\n      revert ConnextHandler__executeFailed_emptyTxn();\\n    } else if (txn.executed) {\\n      revert ConnextHandler__executeFailed_tranferAlreadyExecuted(transferId, nonce);\\n    }\\n\\n    IERC20(txn.asset).approve(address(connextRouter), txn.amount);\\n\\n    try connextRouter.xBundle(actions, args) {\\n      txn.executed = true;\\n      _failedTxns[transferId][nonce] = txn;\\n      emit FailedTxnExecuted(transferId, txn.actions, actions, txn.args, args, nonce, true);\\n    } catch {\\n      emit FailedTxnExecuted(transferId, txn.actions, actions, txn.args, args, nonce, false);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/abstracts/BaseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title BaseRouter\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Abstract contract to be inherited by all routers.\\n */\\n\\nimport {IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IRouter} from \\\"../interfaces/IRouter.sol\\\";\\nimport {ISwapper} from \\\"../interfaces/ISwapper.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IChief} from \\\"../interfaces/IChief.sol\\\";\\nimport {IFlasher} from \\\"../interfaces/IFlasher.sol\\\";\\nimport {IVaultPermissions} from \\\"../interfaces/IVaultPermissions.sol\\\";\\nimport {SystemAccessControl} from \\\"../access/SystemAccessControl.sol\\\";\\nimport {IWETH9} from \\\"../abstracts/WETH9.sol\\\";\\nimport {LibBytes} from \\\"../libraries/LibBytes.sol\\\";\\n\\nabstract contract BaseRouter is SystemAccessControl, IRouter {\\n  /**\\n   * @dev Contains an address of an ERC-20 and the balance the router holds\\n   * at a given moment of the transaction (ref. `_tokensToCheck`).\\n   */\\n  struct Snapshot {\\n    address token;\\n    uint256 balance;\\n  }\\n\\n  /**\\n   * @dev Struct used internally containing the arguments of a IRouter.Action.Permit* to store\\n   * and pass in memory and avoid \\\"stack too deep\\\" errors.\\n   */\\n  struct PermitArgs {\\n    IVaultPermissions vault;\\n    address owner;\\n    address receiver;\\n    uint256 amount;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  /**\\n   * @dev Emitted when `caller` is updated according to `allowed` boolean\\n   * to perform cross-chain calls.\\n   *\\n   * @param caller permitted for cross-chain calls\\n   * @param allowed boolean state\\n   */\\n  event AllowCaller(address caller, bool allowed);\\n\\n  /// @dev Custom Errors\\n  error BaseRouter__bundleInternal_swapNotFirstAction();\\n  error BaseRouter__bundleInternal_paramsMismatch();\\n  error BaseRouter__bundleInternal_flashloanInvalidRequestor();\\n  error BaseRouter__bundleInternal_noBalanceChange();\\n  error BaseRouter__bundleInternal_insufficientETH();\\n  error BaseRouter__bundleInternal_notBeneficiary();\\n  error BaseRouter__checkVaultInput_notActiveVault();\\n  error BaseRouter__bundleInternal_notAllowedSwapper();\\n  error BaseRouter__bundleInternal_notAllowedFlasher();\\n  error BaseRouter__handlePermit_notPermitAction();\\n  error BaseRouter__safeTransferETH_transferFailed();\\n  error BaseRouter__receive_senderNotWETH();\\n  error BaseRouter__fallback_notAllowed();\\n  error BaseRouter__allowCaller_zeroAddress();\\n  error BaseRouter__allowCaller_noAllowChange();\\n  error BaseRouter__bundleInternal_insufficientFlashloanBalance();\\n\\n  IWETH9 public immutable WETH9;\\n\\n  bytes32 private constant ZERO_BYTES32 =\\n    0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n  /// @dev Apply it on entry cross-chain calls functions as required.\\n  mapping(address => bool) public isAllowedCaller;\\n\\n  /**\\n   * @dev Stores token balances of this contract at a given moment.\\n   * It's used to pass tokens to check from parent contract this contract.\\n   */\\n  Snapshot internal _tempTokenToCheck;\\n\\n  /**\\n   * @notice Constructor of a new {BaseRouter}.\\n   *\\n   * @param weth wrapped native token of this chain\\n   * @param chief contract\\n   */\\n  constructor(IWETH9 weth, IChief chief) payable SystemAccessControl(address(chief)) {\\n    WETH9 = weth;\\n  }\\n\\n  /// @inheritdoc IRouter\\n  function xBundle(Action[] calldata actions, bytes[] calldata args) external payable override {\\n    _bundleInternal(actions, args, 0);\\n  }\\n\\n  /**\\n   * @notice Marks a specific caller as allowed/disallowed to call certain functions.\\n   *\\n   * @param caller address to allow/disallow\\n   * @param allowed 'true' to allow, 'false' to disallow\\n   *\\n   * @dev The authorization is to be implemented on the bridge-specific contract.\\n   */\\n  function allowCaller(address caller, bool allowed) external onlyTimelock {\\n    _allowCaller(caller, allowed);\\n  }\\n\\n  /// @inheritdoc IRouter\\n  function sweepToken(ERC20 token, address receiver) external onlyHouseKeeper {\\n    SafeERC20.safeTransfer(token, receiver, token.balanceOf(address(this)));\\n  }\\n\\n  /// @inheritdoc IRouter\\n  function sweepETH(address receiver) external onlyHouseKeeper {\\n    _safeTransferETH(receiver, address(this).balance);\\n  }\\n\\n  /**\\n   * @dev Executes a bundle of actions.\\n   * Requirements:\\n   * - Must not leave any balance in this contract after all actions.\\n   * - Must call `_checkNoBalanceChange()` after all `actions` are executed.\\n   * - Must call `_addTokenToList()` in `actions` that involve tokens.\\n   * - Must clear `_beneficiary` from storage after all `actions` are executed.\\n   *\\n   * @param actions an array of actions that will be executed in a row\\n   * @param args an array of encoded inputs needed to execute each action\\n   * @param beforeSlipped amount passed by the origin cross-chain router operation\\n   */\\n  function _bundleInternal(\\n    Action[] memory actions,\\n    bytes[] memory args,\\n    uint256 beforeSlipped\\n  )\\n    internal\\n  {\\n    uint256 len = actions.length;\\n    if (len != args.length) {\\n      revert BaseRouter__bundleInternal_paramsMismatch();\\n    }\\n\\n    /**\\n     * @dev Operations in the bundle should \\\"benefit\\\" or be executed\\n     * on behalf of this account. These are receivers on DEPOSIT and PAYBACK\\n     * or owners on WITHDRAW and BORROW.\\n     */\\n    address beneficiary;\\n\\n    /**\\n     * @dev Hash generated during execution of \\\"_bundleInternal()\\\" that should\\n     * match the signed permit.\\n     * This argument is used in {VaultPermissions-PermitWithdraw} and\\n     * {VaultPermissions-PermitBorrow}\\n     */\\n    bytes32 actionArgsHash;\\n\\n    /**\\n     * @dev Stores token balances of this contract at a given moment.\\n     * It's used to ensure there're no changes in balances at the\\n     * end of a transaction.\\n     */\\n    Snapshot[] memory tokensToCheck = new Snapshot[](10);\\n\\n    /// @dev Add token to check from parent calls.\\n    if (_tempTokenToCheck.token != address(0)) {\\n      tokensToCheck[0] = _tempTokenToCheck;\\n    }\\n\\n    uint256 nativeBalance = address(this).balance - msg.value;\\n\\n    for (uint256 i; i < len;) {\\n      Action action = actions[i];\\n      if (action == Action.Deposit) {\\n        // DEPOSIT\\n        (IVault vault, uint256 amount, address receiver, address sender) =\\n          abi.decode(args[i], (IVault, uint256, address, address));\\n\\n        _checkVaultInput(address(vault));\\n\\n        address token = vault.asset();\\n        beneficiary = _checkBeneficiary(beneficiary, receiver);\\n        tokensToCheck = _addTokenToList(token, tokensToCheck);\\n        _safePullTokenFrom(token, sender, amount);\\n        _safeApprove(token, address(vault), amount);\\n\\n        vault.deposit(amount, receiver);\\n      } else if (action == Action.Withdraw) {\\n        // WITHDRAW\\n        (IVault vault, uint256 amount, address receiver, address owner) =\\n          abi.decode(args[i], (IVault, uint256, address, address));\\n\\n        _checkVaultInput(address(vault));\\n\\n        beneficiary = _checkBeneficiary(beneficiary, owner);\\n        tokensToCheck = _addTokenToList(vault.asset(), tokensToCheck);\\n\\n        vault.withdraw(amount, receiver, owner);\\n      } else if (action == Action.Borrow) {\\n        // BORROW\\n        (IVault vault, uint256 amount, address receiver, address owner) =\\n          abi.decode(args[i], (IVault, uint256, address, address));\\n\\n        _checkVaultInput(address(vault));\\n\\n        beneficiary = _checkBeneficiary(beneficiary, owner);\\n        tokensToCheck = _addTokenToList(vault.debtAsset(), tokensToCheck);\\n\\n        vault.borrow(amount, receiver, owner);\\n      } else if (action == Action.Payback) {\\n        // PAYBACK\\n        (IVault vault, uint256 amount, address receiver, address sender) =\\n          abi.decode(args[i], (IVault, uint256, address, address));\\n\\n        _checkVaultInput(address(vault));\\n\\n        address token = vault.debtAsset();\\n        beneficiary = _checkBeneficiary(beneficiary, receiver);\\n        tokensToCheck = _addTokenToList(token, tokensToCheck);\\n        _safePullTokenFrom(token, sender, amount);\\n        _safeApprove(token, address(vault), amount);\\n\\n        vault.payback(amount, receiver);\\n      } else if (action == Action.PermitWithdraw) {\\n        // PERMIT WITHDRAW\\n        if (actionArgsHash == ZERO_BYTES32) {\\n          actionArgsHash = _getActionArgsHash(actions, args, beforeSlipped);\\n        }\\n\\n        // Scoped code in new private function to avoid \\\"Stack too deep\\\"\\n        address owner_ = _handlePermitAction(action, args[i], actionArgsHash);\\n        beneficiary = _checkBeneficiary(beneficiary, owner_);\\n      } else if (action == Action.PermitBorrow) {\\n        // PERMIT BORROW\\n        if (actionArgsHash == ZERO_BYTES32) {\\n          actionArgsHash = _getActionArgsHash(actions, args, beforeSlipped);\\n        }\\n\\n        // Scoped code in new private function to avoid \\\"Stack too deep\\\"\\n        address owner_ = _handlePermitAction(action, args[i], actionArgsHash);\\n        beneficiary = _checkBeneficiary(beneficiary, owner_);\\n      } else if (action == Action.XTransfer) {\\n        // SIMPLE BRIDGE TRANSFER\\n\\n        beneficiary = _crossTransfer(args[i], beneficiary);\\n      } else if (action == Action.XTransferWithCall) {\\n        // BRIDGE WITH CALLDATA\\n\\n        beneficiary = _crossTransferWithCalldata(args[i], beneficiary);\\n      } else if (action == Action.Swap) {\\n        // SWAP\\n\\n        if (i == 0) {\\n          /// @dev swap cannot be actions[0].\\n          revert BaseRouter__bundleInternal_swapNotFirstAction();\\n        }\\n\\n        (beneficiary, tokensToCheck) = _handleSwapAction(args[i], beneficiary, tokensToCheck);\\n      } else if (action == Action.Flashloan) {\\n        // FLASHLOAN\\n\\n        // Decode params.\\n        (\\n          IFlasher flasher,\\n          address asset,\\n          uint256 flashAmount,\\n          address requestor,\\n          bytes memory requestorCalldata\\n        ) = abi.decode(args[i], (IFlasher, address, uint256, address, bytes));\\n\\n        if (!chief.allowedFlasher(address(flasher))) {\\n          revert BaseRouter__bundleInternal_notAllowedFlasher();\\n        }\\n        if (requestor != address(this)) {\\n          revert BaseRouter__bundleInternal_flashloanInvalidRequestor();\\n        }\\n        tokensToCheck = _addTokenToList(asset, tokensToCheck);\\n\\n        (Action[] memory innerActions, bytes[] memory innerArgs) = abi.decode(\\n          LibBytes.slice(requestorCalldata, 4, requestorCalldata.length - 4), (Action[], bytes[])\\n        );\\n\\n        beneficiary = _getBeneficiaryFromCalldata(innerActions, innerArgs);\\n\\n        // Call Flasher.\\n        flasher.initiateFlashloan(asset, flashAmount, requestor, requestorCalldata);\\n      } else if (action == Action.DepositETH) {\\n        uint256 amount = abi.decode(args[i], (uint256));\\n\\n        if (amount != msg.value) {\\n          revert BaseRouter__bundleInternal_insufficientETH();\\n        }\\n        tokensToCheck = _addTokenToList(address(WETH9), tokensToCheck);\\n\\n        WETH9.deposit{value: msg.value}();\\n      } else if (action == Action.WithdrawETH) {\\n        (uint256 amount, address receiver) = abi.decode(args[i], (uint256, address));\\n        beneficiary = _checkBeneficiary(beneficiary, receiver);\\n        tokensToCheck = _addTokenToList(address(WETH9), tokensToCheck);\\n\\n        WETH9.withdraw(amount);\\n\\n        _safeTransferETH(receiver, amount);\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    _checkNoBalanceChange(tokensToCheck, nativeBalance);\\n  }\\n\\n  /**\\n   * @dev Handles both permit actions logic flow.\\n   * This function was required to avoid \\\"stack too deep\\\" error in `_bundleInternal()`.\\n   *\\n   * @param action either IRouter.Action.PermitWithdraw (6), or IRouter.Action.PermitBorrow (7)\\n   * @param arg of the ongoing action\\n   * @param actionArgsHash_ created previously withing `_bundleInternal()` to be used in permit check\\n   */\\n  function _handlePermitAction(\\n    IRouter.Action action,\\n    bytes memory arg,\\n    bytes32 actionArgsHash_\\n  )\\n    private\\n    returns (address)\\n  {\\n    PermitArgs memory permitArgs;\\n    {\\n      (\\n        permitArgs.vault,\\n        permitArgs.owner,\\n        permitArgs.receiver,\\n        permitArgs.amount,\\n        permitArgs.deadline,\\n        permitArgs.v,\\n        permitArgs.r,\\n        permitArgs.s\\n      ) = abi.decode(\\n        arg, (IVaultPermissions, address, address, uint256, uint256, uint8, bytes32, bytes32)\\n      );\\n    }\\n\\n    _checkVaultInput(address(permitArgs.vault));\\n\\n    if (action == IRouter.Action.PermitWithdraw) {\\n      permitArgs.vault.permitWithdraw(\\n        permitArgs.owner,\\n        permitArgs.receiver,\\n        permitArgs.amount,\\n        permitArgs.deadline,\\n        actionArgsHash_,\\n        permitArgs.v,\\n        permitArgs.r,\\n        permitArgs.s\\n      );\\n    } else if (action == IRouter.Action.PermitBorrow) {\\n      permitArgs.vault.permitBorrow(\\n        permitArgs.owner,\\n        permitArgs.receiver,\\n        permitArgs.amount,\\n        permitArgs.deadline,\\n        actionArgsHash_,\\n        permitArgs.v,\\n        permitArgs.r,\\n        permitArgs.s\\n      );\\n    } else {\\n      revert BaseRouter__handlePermit_notPermitAction();\\n    }\\n\\n    return permitArgs.owner;\\n  }\\n\\n  /**\\n   * @dev Returns the `zeroPermitEncodedArgs` which is required to create\\n   * the `actionArgsHash` used during permit signature\\n   *\\n   * @param vault that will execute action\\n   * @param owner owner of the assets\\n   * @param receiver of the assets after action\\n   * @param amount of assets being permitted in action\\n   */\\n  function _getZeroPermitEncodedArgs(\\n    IVaultPermissions vault,\\n    address owner,\\n    address receiver,\\n    uint256 amount\\n  )\\n    private\\n    pure\\n    returns (bytes memory)\\n  {\\n    return abi.encode(vault, owner, receiver, amount, 0, 0, ZERO_BYTES32, ZERO_BYTES32);\\n  }\\n\\n  /**\\n   * @dev Returns the `actionsArgsHash` required in\\n   * {VaultPermissions-permitWithdraw} or {VaultPermissions-permitBorrow}.\\n   * Requirements:\\n   * - Must replace arguments in IRouter.Action.PermitWithdraw for \\\"zeroPermit\\\".\\n   * - Must replace arguments in IRouter.Action.PermitBorrow for \\\"zeroPermit\\\".\\n   * - Must replace `beforeSlipped` amount in cross-chain txs that had slippage.\\n   *\\n   *\\n   * @param actions being executed in this `_bundleInternal`\\n   * @param args provided in `_bundleInternal`\\n   * @param beforeSlipped amount passed by the origin cross-chain router operation\\n   */\\n  function _getActionArgsHash(\\n    IRouter.Action[] memory actions,\\n    bytes[] memory args,\\n    uint256 beforeSlipped\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    uint256 len = actions.length;\\n\\n    /**\\n     * @dev We intend to ONLY modify the new bytes array.\\n     * \\\"memory\\\" in solidity persists within internal calls.\\n     */\\n    bytes[] memory modArgs = new bytes[](len);\\n    for (uint256 i; i < len; i++) {\\n      modArgs[i] = args[i];\\n      if (\\n        i == 0 && beforeSlipped != 0\\n          && (actions[i] == IRouter.Action.Deposit || actions[i] == IRouter.Action.Payback)\\n      ) {\\n        /**\\n         * @dev Replace slippage values in the first ( i==0 ) \\\"value\\\" transfer\\n         * action in the destination chain (deposit or to payback).\\n         * If `beforeSlipped` == 0, it means there was no slippage in the attempted cross-chain tx\\n         * or the tx is single chain; thereore, not requiring any replacement.\\n         * Then, if beforeSlipped != 0 and beforeSlipped != slippedAmount, function should replace\\n         * to obtain the \\\"original\\\" intended transfer value signed in `actionArgsHash`.\\n         */\\n        (IVault vault, uint256 slippedAmount, address receiver, address sender) =\\n          abi.decode(modArgs[i], (IVault, uint256, address, address));\\n        if (beforeSlipped != slippedAmount) {\\n          modArgs[i] = abi.encode(vault, beforeSlipped, receiver, sender);\\n        }\\n      }\\n      if (actions[i] == IRouter.Action.PermitWithdraw || actions[i] == IRouter.Action.PermitBorrow)\\n      {\\n        // Need to replace permit `args` at `index` with the `zeroPermitArg`.\\n        (IVaultPermissions vault, address owner, address receiver, uint256 amount,,,,) = abi.decode(\\n          modArgs[i],\\n          (IVaultPermissions, address, address, uint256, uint256, uint8, bytes32, bytes32)\\n        );\\n        modArgs[i] = _getZeroPermitEncodedArgs(vault, owner, receiver, amount);\\n      }\\n    }\\n    return keccak256(abi.encode(actions, modArgs));\\n  }\\n\\n  /**\\n   * @dev Handles swap actions logic flow.\\n   * This function was required to avoid \\\"stack too deep\\\" error in `_bundleInternal()`.\\n   * Requirements:\\n   * - Must return updated \\\"beneficiary\\\" and \\\"tokensToCheck\\\".\\n   *\\n   * @param arg of the ongoing action\\n   * @param beneficiary_ passed through `_bundleInternal()`\\n   * @param tokensToCheck_ passed through `_bundleInternal()`\\n   */\\n  function _handleSwapAction(\\n    bytes memory arg,\\n    address beneficiary_,\\n    Snapshot[] memory tokensToCheck_\\n  )\\n    internal\\n    returns (address, Snapshot[] memory)\\n  {\\n    (\\n      ISwapper swapper,\\n      address assetIn,\\n      address assetOut,\\n      uint256 amountIn,\\n      uint256 amountOut,\\n      address receiver,\\n      address sweeper,\\n      uint256 minSweepOut\\n    ) = abi.decode(arg, (ISwapper, address, address, uint256, uint256, address, address, uint256));\\n\\n    if (!chief.allowedSwapper(address(swapper))) {\\n      revert BaseRouter__bundleInternal_notAllowedSwapper();\\n    }\\n\\n    tokensToCheck_ = _addTokenToList(assetIn, tokensToCheck_);\\n    tokensToCheck_ = _addTokenToList(assetOut, tokensToCheck_);\\n    _safeApprove(assetIn, address(swapper), amountIn);\\n\\n    if (receiver != address(this) && !chief.allowedFlasher(receiver)) {\\n      beneficiary_ = _checkBeneficiary(beneficiary_, receiver);\\n    }\\n\\n    if (sweeper != address(this)) {\\n      beneficiary_ = _checkBeneficiary(beneficiary_, sweeper);\\n    }\\n\\n    swapper.swap(assetIn, assetOut, amountIn, amountOut, receiver, sweeper, minSweepOut);\\n    return (beneficiary_, tokensToCheck_);\\n  }\\n\\n  /**\\n   * @dev Helper function to transfer ETH.\\n   *\\n   * @param receiver address to receive the ETH\\n   * @param amount amount to be transferred\\n   */\\n  function _safeTransferETH(address receiver, uint256 amount) internal {\\n    (bool success,) = receiver.call{value: amount}(new bytes(0));\\n    if (!success) {\\n      revert BaseRouter__safeTransferETH_transferFailed();\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to pull ERC-20 token from a sender address after some checks.\\n   * The checks are needed because when we bundle multiple actions\\n   * it can happen the router already holds the assets in question;\\n   * for. example when we withdraw from a vault and deposit to another one.\\n   *\\n   * @param token ERC-20 token address\\n   * @param sender address to pull tokens from\\n   * @param amount amount of tokens to be pulled\\n   */\\n  function _safePullTokenFrom(address token, address sender, uint256 amount) internal {\\n    if (sender != address(this) && sender == msg.sender) {\\n      SafeERC20.safeTransferFrom(ERC20(token), sender, address(this), amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to approve ERC-20 transfers.\\n   *\\n   * @param token ERC-20 address to approve\\n   * @param to address to approve as a spender\\n   * @param amount amount to be approved\\n   */\\n  function _safeApprove(address token, address to, uint256 amount) internal {\\n    SafeERC20.safeApprove(ERC20(token), to, amount);\\n  }\\n\\n  /**\\n   * @dev Check `allowCaller()` above.\\n   *\\n   * @param caller address to allow/disallow\\n   * @param allowed 'true' to allow, 'false' to disallow\\n   */\\n  function _allowCaller(address caller, bool allowed) internal {\\n    if (caller == address(0)) {\\n      revert BaseRouter__allowCaller_zeroAddress();\\n    }\\n    if (isAllowedCaller[caller] == allowed) {\\n      revert BaseRouter__allowCaller_noAllowChange();\\n    }\\n    isAllowedCaller[caller] = allowed;\\n    emit AllowCaller(caller, allowed);\\n  }\\n\\n  /**\\n   * @dev Function to be implemented on the bridge-specific contract\\n   * used to transfer funds WITHOUT calldata to a destination chain.\\n   */\\n  function _crossTransfer(bytes memory, address beneficiary) internal virtual returns (address);\\n\\n  /**\\n   * @dev Function to be implemented on the bridge-specific contract\\n   * used to transfer funds WITH calldata to a destination chain.\\n   */\\n  function _crossTransferWithCalldata(\\n    bytes memory,\\n    address beneficiary\\n  )\\n    internal\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev Returns \\\"true\\\" and on what `index` if token has already\\n   * been added to `tokenList`.\\n   *\\n   * @param token address of ERC-20 to check\\n   * @param tokenList to check\\n   */\\n  function _isInTokenList(\\n    address token,\\n    Snapshot[] memory tokenList\\n  )\\n    private\\n    pure\\n    returns (bool value, uint256 index)\\n  {\\n    uint256 len = tokenList.length;\\n    for (uint256 i; i < len;) {\\n      if (token == tokenList[i].token) {\\n        value = true;\\n        index = i;\\n        break;\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds a token and balance to a Snapshot and returns it.\\n   * Requirements:\\n   * - Must check if token has already been added.\\n   *\\n   * @param token address of ERC-20 to be pushed\\n   * @param tokenList to add token\\n   */\\n  function _addTokenToList(\\n    address token,\\n    Snapshot[] memory tokenList\\n  )\\n    private\\n    view\\n    returns (Snapshot[] memory)\\n  {\\n    (bool isInList, uint256 index) = _isInTokenList(token, tokenList);\\n    if (!isInList) {\\n      uint256 position = index == 0 ? index : index + 1;\\n      tokenList[position] = Snapshot(token, IERC20(token).balanceOf(address(this)));\\n    }\\n    return tokenList;\\n  }\\n\\n  /**\\n   * @dev Checks that `erc20-balanceOf` of `_tokensToCheck` haven't change for this address.\\n   * Requirements:\\n   * - Must be called in `_bundleInternal()` at the end of all executed `actions`.\\n   * - Must clear `_tokensToCheck` from storage at the end of checks.\\n   *\\n   * @param tokensToCheck array of 'Snapshot' elements\\n   * @param nativeBalance the stored balance of ETH\\n   */\\n  function _checkNoBalanceChange(\\n    Snapshot[] memory tokensToCheck,\\n    uint256 nativeBalance\\n  )\\n    private\\n    view\\n  {\\n    uint256 len = tokensToCheck.length;\\n    for (uint256 i; i < len;) {\\n      if (tokensToCheck[i].token != address(0)) {\\n        uint256 previousBalance = tokensToCheck[i].balance;\\n        uint256 currentBalance = IERC20(tokensToCheck[i].token).balanceOf(address(this));\\n\\n        if (currentBalance != previousBalance) {\\n          revert BaseRouter__bundleInternal_noBalanceChange();\\n        }\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Check at the end the native balance.\\n    if (nativeBalance != address(this).balance) {\\n      revert BaseRouter__bundleInternal_noBalanceChange();\\n    }\\n  }\\n\\n  /**\\n   * @dev When bundling multiple actions assure that we act for a single beneficiary;\\n   * receivers on DEPOSIT and PAYBACK and owners on WITHDRAW and BORROW\\n   * must be the same user\\n   *\\n   * @param user address to verify is the beneficiary\\n   */\\n  function _checkBeneficiary(address beneficiary, address user) internal pure returns (address) {\\n    if (beneficiary == address(0)) {\\n      return user;\\n    } else if (beneficiary != user) {\\n      revert BaseRouter__bundleInternal_notBeneficiary();\\n    } else {\\n      return user;\\n    }\\n  }\\n\\n  /**\\n   * @dev Extracts the beneficiary from a set of actions and args.\\n   * Requirements:\\n   * - Must be implemented in child contract, and added to `_crossTransfer` and\\n   * `crossTansferWithCalldata` when applicable.\\n   *\\n   * @param actions an array of actions that will be executed in a row\\n   * @param args an array of encoded inputs needed to execute each action\\n   */\\n  function _getBeneficiaryFromCalldata(\\n    Action[] memory actions,\\n    bytes[] memory args\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (address beneficiary_);\\n\\n  function _checkVaultInput(address vault_) internal view {\\n    if (!chief.isVaultActive(vault_)) {\\n      revert BaseRouter__checkVaultInput_notActiveVault();\\n    }\\n  }\\n\\n  /**\\n   * @dev Only WETH contract is allowed to transfer ETH to this address.\\n   * Prevent other addresses to send Ether to this contract.\\n   */\\n  receive() external payable {\\n    if (msg.sender != address(WETH9)) {\\n      revert BaseRouter__receive_senderNotWETH();\\n    }\\n  }\\n\\n  /**\\n   * @dev Revert fallback calls.\\n   */\\n  fallback() external payable {\\n    revert BaseRouter__fallback_notAllowed();\\n  }\\n}\\n\"\r\n    },\r\n    \"src/abstracts/WETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IWETH9\\n *\\n * @author Unknown\\n *\\n * @notice Abstract contract of add-on functions of a\\n * typical ERC20 wrapped native token.\\n */\\n\\nimport {ERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract IWETH9 is ERC20 {\\n  /// @notice Deposit ether to get wrapped ether\\n  function deposit() external payable virtual;\\n\\n  /// @notice Withdraw wrapped ether to get ether\\n  function withdraw(uint256) external virtual;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IVault\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface for vaults extending from IERC4326.\\n */\\n\\nimport {IERC4626} from \\\"openzeppelin-contracts/contracts/interfaces/IERC4626.sol\\\";\\nimport {ILendingProvider} from \\\"./ILendingProvider.sol\\\";\\nimport {IFujiOracle} from \\\"./IFujiOracle.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n  /**\\n   * @dev Emit when borrow action occurs.\\n   *\\n   * @param sender who calls {IVault-borrow}\\n   * @param receiver of the borrowed 'debt' amount\\n   * @param owner who will incur the debt\\n   * @param debt amount\\n   * @param shares amount of 'debtShares' received\\n   */\\n  event Borrow(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 debt,\\n    uint256 shares\\n  );\\n\\n  /**\\n   * @dev Emit when payback action occurs.\\n   *\\n   * @param sender address who calls {IVault-payback}\\n   * @param owner address whose debt will be reduced\\n   * @param debt amount\\n   * @param shares amound of 'debtShares' burned\\n   */\\n  event Payback(address indexed sender, address indexed owner, uint256 debt, uint256 shares);\\n\\n  /**\\n   * @dev Emit when the vault is initialized\\n   *\\n   * @param initializer of this vault\\n   *\\n   */\\n  event VaultInitialized(address initializer);\\n\\n  /**\\n   * @dev Emit when the oracle address is changed.\\n   *\\n   * @param newOracle the new oracle address\\n   */\\n  event OracleChanged(IFujiOracle newOracle);\\n\\n  /**\\n   * @dev Emit when the available providers for the vault change.\\n   *\\n   * @param newProviders the new providers available\\n   */\\n  event ProvidersChanged(ILendingProvider[] newProviders);\\n\\n  /**\\n   * @dev Emit when the active provider is changed.\\n   *\\n   * @param newActiveProvider the new active provider\\n   */\\n  event ActiveProviderChanged(ILendingProvider newActiveProvider);\\n\\n  /**\\n   * @dev Emit when the vault is rebalanced.\\n   *\\n   * @param assets amount to be rebalanced\\n   * @param debt amount to be rebalanced\\n   * @param from provider\\n   * @param to provider\\n   */\\n  event VaultRebalance(uint256 assets, uint256 debt, address indexed from, address indexed to);\\n\\n  /**\\n   * @dev Emit when the max LTV is changed.\\n   * See factors: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   *\\n   * @param newMaxLtv the new max LTV\\n   */\\n  event MaxLtvChanged(uint256 newMaxLtv);\\n\\n  /**\\n   * @dev Emit when the liquidation ratio is changed.\\n   * See factors: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   *\\n   * @param newLiqRatio the new liquidation ratio\\n   */\\n  event LiqRatioChanged(uint256 newLiqRatio);\\n\\n  /**\\n   * @dev Emit when the minumum amount is changed.\\n   *\\n   * @param newMinAmount the new minimum amount\\n   */\\n  event MinAmountChanged(uint256 newMinAmount);\\n\\n  /**\\n   * @dev Emit when the deposit cap is changed.\\n   *\\n   * @param newDepositCap the new deposit cap of this vault\\n   */\\n  event DepositCapChanged(uint256 newDepositCap);\\n\\n  /*///////////////////////////\\n    Asset management functions\\n  //////////////////////////*/\\n\\n  /**\\n   * @notice Returns the amount of assets owned by `owner`.\\n   *\\n   * @param owner to check balance\\n   *\\n   * @dev This method avoids having to do external conversions from shares to\\n   * assets, since {IERC4626-balanceOf} returns shares.\\n   */\\n  function balanceOfAsset(address owner) external view returns (uint256 assets);\\n\\n  /*///////////////////////////\\n    Debt management functions\\n  //////////////////////////*/\\n\\n  /**\\n   * @notice Returns the decimals for 'debtAsset' of this vault.\\n   *\\n   * @dev Requirements:\\n   * - Must match the 'debtAsset' decimals in ERC20 token.\\n   * - Must return zero in a {YieldVault}.\\n   */\\n  function debtDecimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Returns the address of the underlying token used as debt in functions\\n   * `borrow()`, and `payback()`. Based on {IERC4626-asset}.\\n   *\\n   * @dev Requirements:\\n   * - Must be an ERC-20 token contract.\\n   * - Must not revert.\\n   * - Must return zero in a {YieldVault}.\\n   */\\n  function debtAsset() external view returns (address);\\n\\n  /**\\n   * @notice Returns the amount of debt owned by `owner`.\\n   *\\n   * @param owner to check balance\\n   */\\n  function balanceOfDebt(address owner) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the amount of `debtShares` owned by `owner`.\\n   *\\n   * @param owner to check balance\\n   */\\n  function balanceOfDebtShares(address owner) external view returns (uint256 debtShares);\\n\\n  /**\\n   * @notice Returns the total amount of the underlying debt asset\\n   * that is \u201cmanaged\u201d by this vault. Based on {IERC4626-totalAssets}.\\n   *\\n   * @dev Requirements:\\n   * - Must account for any compounding occuring from yield or interest accrual.\\n   * - Must be inclusive of any fees that are charged against assets in the Vault.\\n   * - Must not revert.\\n   * - Must return zero in a {YieldVault}.\\n   */\\n  function totalDebt() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the amount of shares this vault would exchange for the amount\\n   * of debt assets provided. Based on {IERC4626-convertToShares}.\\n   *\\n   * @param debt to convert into `debtShares`\\n   *\\n   * @dev Requirements:\\n   * - Must not be inclusive of any fees that are charged against assets in the Vault.\\n   * - Must not show any variations depending on the caller.\\n   * - Must not reflect slippage or other on-chain conditions, when performing the actual exchange.\\n   * - Must not revert.\\n   *\\n   * NOTE: This calculation MAY not reflect the \u201cper-user\u201d price-per-share, and instead Must reflect the\\n   * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user Must expect to see when exchanging to and\\n   * from.\\n   */\\n  function convertDebtToShares(uint256 debt) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of debt assets that this vault would exchange for the amount\\n   * of shares provided. Based on {IERC4626-convertToAssets}.\\n   *\\n   * @param shares amount to convert into `debt`\\n   *\\n   * @dev Requirements:\\n   * - Must not be inclusive of any fees that are charged against assets in the Vault.\\n   * - Must not show any variations depending on the caller.\\n   * - Must not reflect slippage or other on-chain conditions, when performing the actual exchange.\\n   * - Must not revert.\\n   *\\n   * NOTE: This calculation MAY not reflect the \u201cper-user\u201d price-per-share, and instead must reflect the\\n   * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user Must expect to see when exchanging to and\\n   * from.\\n   */\\n  function convertToDebt(uint256 shares) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the maximum amount of the debt asset that can be borrowed for the `owner`,\\n   * through a borrow call.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must return a limited value if receiver is subject to some borrow limit.\\n   * - Must return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be borrowed.\\n   * - Must not revert.\\n   */\\n  function maxBorrow(address owner) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the maximum amount of debt that can be payback by the `borrower`.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function maxPayback(address owner) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the maximum amount of debt shares that can be \\\"minted-for-borrowing\\\" by the `borrower`.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function maxMintDebt(address owner) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the maximum amount of debt shares that can be \\\"burned-for-payback\\\" by the `borrower`.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function maxBurnDebt(address owner) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of `debtShares` that borrowing `debt` amount will generate.\\n   *\\n   * @param debt amount to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewBorrow(uint256 debt) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of debt that borrowing `debtShares` amount will generate.\\n   *\\n   * @param shares of debt to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewMintDebt(uint256 shares) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the amount of `debtShares` that will be burned by paying back\\n   * `debt` amount.\\n   *\\n   * @param debt to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewPayback(uint256 debt) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of debt asset that will be pulled from user, if `debtShares` are\\n   * burned to payback.\\n   *\\n   * @param debt to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewBurnDebt(uint256 shares) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Perform a borrow action. Function inspired on {IERC4626-deposit}.\\n   *\\n   * @param debt amount\\n   * @param receiver of the `debt` amount\\n   * @param owner who will incur the `debt` amount\\n   *\\n   * * @dev Mints debtShares to owner by taking a loan of exact amount of underlying tokens.\\n   * Requirements:\\n   * - Must emit the Borrow event.\\n   * - Must revert if owner does not own sufficient collateral to back debt.\\n   * - Must revert if caller is not owner or permissioned operator to act on owner behalf.\\n   */\\n  function borrow(uint256 debt, address receiver, address owner) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Perform a borrow action by minting `debtShares`.\\n   *\\n   * @param shares of debt to mint\\n   * @param receiver of the borrowed amount\\n   * @param owner who will incur the `debt` and whom `debtShares` will be accounted\\n   *\\n   * * @dev Mints `debtShares` to `owner`.\\n   * Requirements:\\n   * - Must emit the Borrow event.\\n   * - Must revert if owner does not own sufficient collateral to back debt.\\n   * - Must revert if caller is not owner or permissioned operator to act on owner behalf.\\n   */\\n  function mintDebt(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  )\\n    external\\n    returns (uint256 debt);\\n\\n  /**\\n   * @notice Burns `debtShares` to `receiver` by paying back loan with exact amount of underlying tokens.\\n   *\\n   * @param debt amount to payback\\n   * @param receiver to whom debt amount is being paid back\\n   *\\n   * @dev Implementations will require pre-erc20-approval of the underlying debt token.\\n   * Requirements:\\n   * - Must emit a Payback event.\\n   */\\n  function payback(uint256 debt, address receiver) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Burns `debtShares` to `owner` by paying back loan by specifying debt shares.\\n   *\\n   * @param shares of debt to payback\\n   * @param owner to whom debt amount is being paid back\\n   *\\n   * @dev Implementations will require pre-erc20-approval of the underlying debt token.\\n   * Requirements:\\n   * - Must emit a Payback event.\\n   */\\n  function burnDebt(uint256 shares, address owner) external returns (uint256 debt);\\n\\n  /*///////////////////\\n    General functions\\n  ///////////////////*/\\n\\n  /**\\n   * @notice Returns the active provider of this vault.\\n   */\\n  function getProviders() external view returns (ILendingProvider[] memory);\\n  /**\\n   * @notice Returns the active provider of this vault.\\n   */\\n  function activeProvider() external view returns (ILendingProvider);\\n\\n  /*/////////////////////////\\n     Rebalancing Function\\n  ////////////////////////*/\\n\\n  /**\\n   * @notice Performs rebalancing of vault by moving funds across providers.\\n   *\\n   * @param assets amount of this vault to be rebalanced\\n   * @param debt amount of this vault to be rebalanced (Note: pass zero if this is a {YieldVault})\\n   * @param from provider\\n   * @param to provider\\n   * @param fee expected from rebalancing operation\\n   * @param setToAsActiveProvider boolean\\n   *\\n   * @dev Requirements:\\n   * - Must check providers `from` and `to` are valid.\\n   * - Must be called from a {RebalancerManager} contract that makes all proper checks.\\n   * - Must revert if caller is not an approved rebalancer.\\n   * - Must emit the VaultRebalance event.\\n   * - Must check `fee` is a reasonable amount.\\n   */\\n  function rebalance(\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    uint256 fee,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    returns (bool);\\n\\n  /*/////////////////////////\\n     Liquidation Functions\\n  /////////////////////////*/\\n\\n  /**\\n   * @notice Returns the current health factor of 'owner'.\\n   *\\n   * @param owner to get health factor\\n   *\\n   * @dev Requirements:\\n   * - Must return type(uint254).max when 'owner' has no debt.\\n   * - Must revert in {YieldVault}.\\n   *\\n   * 'healthFactor' is scaled up by 1e18. A value below 1e18 means 'owner' is eligable for liquidation.\\n   * See factors: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   */\\n  function getHealthFactor(address owner) external returns (uint256 healthFactor);\\n\\n  /**\\n   * @notice Returns the liquidation close factor based on 'owner's' health factor.\\n   *\\n   * @param owner of debt position\\n   *\\n   * @dev Requirements:\\n   * - Must return zero if `owner` is not liquidatable.\\n   * - Must revert in {YieldVault}.\\n   */\\n  function getLiquidationFactor(address owner) external returns (uint256 liquidationFactor);\\n\\n  /**\\n   * @notice Performs liquidation of an unhealthy position, meaning a 'healthFactor' below 100.\\n   *\\n   * @param owner to be liquidated\\n   * @param receiver of the collateral shares of liquidation\\n   *\\n   * @dev Requirements:\\n   * - Must revert if caller is not an approved liquidator.\\n   * - Must revert if 'owner' is not liquidatable.\\n   * - Must emit the Liquidation event.\\n   * - Must liquidate 50% of 'owner' debt when: 100 >= 'healthFactor' > 95.\\n   * - Must liquidate 100% of 'owner' debt when: 95 > 'healthFactor'.\\n   * - Must revert in {YieldVault}.\\n   *\\n   * WARNING! It is liquidator's responsability to check if liquidation is profitable.\\n   */\\n  function liquidate(address owner, address receiver) external returns (uint256 gainedShares);\\n\\n  /*/////////////////////\\n     Setter functions \\n  ////////////////////*/\\n\\n  /**\\n   * @notice Sets the lists of providers of this vault.\\n   *\\n   * @param providers address array\\n   *\\n   * @dev Requirements:\\n   * - Must not contain zero addresses.\\n   */\\n  function setProviders(ILendingProvider[] memory providers) external;\\n\\n  /**\\n   * @notice Sets the active provider for this vault.\\n   *\\n   * @param activeProvider address\\n   *\\n   * @dev Requirements:\\n   * - Must be a provider previously set by `setProviders()`.\\n   * - Must be called from a timelock contract.\\n   *\\n   * WARNING! Changing active provider without a `rebalance()` call\\n   * can result in denial of service for vault users.\\n   */\\n  function setActiveProvider(ILendingProvider activeProvider) external;\\n\\n  /**\\n   * @notice Sets the minimum amount for: `deposit()`, `mint()` and borrow()`.\\n   *\\n   * @param amount to be as minimum.\\n   */\\n  function setMinAmount(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVaultPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IVaultPermissions\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface for a vault extended with\\n * signed permit operations for `withdraw()` and `borrow()` allowance.\\n */\\n\\ninterface IVaultPermissions {\\n  /**\\n   * @dev Emitted when `asset` withdraw allowance is set.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param amount of allowance given\\n   */\\n  event WithdrawApproval(address indexed owner, address operator, address receiver, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when `debtAsset` borrow allowance is set.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param amount of allowance given\\n   */\\n  event BorrowApproval(address indexed owner, address operator, address receiver, uint256 amount);\\n\\n  /// @dev Based on {IERC20Permit-DOMAIN_SEPARATOR}.\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external returns (bytes32);\\n\\n  /**\\n   * @notice Returns the current amount of withdraw allowance from `owner` to `receiver` that\\n   * can be executed by `operator`. This is similar to {IERC20-allowance} for BaseVault assets,\\n   * instead of token-shares.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   *\\n   * @dev Requirements:\\n   * - Must replace {IERC4626-allowance} in a vault implementation.\\n   */\\n  function withdrawAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns the current amount of borrow allowance from `owner` to `receiver` that\\n   * can be executed by `operator`. This is similar to {IERC20-allowance} for\\n   * BaseVault-debtAsset.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   */\\n  function borrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Atomically increases the `withdrawAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-increaseAllowance} for assets.\\n   *\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param byAmount to increase withdraw allowance\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {WithdrawApproval} event indicating the updated withdraw allowance.\\n   * - Must check `operator` and `receiver are not zero address.\\n   */\\n  function increaseWithdrawAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @dev Atomically decreases the `withdrawAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-decreaseAllowance} for assets.\\n   *\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param byAmount to decrease withdraw allowance\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {WithdrawApproval} event indicating the updated withdraw allowance.\\n   * - Must check `operator` and `receiver` are not zero address.\\n   * - Must check `operator` and `receiver` have `borrowAllowance` of at least `byAmount`.\\n   *\\n   */\\n  function decreaseWithdrawAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @dev Atomically increases the `borrowAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-increaseAllowance}\\n   * for `debtAsset`.\\n   *\\n   * @param operator address who can execute the use of the allowance\\n   * @param receiver address who can spend the allowance\\n   * @param byAmount to increase borrow allowance\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {BorrowApproval} event indicating the updated borrow allowance.\\n   * - Must check `operator` and `receiver` are not zero address.\\n   */\\n  function increaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @dev Atomically decrease the `borrowAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-decreaseAllowance}\\n   * for `debtAsset`.\\n   *\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param byAmount to decrease borrow allowance\\n   *\\n   * Requirements:\\n   * - Must emit a {BorrowApproval} event indicating the updated borrow allowance.\\n   * - Must check `operator` and `receiver` are not the zero address.\\n   * - Must check `operator` and `receiver` have `borrowAllowance` of at least `byAmount`.\\n   */\\n  function decreaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @notice Returns the curent used nonces for permits of `owner`.\\n   * Based on OZ {IERC20Permit-nonces}.\\n   *\\n   * @param owner address to check nonces\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Sets `amount` as the `withdrawAllowance` of `receiver` executable by\\n   * caller over `owner`'s tokens, given the `owner`'s signed approval.\\n   * Inspired by {IERC20Permit-permit} for assets.\\n   *\\n   * @param owner providing allowance\\n   * @param receiver who can spend the allowance\\n   * @param amount of allowance\\n   * @param deadline timestamp limit for the execution of signed permit\\n   * @param actionArgsHash keccak256 of the abi.encoded(args,actions) to be performed in {BaseRouter._internalBundle}\\n   * @param v signature value\\n   * @param r signature value\\n   * @param s signature value\\n   *\\n   * @dev Requirements:\\n   * - Must check `deadline` is a timestamp in the future.\\n   * - Must check `receiver` is a non-zero address.\\n   * - Must check that `v`, `r` and `s` are valid `secp256k1` signature for `owner`\\n   *   over EIP712-formatted function arguments.\\n   * - Must check the signature used `owner`'s current nonce (see {nonces}).\\n   * - Must emits an {AssetsApproval} event.\\n   */\\n  function permitWithdraw(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n\\n  /**\\n   * @notice Sets `amount` as the `borrowAllowance` of `receiver` executable by caller over\\n   * `owner`'s borrowing powwer, given the `owner`'s signed approval.\\n   * Inspired by {IERC20Permit-permit} for debt.\\n   *\\n   * @param owner address providing allowance\\n   * @param receiver address who can spend the allowance\\n   * @param amount of allowance\\n   * @param deadline timestamp limit for the execution of signed permit\\n   * @param actionArgsHash keccak256 of the abi.encoded(args,actions) to be performed in {BaseRouter._internalBundle}\\n   * @param v signature value\\n   * @param r signature value\\n   * @param s signature value\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {BorrowApproval} event.\\n   * - Must be implemented in a {BorrowingVault}.\\n   * - Must check `deadline` is a timestamp in the future.\\n   * - Must check `receiver` is a non-zero address.\\n   * - Must check that `v`, `r` and `s` are valid `secp256k1` signature for `owner`.\\n   *   over EIP712-formatted function arguments.\\n   * - Must check the signature used `owner`'s current nonce (see {nonces}).\\n   */\\n  function permitBorrow(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChief.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IChief\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines interface for {Chief} access control operations.\\n */\\n\\nimport {IAccessControl} from \\\"openzeppelin-contracts/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IChief is IAccessControl {\\n  /// @notice Returns the timelock address of the FujiV2 system.\\n  function timelock() external view returns (address);\\n\\n  /// @notice Returns the address mapper contract address of the FujiV2 system.\\n  function addrMapper() external view returns (address);\\n\\n  /**\\n   * @notice Returns true if `vault` is active.\\n   *\\n   * @param vault to check status\\n   */\\n  function isVaultActive(address vault) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true if `flasher` is an allowed {IFlasher}.\\n   *\\n   * @param flasher address to check\\n   */\\n  function allowedFlasher(address flasher) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true if `swapper` is an allowed {ISwapper}.\\n   *\\n   * @param swapper address to check\\n   */\\n  function allowedSwapper(address swapper) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Router Interface\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Define the interface for router operations.\\n */\\n\\nimport {ERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IRouter {\\n  /// @dev List of actions allowed to be executed by the router.\\n  enum Action {\\n    Deposit,\\n    Withdraw,\\n    Borrow,\\n    Payback,\\n    Flashloan,\\n    Swap,\\n    PermitWithdraw,\\n    PermitBorrow,\\n    XTransfer,\\n    XTransferWithCall,\\n    DepositETH,\\n    WithdrawETH\\n  }\\n\\n  /**\\n   * @notice An entry-point function that executes encoded commands along with provided inputs.\\n   *\\n   * @param actions an array of actions that will be executed in a row\\n   * @param args an array of encoded inputs needed to execute each action\\n   */\\n  function xBundle(Action[] memory actions, bytes[] memory args) external payable;\\n\\n  /**\\n   * @notice Sweeps accidental ERC-20 transfers to this contract or stuck funds due to failed\\n   * cross-chain calls (cf. ConnextRouter).\\n   *\\n   * @param token the address of the ERC-20 token to sweep\\n   * @param receiver the address that will receive the swept funds\\n   */\\n  function sweepToken(ERC20 token, address receiver) external;\\n\\n  /**\\n   * @notice Sweeps accidental ETH transfers to this contract.\\n   *\\n   * @param receiver the address that will receive the swept funds\\n   */\\n  function sweepETH(address receiver) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IFlasher\\n * @author Fujidao Labs\\n * @notice Defines the interface for all flashloan providers.\\n */\\n\\ninterface IFlasher {\\n  /**\\n   * @notice Initiates a flashloan a this provider.\\n   * @param asset address to be flashloaned.\\n   * @param amount of `asset` to be flashloaned.\\n   * @param requestor address to which flashloan will be facilitated.\\n   * @param requestorCalldata encoded args with selector that will be OPCODE-CALL'ed to `requestor`.\\n   * @dev To encode `params` see examples:\\n   * \u2022 solidity:\\n   *   > abi.encodeWithSelector(contract.transferFrom.selector, from, to, amount);\\n   * \u2022 ethersJS:\\n   *   > contract.interface.encodeFunctionData(\\\"transferFrom\\\", [from, to, amount]);\\n   * \u2022 foundry cast:\\n   *   > cast calldata \\\"transferFrom(address,address,uint256)\\\" from, to, amount\\n   *\\n   * Requirements:\\n   * - MUST implement `_checkAndSetEntryPoint()`\\n   */\\n  function initiateFlashloan(\\n    address asset,\\n    uint256 amount,\\n    address requestor,\\n    bytes memory requestorCalldata\\n  )\\n    external;\\n\\n  /**\\n   * @notice Returns the address from which flashloan for `asset` is sourced.\\n   * @param asset intended to be flashloaned.\\n   * @dev Override at flashloan provider implementation as required.\\n   * Some protocol implementations source flashloans from different contracts\\n   * depending on `asset`.\\n   */\\n  function getFlashloanSourceAddr(address asset) external view returns (address callAddr);\\n\\n  /**\\n   * @notice Returns the expected flashloan fee for `amount`\\n   * of this flashloan provider.\\n   * @param asset to be flashloaned\\n   * @param amount of flashloan\\n   */\\n  function computeFlashloanFee(address asset, uint256 amount) external view returns (uint256 fee);\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/*\\n * @title LibBytes\\n\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @notice Utility library for ethereum contracts written in Solidity.\\n * The library lets you concatenate, slice and type cast bytes arrays \\n * both in memory and storage. Taken from:\\n * https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n */\\nlibrary LibBytes {\\n  function concat(\\n    bytes memory _preBytes,\\n    bytes memory _postBytes\\n  )\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      /**\\n       * @dev Get a location of some free memory and store it in tempBytes as\\n       * Solidity does for memory variables.\\n       */\\n      tempBytes := mload(0x40)\\n\\n      /**\\n       * @dev Store the length of the first bytes array at the beginning of\\n       * the memory for tempBytes.\\n       */\\n      let length := mload(_preBytes)\\n      mstore(tempBytes, length)\\n\\n      /**\\n       * @dev Maintain a memory counter for the current write location in the\\n       * temp bytes array by adding the 32 bytes for the array length to\\n       * the starting location.\\n       */\\n      let mc := add(tempBytes, 0x20)\\n      // Stop copying when the memory counter reaches the length of the first bytes array.\\n      let end := add(mc, length)\\n\\n      for {\\n        // Initialize a copy counter to the start of the _preBytes data, 32 bytes into its memory.\\n        let cc := add(_preBytes, 0x20)\\n      } lt(mc, end) {\\n        // Increase both counters by 32 bytes each iteration.\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        // Write the _preBytes data into the tempBytes memory 32 bytes at a time.\\n        mstore(mc, mload(cc))\\n      }\\n\\n      /**\\n       * @dev Add the length of _postBytes to the current length of tempBytes\\n       * and store it as the new length in the first 32 bytes of the\\n       * tempBytes memory.\\n       */\\n      length := mload(_postBytes)\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n      // Move the memory counter back from a multiple of 0x20 to the  actual end of the _preBytes data.\\n      mc := end\\n      // Stop copying when the memory counter reaches the new combined length of the arrays.\\n      end := add(mc, length)\\n\\n      for { let cc := add(_postBytes, 0x20) } lt(mc, end) {\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } { mstore(mc, mload(cc)) }\\n\\n      /**\\n       * @dev Update the free-memory pointer by padding our last write location\\n       * to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n       * next 32 byte block, then round down to the nearest multiple of\\n       * 32. If the sum of the length of the two arrays is zero then add\\n       * one before rounding down to leave a blank 32 bytes (the length block with 0).\\n       */\\n      mstore(\\n        0x40,\\n        and(\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n          // Round down to the nearest 32 bytes.\\n          not(31)\\n        )\\n      )\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n    assembly {\\n      /**\\n       * @dev Read the first 32 bytes of _preBytes storage, which is the length\\n       * of the array. (We don't need to use the offset into the slot\\n       * because arrays use the entire slot.)\\n       */\\n      let fslot := sload(_preBytes.slot)\\n      /**\\n       * @dev Arrays of 31 bytes or less have an even value in their slot,\\n       * while longer arrays have an odd value. The actual length is\\n       * the slot divided by two for odd values, and the lowest order\\n       * byte divided by two for even values.\\n       * If the slot is even, bitwise and the slot with 255 and divide by\\n       * two to get the length. If the slot is odd, bitwise and the slot\\n       * with -1 and divide by two.\\n       */\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n      let newlength := add(slength, mlength)\\n\\n      /**\\n       * @dev // slength can contain both the length and contents of the array\\n       * if length < 32 bytes so let's prepare for that\\n       * v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n       */\\n      switch add(lt(slength, 32), lt(newlength, 32))\\n      case 2 {\\n        /**\\n         * @dev Since the new array still fits in the slot, we just need to\\n         * update the contents of the slot.\\n         * uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n         */\\n        sstore(\\n          _preBytes.slot,\\n          // All the modifications to the slot are inside this next block\\n          add(\\n            // we can just add to the slot contents because the bytes we want to change are the LSBs\\n            fslot,\\n            add(\\n              mul(\\n                div(\\n                  // load the bytes from memory.\\n                  mload(add(_postBytes, 0x20)),\\n                  // Zero all bytes to the right.\\n                  exp(0x100, sub(32, mlength))\\n                ),\\n                // Now shift left the number of bytes to leave space for the length in the slot.\\n                exp(0x100, sub(32, newlength))\\n              ),\\n              // Increase length by the double of the memory bytes length.\\n              mul(mlength, 2)\\n            )\\n          )\\n        )\\n      }\\n      case 1 {\\n        /**\\n         * @dev The stored value fits in the slot, but the combined value\\n         * will exceed it. Get the keccak hash to get the contents of the array.\\n         */\\n        mstore(0x0, _preBytes.slot)\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // Save new length.\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        /**\\n         * @dev The contents of the _postBytes array start 32 bytes into\\n         * the structure. Our first read should obtain the `submod`\\n         * bytes that can fit into the unused space in the last word\\n         * of the stored array. To get this, we read 32 bytes starting\\n         * from `submod`, so the data we read overlaps with the array\\n         * contents by `submod` bytes. Masking the lowest-order\\n         * `submod` bytes allows us to add that value directly to the\\n         * stored value.\\n         */\\n        let submod := sub(32, slength)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(\\n          sc,\\n          add(\\n            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n            and(mload(mc), mask)\\n          )\\n        )\\n\\n        for {\\n          mc := add(mc, 0x20)\\n          sc := add(sc, 1)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } { sstore(sc, mload(mc)) }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n      default {\\n        // Get the keccak hash to get the contents of the array.\\n        mstore(0x0, _preBytes.slot)\\n        // Start copying to the last used word of the stored array.\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // Save new length.\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // Copy over the first `submod` bytes of the new data as in case 1 above.\\n        let slengthmod := mod(slength, 32)\\n        let mlengthmod := mod(mlength, 32)\\n        let submod := sub(32, slengthmod)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n        for {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } { sstore(sc, mload(mc)) }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  )\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        /**\\n         * @dev The first word of the slice result is potentially a partial\\n         * word read from the original array. To read it, we calculate\\n         * the length of that partial word and start copying that many\\n         * bytes into the array. The first word we copy will start with\\n         * data we don't care about, but the last `lengthmod` bytes will\\n         * land at the beginning of the contents of the new array. When\\n         * we're done copying, we overwrite the full first word with\\n         * the actual length of the slice.\\n         */\\n        let lengthmod := and(_length, 31)\\n\\n        /**\\n         * @dev The multiplication in the next line is necessary\\n         * because when slicing multiples of 32 bytes (lengthmod == 0)\\n         * the following copy loop was copying the origin's length\\n         * and then ending prematurely not copying everything it should.\\n         */\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } { mstore(mc, mload(cc)) }\\n\\n        mstore(tempBytes, _length)\\n\\n        // Update free-memory pointer allocating the array padded to 32 bytes like the compiler does now.\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      // If we want a zero-length slice let's just return a zero-length array.\\n      default {\\n        tempBytes := mload(0x40)\\n        // Zero out the 32 bytes slice we are about to return we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n    uint8 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n    uint16 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n    uint32 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n    uint64 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n    uint96 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n    uint128 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n    bytes32 tempBytes32;\\n\\n    assembly {\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempBytes32;\\n  }\\n\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      let length := mload(_preBytes)\\n\\n      // If lengths don't match the arrays are not equal\\n      switch eq(length, mload(_postBytes))\\n      case 1 {\\n        /**\\n         * @dev cb is a circuit breaker in the for loop since there's\\n         * no said feature for inline assembly loops\\n         * cb = 1 - don't breaker\\n         * cb = 0 - break\\n         */\\n        let cb := 1\\n\\n        let mc := add(_preBytes, 0x20)\\n        let end := add(mc, length)\\n\\n        for { let cc := add(_postBytes, 0x20) }\\n        // The next line is the loop condition: while(uint256(mc < end) + cb == 2).\\n        eq(add(lt(mc, end), cb), 2) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          // If any of these checks fails then arrays are not equal.\\n          if iszero(eq(mload(mc), mload(cc))) {\\n            // Unsuccess:\\n            success := 0\\n            cb := 0\\n          }\\n        }\\n      }\\n      default {\\n        // Unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function equalStorage(\\n    bytes storage _preBytes,\\n    bytes memory _postBytes\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    bool success = true;\\n\\n    assembly {\\n      // We know _preBytes_offset is 0.\\n      let fslot := sload(_preBytes.slot)\\n      // Decode the length of the stored array like in concatStorage().\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n\\n      // If lengths don't match the arrays are not equal.\\n      switch eq(slength, mlength)\\n      case 1 {\\n        /**\\n         * @dev Slength can contain both the length and contents of the array\\n         * if length < 32 bytes so let's prepare for that\\n         * v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n         */\\n        if iszero(iszero(slength)) {\\n          switch lt(slength, 32)\\n          case 1 {\\n            // Blank the last byte which is the length.\\n            fslot := mul(div(fslot, 0x100), 0x100)\\n\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n              // Unsuccess:\\n              success := 0\\n            }\\n          }\\n          default {\\n            /**\\n             * @dev cb is a circuit breaker in the for loop since there's\\n             * no said feature for inline assembly loops\\n             * cb = 1 - don't breaker\\n             * cb = 0 - break\\n             */\\n            let cb := 1\\n\\n            // Get the keccak hash to get the contents of the array.\\n            mstore(0x0, _preBytes.slot)\\n            let sc := keccak256(0x0, 0x20)\\n\\n            let mc := add(_postBytes, 0x20)\\n            let end := add(mc, mlength)\\n\\n            // The next line is the loop condition: while(uint256(mc < end) + cb == 2)\\n            for {} eq(add(lt(mc, end), cb), 2) {\\n              sc := add(sc, 1)\\n              mc := add(mc, 0x20)\\n            } {\\n              if iszero(eq(sload(sc), mload(mc))) {\\n                // Unsuccess:\\n                success := 0\\n                cb := 0\\n              }\\n            }\\n          }\\n        }\\n      }\\n      default {\\n        // Unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ISwapper\\n *\\n * @author Fujidao Labs\\n *\\n * @notice  Defines the interface for routers to perform token swaps with DEX protocols.\\n *\\n * @dev Implementation inheriting this interface should be permisionless.\\n */\\n\\ninterface ISwapper {\\n  /**\\n   * @notice Swap tokens at exchange.\\n   *\\n   * @param assetIn address of the ERC-20 token to swap from\\n   * @param assetOut address of the ERC-20 token to swap to\\n   * @param amountIn that will be pulled from msg.sender\\n   * @param amountOut of `assetOut` expected after the swap\\n   * @param receiver of the `amountOut` tokens\\n   * @param sweeper who receives the leftovers `assetIn` tokens after swap\\n   * @param minSweepOut  amount of `assetIn` leftover expected after swap\\n   *\\n   * @dev Slippage is controlled through `minSweepOut`. If `minSweepOut` is 0,\\n   * the slippage check gets skipped.\\n   */\\n  function swap(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountIn,\\n    uint256 amountOut,\\n    address receiver,\\n    address sweeper,\\n    uint256 minSweepOut\\n  )\\n    external;\\n\\n  /**\\n   * @notice Estimate the amount of `assetIn` required for `swap()`.\\n   *\\n   * @param assetIn address of the ERC-20 token to swap from\\n   * @param assetOut address of the ERC-20 token to swap to\\n   * @param amountOut expected amount of `assetOut` after the swap\\n   */\\n  function getAmountIn(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountOut\\n  )\\n    external\\n    view\\n    returns (uint256 amountIn);\\n\\n  /**\\n   * @notice Estimate the amount of `assetOut` received after swap\\n   *\\n   * @param assetIn address of the ERC-20 token to swap from\\n   * @param assetOut address of the ERC-20 token to swap to\\n   * @param amountIn of `assetIn` to perform swap\\n   */\\n  function getAmountOut(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountIn\\n  )\\n    external\\n    view\\n    returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/access/SystemAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title SystemAccessControl\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Abstract contract that should be inherited by contract implementations that\\n * call the {Chief} contract for access control checks.\\n */\\n\\nimport {IChief} from \\\"../interfaces/IChief.sol\\\";\\nimport {CoreRoles} from \\\"./CoreRoles.sol\\\";\\n\\ncontract SystemAccessControl is CoreRoles {\\n  /// @dev Custom Errors\\n  error SystemAccessControl__hasRole_missingRole(address caller, bytes32 role);\\n  error SystemAccessControl__onlyTimelock_callerIsNotTimelock();\\n  error SystemAccessControl__onlyHouseKeeper_notHouseKeeper();\\n\\n  IChief public immutable chief;\\n\\n  /**\\n   * @dev Modifier that checks `caller` has `role`.\\n   */\\n  modifier hasRole(address caller, bytes32 role) {\\n    if (!chief.hasRole(role, caller)) {\\n      revert SystemAccessControl__hasRole_missingRole(caller, role);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that checks `msg.sender` has HOUSE_KEEPER_ROLE.\\n   */\\n  modifier onlyHouseKeeper() {\\n    if (!chief.hasRole(HOUSE_KEEPER_ROLE, msg.sender)) {\\n      revert SystemAccessControl__onlyHouseKeeper_notHouseKeeper();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that checks `msg.sender` is the defined `timelock` in {Chief}\\n   * contract.\\n   */\\n  modifier onlyTimelock() {\\n    if (msg.sender != chief.timelock()) {\\n      revert SystemAccessControl__onlyTimelock_callerIsNotTimelock();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Abstract constructor of a new {SystemAccessControl}.\\n   *\\n   * @param chief_ address\\n   *\\n   * @dev Requirements:\\n   * - Must pass non-zero {Chief} address, that could be checked at child contract.\\n   */\\n  constructor(address chief_) {\\n    chief = IChief(chief_);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILendingProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title ILendingProvider\\n *\\n * @author Fujidao Labs\\n *\\n * @notice  Defines the interface for core engine to perform operations at lending providers.\\n *\\n * @dev Functions are intended to be called in the context of a Vault via delegateCall,\\n * except indicated.\\n */\\n\\ninterface ILendingProvider {\\n  function providerName() external view returns (string memory);\\n  /**\\n   * @notice Returns the operator address that requires ERC20-approval for vault operations.\\n   *\\n   * @param keyAsset address to inquiry operator\\n   * @param asset address of the calling vault\\n   * @param debtAsset address of the calling vault. Note: if {YieldVault} this will be address(0).\\n   *\\n   * @dev Provider implementations may or not require all 3 inputs.\\n   */\\n  function approvedOperator(\\n    address keyAsset,\\n    address asset,\\n    address debtAsset\\n  )\\n    external\\n    view\\n    returns (address operator);\\n\\n  /**\\n   * @notice Performs deposit operation at lending provider on behalf vault.\\n   *\\n   * @param amount amount to deposit\\n   * @param vault IVault calling this function\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   */\\n  function deposit(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   * @notice Performs borrow operation at lending provider on behalf vault.\\n   *\\n   * @param amount amount to borrow\\n   * @param vault IVault calling this function\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   */\\n  function borrow(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   * @notice Performs withdraw operation at lending provider on behalf vault.\\n   * @param amount amount to withdraw\\n   * @param vault IVault calling this function.\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   */\\n  function withdraw(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   *\\n   * @notice Performs payback operation at lending provider on behalf vault.\\n   *\\n   * @param amount amount to payback\\n   * @param vault IVault calling this function.\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   * - Check there is erc20-approval to `approvedOperator` by the `vault` prior to call.\\n   */\\n  function payback(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   * @notice Returns DEPOSIT balance of 'user' at lending provider.\\n   *\\n   * @param user address whom balance is needed\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0).\\n   *\\n   * @dev Requirements:\\n   * - Must not require Vault context.\\n   */\\n  function getDepositBalance(address user, IVault vault) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Returns BORROW balance of 'user' at lending provider.\\n   *\\n   * @param user address whom balance is needed\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0).\\n   *\\n   * @dev Requirements:\\n   * - Must not require Vault context.\\n   */\\n  function getBorrowBalance(address user, IVault vault) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Returns the latest SUPPLY annual percent rate (APR) at lending provider.\\n   *\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0)\\n   *\\n   * @dev Requirements:\\n   * - Must return the rate in ray units (1e27)\\n   * Example 8.5% APR = 0.085 x 1e27 = 85000000000000000000000000\\n   * - Must not require Vault context.\\n   */\\n  function getDepositRateFor(IVault vault) external view returns (uint256 rate);\\n\\n  /**\\n   * @notice Returns the latest BORROW annual percent rate (APR) at lending provider.\\n   *\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0)\\n   *\\n   * @dev Requirements:\\n   * - Must return the rate in ray units (1e27)\\n   * Example 8.5% APR = 0.085 x 1e27 = 85000000000000000000000000\\n   * - Must not require Vault context.\\n   */\\n  function getBorrowRateFor(IVault vault) external view returns (uint256 rate);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFujiOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IFujiOracle\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface of the {FujiOracle}.\\n */\\n\\ninterface IFujiOracle {\\n  /**\\n   * @dev Emit when a change in price feed address is done for an `asset`.\\n   *\\n   * @param asset address\\n   * @param newPriceFeedAddress that returns USD price from Chainlink\\n   */\\n  event AssetPriceFeedChanged(address asset, address newPriceFeedAddress);\\n\\n  /**\\n   * @notice Returns the exchange rate between two assets, with price oracle given in\\n   * specified `decimals`.\\n   *\\n   * @param currencyAsset to be used, zero-address for USD\\n   * @param commodityAsset to be used, zero-address for USD\\n   * @param decimals  of the desired price output\\n   *\\n   * @dev Price format is defined as: (amount of currencyAsset per unit of commodityAsset Exchange Rate).\\n   * Requirements:\\n   * - Must check that both `currencyAsset` and `commodityAsset` are set in\\n   *   usdPriceFeeds, otherwise return zero.\\n   */\\n  function getPriceOf(\\n    address currencyAsset,\\n    address commodityAsset,\\n    uint8 decimals\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/access/CoreRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title CoreRoles\\n *\\n * @author Fujidao Labs\\n *\\n * @notice System definition of roles used across FujiV2 contracts.\\n */\\n\\ncontract CoreRoles {\\n  bytes32 public constant HOUSE_KEEPER_ROLE = keccak256(\\\"HOUSE_KEEPER_ROLE\\\");\\n\\n  bytes32 public constant REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n  bytes32 public constant HARVESTER_ROLE = keccak256(\\\"HARVESTER_ROLE\\\");\\n  bytes32 public constant LIQUIDATOR_ROLE = keccak256(\\\"LIQUIDATOR_ROLE\\\");\\n\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  bytes32 public constant UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"nxtp/=lib/nxtp/packages/deployments/contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IConnext\",\"name\":\"connext_\",\"type\":\"address\"},{\"internalType\":\"contract IChief\",\"name\":\"chief\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseRouter__allowCaller_noAllowChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__allowCaller_zeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_flashloanInvalidRequestor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_insufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_insufficientFlashloanBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_noBalanceChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_notAllowedFlasher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_notAllowedSwapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_notBeneficiary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_paramsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__bundleInternal_swapNotFirstAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__checkVaultInput_notActiveVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__fallback_notAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__handlePermit_notPermitAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__receive_senderNotWETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRouter__safeTransferETH_transferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextRouter__setRouter_invalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextRouter__xReceive_notAllowedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextRouter__xReceive_notReceivedAssetBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextRouter__xReceiver_noValueTransferUseXbundle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnnextRouter__xBundleConnext_notSelfCalled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"SystemAccessControl__hasRole_missingRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemAccessControl__onlyHouseKeeper_notHouseKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemAccessControl__onlyTimelock_callerIsNotTimelock\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"NewRouterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destDomain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"XCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originDomain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"XReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"HARVESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUSE_KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"bumpTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chief\",\"outputs\":[{\"internalType\":\"contract IChief\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handler\",\"outputs\":[{\"internalType\":\"contract ConnextHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerByDomain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sweepETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRouter.Action[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"}],\"name\":\"xBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRouter.Action[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"beforeSlipped\",\"type\":\"uint256\"}],\"name\":\"xBundleConnext\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConnextRouter", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000011984dc4465481512eb5b777e44061c158cf225900000000000000000000000069097538190ac1bceaa0c8ebfa7c512b1eb8d24a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}