{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2023-06-22\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract Polygonpay is ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  event regLevelEvent(\r\n      address indexed _user,\r\n      address indexed _referrer,\r\n      uint256 _time\r\n  );\r\n  event buyLevelEvent(address indexed _user, uint256 _level, uint256 _time);\r\n\r\n  mapping(uint256 => uint256) public LEVEL_PRICE;\r\n  uint256 REFERRER_1_LEVEL_LIMIT;\r\n\r\n  uint256 directpercentage;\r\n  uint256 indirectpercentage;\r\n\r\n  struct UserStruct {\r\n      bool isExist;\r\n      uint256 id;\r\n      uint256 referrerID;\r\n      uint256 currentLevel;\r\n      uint256 earnedAmount;\r\n      uint256 totalearnedAmount;\r\n      address[] referral;\r\n      address[] allDirect;\r\n      uint256 childCount;\r\n      uint256 upgradeAmount;\r\n      uint256 upgradePending;\r\n      mapping(uint256 => uint256) levelEarningmissed;\r\n  }\r\n\r\n  mapping(address => UserStruct) public users;\r\n\r\n  mapping(uint256 => address) public userList;\r\n\r\n  uint256 public currUserID;\r\n  uint256 public totalUsers;\r\n  address public ownerWallet;\r\n  uint256 public adminFee;\r\n  address[] public joinedAddress;\r\n  mapping(address => uint256) public userJoinTimestamps;\r\n  uint256 public totalProfit;\r\n  uint256 public minwithdraw;\r\n  Polygonpay public oldPolygonPay;\r\n  uint256 public totalDays;\r\n\r\n    uint256 public initialRoi;\r\n    uint256 public allRoi;\r\n    uint256 public roiLaunchTime;\r\n    mapping(address => uint256) public userUpgradetime;\r\n    mapping(address => uint256) public roiEndTime;\r\n    mapping(address => uint256) public roiStartTime;\r\n   constructor() public {\r\n        ownerWallet = address(0x689CB5f6EEA607073bd63aFDa3F289F29291f57A);\r\n        REFERRER_1_LEVEL_LIMIT = 3;\r\n        currUserID = 1;\r\n        totalUsers = 1;\r\n        directpercentage = 2000; //20%\r\n        indirectpercentage = 1200; //12%\r\n        adminFee = 10 * 1e18; // 10Matic\r\n        minwithdraw = 5 * 1e18; // 5 Matic\r\n        initialRoi = 1000;\r\n        allRoi = 0;\r\n        roiLaunchTime = 1682076547;\r\n\r\n        LEVEL_PRICE[1] = 10 * 1e18; // 10Matic\r\n        LEVEL_PRICE[2] = 30 * 1e18;\r\n        LEVEL_PRICE[3] = 90 * 1e18;\r\n        LEVEL_PRICE[4] = 1000 * 1e18;\r\n        LEVEL_PRICE[5] = 3000 * 1e18;\r\n        LEVEL_PRICE[6] = 9000 * 1e18;\r\n        LEVEL_PRICE[7] = 25000 * 1e18;\r\n        LEVEL_PRICE[8] = 75000 * 1e18;\r\n\r\n        UserStruct memory userStruct;\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            currentLevel: 8,\r\n            earnedAmount: 0,\r\n            totalearnedAmount: 0,\r\n            referral: new address[](0),\r\n            allDirect : new address[](0),\r\n            childCount: 0,\r\n            upgradeAmount:0,\r\n            upgradePending : 0\r\n        });\r\n\r\n        users[ownerWallet] = userStruct;\r\n        users[ownerWallet].levelEarningmissed[1] = 0;\r\n        users[ownerWallet].levelEarningmissed[2] = 0;\r\n        users[ownerWallet].levelEarningmissed[3] = 0;\r\n        users[ownerWallet].levelEarningmissed[4] = 0;\r\n        users[ownerWallet].levelEarningmissed[5] = 0;\r\n        users[ownerWallet].levelEarningmissed[6] = 0;\r\n        users[ownerWallet].levelEarningmissed[7] = 0;\r\n        users[ownerWallet].levelEarningmissed[8] = 0;\r\n        userList[currUserID] = ownerWallet;\r\n        oldPolygonPay = Polygonpay(0x3d570Becac836Fcd3B8b619BADbBF2F13a84d1Aa);\r\n\r\n    }\r\n\r\n     function oldPolygonSync(uint256 oldId,uint limit) public {\r\n        require(address(oldPolygonPay) != address(0), \"Initialize closed\");\r\n        require(msg.sender == ownerWallet, \"Access denied\");\r\n        for (uint i = 0; i < limit; i++) {\r\n            UserStruct memory olduser;\r\n            address oldusers = oldPolygonPay.userList(oldId);\r\n\r\n            (\r\n                olduser.isExist,\r\n                olduser.id,\r\n                olduser.referrerID,\r\n                olduser.currentLevel,\r\n                ,\r\n                ,\r\n                olduser.childCount,\r\n                olduser.upgradeAmount,\r\n                olduser.upgradePending\r\n            ) = oldPolygonPay.users(oldusers);\r\n\r\n            if (olduser.isExist) {\r\n                users[oldusers].isExist = olduser.isExist;\r\n                users[oldusers].id = olduser.id;\r\n                users[oldusers].referrerID = olduser.referrerID;\r\n                users[oldusers].currentLevel = olduser.currentLevel;\r\n                users[oldusers].earnedAmount = 0;\r\n                users[oldusers].totalearnedAmount = 0;\r\n                users[oldusers].referral = oldPolygonPay.viewUserReferral(\r\n                    oldusers\r\n                );\r\n                users[oldusers].allDirect = oldPolygonPay\r\n                    .viewallDirectUserReferral(oldusers);\r\n                users[oldusers].childCount = olduser.childCount;\r\n                users[oldusers].upgradeAmount = olduser.upgradeAmount;\r\n                users[oldusers].upgradePending = olduser.upgradePending;\r\n\r\n                for (uint256 level = 0; level < 8; level++) {\r\n                    users[oldusers].levelEarningmissed[level.add(1)] = oldPolygonPay.getmissedvalue(oldusers, level.add(1));\r\n                }\r\n                userList[oldId] = oldusers;\r\n                joinedAddress.push(oldusers);\r\n                userJoinTimestamps[oldusers] = oldPolygonPay.userJoinTimestamps(\r\n                    oldusers\r\n                );\r\n                oldId++;\r\n            }\r\n        }\r\n        totalProfit = oldPolygonPay.totalProfit();\r\n        totalUsers = oldPolygonPay.totalUsers();\r\n        currUserID = oldPolygonPay.currUserID();\r\n    }\r\n\r\n    function oldPolygonSync1(uint256 oldId,uint limit) public {\r\n        require(address(oldPolygonPay) != address(0), \"Initialize closed\");\r\n        require(msg.sender == ownerWallet, \"Access denied\");\r\n\r\n        for (uint i = 0; i < limit; i++) {\r\n            UserStruct memory olduser1;\r\n            address oldusers1 = oldPolygonPay.userList(oldId);\r\n            (\r\n                olduser1.isExist,\r\n                ,\r\n                ,\r\n                ,\r\n                olduser1.earnedAmount,\r\n                olduser1.totalearnedAmount,\r\n                ,\r\n                ,\r\n\r\n            ) = oldPolygonPay.users(oldusers1);\r\n            users[oldusers1].earnedAmount = olduser1.earnedAmount;\r\n            users[oldusers1].totalearnedAmount = olduser1.totalearnedAmount;\r\n            userUpgradetime[oldusers1] = oldPolygonPay.userUpgradetime(oldusers1);\r\n            roiStartTime[oldusers1] = oldPolygonPay.roiStartTime(oldusers1);\r\n            roiEndTime[oldusers1] = oldPolygonPay.roiEndTime(oldusers1);\r\n           oldId++;\r\n        }\r\n    }\r\n\r\n    function regUser(address _referrer) public payable noReentrant {\r\n       require(!users[msg.sender].isExist, \"User exist\");\r\n       require(users[_referrer].isExist, \"Invalid referal\");\r\n\r\n       uint256 _referrerID = users[_referrer].id;\r\n\r\n       require(msg.value == LEVEL_PRICE[1] * 3, \"Incorrect Value\");\r\n\r\n       if (\r\n           users[userList[_referrerID]].referral.length >=\r\n           REFERRER_1_LEVEL_LIMIT\r\n       ) {\r\n           _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n       }\r\n\r\n       UserStruct memory userStruct;\r\n       currUserID++;\r\n       totalUsers++;\r\n\r\n       userStruct = UserStruct({\r\n           isExist: true,\r\n           id: currUserID,\r\n           referrerID: _referrerID,\r\n           earnedAmount: 0,\r\n           totalearnedAmount: 0,\r\n           referral: new address[](0),\r\n           allDirect: new address[](0),\r\n           currentLevel: 1,\r\n           childCount: 0,\r\n           upgradeAmount : 0,\r\n           upgradePending : 0\r\n       });\r\n\r\n       users[msg.sender] = userStruct;\r\n       users[msg.sender].levelEarningmissed[2] = 0;\r\n       users[msg.sender].levelEarningmissed[3] = 0;\r\n       users[msg.sender].levelEarningmissed[4] = 0;\r\n       users[msg.sender].levelEarningmissed[5] = 0;\r\n       users[msg.sender].levelEarningmissed[6] = 0;\r\n       users[msg.sender].levelEarningmissed[7] = 0;\r\n       users[msg.sender].levelEarningmissed[8] = 0;\r\n       userList[currUserID] = msg.sender;\r\n       users[userList[_referrerID]].referral.push(msg.sender);\r\n       joinedAddress.push(msg.sender);\r\n       users[_referrer].allDirect.push(msg.sender);\r\n       users[_referrer].childCount = users[_referrer].childCount.add(1);\r\n       payReferal(_referrer);\r\n       payForLevel(1,msg.sender);\r\n       userJoinTimestamps[msg.sender] = block.timestamp;\r\n       userUpgradetime[msg.sender] = block.timestamp;\r\n       roiStartTime[msg.sender] = block.timestamp;\r\n       roiEndTime[msg.sender] = block.timestamp + 100 days;\r\n       emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n   }\r\n\r\n\r\n   function payReferal(address _referrer) internal {\r\n       uint256 indirectRefId = users[_referrer].referrerID;\r\n       address indirectRefAddr = userList[indirectRefId];\r\n       if (indirectRefAddr == 0x0000000000000000000000000000000000000000) {\r\n           indirectRefAddr = ownerWallet;\r\n       }\r\n       uint256 levelPrice = LEVEL_PRICE[1] * 3;\r\n       uint256 directAmount = (levelPrice* directpercentage) / 10000;\r\n       uint256 indirectAmount = (levelPrice * indirectpercentage) / 10000;\r\n       payable(ownerWallet).transfer(adminFee);\r\n       users[ownerWallet].totalearnedAmount += adminFee;\r\n\r\n       if(users[_referrer].currentLevel < 8){\r\n         users[_referrer].upgradeAmount += directAmount/2;\r\n         users[_referrer].earnedAmount += directAmount/2;\r\n       }else{\r\n         users[_referrer].earnedAmount += directAmount;\r\n       }\r\n       totalProfit +=directAmount;\r\n\r\n       if(users[indirectRefAddr].currentLevel < 8){\r\n         users[indirectRefAddr].upgradeAmount += indirectAmount/2;\r\n         users[indirectRefAddr].earnedAmount += indirectAmount/2;\r\n       }else{\r\n         users[indirectRefAddr].earnedAmount += indirectAmount;\r\n       }\r\n\r\n       totalProfit +=indirectAmount;\r\n\r\n   }\r\n\r\n      function payForLevel(uint256 _level, address _user) internal {\r\n          address referer;\r\n          address referer1;\r\n          address referer2;\r\n          address referer3;\r\n          if (_level == 1 || _level == 5) {\r\n              referer = userList[users[_user].referrerID];\r\n          } else if (_level == 2 || _level == 6) {\r\n              referer1 = userList[users[_user].referrerID];\r\n              referer = userList[users[referer1].referrerID];\r\n          } else if (_level == 3 || _level == 7) {\r\n              referer1 = userList[users[_user].referrerID];\r\n              referer2 = userList[users[referer1].referrerID];\r\n              referer = userList[users[referer2].referrerID];\r\n          } else if (_level == 4 || _level == 8) {\r\n              referer1 = userList[users[_user].referrerID];\r\n              referer2 = userList[users[referer1].referrerID];\r\n              referer3 = userList[users[referer2].referrerID];\r\n              referer = userList[users[referer3].referrerID];\r\n          }\r\n          uint256 upgradedAmount = 0;\r\n          if(users[msg.sender].upgradePending >= LEVEL_PRICE[_level]){\r\n              users[msg.sender].currentLevel =  _level;\r\n              uint256 oldupgrade = users[msg.sender].upgradePending - users[msg.sender].upgradeAmount;\r\n              users[msg.sender].upgradeAmount = users[msg.sender].upgradePending - LEVEL_PRICE[_level];\r\n              users[msg.sender].upgradePending = 0;\r\n              upgradedAmount = LEVEL_PRICE[_level] - oldupgrade;\r\n\r\n              //update old Roi into earning\r\n               uint256 _checkRoiupto = checkRoiUpto(msg.sender);\r\n               users[msg.sender].earnedAmount +=  _checkRoiupto;\r\n               userUpgradetime[_user] = block.timestamp;\r\n               totalProfit += _checkRoiupto;\r\n\r\n          }else{\r\n            upgradedAmount = users[msg.sender].upgradeAmount;\r\n            users[msg.sender].upgradeAmount = 0;\r\n          }\r\n\r\n          if (users[_user].levelEarningmissed[_level] > 0 && users[msg.sender].currentLevel >= _level) {\r\n              users[_user].earnedAmount += users[_user].levelEarningmissed[_level]/2;\r\n              users[_user].upgradeAmount += users[_user].levelEarningmissed[_level]/2;\r\n              users[_user].levelEarningmissed[_level] = 0;\r\n              totalProfit += users[_user].levelEarningmissed[_level];\r\n          }\r\n\r\n          bool isSend = true;\r\n          if (!users[referer].isExist) {\r\n              isSend = false;\r\n          }\r\n          if (isSend) {\r\n              if (users[referer].currentLevel >= _level) {\r\n                  if(users[referer].currentLevel < 8){\r\n                    if(_level == 1){\r\n                      users[referer].upgradeAmount += LEVEL_PRICE[_level];\r\n                      totalProfit += LEVEL_PRICE[_level];\r\n                    }else{\r\n                      users[referer].upgradeAmount += upgradedAmount/2;\r\n                      users[referer].earnedAmount += upgradedAmount/2;\r\n                      totalProfit += upgradedAmount;\r\n                    }\r\n                  }else{\r\n                    uint256 missedAmount = (_level == 1) ? LEVEL_PRICE[_level] : upgradedAmount;\r\n                    users[referer].earnedAmount += missedAmount;\r\n                    totalProfit += missedAmount;\r\n                  }\r\n              } else {\r\n                  users[referer].levelEarningmissed[_level] += upgradedAmount;\r\n              }\r\n          }else{\r\n              uint256 missedAmount = (_level == 1) ? LEVEL_PRICE[_level] : upgradedAmount;\r\n              users[ownerWallet].earnedAmount += missedAmount;\r\n          }\r\n      }\r\n\r\n      function upgradeNextLevel() public noReentrant{\r\n        require(users[msg.sender].upgradeAmount >= 0,\"Insufficient amount\");\r\n        uint256 currentLevel = users[msg.sender].currentLevel;\r\n        uint256 nextLevel = currentLevel+1;\r\n        if(nextLevel <= 8){\r\n          users[msg.sender].upgradePending += users[msg.sender].upgradeAmount;\r\n          payForLevel(nextLevel, msg.sender);\r\n        }\r\n      }\r\n\r\n      function claimRewards() public noReentrant{\r\n          require(users[msg.sender].isExist, \"User not registered\");\r\n          uint256 _checkRoiupto = checkRoiUpto(msg.sender);\r\n          users[msg.sender].earnedAmount += _checkRoiupto;\r\n          totalProfit += _checkRoiupto;\r\n          userUpgradetime[msg.sender] = block.timestamp;\r\n          uint256 claimAmount = users[msg.sender].earnedAmount;\r\n          if (claimAmount > 0) {\r\n              require(users[msg.sender].upgradeAmount == 0 || users[msg.sender].currentLevel >= 8,\"Upgrade first then process claim\");\r\n              require(claimAmount >= minwithdraw,\"Minimum 5 Matic\");\r\n              payable(msg.sender).transfer(claimAmount);\r\n              users[msg.sender].totalearnedAmount += claimAmount;\r\n              users[msg.sender].earnedAmount = 0;\r\n          }\r\n      }\r\n\r\n      function findFreeReferrer(address _user) public view returns (address) {\r\n          if (users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) {\r\n              return _user;\r\n          }\r\n          address[] memory referrals = new address[](600);\r\n          referrals[0] = users[_user].referral[0];\r\n          referrals[1] = users[_user].referral[1];\r\n          referrals[2] = users[_user].referral[2];\r\n          address freeReferrer;\r\n          bool noFreeReferrer = true;\r\n\r\n          for (uint256 i = 0; i < 600; i++) {\r\n              if (users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                  if (i < 120) {\r\n                      referrals[(i + 1) * 3] = users[referrals[i]].referral[0];\r\n                      referrals[(i + 1) * 3 + 1] = users[referrals[i]].referral[\r\n                          1\r\n                      ];\r\n                      referrals[(i + 1) * 3 + 2] = users[referrals[i]].referral[\r\n                          2\r\n                      ];\r\n                  }\r\n              } else {\r\n                  noFreeReferrer = false;\r\n                  freeReferrer = referrals[i];\r\n                  break;\r\n              }\r\n          }\r\n          require(!noFreeReferrer, \"No Free Referrer\");\r\n          return freeReferrer;\r\n      }\r\n\r\n      function viewUserReferral(\r\n          address _user\r\n      ) public view returns (address[] memory) {\r\n          return users[_user].referral;\r\n      }\r\n\r\n      function getmissedvalue(address _userAddress, uint256 _level)\r\n      public\r\n      view\r\n      returns(uint256)\r\n      {\r\n          return users[_userAddress].levelEarningmissed[_level];\r\n      }\r\n\r\n      function viewallDirectUserReferral(\r\n          address _user\r\n      ) public view returns (address[] memory) {\r\n          return users[_user].allDirect;\r\n      }\r\n\r\n      function getUsersJoinedLast24Hours() external view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < totalUsers; i++) {\r\n            address userAddress = userList[i];\r\n            if (userJoinTimestamps[userAddress] != 0 && block.timestamp - userJoinTimestamps[userAddress] <= 86400) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n      }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == ownerWallet,\"Not an Owner\");\r\n    }\r\n\r\n    function checkTime(address _user) public view returns(uint256){\r\n        uint256 startTime = userUpgradetime[_user];\r\n        uint256 endTime = roiEndTime[_user];\r\n        if(!users[_user].isExist){\r\n          return 0;\r\n        }\r\n        if(userUpgradetime[_user] == 0){\r\n          startTime = roiLaunchTime;\r\n        }\r\n        if(endTime == 0){\r\n          endTime = startTime + 100 days;\r\n        }\r\n        uint diff = 0;\r\n\r\n        if(block.timestamp <= endTime){\r\n          uint256 startDate = startTime;\r\n          uint256 endDate = block.timestamp;\r\n          diff = (endDate - startDate) / 60 / 60 / 24;\r\n        }else{\r\n          if(endTime > startTime){\r\n            uint256 startDate = startTime;\r\n            uint256 endDate = endTime;\r\n            diff = (endDate - startDate) / 60 / 60 / 24;\r\n          }\r\n        }\r\n        return diff;\r\n    }\r\n    \r\n    function checkRoiUpto(address _user) public view returns(uint256){\r\n      uint256 startTime = userUpgradetime[_user];\r\n      uint256 endTime = roiEndTime[_user];\r\n      if(!users[_user].isExist){\r\n          return 0;\r\n        }\r\n      if(userUpgradetime[_user] == 0){\r\n        startTime = roiLaunchTime;\r\n      }\r\n      if(endTime == 0){\r\n        endTime = startTime + 100 days;\r\n      }\r\n        uint256 dailyroi = 0;\r\n        uint diff = 0;\r\n        if(block.timestamp <= endTime){\r\n          uint256 startDate = startTime;\r\n          uint256 endDate = block.timestamp;\r\n          diff = (endDate - startDate) / 60 / 60 / 24;\r\n        }else{\r\n          if(endTime > startTime){\r\n            uint256 startDate = startTime;\r\n            uint256 endDate = endTime;\r\n            diff = (endDate - startDate) / 60 / 60 / 24;\r\n          }\r\n        }\r\n          // check user level\r\n\r\n           if(users[_user].currentLevel == 1){\r\n              dailyroi = (LEVEL_PRICE[2] * initialRoi)/100;\r\n           }else{\r\n             uint256 useramount = 0;\r\n             if(users[_user].currentLevel > 1 && users[_user].currentLevel <=4){\r\n               useramount = LEVEL_PRICE[users[_user].currentLevel];\r\n             }else{\r\n               useramount = LEVEL_PRICE[4];\r\n             }\r\n             dailyroi = (useramount * allRoi)/100;\r\n           }\r\n          uint256 uptoroi = diff.mul(dailyroi).div(1000);\r\n          return uptoroi;\r\n        }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkRoiUpto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersJoinedLast24Hours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getmissedvalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"joinedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minwithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldPolygonPay\",\"outputs\":[{\"internalType\":\"contract Polygonpay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"oldPolygonSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"oldPolygonSync1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"regUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roiEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roiLaunchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roiStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeNextLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userJoinTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpgradetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalearnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewallDirectUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Polygonpay", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://df6e1f16a0a4b9f54571fe897a7602f20d578ec4dc9003d42128065bcbd87768"}