{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokens/NiftyJourneyErc721Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n//                ,|||||<              ~|||||'         `_+7ykKD%RDqmI*~`\\n//                8@@@@@@8'           `Q@@@@@`     `^oB@@@@@@@@@@@@@@@@@R|`\\n//               !@@@@@@@@Q;          L@@@@@J    '}Q@@@@@@QqonzJfk8@@@@@@@Q,\\n//               Q@@@@@@@@@@j        `Q@@@@Q`  `m@@@@@@h^`         `?Q@@@@@*\\n//              =@@@@@@@@@@@@D.      7@@@@@i  ~Q@@@@@w'              ^@@@@@*\\n//              Q@@@@@m@@@@@@@Q!    `@@@@@Q  ;@@@@@@;                .txxxx:\\n//             |@@@@@u *@@@@@@@@z   u@@@@@* `Q@@@@@^\\n//            `Q@@@@Q`  'W@@@@@@@R.'@@@@@B  7@@@@@%        :DDDDDDDDDDDDDD5\\n//            c@@@@@7    `Z@@@@@@@QK@@@@@+  6@@@@@K        aQQQQQQQ@@@@@@@*\\n//           `@@@@@Q`      ^Q@@@@@@@@@@@W   j@@@@@@;             ,6@@@@@@#\\n//           t@@@@@L        ,8@@@@@@@@@@!   'Q@@@@@@u,        .=A@@@@@@@@^\\n//          .@@@@@Q           }@@@@@@@@D     'd@@@@@@@@gUwwU%Q@@@@@@@@@@g\\n//          j@@@@@<            +@@@@@@@;       ;wQ@@@@@@@@@@@@@@@Wf;8@@@;\\n//          ~;;;;;              .;;;;;~           '!Lx5mEEmyt|!'    ;;;~\\n//\\n// Powered By:    @niftygateway\\n// Author:        @buddylindsey\\n//                @gavinnewcomer\\n// Collaborators: @ewiner\\n\\nimport \\\"./NiftyERC721Token.sol\\\";\\nimport \\\"../interfaces/IZeroRoyaltyMarketplaceRegistry.sol\\\";\\nimport \\\"../interfaces/IZeroRoyaltyMarketplaceRegistryImplementer.sol\\\";\\nimport \\\"../utils/NiftyJourneyErrors.sol\\\";\\n\\ncontract NiftyJourneyErc721Token is\\n    NiftyERC721Token,\\n    IZeroRoyaltyMarketplaceRegistryImplementer,\\n    NiftyJourneyErrors\\n{\\n    uint256 private maxTouchedTokenId;\\n    address public deployedZeroRoyaltyMarketplaceRegistry;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(NiftyERC721Token) returns (bool) {\\n        return\\n            interfaceId ==\\n            type(IZeroRoyaltyMarketplaceRegistryImplementer).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function disableMarketplaceBlockList() public {\\n        _requireOnlyValidSender();\\n        deployedZeroRoyaltyMarketplaceRegistry = address(0);\\n    }\\n\\n    function setBlocklistRegistry(address _t) public {\\n        _requireOnlyValidSender();\\n        deployedZeroRoyaltyMarketplaceRegistry = _t;\\n    }\\n\\n    function requireAddressIsNotBlocked(address addressToCheck) public {\\n        if (deployedZeroRoyaltyMarketplaceRegistry != address(0)) {\\n            IZeroRoyaltyMarketplaceRegistry(\\n                deployedZeroRoyaltyMarketplaceRegistry\\n            ).requireAddressIsNotBlocked(addressToCheck);\\n        }\\n    }\\n\\n    modifier notFinalized() {\\n        if (collectionStatus.isContractFinalized) {\\n            revert ContractIsNotFinalized();\\n        }\\n        _;\\n    }\\n\\n    function mintMore(uint88 amount) external notFinalized {\\n        _requireOnlyValidSender();\\n        if (amount == 0) {\\n            revert CannotMintZeroNifties();\\n        }\\n\\n        address to = collectionStatus.defaultOwner;\\n        if (to == address(0)) {\\n            revert CannotTransferToZeroAddress({transferTo: to});\\n        }\\n\\n        // unpack niftyType structure for usage\\n        uint88 firstNewTokenId = lastNiftyType.idLast + 1;\\n        balances[to] += amount;\\n        collectionStatus.amountCreated += amount;\\n        lastNiftyType.idLast += amount;\\n\\n        // This replicates getNiftyTypeDetails but references it in a way to edit the data\\n        niftyTypes[lastNiftyType.niftyType - 1].idLast = lastNiftyType.idLast;\\n\\n        emit ConsecutiveTransfer(\\n            firstNewTokenId,\\n            lastNiftyType.idLast,\\n            address(0),\\n            to\\n        );\\n    }\\n\\n    function burnUnusedTokens(uint88 startTokenId) public notFinalized {\\n        _requireOnlyValidSender();\\n\\n        if (startTokenId >= collectionStatus.amountCreated) {\\n            revert MismatchingBurnTokenId({\\n                startTokenId: startTokenId,\\n                amountCreated: collectionStatus.amountCreated\\n            });\\n        }\\n        if (maxTouchedTokenId >= startTokenId) {\\n            revert AttemptingToBurnClaimedTokenId({\\n                startTokenId: startTokenId,\\n                claimedTokenId: maxTouchedTokenId\\n            });\\n        }\\n        uint niftyTypeIndex = lastNiftyType.niftyType - 1;\\n        // Get editable reference to nifty type\\n        NiftyType storage niftyTypeDetail = niftyTypes[niftyTypeIndex];\\n\\n        if (startTokenId < niftyTypeDetail.idFirst) {\\n            revert TokenIdDoesNotMatchNiftyType({\\n                startTokenId: startTokenId,\\n                niftyType: niftyTypeIndex\\n            });\\n        }\\n\\n        emit ConsecutiveTransfer(\\n            startTokenId,\\n            collectionStatus.amountCreated,\\n            collectionStatus.defaultOwner,\\n            address(0)\\n        );\\n\\n        uint88 totalAmount = startTokenId - 1;\\n\\n        collectionStatus.amountCreated = totalAmount;\\n        lastNiftyType.idLast = totalAmount;\\n        niftyTypeDetail.idLast = totalAmount;\\n    }\\n\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public override {\\n        if (approved) {\\n            requireAddressIsNotBlocked(operator);\\n        }\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        address owner = ownerOf(tokenId);\\n        if (_msgSender() != owner) {\\n            requireAddressIsNotBlocked(_msgSender());\\n        }\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function _transfer(\\n        address owner,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        requireAddressIsNotBlocked(to);\\n        super._transfer(owner, from, to, tokenId);\\n        _updateMaxTouched(tokenId);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        requireAddressIsNotBlocked(to);\\n        super._approve(owner, to, tokenId);\\n        _updateMaxTouched(tokenId);\\n    }\\n\\n    function _updateMaxTouched(uint256 tokenId) internal {\\n        if (tokenId > maxTouchedTokenId) {\\n            maxTouchedTokenId = tokenId;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/NiftyERC721Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n//                ,|||||<              ~|||||'         `_+7ykKD%RDqmI*~`\\n//                8@@@@@@8'           `Q@@@@@`     `^oB@@@@@@@@@@@@@@@@@R|`\\n//               !@@@@@@@@Q;          L@@@@@J    '}Q@@@@@@QqonzJfk8@@@@@@@Q,\\n//               Q@@@@@@@@@@j        `Q@@@@Q`  `m@@@@@@h^`         `?Q@@@@@*\\n//              =@@@@@@@@@@@@D.      7@@@@@i  ~Q@@@@@w'              ^@@@@@*\\n//              Q@@@@@m@@@@@@@Q!    `@@@@@Q  ;@@@@@@;                .txxxx:\\n//             |@@@@@u *@@@@@@@@z   u@@@@@* `Q@@@@@^\\n//            `Q@@@@Q`  'W@@@@@@@R.'@@@@@B  7@@@@@%        :DDDDDDDDDDDDDD5\\n//            c@@@@@7    `Z@@@@@@@QK@@@@@+  6@@@@@K        aQQQQQQQ@@@@@@@*\\n//           `@@@@@Q`      ^Q@@@@@@@@@@@W   j@@@@@@;             ,6@@@@@@#\\n//           t@@@@@L        ,8@@@@@@@@@@!   'Q@@@@@@u,        .=A@@@@@@@@^\\n//          .@@@@@Q           }@@@@@@@@D     'd@@@@@@@@gUwwU%Q@@@@@@@@@@g\\n//          j@@@@@<            +@@@@@@@;       ;wQ@@@@@@@@@@@@@@@Wf;8@@@;\\n//          ~;;;;;              .;;;;;~           '!Lx5mEEmyt|!'    ;;;~\\n//\\n// Powered By:    @niftygateway\\n// Author:        @niftynathang\\n// Collaborators: @conviction_1\\n//                @stormihoebe\\n//                @smatthewenglish\\n//                @dccockfoster\\n//                @blainemalone\\n\\nimport \\\"./ERC721Omnibus.sol\\\";\\nimport \\\"../interfaces/IERC2309.sol\\\";\\nimport \\\"../structs/NiftyType.sol\\\";\\nimport \\\"../utils/NiftyMetadata.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/Signable.sol\\\";\\nimport \\\"../utils/Withdrawable.sol\\\";\\nimport \\\"../utils/Royalties.sol\\\";\\n\\ncontract NiftyERC721Token is\\n    ERC721Omnibus,\\n    Royalties,\\n    Signable,\\n    Withdrawable,\\n    Ownable,\\n    NiftyMetadata,\\n    IERC2309\\n{\\n    using Address for address;\\n\\n    constructor() {}\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC721Omnibus, Royalties, NiftyPermissions)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2309).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function finalizeContract() external {\\n        _requireOnlyValidSender();\\n        require(\\n            !collectionStatus.isContractFinalized,\\n            ERROR_CONTRACT_IS_FINALIZED\\n        );\\n        collectionStatus.isContractFinalized = true;\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        if (address(metadataGenerator) == address(0)) {\\n            return super.tokenURI(tokenId);\\n        } else {\\n            require(_exists(tokenId), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n            return\\n                metadataGenerator.tokenMetadata(\\n                    tokenId,\\n                    _getNiftyType(tokenId),\\n                    bytes(\\\"\\\")\\n                );\\n        }\\n    }\\n\\n    function contractURI()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (address(metadataGenerator) == address(0)) {\\n            return super.contractURI();\\n        } else {\\n            return metadataGenerator.contractMetadata();\\n        }\\n    }\\n\\n    function setBaseURI(string calldata uri) external {\\n        _requireOnlyValidSender();\\n        _setBaseURI(uri);\\n    }\\n\\n    function mint(\\n        uint256[] calldata amounts,\\n        string[] calldata ipfsHashes\\n    ) external {\\n        _requireOnlyValidSender();\\n\\n        require(\\n            amounts.length > 0 && ipfsHashes.length > 0,\\n            ERROR_INPUT_ARRAY_EMPTY\\n        );\\n        require(\\n            amounts.length == ipfsHashes.length,\\n            ERROR_INPUT_ARRAY_SIZE_MISMATCH\\n        );\\n\\n        address to = collectionStatus.defaultOwner;\\n        require(to != address(0), ERROR_TRANSFER_TO_ZERO_ADDRESS);\\n        require(\\n            !collectionStatus.isContractFinalized,\\n            ERROR_CONTRACT_IS_FINALIZED\\n        );\\n\\n        uint88 initialIdLast = lastNiftyType.idLast;\\n        uint72 nextNiftyType = lastNiftyType.niftyType;\\n        uint88 nextIdCounter = initialIdLast + 1;\\n        uint88 firstNewTokenId = nextIdCounter;\\n        uint88 lastIdCounter = 0;\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] > 0, ERROR_NO_TOKENS_MINTED);\\n            uint88 amount = uint88(amounts[i]);\\n            lastIdCounter = nextIdCounter + amount - 1;\\n            nextNiftyType++;\\n\\n            if (bytes(ipfsHashes[i]).length > 0) {\\n                niftyTypeIPFSHashes[nextNiftyType] = ipfsHashes[i];\\n            }\\n\\n            niftyTypes.push(\\n                NiftyType({\\n                    isMinted: true,\\n                    niftyType: nextNiftyType,\\n                    idFirst: nextIdCounter,\\n                    idLast: lastIdCounter\\n                })\\n            );\\n\\n            emit NiftyTypeCreated(\\n                address(this),\\n                nextNiftyType,\\n                nextIdCounter,\\n                lastIdCounter\\n            );\\n\\n            nextIdCounter += amount;\\n        }\\n\\n        uint256 newlyMinted = lastIdCounter - initialIdLast;\\n\\n        balances[to] += newlyMinted;\\n\\n        lastNiftyType.niftyType = nextNiftyType;\\n        lastNiftyType.idLast = lastIdCounter;\\n\\n        collectionStatus.amountCreated += uint88(newlyMinted);\\n\\n        emit ConsecutiveTransfer(\\n            firstNewTokenId,\\n            lastIdCounter,\\n            address(0),\\n            to\\n        );\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n\\n    function burnBatch(uint256[] calldata tokenIds) public {\\n        require(tokenIds.length > 0, ERROR_INPUT_ARRAY_EMPTY);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _burn(tokenIds[i]);\\n        }\\n    }\\n\\n    function _isValidTokenId(\\n        uint256 tokenId\\n    ) internal view virtual override returns (bool) {\\n        return tokenId > 0 && tokenId <= collectionStatus.amountCreated;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZeroRoyaltyMarketplaceRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface used to interact with deployed Zero Royalty Marketplace Registry Contract.\\n */\\ninterface IZeroRoyaltyMarketplaceRegistry {\\n    /**\\n     * @dev Used to call the address check method on the deployed contract.\\n     */\\n    function requireAddressIsNotBlocked(address addressToCheck) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZeroRoyaltyMarketplaceRegistryImplementer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Required interface of a ZeroRoyaltyMarketplaceRegistry implementing contract\\n */\\ninterface IZeroRoyaltyMarketplaceRegistryImplementer {\\n    /**\\n     * @dev sets the contract address for the desired deployed Zero Royalty Marketplace Registry contract\\n     */\\n    function setBlocklistRegistry(address deployedRegistry) external;\\n\\n    /**\\n     * @dev removes the deployed Zero Royalty Marketplace Registry contract address therefore disallowing it's behavior\\n     */\\n    function disableMarketplaceBlockList() external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/NiftyJourneyErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ncontract NiftyJourneyErrors {\\n    error ContractIsNotFinalized();\\n    error CannotMintZeroNifties();\\n    error CannotTransferToZeroAddress(address transferTo);\\n    error MismatchingBurnTokenId(uint88 startTokenId, uint88 amountCreated);\\n    error AttemptingToBurnClaimedTokenId(\\n        uint88 startTokenId,\\n        uint256 claimedTokenId\\n    );\\n    error TokenIdDoesNotMatchNiftyType(uint88 startTokenId, uint256 niftyType);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721Omnibus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../interfaces/IDefaultOwnerCloneable.sol\\\";\\n\\nabstract contract ERC721Omnibus is ERC721, IDefaultOwnerCloneable {\\n    struct TokenOwner {\\n        bool transferred;\\n        address ownerAddress;\\n    }\\n\\n    struct CollectionStatus {\\n        bool isContractFinalized; // 1 byte\\n        uint88 amountCreated; // 11 bytes\\n        address defaultOwner; // 20 bytes\\n    }\\n\\n    // Only allow Nifty Entity to be initialized once\\n    bool internal initializedDefaultOwner;\\n    CollectionStatus internal collectionStatus;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => TokenOwner) internal ownersOptimized;\\n\\n    function initializeDefaultOwner(address defaultOwner_) public {\\n        require(!initializedDefaultOwner, ERROR_REINITIALIZATION_NOT_PERMITTED);\\n        collectionStatus.defaultOwner = defaultOwner_;\\n        initializedDefaultOwner = true;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IDefaultOwnerCloneable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionStatus()\\n        public\\n        view\\n        virtual\\n        returns (CollectionStatus memory)\\n    {\\n        return collectionStatus;\\n    }\\n\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address owner) {\\n        require(_isValidTokenId(tokenId), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n        owner = ownersOptimized[tokenId].transferred\\n            ? ownersOptimized[tokenId].ownerAddress\\n            : collectionStatus.defaultOwner;\\n        require(owner != address(0), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n    }\\n\\n    function _exists(\\n        uint256 tokenId\\n    ) internal view virtual override returns (bool) {\\n        if (_isValidTokenId(tokenId)) {\\n            return\\n                ownersOptimized[tokenId].ownerAddress != address(0) ||\\n                !ownersOptimized[tokenId].transferred;\\n        }\\n        return false;\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    )\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address owner, bool isApprovedOrOwner)\\n    {\\n        owner = ownerOf(tokenId);\\n        isApprovedOrOwner = (spender == owner ||\\n            tokenApprovals[tokenId] == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    function _clearOwnership(uint256 tokenId) internal virtual override {\\n        ownersOptimized[tokenId].transferred = true;\\n        ownersOptimized[tokenId].ownerAddress = address(0);\\n    }\\n\\n    function _setOwnership(\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        ownersOptimized[tokenId].transferred = true;\\n        ownersOptimized[tokenId].ownerAddress = to;\\n    }\\n\\n    function _isValidTokenId(\\n        uint256 /*tokenId*/\\n    ) internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC2309.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2309 standard as defined in the EIP.\\n */\\ninterface IERC2309 {\\n    /**\\n     * @dev Emitted when consecutive token ids in range ('fromTokenId') to ('toTokenId') are transferred from one account (`fromAddress`) to\\n     * another (`toAddress`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event ConsecutiveTransfer(\\n        uint256 indexed fromTokenId,\\n        uint256 toTokenId,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/structs/NiftyType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nstruct NiftyType {\\n    bool isMinted; // 1 bytes\\n    uint72 niftyType; // 9 bytes\\n    uint88 idFirst; // 11 bytes\\n    uint88 idLast; // 11 bytes\\n}\\n\"\r\n    },\r\n    \"contracts/utils/NiftyMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./NiftyPermissions.sol\\\";\\nimport \\\"./NiftyTypes.sol\\\";\\nimport \\\"../interfaces/IMetadataGenerator.sol\\\";\\n\\nabstract contract NiftyMetadata is NiftyPermissions, NiftyTypes {\\n    // A pointer to a contract that can generate token URI/metadata\\n    IMetadataGenerator public metadataGenerator;\\n\\n    // Mapping from Nifty type to IPFS hash of canonical artifact file.\\n    mapping(uint256 => string) internal niftyTypeIPFSHashes;\\n\\n    function tokenIPFSHash(\\n        uint256 tokenId\\n    ) external view returns (string memory) {\\n        return niftyTypeIPFSHashes[_getNiftyType(tokenId)];\\n    }\\n\\n    function setIPFSHash(uint256 niftyType, string memory ipfsHash) external {\\n        _requireOnlyValidSender();\\n        require(\\n            bytes(niftyTypeIPFSHashes[niftyType]).length == 0,\\n            ERROR_IPFS_HASH_ALREADY_SET\\n        );\\n        niftyTypeIPFSHashes[niftyType] = ipfsHash;\\n    }\\n\\n    function setMetadataGenerator(address metadataGenerator_) external {\\n        _requireOnlyValidSender();\\n        if (metadataGenerator_ == address(0)) {\\n            metadataGenerator = IMetadataGenerator(metadataGenerator_);\\n        } else {\\n            require(\\n                IERC165(metadataGenerator_).supportsInterface(\\n                    type(IMetadataGenerator).interfaceId\\n                ),\\n                ERROR_INVALID_METADATA_GENERATOR\\n            );\\n            metadataGenerator = IMetadataGenerator(metadataGenerator_);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./NiftyPermissions.sol\\\";\\n\\nabstract contract Ownable is NiftyPermissions {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        _requireOnlyValidSender();\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Signable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./NiftyPermissions.sol\\\";\\nimport \\\"../libraries/ECDSA.sol\\\";\\nimport \\\"../structs/SignatureStatus.sol\\\";\\n\\nabstract contract Signable is NiftyPermissions {\\n    event ContractSigned(address signer, bytes32 data, bytes signature);\\n\\n    SignatureStatus public signatureStatus;\\n    bytes public signature;\\n\\n    string internal constant ERROR_CONTRACT_ALREADY_SIGNED =\\n        \\\"Contract already signed\\\";\\n    string internal constant ERROR_CONTRACT_NOT_SALTED = \\\"Contract not salted\\\";\\n    string internal constant ERROR_INCORRECT_SECRET_SALT =\\n        \\\"Incorrect secret salt\\\";\\n    string internal constant ERROR_SALTED_HASH_SET_TO_ZERO =\\n        \\\"Salted hash set to zero\\\";\\n    string internal constant ERROR_SIGNER_SET_TO_ZERO =\\n        \\\"Signer set to zero address\\\";\\n\\n    address[] public verifiedSigners;\\n\\n    mapping(address => SignatureStatus) public multiSignatureStatus;\\n    mapping(address => bytes) public multiSignature;\\n\\n    function setSigner(address signer_, bytes32 saltedHash_) external {\\n        _requireOnlyValidSender();\\n        _validateSignerPreparation(\\n            signatureStatus.isVerified,\\n            signer_,\\n            saltedHash_\\n        );\\n        signatureStatus.signer = signer_;\\n        signatureStatus.saltedHash = saltedHash_;\\n        signatureStatus.isSalted = true;\\n    }\\n\\n    function addOrUpdateMultiSigner(\\n        address signer_,\\n        bytes32 saltedHash_\\n    ) external {\\n        _requireOnlyValidSender();\\n        _validateSignerPreparation(\\n            multiSignatureStatus[signer_].isVerified,\\n            signer_,\\n            saltedHash_\\n        );\\n        multiSignatureStatus[signer_].signer = signer_;\\n        multiSignatureStatus[signer_].saltedHash = saltedHash_;\\n        multiSignatureStatus[signer_].isSalted = true;\\n    }\\n\\n    function sign(uint256 salt, bytes calldata signature_) external {\\n        (\\n            address expectedSigner,\\n            bytes32 expectedSaltedHash\\n        ) = _validateSignature(salt, signature_, signatureStatus);\\n        signature = signature_;\\n        signatureStatus.isVerified = true;\\n        _commitVerifiedSigner(expectedSigner, expectedSaltedHash, signature_);\\n    }\\n\\n    function signMultiSig(uint256 salt, bytes calldata signature_) external {\\n        (\\n            address expectedSigner,\\n            bytes32 expectedSaltedHash\\n        ) = _validateSignature(\\n                salt,\\n                signature_,\\n                multiSignatureStatus[_msgSender()]\\n            );\\n        multiSignature[expectedSigner] = signature_;\\n        multiSignatureStatus[expectedSigner].isVerified = true;\\n        _commitVerifiedSigner(expectedSigner, expectedSaltedHash, signature_);\\n    }\\n\\n    function _commitVerifiedSigner(\\n        address signer_,\\n        bytes32 saltedHash_,\\n        bytes calldata signature_\\n    ) private {\\n        verifiedSigners.push(signer_);\\n        emit ContractSigned(signer_, saltedHash_, signature_);\\n    }\\n\\n    function _validateSignerPreparation(\\n        bool isAlreadySigned_,\\n        address signer_,\\n        bytes32 saltedHash_\\n    ) private pure {\\n        require(signer_ != address(0), ERROR_SIGNER_SET_TO_ZERO);\\n        require(saltedHash_ != bytes32(0), ERROR_SALTED_HASH_SET_TO_ZERO);\\n        require(!isAlreadySigned_, ERROR_CONTRACT_ALREADY_SIGNED);\\n    }\\n\\n    function _validateSignature(\\n        uint256 salt_,\\n        bytes calldata signature_,\\n        SignatureStatus memory signatureStatus_\\n    ) private view returns (address, bytes32) {\\n        require(!signatureStatus_.isVerified, ERROR_CONTRACT_ALREADY_SIGNED);\\n        require(signatureStatus_.isSalted, ERROR_CONTRACT_NOT_SALTED);\\n        address expectedSigner = signatureStatus_.signer;\\n        bytes32 expectedSaltedHash = signatureStatus_.saltedHash;\\n        require(_msgSender() == expectedSigner, ERROR_INVALID_MSG_SENDER);\\n        require(\\n            keccak256(abi.encodePacked(salt_)) == expectedSaltedHash,\\n            ERROR_INCORRECT_SECRET_SALT\\n        );\\n        require(\\n            ECDSA.recover(\\n                ECDSA.toEthSignedMessageHash(expectedSaltedHash),\\n                signature_\\n            ) == expectedSigner,\\n            ERROR_UNEXPECTED_DATA_SIGNER\\n        );\\n        return (expectedSigner, expectedSaltedHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./RejectEther.sol\\\";\\nimport \\\"./NiftyPermissions.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\n\\nabstract contract Withdrawable is RejectEther, NiftyPermissions {\\n    /**\\n     * @dev Slither identifies an issue with sending ETH to an arbitrary destianation.\\n     * https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations\\n     * Recommended mitigation is to \\\"Ensure that an arbitrary user cannot withdraw unauthorized funds.\\\"\\n     * This mitigation has been performed, as only the contract admin can call 'withdrawETH' and they should\\n     * verify the recipient should receive the ETH first.\\n     */\\n    function withdrawETH(address payable recipient, uint256 amount) external {\\n        _requireOnlyValidSender();\\n        require(amount > 0, ERROR_ZERO_ETH_TRANSFER);\\n        require(recipient != address(0), \\\"Transfer to zero address\\\");\\n\\n        uint256 currentBalance = address(this).balance;\\n        require(amount <= currentBalance, ERROR_INSUFFICIENT_BALANCE);\\n\\n        //slither-disable-next-line arbitrary-send\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, ERROR_WITHDRAW_UNSUCCESSFUL);\\n    }\\n\\n    function withdrawERC20(\\n        address tokenContract,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        _requireOnlyValidSender();\\n        bool success = IERC20(tokenContract).transfer(recipient, amount);\\n        require(success, ERROR_WITHDRAW_UNSUCCESSFUL);\\n    }\\n\\n    function withdrawERC721(\\n        address tokenContract,\\n        address recipient,\\n        uint256 tokenId\\n    ) external {\\n        _requireOnlyValidSender();\\n        IERC721(tokenContract).safeTransferFrom(\\n            address(this),\\n            recipient,\\n            tokenId,\\n            \\\"\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./NiftyPermissions.sol\\\";\\nimport \\\"./NiftyTypes.sol\\\";\\nimport \\\"../libraries/Clones.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC2981.sol\\\";\\nimport \\\"../interfaces/ICloneablePaymentSplitter.sol\\\";\\nimport \\\"../structs/RoyaltyRecipient.sol\\\";\\n\\nabstract contract Royalties is NiftyPermissions, NiftyTypes, IERC2981 {\\n    event RoyaltyReceiverUpdated(\\n        uint256 indexed niftyType,\\n        address previousReceiver,\\n        address newReceiver\\n    );\\n    event RoyaltyReceiverUpdatedForTokenId(\\n        uint256 indexed tokenId,\\n        address previousReceiver,\\n        address newReceiver\\n    );\\n\\n    uint256 public constant BIPS_PERCENTAGE_TOTAL = 10000;\\n\\n    RoyaltyRecipient internal globalFallbackRoyaltyRecipient;\\n\\n    // Royalty information mapped by nifty type\\n    mapping(uint256 => RoyaltyRecipient) internal royaltyRecipients;\\n\\n    // Royalty information overrides mapped by token id\\n    mapping(uint256 => RoyaltyRecipient)\\n        internal royaltyRecipientsTokenIdOverrides;\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(NiftyPermissions, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function getRoyaltySettings(\\n        uint256 niftyType\\n    ) public view returns (RoyaltyRecipient memory) {\\n        return royaltyRecipients[niftyType];\\n    }\\n\\n    function setRoyaltyBips(uint256 niftyType, uint256 bips) public {\\n        setRoyaltyBips(2, niftyType, bips);\\n    }\\n\\n    // Scopes: 1 => Global, 2 => Nifty Type, 3 => Token Id\\n    function setRoyaltyBips(\\n        uint256 scope,\\n        uint256 niftyTypeOrTokenId,\\n        uint256 bips\\n    ) public {\\n        _requireOnlyValidSender();\\n        require(bips <= BIPS_PERCENTAGE_TOTAL, ERROR_BIPS_OVER_100_PERCENT);\\n\\n        if (scope == 1) {\\n            globalFallbackRoyaltyRecipient.bips = uint16(bips);\\n        } else if (scope == 2) {\\n            royaltyRecipients[niftyTypeOrTokenId].bips = uint16(bips);\\n        } else if (scope == 3) {\\n            royaltyRecipientsTokenIdOverrides[niftyTypeOrTokenId].bips = uint16(\\n                bips\\n            );\\n        }\\n    }\\n\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) public view virtual override returns (address, uint256) {\\n        if (\\n            royaltyRecipientsTokenIdOverrides[tokenId].recipient != address(0)\\n        ) {\\n            return (\\n                royaltyRecipientsTokenIdOverrides[tokenId].recipient,\\n                (salePrice * royaltyRecipientsTokenIdOverrides[tokenId].bips) /\\n                    BIPS_PERCENTAGE_TOTAL\\n            );\\n        }\\n\\n        uint256 niftyType = _getNiftyType(tokenId);\\n        if (royaltyRecipients[niftyType].recipient != address(0)) {\\n            return (\\n                royaltyRecipients[niftyType].recipient,\\n                (salePrice * royaltyRecipients[niftyType].bips) /\\n                    BIPS_PERCENTAGE_TOTAL\\n            );\\n        }\\n\\n        if (globalFallbackRoyaltyRecipient.recipient != address(0)) {\\n            return (\\n                globalFallbackRoyaltyRecipient.recipient,\\n                (salePrice * globalFallbackRoyaltyRecipient.bips) /\\n                    BIPS_PERCENTAGE_TOTAL\\n            );\\n        }\\n\\n        return (address(0), 0);\\n    }\\n\\n    function initializeRoyalties(\\n        uint256 niftyType,\\n        address splitterImplementation,\\n        address[] calldata payees,\\n        uint256[] calldata shares\\n    ) public returns (address) {\\n        initializeRoyalties(\\n            2,\\n            niftyType,\\n            splitterImplementation,\\n            payees,\\n            shares\\n        );\\n    }\\n\\n    // Scopes: 1 => Global, 2 => Nifty Type, 3 => Token Id\\n    // We generally prefer don't repeat yourself (DRY) code, but in this case a storage pointer reference would have to be passed around\\n    // This would require extra protections, and any mistakes could result in overriding areas of storage we didn't want to touch.\\n    // Thus, we opted for redundant code to ensure security.\\n    function initializeRoyalties(\\n        uint256 scope,\\n        uint256 niftyTypeOrTokenId,\\n        address splitterImplementation,\\n        address[] calldata payees,\\n        uint256[] calldata shares\\n    ) public returns (address) {\\n        _requireOnlyValidSender();\\n\\n        if (scope == 1) {\\n            address previousReceiver = globalFallbackRoyaltyRecipient.recipient;\\n            globalFallbackRoyaltyRecipient.isPaymentSplitter =\\n                payees.length > 1;\\n            globalFallbackRoyaltyRecipient.recipient = payees.length == 1\\n                ? payees[0]\\n                : _clonePaymentSplitter(splitterImplementation, payees, shares);\\n            emit RoyaltyReceiverUpdated(\\n                0,\\n                previousReceiver,\\n                globalFallbackRoyaltyRecipient.recipient\\n            );\\n            return globalFallbackRoyaltyRecipient.recipient;\\n        } else if (scope == 2) {\\n            address previousReceiver = royaltyRecipients[niftyTypeOrTokenId]\\n                .recipient;\\n            royaltyRecipients[niftyTypeOrTokenId].isPaymentSplitter =\\n                payees.length > 1;\\n            royaltyRecipients[niftyTypeOrTokenId].recipient = payees.length == 1\\n                ? payees[0]\\n                : _clonePaymentSplitter(splitterImplementation, payees, shares);\\n            emit RoyaltyReceiverUpdated(\\n                niftyTypeOrTokenId,\\n                previousReceiver,\\n                royaltyRecipients[niftyTypeOrTokenId].recipient\\n            );\\n            return royaltyRecipients[niftyTypeOrTokenId].recipient;\\n        } else if (scope == 3) {\\n            address previousReceiver = royaltyRecipientsTokenIdOverrides[\\n                niftyTypeOrTokenId\\n            ].recipient;\\n            royaltyRecipientsTokenIdOverrides[niftyTypeOrTokenId]\\n                .isPaymentSplitter = payees.length > 1;\\n            royaltyRecipientsTokenIdOverrides[niftyTypeOrTokenId]\\n                .recipient = payees.length == 1\\n                ? payees[0]\\n                : _clonePaymentSplitter(splitterImplementation, payees, shares);\\n            emit RoyaltyReceiverUpdatedForTokenId(\\n                niftyTypeOrTokenId,\\n                previousReceiver,\\n                royaltyRecipientsTokenIdOverrides[niftyTypeOrTokenId].recipient\\n            );\\n            return\\n                royaltyRecipientsTokenIdOverrides[niftyTypeOrTokenId].recipient;\\n        }\\n\\n        return address(0);\\n    }\\n\\n    function getNiftyType(uint256 tokenId) public view returns (uint256) {\\n        return _getNiftyType(tokenId);\\n    }\\n\\n    function getPaymentSplitterByNiftyType(\\n        uint256 niftyType\\n    ) public view virtual returns (address) {\\n        return _getPaymentSplitterByNiftyTypeOrFallback(niftyType);\\n    }\\n\\n    function getPaymentSplitterByTokenId(\\n        uint256 tokenId\\n    ) public view virtual returns (address) {\\n        if (\\n            royaltyRecipientsTokenIdOverrides[tokenId].recipient != address(0)\\n        ) {\\n            return\\n                royaltyRecipientsTokenIdOverrides[tokenId].isPaymentSplitter\\n                    ? royaltyRecipientsTokenIdOverrides[tokenId].recipient\\n                    : address(0);\\n        }\\n\\n        return getPaymentSplitterByNiftyType(_getNiftyType(tokenId));\\n    }\\n\\n    function _clonePaymentSplitter(\\n        address splitterImplementation,\\n        address[] calldata payees,\\n        uint256[] calldata shares_\\n    ) internal returns (address) {\\n        require(\\n            IERC165(splitterImplementation).supportsInterface(\\n                type(ICloneablePaymentSplitter).interfaceId\\n            ),\\n            ERROR_UNCLONEABLE_REFERENCE_CONTRACT\\n        );\\n        address clone = payable(Clones.clone(splitterImplementation));\\n        ICloneablePaymentSplitter(clone).initialize(payees, shares_);\\n        return clone;\\n    }\\n\\n    function _getPaymentSplitterByNiftyTypeOrFallback(\\n        uint256 niftyType\\n    ) internal view returns (address) {\\n        if (royaltyRecipients[niftyType].recipient != address(0)) {\\n            return\\n                royaltyRecipients[niftyType].isPaymentSplitter\\n                    ? royaltyRecipients[niftyType].recipient\\n                    : address(0);\\n        }\\n\\n        if (globalFallbackRoyaltyRecipient.recipient != address(0)) {\\n            return\\n                globalFallbackRoyaltyRecipient.isPaymentSplitter\\n                    ? globalFallbackRoyaltyRecipient.recipient\\n                    : address(0);\\n        }\\n\\n        return address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721Errors.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Cloneable.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/Context.sol\\\";\\nimport \\\"../libraries/Strings.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../utils/GenericErrors.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is\\n    Context,\\n    ERC165,\\n    ERC721Errors,\\n    GenericErrors,\\n    IERC721Metadata,\\n    IERC721Cloneable\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Only allow ERC721 to be initialized once\\n    bool internal initializedERC721;\\n\\n    // Token name\\n    string internal tokenName;\\n\\n    // Token symbol\\n    string internal tokenSymbol;\\n\\n    // Base URI For Offchain Metadata\\n    string internal baseMetadataURI;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) internal tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) internal operatorApprovals;\\n\\n    function initializeERC721(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory baseURI_\\n    ) public override {\\n        require(!initializedERC721, ERROR_REINITIALIZATION_NOT_PERMITTED);\\n        tokenName = name_;\\n        tokenSymbol = symbol_;\\n        _setBaseURI(baseURI_);\\n        initializedERC721 = true;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Cloneable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(owner != address(0), ERROR_QUERY_FOR_ZERO_ADDRESS);\\n        return balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = owners[tokenId];\\n        require(owner != address(0), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return tokenName;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return tokenSymbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n\\n        string memory uriBase = baseURI();\\n        return\\n            bytes(uriBase).length > 0\\n                ? string(abi.encodePacked(uriBase, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    function baseURI() public view virtual returns (string memory) {\\n        return baseMetadataURI;\\n    }\\n\\n    /**\\n     * @dev Storefront-level metadata for contract\\n     */\\n    function contractURI() public view virtual returns (string memory) {\\n        string memory uriBase = baseURI();\\n        return\\n            bytes(uriBase).length > 0\\n                ? string(abi.encodePacked(uriBase, \\\"contract-metadata\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI\\n     */\\n    function _setBaseURI(string memory uri) internal {\\n        baseMetadataURI = uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, ERROR_APPROVAL_TO_CURRENT_OWNER);\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            ERROR_NOT_OWNER_NOR_APPROVED\\n        );\\n\\n        _approve(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        require(_exists(tokenId), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n        return tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        require(operator != _msgSender(), ERROR_APPROVE_TO_CALLER);\\n        operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        (address owner, bool isApprovedOrOwner) = _isApprovedOrOwner(\\n            _msgSender(),\\n            tokenId\\n        );\\n        require(isApprovedOrOwner, ERROR_NOT_OWNER_NOR_APPROVED);\\n        _transfer(owner, from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            ERROR_NOT_AN_ERC721_RECEIVER\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (address owner, bool isApprovedOrOwner) {\\n        owner = owners[tokenId];\\n        require(owner != address(0), ERROR_QUERY_FOR_NONEXISTENT_TOKEN);\\n        isApprovedOrOwner = (spender == owner ||\\n            tokenApprovals[tokenId] == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n        bool isApprovedOrOwner = (_msgSender() == owner ||\\n            tokenApprovals[tokenId] == _msgSender() ||\\n            isApprovedForAll(owner, _msgSender()));\\n        require(isApprovedOrOwner, ERROR_NOT_OWNER_NOR_APPROVED);\\n\\n        // Clear approvals\\n        _clearApproval(owner, tokenId);\\n\\n        balances[owner] -= 1;\\n        _clearOwnership(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address owner,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(owner == from, ERROR_TRANSFER_FROM_INCORRECT_OWNER);\\n        require(to != address(0), ERROR_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        // Clear approvals from the previous owner\\n        _clearApproval(owner, tokenId);\\n\\n        balances[from] -= 1;\\n        balances[to] += 1;\\n        _setOwnership(to, tokenId);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Equivalent to approving address(0), but more gas efficient\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _clearApproval(address owner, uint256 tokenId) internal virtual {\\n        delete tokenApprovals[tokenId];\\n        emit Approval(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address owner,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _clearOwnership(uint256 tokenId) internal virtual {\\n        delete owners[tokenId];\\n    }\\n\\n    function _setOwnership(address to, uint256 tokenId) internal virtual {\\n        owners[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     *\\n     * @dev Slither identifies an issue with unused return value.\\n     * Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return\\n     * This should be a non-issue.  It is the standard OpenZeppelin implementation which has been heavily used and audited.\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(ERROR_NOT_AN_ERC721_RECEIVER);\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDefaultOwnerCloneable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface IDefaultOwnerCloneable is IERC165 {\\n    function initializeDefaultOwner(address defaultOwner_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nabstract contract ERC721Errors {\\n    string internal constant ERROR_QUERY_FOR_ZERO_ADDRESS =\\n        \\\"Query for zero address\\\";\\n    string internal constant ERROR_QUERY_FOR_NONEXISTENT_TOKEN =\\n        \\\"Token does not exist\\\";\\n    string internal constant ERROR_APPROVAL_TO_CURRENT_OWNER =\\n        \\\"Current owner approval\\\";\\n    string internal constant ERROR_APPROVE_TO_CALLER = \\\"Approve to caller\\\";\\n    string internal constant ERROR_NOT_OWNER_NOR_APPROVED =\\n        \\\"Not owner nor approved\\\";\\n    string internal constant ERROR_NOT_AN_ERC721_RECEIVER =\\n        \\\"Not an ERC721Receiver\\\";\\n    string internal constant ERROR_TRANSFER_FROM_INCORRECT_OWNER =\\n        \\\"Transfer from incorrect owner\\\";\\n    string internal constant ERROR_TRANSFER_TO_ZERO_ADDRESS =\\n        \\\"Transfer to zero address\\\";\\n    string internal constant ERROR_ALREADY_MINTED = \\\"Token already minted\\\";\\n    string internal constant ERROR_NO_TOKENS_MINTED = \\\"No tokens minted\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Cloneable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC721Cloneable is IERC721 {\\n    function initializeERC721(\\n        string calldata name_,\\n        string calldata symbol_,\\n        string calldata baseURI_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nabstract contract GenericErrors {\\n    string internal constant ERROR_INPUT_ARRAY_EMPTY = \\\"Input array empty\\\";\\n    string internal constant ERROR_INPUT_ARRAY_SIZE_MISMATCH =\\n        \\\"Input array size mismatch\\\";\\n    string internal constant ERROR_INVALID_MSG_SENDER = \\\"Invalid msg.sender\\\";\\n    string internal constant ERROR_UNEXPECTED_DATA_SIGNER =\\n        \\\"Unexpected data signer\\\";\\n    string internal constant ERROR_INSUFFICIENT_BALANCE =\\n        \\\"Insufficient balance\\\";\\n    string internal constant ERROR_WITHDRAW_UNSUCCESSFUL =\\n        \\\"Withdraw unsuccessful\\\";\\n    string internal constant ERROR_CONTRACT_IS_FINALIZED =\\n        \\\"Contract is finalized\\\";\\n    string internal constant ERROR_CANNOT_CHANGE_DEFAULT_OWNER =\\n        \\\"Cannot change default owner\\\";\\n    string internal constant ERROR_UNCLONEABLE_REFERENCE_CONTRACT =\\n        \\\"Uncloneable reference contract\\\";\\n    string internal constant ERROR_BIPS_OVER_100_PERCENT = \\\"Bips over 100%\\\";\\n    string internal constant ERROR_NO_ROYALTY_RECEIVER = \\\"No royalty receiver\\\";\\n    string internal constant ERROR_REINITIALIZATION_NOT_PERMITTED =\\n        \\\"Re-initialization not permitted\\\";\\n    string internal constant ERROR_ZERO_ETH_TRANSFER = \\\"Zero ETH Transfer\\\";\\n    string internal constant ERROR_IPFS_HASH_ALREADY_SET =\\n        \\\"IPFS hash already set\\\";\\n    string internal constant ERROR_INVALID_METADATA_GENERATOR =\\n        \\\"Invalid Metadata Generator\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/NiftyPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./GenericErrors.sol\\\";\\nimport \\\"../interfaces/INiftyEntityCloneable.sol\\\";\\nimport \\\"../interfaces/INiftyRegistry.sol\\\";\\nimport \\\"../libraries/Context.sol\\\";\\n\\nabstract contract NiftyPermissions is\\n    Context,\\n    ERC165,\\n    GenericErrors,\\n    INiftyEntityCloneable\\n{\\n    event AdminTransferred(\\n        address indexed previousAdmin,\\n        address indexed newAdmin\\n    );\\n\\n    // Only allow Nifty Entity to be initialized once\\n    bool internal initializedNiftyEntity;\\n\\n    // If address(0), use enable Nifty Gateway permissions - otherwise, specifies the address with permissions\\n    address public admin;\\n\\n    // To prevent a mistake, transferring admin rights will be a two step process\\n    // First, the current admin nominates a new admin\\n    // Second, the nominee accepts admin\\n    address public nominatedAdmin;\\n\\n    // Nifty Registry Contract\\n    INiftyRegistry internal permissionsRegistry;\\n\\n    function initializeNiftyEntity(address niftyRegistryContract_) public {\\n        require(!initializedNiftyEntity, ERROR_REINITIALIZATION_NOT_PERMITTED);\\n        permissionsRegistry = INiftyRegistry(niftyRegistryContract_);\\n        initializedNiftyEntity = true;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(INiftyEntityCloneable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function renounceAdmin() external {\\n        _requireOnlyValidSender();\\n        _transferAdmin(address(0));\\n    }\\n\\n    function nominateAdmin(address nominee) external {\\n        _requireOnlyValidSender();\\n        nominatedAdmin = nominee;\\n    }\\n\\n    function acceptAdmin() external {\\n        address nominee = nominatedAdmin;\\n        require(_msgSender() == nominee, ERROR_INVALID_MSG_SENDER);\\n        _transferAdmin(nominee);\\n    }\\n\\n    function _requireOnlyValidSender() internal view {\\n        address currentAdmin = admin;\\n        if (currentAdmin == address(0)) {\\n            require(\\n                permissionsRegistry.isValidNiftySender(_msgSender()),\\n                ERROR_INVALID_MSG_SENDER\\n            );\\n        } else {\\n            require(_msgSender() == currentAdmin, ERROR_INVALID_MSG_SENDER);\\n        }\\n    }\\n\\n    function _transferAdmin(address newAdmin) internal {\\n        address oldAdmin = admin;\\n        admin = newAdmin;\\n        delete nominatedAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/NiftyTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../structs/NiftyType.sol\\\";\\n\\nabstract contract NiftyTypes {\\n    uint256 internal constant MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    event NiftyTypeCreated(\\n        address indexed contractAddress,\\n        uint256 niftyType,\\n        uint256 idFirst,\\n        uint256 idLast\\n    );\\n\\n    // Used to determine next nifty type/token ids to create on a mint call\\n    NiftyType internal lastNiftyType;\\n\\n    // Sorted array of NiftyType definitions - ordered to allow binary searching\\n    NiftyType[] internal niftyTypes;\\n\\n    function getNiftyTypes() public view returns (NiftyType[] memory) {\\n        return niftyTypes;\\n    }\\n\\n    function getNiftyTypeDetails(\\n        uint256 niftyType\\n    ) public view virtual returns (NiftyType memory) {\\n        uint256 niftyTypeIndex = MAX_INT;\\n        unchecked {\\n            niftyTypeIndex = niftyType - 1;\\n        }\\n\\n        if (niftyTypeIndex >= niftyTypes.length) {\\n            revert(\\\"Nifty Type Does Not Exist\\\");\\n        }\\n        return niftyTypes[niftyTypeIndex];\\n    }\\n\\n    // Performs a binary search of the nifty types array to find which nifty type a token id is associated with\\n    // This is more efficient than iterating the entire nifty type array until the proper entry is found.\\n    // This is O(log n) instead of O(n)\\n    function _getNiftyType(\\n        uint256 tokenId\\n    ) internal view virtual returns (uint256) {\\n        uint256 min = 0;\\n        uint256 max = niftyTypes.length - 1;\\n        uint256 guess = (max - min) / 2;\\n\\n        while (guess < niftyTypes.length) {\\n            NiftyType storage guessResult = niftyTypes[guess];\\n            if (\\n                tokenId >= guessResult.idFirst && tokenId <= guessResult.idLast\\n            ) {\\n                return guessResult.niftyType;\\n            } else if (tokenId > guessResult.idLast) {\\n                min = guess + 1;\\n                guess = min + (max - min) / 2;\\n            } else if (tokenId < guessResult.idFirst) {\\n                max = guess - 1;\\n                guess = min + (max - min) / 2;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetadataGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface IMetadataGenerator is IERC165 {\\n    function contractMetadata() external view returns (string memory);\\n\\n    function tokenMetadata(\\n        uint256 tokenId,\\n        uint256 niftyType,\\n        bytes calldata data\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INiftyEntityCloneable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface INiftyEntityCloneable is IERC165 {\\n    function initializeNiftyEntity(address niftyRegistryContract_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INiftyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INiftyRegistry {\\n    function isValidNiftySender(\\n        address sendingKey\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(\\n                vs,\\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            )\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes32 hash\\n    ) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes memory s\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n                    Strings.toString(s.length),\\n                    s\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(\\n        bytes32 domainSeparator,\\n        bytes32 structHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/structs/SignatureStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nstruct SignatureStatus {\\n    bool isSalted;\\n    bool isVerified;\\n    address signer;\\n    bytes32 saltedHash;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RejectEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title A base contract that may be inherited in order to protect a contract from having its fallback function\\n * invoked and to block the receipt of ETH by a contract.\\n * @author Nathan Gang\\n * @notice This contract bestows on inheritors the ability to block ETH transfers into the contract\\n * @dev ETH may still be forced into the contract - it is impossible to block certain attacks, but this protects from accidental ETH deposits\\n */\\n// For more info, see: \\\"https://medium.com/@alexsherbuck/two-ways-to-force-ether-into-a-contract-1543c1311c56\\\"\\nabstract contract RejectEther {\\n    /**\\n     * @dev For most contracts, it is safest to explicitly restrict the use of the fallback function\\n     * This would generally be invoked if sending ETH to this contract with a 'data' value provided\\n     */\\n    fallback() external payable {\\n        revert(\\\"Fallback function not permitted\\\");\\n    }\\n\\n    /**\\n     * @dev This is the standard path where ETH would land if sending ETH to this contract without a 'data' value\\n     * In our case, we don't want our contract to receive ETH, so we restrict it here\\n     */\\n    receive() external payable {\\n        revert(\\\"Receiving ETH not permitted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICloneablePaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\ninterface ICloneablePaymentSplitter is IERC165 {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(\\n        IERC20 indexed token,\\n        address to,\\n        uint256 amount\\n    );\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    function initialize(\\n        address[] calldata payees,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function totalShares() external view returns (uint256);\\n\\n    function totalReleased() external view returns (uint256);\\n\\n    function totalReleased(IERC20 token) external view returns (uint256);\\n\\n    function shares(address account) external view returns (uint256);\\n\\n    function released(address account) external view returns (uint256);\\n\\n    function released(\\n        IERC20 token,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function payee(uint256 index) external view returns (address);\\n\\n    function release(address payable account) external;\\n\\n    function release(IERC20 token, address account) external;\\n\\n    function pendingPayment(address account) external view returns (uint256);\\n\\n    function pendingPayment(\\n        IERC20 token,\\n        address account\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/structs/RoyaltyRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nstruct RoyaltyRecipient {\\n    bool isPaymentSplitter; // 1 byte\\n    uint16 bips; // 2 bytes\\n    address recipient; // 20 bytes\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"startTokenId\",\"type\":\"uint88\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokenId\",\"type\":\"uint256\"}],\"name\":\"AttemptingToBurnClaimedTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotMintZeroNifties\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferTo\",\"type\":\"address\"}],\"name\":\"CannotTransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"startTokenId\",\"type\":\"uint88\"},{\"internalType\":\"uint88\",\"name\":\"amountCreated\",\"type\":\"uint88\"}],\"name\":\"MismatchingBurnTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"startTokenId\",\"type\":\"uint88\"},{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"TokenIdDoesNotMatchNiftyType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"ContractSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idFirst\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idLast\",\"type\":\"uint256\"}],\"name\":\"NiftyTypeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"RoyaltyReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"RoyaltyReceiverUpdatedForTokenId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BIPS_PERCENTAGE_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"saltedHash_\",\"type\":\"bytes32\"}],\"name\":\"addOrUpdateMultiSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"startTokenId\",\"type\":\"uint88\"}],\"name\":\"burnUnusedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedZeroRoyaltyMarketplaceRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMarketplaceBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectionStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isContractFinalized\",\"type\":\"bool\"},{\"internalType\":\"uint88\",\"name\":\"amountCreated\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"defaultOwner\",\"type\":\"address\"}],\"internalType\":\"struct ERC721Omnibus.CollectionStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNiftyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"getNiftyTypeDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMinted\",\"type\":\"bool\"},{\"internalType\":\"uint72\",\"name\":\"niftyType\",\"type\":\"uint72\"},{\"internalType\":\"uint88\",\"name\":\"idFirst\",\"type\":\"uint88\"},{\"internalType\":\"uint88\",\"name\":\"idLast\",\"type\":\"uint88\"}],\"internalType\":\"struct NiftyType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNiftyTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMinted\",\"type\":\"bool\"},{\"internalType\":\"uint72\",\"name\":\"niftyType\",\"type\":\"uint72\"},{\"internalType\":\"uint88\",\"name\":\"idFirst\",\"type\":\"uint88\"},{\"internalType\":\"uint88\",\"name\":\"idLast\",\"type\":\"uint88\"}],\"internalType\":\"struct NiftyType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"getPaymentSplitterByNiftyType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaymentSplitterByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"getRoyaltySettings\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPaymentSplitter\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bips\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct RoyaltyRecipient\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultOwner_\",\"type\":\"address\"}],\"name\":\"initializeDefaultOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"initializeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"niftyRegistryContract_\",\"type\":\"address\"}],\"name\":\"initializeNiftyEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"splitterImplementation\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"initializeRoyalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"niftyTypeOrTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"splitterImplementation\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"initializeRoyalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataGenerator\",\"outputs\":[{\"internalType\":\"contract IMetadataGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"name\":\"mintMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiSignatureStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSalted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"saltedHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"nominateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"requireAddressIsNotBlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_t\",\"type\":\"address\"}],\"name\":\"setBlocklistRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"setIPFSHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"}],\"name\":\"setMetadataGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"niftyTypeOrTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bips\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bips\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"saltedHash_\",\"type\":\"bytes32\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"signMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSalted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"saltedHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiedSigners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NiftyJourneyErc721Token", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}