{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-core/SlashToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport \\\"../handshake-drop-libs/TokenTransferer.sol\\\";\\nimport \\\"../handshake-drop-types/interfaces/SlashTokenEvents.sol\\\";\\nimport \\\"../handshake-drop-libs/NativeTransferer.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"../handshake-drop-libs/SubscriptionRegistry.sol\\\";\\n/// @author 0xCocomastoras\\n/// @custom:version 1.0\\n/// @title SlashToken\\n/// @notice SlashToken is a simple, yet powerful tool to airdrop tokens and NFTs.\\n\\ncontract SlashToken is TokenTransferer, NativeTransferer, SlashTokenEvents, SubscriptionRegistry, ReentrancyGuard {\\n\\n    constructor() ReentrancyGuard(){}\\n\\n    /**\\n        @notice ERC-20 token airdrop with same, equal amount to all recipients\\n        @param recipients A list of addresses of the recipients\\n        @param amount Amount of tokens each recipient will be airdropped\\n        @param token Address of the token\\n    */\\n    function erc20AirdropEqualAmount(address[] calldata recipients, uint256 amount, address token) external payable nonReentrant {\\n        require(frozen == 0, \\\"CF\\\");\\n        require(denylist[msg.sender] == 0, 'UD');\\n        uint256 value = _getBaseFeeForWallet(); //Check if wallet is whitelisted with different value\\n        uint256 purchasedTxns = _getAvailableTxnsForWallet();\\n        uint recipientsLength = recipients.length;\\n        value = value == 0 ? baseFee : value;\\n        if (purchasedTxns == 0) {\\n            require(msg.value == value, \\\"NVV\\\");\\n        } else {\\n            _updateAvailableTxnsForWallet();\\n        }\\n        require(isInitialized != 0, 'NIY');\\n        require(recipientsLength <= 500, 'NVL');\\n        uint recipientsOffset;\\n        assembly {\\n            recipientsOffset := recipients.offset\\n        }\\n        _performMultiERC20Transfer(token, recipientsOffset, recipientsLength, amount);\\n        emit Erc20AirdropEqualAmount(msg.sender, token, recipientsLength, recipientsLength*amount);\\n    }\\n\\n    /**\\n        @notice ERC-20 token airdrop with custom amount for each recipient\\n        @param recipients A list of addresses of the recipients\\n        @param amount A list of amounts of the tokens each recipient will be airdropped\\n        @param token Address of the token\\n        @param totalAmount The sum of all tokens to be airdropped\\n    */\\n    function erc20AirdropCustomAmount(address[] calldata recipients, uint256[] calldata amount, address token, uint256 totalAmount) external payable nonReentrant {\\n        require(frozen == 0, \\\"CF\\\");\\n        require(denylist[msg.sender] == 0, 'UD');\\n        uint256 value = _getBaseFeeForWallet(); //Check if wallet is whitelisted with different value\\n        uint256 purchasedTxns = _getAvailableTxnsForWallet();\\n        uint recipientsLength = recipients.length;\\n        value = value == 0 ? baseFee : value;\\n        if (purchasedTxns == 0) {\\n            require(msg.value == value, \\\"NVV\\\");\\n        } else {\\n            _updateAvailableTxnsForWallet();\\n        }\\n        require(isInitialized != 0, 'NIY');\\n        require(recipientsLength <= 500 && recipientsLength == amount.length, 'NVL');\\n        uint recipientsOffset;\\n        uint amountsOffset;\\n\\n        assembly {\\n            recipientsOffset := recipients.offset\\n            amountsOffset := amount.offset\\n        }\\n        _performMultiERC20TransferCustom(token, recipientsOffset, recipientsLength, amountsOffset, totalAmount);\\n        emit Erc20AirdropCustomAmount(msg.sender, token, recipientsLength, totalAmount);\\n    }\\n\\n    /**\\n        @notice Native currency airdrop with same, equal amount to all recipients\\n        @param recipients A list of addresses of the recipients\\n        @param amount Amount of tokens each recipient will be airdropped\\n    */\\n    function nativeAirdropEqualAmount(address[] calldata recipients, uint256 amount) external payable nonReentrant {\\n        require(frozen == 0, \\\"CF\\\");\\n        require(isInitialized != 0, 'NIY');\\n        require(denylist[msg.sender] == 0, 'UD');\\n        uint recipientsOffset;\\n        uint recipientsLength = recipients.length;\\n        uint256 value = _getBaseFeeForWallet();  //Check if wallet is whitelisted with different value\\n        uint256 purchasedTxns = _getAvailableTxnsForWallet();\\n        uint256 recipientsValue = amount * recipientsLength;\\n        value = value == 0 ? (baseFee + recipientsValue) : (value + recipientsValue);\\n        if (purchasedTxns == 0) {\\n            require(msg.value == value, \\\"NVV\\\");\\n        } else {\\n            require(msg.value == recipientsValue, 'NVV');\\n            _updateAvailableTxnsForWallet();\\n        }\\n        require(recipientsLength <= 500, 'NVL');\\n        assembly {\\n            recipientsOffset := recipients.offset\\n        }\\n        _performMultiNativeTransfer(recipientsOffset, recipientsLength, amount);\\n        emit NativeAirdropEqualAmount(msg.sender, recipientsLength, recipientsValue);\\n    }\\n\\n    /**\\n        @notice Native currency airdrop with custom amount for each recipient\\n        @param recipients A list of addresses of the recipients\\n        @param amounts A list of amounts that each recipient will be airdropped\\n    */\\n    function nativeAirdropCustomAmount(address[] calldata recipients, uint256[] calldata amounts) external payable nonReentrant {\\n        require(frozen == 0, \\\"CF\\\");\\n        require(isInitialized != 0, 'NIY');\\n        require(denylist[msg.sender] == 0, 'UD');\\n        uint256 value = _getBaseFeeForWallet(); //Check if wallet is whitelisted with different value\\n        uint256 purchasedTxns = _getAvailableTxnsForWallet();\\n        uint recipientsOffset;\\n        uint amountsOffset;\\n        uint recipientsLength = recipients.length;\\n        require(recipientsLength <= 500 && recipientsLength == amounts.length, 'NVL');\\n        assembly {\\n            recipientsOffset := recipients.offset\\n            amountsOffset := amounts.offset\\n        }\\n        uint totalAmount = _performMultiNativeTransferCustom(recipientsOffset, recipientsLength, amountsOffset);\\n        value = value == 0 ? (baseFee + totalAmount) : (value + totalAmount);\\n        if (purchasedTxns == 0) {\\n            require(msg.value == value, \\\"NVV\\\");\\n        } else {\\n            require(msg.value == totalAmount, 'NVV');\\n            _updateAvailableTxnsForWallet();\\n        }\\n        emit NativeAirdropCustomAmount(msg.sender, recipientsLength, totalAmount);\\n    }\\n\\n    /**\\n        @notice Basic Airdrop of Erc721 tokens without bundle\\n        @param recipients A list of addresses of the recipients\\n        @param ids A list of ids of the token each recipient will be airdropped\\n        @param token The address of the token\\n    */\\n    function erc721Airdrop(address[] calldata recipients, uint256[] calldata ids, address token) external payable nonReentrant {\\n        require(permitErc721 != 0, 'NEY');\\n        require(frozen == 0, \\\"CF\\\");\\n        require(isInitialized != 0, 'NIY');\\n        require(denylist[msg.sender] == 0, 'UD');\\n        uint256 value = _getBaseFeeForWallet();\\n        value = value == 0 ? baseFee : value;\\n        uint256 purchasedTxns = _getAvailableTxnsForWallet();\\n        uint recipientsLength = recipients.length;\\n        if (purchasedTxns == 0) {\\n            require(msg.value == value, \\\"NVV\\\");\\n        } else {\\n            _updateAvailableTxnsForWallet();\\n        }\\n        require(recipientsLength <= 500 && recipientsLength == ids.length, 'NVL');\\n        uint recipientsOffset;\\n        uint idsOffset;\\n        assembly {\\n            recipientsOffset := recipients.offset\\n            idsOffset := ids.offset\\n        }\\n        _performMultiERC721Transfer(token, msg.sender, recipientsOffset, recipientsLength, idsOffset);\\n        emit Erc721Airdrop(msg.sender, token, recipientsLength);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-libs/ManagerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract ManagerActions{\\n    constructor(){}\\n    address owner;\\n    address feeSink;\\n    uint256 public frozen;\\n    uint256 public permitErc721 = 0;\\n\\n    mapping(address => uint256) denylist;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet deniedAddresses;\\n\\n    /**\\n        @notice Admin freezes / unfreezes contracts\\n        @param value_ 0 = unfreeze, any other value = freeze\\n    */\\n    function freezeContract(uint256 value_) external {\\n        require(msg.sender == owner, 'NVS');\\n        frozen = value_;\\n    }\\n\\n    /**\\n        @notice Admin permits/freezes erv721Airdrops\\n        @param value_ 0 = freeze, any other value = permit\\n    */\\n    function handleErc721Flag(uint256 value_) external {\\n        require(msg.sender == owner, 'NVS');\\n        permitErc721 = value_;\\n    }\\n\\n    /**\\n        @notice Admin updates fee sink address\\n        @param feeSink_ The new fee sink address\\n    */\\n    function updateFeeSink(address feeSink_) external {\\n        require(msg.sender == owner, 'NVS');\\n        feeSink = feeSink_;\\n    }\\n\\n    /**\\n        @notice Admin claims contract fees\\n    */\\n    function claimFees() external {\\n        address owner_ = owner;\\n        assembly {\\n            if iszero(eq(caller(), owner_)) {\\n                revert(0,0)\\n            }\\n            if iszero(call(gas(), sload(feeSink.slot), selfbalance(), 0, 0, 0, 0)) {\\n                revert(0,0)\\n            }\\n        }\\n    }\\n\\n    function addToDenylist(address[] memory list) external {\\n        require(msg.sender == owner, 'NVS');\\n        uint len = list.length;\\n        for(uint i = 0; i < len;) {\\n            if (!deniedAddresses.contains(list[i])) {\\n                deniedAddresses.add(list[i]);\\n            }\\n            unchecked {\\n                denylist[list[i]] = 1;\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function removeFromDenylist(address[] memory list) external {\\n        require(msg.sender == owner, 'NVS');\\n        uint len = list.length;\\n        for(uint i = 0; i < len;) {\\n            if (deniedAddresses.contains(list[i])) {\\n                deniedAddresses.remove(list[i]);\\n            }\\n            unchecked {\\n                denylist[list[i]] = 0;\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getDenylist() external view returns (address[] memory) {\\n        require(msg.sender == owner, 'NVS');\\n        return deniedAddresses.values();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-libs/NativeTransferer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n\\ncontract NativeTransferer {\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /**\\n     * @dev Internal function to transfer native tokens from a given originator\\n     *      to a multiple recipients\\n     *\\n     * @param offset     Calldata offset of the recipients of the transfer.\\n     * @param length     Calldata length of the recipients of the transfer.\\n     * @param amount     The amount to transfer.\\n     */\\n    function _performMultiNativeTransfer(uint256 offset, uint256 length, uint256 amount) internal {\\n        assembly {\\n             for { let i := 0 } lt(i, length) { i := add(i, 1) } {\\n                 let to := calldataload(add(offset, mul(i, 0x20)))\\n                 if iszero( call(\\n                    GAS_STIPEND_NO_STORAGE_WRITES,\\n                    to,\\n                    amount,\\n                    0,\\n                    0,\\n                    0,\\n                    0\\n                 )) {\\n                     revert(0,0)\\n                 }\\n             }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer native tokens from a given originator\\n     *      to a multiple recipients\\n     *\\n     * @param recipientsOffset            Calldata offset of the recipients of the transfer.\\n     * @param length            Calldata length of the recipients of the transfer.\\n     * @param amountsOffset     Calldata offset of the amounts to transfer\\n     */\\n    function _performMultiNativeTransferCustom(uint256 recipientsOffset, uint256 length, uint256 amountsOffset) internal returns (uint256 totalAmount){\\n        assembly {\\n             for { let i := 0 } lt(i, length) { i := add(i, 1) } {\\n                 let to := calldataload(add(recipientsOffset, mul(i, 0x20)))\\n                 let amount := calldataload(add(amountsOffset, mul(i, 0x20)))\\n                 totalAmount := add(totalAmount, amount)\\n                 if iszero( call(\\n                    GAS_STIPEND_NO_STORAGE_WRITES,\\n                    to,\\n                    amount,\\n                    0,\\n                    0,\\n                    0,\\n                    0\\n                 )) {\\n                     revert(0,0)\\n                 }\\n             }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-libs/SubscriptionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../handshake-drop-types/interfaces/SlashTokenRegistryEvents.sol\\\";\\nimport \\\"../handshake-drop-types/interfaces/PremiumSubscriptionRegistryEvents.sol\\\";\\nimport \\\"./ManagerActions.sol\\\";\\n\\n\\ncontract SubscriptionRegistry is SlashTokenRegistryEvents, PremiumSubscriptionRegistryEvents, ManagerActions {\\n    // @dev user's adddress to custom base fee for no bundle purchases\\n    mapping (address => uint256) baseFeeWhitelisted;\\n    // @dev user address to total available txns to use\\n    mapping(address => uint256) public userToTxns;\\n\\n    uint256[] availableTxnsBundles;\\n    uint256[] txnsBundlesToPrice;\\n\\n    uint256 isInitialized;\\n    uint256 public baseFee;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet bundleUsers;\\n\\n    function initialize(address admin_, address feeSink_, uint256 baseFeeCostInWei, uint256[] memory availableTxnsBundles_, uint256[] memory txnsBundlesToPrice_ ) external {\\n        require(isInitialized == 0, 'AI');\\n        require(availableTxnsBundles_.length == txnsBundlesToPrice_.length, 'NVD');\\n        owner = admin_;\\n        feeSink = feeSink_;\\n        availableTxnsBundles = availableTxnsBundles_;\\n        txnsBundlesToPrice = txnsBundlesToPrice_;\\n        isInitialized = 1;\\n        baseFee = baseFeeCostInWei;\\n    }\\n\\n    constructor(){}\\n\\n    /**\\n        @notice User buys a bundle of txns\\n        @param bundleIndex The index of the bundle array\\n        @param quantity The number of bundles that the user wants to buy\\n    */\\n    function buyTxnsBundle(uint256 bundleIndex, uint256 quantity) external payable {\\n        require(frozen == 0, \\\"CF\\\");\\n        require(msg.value == txnsBundlesToPrice[bundleIndex] * quantity, 'NVV');\\n        require(denylist[msg.sender] == 0, 'UD');\\n        require(quantity != 0, 'NVA');\\n        if(!bundleUsers.contains(msg.sender)) {\\n            bundleUsers.add(msg.sender);\\n        }\\n        uint256 total;\\n        unchecked {\\n            total = availableTxnsBundles[bundleIndex] * quantity;\\n            userToTxns[msg.sender] += total;\\n        }\\n        emit TxnsBundleBought(msg.sender, msg.value, total);\\n    }\\n\\n    /**\\n        @notice Admin sets promo fee for wallet instead of default base fee\\n        @param wallet User's wallet address\\n        @param amountInWei New cost per txns\\n    */\\n    function setBaseFeeForWallet(address wallet, uint256 amountInWei) external {\\n        require(amountInWei < baseFee, \\\"NVV\\\");\\n        require(msg.sender == owner, 'NVS');\\n        baseFeeWhitelisted[wallet] = amountInWei;\\n        emit WalletBaseFeeSet(wallet, amountInWei);\\n    }\\n\\n    /**\\n        @notice Admin resets promo fee for wallet. Default base fee applies\\n        @param wallet User's wallet address\\n    */\\n    function resetBaseFeeForWallet(address wallet) external {\\n        require(msg.sender == owner, 'NVS');\\n        delete baseFeeWhitelisted[wallet];\\n        emit WalletBaseFeeReset(wallet);\\n    }\\n\\n    /**\\n        @notice Admin adds txns to a user\\n        @param wallets A list of user's wallet address\\n        @param txns A list of txns to be added\\n    */\\n    function addTxnsToWallets(address[] memory wallets, uint256[] memory txns) external {\\n        require(msg.sender == owner, 'NVS');\\n        require(wallets.length == txns.length, \\\"NVL\\\");\\n        uint len = wallets.length;\\n        for(uint i =0; i<len;){\\n            unchecked {\\n                userToTxns[wallets[i]] += txns[i];\\n                i++;\\n            }\\n        }\\n        emit TxnsAdded(wallets, txns);\\n    }\\n\\n    /**\\n        @notice Admin sets the new base fee for all txns\\n        @param baseFee_ New base fee\\n    */\\n    function setNewBaseFee(uint256 baseFee_) external {\\n        require(msg.sender == owner, 'NVS');\\n        baseFee = baseFee_;\\n    }\\n\\n    /**\\n        @notice Admin sets the new available txnsBundles and prices\\n        @param availableTxnsBundles_ New available bundles\\n        @param txnsBundlesToPrice_ New price per bundles\\n    */\\n    function updateBundles(uint256[] memory availableTxnsBundles_, uint256[] memory txnsBundlesToPrice_ ) external {\\n        require(msg.sender == owner, 'NVS');\\n        require(availableTxnsBundles_.length == txnsBundlesToPrice_.length, 'NVD');\\n        availableTxnsBundles = availableTxnsBundles_;\\n        txnsBundlesToPrice = txnsBundlesToPrice_;\\n        emit BundlesUpdated(msg.sender, availableTxnsBundles_, txnsBundlesToPrice_);\\n    }\\n\\n    /**\\n        @notice External view function that returns active bundle offers\\n    */\\n    function getBundles() external view returns (uint256[] memory AvailableBundles, uint256[] memory BundlesPrices) {\\n        AvailableBundles = availableTxnsBundles;\\n        BundlesPrices = txnsBundlesToPrice;\\n    }\\n\\n    /**\\n        @notice External view function that returns the custom base fee for wallet\\n    */\\n    function getBaseFeeForWallet() external view returns (uint256) {\\n        return baseFeeWhitelisted[msg.sender];\\n    }\\n\\n    /**\\n        @notice External view function that returns the available txns for wallet\\n    */\\n    function getAvailableTxnsForWallet() external view returns (uint256) {\\n        return userToTxns[msg.sender];\\n    }\\n\\n    /**\\n        @notice External view function that returns all the users that have bought a bundle\\n    */\\n    function getUsersThatBoughtBundles() external view returns (address[] memory Users) {\\n        require(msg.sender == owner, 'NVS');\\n        Users = bundleUsers.values();\\n    }\\n\\n    /**\\n        @notice Internal view function that returns the custom base fee for wallet\\n    */\\n    function _getBaseFeeForWallet() internal view returns (uint256) {\\n        return baseFeeWhitelisted[msg.sender];\\n    }\\n\\n    /**\\n        @notice Internal view function that returns the available txns for wallet\\n    */\\n    function _updateAvailableTxnsForWallet() internal {\\n        unchecked {\\n            --userToTxns[msg.sender];\\n        }\\n    }\\n\\n    /**\\n        @notice Internal view function that returns the available txns for wallet\\n    */\\n    function _getAvailableTxnsForWallet() internal view returns (uint256) {\\n        return userToTxns[msg.sender];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-libs/TokenTransferer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @notice Safe ERC20 ,ERC721 multi transfer library that gracefully handles missing return values.\\n/// @author Cocomastoras\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ERC20s and ERC721s, this implementation won't check that a token has code,\\n/// responsibility is delegated to the caller.\\n\\ncontract TokenTransferer {\\n    error TransferFromFailed();\\n\\n    /**\\n     * @dev Internal function to transfer ERC20 tokens from a given originator\\n     *      to a multiple recipients. Sufficient approvals must be set on the\\n     *      contract performing the transfer.\\n     *\\n     * @param token                The ERC20 token to transfer.\\n     * @param recipientsOffset     Calldata offset of the recipients of the transfer.\\n     * @param length               Calldata length of the recipients of the transfer.\\n     * @param amount               The amount to transfer.\\n     */\\n    function _performMultiERC20Transfer(address token, uint256 recipientsOffset, uint256 length, uint256 amount) internal{\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let total := mul(amount, length)\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, total) // Store the `amount` argument.\\n            mstore(0x40, address()) // Store the `to` argument.\\n            mstore(0x2c, shl(96, caller())) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(\\n                        eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                    )\\n                )\\n            {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x40, amount) // Store the `amount` argument.\\n            for { let i := 0 } lt(i, length) { i := add(i, 1) } {\\n                let to := calldataload(add(recipientsOffset, mul(i, 0x20)))\\n                mstore(0x2c, shl(96, to)) // Store the `to` argument.\\n                mstore(0x0c, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n                // Perform the transfer, reverting upon failure.\\n                if iszero(\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x1c, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /**\\n        * @dev Internal function to transfer ERC20 tokens from a given originator\\n        *      to multiple recipients. Sufficient approvals must be set on the\\n        *      contract performing the transfer.\\n        * @param token            The ERC20 token to transfer.\\n        * @param recipientsOffset Offset of the recipients of the transfer.\\n        * @param recipientsLength Length of the recipients of the transfer.\\n        * @param amountsOffset    Offset of the amounts to transfer.\\n        * @param totalAmount      The totalAmount to transfer\\n    */\\n    function _performMultiERC20TransferCustom(address token, uint256 recipientsOffset, uint256 recipientsLength, uint256 amountsOffset, uint256 totalAmount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, totalAmount) // Store the `amount` argument.\\n            mstore(0x40, address()) // Store the `to` argument.\\n            mstore(0x2c, shl(96, caller())) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(\\n                        eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                    )\\n                )\\n            {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let sumAmount := 0\\n            for { let i := 0 } lt(i, recipientsLength) { i := add(i, 1) } {\\n                let to := calldataload(add(recipientsOffset, mul(i, 0x20)))\\n                let amount := calldataload(add(amountsOffset, mul(i, 0x20)))\\n                sumAmount := add(sumAmount, amount)\\n                mstore(0x40, amount) // Store the `amount` argument.\\n                mstore(0x2c, shl(96, to)) // Store the `to` argument.\\n                mstore(0x0c, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n                // Perform the transfer, reverting upon failure.\\n                if iszero(\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x1c, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            if iszero(eq(totalAmount, sumAmount)) {\\n                revert(0,0)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer batch of ERC721 tokens from a given\\n     *      originator to multiple recipients. Sufficient approvals must be set on\\n     *      the contract performing the transfer. Note that this function does\\n     *      not check whether the receiver can accept the ERC721 token (i.e. it\\n     *      does not use `safeTransferFrom`).\\n     *\\n     * @param token             The ERC721 token to transfer.\\n     * @param from              The originator of the transfer.\\n     * @param recipientsOffset  The offset of recipients of the transfer.\\n     * @param recipientsLength  The length of tokens to transfer.\\n     * @param idsOffset         The offset of tokenIds to transfer.\\n     */\\n    function _performMultiERC721Transfer(\\n        address token,\\n        address from,\\n        uint256 recipientsOffset,\\n        uint256 recipientsLength,\\n        uint256 idsOffset\\n    ) internal {\\n        // Utilize assembly to perform an optimized ERC721 token transfer.\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            for { let i := 0 } lt(i, recipientsLength) { i := add(i, 1) } {\\n                let to := calldataload(add(recipientsOffset, mul(i, 0x20)))\\n                let identifier := calldataload(add(idsOffset, mul(i, 0x20)))\\n                mstore(0x60, identifier) // Store the `identifier` argument.\\n                mstore(0x40, to) // Store the `to` argument.\\n                mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n                mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n                // Perform the transfer, reverting upon failure.\\n                if iszero(\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        iszero(returndatasize()), // Returned error.\\n                        call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x00)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-types/interfaces/PremiumSubscriptionRegistryEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface PremiumSubscriptionRegistryEvents {\\n    event WalletBaseFeeSet(address indexed Wallet, uint256 BaseFeeInWei);\\n    event WalletBaseFeeReset(address indexed Wallet);\\n    event TxnsAdded(address[] Wallet, uint256[] Txns);\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-types/interfaces/SlashTokenEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface SlashTokenEvents {\\n    event Erc20AirdropEqualAmount(address indexed From, address indexed Token,uint256 RecipientsLength, uint256 TotalAmount);\\n    event Erc20AirdropCustomAmount(address indexed From, address indexed Token, uint256 RecipientsLength, uint256 TotalAmount);\\n    event NativeAirdropEqualAmount(address indexed From,uint256 RecipientsLength, uint256 TotalAmount);\\n    event NativeAirdropCustomAmount(address indexed From, uint256 RecipientsLength, uint256 TotalAmount);\\n    event Erc721Airdrop(address indexed From, address indexed Token, uint256 RecipientsLength);\\n}\\n\"\r\n    },\r\n    \"contracts/handshake-drop/handshake-drop-types/interfaces/SlashTokenRegistryEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface SlashTokenRegistryEvents {\\n    event TxnsBundleBought(address indexed Buyer, uint256 Amount, uint256 Txns);\\n    event BundlesUpdated(address indexed Operator, uint256[] BundlesAmounts, uint256[] BundlesPrices);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundlesAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundlesPrices\",\"type\":\"uint256[]\"}],\"name\":\"BundlesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RecipientsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TotalAmount\",\"type\":\"uint256\"}],\"name\":\"Erc20AirdropCustomAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RecipientsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TotalAmount\",\"type\":\"uint256\"}],\"name\":\"Erc20AirdropEqualAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RecipientsLength\",\"type\":\"uint256\"}],\"name\":\"Erc721Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RecipientsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TotalAmount\",\"type\":\"uint256\"}],\"name\":\"NativeAirdropCustomAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RecipientsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TotalAmount\",\"type\":\"uint256\"}],\"name\":\"NativeAirdropEqualAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"Wallet\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Txns\",\"type\":\"uint256[]\"}],\"name\":\"TxnsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Txns\",\"type\":\"uint256\"}],\"name\":\"TxnsBundleBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"}],\"name\":\"WalletBaseFeeReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BaseFeeInWei\",\"type\":\"uint256\"}],\"name\":\"WalletBaseFeeSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"addToDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"txns\",\"type\":\"uint256[]\"}],\"name\":\"addTxnsToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyTxnsBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"erc20AirdropCustomAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"erc20AirdropEqualAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"erc721Airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"freezeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTxnsForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseFeeForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBundles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"AvailableBundles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"BundlesPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDenylist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersThatBoughtBundles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Users\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"handleErc721Flag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeSink_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseFeeCostInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"availableTxnsBundles_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"txnsBundlesToPrice_\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"nativeAirdropCustomAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nativeAirdropEqualAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitErc721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"removeFromDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"resetBaseFeeForWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"setBaseFeeForWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseFee_\",\"type\":\"uint256\"}],\"name\":\"setNewBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"availableTxnsBundles_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"txnsBundlesToPrice_\",\"type\":\"uint256[]\"}],\"name\":\"updateBundles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSink_\",\"type\":\"address\"}],\"name\":\"updateFeeSink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToTxns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SlashToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "9999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}