{"SourceCode": "// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/MarbleManager.sol\r\n\r\n//\r\npragma solidity ^0.8.0;\r\ninterface IMarbleNFT {\r\n    function updateMarbleUpgrade(uint256 marbleID, uint256 upgradeID, uint256 upgradeLevel) external;\r\n\r\n    function getMarbleUpgrade(uint256 marbleID, uint256 upgradeID) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface IRewardVault {\r\n    function spendFrom(address spender, uint256 _amount) external;\r\n}\r\n\r\ncontract MarbleManager is Ownable {\r\n    IERC20 upgradeToken = IERC20(0x06d21ef0c9e99850B2d0474C9a91a4B1ce37EA16);\r\n    IMarbleNFT marbleNFT = IMarbleNFT(0x61F1bEdc2bd71A88074A46B4E8071Dd12a35ebB5);\r\n    IRewardVault rewardVault = IRewardVault(0x06Aa1DD08Ac0A76B5DFaC8f7d3b4F5e540491A0C);\r\n\r\n    bool public upgradesEnabled;\r\n    mapping(uint256 => uint256[]) public upgradeCostsList;\r\n    mapping(uint256 => uint256) public tokenSpentOnUpgrades;\r\n\r\n    /////////////////////\r\n    //    MODIFIERS    //\r\n    /////////////////////\r\n    modifier onlyEnabled() {\r\n        require(upgradesEnabled, \"Upgrades disabled\");\r\n        _;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    /////////////////////\r\n    //      PUBLIC     //\r\n    /////////////////////\r\n    function upgradeMarble(uint256 marbleID, uint256 upgradeID, uint256 wantedLevel, bool spendFromVault) external onlyEnabled {\r\n        address marbleOwner = marbleNFT.ownerOf(marbleID);\r\n        require(msg.sender == marbleOwner, \"You can only upgrade your Marbles\");\r\n\r\n        uint256 maxLevel = getMaxLevel(upgradeID);\r\n        require(wantedLevel <= maxLevel, \"Exceeding maximum level\");\r\n\r\n        uint256 upgradeCost = calculateUpgradeCost(marbleID, upgradeID, wantedLevel);\r\n        require(upgradeCost > 0, \"Invalid upgrade cost\");\r\n\r\n        if (spendFromVault) {\r\n            rewardVault.spendFrom(msg.sender, upgradeCost);\r\n        } else {\r\n            upgradeToken.transferFrom(msg.sender, owner(), upgradeCost);\r\n        }\r\n\r\n        tokenSpentOnUpgrades[upgradeID] += upgradeCost;\r\n        marbleNFT.updateMarbleUpgrade(marbleID, upgradeID, wantedLevel);\r\n    }\r\n\r\n    /////////////////////\r\n    //   ONLY OWNER    //\r\n    /////////////////////\r\n    function setMarbleLevel(uint256 marbleID, uint256 upgradeID, uint256 wantedLevel) external onlyOwner {\r\n        marbleNFT.updateMarbleUpgrade(marbleID, upgradeID, wantedLevel);\r\n    }\r\n\r\n    function setUpgradeCost(uint256 _upgradeID, uint256[] memory _costs) external onlyOwner {\r\n        upgradesEnabled = false;\r\n        upgradeCostsList[_upgradeID] = _costs;\r\n    }\r\n\r\n    function setVault(address _vaultAddress) external onlyOwner {\r\n        rewardVault = IRewardVault(_vaultAddress);\r\n    }\r\n\r\n    function setUpgradesEnabled(bool _enabled) external onlyOwner {\r\n        upgradesEnabled = _enabled;\r\n    }\r\n\r\n    /////////////////////\r\n    //      VIEWS      //\r\n    /////////////////////\r\n    function getMarbleLevel(uint256 _marbleID, uint256 _upgradeID) public view returns (uint256) {\r\n        return marbleNFT.getMarbleUpgrade(_marbleID, _upgradeID);\r\n    }\r\n\r\n    function getUpgradeCosts(uint256 _upgradeID) public view returns (uint256[] memory) {\r\n        return upgradeCostsList[_upgradeID];\r\n    }\r\n\r\n    function calculateUpgradeCost(uint256 _marbleID, uint256 _upgradeID, uint256 _wantedLevel) public view returns (uint256) {\r\n        if (_wantedLevel > getMaxLevel(_upgradeID)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256[] memory upgradeCosts = getUpgradeCosts(_upgradeID);\r\n        uint256 currentLevel = getMarbleLevel(_marbleID, _upgradeID);\r\n        uint256 totalCost = 0;\r\n\r\n        for (uint256 i = currentLevel; i < _wantedLevel; i++) {\r\n            totalCost += upgradeCosts[i];\r\n        }\r\n\r\n        return totalCost;\r\n    }\r\n\r\n    function getMaxLevel(uint256 _upgradeID) public view returns (uint256) {\r\n        return upgradeCostsList[_upgradeID].length;\r\n    }\r\n\r\n    //DONT RENOUNCE OWNERSHIP\r\n    function renounceOwnership() public override onlyOwner {\r\n        revert(\"Cannot be renounced\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marbleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upgradeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantedLevel\",\"type\":\"uint256\"}],\"name\":\"calculateUpgradeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marbleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upgradeID\",\"type\":\"uint256\"}],\"name\":\"getMarbleLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upgradeID\",\"type\":\"uint256\"}],\"name\":\"getMaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upgradeID\",\"type\":\"uint256\"}],\"name\":\"getUpgradeCosts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marbleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedLevel\",\"type\":\"uint256\"}],\"name\":\"setMarbleLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upgradeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_costs\",\"type\":\"uint256[]\"}],\"name\":\"setUpgradeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setUpgradesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSpentOnUpgrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeCostsList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marbleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedLevel\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"spendFromVault\",\"type\":\"bool\"}],\"name\":\"upgradeMarble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MarbleManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f6b303986902e42a272b076b8013feec04f7c6bfbffdb51ace9c5ae1efca2c0"}