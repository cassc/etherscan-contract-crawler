{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facades/ChapterStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ChapterStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    // ( Double checked! )\\n    // Mapping of current state of the contracts ( 2nd iteration of NFT cosmetics - should be final for `Chapter` )\\n    // ChapterStorage1 = 1 - 366\\n    // ChapterStorage2 = 367 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory chapterStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < chapterStorage.length; i++) \\n        {\\n            Range memory chapterStorageRange = Range({storageContract:chapterStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(chapterStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/FigureStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FigureStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( Should be final )\\n    // FigureStorage1 = 1 - 367 ( + 2 units, + 4)\\n    // FigureStorage2 = 368 - 369\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory figureStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < figureStorage.length; i++) \\n        {\\n            Range memory figureStorageRange = Range({storageContract:figureStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(figureStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/HeadingStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract HeadingStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts\\n    // HeadingStorage1 = 1 - 359\\n    // HeadingStorage2 = 360 - 726\\n\\n    // Mapping of current state of the contracts ( after 2nd iteration, should be final )\\n    // HeadingStorage1 = 1 - 360\\n    // HeadingStorage2 = 361 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory headingStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < headingStorage.length; i++) \\n        {\\n            Range memory headingStorageRange = Range({storageContract:headingStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(headingStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/IncludesFigureStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract IncludesFigureStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts\\n    // IncludesFigureStorage1 = 1 - 369\\n    // IncludesFigureStorage2 = 370 - 726\\n\\n    // Mapping of current state of the contracts ( should be final )\\n    // IncludesFigureStorage1 = 1 - 350\\n    // IncludesFigureStorage2 = 351 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory includesFigureStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < includesFigureStorage.length; i++) \\n        {\\n            Range memory includesFigureStorageRange = Range({storageContract:includesFigureStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(includesFigureStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/LengthStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LengthStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts\\n    // LengthStorage1 = 1 - 369\\n    // LengthStorage2 = 370 - 726\\n\\n    // Mapping of current state of the contracts ( should be finalized )\\n    // LengthStorage1 = 1 - 369\\n    // LengthStorage2 = 370 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory lengthStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < lengthStorage.length; i++) \\n        {\\n            Range memory lengthStorageRange = Range({storageContract:lengthStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(lengthStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/NetwordedAStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NetwordedAStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be final! )\\n    // NetwordedAStorage1 = 1 - 370\\n    // NetwordedAStorage2 = 371 - 729\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory chapterStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < chapterStorage.length; i++) \\n        {\\n            Range memory chapterStorageRange = Range({storageContract:chapterStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(chapterStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/NetwordedBStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NetwordedBStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be final! )\\n    // NetwordedBStorage1 = 1 - 370\\n    // NetwordedBStorage2 = 371 - 729\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory networdedBStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < networdedBStorage.length; i++) \\n        {\\n            Range memory networdedBStorageRange = Range({storageContract:networdedBStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(networdedBStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/NumFootnotesStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NumFootnotesStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts\\n    // NumFootnotesStorage1 = 1 - 360\\n    // NumFootnotesStorage2 = 361 - 726\\n\\n    // Mapping of current state of the contracts ( should be finalized )\\n    // NumFootnotesStorage1 = 1 - 360\\n    // NumFootnotesStorage2 = 361 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory numFootnotesStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < numFootnotesStorage.length; i++) \\n        {\\n            Range memory numFootnotesStorageRange = Range({storageContract:numFootnotesStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(numFootnotesStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/SectionStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SectionStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be finalized )\\n    // sectionStorage1 = 1 - 365\\n    // sectionStorage2 = 366 - 738\\n\\n    // Mapping of current state of the contracts ( after 2nd iteration, should be final! ) [ Double checked ]\\n    // sectionStorage1 = 1 - 366\\n    // sectionStorage2 = 367 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory sectionStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < sectionStorage.length; i++) \\n        {\\n            Range memory sectionStorageRange = Range({storageContract:sectionStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(sectionStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/UnitDescriptorStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract UnitDescriptorStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be final! )\\n    // UnitDescriptorStorage1 = 1 - 365\\n    // UnitDescriptorStorage2 = 366 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory unitDescriptorStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < unitDescriptorStorage.length; i++) \\n        {\\n            Range memory unitDescriptorStorageRange = Range({storageContract:unitDescriptorStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(unitDescriptorStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/UnitStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract UnitStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    // Mapping after Cosmetics of metadata ( 3rd iteration ) ( final for `UnitText` )\\n    // UnitStorage1 = 1 - 20\\n    // UnitStorage2 = 21 - 39\\n    // UnitStorage3 = 40 - 58\\n    // UnitStorage4 = 59 - 77\\n    // UnitStorage5 = 78 - 96\\n    // UnitStorage6 = 97 - 116\\n    // UnitStorage7 = 117 - 135\\n    // UnitStorage8 = 136 - 154\\n    // UnitStorage9 = 155 - 173\\n    // UnitStorage10 = 174 - 192\\n    // UnitStorage11 = 193 - 211\\n    // UnitStorage12 = 212 - 230\\n    // UnitStorage13 = 231 - 249\\n    // UnitStorage14 = 250 - 268\\n    // UnitStorage15 = 269 - 287\\n    // UnitStorage16 = 288 - 306\\n    // UnitStorage17 = 307 - 326\\n    // UnitStorage18 = 327 - 345\\n    // UnitStorage19 = 346 - 364\\n    // UnitStorage20 = 365 - 383\\n    // UnitStorage21 = 384 - 402\\n    // UnitStorage22 = 403 - 421\\n    // UnitStorage23 = 422 - 440\\n    // UnitStorage24 = 441 - 459\\n    // UnitStorage25 = 460 - 478\\n    // UnitStorage26 = 479 - 497\\n    // UnitStorage27 = 498 - 517\\n    // UnitStorage28 = 518 - 536\\n    // UnitStorage29 = 537 - 555\\n    // UnitStorage30 = 556 - 574\\n    // UnitStorage31 = 575 - 593\\n    // UnitStorage32 = 594 - 612\\n    // UnitStorage33 = 613 - 635\\n    // UnitStorage34 = 636 - 654\\n    // UnitStorage35 = 655 - 674\\n    // UnitStorage36 = 675 - 693\\n    // UnitStorage37 = 694 - 714\\n    // UnitStorage38 = 715 - 735\\n    // UnitStorage39 = 736 - 739\\n\\n    // Logic: \\n\\n    // ... examples - id = 456\\n    // for eachStorageContract get it's range\\n    // if `id` ( 456 ) fits the range, we first can store address of a contract ( unitStorage7 ).\\n    // contract found - address unitStorage7; // 410 - 489\\n    // then for range 410-489 ( difference is 79 ), ids are actually ( 0 - 79 )\\n    // so if it's not first contract ( it starts with 1 ), requested id = 456, in actual range of ids ( 0 - 79 ) is 33 ( if deduced by - toRange ), 46 if it is desired - from range  \\n    \\n    // set to onlyOwner()\\n    // check if value exists - \\n\\n    // this must be replaced by arrays unitStorageAddress[], startRange[], endRange[]\\n    // and then for...\\n\\n\\n    // ! previously working mapping -> Currently organizing mapping!\\n    \\n    Range[] ranges;\\n\\n    constructor(address[] memory unitStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < unitStorage.length; i++) \\n        {\\n            Range memory unitStorageRange = Range({storageContract:unitStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(unitStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/XStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract XStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be finalized! )\\n    // XStorage1 = 1 - 370\\n    // XStorage2 = 371 - 729\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory xStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < xStorage.length; i++) \\n        {\\n            Range memory xStorageRange = Range({storageContract:xStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(xStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/YStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDy-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract YStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be finalized !)\\n    // yStorage1 = 1 - 370\\n    // yStorage2 = 371 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory yStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < yStorage.length; i++) \\n        {\\n            Range memory yStorageRange = Range({storageContract:yStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(yStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/facades/ZStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDy-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ZStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts ( should be finalized! )\\n    // yStorage1 = 1 - 370\\n    // yStorage2 = 371 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory zStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < zStorage.length; i++) \\n        {\\n            Range memory zStorageRange = Range({storageContract:zStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(zStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/invitations/InvitationStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract InvitationStorage is Ownable{\\n    \\n    struct Data {\\n        bytes32 invitationId;\\n        uint256 isUsed;\\n    }\\n    event InvitationUsed(bytes32 invitationId);\\n\\n    address public authorizedContract; \\n    Data[] public dataArray;\\n    mapping(bytes32 => Data) public dataMapping;\\n\\n    constructor() {\\n        authorizedContract = _msgSender();\\n    }\\n    modifier onlyAuthorizedContract() {\\n        require(msg.sender == authorizedContract, \\\"Caller is not the authorized contract\\\");\\n        _;\\n    }\\n    function setAuthorizedContract(address _authorizedContract) external onlyOwner {\\n        authorizedContract = _authorizedContract;\\n    }\\n\\n    function addData(bytes32 _invitationData) public onlyOwner{\\n        Data memory newData = Data({\\n            invitationId: _invitationData,\\n            isUsed: 0\\n        });\\n        dataArray.push(newData);\\n        dataMapping[_invitationData] = newData;\\n    }\\n\\n    function addDataBulk(bytes32[] memory _invitationDataArray) public onlyOwner{\\n        for (uint256 i = 0; i < _invitationDataArray.length; i++) {\\n            addData(_invitationDataArray[i]);\\n        }\\n    }\\n    function updateDataByIndex(uint256 index, bytes32 _newInvitationId) public onlyOwner {\\n        require(index < dataArray.length, \\\"reservation.updateDataByIndex: Index out of bounds\\\");\\n        dataArray[index].invitationId = _newInvitationId;\\n    }\\n\\n    function getDataByInvitationId(bytes32 _invitationId) public view returns (bool) {\\n        Data memory dataItem = dataMapping[_invitationId];\\n        require(dataItem.invitationId != 0, \\\"Invitation not found\\\");\\n        return dataItem.isUsed >= 5;\\n    }\\n\\n    function isValidInvitation(string memory data) public view returns (bool) {\\n        bytes32 hashedData = keccak256(abi.encodePacked(data));\\n        Data storage dataItem = dataMapping[hashedData];\\n\\n        if(dataItem.invitationId == 0){\\n            return false;\\n        }\\n        if (dataItem.isUsed <= 5) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function setIsUsed(string memory data) public onlyAuthorizedContract {\\n        bytes32 hashedData = keccak256(abi.encodePacked(data));\\n        Data storage dataItem = dataMapping[hashedData];\\n\\n        require(dataItem.invitationId != 0, \\\"Invitation not found\\\");\\n\\n        dataItem.isUsed += 1;\\n        emit InvitationUsed(dataItem.invitationId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SplitSequence.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nlibrary SplitSequence {\\n    function splitSentence(string memory sentence, uint256 maxLineLength) internal returns (string[] memory) {\\n        bool containsNewLines = containsPattern(sentence, \\\"\\\\\\\\n\\\");\\n\\n        if (containsNewLines) {\\n            return splitByPattern(sentence, \\\"\\\\\\\\n\\\");\\n        }\\n\\n        string[] memory words = splitByPattern(sentence, \\\" \\\");\\n        string[] memory lines = new string[](words.length);\\n        string memory currentLine = \\\"\\\";\\n\\n        uint256 lineIndex = 0;\\n        for (uint256 i = 0; i < words.length; i++) {\\n            string memory word = words[i];\\n\\n            if (bytes(currentLine).length + bytes(word).length + 1 > maxLineLength) {\\n                lines[lineIndex] = currentLine;\\n                currentLine = word;\\n                lineIndex++;\\n            } else {\\n                if (bytes(currentLine).length > 0) {\\n                    currentLine = string(abi.encodePacked(currentLine, \\\" \\\"));\\n                }\\n                currentLine = string(abi.encodePacked(currentLine, word));\\n            }\\n        }\\n\\n        if (bytes(currentLine).length > 0) {\\n            lines[lineIndex] = currentLine;\\n            lineIndex++;\\n        }\\n\\n        return resizeArray(lines, lineIndex);\\n    }\\n\\n    function containsPattern(string memory data, string memory pattern) private pure returns (bool) {\\n        bytes memory dataBytes = bytes(data);\\n        bytes memory patternBytes = bytes(pattern);\\n        uint256 dataLength = dataBytes.length;\\n        uint256 patternLength = patternBytes.length;\\n\\n        for (uint256 i = 0; i < dataLength - patternLength + 1; i++) {\\n            bool isMatch = true;\\n            for (uint256 j = 0; j < patternLength; j++) {\\n                if (dataBytes[i + j] != patternBytes[j]) {\\n                    isMatch = false;\\n                    break;\\n                }\\n            }\\n            if (isMatch) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function splitByPattern(string memory data, string memory pattern) private returns (string[] memory) {\\n        bytes memory dataBytes = bytes(data);\\n        bytes memory patternBytes = bytes(pattern);\\n        uint256 dataLength = dataBytes.length;\\n        uint256 patternLength = patternBytes.length;\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < dataLength - patternLength + 1; i++) {\\n            bool isMatch = true;\\n            for (uint256 j = 0; j < patternLength; j++) {\\n                if (dataBytes[i + j] != patternBytes[j]) {\\n                    isMatch = false;\\n                    break;\\n                }\\n            }\\n            if (isMatch) {\\n                count++;\\n            }\\n        }\\n\\n        string[] memory result = new string[](count + 1);\\n        uint256 index = 0;\\n        uint256 startIndex = 0;\\n\\n        for (uint256 i = 0; i < dataLength - patternLength + 1; i++) {\\n            bool isMatch = true;\\n            for (uint256 j = 0; j < patternLength; j++) {\\n                if (dataBytes[i + j] != patternBytes[j]) {\\n                    isMatch = false;\\n                    break;\\n                }\\n            }\\n            if (isMatch) {\\n                result[index] = substring(data, startIndex, i);\\n                index++;\\n                startIndex = i + patternLength;\\n            }\\n        }\\n\\n        result[index] = substring(data, startIndex, dataLength);\\n        return result;\\n    }\\n\\n    function resizeArray(string[] memory array, uint256 newSize) private pure returns (string[] memory) {\\n        string[] memory resizedArray = new string[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            resizedArray[i] = array[i];\\n        }\\n        return resizedArray;\\n    }\\n    function substring(string memory str, uint startIndex, uint endIndex) private returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex-startIndex);\\n        for(uint i = startIndex; i < endIndex; i++) {\\n            result[i-startIndex] = strBytes[i];\\n        }\\n    return string(result);\\n}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SVGGenerator.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nlibrary SVGGenerator {\\n    // we may pass an array as @argument here as an argument\\n    // function generateSVG(string[] memory sentence) external pure returns (string memory){\\n    function generateSVG(string memory sentence) external pure returns (string memory) {\\n        \\n        // Working with sentences / sequences\\n        // string memory svg = string(abi.encodePacked(\\n        //     '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 800 600\\\">',\\n        //     '<style>text { font-family: Arial; font-size: 12px; fill: black; text-anchor: middle; dominant-baseline: middle; }</style>',\\n        //     '<text x=\\\"50%\\\" y=\\\"50%\\\">'\\n        // ));\\n\\n        // to be done character replacment ( )\\n        // here unciode to SVG\\n        // if (text contains  \\\"\\\\u2190\\\" = \\\\u2190) = <text> &#8592; </text>\\n        // if (text contains  \\\"\\\\u2B95\\\" = \\\\u2B95) = <text>&#8594; </text>)\\n        // if text contains (_ _)\\n        // if text contains `\\n        // if text contains \\\\u2211 ( \u2211 ) = <text>&sum;</text>\\n\\n        // works with sentece ( like units )\\n        // for (uint256 i = 0; i < sentence.length; i++) {\\n        //     string memory tspan = string(abi.encodePacked(\\n        //         '<tspan x=\\\"50%\\\" dy=\\\"', (i == 0) ? \\\"-7em\\\" : \\\"1.5em\\\", '\\\">',\\n        //         sentence[i],\\n        //         '</tspan>'\\n        //     ));\\n        //     svg = string(abi.encodePacked(svg, tspan));\\n        // }\\n        // svg = string(abi.encodePacked(svg, '</text></svg>'));\\n        // works with sentece ( like units )\\n\\n        // to work with nodewords\\n        \\n        string memory svgHeader = '<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>'\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 800 600\\\">'\\n            '<style>text { font-family: Arial; font-size: 17px; fill: black; text-anchor: middle; dominant-baseline: middle; }</style>'\\n            '<text x=\\\"50%\\\" y=\\\"50%\\\">';\\n\\n        string memory tspan = string(abi.encodePacked(\\n            '<tspan x=\\\"50%\\\" dy=\\\"-7em\\\">', \\n            sentence, \\n            '</tspan>'\\n        ));\\n\\n        string memory svgFooter = '</text></svg>';\\n\\n        return string(abi.encodePacked(svgHeader, tspan, svgFooter));\\n        }\\n}\"\r\n    },\r\n    \"contracts/NFT.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/// ============ Imports ============\\nimport { ERC721URIStorage } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\"; // OZ: ERC721URIStorage \\n// import { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; // OZ: Counters\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\"; // OZ: Strings\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\"; // OZ: Base64\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // OZ: Ownable\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; // OZ: IERC20\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // OZ: IERC721;\\n// metadata\\nimport { NFTMetadata } from \\\"./NFTMetadata.sol\\\";\\n// reservation\\nimport { ReservationStorage } from \\\"./reservations/ReservationStorage.sol\\\";\\n// invitation\\nimport { InvitationStorage } from \\\"./invitations/InvitationStorage.sol\\\";\\n// libraries\\n\\ncontract NFT is ERC721URIStorage, Ownable{\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n    NFTMetadata public nftMetadata;\\n    uint256[] public _alreadyMintedTokenIds;\\n    Counters.Counter private _tokenIds;\\n    uint256 private peripheryPrice = 16 ether;\\n    uint256 private peripheryBookPrice = 90 ether;\\n    uint256 private imperialCorePrice = 32 ether;\\n    uint256 private imperialCoreBookPrice = 180 ether;\\n    mapping(uint256 => uint256) public tokenPurchasePrice;\\n    mapping(address => bool) public hasMinted;\\n    ReservationStorage reservationContract;\\n    InvitationStorage invitationsContract;\\n    bool reservationsActive = true;\\n    bool invitationsActive = true;\\n    bool public isOwnerOnlyMode = true;\\n\\n    modifier canChangeAttributes() {\\n        if (isOwnerOnlyMode) {\\n            require(msg.sender == owner(), \\\"Only the owner can call this function in owner-only mode\\\");\\n        }\\n        _;\\n    }\\n    constructor(address _nftMetadata, address reservationContractAddress, address invitationsContractAddress) ERC721(\\\"PROTOCOLS FOR POST-CAPITALIST ECONOMIC EXPRESSION\\\", \\\"ECSANFT\\\"){\\n        //transferOwnership(owner);\\n        nftMetadata = NFTMetadata(_nftMetadata);\\n        reservationContract = ReservationStorage(reservationContractAddress);\\n        invitationsContract = InvitationStorage(invitationsContractAddress);\\n    }\\n    function changeAttributes(uint256 tokenId, string memory newTokenURI) public canChangeAttributes{\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not owner nor approved\\\");\\n        _setTokenURI(tokenId, newTokenURI); \\n    }\\n    function getAlreadyMintedTokenIds() public view returns (uint256[] memory){\\n        return _alreadyMintedTokenIds;\\n    }\\n    function mintByReservation(uint256 tokenId, string memory reservationId, uint256 chosenPrice) public payable{\\n        require(reservationsActive, \\\"Reservations are not active\\\");\\n        require(reservationContract.isValidReservation(reservationId, tokenId), \\\"Invalid reservation\\\");\\n        reservationContract.setIsUsed(tokenId);\\n        mintBase(tokenId, chosenPrice);\\n    }\\n    function mintByInvitation(uint256 tokenId, string memory invitationId, uint256 chosenPrice) public payable{\\n        require(invitationsActive, \\\"Invitations are not active\\\");\\n        if(reservationContract.isReserved(tokenId)){\\n            require(!reservationsActive, \\\"Token is reserved\\\");\\n        }\\n        require(invitationsContract.isValidInvitation(invitationId), \\\"Invalid invitation\\\");\\n        invitationsContract.setIsUsed(invitationId);\\n        mintBase(tokenId, chosenPrice);\\n    }\\n    function mintById(uint256 tokenId, uint256 chosenPrice) public payable {\\n        // was before\\n        // require(!reservationsActive && !invitationsActive, \\\"Invitations & Reservations are still active\\\");\\n        // added now\\n        if(reservationContract.isReserved(tokenId)){\\n            require(!reservationsActive, \\\"Token is reserved\\\");\\n        }\\n        require(!invitationsActive, \\\"Invitations are still active\\\");\\n        require(validPrice(chosenPrice), \\\"Invalid chosen price\\\");\\n        require(msg.value >= chosenPrice, \\\"Ether value sent is not correct\\\");\\n        require(!_exists(tokenId), \\\"Token with this ID already exists\\\");\\n        require(!hasMinted[msg.sender], \\\"You have already minted an NFT from this collection.\\\");\\n\\n        _alreadyMintedTokenIds.push(tokenId);\\n        hasMinted[msg.sender] = true;\\n        _safeMint(msg.sender, tokenId);\\n        _setTokenURI(tokenId, nftMetadata.getTokenURI(tokenId));\\n    }\\n    // mint base\\n    function mintBase(uint256 tokenId, uint256 chosenPrice) internal {\\n        require(!_exists(tokenId), \\\"Token with this ID already exists\\\");\\n        require(validPrice(chosenPrice), \\\"Invalid chosen price\\\");\\n        require(msg.value >= chosenPrice, \\\"Ether value sent is not correct\\\");\\n        require(tokenId <= 601, \\\"Token ID greater than allowed maximum\\\");\\n        require(!hasMinted[msg.sender], \\\"You have already minted an NFT from this collection.\\\");\\n\\n        tokenPurchasePrice[tokenId] = chosenPrice;\\n        _alreadyMintedTokenIds.push(tokenId);\\n         hasMinted[msg.sender] = true;\\n        _safeMint(msg.sender, tokenId);\\n        _setTokenURI(tokenId, nftMetadata.getTokenURI(tokenId));\\n    }\\n    // function mintBaseTest(uint256 tokenId) public {\\n    //     require(!_exists(tokenId), \\\"Token with this ID already exists\\\");\\n    //     // require(validPrice(chosenPrice), \\\"Invalid chosen price\\\");\\n    //     // require(msg.value >= chosenPrice, \\\"Ether value sent is not correct\\\");\\n    //     require(tokenId <= 601, \\\"Token ID greater than allowed maximum\\\");\\n    //     // require(!hasMinted[msg.sender], \\\"You have already minted an NFT from this collection.\\\");\\n\\n    //     // tokenPurchasePrice[tokenId] = chosenPrice;\\n    //     _alreadyMintedTokenIds.push(tokenId);\\n    //      hasMinted[msg.sender] = true;\\n    //     _safeMint(msg.sender, tokenId);\\n    //     _setTokenURI(tokenId, nftMetadata.getTokenURI(tokenId));\\n    // }\\n    \\n    function getReservationsActive() external view returns(bool) {\\n        return reservationsActive;\\n    }\\n\\n    function setReservationsActive(bool _status) external onlyOwner {\\n        reservationsActive = _status;\\n    }\\n\\n    function getInvitationsActive() external view returns(bool) {\\n        return invitationsActive;\\n    }\\n\\n    function setInvitationsActive(bool _status) external onlyOwner {\\n        invitationsActive = _status;\\n     }\\n\\n    function validPrice(uint256 price) internal view returns (bool) {\\n        return price == peripheryPrice || price == peripheryPrice + peripheryBookPrice || price == imperialCorePrice || price == imperialCorePrice + imperialCoreBookPrice; \\n    }\\n\\n    function getPriceForTokenId(uint256 tokenId) public view returns (uint256) {\\n        return tokenPurchasePrice[tokenId];\\n    }\\n    function getPeripheryPrice() external view returns(uint256) {\\n        return peripheryPrice;\\n    }\\n    function getPeripheryBookPrice() external view returns(uint256) {\\n        return peripheryBookPrice;\\n    }\\n    function getImperialCorePrice() external view returns(uint256) {\\n        return peripheryPrice;\\n    }\\n    function getImperialCoreBookPrice() external view returns(uint256) {\\n        return peripheryPrice;\\n    }  \\n    function setPeripheryPrice(uint256 _peripheryPrice) external onlyOwner {\\n        peripheryPrice = _peripheryPrice;\\n    }\\n    function setPeripheryBookPrice(uint256 _peripheryBookPrice) external onlyOwner {\\n        peripheryBookPrice = _peripheryBookPrice;\\n    }\\n    function setImperialCorePrice(uint256 _peripheryPrice) external onlyOwner {\\n        peripheryPrice = _peripheryPrice;\\n    }\\n    function setImperialCoreBookPrice(uint256 _peripheryPrice) external onlyOwner {\\n        peripheryPrice = _peripheryPrice;\\n    }\\n    // Withdraw ERC20\\n    function withdrawERC20(address tokenAddress, address to, uint256 amount) external onlyOwner {\\n        IERC20(tokenAddress).transfer(to, amount);\\n    }\\n    // Withdraw ERC721\\n    function withdrawERC721(address tokenAddress, address to, uint256 tokenId) external onlyOwner {\\n        IERC721(tokenAddress).safeTransferFrom(address(this), to, tokenId);\\n    }\\n    // Enable withdrawal of ETH\\n    function withdrawEther(address to) public onlyOwner{\\n        address payable recipient = payable(to);\\n        (bool succeed, bytes memory data) = recipient.call{value: address(this).balance}(\\\"\\\"); \\n        require(succeed, \\\"Failed to withdraw Ether\\\");\\n    }\\n    \\n}\"\r\n    },\r\n    \"contracts/NFTMetadata.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/// ============ Imports ============\\nimport { ERC721URIStorage } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\"; // OZ: ERC721URIStorage \\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; // OZ: Counters\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\"; // OZ: Strings\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\"; // OZ: Base64\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // OZ: Ownable\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; // OZ: IERC20\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // OZ: IERC721;\\n// libraries\\nimport { SVGGenerator} from \\\"./lib/SVGGenerator.sol\\\";\\nimport { SplitSequence } from \\\"./lib/SplitSequence.sol\\\";\\nimport { StorageFacadeManager } from \\\"./StorageFacadeManager.sol\\\";\\n\\ncontract NFTMetadata is Ownable{\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n    string[] internal TRAIT_TYPES;\\n    StorageFacadeManager storageFacadeManager;\\n    address public authorizedContract;\\n    string public imageURL1;\\n    string public imageURL2;\\n\\n    event NFTMetadataDebugging(string message);\\n\\n    constructor(address _storageFacadeManager, string memory _imageURL1, string memory _imageURL2) {\\n        storageFacadeManager = StorageFacadeManager(_storageFacadeManager);\\n        authorizedContract = _storageFacadeManager;\\n        imageURL1 = \\\"ipfs://QmW6XNWUcc6xc28UW5yVcSAsujzidgJ8hR9ML3SbMzbfaM/\\\";\\n        imageURL2 = _imageURL2;\\n        TRAIT_TYPES = initializeTraitTypes();\\n    }\\n    modifier onlyAuthorizedContract() {\\n        require(msg.sender == authorizedContract, \\\"Caller is not the authorized contract\\\");\\n        _;\\n    }\\n    function setAuthorizedContract(address _authorizedContract) external onlyOwner {\\n        authorizedContract = _authorizedContract;\\n    }\\n    function setImageURL1(string memory _imageURL1) external onlyOwner {\\n        imageURL1 = _imageURL1;\\n    }\\n    function setImageURL2(string memory _imageURL2) external onlyOwner {\\n        imageURL2 = _imageURL2;\\n    }\\n\\n    function initializeTraitTypes() internal pure returns (string[] memory) {\\n        string[] memory traitTypes = new string[](13);\\n        traitTypes[0] = \\\"Figure\\\";\\n        traitTypes[1] = \\\"Chapter\\\";\\n        traitTypes[2] = \\\"Section\\\";\\n        traitTypes[3] = \\\"Heading\\\";\\n        traitTypes[4] = \\\"Footnotes count\\\";\\n        traitTypes[5] = \\\"Includes figure\\\";\\n        traitTypes[6] = \\\"Length\\\";\\n        traitTypes[7] = \\\"X\\\";\\n        traitTypes[8] = \\\"Y\\\";\\n        traitTypes[9] = \\\"Z\\\";\\n        traitTypes[10] = \\\"Nodewords\\\";\\n        traitTypes[11] = \\\"Netword A\\\";\\n        traitTypes[12] = \\\"Netword B\\\";\\n        return traitTypes;\\n    }\\n    function buildAttributes(string[] memory traitTypes, string[] memory traitValues) internal pure returns (string memory) {\\n        string memory attributes = \\\"[\\\";\\n\\n        for (uint256 i = 0; i < traitTypes.length; i++) {\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    i > 0 ? \\\",\\\" : \\\"\\\",\\n                    '{\\\"trait_type\\\":\\\"',\\n                    traitTypes[i],\\n                    '\\\",\\\"value\\\":\\\"',\\n                    traitValues[i],\\n                    '\\\"}'\\n                )\\n            );\\n        }\\n\\n        attributes = string(abi.encodePacked(attributes, \\\"]\\\"));\\n        return attributes;\\n    }\\n    function encodeMetadata(\\n        string memory name,\\n        string memory description,\\n        string memory image,\\n        string memory attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            image,\\n                            '\\\",\\\"attributes\\\":',\\n                            attributes,\\n                            '}'\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n    function getTraitValue(uint256 index, uint256 tokenId) internal returns (string memory) {\\n        // if (index == 0) return storageFacadeManager.getFootnoteStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 0) return storageFacadeManager.getFigureStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 1) return storageFacadeManager.getChapterStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 2) return storageFacadeManager.getSectionStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 3) return storageFacadeManager.getHeadingStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 4) return storageFacadeManager.getNumFootnotesStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 5) return storageFacadeManager.getIncludesFigureStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 6) return storageFacadeManager.getLengthStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 7) return storageFacadeManager.getXStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 8) return storageFacadeManager.getYStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 9) return storageFacadeManager.getZStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 10) return storageFacadeManager.getUnitDescriptorStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 11) return storageFacadeManager.getNetwordedAStorageFacade().getUnitBasedOnId(tokenId);\\n        if (index == 12) return storageFacadeManager.getNetwordedBStorageFacade().getUnitBasedOnId(tokenId);\\n        return \\\"\\\"; // Handle the default case\\n    }\\n    // gnosis safe withdrawal test\\n    // function getTraitValue(uint256 index, uint256 tokenId) internal returns (string memory) {\\n    //     if (index == 1) \\\"1\\\";\\n    //     if (index == 2) \\\"1\\\";\\n    //     if (index == 3) \\\"1\\\";\\n    //     if (index == 4) \\\"1\\\";\\n    //     if (index == 5) \\\"1\\\";\\n    //     if (index == 6) \\\"1\\\";\\n    //     if (index == 7) \\\"1\\\";\\n    //     if (index == 8) \\\"1\\\";\\n    //     if (index == 9) \\\"1\\\";\\n    //     if (index == 10) \\\"1\\\";\\n    //     if (index == 11) \\\"1\\\";\\n    //     if (index == 12) \\\"1\\\";\\n    //     if (index == 13) \\\"1\\\";\\n\\n    //     return \\\"\\\"; // Handle the default case\\n    // }\\n    function generateUnit(uint256 tokenId) public returns (string memory){\\n        string memory sentence = storageFacadeManager.getUnitDescriptorStorageFacade().getUnitBasedOnId(tokenId);\\n        bytes memory svg = abi.encodePacked(SVGGenerator.generateSVG(sentence));\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64.encode(svg)\\n            )\\n        );\\n    }\\n    function getTokenURI(uint256 tokenId) public returns (string memory) {\\n        string memory name = string(abi.encodePacked('Discourse Unit #', tokenId.toString()));\\n        string memory description = storageFacadeManager.getUnitStorageFacade().getUnitBasedOnId(tokenId);\\n\\n\\n        string memory imageURL = \\\"ipfs://QmW6XNWUcc6xc28UW5yVcSAsujzidgJ8hR9ML3SbMzbfaM/\\\";\\n        string memory image = string(abi.encodePacked(imageURL1, Strings.toString(tokenId), \\\".png\\\"));\\n\\n        string[] memory traitValues = new string[](TRAIT_TYPES.length);\\n        for (uint256 i = 0; i < TRAIT_TYPES.length; i++) {\\n            traitValues[i] = getTraitValue(i, tokenId);\\n        }\\n        string memory attributes = buildAttributes(TRAIT_TYPES, traitValues);\\n        string memory metadata = encodeMetadata(name, description, image, attributes);\\n        return metadata;\\n    }\\n    // Withdraw ERC20\\n    function withdrawERC20(address tokenAddress, address to, uint256 amount) external onlyOwner {\\n        IERC20(tokenAddress).transfer(to, amount);\\n    }\\n    // Withdraw ERC721\\n    function withdrawERC721(address tokenAddress, address to, uint256 tokenId) external onlyOwner {\\n        IERC721(tokenAddress).safeTransferFrom(address(this), to, tokenId);\\n    }\\n    // Enable withdrawal of ETH\\n    function sendViaCall(address payable _to, uint256 amount) public payable onlyOwner{\\n        require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n        // Call returns a boolean value indicating success or failure.\\n        // This is the current recommended method to use.\\n        (bool sent, ) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n    \\n}\"\r\n    },\r\n    \"contracts/reservations/ReservationStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // OZ: Ownable\\n\\ncontract ReservationStorage is Ownable{\\n    \\n    struct Data {\\n        bytes32 reservationId;\\n        uint256 tokenId;\\n        bool isUsed;\\n    }\\n    event ReservationUsed(bytes32 reservationId);\\n    address public authorizedContract; \\n\\n    Data[] public dataArray;\\n    mapping(uint256 => Data) public dataMapping;\\n\\n    constructor() {\\n        authorizedContract = _msgSender();\\n    }\\n    modifier onlyAuthorizedContract() {\\n        require(msg.sender == authorizedContract, \\\"Caller is not the authorized contract\\\");\\n        _;\\n    }\\n    function setAuthorizedContract(address _authorizedContract) external onlyOwner {\\n        authorizedContract = _authorizedContract;\\n    }\\n    function addData(bytes32 _reservationId, uint256 _tokenId) public {\\n        Data memory newData = Data({\\n            reservationId: _reservationId,\\n            tokenId: _tokenId,\\n            isUsed: false\\n        });\\n        dataArray.push(newData);\\n    }\\n    function addData(bytes32[] memory _reservationIds, uint256[] memory _tokenIds) public onlyOwner {\\n    require(_reservationIds.length == _tokenIds.length, \\\"Mismatched arrays length\\\");\\n        for (uint256 i = 0; i < _reservationIds.length; i++) {\\n            Data memory newData = Data({\\n                reservationId: _reservationIds[i],\\n                tokenId: _tokenIds[i],\\n                isUsed: false\\n            });\\n            dataArray.push(newData);\\n            // Update the mapping with the same data\\n            dataMapping[_tokenIds[i]] = newData;\\n        }\\n    }\\n    function updateDataByIndex(uint256 index, bytes32 _newReservationId, uint256 _newTokenId) public onlyOwner {\\n        require(index < dataArray.length, \\\"reservation.updateDataByIndex: Index out of bounds\\\");\\n        dataArray[index].reservationId = _newReservationId;\\n        dataArray[index].tokenId = _newTokenId;\\n    }\\n\\n    function getData(uint256 index) public view returns (bytes32, uint256, bool) {\\n        require(index < dataArray.length, \\\"reservation.getData: Index out of bounds\\\");\\n        Data memory dataItem = dataArray[index];\\n        return (dataItem.reservationId, dataItem.tokenId, dataItem.isUsed);\\n    }\\n    function isReserved(uint256 _tokenId) public view returns (bool) {\\n        Data memory dataItem = dataMapping[_tokenId];\\n        if(dataItem.tokenId == 0){\\n            return false;\\n        }\\n        return !dataItem.isUsed;\\n    }\\n    function isValidReservation(string memory data, uint256 _tokenId) public view returns (bool) {\\n        bytes32 hashedData = keccak256(abi.encodePacked(data));\\n        Data storage dataItem = dataMapping[_tokenId]; // Use storage to modify the original data\\n\\n        if(dataItem.tokenId == 0){\\n            return false;\\n        }\\n        if (hashedData == dataItem.reservationId && !dataItem.isUsed) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    function setIsUsed(uint256 _tokenId) public onlyAuthorizedContract {\\n        Data storage dataItem = dataMapping[_tokenId];\\n        require(dataItem.tokenId != 0, \\\"reservation.setIsUsed: Token ID not found\\\");\\n        dataItem.isUsed = true;\\n        emit ReservationUsed(dataItem.reservationId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/IStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// https://soliditytips.com/articles/solidity-interface-interact-with-other-contracts/\\ninterface IStorage {\\n    function getById(uint256 id) external returns (string memory unit);\\n    // Add more function signatures as needed.\\n}\"\r\n    },\r\n    \"contracts/StorageFacadeManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/// ============ Imports ============\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // OZ: Ownable\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; // OZ: IERC20\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // OZ: IERC721;\\nimport { ChapterStorageFacade } from \\\"./facades/ChapterStorageFacade.sol\\\";\\nimport { FigureStorageFacade } from \\\"./facades/FigureStorageFacade.sol\\\";\\n// import { FootnoteStorageFacade } from \\\"./facades/FootnoteStorageFacade.sol\\\";\\nimport { HeadingStorageFacade } from \\\"./facades/HeadingStorageFacade.sol\\\";\\nimport { LengthStorageFacade } from \\\"./facades/LengthStorageFacade.sol\\\";\\nimport { NetwordedAStorageFacade } from \\\"./facades/NetwordedAStorageFacade.sol\\\";\\nimport { NetwordedBStorageFacade } from \\\"./facades/NetwordedBStorageFacade.sol\\\";\\nimport { NumFootnotesStorageFacade } from \\\"./facades/NumFootnotesStorageFacade.sol\\\";\\nimport { IncludesFigureStorageFacade } from \\\"./facades/IncludesFigureStorageFacade.sol\\\";\\nimport { SectionStorageFacade } from \\\"./facades/SectionStorageFacade.sol\\\";\\nimport { UnitStorageFacade } from \\\"./facades/UnitStorageFacade.sol\\\";\\nimport { UnitDescriptorStorageFacade } from \\\"./facades/UnitDescriptorStorageFacade.sol\\\";\\nimport { XStorageFacade } from \\\"./facades/XStorageFacade.sol\\\";\\nimport { YStorageFacade } from \\\"./facades/YStorageFacade.sol\\\";\\nimport { ZStorageFacade } from \\\"./facades/ZStorageFacade.sol\\\";\\n\\ncontract StorageFacadeManager is Ownable{\\n    address []storageFacades;\\n    // FootnoteStorageFacade foonoteStorageFacade;\\n    FigureStorageFacade  figureStorageFacade;\\n    ChapterStorageFacade chapterStorageFacade;\\n    SectionStorageFacade sectionStorageFacade;\\n    HeadingStorageFacade headingStorageFacade;\\n    NumFootnotesStorageFacade numFootnotesStorageFacade;\\n    IncludesFigureStorageFacade includesFigureStorageFacade;\\n    LengthStorageFacade lengthStorageFacade;\\n    XStorageFacade xStorageFacade;\\n    YStorageFacade yStorageFacade;\\n    ZStorageFacade zStorageFacade;\\n    UnitDescriptorStorageFacade unitDescriptorStorageFacade;\\n    NetwordedAStorageFacade networdedAStorageFacade;\\n    NetwordedBStorageFacade networdedBStorageFacade;\\n    UnitStorageFacade unitStorageFacade;\\n\\n    // Unit ( Not a metadata )\\n    // Metadata:\\n    // - Footnote \\n    // - Figure\\n    // - Chapter\\n    // - Section\\n    // - Heading\\n    // - NumFootnotes\\n    // - Inlcudes figure\\n    // - Length\\n    // - X\\n    // - Y\\n    // - Z\\n    // - Unit descriptor: Nodewords\\n    // - NetwordedA\\n    // - Networded B\\n\\n    constructor(address[] memory _storageFacades){\\n        storageFacades = _storageFacades;\\n        // foonoteStorageFacade = FootnoteStorageFacade(storageFacades[0]); \\n        figureStorageFacade = FigureStorageFacade(storageFacades[0]); \\n        chapterStorageFacade = ChapterStorageFacade(storageFacades[1]); \\n        sectionStorageFacade = SectionStorageFacade(storageFacades[2]); \\n        headingStorageFacade = HeadingStorageFacade(storageFacades[3]); \\n        numFootnotesStorageFacade = NumFootnotesStorageFacade(storageFacades[4]); \\n        includesFigureStorageFacade = IncludesFigureStorageFacade(storageFacades[5]); \\n        lengthStorageFacade = LengthStorageFacade(storageFacades[6]); \\n        xStorageFacade = XStorageFacade(storageFacades[7]); \\n        yStorageFacade = YStorageFacade(storageFacades[8]); \\n        zStorageFacade = ZStorageFacade(storageFacades[9]); \\n        unitDescriptorStorageFacade = UnitDescriptorStorageFacade(storageFacades[10]);\\n        networdedAStorageFacade = NetwordedAStorageFacade(storageFacades[11]); \\n        networdedBStorageFacade = NetwordedBStorageFacade(storageFacades[12]); \\n        unitStorageFacade = UnitStorageFacade(storageFacades[13]);\\n    }\\n    // Getter for the entire array\\n    function getStorageFacades() external view returns (address[] memory) {\\n        return storageFacades;\\n    }\\n\\n    // Getter for a specific index in the array\\n    function getStorageFacadeAt(uint256 index) external view returns (address) {\\n        require(index < storageFacades.length, \\\"Index out of bounds\\\");\\n        return storageFacades[index];\\n    }\\n\\n    // Setter for the entire array\\n    function setStorageFacades(address[] memory _storageFacades) external onlyOwner {\\n        storageFacades = _storageFacades;\\n    }\\n\\n    // Setter to update a specific index in the array\\n    function setStorageFacadeAt(uint256 index, address _storageFacade) external onlyOwner {\\n        require(index < storageFacades.length, \\\"Index out of bounds\\\");\\n        storageFacades[index] = _storageFacade;\\n    }\\n\\n    // Function to add a new address to the array\\n    function addStorageFacade(address _storageFacade) external onlyOwner {\\n        storageFacades.push(_storageFacade);\\n    }\\n\\n    // Function to remove the last address from the array\\n    function removeLastStorageFacade() external onlyOwner {\\n        require(storageFacades.length > 0, \\\"No items to remove\\\");\\n        storageFacades.pop();\\n    }\\n    // Getters\\n    // function getFootnoteStorageFacade() external view returns (FootnoteStorageFacade) {\\n    //     return foonoteStorageFacade;\\n    // }\\n    function getFigureStorageFacade() external view returns (FigureStorageFacade) {\\n        return figureStorageFacade;\\n    }\\n\\n    function getChapterStorageFacade() external view returns (ChapterStorageFacade) {\\n        return chapterStorageFacade;\\n    }\\n\\n    function getSectionStorageFacade() external view returns (SectionStorageFacade) {\\n        return sectionStorageFacade;\\n    }\\n\\n    function getHeadingStorageFacade() external view returns (HeadingStorageFacade) {\\n        return headingStorageFacade;\\n    }\\n\\n    function getNumFootnotesStorageFacade() external view returns (NumFootnotesStorageFacade) {\\n        return numFootnotesStorageFacade;\\n    }\\n\\n    function getIncludesFigureStorageFacade() external view returns (IncludesFigureStorageFacade) {\\n        return includesFigureStorageFacade;\\n    }\\n\\n    function getLengthStorageFacade() external view returns (LengthStorageFacade) {\\n        return lengthStorageFacade;\\n    }\\n\\n    function getXStorageFacade() external view returns (XStorageFacade) {\\n        return xStorageFacade;\\n    }\\n\\n    function getYStorageFacade() external view returns (YStorageFacade) {\\n        return yStorageFacade;\\n    }\\n\\n    function getZStorageFacade() external view returns (ZStorageFacade) {\\n        return zStorageFacade;\\n    }\\n\\n    function getUnitDescriptorStorageFacade() external view returns (UnitDescriptorStorageFacade) {\\n        return unitDescriptorStorageFacade;\\n    }\\n\\n    function getNetwordedAStorageFacade() external view returns (NetwordedAStorageFacade) {\\n        return networdedAStorageFacade;\\n    }\\n\\n    function getNetwordedBStorageFacade() external view returns (NetwordedBStorageFacade) {\\n        return networdedBStorageFacade;\\n    }\\n\\n    function getUnitStorageFacade() external view returns (UnitStorageFacade) {\\n        return unitStorageFacade;\\n    }\\n    // Setters\\n\\n    function setFigureStorageFacade(address _figureStorageFacade) external onlyOwner {\\n        figureStorageFacade = FigureStorageFacade(_figureStorageFacade);\\n    }\\n\\n    function setChapterStorageFacade(address _chapterStorageFacade) external onlyOwner {\\n        chapterStorageFacade = ChapterStorageFacade(_chapterStorageFacade);\\n    }\\n\\n    function setSectionStorageFacade(address _sectionStorageFacade) external onlyOwner {\\n        sectionStorageFacade = SectionStorageFacade(_sectionStorageFacade);\\n    }\\n\\n    function setHeadingStorageFacade(address _headingStorageFacade) external onlyOwner {\\n        headingStorageFacade = HeadingStorageFacade(_headingStorageFacade);\\n    }\\n\\n    function setNumFootnotesStorageFacade(address _numFootnotesStorageFacade) external onlyOwner {\\n        numFootnotesStorageFacade = NumFootnotesStorageFacade(_numFootnotesStorageFacade);\\n    }\\n\\n    function setIncludesFigureStorageFacade(address _includesFigureStorageFacade) external onlyOwner {\\n        includesFigureStorageFacade = IncludesFigureStorageFacade(_includesFigureStorageFacade);\\n    }\\n\\n    function setLengthStorageFacade(address _lengthStorageFacade) external onlyOwner {\\n        lengthStorageFacade = LengthStorageFacade(_lengthStorageFacade);\\n    }\\n\\n    function setXStorageFacade(address _xStorageFacade) external onlyOwner {\\n        xStorageFacade = XStorageFacade(_xStorageFacade);\\n    }\\n\\n    function setYStorageFacade(address _yStorageFacade) external onlyOwner {\\n        yStorageFacade = YStorageFacade(_yStorageFacade);\\n    }\\n\\n    function setZStorageFacade(address _zStorageFacade) external onlyOwner {\\n        zStorageFacade = ZStorageFacade(_zStorageFacade);\\n    }\\n\\n    function setUnitDescriptorStorageFacade(address _unitDescriptorStorageFacade) external onlyOwner {\\n        unitDescriptorStorageFacade = UnitDescriptorStorageFacade(_unitDescriptorStorageFacade);\\n    }\\n\\n    function setNetwordedAStorageFacade(address _networdedAStorageFacade) external onlyOwner {\\n        networdedAStorageFacade = NetwordedAStorageFacade(_networdedAStorageFacade);\\n    }\\n\\n    function setNetwordedBStorageFacade(address _networdedBStorageFacade) external onlyOwner {\\n        networdedBStorageFacade = NetwordedBStorageFacade(_networdedBStorageFacade);\\n    }\\n\\n    function setUnitStorageFacade(address _unitStorageFacade) external onlyOwner {\\n        unitStorageFacade = UnitStorageFacade(_unitStorageFacade);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftMetadata\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reservationContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitationsContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_alreadyMintedTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"}],\"name\":\"changeAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlreadyMintedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImperialCoreBookPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImperialCorePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvitationsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeripheryBookPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeripheryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPriceForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservationsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnerOnlyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenPrice\",\"type\":\"uint256\"}],\"name\":\"mintById\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"invitationId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chosenPrice\",\"type\":\"uint256\"}],\"name\":\"mintByInvitation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reservationId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chosenPrice\",\"type\":\"uint256\"}],\"name\":\"mintByReservation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftMetadata\",\"outputs\":[{\"internalType\":\"contract NFTMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peripheryPrice\",\"type\":\"uint256\"}],\"name\":\"setImperialCoreBookPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peripheryPrice\",\"type\":\"uint256\"}],\"name\":\"setImperialCorePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setInvitationsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peripheryBookPrice\",\"type\":\"uint256\"}],\"name\":\"setPeripheryBookPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peripheryPrice\",\"type\":\"uint256\"}],\"name\":\"setPeripheryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setReservationsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFT", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004c19e46d0deefc210ef902c4478e3c3795a989a7000000000000000000000000915ae684ab044bf45fa00f979e631cea3bc714ff0000000000000000000000001e3d694528aa4005f00ee9af218fcf6ee091aad6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}