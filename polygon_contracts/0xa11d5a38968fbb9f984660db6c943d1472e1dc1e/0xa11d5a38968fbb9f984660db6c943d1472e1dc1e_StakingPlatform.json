{"SourceCode": "// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n// SPDX-License-Identifier: MIT\r\n// File contracts/staking/IStakingPlatform.sol\r\n\r\npragma solidity =0.8.19;\r\n\r\n/// @author Adam Boudjemaa\r\n/// @title Interface Staking Platform with fixed APY and lockup\r\ninterface IStakingPlatform {\r\n    /**\r\n     * @notice function that start the staking\r\n     * @dev set `startPeriod` to the current current `block.timestamp`\r\n     * set `lockupPeriod` which is `block.timestamp` + `lockupDuration`\r\n     * and `endPeriod` which is `startPeriod` + `stakingDuration`\r\n     */\r\n    function startStaking() external;\r\n\r\n    /**\r\n     * @notice function that allows a user to deposit tokens\r\n     * @dev user must first approve the amount to deposit before calling this function,\r\n     * cannot exceed the `maxAmountStaked`\r\n     * @param amount, the amount to be deposited\r\n     * @dev `endPeriod` to equal 0 (Staking didn't started yet),\r\n     * or `endPeriod` more than current `block.timestamp` (staking not finished yet)\r\n     * @dev `totalStaked + amount` must be less than `stakingMax`\r\n     * @dev that the amount deposited should greater than 0\r\n     */\r\n    function deposit(uint amount) external;\r\n\r\n    /**\r\n     * @notice function that allows a user to withdraw its initial deposit\r\n     * @dev must be called only when `block.timestamp` >= `endPeriod`\r\n     * @dev `block.timestamp` higher than `lockupPeriod` (lockupPeriod finished)\r\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\r\n     * if rewards to claim\r\n     */\r\n    function withdrawAll() external;\r\n\r\n    /**\r\n     * @notice function that allows a user to withdraw its initial deposit\r\n     * @param amount, amount to withdraw\r\n     * @dev `block.timestamp` must be higher than `lockupPeriod` (lockupPeriod finished)\r\n     * @dev `amount` must be higher than `0`\r\n     * @dev `amount` must be lower or equal to the amount staked\r\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\r\n     * if rewards to claim\r\n     */\r\n    function withdraw(uint amount) external;\r\n\r\n    /**\r\n     * @notice function that returns the amount of total Staked tokens\r\n     * for a specific user\r\n     * @param stakeHolder, address of the user to check\r\n     * @return uint amount of the total deposited Tokens by the caller\r\n     */\r\n    function amountStaked(address stakeHolder) external view returns (uint);\r\n\r\n    /**\r\n     * @notice function that returns the amount of total Staked tokens\r\n     * on the smart contract\r\n     * @return uint amount of the total deposited Tokens\r\n     */\r\n    function totalDeposited() external view returns (uint);\r\n\r\n    /**\r\n     * @notice function that returns the amount of pending rewards\r\n     * that can be claimed by the user\r\n     * @param stakeHolder, address of the user to be checked\r\n     * @return uint amount of claimable rewards\r\n     */\r\n    function rewardOf(address stakeHolder) external view returns (uint);\r\n\r\n    /**\r\n     * @notice function that claims pending rewards\r\n     * @dev transfer the pending rewards to the `msg.sender`\r\n     */\r\n    function claimRewards() external;\r\n\r\n    /**\r\n     * @dev Emitted when `amount` tokens are deposited into\r\n     * staking platform\r\n     */\r\n    event Deposit(address indexed owner, uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when user withdraw deposited `amount`\r\n     */\r\n    event Withdraw(address indexed owner, uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when `stakeHolder` claim rewards\r\n     */\r\n    event Claim(address indexed stakeHolder, uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when staking has started\r\n     */\r\n    event StartStaking(uint startPeriod, uint lockupPeriod, uint endingPeriod);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/staking/StakingPlatform.sol\r\n\r\npragma solidity =0.8.19;\r\n\r\n\r\n\r\n\r\n/// @author RetreebInc\r\n/// @title Staking Platform with fixed APY and lockup\r\ncontract StakingPlatform is IStakingPlatform, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable token;\r\n\r\n    uint8 public immutable fixedAPY;\r\n\r\n    uint public immutable stakingDuration;\r\n    uint public immutable lockupDuration;\r\n    uint public immutable stakingMax;\r\n\r\n    uint public startPeriod;\r\n    uint public lockupPeriod;\r\n    uint public endPeriod;\r\n\r\n    uint private _totalStaked;\r\n    uint internal _precision = 1E6;\r\n\r\n    mapping(address => uint) public staked;\r\n    mapping(address => uint) private _rewardsToClaim;\r\n    mapping(address => uint) private _userStartTime;\r\n\r\n    /**\r\n     * @notice constructor contains all the parameters of the staking platform\r\n     * @dev all parameters are immutable\r\n     */\r\n    constructor(\r\n        address _token,\r\n        uint8 _fixedAPY,\r\n        uint _durationInDays,\r\n        uint _lockDurationInDays,\r\n        uint _maxAmountStaked\r\n    ) {\r\n        stakingDuration = _durationInDays * 1 days;\r\n        lockupDuration = _lockDurationInDays * 1 days;\r\n        token = IERC20(_token);\r\n        fixedAPY = _fixedAPY;\r\n        stakingMax = _maxAmountStaked;\r\n    }\r\n\r\n    /**\r\n     * @notice function that start the staking\r\n     * @dev set `startPeriod` to the current current `block.timestamp`\r\n     * set `lockupPeriod` which is `block.timestamp` + `lockupDuration`\r\n     * and `endPeriod` which is `startPeriod` + `stakingDuration`\r\n     */\r\n    function startStaking() external override onlyOwner {\r\n        require(startPeriod == 0, \"Staking has already started\");\r\n        startPeriod = block.timestamp;\r\n        lockupPeriod = block.timestamp + lockupDuration;\r\n        endPeriod = block.timestamp + stakingDuration;\r\n        emit StartStaking(startPeriod, lockupDuration, endPeriod);\r\n    }\r\n\r\n    /**\r\n     * @notice function that allows a user to deposit tokens\r\n     * @dev user must first approve the amount to deposit before calling this function,\r\n     * cannot exceed the `maxAmountStaked`\r\n     * @param amount, the amount to be deposited\r\n     * @dev `endPeriod` to equal 0 (Staking didn't started yet),\r\n     * or `endPeriod` more than current `block.timestamp` (staking not finished yet)\r\n     * @dev `totalStaked + amount` must be less than `stakingMax`\r\n     * @dev that the amount deposited should greater than 0\r\n     */\r\n    function deposit(uint amount) external override {\r\n        require(\r\n            endPeriod == 0 || endPeriod > block.timestamp,\r\n            \"Staking period ended\"\r\n        );\r\n        require(\r\n            _totalStaked + amount <= stakingMax,\r\n            \"Amount staked exceeds MaxStake\"\r\n        );\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        if (_userStartTime[_msgSender()] == 0) {\r\n            _userStartTime[_msgSender()] = block.timestamp;\r\n        }\r\n\r\n        _updateRewards();\r\n\r\n        staked[_msgSender()] += amount;\r\n        _totalStaked += amount;\r\n        token.safeTransferFrom(_msgSender(), address(this), amount);\r\n        emit Deposit(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice function that allows a user to withdraw its initial deposit\r\n     * @param amount, amount to withdraw\r\n     * @dev `block.timestamp` must be higher than `lockupPeriod` (lockupPeriod finished)\r\n     * @dev `amount` must be higher than `0`\r\n     * @dev `amount` must be lower or equal to the amount staked\r\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\r\n     * if rewards to claim\r\n     */\r\n    function withdraw(uint amount) external override {\r\n        require(\r\n            block.timestamp >= lockupPeriod,\r\n            \"No withdraw until lockup ends\"\r\n        );\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            amount <= staked[_msgSender()],\r\n            \"Amount higher than stakedAmount\"\r\n        );\r\n\r\n        _updateRewards();\r\n        if (_rewardsToClaim[_msgSender()] > 0) {\r\n            _claimRewards();\r\n        }\r\n        _totalStaked -= amount;\r\n        staked[_msgSender()] -= amount;\r\n        token.safeTransfer(_msgSender(), amount);\r\n\r\n        emit Withdraw(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice function that allows a user to withdraw its initial deposit\r\n     * @dev must be called only when `block.timestamp` >= `lockupPeriod`\r\n     * @dev `block.timestamp` higher than `lockupPeriod` (lockupPeriod finished)\r\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\r\n     * if rewards to claim\r\n     */\r\n    function withdrawAll() external override {\r\n        require(\r\n            block.timestamp >= lockupPeriod,\r\n            \"No withdraw until lockup ends\"\r\n        );\r\n\r\n        _updateRewards();\r\n        if (_rewardsToClaim[_msgSender()] > 0) {\r\n            _claimRewards();\r\n        }\r\n\r\n        _userStartTime[_msgSender()] = 0;\r\n        _totalStaked -= staked[_msgSender()];\r\n        uint stakedBalance = staked[_msgSender()];\r\n        staked[_msgSender()] = 0;\r\n        token.safeTransfer(_msgSender(), stakedBalance);\r\n\r\n        emit Withdraw(_msgSender(), stakedBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice claim all remaining balance on the contract\r\n     * Residual balance is all the remaining tokens that have not been distributed\r\n     * (e.g, in case the number of stakeholders is not sufficient)\r\n     * @dev Can only be called one year after the end of the staking period\r\n     * Cannot claim initial stakeholders deposit\r\n     */\r\n    function withdrawResidualBalance() external onlyOwner {\r\n        require(\r\n            block.timestamp >= endPeriod + (120 * 1 days),\r\n            \"Withdraw 120 days after endPeriod\"\r\n        );\r\n\r\n        uint balance = token.balanceOf(address(this));\r\n        uint residualBalance = balance - (_totalStaked);\r\n        require(residualBalance > 0, \"No residual Balance to withdraw\");\r\n        token.safeTransfer(owner(), residualBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice function that returns the amount of total Staked tokens\r\n     * for a specific user\r\n     * @param stakeHolder, address of the user to check\r\n     * @return uint amount of the total deposited Tokens by the caller\r\n     */\r\n    function amountStaked(address stakeHolder)\r\n        external\r\n        view\r\n        override\r\n        returns (uint)\r\n    {\r\n        return staked[stakeHolder];\r\n    }\r\n\r\n    /**\r\n     * @notice function that returns the amount of total Staked tokens\r\n     * on the smart contract\r\n     * @return uint amount of the total deposited Tokens\r\n     */\r\n    function totalDeposited() external view override returns (uint) {\r\n        return _totalStaked;\r\n    }\r\n\r\n    /**\r\n     * @notice function that returns the amount of pending rewards\r\n     * that can be claimed by the user\r\n     * @param stakeHolder, address of the user to be checked\r\n     * @return uint amount of claimable rewards\r\n     */\r\n    function rewardOf(address stakeHolder)\r\n        external\r\n        view\r\n        override\r\n        returns (uint)\r\n    {\r\n        return _calculateRewards(stakeHolder);\r\n    }\r\n\r\n    /**\r\n     * @notice function that claims pending rewards\r\n     * @dev transfer the pending rewards to the `msg.sender`\r\n     */\r\n    function claimRewards() external override {\r\n        _claimRewards();\r\n    }\r\n\r\n    /**\r\n     * @notice calculate rewards based on the `fixedAPY`, `_percentageTimeRemaining()`\r\n     * @dev the higher is the precision and the more the time remaining will be precise\r\n     * @param stakeHolder, address of the user to be checked\r\n     * @return uint amount of claimable tokens of the specified address\r\n     */\r\n    function _calculateRewards(address stakeHolder)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        if (startPeriod == 0 || staked[stakeHolder] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return\r\n            (((staked[stakeHolder] * fixedAPY) *\r\n                _percentageTimeRemaining(stakeHolder)) / (_precision * 100)) +\r\n            _rewardsToClaim[stakeHolder];\r\n    }\r\n\r\n    /**\r\n     * @notice function that returns the remaining time in seconds of the staking period\r\n     * @dev the higher is the precision and the more the time remaining will be precise\r\n     * @param stakeHolder, address of the user to be checked\r\n     * @return uint percentage of time remaining * precision\r\n     */\r\n    function _percentageTimeRemaining(address stakeHolder)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        bool early = startPeriod > _userStartTime[stakeHolder];\r\n        uint startTime;\r\n        if (endPeriod > block.timestamp) {\r\n            startTime = early ? startPeriod : _userStartTime[stakeHolder];\r\n            uint timeRemaining = stakingDuration -\r\n                (block.timestamp - startTime);\r\n            return\r\n                (_precision * (stakingDuration - timeRemaining)) /\r\n                stakingDuration;\r\n        }\r\n        startTime = early\r\n            ? 0\r\n            : stakingDuration - (endPeriod - _userStartTime[stakeHolder]);\r\n        return (_precision * (stakingDuration - startTime)) / stakingDuration;\r\n    }\r\n\r\n    /**\r\n     * @notice internal function that claims pending rewards\r\n     * @dev transfer the pending rewards to the user address\r\n     */\r\n    function _claimRewards() private {\r\n        _updateRewards();\r\n\r\n        uint rewardsToClaim = _rewardsToClaim[_msgSender()];\r\n        require(rewardsToClaim > 0, \"Nothing to claim\");\r\n\r\n        _rewardsToClaim[_msgSender()] = 0;\r\n        token.safeTransfer(_msgSender(), rewardsToClaim);\r\n        emit Claim(_msgSender(), rewardsToClaim);\r\n    }\r\n\r\n    /**\r\n     * @notice function that update pending rewards\r\n     * and shift them to rewardsToClaim\r\n     * @dev update rewards claimable\r\n     * and check the time spent since deposit for the `msg.sender`\r\n     */\r\n    function _updateRewards() private {\r\n        _rewardsToClaim[_msgSender()] = _calculateRewards(_msgSender());\r\n        _userStartTime[_msgSender()] = (block.timestamp >= endPeriod)\r\n            ? endPeriod\r\n            : block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_fixedAPY\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDurationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingPeriod\",\"type\":\"uint256\"}],\"name\":\"StartStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedAPY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawResidualBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPlatform", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000692ac1e363ae34b6b489148152b12e2785a3d8d6000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000b400000000000000000000000000000000000000000000000000000000000000b40000000000000000000000000000000000000000000069e10de76676d0800000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa25d9d48ab70d643bd7376cab4c2e183b53d0fedd57bb6dd59dea3fab66acb1"}