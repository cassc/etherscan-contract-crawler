{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IOwnableToken {\r\n    function getOwner() external view returns (address);\r\n}\r\n\r\ninterface IBurnableToken {\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IYieldFarm {\r\n    function depositRewards(uint256 amount) external;\r\n}\r\n\r\ncontract BuyReceiver {\r\n\r\n    // STS token\r\n    address public token;\r\n\r\n    // Fee receivers\r\n    address public singleStake = 0xc6B2C8783Cb12436FA89253A746c5B92BfF43F6B;\r\n    address public yield1 = 0xaE6324Ae020436be7d652e0e41316aA7483007E4;\r\n    address public yield2 = 0xeE491003C3A3F0D6f69f9469C3ca7d157c27dFcc;\r\n    address public treasury = 0xB81d870BA59B03f1Bec8FDFF28dab09D7fEf7A6b;\r\n\r\n    // Fee breakdowns\r\n    uint256 public treasuryPercent = 40;\r\n    uint256 public stakingPercent = 10;\r\n    uint256 public yield1FarmPercent = 20;\r\n    uint256 public yield2FarmPercent = 20;\r\n\r\n    address private immutable DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private immutable ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    // Minimum to trigger\r\n    uint256 public minimumToTrigger = 100_000 * 10**18;\r\n\r\n    // Events\r\n    event Trigger();\r\n    event SetMinimumtoTrigger(\r\n        uint256 minimum\r\n    );\r\n    event SetFees(\r\n        uint256 treasury,\r\n        uint256 staking,\r\n        uint256 yield\r\n    );\r\n    event SetAddresses(\r\n        address treasury, \r\n        address staking, \r\n        address yield1, \r\n        address yield2\r\n    );\r\n    event SetPercentage(\r\n        uint256 treasury_,\r\n        uint256 staking_,\r\n        uint256 yieldFarm1_,\r\n        uint256 yieldFarm2_\r\n    );\r\n    event AdminSet(\r\n        address admin,\r\n        bool isAdmin\r\n    );\r\n\r\n    mapping(address => bool) public admins;\r\n\r\n    modifier onlyAdmins() {\r\n        require(admins[msg.sender], 'Caller is not an admin');\r\n        _;\r\n    }\r\n\r\n    constructor(address token_) {\r\n        require(goodAddress(token_));\r\n        // initialize\r\n        token = token_;\r\n        admins[msg.sender] = true;\r\n    }\r\n\r\n    function setAdmin(\r\n        address _admin,\r\n        bool _isAdmin\r\n    ) \r\n    external \r\n    onlyAdmins \r\n    {\r\n        admins[_admin] = _isAdmin;\r\n        emit AdminSet(_admin, _isAdmin);\r\n    }\r\n\r\n    function trigger() external {\r\n        // STS Balance In Contract\r\n        uint balance = IERC20(token).balanceOf(address(this));\r\n\r\n        if (balance < minimumToTrigger) {\r\n            return;\r\n        }\r\n\r\n        // fraction out tokens\r\n        uint256 partStaking = balance * stakingPercent / 100;\r\n        uint256 partTreasury = balance * treasuryPercent / 100;\r\n        uint256 partYield1 = balance * yield1FarmPercent / 100;\r\n        uint256 partYield2 = balance * yield2FarmPercent / 100;\r\n        uint256 partBurn = balance - ( partStaking + partTreasury + partYield1 + partYield2 );\r\n\r\n        // send to destinations\r\n        if(partTreasury > 0) {\r\n            IERC20(token).transfer(treasury, partTreasury);\r\n        }\r\n\r\n       // Stake rewards in farms\r\n        if (partYield1 > 0) {\r\n            IERC20(token).approve(yield1, partYield1);\r\n            IYieldFarm(yield1).depositRewards(partYield1);\r\n        }\r\n\r\n        if (partYield2 > 0) {\r\n            IERC20(token).approve(yield2, partYield2);\r\n            IYieldFarm(yield2).depositRewards(partYield2);\r\n        }\r\n\r\n        if (partStaking > 0) {\r\n            // Stake rewards in staking\r\n            IERC20(token).approve(singleStake, partStaking);\r\n            IYieldFarm(singleStake).depositRewards(partStaking);\r\n        }\r\n\r\n        // if any excess, burn it\r\n        if (partBurn > 0) {\r\n            IBurnableToken(token).burn(partBurn);\r\n        }\r\n        \r\n        emit Trigger();\r\n    }\r\n\r\n    function setPercentages(\r\n        uint treasury_, \r\n        uint staking_, \r\n        uint yieldFarm1_, \r\n        uint yieldFarm2_\r\n        ) \r\n        external \r\n        onlyAdmins \r\n    {\r\n        require(\r\n            treasury_ + staking_ + yieldFarm1_ + yieldFarm2_ <= 100,\r\n            'Percents Too Large'\r\n        );\r\n\r\n        treasuryPercent = treasury_;\r\n        stakingPercent = staking_;\r\n        yield1FarmPercent = yieldFarm1_;\r\n        yield2FarmPercent = yieldFarm2_;\r\n\r\n        emit SetPercentage(treasury_, staking_, yieldFarm1_, yieldFarm2_);\r\n    }\r\n\r\n    function setToken(address token_) external onlyAdmins {\r\n        require(goodAddress(token_) == true, \"Not valid address!\");\r\n        token = token_;\r\n    }\r\n\r\n    function setAddresses(\r\n        address treasury_,\r\n        address staking_,\r\n        address yieldFarm1_,\r\n        address yieldFarm2_\r\n    ) \r\n        external \r\n        onlyAdmins \r\n    {\r\n        require(goodAddress(treasury_) == true, 'Invalid Address!');\r\n        require(goodAddress(staking_) == true, 'Invalid Address!');\r\n        require(goodAddress(yieldFarm1_) == true, 'Invalid Address!');\r\n        require(goodAddress(yieldFarm2_) == true, 'Invalid Address!');\r\n\r\n        treasury = treasury_;\r\n        singleStake = staking_;\r\n        yield1 = yieldFarm1_;\r\n        yield2 = yieldFarm2_;\r\n\r\n        emit SetAddresses(address(treasury_), address(staking_), address(yieldFarm1_),  address(yieldFarm2_));\r\n    }\r\n\r\n    function setMinimumToTrigger(uint newMin) external onlyAdmins {\r\n        require(newMin > 0, 'Cannot trigger with zero tokens');\r\n        minimumToTrigger = newMin;\r\n\r\n        emit SetMinimumtoTrigger(newMin);\r\n    }\r\n    \r\n    function withdrawBNB() external onlyAdmins {\r\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n    \r\n    function withdrawTokens(address _token) external onlyAdmins {\r\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function goodAddress(address _target) internal view returns (bool) {\r\n        if (\r\n            _target == DEAD || \r\n            _target == ZERO\r\n        ) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yield1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yield2\",\"type\":\"address\"}],\"name\":\"SetAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staking\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"SetMinimumtoTrigger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staking_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFarm1_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFarm2_\",\"type\":\"uint256\"}],\"name\":\"SetPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Trigger\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumToTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldFarm1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldFarm2_\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinimumToTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasury_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldFarm1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldFarm2_\",\"type\":\"uint256\"}],\"name\":\"setPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield1FarmPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield2FarmPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BuyReceiver", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fc3559771aa5a0666420f2365cf66139fbf4b37f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1cc49d6fe1b7b1795ee4bae4ae74e9cabe5834a1770a0e429aff43e6707805e0"}