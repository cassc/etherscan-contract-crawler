{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/interfaces/IMatch.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMatch {\r\n    // Events\r\n    event VotedPlayer(address, uint8, uint256);\r\n    event SetWinnerPlayer1();\r\n    event SetWinnerPlayer2();\r\n    event SetPot(uint256, uint256);\r\n    event setWithdrawal(address);\r\n    event Draw();\r\n\r\n    // Functions\r\n    function votePlayer(address, uint8, uint256) external;\r\n\r\n    // Mutators\r\n    function setWinner() external returns (bool);\r\n\r\n    function setPot(bytes memory) external;\r\n\r\n    function setWithdrawalSupporter(address) external;\r\n\r\n    // View functions\r\n    function votesPlayer1() external view returns (uint256);\r\n\r\n    function votesPlayer2() external view returns (uint256);\r\n\r\n    function supporterForPlayer1(address) external view returns (uint256);\r\n\r\n    function supporterForPlayer2(address) external view returns (uint256);\r\n\r\n    function getPlayer1() external view returns (bytes memory);\r\n\r\n    function getPlayer2() external view returns (bytes memory);\r\n\r\n    function getWinner() external view returns (bytes memory);\r\n\r\n    function claimAmount(address) external view returns (bytes memory);\r\n\r\n    function winnerId() external view returns (uint8);\r\n\r\n    function getFinished() external view returns (bool);\r\n\r\n    function getPot() external view returns (bytes memory);\r\n\r\n    function getWithdrawalSupporter(address) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IRound.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IRound {\r\n    event VoteInPlayerMatch(uint256, address, uint256, uint256);\r\n    event RoundEnded();\r\n    event RoundStarted();\r\n    event JackpotUpdated(uint256);\r\n\r\n    // States of the tournament\r\n    enum StateRound {\r\n        Waiting,\r\n        Started,\r\n        Finished\r\n    }\r\n\r\n    // Mutators\r\n    function createMatches() external;\r\n\r\n    function startRound() external;\r\n\r\n    function endRound() external returns (bool);\r\n    \r\n    function addVotes(uint256) external;\r\n\r\n    // View functions\r\n    function matchesEncoded(uint256) external view returns (bytes memory);\r\n\r\n    function validateVote(address _matchAddress) external view;\r\n\r\n    function getStarted() external view returns (bool);\r\n\r\n    function getFinished() external view returns (bool);\r\n\r\n    function getMatchFinished(uint256) external view returns (bool);\r\n\r\n    function getMatch(uint256 _matchId) external view returns (address);\r\n\r\n    function getMatchesQty() external view returns (uint256);\r\n\r\n    function totalVoted() external view returns (uint256);\r\n\r\n    function roundStart() external view returns (uint256);\r\n\r\n    function roundEnd() external view returns (uint256);\r\n\r\n    function applyJackpot(uint256)\r\n        external\r\n        view\r\n        returns (bytes memory, bytes memory);\r\n\r\n    function getWinners() external view returns (uint256[] memory);\r\n\r\n    function getMatchesEncoded() external view returns (bytes[] memory);\r\n\r\n    function getPlayers() external view returns (uint256[] memory);\r\n}\r\n\r\n// File: contracts/interfaces/ITournamentFunctions.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface ITournamentFunctions {\r\n    event TournamentHubChanged(address);\r\n\r\n    function changeTournamentHub(address _contract) external;\r\n\r\n    function startTournament(address _tournament) external returns (bool);\r\n\r\n    function endRound(address _tournament) external returns (bool);\r\n\r\n    function depositNFT(\r\n        address _tournament,\r\n        address _sender,\r\n        uint256 _tokenId,\r\n        address _nftContract\r\n    ) external;\r\n\r\n    function vote(\r\n        address _tournament,\r\n        address _sender,\r\n        uint256 _matchId,\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _amount\r\n    ) external returns (uint256);\r\n\r\n    function claimFromMatch(\r\n        address _tournamentAddress,\r\n        uint256 _matchId,\r\n        uint256 _roundNumber,\r\n        address _tribeToken,\r\n        address _sender\r\n    ) external returns (uint256);\r\n\r\n    function withdrawNFT(\r\n        address _tournamentAddress,\r\n        uint256 _tokenId,\r\n        address _nftContract,\r\n        address _sender\r\n    ) external;\r\n\r\n    function claimAllTokens(\r\n        address _tournamentAddress,\r\n        address _tribeToken,\r\n        address _sender\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/ITournament.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface ITournament {\r\n    // Events\r\n    event RoundStarted(uint256);\r\n    event RoundEnded(uint256);\r\n    event Draw(uint256, uint256);\r\n    event DepositNFTEvent(uint256, address indexed, uint256);\r\n    event StartTournamentEvent();\r\n    event EndTournamentEvent();\r\n    event WithdrawNFTEvent(address indexed, address indexed, uint256);\r\n    event VoteInPlayerMatch(uint256, uint256, uint256);\r\n    event WithdrawEvent(address, uint256);\r\n    event jackpotIncreased(uint256);\r\n    event OwnerOfNftChanged(uint256, uint256);\r\n    event PublicGoodsClaimed();\r\n\r\n    // States of the tournament\r\n    enum StateTournament {\r\n        Waiting,\r\n        Started,\r\n        Finished,\r\n        Canceled\r\n    }\r\n\r\n    enum FeesClaimed {\r\n        NotClaimed,\r\n        Claimed\r\n    }\r\n\r\n    // View\r\n    function lockedNft() external view returns (address);\r\n\r\n    function lockedNftVote() external view returns (bool);\r\n\r\n    function getNftOwner(bytes memory) external view returns (address);\r\n\r\n    function getNftUnlocked(bytes memory) external view returns (bool);\r\n\r\n    function getTournamentStatus() external view returns (uint8);\r\n\r\n    function totalVoted() external view returns (uint256);\r\n\r\n    function getPlayer(uint256) external view returns (bytes memory);\r\n\r\n    function getPlayerId(bytes memory) external view returns (uint256);\r\n\r\n    function numRounds() external view returns (uint8);\r\n\r\n    function roundDuration() external view returns (uint256);\r\n\r\n    function roundInterval() external view returns (uint256);\r\n\r\n    function startTime() external view returns (uint256);\r\n\r\n    function minutesOnDraw() external view returns (uint256);\r\n\r\n    function maxPlayers() external view returns (uint256);\r\n\r\n    function endTime() external view returns (uint256);\r\n\r\n    function fee() external view returns (uint256);\r\n\r\n    function round() external view returns (uint8);\r\n\r\n    function finalJackpot() external view returns (uint256);\r\n\r\n    function jackpot() external view returns (uint256);\r\n\r\n    function publicGoods() external view returns (uint256);\r\n\r\n    function jackpotPerc() external view returns (uint8);\r\n\r\n    function publicGoodsPerc() external view returns (uint8);\r\n\r\n    function getRound(uint256) external view returns (address);\r\n\r\n    function getMatches(uint256) external view returns (bytes[] memory);\r\n\r\n    function getPlayers(uint256) external view returns (uint256[] memory);\r\n\r\n    function totalVotes(uint8) external view returns (uint256);\r\n\r\n    function depositedLength() external view returns (uint256);\r\n\r\n    // Mutators\r\n    function depositNFT(\r\n        uint256,\r\n        address\r\n    ) external returns (uint256, address, uint256);\r\n\r\n    function addNFT(bytes memory _encodedNFT, address _sender) external;\r\n\r\n    function changeNftOwner(uint256, uint256) external;\r\n\r\n    function claimNFT(address, address, uint256) external;\r\n\r\n    function vote(\r\n        uint256,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external returns (uint256);\r\n\r\n    function increaseJackpot(uint256) external returns (uint256);\r\n\r\n    function claimTokens(address, uint256) external;\r\n\r\n    function claimPublicGoods() external;\r\n\r\n    function startTournament() external;\r\n\r\n    function cancelTournament() external;\r\n\r\n    function setDraw() external;\r\n\r\n    function setVariables(uint256, uint256, uint256) external;\r\n\r\n    function unlockNFT(address _lastMatch) external;\r\n\r\n    function setStartTime(uint256 _time) external;\r\n\r\n    function setEndTime(uint256) external;\r\n\r\n    function addRound(address) external;\r\n\r\n    function increaseRound() external;\r\n\r\n    function startRound() external;\r\n\r\n    function endRound() external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ITournamentHub.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface ITournamentHub {\r\n    event ContractAdded(address);\r\n    event TournamentGeneratorChanged(address);\r\n    event TournamentGeneratorLockedChanged(address);\r\n    event RoundGeneratorChanged(address);\r\n    event MatchGeneratorChanged(address);\r\n    event TournamentFunctionsChanged(address);\r\n    event OnGoingTournamentAdded(address);\r\n    event OnGoingTournamentRemoved(address);\r\n    event TokenChanged(address);\r\n    event PublicGoodsWalletChanged(address);\r\n    event FeeWalletWalletChanged(address);\r\n    event JackpotWalletWalletChanged(address);\r\n    event AllNftClaimed(address);\r\n    event AllTokensClaimed(address);\r\n    event WithdrawNFTEvent(address indexed, address indexed, uint256);\r\n    event WithdrawEvent(address, uint256);\r\n    event BlacklistStatusChanged(address indexed, bool);\r\n    event CheckStatusChanged(address indexed, bool);\r\n    event DataFeedChanged(address indexed);\r\n\r\n    //View\r\n    function blacklistedNfts(address _address) external view returns (bool);\r\n\r\n    function checkedNfts(address _address) external view returns (bool);\r\n\r\n    function checkProject(address) external view returns (bool);\r\n\r\n    function checkAdmin(address) external view returns (bool);\r\n\r\n    function roundGenerator() external view returns (address);\r\n\r\n    function matchGenerator() external view returns (address);\r\n\r\n    function tournamentGenerator() external view returns (address);\r\n    \r\n    function tournamentGeneratorLocked() external view returns (address);\r\n\r\n    function tournamentFunctions() external view returns (address);\r\n\r\n    function publicGoodsWallet() external view returns (address);\r\n\r\n    function feeWallet() external view returns (address);\r\n\r\n    function jackpotWallet() external view returns (address);\r\n\r\n    function tribeXToken() external view returns (address);\r\n\r\n    function getOngoingSize() external view returns (uint256);\r\n\r\n    function tournamentVariables(address) external view returns (bytes memory);\r\n\r\n    function getTournamentJackpot(\r\n        address _tournamentAddress\r\n    ) external view returns (uint256);\r\n\r\n    function jackpotVariables(\r\n        address _tournamentAddress\r\n    ) external view returns (bytes memory);\r\n\r\n    function roundMatches(\r\n        address _tournamentAddress\r\n    ) external view returns (bytes[6] memory);\r\n\r\n    //Mutators\r\n    function setBlacklistStatus(address, bool) external;\r\n\r\n    function setCheckStatus(address, bool) external;\r\n\r\n    function addContract(address) external;\r\n\r\n    function addOnGoing(address) external;\r\n\r\n    function removeOnGoing(address) external;\r\n\r\n    function changePriceFeed(address) external;\r\n\r\n    function changeTournamentGenerator(address) external;\r\n\r\n    function changeTournamentGeneratorLocked(address) external;\r\n\r\n    function changeTournamentFunctions(address) external;\r\n\r\n    function changeRoundGenerator(address) external;\r\n\r\n    function changeMatchGenerator(address) external;\r\n\r\n    function changePublicGoodsWallet(address) external;\r\n\r\n    function changeFeesWallet(address) external;\r\n\r\n    function retrieveRandomArray(uint8) external returns (uint8[] memory);\r\n\r\n    function claimAllNfts(address _tournamentAddress) external;\r\n\r\n    function claimAllTokens(address _tournamentAddress) external;\r\n\r\n    function withdrawNFT(\r\n        address _tournamentAddress,\r\n        uint256 _tokenId,\r\n        address _nftContract\r\n    ) external;\r\n\r\n    function claimFromMatch(\r\n        address _tournamentAddress,\r\n        uint256 _matchId,\r\n        uint256 _roundNumber\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/access/Administrable.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\nerror NotAbleToDeposit();\r\nerror IsAlreadyAdministrator();\r\nerror IsNotAdministrator();\r\nerror IsOwner();\r\n\r\ncontract Administrable is Ownable {\r\n    mapping(address => bool) private administrators;\r\n\r\n    /**\r\n     * @dev Constructor adds Owner as Administrator.\r\n     */\r\n    constructor() {\r\n        administrators[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds address newAdm on administrators mapping (if it's not already there).\r\n     */\r\n    function addAdministrator(address newAdm) public onlyOwner {\r\n        administrators[newAdm] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Delete address oldAdm from administrators mapping. Owner is able to remove himself from Administrators. Use with caution.\r\n     */\r\n    function removeAdministrator(address oldAdm) public onlyOwner {\r\n        if (!administrators[oldAdm]) revert IsNotAdministrator();\r\n\r\n        delete administrators[oldAdm];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not administrator.\r\n     */\r\n    function _checkAdministrator() internal view virtual {\r\n        if (!administrators[msg.sender]) revert IsNotAdministrator();\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not administrator.\r\n     */\r\n    function checkIsAdministrator(address _address) public view returns(bool) {\r\n        return administrators[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyAdministrator() {\r\n        _checkAdministrator();\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/TournamentHub.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TournamentHub is Administrable, ITournamentHub {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) public override checkProject;\r\n    mapping(address => bool) public override blacklistedNfts;\r\n    mapping(address => bool) public override checkedNfts;\r\n\r\n    address public override tournamentGenerator;\r\n    address public override tournamentGeneratorLocked;\r\n    address public override tournamentFunctions;\r\n    address public override roundGenerator;\r\n    address public override matchGenerator;\r\n    address public override tribeXToken;\r\n    address public maticDataFeed;\r\n    address public immutable deployer;\r\n    IERC20 tribeToken;\r\n    AggregatorV3Interface internal priceFeed;\r\n    address public override publicGoodsWallet;\r\n    address public override feeWallet;\r\n    address public override jackpotWallet;\r\n    address[] public ongoingTournaments;\r\n    mapping(address => uint256) private ongoingIds;\r\n\r\n    uint8[] internal array2;\r\n    bytes[] internal random4;\r\n    bytes[] internal random8;\r\n    bytes[] internal random16;\r\n    bytes[] internal random32;\r\n    bytes[] internal random64;\r\n    bytes[] internal tempBytesArray;\r\n\r\n    ITournamentFunctions internal interfaceFunctions;\r\n\r\n    /**\r\n     * @dev Constructor for TournamentHub contract\r\n     * @param _priceFeed Chainlink price feed address\r\n     */\r\n    constructor(address _priceFeed) {\r\n        publicGoodsWallet = msg.sender;\r\n        feeWallet = msg.sender;\r\n        deployer = msg.sender;\r\n        jackpotWallet = msg.sender;\r\n        maticDataFeed = _priceFeed;\r\n        tribeToken = IERC20(tribeXToken);\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n        array2.push(0);\r\n        array2.push(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than project contracts.\r\n     */\r\n    modifier onlyProject() {\r\n        //Check authorization\r\n        require(checkProject[msg.sender], \"TH-01\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check administration using Administrable.sol\r\n     * @param _sender Address of the sender\r\n     * @return bool True if sender is an administrator\r\n     */\r\n    function checkAdmin(address _sender) public view virtual returns (bool) {\r\n        return checkIsAdministrator(_sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Get Ongoing Size\r\n     * @return uint256 Size of ongoingTournaments\r\n     */\r\n    function getOngoingSize() public view virtual returns (uint256) {\r\n        return ongoingTournaments.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the blacklist status of an NFT\r\n     * @param _address Address of the NFT\r\n     * @param _status New blacklist status (true to add, false to remove)\r\n     */\r\n    function setBlacklistStatus(\r\n        address _address,\r\n        bool _status\r\n    ) external override {\r\n        blacklistedNfts[_address] = _status;\r\n        emit BlacklistStatusChanged(_address, _status);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the checkmark status of an NFT\r\n     * @param _address Address of the NFT\r\n     * @param _status New blacklist status (true to add, false to remove)\r\n     */\r\n    function setCheckStatus(address _address, bool _status) external override {\r\n        checkedNfts[_address] = _status;\r\n        emit CheckStatusChanged(_address, _status);\r\n    }\r\n\r\n    /**\r\n     * @dev To be called every time a new contract is generated.\r\n     * @param _contract Address of the contract\r\n     */\r\n    function addContract(address _contract) public onlyProject {\r\n        checkProject[_contract] = true;\r\n        emit ContractAdded(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To be called every time a new tournament contract is generated.\r\n     * @param _tournament Address of the tournament\r\n     */\r\n    function addOnGoing(address _tournament) public onlyProject {\r\n        ongoingTournaments.push(_tournament);\r\n        ongoingIds[_tournament] = ongoingTournaments.length - 1;\r\n\r\n        emit OnGoingTournamentAdded(_tournament);\r\n    }\r\n\r\n    /**\r\n     * @dev To be called every time a tounament is finished.\r\n     * @param _tournament Address of the tournament\r\n     */\r\n    function removeOnGoing(address _tournament) public onlyProject {\r\n        ongoingTournaments[ongoingIds[_tournament]] = ongoingTournaments[\r\n            ongoingTournaments.length - 1\r\n        ];\r\n        ongoingIds[\r\n            ongoingTournaments[ongoingTournaments.length - 1]\r\n        ] = ongoingIds[_tournament];\r\n\r\n        ongoingTournaments.pop();\r\n        delete ongoingIds[_tournament];\r\n\r\n        emit OnGoingTournamentRemoved(_tournament);\r\n    }\r\n\r\n    /**\r\n     * @dev To change maticDataFeed contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changePriceFeed(address _contract) public onlyAdministrator {\r\n        maticDataFeed = _contract;\r\n        priceFeed = AggregatorV3Interface(_contract);\r\n        emit DataFeedChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Tournament Generator contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changeTournamentGenerator(\r\n        address _contract\r\n    ) public onlyAdministrator {\r\n        delete checkProject[tournamentGenerator];\r\n        tournamentGenerator = _contract;\r\n        checkProject[_contract] = true;\r\n        checkProject[address(this)] = true;\r\n        emit TournamentGeneratorChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Tournament Generator contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changeTournamentGeneratorLocked(\r\n        address _contract\r\n    ) public onlyAdministrator {\r\n        delete checkProject[tournamentGeneratorLocked];\r\n        tournamentGeneratorLocked = _contract;\r\n        checkProject[_contract] = true;\r\n        checkProject[address(this)] = true;\r\n        emit TournamentGeneratorLockedChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Round Generator contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changeTournamentFunctions(\r\n        address _contract\r\n    ) public onlyAdministrator {\r\n        delete checkProject[tournamentFunctions];\r\n        tournamentFunctions = _contract;\r\n        interfaceFunctions = ITournamentFunctions(_contract);\r\n        checkProject[_contract] = true;\r\n        emit TournamentFunctionsChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Round Generator contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changeRoundGenerator(address _contract) public onlyAdministrator {\r\n        delete checkProject[roundGenerator];\r\n        roundGenerator = _contract;\r\n        checkProject[_contract] = true;\r\n        emit RoundGeneratorChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Match Generator contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changeMatchGenerator(address _contract) public onlyAdministrator {\r\n        delete checkProject[matchGenerator];\r\n        matchGenerator = _contract;\r\n        checkProject[_contract] = true;\r\n        emit MatchGeneratorChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Token contract\r\n     * @param _contract Address of the contract\r\n     */\r\n    function changeTokenContract(address _contract) public onlyAdministrator {\r\n        tribeXToken = _contract;\r\n        tribeToken = IERC20(_contract);\r\n        emit TokenChanged(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev To change publicGoods\r\n     * @param _wallet Address of the wallet\r\n     */\r\n    function changePublicGoodsWallet(address _wallet) public onlyAdministrator {\r\n        require(deployer == publicGoodsWallet, \"TH-09\");\r\n        publicGoodsWallet = _wallet;\r\n        emit PublicGoodsWalletChanged(_wallet);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Fees wallet\r\n     * @param _wallet Address of the wallet\r\n     */\r\n    function changeFeesWallet(address _wallet) public onlyAdministrator {\r\n        require(deployer == feeWallet, \"TH-09\");\r\n        feeWallet = _wallet;\r\n        emit FeeWalletWalletChanged(_wallet);\r\n    }\r\n\r\n    /**\r\n     * @dev To change Jackpot Wallet\r\n     * @param _wallet Address of the wallet\r\n     */\r\n    function changeJackpotWallet(address _wallet) public onlyAdministrator {\r\n        require(deployer == jackpotWallet, \"TH-09\");\r\n        jackpotWallet = _wallet;\r\n        emit JackpotWalletWalletChanged(_wallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Add randomic arrays. On contract creation, 10 arrays must be generated for each case, except for 2 players\r\n     * @param _array Array of players indexes randomly sorted\r\n     * @param _playersQty Number of players on the arrays\r\n     */\r\n    function addRandomArray(\r\n        uint8[] memory _array,\r\n        uint8 _playersQty\r\n    ) public onlyAdministrator {\r\n        require(_array.length == _playersQty, \"TH-02\");\r\n\r\n        if (_playersQty == 4) random4.push(abi.encode(_array));\r\n        else if (_playersQty == 8) random8.push(abi.encode(_array));\r\n        else if (_playersQty == 16) random16.push(abi.encode(_array));\r\n        else if (_playersQty == 32) random32.push(abi.encode(_array));\r\n        else random64.push(abi.encode(_array));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve randomic arrays\r\n     * @param _playersQty Number of players on the arrays\r\n     * @return uint8[] Array of players indexes randomly sorted\r\n     */\r\n    function retrieveRandomArray(\r\n        uint8 _playersQty\r\n    ) public view returns (uint8[] memory) {\r\n        if (_playersQty == 2) return array2;\r\n        else {\r\n            uint256 j = uint256(\r\n                keccak256(abi.encodePacked(block.timestamp, _playersQty))\r\n            ) % 10;\r\n            uint8[] memory _emptyArray;\r\n\r\n            if (_playersQty == 4) return abi.decode(random4[j], (uint8[]));\r\n            else if (_playersQty == 8) return abi.decode(random8[j], (uint8[]));\r\n            else if (_playersQty == 16)\r\n                return abi.decode(random16[j], (uint8[]));\r\n            else if (_playersQty == 32)\r\n                return abi.decode(random32[j], (uint8[]));\r\n            else if (_playersQty == 64)\r\n                return abi.decode(random64[j], (uint8[]));\r\n            else return _emptyArray;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate Pot\r\n     * @param _votesPlayer1 is the votes for player 1\r\n     * @param _votesPlayer2 is the votes for player 2\r\n     */\r\n    function calculatePot(\r\n        uint256 _votesPlayer1,\r\n        uint256 _votesPlayer2\r\n    ) private pure returns (uint256) {\r\n        if (_votesPlayer2 > _votesPlayer1) return _votesPlayer1;\r\n        else if (_votesPlayer2 < _votesPlayer1) return _votesPlayer2;\r\n        else return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve actual pot for the all unfinished matches in the round\r\n     * @param _round Address of the round\r\n     * @return uint256 Actual pot of the entire round\r\n     */\r\n    function roundPot(address _round) public view returns (uint256) {\r\n        IRound round = IRound(_round);\r\n        uint256 _pot;\r\n\r\n        for (uint256 i = 0; i < round.getMatchesQty(); i++) {\r\n            IMatch matchinterface = IMatch(round.getMatch(i));\r\n\r\n            uint256 _votesPlayer1 = matchinterface.votesPlayer1();\r\n            uint256 _votesPlayer2 = matchinterface.votesPlayer2();\r\n            uint8 _winner = matchinterface.winnerId();\r\n\r\n            if (_winner == 0) {\r\n                _pot = _pot.add(calculatePot(_votesPlayer1, _votesPlayer2));\r\n            }\r\n        }\r\n\r\n        return _pot;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve actual jackpot for tournament\r\n     * @param _tournamentAddress Address of the tournament\r\n     * @return uint256 Actual jackpot of the tournament\r\n     */\r\n    function getTournamentJackpot(\r\n        address _tournamentAddress\r\n    ) public view returns (uint256) {\r\n        ITournament _tournament = ITournament(_tournamentAddress);\r\n        if (_tournament.getTournamentStatus() == 2)\r\n            return _tournament.finalJackpot();\r\n\r\n        uint256 _roundNumber = _tournament.round();\r\n        address _roundAddress = _tournament.getRound(_roundNumber - 1);\r\n\r\n        uint256 _jackpot = _tournament.jackpot();\r\n        uint256 _pot = roundPot(_roundAddress);\r\n        _pot = _pot.sub(_pot.mul(5).div(1000));\r\n\r\n        _jackpot = _jackpot.add(_pot.mul(_tournament.jackpotPerc()).div(100));\r\n        _jackpot = _jackpot.sub(_jackpot.mul(25).div(1000));\r\n        uint256 publicGoods_ = _jackpot.mul(_tournament.publicGoodsPerc()).div(\r\n            100\r\n        );\r\n        _jackpot = _jackpot.sub(publicGoods_);\r\n\r\n        return _jackpot;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve all NFTs from a tournament to Sender\r\n     * @param _tournamentAddress Address of the tournament\r\n     */\r\n    function claimAllNfts(address _tournamentAddress) public {\r\n        ITournament _tournament = ITournament(_tournamentAddress);\r\n        uint8 tournamentStatus = _tournament.getTournamentStatus();\r\n        require((tournamentStatus == 2) || (tournamentStatus == 3), \"TH-05\");\r\n\r\n        for (uint256 i = 0; i < _tournament.depositedLength(); i++) {\r\n            bytes memory _player = _tournament.getPlayer(i);\r\n            (address _nftContract, uint256 _tokenId) = abi.decode(\r\n                _player,\r\n                (address, uint256)\r\n            );\r\n\r\n            if (\r\n                (_tournament.getNftOwner(_player) == msg.sender) &&\r\n                (IERC721(_nftContract).ownerOf(_tokenId) == _tournamentAddress)\r\n            ) {\r\n                _tournament.claimNFT(msg.sender, _nftContract, _tokenId);\r\n            }\r\n        }\r\n        emit AllNftClaimed(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve all tokens from a match owned by a sender\r\n     * @param _tournamentAddress Address of the tournament\r\n     */\r\n    function claimAllTokens(address _tournamentAddress) public {\r\n        interfaceFunctions.claimAllTokens(\r\n            _tournamentAddress,\r\n            address(tribeToken),\r\n            msg.sender\r\n        );\r\n        emit AllTokensClaimed(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws an NFT from the tournament\r\n     * @param _tournamentAddress is the address of the tournament\r\n     * @param _tokenId is the id of the NFT\r\n     * @param _nftContract is the address of the NFT contract\r\n     */\r\n    function withdrawNFT(\r\n        address _tournamentAddress,\r\n        uint256 _tokenId,\r\n        address _nftContract\r\n    ) public {\r\n        interfaceFunctions.withdrawNFT(\r\n            _tournamentAddress,\r\n            _tokenId,\r\n            _nftContract,\r\n            msg.sender\r\n        );\r\n\r\n        emit WithdrawNFTEvent(msg.sender, _nftContract, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim tokens from a match\r\n     * @param _tournamentAddress is the address of the tournament\r\n     * @param _matchId is the id of the match\r\n     * @param _roundNumber is the number of the round\r\n     */\r\n    function claimFromMatch(\r\n        address _tournamentAddress,\r\n        uint256 _matchId,\r\n        uint256 _roundNumber\r\n    ) public {\r\n        uint256 _total = interfaceFunctions.claimFromMatch(\r\n            _tournamentAddress,\r\n            _matchId,\r\n            _roundNumber,\r\n            address(tribeToken),\r\n            msg.sender\r\n        );\r\n\r\n        // emit event and log\r\n        emit WithdrawEvent(msg.sender, _total);\r\n    }\r\n\r\n    /**\r\n     * @dev Check on some Tournament Variables\r\n     * @param _tournamentAddress is the address of the tournament\r\n     */\r\n    function tournamentVariables(\r\n        address _tournamentAddress\r\n    ) public view returns (bytes memory) {\r\n        ITournament _tournament = ITournament(_tournamentAddress);\r\n        return\r\n            abi.encode(\r\n                _tournament.round(),\r\n                _tournament.depositedLength(),\r\n                _tournament.getTournamentStatus(),\r\n                _tournament.endTime()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Check on some financial Variables\r\n     * @param _tournamentAddress is the address of the tournament\r\n     */\r\n    function jackpotVariables(\r\n        address _tournamentAddress\r\n    ) public view returns (bytes memory) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n\r\n        return\r\n            abi.encode(\r\n                getTournamentJackpot(_tournamentAddress), //uint256\r\n                uint256(price),\r\n                priceFeed.decimals() // uint8\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Check on round matches\r\n     * @param _tournamentAddress is the address of the tournament\r\n     */\r\n    function roundMatches(\r\n        address _tournamentAddress\r\n    ) public view returns (bytes[6] memory) {\r\n        ITournament _tournament = ITournament(_tournamentAddress);\r\n        IRound _round;\r\n\r\n        bytes[6] memory _returnArray;\r\n\r\n        for (uint256 i = 0; i < _tournament.round(); i++) {\r\n            _round = IRound(_tournament.getRound(i));\r\n            bytes[] memory _matchesEncoded = _round.getMatchesEncoded();\r\n            _returnArray[i] = abi.encode(_matchesEncoded);\r\n        }\r\n\r\n        return _returnArray;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IsNotAdministrator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllNftClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"BlacklistStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"CheckStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DataFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FeeWalletWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"JackpotWalletWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MatchGeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OnGoingTournamentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OnGoingTournamentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PublicGoodsWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoundGeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TournamentFunctionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TournamentGeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TournamentGeneratorLockedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WithdrawNFTEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdm\",\"type\":\"address\"}],\"name\":\"addAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournament\",\"type\":\"address\"}],\"name\":\"addOnGoing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_array\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"_playersQty\",\"type\":\"uint8\"}],\"name\":\"addRandomArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedNfts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFeesWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeJackpotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeMatchGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changePublicGoodsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeRoundGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeTournamentFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeTournamentGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeTournamentGeneratorLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"checkAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIsAdministrator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkedNfts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"}],\"name\":\"claimAllNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"}],\"name\":\"claimAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimFromMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOngoingSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"}],\"name\":\"getTournamentJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"}],\"name\":\"jackpotVariables\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticDataFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ongoingTournaments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicGoodsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAdm\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournament\",\"type\":\"address\"}],\"name\":\"removeOnGoing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_playersQty\",\"type\":\"uint8\"}],\"name\":\"retrieveRandomArray\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"}],\"name\":\"roundMatches\",\"outputs\":[{\"internalType\":\"bytes[6]\",\"name\":\"\",\"type\":\"bytes[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_round\",\"type\":\"address\"}],\"name\":\"roundPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setCheckStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentFunctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentGeneratorLocked\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"}],\"name\":\"tournamentVariables\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribeXToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TournamentHub", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab594600376ec9fd91f8e885dadf0ce036862de0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3852b79b4692b90936a34f8d99b4653f2c9f81e9f230d40432c342f6fb071062"}