{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTbase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721, IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nabstract contract NFTBase is IERC721, IERC721Metadata {\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenIds\\n    mapping(address => mapping(uint => uint)) public ownerToNFTokenIdList;\\n    \\n    /// @dev Mapping from NFT ID to index of owner\\n    mapping(uint => uint) internal tokenToOwnerIndex;\\n\\n    bool public transferEnabled = false;\\n    /*///////////////////////////////////////////////////////////////\\n                                NFT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint public tokenId;\\n\\n    string public _baseURI;\\n\\n    // constructor(){}\\n    /// @dev Return the complete ownerToNFTokenIdList mapping in an array for easier API use\\n    /// @param owner The owner of the nftList \\n    function  getOwnerToNFTokenIdList(address owner) external view returns(uint[] memory){\\n        uint length = _balance(owner);\\n        uint [] memory tokenList = new uint[](length);\\n        for(uint i = 0; i < length; i++){\\n            tokenList[i] = ownerToNFTokenIdList[owner][i];\\n        }\\n        return tokenList;\\n    }\\n\\n    /// @dev  Get token by index\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external virtual view returns (uint) {\\n        return ownerToNFTokenIdList[_owner][_tokenIndex];\\n    }\\n\\n    /// @dev Add a NFT to an index mapping to a given address\\n    /// @param _to address of the receiver\\n    /// @param _tokenId uint ID Of the token to be added\\n    function _addTokenToOwnerList(address _to, uint _tokenId) internal virtual {\\n        uint current_count = _balance(_to);\\n        ownerToNFTokenIdList[_to][current_count] = _tokenId;\\n        tokenToOwnerIndex[_tokenId] = current_count;\\n    }\\n\\n    /// @dev Add a NFT to a given address\\n    ///      Throws if `_tokenId` is owned by someone.\\n    function _addTokenTo(address _to, uint _tokenId) internal {\\n        // Throws if `_tokenId` is owned by someone\\n        assert(idToOwner[_tokenId] == address(0));\\n        // Change the owner\\n        idToOwner[_tokenId] = _to;\\n        // Update owner token index tracking\\n        _addTokenToOwnerList(_to, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_to] += 1;\\n    }\\n\\n    /// @dev Function to mint tokens\\n    ///      Throws if `_to` is zero address.\\n    ///      Throws if `_tokenId` is owned by someone.\\n    /// @param _to The address that will receive the minted tokens.\\n    /// @param _tokenId The token id to mint.\\n    /// @return A boolean that indicates if the operation was successful.\\n    function _mint(address _to, uint _tokenId) internal returns (bool) {\\n        // Throws if `_to` is zero address\\n        assert(_to != address(0));\\n        // Add NFT. Throws if `_tokenId` is owned by someone\\n        _addTokenTo(_to, _tokenId);\\n        emit Transfer(address(0), _to, _tokenId);\\n        return true;\\n    }\\n\\n    /// @dev Remove a NFT from an index mapping to a given address\\n    /// @param _from address of the sender\\n    /// @param _tokenId uint ID Of the token to be removed\\n    function _removeTokenFromOwnerList(address _from, uint _tokenId) internal virtual {\\n        // Delete\\n        uint current_count = _balance(_from) - 1;\\n        uint current_index = tokenToOwnerIndex[_tokenId];\\n        if (current_count == current_index) {\\n            // update ownerToNFTokenIdList\\n            delete ownerToNFTokenIdList[_from][current_count];\\n            // update tokenToOwnerIndex\\n            delete tokenToOwnerIndex[_tokenId];\\n        } else {\\n            uint lastTokenId = ownerToNFTokenIdList[_from][current_count];\\n\\n            // Add\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][current_index] = lastTokenId;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[lastTokenId] = current_index;\\n\\n            // Delete\\n            // update ownerToNFTokenIdList\\n            delete ownerToNFTokenIdList[_from][current_count];\\n            // update tokenToOwnerIndex\\n            delete tokenToOwnerIndex[_tokenId];\\n        }\\n    }\\n\\n    /// @dev Remove a NFT from a given address\\n    ///      Throws if `_from` is not the current owner.\\n    function _removeTokenFrom(address _from, uint _tokenId) internal {\\n        // Throws if `_from` is not the current owner\\n        assert(idToOwner[_tokenId] == _from);\\n        // Change the owner\\n        delete idToOwner[_tokenId];\\n        // Update owner token index tracking\\n        _removeTokenFromOwnerList(_from, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_from] -= 1;\\n    }\\n    \\n    function _burn(uint _tokenId) internal {\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"caller is not owner nor approved\\\");\\n        address owner = ownerOf(_tokenId);\\n\\n        // Clear approval\\n        approve(address(0), _tokenId);\\n        // Remove token\\n        //_removeTokenFrom(msg.sender, _tokenId);\\n        _removeTokenFrom(owner, _tokenId);\\n        \\n        emit Transfer(owner, address(0), _tokenId);\\n    }\\n     /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n    //Symbols needed for string conversion\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        string memory baseURI = _baseURI;\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, toString(_tokenId))) : \\\"\\\";\\n    }\\n    \\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from NFT ID to approved address.\\n    mapping(uint => address) internal idToApprovals;\\n\\n    /// @dev Mapping from owner address to mapping of operator addresses.\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    mapping(uint => uint) public ownership_change;\\n\\n    /// @dev Get the approved address for a single NFT.\\n    /// @param _tokenId ID of the NFT to query the approval of.\\n    function getApproved(uint _tokenId) external view returns (address) {\\n        return idToApprovals[_tokenId];\\n    }\\n\\n    /// @dev Checks if `_operator` is an approved operator for `_owner`.\\n    /// @param _owner The address that owns the NFTs.\\n    /// @param _operator The address that acts on behalf of the owner.\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\\n        return (ownerToOperators[_owner])[_operator];\\n    }\\n     /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    /// @dev Mapping of interface id to bool about whether or not it's supported\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\n\\n    /// @dev ERC165 interface ID of ERC165\\n    bytes4 internal constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n\\n    /// @dev ERC165 interface ID of ERC721\\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n\\n    /// @dev ERC165 interface ID of ERC721Metadata\\n    bytes4 internal constant ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\\n    \\n\\n    /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\\n    ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\\n    ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\\n    /// @param _approved Address to be approved for the given NFT ID.\\n    /// @param _tokenId ID of the token to be approved.\\n    function approve(address _approved, uint _tokenId) public {\\n        address owner = idToOwner[_tokenId];\\n        // Throws if `_tokenId` is not a valid NFT\\n        require(owner != address(0));\\n        // Throws if `_approved` is the current owner\\n        require(_approved != owner);\\n        // Check requirements\\n        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\\n        bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\\n        require(senderIsOwner || senderIsApprovedForAll);\\n        // Set the approval\\n        idToApprovals[_tokenId] = _approved;\\n        emit Approval(owner, _approved, _tokenId);\\n    }\\n\\n    /// @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n    ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n    ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\\n    /// @notice This works even if sender doesn't own any tokens at the time.\\n    /// @param _operator Address to add to the set of authorized operators.\\n    /// @param _approved True if the operators is approved, false to revoke approval.\\n    function setApprovalForAll(address _operator, bool _approved) external {\\n        // Throws if `_operator` is the `msg.sender`\\n        assert(_operator != msg.sender);\\n        ownerToOperators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /* TRANSFER FUNCTIONS */\\n    /// @dev Clear an approval of a given address\\n    ///      Throws if `_owner` is not the current owner.\\n    function _clearApproval(address _owner, uint _tokenId) internal {\\n        // Throws if `_owner` is not the current owner\\n        assert(idToOwner[_tokenId] == _owner);\\n        if (idToApprovals[_tokenId] != address(0)) {\\n            // Reset approvals \\n            idToApprovals[_tokenId] = address(0);\\n        }\\n    }\\n\\n    /// @dev Returns whether the given spender can transfer a given token ID\\n    /// @param _spender address of the spender to query\\n    /// @param _tokenId uint ID of the token to be transferred\\n    /// @return bool whether the msg.sender is approved for the given token ID, is an operator of the owner, or is the owner of the token\\n    function _isApprovedOrOwner(address _spender, uint _tokenId) internal view returns (bool) {\\n        address owner = idToOwner[_tokenId];\\n        bool spenderIsOwner = owner == _spender;\\n        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\\n        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\\n    }\\n\\n    function isApprovedOrOwner(address _spender, uint _tokenId) external view returns (bool) {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    /// @dev Exeute transfer of a NFT.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n    ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId,\\n        address _sender\\n    ) internal virtual { \\n        require(transferEnabled, \\\"Transfer disabled\\\");\\n        // Check requirements\\n        require(_isApprovedOrOwner(_sender, _tokenId));\\n        // Clear approval. Throws if `_from` is not the current owner\\n        _clearApproval(_from, _tokenId);\\n        // Remove NFT. Throws if `_tokenId` is not a valid NFT\\n        _removeTokenFrom(_from, _tokenId);\\n        // Add NFT\\n        _addTokenTo(_to, _tokenId);\\n        // Set the block of ownership transfer (for Flash NFT protection)\\n        ownership_change[_tokenId] = block.number;\\n        // Log the transfer\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    /// @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n    ///        they maybe be permanently lost.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) external {\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\n    }\\n\\n    /// @dev Transfers the ownership of an NFT from one address to another address.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n    ///      approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n    ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) external {\\n        safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n        uint size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /// @dev Transfers the ownership of an NFT from one address to another address.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n    ///      approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n    ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    /// @param _data Additional data with no specified format, sent in call to `_to`.\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId,\\n        bytes memory _data\\n    ) public {\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\n\\n        if (_isContract(_to)) {\\n            // Throws if transfer destination is a contract which does not implement 'onERC721Received'\\n            try IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 response) {\\n                if (response != IERC721Receiver(_to).onERC721Received.selector) {\\n                    revert(\\\"ERC721: ERC721Receiver rejected tokens\\\");\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from NFT ID to the address that owns it.\\n    mapping(uint => address) internal idToOwner;\\n\\n    /// @dev Mapping from owner address to count of his tokens.\\n    mapping(address => uint) internal ownerToNFTokenCount;\\n\\n    /// @dev Returns the address of the owner of the NFT.\\n    /// @param _tokenId The identifier for an NFT.\\n    function ownerOf(uint _tokenId) public view returns (address) {\\n        return idToOwner[_tokenId];\\n    }\\n\\n    /// @dev Returns the number of NFTs owned by `_owner`.\\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    /// @param _owner Address for whom to query the balance.\\n    function _balance(address _owner) internal view returns (uint) {\\n        return ownerToNFTokenCount[_owner];\\n    }\\n\\n    /// @dev Returns the number of NFTs owned by `_owner`.\\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    /// @param _owner Address for whom to query the balance.\\n    function balanceOf(address _owner) external view returns (uint) {\\n        return _balance(_owner);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/veBRZ.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './NFTbase.sol'; \\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IMigrationContract{\\n  function migrateLock(uint lockTime, uint underlying) external;\\n}\\n\\ncontract veBRZ is AccessControl, NFTBase {\\n  bytes32 public constant YIELD_ROLE = keccak256(\\\"YIELD_ROLE\\\");\\n\\n  event TokensLocked(address indexed user, uint indexed tokenId, uint amount, uint unlockTime, uint activeEpoch);\\n  event TokensUnlocked(address indexed user, uint indexed tokenId, uint amount, uint virtualAmount);\\n  event TokensRelocked(address indexed user, uint indexed tokenId, uint newTokenId);\\n  event YieldDistributed(uint amount, uint totalVirtualSupply, uint activeEpoch, uint yieldInEpoch);\\n  event YieldClaimed(address indexed user,  uint indexed tokenId, uint amount, uint claimedSoFar);\\n  event TokensRecovered(address asset, uint amount);\\n  event ETHRecovered(uint amount);\\n  \\n  address public migrationContract;\\n  uint public activeEpoch;\\n  uint public immutable epochZero;\\n  string public name = \\\"Voting Escrowed BRZ\\\";\\n  string public symbol = \\\"veBRZ\\\";\\n  IERC20 immutable stBRZ; \\n  // Description:\\n  // example: All locks that decay are grouped into 12h periods. You can claim at any time but only the yield that has been deposited epoch-1\\n  \\n  // Potentially get claimable for epoch \\n  // DEFINE EPOCH TO DEFINE THE EPOCHS LENGTH \\n  uint public constant EPOCH = 60*1; //12 hours\\n\\n  constructor(address _stBRZ){\\n    activeEpoch = 0;\\n    epochZero = block.timestamp;\\n    _grantRole(YIELD_ROLE, msg.sender);\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    stBRZ = IERC20(_stBRZ);\\n    _baseURI = \\\"https://stakease.kona.finance/api/token/\\\";\\n  }\\n\\n  // ------ Locking Variables ------\\n  \\n  struct LockInfo {\\n    uint256 amount; // Amount of stBRZ tokens in the lock\\n    uint256 virtualAmount; // Amount of vBRZ tokens minted\\n    uint256 startingEpoch; // Timestamp when the starts\\n    uint256 claimedUntil; // Which Epoch the yield has been claimed \\n    uint256 unlockTime; // Timestamp when the lock ends\\n    uint256 totalClaimedSoFar; //The Total amount of tokens a user claimed so far\\n  }\\n  \\n  mapping(uint => uint) public yieldInEpoch; // Global yield \\n  mapping(uint => uint) public decayInEpoch; // Global decay \\n  mapping(uint => uint) public supplyLockedInEpoch; //supply in the epoch\\n  mapping(uint => LockInfo) public idToLock;\\n\\n/**\\n * @dev Modifier to ensure that the state of the contract is updated to the current epoch.\\n * If the current epoch is different from the active epoch, it updates the supply locked\\n * in each epoch by subtracting the decay for that epoch.\\n */\\n  modifier rollOver(){\\n    // Calculate the current epoch based on the current block timestam\\n    uint currentEpoch = calculateEpoch(block.timestamp);\\n    // Check if the current epoch is different from the active epoch\\n    if(currentEpoch != activeEpoch){\\n       // Loop through all epochs from the active epoch to the current epoch\\n      for(uint localEpoch = activeEpoch; localEpoch < currentEpoch; localEpoch++){\\n        // Update the supply locked in the current epoch.\\n        // The supply for the current epoch is the supply from the previous epoch minus the decay for the current epoch.\\n        // This ensures that the supply locked in each epoch is updated to account for decay.\\n        supplyLockedInEpoch[localEpoch+1] = supplyLockedInEpoch[localEpoch] - decayInEpoch[localEpoch];\\n      }\\n      // Update the active epoch to the current epoch\\n      activeEpoch = currentEpoch;\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev External function to manually trigger the rollOver modifier.\\n   * This can be useful in scenarios where the state needs to be updated without any other function call.\\n   */\\n  function rollOverManually() external rollOver(){}\\n\\n  /**\\n   * @dev Checks if the contract state needs to be rolled over to the current epoch.\\n   * @return bool Returns true if the active epoch is different from the current epoch, otherwise false.\\n   */\\n  function needsRollingOver() external view returns(bool){\\n    // Calculate the current epoch based on the current block timestamp\\n    uint currentEpoch = calculateEpoch(block.timestamp);\\n\\n    // Check if the current epoch is different from the active epoch\\n    return (currentEpoch != activeEpoch);\\n  }\\n\\n  function totalStBRZBalance(address user) external view returns(uint){\\n    uint balance;\\n    balance += stBRZ.balanceOf(user);\\n    uint length = _balance(user);\\n    for(uint i = 0; i < length; i++){\\n       balance += idToLock[ownerToNFTokenIdList[user][i]].amount;\\n    }\\n    return balance;\\n  } \\n\\n  // function howManyRolloversNeeded() external view returns(uint){\\n\\n  // }\\n  /**\\n   * @dev Calculates the epoch for a given timestamp.\\n   * @param timestamp The timestamp for which the epoch needs to be calculated.\\n   * @return uint Returns the epoch number for the given timestamp.\\n   */\\n  function calculateEpoch(uint timestamp) public view returns(uint){\\n    // Calculate the epoch by subtracting the epochZero from the given timestamp and dividing by EPOCH\\n    return (timestamp - epochZero)/EPOCH;\\n  }\\n\\n  /**\\n   * @notice Allows the owner to distribute yield among active vBRZ holders.\\n   * @param _amount The amount of yield to be distributed.\\n   */\\n  function distributeYield(uint256 _amount) external onlyRole(YIELD_ROLE) rollOver(){\\n    // Ensure the yield amount is greater than 0\\n    require(_amount > 0, \\\"Amount should be greater than 0\\\");\\n\\n    // Calculate the active vBRZ supply (total vBRZ for unclaimed locks)\\n    uint256 activeBRZSupply = totalSupplyLocked();\\n    // Ensure there is an active vBRZ supply to distribute the yield\\n    require(activeBRZSupply > 0, \\\"No active vBRZSupply\\\");\\n\\n    // Update the global yield in the Epoch\\n    yieldInEpoch[activeEpoch] += _amount;\\n    \\n    // Transfer the yield amount to the contract itself (this could be modified based on intended logic)\\n    require(stBRZ.transferFrom(msg.sender, address(this), _amount), \\\"Failed to transfer yield\\\");\\n\\n    // Emit an event to log the yield distribution\\n    emit YieldDistributed(_amount, totalSupplyLocked(), activeEpoch, yieldInEpoch[activeEpoch]);\\n  }\\n\\n  /**\\n   * @notice Allows users to lock stBRZ tokens for a specific duration and receiv5  e vBRZ with a bonus based on lock duration.\\n   * @param _amount The amount of stBRZ tokens to be locked.\\n   * @param _months The lock duration in months (1, 3, 6, 12, or 24).\\n   */\\n  function createLock(uint256 _amount, uint256 _months) public rollOver() returns(uint) {\\n    // Ensure the lock amount is greater than 0\\n    require(_amount > 0, \\\"Amount should be greater than 0\\\");\\n\\n    // Ensure the lock duration is one of the accepted values\\n    require(\\n      _months == 1 ||\\n        _months == 3 ||\\n        _months == 6 ||\\n        _months == 12 ||\\n        _months == 24,\\n      \\\"Invalid lock duration\\\"\\n    );\\n\\n    uint256 boost;\\n    // Determine the boost percentage based on the lock duration\\n    if (_months == 1) {\\n      boost = 10; // 10% extra\\n    } else if (_months == 3) {\\n      boost = 20; // 20% extra\\n    } else if (_months == 6) {\\n      boost = 30; // 30% extra\\n    } else if (_months == 12) {\\n      boost = 50; // 50% extra\\n    } else if (_months == 24) {\\n      boost = 100; // 100% extra\\n    }\\n\\n    // Calculate vBRZ amount to be minted, including the boost\\n    uint256 vBRZAmount = (_amount * (100 + boost)) / 100;\\n    uint256 unlockTime = block.timestamp + _months * 3 minutes;\\n\\n    decayInEpoch[calculateEpoch(unlockTime)] += vBRZAmount;\\n    \\n    // Create the lock with the provided amount, vBRZ amount, unlock time, and mark it as unclaimed\\n    idToLock[tokenId] = LockInfo(_amount, vBRZAmount, activeEpoch, activeEpoch, unlockTime, 0);\\n    _mint(msg.sender, tokenId);\\n    tokenId++;\\n\\n    // Transfer stBRZ tokens from the user to the contract\\n    stBRZ.transferFrom(msg.sender, address(this), _amount);\\n    supplyLockedInEpoch[activeEpoch] += vBRZAmount;\\n\\n    // Emit an event to log the lock creation\\n    emit TokensLocked(msg.sender, tokenId-1, _amount, unlockTime, activeEpoch);\\n\\n    return tokenId-1;\\n  }\\n\\n  function totalSupplyLocked() public view returns(uint){\\n    return supplyLockedInEpoch[activeEpoch];\\n  }\\n\\n  /**\\n   * @dev Allows the owner of a token to claim their reward.\\n   * @param _tokenId The ID of the token for which the reward is to be claimed.\\n   */\\n  function claimReward(uint _tokenId) public rollOver(){\\n    // Ensure that the caller is the owner of the token\\n    require(ownerOf(_tokenId) == msg.sender, \\\"You are not the owner\\\");\\n\\n    // Get the lock information associated with the token\\n    LockInfo storage localLock = idToLock[_tokenId];\\n\\n    // Ensure that the reward for the current epoch hasn't been claimed yet\\n    require(localLock.claimedUntil != activeEpoch, \\\"already claimed this epoch\\\");\\n\\n    // Calculate the claimable amount based on the last claimed epoch, unlock time, and virtual amount\\n    uint toClaim = getClaimable(localLock.claimedUntil, calculateEpoch(localLock.unlockTime), localLock.virtualAmount);\\n\\n    // Transfer the claimable amount to the caller\\n    require(stBRZ.transfer(msg.sender,toClaim), 'Transfer failed');\\n    localLock.totalClaimedSoFar += toClaim;\\n\\n    // Update the last claimed epoch to the current active epoch\\n    localLock.claimedUntil = activeEpoch;\\n\\n    // Emit an event indicating that the yield has been claimed\\n    emit YieldClaimed(msg.sender, _tokenId, toClaim, localLock.totalClaimedSoFar);\\n  }\\n\\n  function unlockable(uint _tokenId) external view returns(bool){\\n    return idToLock[_tokenId].unlockTime <= block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Allows a user to claim their reward and then relock their tokens.\\n   * @param _tokenId The ID of the token for which the reward is to be claimed and then relocked.\\n   * @param _months The number of months for which the tokens should be relocked.\\n   */\\n  function claimAndRelock(uint256 _tokenId, uint256 _months) external {\\n    // Get the lock information associated with the token\\n    LockInfo storage localLock = idToLock[_tokenId];\\n\\n    // Claim the reward for the specified token\\n    claimAndUnlock(_tokenId);\\n\\n    // Create a new lock for the specified amount and duration\\n    uint newTokenId = createLock(localLock.amount, _months);\\n\\n    emit TokensRelocked(msg.sender, _tokenId, newTokenId);\\n  }\\n\\n  /**\\n   * @dev Allows the owner of a token to unlock their tokens.\\n   * @param _tokenId The ID of the token to be unlocked.\\n   */\\n  function unlockToken(uint _tokenId) internal{\\n    // Ensure that the caller is the owner of the token\\n    require(ownerOf(_tokenId) == msg.sender, \\\"You are not the owner\\\");\\n\\n    // Get the lock information associated with the token\\n    LockInfo storage userLock = idToLock[_tokenId];\\n\\n    // Ensure that the unlock time has been reached or surpassed\\n    require(userLock.unlockTime <= block.timestamp);\\n\\n    // Transfer the locked amount back to the caller\\n    require(stBRZ.transfer(msg.sender, userLock.amount));\\n\\n    // Delete the lock information associated with the token\\n    delete idToLock[_tokenId];\\n\\n    // Burn the token\\n    _burn(_tokenId);\\n\\n    // Emit an event indicating that the tokens have been unlocked\\n    emit TokensUnlocked(msg.sender, _tokenId, userLock.amount, userLock.virtualAmount);\\n  }  \\n\\n  /**\\n   * @notice Calculates the  yield for a specific token based on the epoch !!IMPORTANT!! EVEN IF ALREADY CLAIMED !!IMPORTANT!!.\\n   * @dev This function provides a view on the yield that can be claimed for a specific token without making any state changes.\\n   * @param _tokenId The unique identifier of the specific lock.\\n   * @return yield The amount of yield that can be claimed.\\n   */\\n  function getRewardForEpoch(uint _tokenId, uint epochToCheck) external view returns(uint) {\\n    LockInfo storage localLock = idToLock[_tokenId];\\n\\n    uint yield = 0;\\n    // Ensure that the reward for the current epoch hasn't been claimed yet\\n    // require(localLock.claimedUntil != activeEpoch + 1, \\\"already claimed this epoch\\\");\\n    if (localLock.startingEpoch <= epochToCheck && calculateEpoch(localLock.unlockTime)>= epochToCheck){\\n      yield = getClaimable(epochToCheck, epochToCheck, localLock.virtualAmount);\\n    }\\n    else{\\n      // Calculate the claimable yield based on the last claimed epoch, unlock time, and virtual amount\\n      yield = 0;\\n    }\\n    return yield;\\n  }\\n\\n\\n  /**\\n   * @notice Allows users to claim both their locked stBRZ tokens and the associated yield after the lock period ends.\\n   * @dev This function combines the operations of claiming rewards and unlocking tokens into a single transaction.\\n   * @param _tokenId The unique identifier of the specific lock to be claimed.\\n   */\\n  function claimAndUnlock(uint256 _tokenId) public rollOver(){\\n    // Claim the yield associated with the token\\n    claimReward(_tokenId);\\n\\n    // Unlock the locked stBRZ tokens\\n    unlockToken(_tokenId);\\n  }\\n\\n  /**\\n   * @notice Calculates the claimable yield for a specific token based on the starting and ending epochs.\\n   * @dev This function provides a view on the yield that can be claimed for a specific token without making any state changes.\\n   * @param _tokenId The unique identifier of the specific lock.\\n   * @return yield The amount of yield that can be claimed.\\n   */\\n  function getClaimableForToken(uint _tokenId) external view returns(uint){\\n    // Retrieve the lock information associated with the token\\n    LockInfo storage localLock = idToLock[_tokenId];\\n    uint actualEpoch = calculateEpoch(block.timestamp);\\n    uint yield = 0;\\n    // Ensure that the reward for the current epoch hasn't been claimed yet\\n    // require(localLock.claimedUntil != activeEpoch + 1, \\\"already claimed this epoch\\\");\\n    if (localLock.claimedUntil == actualEpoch){\\n      yield = 0;\\n    }\\n    else{\\n      // Calculate the claimable yield based on the last claimed epoch, unlock time, and virtual amount\\n      yield = getClaimable(localLock.claimedUntil, calculateEpoch(localLock.unlockTime), localLock.virtualAmount);\\n    }\\n\\n    return yield;\\n  }\\n\\n  /**\\n   * @notice Calculates the claimable yield based on the starting epoch, ending epoch, and virtual BRZ amount.\\n   * @dev This function iterates over the epochs to calculate the yield based on the proportion of the user's virtual BRZ to the total supply locked in each epoch.\\n   * @param startingEpoch The epoch from which the yield calculation should start.\\n   * @param lockEndEpoch The epoch at which the lock ends.\\n   * @param vBRZ The virtual BRZ amount associated with the user's lock.\\n   * @return yield The amount of yield that can be claimed.\\n   */\\n  function getClaimable(uint startingEpoch,uint lockEndEpoch , uint vBRZ) public view returns(uint){\\n    // only iterate till activeEpoch -1 as all deposits in the current epoch are claimable for last epoch entrants\\n    // potenitally add to actual epoch not active epoch / virtually already rollover if it hasn't rolled over yet\\n    \\n    // Calculate and use the actual Epoch to be up to date even if the rollover didn't happen yet\\n    uint actualEpoch = calculateEpoch(block.timestamp);\\n    // Determine the last epoch to be considered for yield calculation. If the lock ends before the current epoch, use the lock end epoch. Otherwise, use the current active epoch.\\n    uint lastEpochCounting = lockEndEpoch+1 < actualEpoch ? lockEndEpoch+1 : actualEpoch;\\n    uint yield = 0;\\n    // Iterate over the epochs to calculate the yield\\n    for(uint localEpoch = startingEpoch;localEpoch < lastEpochCounting; localEpoch++){\\n      // Calculate the yield for the current epoch based on the proportion of the user's virtual BRZ to the total supply locked in the previous epoch\\n      yield = yield + (yieldInEpoch[localEpoch] * vBRZ) /supplyLockedInEpoch[localEpoch];\\n    }\\n    return yield;\\n  } \\n\\n  function setBaseURI (string calldata newbaseURI) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _baseURI = newbaseURI;\\n  }\\n\\n  \\n  function changeTranferEnabled(bool _transferable) external onlyRole(DEFAULT_ADMIN_ROLE){\\n      transferEnabled = _transferable;\\n  }\\n\\n  function setMigrationContract(address _migrationContract) external onlyRole(DEFAULT_ADMIN_ROLE){\\n     migrationContract = _migrationContract;\\n  }\\n\\n  function migrate(uint _tokenId, uint lockTime) external {\\n    require(migrationContract != address(0), \\\"no migration set\\\");\\n    require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    \\n    claimReward(_tokenId);\\n    LockInfo storage localLock = idToLock[_tokenId];\\n    stBRZ.approve(migrationContract, localLock.amount);\\n    IMigrationContract(migrationContract).migrateLock(lockTime, localLock.amount);\\n    _burn(_tokenId);\\n    delete idToLock[_tokenId];\\n  }\\n  /**\\n   * @dev Allows the contract owner to recover any ERC20 token sent into the contract.\\n   * Useful for recovering any mistakenly sent ERC20 tokens.\\n   * @param _amount Amount of tokens to be recovered.\\n   * @param _asset Address of the ERC20 asset to be recovered.\\n   * @notice This doesn't allow to recover vBRZ tokens from the contract.\\n   */\\n  function recoverTokens(\\n    uint256 _amount,\\n    address _asset\\n  ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    require(IERC20(_asset).transfer(msg.sender, _amount), \\\"Transfer failed\\\");\\n    emit TokensRecovered(_asset,  _amount);\\n  }\\n\\n  /**\\n   * @dev Allows the contract owner to recover any Ether sent into the contract.\\n   * @param _amount Amount of Ether in wei to be recovered.\\n   */\\n  function recoverETH(uint256 _amount) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    payable(msg.sender).transfer(_amount);\\n    emit ETHRecovered(_amount);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stBRZ\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeEpoch\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"TokensRelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"virtualAmount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedSoFar\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVirtualSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldInEpoch\",\"type\":\"uint256\"}],\"name\":\"YieldDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"changeTranferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_months\",\"type\":\"uint256\"}],\"name\":\"claimAndRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimAndUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_months\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decayInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochZero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBRZ\",\"type\":\"uint256\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimableForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerToNFTokenIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochToCheck\",\"type\":\"uint256\"}],\"name\":\"getRewardForEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedSoFar\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needsRollingOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToNFTokenIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownership_change\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollOverManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newbaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrationContract\",\"type\":\"address\"}],\"name\":\"setMigrationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyLockedInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalStBRZBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yieldInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "veBRZ", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a89715b89ea22d9bcfd45d4e1c89c8638b00b110", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}