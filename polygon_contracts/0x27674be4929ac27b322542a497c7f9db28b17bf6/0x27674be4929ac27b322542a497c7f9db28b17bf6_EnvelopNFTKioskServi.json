{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EnvelopNFTKioskService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) NFT(wNFT) Kiosk.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"ServiceProviderOwnable.sol\\\";\\nimport \\\"NFTKiosk.sol\\\";\\nimport \\\"IModelWhiteList.sol\\\";\\n\\n\\ncontract EnvelopNFTKioskService is NFTKiosk, ServiceProviderOwnable {\\n\\n    address public modelWhiteListAddress;\\n\\n    constructor (address _subscrRegistry)\\n       ServiceProviderOwnable(_subscrRegistry)\\n    {\\n        \\n    }\\n\\n    function setDisplayParams(\\n        string calldata _name,\\n        address _beneficiary, // who will receive assets from sale\\n        uint256 _enableAfter,\\n        uint256 _disableAfter,\\n        address _priceModel\\n    ) public override(NFTKiosk) \\n    {\\n        require(\\n            IModelWhiteList(modelWhiteListAddress).isModelEnabled(_priceModel),\\n            \\\"Unexpected price model address\\\"\\n        );\\n        if (displays[hlpHashString(_name)].owner == address(0))\\n        {\\n            // Fix subscriptionfor NEW display only\\n            _checkAndFixSubscription(msg.sender);\\n\\n        }\\n        \\n        super.setDisplayParams(\\n            _name,\\n            _beneficiary,\\n            _enableAfter,\\n            _disableAfter,\\n            _priceModel\\n        );\\n    }\\n    ////////////////////////////////////////\\n    //     Admin functions               ///\\n    ////////////////////////////////////////\\n    function setWhiteList(address _modelWhiteList) external onlyOwner {\\n        modelWhiteListAddress = _modelWhiteList;\\n    }\\n    \\n    /////////////////////////////////////////////////////////////////////\\n    function checkUser(address _user) external view returns (bool ok, bool needFix) {\\n        return _checkUserSubscription(_user); \\n\\n    }\\n} \"\r\n    },\r\n    \"ServiceProviderOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) Subscription Registry Contract V2\\n\\n\\n/// The subscription platform operates with the following role model \\n/// (it is assumed that the actor with the role is implemented as a contract).\\n/// `Service Provider` is a contract whose services are sold by subscription.\\n/// `Agent` - a contract that sells a subscription on behalf ofservice provider. \\n///  May receive sales commission\\n///  `Platform` - SubscriptionRegistry contract that performs processingsubscriptions, \\n///  fares, tickets\\n\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ServiceProvider.sol\\\";\\n\\n/// @title ServiceProviderOwnable  contract \\n/// @author Envelop project Team\\n/// @notice Contract implements Ownable pattern for service providers.\\n/// @dev Inherit this code in service provider contract that\\n/// want use subscription. \\ncontract ServiceProviderOwnable is ServiceProvider, Ownable {\\n\\n\\n    constructor(address _subscrRegistry)\\n        ServiceProvider(_subscrRegistry) \\n    {\\n        \\n    }\\n\\n     ///////////////////////////////////////\\n    //     Admin functions               ///\\n    ////////////////////////////////////////\\n    function newTariff(Tariff memory _newTariff) external onlyOwner returns(uint256 tariffIndex) {\\n        tariffIndex = _registerServiceTariff(_newTariff); \\n    }\\n\\n    function registerServiceTariff(Tariff memory _newTariff) \\n        external onlyOwner returns(uint256)\\n    {\\n        return _registerServiceTariff(_newTariff);\\n    }\\n\\n    function editServiceTariff(\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) external onlyOwner \\n    {\\n        _editServiceTariff(\\n            _tariffIndex, \\n            _timelockPeriod,\\n            _ticketValidPeriod,\\n            _counter,\\n            _isAvailable,\\n            _beneficiary\\n        );\\n    }\\n\\n    function addPayOption(\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external onlyOwner returns(uint256 index)\\n    {\\n        index = _addTariffPayOption(\\n            _tariffIndex,\\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    }\\n\\n    function editPayOption(\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external onlyOwner\\n    {\\n        _editTariffPayOption(\\n            _tariffIndex,\\n            _payWithIndex, \\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n\\n    }\\n\\n    function authorizeAgentForService(\\n        address _agent,\\n        uint256[] memory _serviceTariffIndexes\\n    ) external onlyOwner returns (uint256[] memory actualTariffs)\\n    {\\n        actualTariffs = _authorizeAgentForService(\\n            _agent,\\n            _serviceTariffIndexes\\n        );\\n\\n    }\\n\\n    function setSubscriptionRegistry(address _subscrRegistry) external onlyOwner {\\n        subscriptionRegistry = ISubscriptionRegistry(_subscrRegistry);\\n    }\\n\\n    function setSubscriptionOnOff(bool _isEnable) external onlyOwner {\\n        isEnabled = _isEnable;\\n    }\\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ServiceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) Subscription Registry Contract V2\\n\\n\\n/// The subscription platform operates with the following role model \\n/// (it is assumed that the actor with the role is implemented as a contract).\\n/// `Service Provider` is a contract whose services are sold by subscription.\\n/// `Agent` - a contract that sells a subscription on behalf ofservice provider. \\n///  May receive sales commission\\n///  `Platform` - SubscriptionRegistry contract that performs processingsubscriptions, \\n///  fares, tickets\\n\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"ISubscriptionRegistry.sol\\\";\\n\\n/// @title ServiceProvider abstract contract \\n/// @author Envelop project Team\\n/// @notice Abstract contract implements subscribing features.\\n/// For use with SubscriptionRegestry\\n/// @dev Use this code in service provider contract that\\n/// want use subscription. One contract = one servie\\n/// Please see example folder\\nabstract contract ServiceProvider {\\n\\n    address public serviceProvider;\\n    ISubscriptionRegistry public subscriptionRegistry;\\n    bool public isEnabled = true;\\n\\n    constructor(address _subscrRegistry) {\\n        require(_subscrRegistry != address(0), 'Non zero only');\\n        serviceProvider = address(this);\\n        subscriptionRegistry = ISubscriptionRegistry(_subscrRegistry);\\n    }\\n\\n    function _registerServiceTariff(Tariff memory _newTariff) \\n        internal virtual returns(uint256)\\n    {\\n        return subscriptionRegistry.registerServiceTariff(_newTariff);\\n    }\\n\\n    \\n    function _editServiceTariff(\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) internal virtual \\n    {\\n        subscriptionRegistry.editServiceTariff(\\n            _tariffIndex, \\n            _timelockPeriod,\\n            _ticketValidPeriod,\\n            _counter,\\n            _isAvailable,\\n            _beneficiary\\n        );\\n    }\\n\\n    function _addTariffPayOption(\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) internal virtual returns(uint256)\\n    {\\n        return subscriptionRegistry.addTariffPayOption(\\n            _tariffIndex,\\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    }\\n    \\n    function _editTariffPayOption(\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) internal virtual \\n    {\\n        subscriptionRegistry.editTariffPayOption(\\n            _tariffIndex,\\n            _payWithIndex, \\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    } \\n\\n    function _authorizeAgentForService(\\n        address _agent,\\n        uint256[] memory _serviceTariffIndexes\\n    ) internal virtual returns (uint256[] memory)\\n    {\\n        // TODO Check agent\\n        return subscriptionRegistry.authorizeAgentForService(\\n            _agent,\\n            _serviceTariffIndexes\\n        );\\n    }\\n\\n    ////////////////////////////\\n    //        Main USAGE      //\\n    ////////////////////////////\\n    function _checkAndFixSubscription(address _user) \\n        internal \\n        returns (bool ok) \\n    { \\n        if (isEnabled) {\\n            ok = subscriptionRegistry.checkAndFixUserSubscription(\\n                _user\\n            );\\n        } else {\\n            ok = true;\\n        }\\n    }\\n\\n    function _checkUserSubscription(address _user) \\n        internal \\n        view \\n        returns (bool ok, bool needFix)\\n    {\\n        if (isEnabled) {\\n            (ok, needFix) = subscriptionRegistry.checkUserSubscription(\\n                _user,\\n                address(this)  \\n            );\\n        } else {\\n            ok = true;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"ISubscriptionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SubscriptionType, PayOption, Tariff, Ticket} from \\\"SubscriptionRegistry.sol\\\";\\ninterface ISubscriptionRegistry   {\\n\\n    /**\\n     * @notice Add new tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _newTariff full encded Tariff object\\n     * @return last added tariff index in  Tariff[] array \\n     * for current Service Provider (msg.sender)\\n     */\\n    function registerServiceTariff(Tariff calldata _newTariff) external returns(uint256);\\n    \\n    \\n    /**\\n     * @notice Authorize agent for caller service provider\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _agent  - address of contract that implement Agent role \\n     * @param _serviceTariffIndexes  - array of index in `availableTariffs` array\\n     * that available for given `_agent` \\n     * @return full array of actual tarifs for this agent \\n     */\\n    function authorizeAgentForService(\\n        address _agent,\\n        uint256[] calldata _serviceTariffIndexes\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice By Ticket for subscription\\n     * @dev Call this method from Agent\\n     *\\n     * @param _service  - Service Provider address \\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _buyFor - address for whome this ticket would be bought \\n     * @param _payer - address of payer for this ticket\\n     * @return ticket structure that would be use for validate service process\\n     */ \\n    function buySubscription(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex,\\n        address _buyFor,\\n        address _payer\\n    ) external payable returns(Ticket memory ticket);\\n\\n    /**\\n     * @notice Edit tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _timelockPeriod - see SubscriptionType notice above\\n     * @param _ticketValidPeriod - see SubscriptionType notice above\\n     * @param _counter - see SubscriptionType notice above\\n     * @param _isAvailable - see SubscriptionType notice above\\n     * @param _beneficiary - see SubscriptionType notice above\\n     */\\n    function editServiceTariff(\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) external;\\n\\n    /**\\n     * @notice Add tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for add tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * @return last added PaymentOption index in array \\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function addTariffPayOption(\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external returns(uint256);\\n    \\n    /**\\n     * @notice Edit tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for edit tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function editTariffPayOption(\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external; \\n    \\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ok True in case ticket is valid\\n     * @return needFix True in case ticket has counter > 0\\n     */\\n    function checkUserSubscription(\\n        address _user, \\n        address _service\\n    ) external view returns (bool ok, bool needFix);\\n\\n\\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * Decrement ticket counter in case it > 0\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @return ok True in case ticket is valid\\n     */\\n    function checkAndFixUserSubscription(address _user) external returns (bool ok);\\n\\n    /**\\n     * @notice Decrement ticket counter in case it > 0\\n     * @dev Call this method from new SubscriptionRegistry in case of upgrade\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _serviceFromProxy  - address of service from more new SubscriptionRegistry contract \\n     */\\n    function fixUserSubscription(address _user, address _serviceFromProxy) external;\\n\\n\\n    /**\\n     * @notice Returns `_user` ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ticket\\n     */\\n    function getUserTicketForService(\\n        address _service,\\n        address _user\\n    ) external view returns(Ticket memory); \\n    \\n    /**\\n     * @notice Returns array of Tariff for `_service`\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @return Tariff array\\n     */\\n    function getTariffsForService(address _service) external view returns (Tariff[] memory);\\n\\n    /**\\n     * @notice Returns ticket price include any fees\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @return tulpe with payment token an ticket price \\n     */\\n    function getTicketPrice(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex\\n    ) external view returns (address, uint256);\\n\\n    /**\\n     * @notice Returns array of Tariff for `_service` assigned to `_agent`\\n     * @dev Call this method from any context\\n     *\\n     * @param _agent - address of Agent\\n     * @param _service - address of Service Provider\\n     * @return Tariff array\\n     */\\n    function getAvailableAgentsTariffForService(\\n        address _agent, \\n        address _service\\n    ) external view returns(Tariff[] memory); \\n}\"\r\n    },\r\n    \"SubscriptionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) Team. Subscription Registry Contract V2\\npragma solidity 0.8.19;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"ITrustedWrapper.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\nimport \\\"ISubscriptionRegistry.sol\\\";\\n\\n/// The subscription platform operates with the following role model \\n/// (it is assumed that the actor with the role is implemented as a contract).\\n/// `Service Provider` is a contract whose services are sold by subscription.\\n/// `Agent` - a contract that sells a subscription on behalf ofservice provider. \\n///  May receive sales commission\\n///  `Platform` - SubscriptionRegistry contract that performs processingsubscriptions, \\n///  fares, tickets\\n\\n    struct SubscriptionType {\\n        uint256 timelockPeriod;    // in seconds e.g. 3600*24*30*12 = 31104000 = 1 year\\n        uint256 ticketValidPeriod; // in seconds e.g. 3600*24*30    =  2592000 = 1 month\\n        uint256 counter;     // For case when ticket valid for N usage, e.g. for Min N NFTs          \\n        bool isAvailable;    // USe for stop using tariff because we can`t remove tariff from array \\n        address beneficiary; // Who will receive payment for tickets\\n    }\\n    struct PayOption {\\n        address paymentToken;   // token contract address or zero address for native token(ETC etc)\\n        uint256 paymentAmount;  // ticket price exclude any fees\\n        uint16 agentFeePercent; // 100%-10000, 20%-2000, 3%-300 \\n    }\\n\\n    struct Tariff {\\n        SubscriptionType subscription; // link to subscriptionType\\n        PayOption[] payWith; // payment option array. Use it for price in defferent tokens\\n    }\\n\\n    // native subscribtionManager tickets format\\n    struct Ticket {\\n        uint256 validUntil; // Unixdate, tickets not valid after\\n        uint256 countsLeft; // for tarif with fixed use counter\\n    }\\n\\n/// @title Base contract in Envelop Subscription Platform \\n/// @author Envelop Team\\n/// @notice You can use this contract for make and operate any on-chain subscriptions\\n/// @dev  Contract that performs processing subscriptions, fares(tariffs), tickets\\n/// @custom:please see example folder.\\ncontract SubscriptionRegistry is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public PERCENT_DENOMINATOR = 10000;\\n\\n    /// @notice Envelop Multisig contract\\n    address public platformOwner; \\n    \\n    /// @notice Platform owner can receive fee from each payments\\n    uint16 public platformFeePercent = 50; // 100%-10000, 20%-2000, 3%-300\\n\\n\\n    /// @notice address used for wrapp & lock incoming assets\\n    address  public mainWrapper; \\n    /// @notice Used in case upgrade this contract\\n    address  public previousRegistry; \\n    /// @notice Used in case upgrade this contract\\n    address  public proxyRegistry; \\n\\n    /// @notice Only white listed assets can be used on platform\\n    mapping(address => bool) public whiteListedForPayments;\\n    \\n    /// @notice from service(=smart contract address) to tarifs\\n    mapping(address => Tariff[]) public availableTariffs;\\n\\n    /// @notice from service to agent to available tarifs(tarif index);\\n    mapping(address => mapping(address => uint256[])) public agentServiceRegistry;\\n     \\n    \\n    /// @notice mapping from user addres to service contract address  to ticket\\n    mapping(address => mapping(address => Ticket)) public userTickets;\\n\\n    event PlatfromFeeChanged(uint16 indexed newPercent);\\n    event WhitelistPaymentTokenChanged(address indexed asset, bool indexed state);\\n    event TariffChanged(address indexed service, uint256 indexed tariffIndex);\\n    event TicketIssued(\\n        address indexed service, \\n        address indexed agent, \\n        address indexed forUser, \\n        uint256 tariffIndex\\n    );\\n\\n    constructor(address _platformOwner) {\\n        require(_platformOwner != address(0),'Zero platform fee receiver');\\n        platformOwner = _platformOwner;\\n    } \\n   \\n    /**\\n     * @notice Add new tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _newTariff full encded Tariff object\\n     * @return last added tariff index in  Tariff[] array \\n     * for current Service Provider (msg.sender)\\n     */\\n    function registerServiceTariff(Tariff calldata _newTariff) \\n        external \\n        returns(uint256)\\n    {\\n        // TODO\\n        // Tarif structure check\\n        // PayWith array whiteList check\\n        return _addTariff(msg.sender, _newTariff);\\n    }\\n\\n    /**\\n     * @notice Edit tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _timelockPeriod - see SubscriptionType notice above\\n     * @param _ticketValidPeriod - see SubscriptionType notice above\\n     * @param _counter - see SubscriptionType notice above\\n     * @param _isAvailable - see SubscriptionType notice above\\n     * @param _beneficiary - see SubscriptionType notice above\\n     */\\n    function editServiceTariff(\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) \\n        external\\n    {\\n        // TODO\\n        // Tariff structure check\\n        // PayWith array whiteList check\\n        _editTariff(\\n            msg.sender,\\n            _tariffIndex, \\n            _timelockPeriod,\\n            _ticketValidPeriod,\\n            _counter,\\n            _isAvailable,\\n            _beneficiary\\n        );\\n\\n    }\\n\\n    \\n    /**\\n     * @notice Add tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for add tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * @return last added PaymentOption index in array \\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function addTariffPayOption(\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external returns(uint256)\\n    {\\n        return _addTariffPayOption(\\n            msg.sender,\\n            _tariffIndex,\\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    }\\n\\n    /**\\n     * @notice Edit tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for edit tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function editTariffPayOption(\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external \\n    {\\n        _editTariffPayOption(\\n            msg.sender,\\n            _tariffIndex,\\n            _payWithIndex, \\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    }\\n\\n    /**\\n     * @notice Authorize agent for caller service provider\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _agent  - address of contract that implement Agent role \\n     * @param _serviceTariffIndexes  - array of index in `availableTariffs` array\\n     * that available for given `_agent` \\n     * @return full array of actual tarifs for this agent \\n     */\\n    function authorizeAgentForService(\\n        address _agent,\\n        uint256[] calldata _serviceTariffIndexes\\n    ) external virtual returns (uint256[] memory) \\n    {\\n        // remove previouse tariffs\\n        delete agentServiceRegistry[msg.sender][_agent];\\n        uint256[] storage currentServiceTariffsOfAgent = agentServiceRegistry[msg.sender][_agent];\\n        // check that adding tariffs still available\\n        for(uint256 i; i < _serviceTariffIndexes.length; ++ i) {\\n            if (availableTariffs[msg.sender][_serviceTariffIndexes[i]].subscription.isAvailable){\\n                currentServiceTariffsOfAgent.push(_serviceTariffIndexes[i]);\\n            }\\n        }\\n        return currentServiceTariffsOfAgent;\\n    }\\n    \\n     /**\\n     * @notice By Ticket for subscription\\n     * @dev Call this method from Agent\\n     *\\n     * @param _service  - Service Provider address \\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _buyFor - address for whome this ticket would be bought \\n     * @param _payer - address of payer for this ticket\\n     * @return ticket structure that would be use for validate service process\\n     */\\n    function buySubscription(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex,\\n        address _buyFor,\\n        address _payer\\n    ) external \\n      payable\\n      returns(Ticket memory ticket) {\\n        // Cant buy ticket for nobody\\n        require(_buyFor != address(0),'Cant buy ticket for nobody');\\n\\n        require(\\n            availableTariffs[_service][_tariffIndex].subscription.isAvailable,\\n            'This subscription not available'\\n        );\\n\\n        // Not used in this implementation\\n        // require(\\n        //     availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount > 0,\\n        //     'This Payment option not available'\\n        // );\\n\\n        // Check that agent is authorized for purchace of this service\\n        require(\\n            _isAgentAuthorized(msg.sender, _service, _tariffIndex), \\n            'Agent not authorized for this service tariff' \\n        );\\n        \\n        (bool isValid, bool needFix) = _isTicketValid(_buyFor, _service);\\n        require(!isValid, 'Only one valid ticket at time');\\n\\n        //lets safe user ticket (only one ticket available in this version)\\n        ticket = Ticket(\\n            availableTariffs[_service][_tariffIndex].subscription.ticketValidPeriod + block.timestamp,\\n            availableTariffs[_service][_tariffIndex].subscription.counter\\n        );\\n        userTickets[_buyFor][_service] = ticket;\\n\\n        // Lets receive payment tokens FROM sender\\n        if (availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount > 0){\\n            _processPayment(_service, _tariffIndex, _payWithIndex, _payer);\\n        }\\n        emit TicketIssued(_service, msg.sender, _buyFor, _tariffIndex);\\n    }\\n\\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * Decrement ticket counter in case it > 0\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @return ok True in case ticket is valid\\n     */\\n    function checkAndFixUserSubscription(\\n        address _user\\n    ) external returns (bool ok){\\n        \\n        address _service = msg.sender;\\n        // Check user ticket\\n        (bool isValid, bool needFix) = _isTicketValid(_user, msg.sender);\\n        \\n        // Proxy to previos\\n        if (!isValid && previousRegistry != address(0)) {\\n            (isValid, needFix) = ISubscriptionRegistry(previousRegistry).checkUserSubscription(\\n                _user, \\n                _service\\n            );\\n            // Case when valid ticket stored in previousManager\\n            if (isValid ) {\\n                if (needFix){\\n                    ISubscriptionRegistry(previousRegistry).fixUserSubscription(\\n                        _user, \\n                        _service\\n                    );\\n                }\\n                ok = true;\\n                return ok;\\n            }\\n        }\\n        require(isValid,'Valid ticket not found');\\n        \\n        // Fix action (for subscription with counter)\\n        if (needFix){\\n            _fixUserSubscription(_user, msg.sender);    \\n        }\\n                \\n        ok = true;\\n    }\\n\\n     /**\\n     * @notice Decrement ticket counter in case it > 0\\n     * @dev Call this method from new SubscriptionRegistry in case of upgrade\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _serviceFromProxy  - address of service from more new SubscriptionRegistry contract \\n     */\\n    function fixUserSubscription(\\n        address _user,\\n        address _serviceFromProxy\\n    ) public {\\n        require(proxyRegistry !=address(0) && msg.sender == proxyRegistry,\\n            'Only for future registry'\\n        );\\n        _fixUserSubscription(_user, _serviceFromProxy);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////\\n    \\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ok True in case ticket is valid\\n     * @return needFix True in case ticket has counter > 0\\n     */\\n    function checkUserSubscription(\\n        address _user, \\n        address _service\\n    ) external view returns (bool ok, bool needFix) {\\n        (ok, needFix)  = _isTicketValid(_user, _service);\\n        if (!ok && previousRegistry != address(0)) {\\n            (ok, needFix) = ISubscriptionRegistry(previousRegistry).checkUserSubscription(\\n                _user, \\n                _service\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns `_user` ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ticket\\n     */\\n    function getUserTicketForService(\\n        address _service,\\n        address _user\\n    ) public view returns(Ticket memory) \\n    {\\n        return userTickets[_user][_service];\\n    }\\n\\n    /**\\n     * @notice Returns array of Tariff for `_service`\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @return Tariff array\\n     */\\n    function getTariffsForService(address _service) external view returns (Tariff[] memory) {\\n        return availableTariffs[_service];\\n    }\\n\\n    /**\\n     * @notice Returns ticket price include any fees\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @return tulpe with payment token an ticket price \\n     */\\n    function getTicketPrice(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex\\n    ) public view virtual returns (address, uint256) \\n    {\\n        if (availableTariffs[_service][_tariffIndex].subscription.timelockPeriod != 0)\\n        {\\n            return(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n        } else {\\n            return(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                + availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                    *availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].agentFeePercent\\n                    /PERCENT_DENOMINATOR\\n                + availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                        *_platformFeePercent(_service, _tariffIndex, _payWithIndex) \\n                        /PERCENT_DENOMINATOR\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns array of Tariff for `_service` assigned to `_agent`\\n     * @dev Call this method from any context\\n     *\\n     * @param _agent - address of Agent\\n     * @param _service - address of Service Provider\\n     * @return tuple with two arrays: indexes and Tariffs\\n     */\\n    function getAvailableAgentsTariffForService(\\n        address _agent, \\n        address _service\\n    ) external view virtual returns(uint256[] memory, Tariff[] memory) \\n    {\\n        //First need get count of tarifs that still available\\n        uint256 availableCount;\\n        for (uint256 i; i < agentServiceRegistry[_service][_agent].length; ++i){\\n            if (availableTariffs[_service][\\n                  agentServiceRegistry[_service][_agent][i]\\n                ].subscription.isAvailable\\n            ) {++availableCount;}\\n        }\\n        \\n        Tariff[]  memory tariffs = new Tariff[](availableCount);\\n        uint256[] memory indexes = new uint256[](availableCount);\\n        for (uint256 i; i < agentServiceRegistry[_service][_agent].length; ++i){\\n            if (availableTariffs[_service][\\n                  agentServiceRegistry[_service][_agent][i]\\n                ].subscription.isAvailable\\n            ) \\n            {\\n                tariffs[availableCount - 1] = availableTariffs[_service][\\n                  agentServiceRegistry[_service][_agent][i]\\n                ];\\n                indexes[availableCount - 1] = agentServiceRegistry[_service][_agent][i];\\n                --availableCount;\\n            }\\n        }\\n        return (indexes, tariffs);\\n    }    \\n    ////////////////////////////////////////////////////////////////\\n    //////////     Admins                                     //////\\n    ////////////////////////////////////////////////////////////////\\n\\n    function setAssetForPaymentState(address _asset, bool _isEnable)\\n        external onlyOwner \\n    {\\n        whiteListedForPayments[_asset] = _isEnable;\\n        emit WhitelistPaymentTokenChanged(_asset, _isEnable);\\n    }\\n\\n    function setMainWrapper(address _wrapper) external onlyOwner {\\n        mainWrapper = _wrapper;\\n    }\\n\\n    function setPlatformOwner(address _newOwner) external {\\n        require(msg.sender == platformOwner, 'Only platform owner');\\n        require(_newOwner != address(0),'Zero platform fee receiver');\\n        platformOwner = _newOwner;\\n    }\\n\\n    function setPlatformFeePercent(uint16 _newPercent) external {\\n        require(msg.sender == platformOwner, 'Only platform owner');\\n        platformFeePercent = _newPercent;\\n        emit PlatfromFeeChanged(platformFeePercent);\\n    }\\n\\n    \\n\\n    function setPreviousRegistry(address _registry) external onlyOwner {\\n        previousRegistry = _registry;\\n    }\\n\\n    function setProxyRegistry(address _registry) external onlyOwner {\\n        proxyRegistry = _registry;\\n    }\\n    /////////////////////////////////////////////////////////////////////\\n    \\n    function _processPayment(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex,\\n        address _payer\\n    ) \\n        internal \\n        virtual \\n        returns(bool)\\n    {\\n        // there are two payment method for this implementation.\\n        // 1. with wrap and lock in asset (no fees)\\n        // 2. simple payment (agent & platform fee enabled)\\n        if (availableTariffs[_service][_tariffIndex].subscription.timelockPeriod != 0){\\n            require(msg.value == 0, 'Ether Not accepted in this method');\\n            // 1. with wrap and lock in asset\\n            IERC20(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n            ).safeTransferFrom(\\n                _payer, \\n                address(this),\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n\\n            // Lets approve received for wrap \\n            IERC20(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n            ).safeApprove(\\n                mainWrapper,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n\\n            // Lets wrap with timelock and appropriate params\\n            ETypes.INData memory _inData;\\n            ETypes.AssetItem[] memory _collateralERC20 = new ETypes.AssetItem[](1);\\n            ETypes.Lock[] memory timeLock =  new ETypes.Lock[](1);\\n            // Only need set timelock for this wNFT\\n            timeLock[0] = ETypes.Lock(\\n                0x00, // timelock\\n                availableTariffs[_service][_tariffIndex].subscription.timelockPeriod + block.timestamp\\n            ); \\n            _inData = ETypes.INData(\\n                ETypes.AssetItem(\\n                    ETypes.Asset(ETypes.AssetType.EMPTY, address(0)),\\n                    0,0\\n                ),          // INAsset\\n                address(0), // Unwrap destinition    \\n                new ETypes.Fee[](0), // Fees\\n                //new ETypes.Lock[](0), // Locks\\n                timeLock,\\n                new ETypes.Royalty[](0), // Royalties\\n                ETypes.AssetType.ERC721, // Out type\\n                0, // Out Balance\\n                0x0000 // Rules\\n            );\\n\\n            _collateralERC20[0] = ETypes.AssetItem(\\n                ETypes.Asset(\\n                    ETypes.AssetType.ERC20,\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                ),\\n                0,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n            \\n            ITrustedWrapper(mainWrapper).wrap(\\n                _inData,\\n                _collateralERC20,\\n                _payer\\n            );\\n\\n        } else {\\n            // 2. simple payment\\n            if (availableTariffs[_service][_tariffIndex]\\n                .payWith[_payWithIndex]\\n                .paymentToken != address(0)\\n            ) \\n            {\\n                // pay with erc20 \\n                require(msg.value == 0, 'Ether Not accepted in this method');\\n                // 2.1. Body payment  \\n                IERC20(\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                ).safeTransferFrom(\\n                    _payer, \\n                    availableTariffs[_service][_tariffIndex].subscription.beneficiary,\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                );\\n\\n                // 2.2. Agent fee payment\\n                IERC20(\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                ).safeTransferFrom(\\n                    _payer, \\n                    msg.sender,\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                     *availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].agentFeePercent\\n                     /PERCENT_DENOMINATOR\\n                );\\n\\n                // 2.3. Platform fee \\n                uint256 _pFee = _platformFeePercent(_service, _tariffIndex, _payWithIndex); \\n                if (_pFee > 0) {\\n                    IERC20(\\n                        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                    ).safeTransferFrom(\\n                        _payer, \\n                        platformOwner, //\\n                        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                          *_pFee\\n                          /PERCENT_DENOMINATOR\\n                    );\\n                }\\n\\n            } else {\\n                // pay with native token(eth, bnb, etc)\\n                (, uint256 needPay) = getTicketPrice(_service, _tariffIndex,_payWithIndex);\\n                require(msg.value >= needPay, 'Not enough ether');\\n                // 2.4. Body ether payment\\n                sendValue(\\n                    payable(availableTariffs[_service][_tariffIndex].subscription.beneficiary),\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                );\\n\\n                // 2.5. Agent fee payment\\n                sendValue(\\n                    payable(msg.sender),\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                      *availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].agentFeePercent\\n                      /PERCENT_DENOMINATOR\\n                );\\n\\n                // 2.3. Platform fee \\n                uint256 _pFee = _platformFeePercent(_service, _tariffIndex, _payWithIndex); \\n                if (_pFee > 0) {\\n\\n                    sendValue(\\n                        payable(platformOwner),\\n                        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                          *_pFee\\n                          /PERCENT_DENOMINATOR\\n                    );\\n                }\\n                // return change\\n                if  ((msg.value - needPay) > 0) {\\n                    address payable s = payable(_payer);\\n                    s.transfer(msg.value - needPay);\\n                }\\n            }\\n        }\\n    }\\n\\n    // In this impementation params not used. \\n    // Can be ovveriden in other cases\\n    function _platformFeePercent(\\n        address _service, \\n        uint256 _tariffIndex, \\n        uint256  _payWithIndex\\n    ) internal view virtual returns(uint256) \\n    {\\n        return platformFeePercent;\\n    }\\n\\n    function _addTariff(address _service, Tariff calldata _newTariff) \\n        internal returns(uint256) \\n    {\\n        require (_newTariff.payWith.length > 0, 'No payment method');\\n        for (uint256 i; i < _newTariff.payWith.length; ++i){\\n            require(\\n                whiteListedForPayments[_newTariff.payWith[i].paymentToken],\\n                'Not whitelisted for payments'\\n            );      \\n        }\\n        require(\\n            _newTariff.subscription.ticketValidPeriod > 0 \\n            || _newTariff.subscription.counter > 0,\\n            'Tariff has no valid ticket option'  \\n        );\\n        availableTariffs[_service].push(_newTariff);\\n        emit TariffChanged(_service, availableTariffs[_service].length - 1);\\n        return availableTariffs[_service].length - 1;\\n    }\\n\\n\\n    function _editTariff(\\n        address _service,\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) internal  \\n    {\\n        availableTariffs[_service][_tariffIndex].subscription.timelockPeriod    = _timelockPeriod;\\n        availableTariffs[_service][_tariffIndex].subscription.ticketValidPeriod = _ticketValidPeriod;\\n        availableTariffs[_service][_tariffIndex].subscription.counter = _counter;\\n        availableTariffs[_service][_tariffIndex].subscription.isAvailable = _isAvailable;    \\n        availableTariffs[_service][_tariffIndex].subscription.beneficiary = _beneficiary;    \\n        emit TariffChanged(_service, _tariffIndex);\\n    }\\n   \\n    function _addTariffPayOption(\\n        address _service,\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) internal returns(uint256)\\n    {\\n        require(whiteListedForPayments[_paymentToken], 'Not whitelisted for payments');\\n        availableTariffs[_service][_tariffIndex].payWith.push(\\n            PayOption(_paymentToken, _paymentAmount, _agentFeePercent)\\n        ); \\n        emit TariffChanged(_service, _tariffIndex);\\n        return availableTariffs[_service][_tariffIndex].payWith.length - 1;\\n    }\\n\\n    function _editTariffPayOption(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) internal  \\n    {\\n        require(whiteListedForPayments[_paymentToken], 'Not whitelisted for payments');\\n        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex] \\n        = PayOption(_paymentToken, _paymentAmount, _agentFeePercent);  \\n        emit TariffChanged(_service, _tariffIndex);  \\n    }\\n\\n    function _fixUserSubscription(\\n        address _user,\\n        address _service\\n    ) internal {\\n       \\n        // Fix action (for subscription with counter)\\n        if (userTickets[_user][_service].countsLeft > 0) {\\n            -- userTickets[_user][_service].countsLeft; \\n        }\\n    }\\n\\n        \\n   function _isTicketValid(address _user, address _service) \\n        internal \\n        view \\n        returns (bool isValid, bool needFix ) \\n    {\\n        isValid =  userTickets[_user][_service].validUntil > block.timestamp \\n            || userTickets[_user][_service].countsLeft > 0;\\n        needFix =  userTickets[_user][_service].countsLeft > 0;   \\n    }\\n\\n    function _isAgentAuthorized(\\n        address _agent, \\n        address _service, \\n        uint256 _tariffIndex\\n    ) \\n        internal\\n        view\\n        returns(bool authorized)\\n    {\\n        for (uint256 i; i < agentServiceRegistry[_service][_agent].length; ++ i){\\n            if (agentServiceRegistry[_service][_agent][i] == _tariffIndex){\\n                authorized = true;\\n                return authorized;\\n            }\\n        }\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"draft-IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ITrustedWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IWrapper.sol\\\";\\n\\ninterface ITrustedWrapper is IWrapper  {\\n\\n    function trustedOperator() external view returns(address);    \\n    \\n    function wrapUnsafe(\\n        ETypes.INData calldata _inData, \\n        ETypes.AssetItem[] calldata _collateral, \\n        address _wrappFor\\n    ) \\n        external\\n        payable\\n        returns (ETypes.AssetItem memory); \\n\\n    function transferIn(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from\\n    ) \\n        external\\n        payable  \\n    returns (uint256 _transferedValue);\\n   \\n}\"\r\n    },\r\n    \"IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n//import \\\"IERC721Enumerable.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IWrapper  {\\n\\n    event WrappedV1(\\n        address indexed inAssetAddress,\\n        address indexed outAssetAddress, \\n        uint256 indexed inAssetTokenId, \\n        uint256 outTokenId,\\n        address wnftFirstOwner,\\n        uint256 nativeCollateralAmount,\\n        bytes2  rules\\n    );\\n\\n    event UnWrappedV1(\\n        address indexed wrappedAddress,\\n        address indexed originalAddress,\\n        uint256 indexed wrappedId, \\n        uint256 originalTokenId, \\n        address beneficiary, \\n        uint256 nativeCollateralAmount,\\n        bytes2  rules \\n    );\\n\\n    event CollateralAdded(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId,\\n        uint8   assetType,\\n        address collateralAddress,\\n        uint256 collateralTokenId,\\n        uint256 collateralBalance\\n    );\\n\\n    event PartialUnWrapp(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId,\\n        uint256 lastCollateralIndex\\n    );\\n    event SuspiciousFail(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId, \\n        address indexed failedContractAddress\\n    );\\n\\n    event EnvelopFee(\\n        address indexed receiver,\\n        address indexed wNFTConatract,\\n        uint256 indexed wNFTTokenId,\\n        uint256 amount\\n    );\\n\\n    function wrap(\\n        ETypes.INData calldata _inData, \\n        ETypes.AssetItem[] calldata _collateral, \\n        address _wrappFor\\n    ) \\n        external \\n        payable \\n    returns (ETypes.AssetItem memory);\\n\\n    // function wrapUnsafe(\\n    //     ETypes.INData calldata _inData, \\n    //     ETypes.AssetItem[] calldata _collateral, \\n    //     address _wrappFor\\n    // ) \\n    //     external \\n    //     payable\\n    // returns (ETypes.AssetItem memory);\\n\\n    function addCollateral(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem[] calldata _collateral\\n    ) external payable;\\n\\n    // function addCollateralUnsafe(\\n    //     address _wNFTAddress, \\n    //     uint256 _wNFTTokenId, \\n    //     ETypes.AssetItem[] calldata _collateral\\n    // ) \\n    //     external \\n    //     payable;\\n\\n    function unWrap(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external; \\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external; \\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        bool _isEmergency\\n    ) external;\\n\\n    function chargeFees(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        address _from, \\n        address _to,\\n        bytes1 _feeType\\n    ) \\n        external  \\n        returns (bool);   \\n\\n    ////////////////////////////////////////////////////////////////////// \\n    \\n    function MAX_COLLATERAL_SLOTS() external view returns (uint256);\\n    function protocolTechToken() external view returns (address);\\n    function protocolWhiteList() external view returns (address);\\n    //function trustedOperators(address _operator) external view returns (bool); \\n    //function lastWNFTId(ETypes.AssetType _assetType) external view returns (ETypes.NFTItem); \\n\\n    function getWrappedToken(address _wNFTAddress, uint256 _wNFTTokenId) \\n        external \\n        view \\n        returns (ETypes.WNFT memory);\\n\\n    function getOriginalURI(address _wNFTAddress, uint256 _wNFTTokenId) \\n        external \\n        view \\n        returns(string memory); \\n    \\n    function getCollateralBalanceAndIndex(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId,\\n        ETypes.AssetType _collateralType, \\n        address _erc,\\n        uint256 _tokenId\\n    ) external view returns (uint256, uint256);\\n   \\n}\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"LibEnvelopTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. \\npragma solidity 0.8.19;\\n\\n/// @title Flibrary ETypes in Envelop PrtocolV1 \\n/// @author Envelop Team\\n/// @notice This contract implement main protocol's data types\\nlibrary ETypes {\\n\\n    enum AssetType {EMPTY, NATIVE, ERC20, ERC721, ERC1155, FUTURE1, FUTURE2, FUTURE3}\\n    \\n    struct Asset {\\n        AssetType assetType;\\n        address contractAddress;\\n    }\\n\\n    struct AssetItem {\\n        Asset asset;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct NFTItem {\\n        address contractAddress;\\n        uint256 tokenId;   \\n    }\\n\\n    struct Fee {\\n        bytes1 feeType;\\n        uint256 param;\\n        address token; \\n    }\\n\\n    struct Lock {\\n        bytes1 lockType;\\n        uint256 param; \\n    }\\n\\n    struct Royalty {\\n        address beneficiary;\\n        uint16 percent;\\n    }\\n\\n    struct WNFT {\\n        AssetItem inAsset;\\n        AssetItem[] collateral;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        bytes2 rules;\\n\\n    }\\n\\n    struct INData {\\n        AssetItem inAsset;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        AssetType outType;\\n        uint256 outBalance;      //0- for 721 and any amount for 1155\\n        bytes2 rules;\\n\\n    }\\n\\n    struct WhiteListItem {\\n        bool enabledForFee;\\n        bool enabledForCollateral;\\n        bool enabledRemoveFromCollateral;\\n        address transferFeeModel;\\n    }\\n\\n    struct Rules {\\n        bytes2 onlythis;\\n        bytes2 disabled;\\n    }\\n\\n}\"\r\n    },\r\n    \"NFTKiosk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) NFT(wNFT) Kiosk.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"TokenServiceExtended.sol\\\";\\n\\nimport \\\"ERC721Holder.sol\\\";\\nimport \\\"ERC1155Holder.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\n//import \\\"KTypes.sol\\\";\\nimport \\\"IDisplayPriceModel.sol\\\";\\n//import \\\"DefaultPriceModel.sol\\\";\\n\\n\\n\\ncontract NFTKiosk is TokenServiceExtended, ReentrancyGuard {\\n\\n    uint256 constant public DEFAULT_INDEX = 0;\\n    uint256 constant public PERCENT_DENOMINATOR = 10000;\\n    bytes32 immutable public DEFAULT_DISPLAY = hlpHashString('NFTKiosk');\\n\\n    mapping(bytes32 => KTypes.Display) public displays;\\n\\n    // mapping from contract address & tokenId to Place(displayHash and index)\\n    mapping(address => mapping(uint256 => KTypes.Place)) public assetAtDisplay;\\n\\n    event DisplayChanged(\\n        bytes32 indexed display,\\n        address indexed owner,\\n        address indexed beneficiary, // who will receive assets from sale\\n        uint256 enableAfter,\\n        uint256 disableAfter,\\n        address priceModel,\\n        string name\\n    );\\n\\n    event DisplayTransfer(\\n        bytes32 indexed display,\\n        address indexed from,\\n        address indexed newOwner\\n    );\\n\\n    event ItemAddedToDisplay(\\n        bytes32 indexed display,\\n        address indexed assetContract,\\n        uint256 indexed assetTokenId,\\n        uint256 placeIndex\\n    );\\n\\n    event ItemPriceChanged(\\n        bytes32 indexed display,\\n        address indexed assetContract,\\n        uint256 indexed assetTokenId\\n    );\\n\\n    event EnvelopPurchase(\\n        bytes32 indexed display,\\n        address indexed assetContract,\\n        uint256 indexed assetTokenId\\n    );\\n\\n    event EnvelopReferrer(\\n        address indexed referrer,\\n        address indexed customer,\\n        address indexed payWithToken,\\n        uint256 payWithAmount,\\n        uint16 percentDiscount\\n    );\\n\\n    \\n\\n    \\n    function setDisplayParams(\\n        string calldata _name,\\n        address _beneficiary, // who will receive assets from sale\\n        uint256 _enableAfter,\\n        uint256 _disableAfter,\\n        address _priceModel\\n    ) public virtual \\n    {\\n        // require(\\n        //     displays[DEFAULT_DISPLAY].owner != address(0),\\n        //     \\\"DEFAULT DISPLAY must be created first\\\"\\n        // );\\n        // TODO Check that model is whitelisted.. ??Ask Alex\\n        bytes32 _displayNameHash = hlpHashString(_name);\\n        require(\\n            (displays[_displayNameHash].owner == msg.sender    // edit existing\\n            ||displays[_displayNameHash].owner == address(0)), // create new\\n            \\\"Only for Display Owner\\\"\\n        );\\n        _setDisplayParams(\\n                _displayNameHash,\\n                msg.sender, \\n                _beneficiary, // who will receive assets from sale\\n                _enableAfter,\\n                _disableAfter,\\n                _priceModel\\n        );\\n        \\n        emit DisplayChanged(\\n            _displayNameHash,\\n            msg.sender,\\n            _beneficiary, // who will receive assets from sale\\n            _enableAfter,\\n            _disableAfter,\\n            _priceModel,\\n            _name\\n        );\\n    }\\n\\n    function transferDisplay(address _to, bytes32 _displayNameHash) \\n        external \\n    {\\n        require(displays[_displayNameHash].owner == msg.sender, \\\"Only for Display Owner\\\");\\n        displays[_displayNameHash].owner = _to;\\n        emit DisplayTransfer(_displayNameHash, msg.sender, _to);\\n    }\\n\\n    // TODO  Check that display exists\\n    function addItemToDisplay(\\n        bytes32 _displayNameHash,\\n        ETypes.AssetItem memory _assetItem,\\n        KTypes.Price[] calldata _prices\\n    ) \\n        public \\n        returns  (KTypes.Place memory place) \\n    {\\n        // We need two checks. \\n        // 1. Only item with zero place (display and index) can be added \\n        // to exact display\\n        \\n        KTypes.Place memory p = \\n            assetAtDisplay[_assetItem.asset.contractAddress][_assetItem.tokenId];\\n        require(\\n            p.display == bytes32(0) && p.index == 0, \\n            \\\"Already at display\\\"\\n        );\\n        \\n        // 2. Item has been transfered to this contract\\n        // Next check is For 721 only. Because 1155 standard \\n        // has no `ownerOf` method. Hence we can't use simple (implicit)\\n        // erc1155 transfer for put item at display. \\n        \\n        // In this implementation you cant`t 'edit'  display after\\n        // simple (implicit) adding item to display \\n        // if (_ownerOf(_assetItem) != address(this)) {\\n        \\n        // Do transfer to this contract\\n        require(_assetItem.amount\\n            <=_transferSafe(_assetItem, msg.sender, address(this)),\\n            \\\"Insufficient balance after NFT transfer\\\"    \\n        );\\n        // }\\n\\n        // DEFAULT_DISPLAY accept items from any  addresses\\n        if (msg.sender != displays[_displayNameHash].owner) {\\n            require(\\n                _displayNameHash == DEFAULT_DISPLAY, \\n                \\\"Only Default Display allow for any\\\"\\n            );\\n        }\\n\\n        place = _addItemRecordAtDisplay(\\n            _displayNameHash, \\n            msg.sender,  // Item Owner\\n            _assetItem,\\n            _prices\\n        );\\n\\n        emit ItemAddedToDisplay(\\n            place.display,\\n            _assetItem.asset.contractAddress,\\n            _assetItem.tokenId,\\n            place.index\\n        );\\n    }\\n\\n    function addBatchItemsToDisplayWithSamePrice(\\n        bytes32 _displayNameHash,\\n        ETypes.AssetItem[] memory _assetItems,\\n        KTypes.Price[] calldata _prices\\n    ) \\n        external \\n        returns  (KTypes.Place[] memory) \\n    {\\n        \\n        // Lets calc and create array var for result\\n        KTypes.Place[] memory pls = new KTypes.Place[](_assetItems.length);\\n        for (uint256 i = 0; i < _assetItems.length; ++i){\\n            pls[i] = addItemToDisplay(_displayNameHash,_assetItems[i],_prices);\\n        }\\n        return pls;\\n    }\\n\\n    function addAssetItemPriceAtIndex(\\n        ETypes.AssetItem calldata _assetItem,\\n        KTypes.Price[] calldata _prices\\n    ) \\n        external \\n    {\\n        KTypes.Place memory p = getAssetItemPlace(_assetItem);\\n        // check that sender is item owner or display owner(if item owner not set)\\n        if (displays[p.display].items[p.index].owner != msg.sender) \\n        {\\n            require(\\n                displays[p.display].owner == msg.sender, \\n                \\\"Only display owner can edit price\\\"\\n            );\\n        }\\n        _addItemPriceAtIndex(p.display, p.index, _prices);\\n        emit ItemPriceChanged(\\n            p.display,\\n            _assetItem.asset.contractAddress,\\n            _assetItem.tokenId\\n        ); \\n    }\\n\\n    function editAssetItemPriceAtIndex(\\n        ETypes.AssetItem calldata _assetItem,\\n        uint256 _priceIndex,\\n        KTypes.Price calldata _price\\n    ) \\n        external \\n    {\\n\\n        KTypes.Place memory p = getAssetItemPlace(_assetItem);\\n        // check that sender is item owner or display owner(if item owner not set)\\n        if (displays[p.display].items[p.index].owner != msg.sender) \\n        {\\n            require(displays[p.display].owner == msg.sender, \\\"Only for display owner\\\");\\n        }\\n        _editItemPriceAtIndex(p.display, p.index, _priceIndex ,_price);\\n        emit ItemPriceChanged(\\n            p.display,\\n            _assetItem.asset.contractAddress,\\n            _assetItem.tokenId\\n        );\\n\\n    }\\n\\n    function removeLastPersonalPriceForAssetItem(\\n        ETypes.AssetItem calldata _assetItem\\n    ) \\n        external \\n    {\\n        KTypes.Place memory p = getAssetItemPlace(_assetItem);\\n        // check that sender is item owner or display owner(if item owner not set)\\n        if (displays[p.display].items[p.index].owner != msg.sender) \\n        {\\n            require(displays[p.display].owner == msg.sender, \\\"Only for display owner\\\");\\n        }\\n        \\n        KTypes.Price[] storage priceArray = displays[p.display].items[p.index].prices;\\n        priceArray.pop();\\n        emit ItemPriceChanged(\\n            p.display,\\n            _assetItem.asset.contractAddress,\\n            _assetItem.tokenId\\n        );\\n    }\\n\\n    function buyAssetItem(\\n        ETypes.AssetItem calldata _assetItem,\\n        uint256 _priceIndex,\\n        address _buyer,\\n        address _referrer,\\n        string calldata _promo\\n    ) external payable nonReentrant\\n    {\\n        // 1.Define exact asset price with discounts\\n        ETypes.AssetItem memory payWithItem;\\n        { // Against stack too deep\\n            (KTypes.Price[] memory pArray, KTypes.Discount[] memory dArray) \\n                = _getAssetItemPricesAndDiscounts(\\n                    _assetItem, _buyer, _referrer, hlpHashString(_promo)\\n            );\\n\\n            uint256 totalDiscountPercent;\\n            for (uint256 i = 0; i < dArray.length; ++ i){\\n                totalDiscountPercent += dArray[i].dsctPercent;\\n                if (dArray[i].dsctType ==KTypes.DiscountType.REFERRAL){\\n                    emit EnvelopReferrer(\\n                        _referrer, msg.sender, \\n                        pArray[_priceIndex].payWith,\\n                        pArray[_priceIndex].amount,\\n                        uint16(dArray[i].dsctPercent)\\n                    );\\n                }\\n            } \\n            \\n            payWithItem = ETypes.AssetItem(    \\n                ETypes.Asset(\\n                    pArray[_priceIndex].payWith == address(0)\\n                        ?ETypes.AssetType.NATIVE\\n                        :ETypes.AssetType.ERC20, \\n                        pArray[_priceIndex].payWith\\n                ), \\n                0, \\n                pArray[_priceIndex].amount \\n                    * (PERCENT_DENOMINATOR - totalDiscountPercent) / PERCENT_DENOMINATOR\\n            );\\n        }\\n        \\n        // 2. Manage display records for different cases\\n        address beneficiary;\\n        KTypes.Place memory p = getAssetItemPlace(_assetItem);\\n        //  Case when NFT just transfered to kiosk contract\\n        if (p.display == bytes32(0)) {\\n            //isImplicitAdded = true;\\n            beneficiary = displays[DEFAULT_DISPLAY].beneficiary;\\n            p.display = DEFAULT_DISPLAY;\\n            p.index = DEFAULT_INDEX;\\n        } else {\\n            beneficiary = displays[p.display].items[p.index].owner; \\n            // 2.1 remove item from display\\n            if (p.index != displays[p.display].items.length - 1) {\\n                // if asset item is not last array element\\n                // then replace it with last element\\n                displays[p.display].items[p.index] = displays[p.display].items[\\n                    displays[p.display].items.length - 1\\n                ]; \\n                // and change last element that was moved in above string\\n                assetAtDisplay[\\n                    displays[p.display].items[p.index].nft.asset.contractAddress // address of just moved nft\\n                ][\\n                    displays[p.display].items[p.index].nft.tokenId\\n                ] = KTypes.Place(\\n                   p.display,\\n                   p.index\\n                );\\n            }\\n            // remove last element from array\\n            displays[p.display].items.pop();\\n            \\n            // delete mapping element\\n            delete assetAtDisplay[_assetItem.asset.contractAddress][_assetItem.tokenId];\\n        }\\n        \\n        require(\\n            displays[p.display].enableAfter < block.timestamp\\n            && displays[p.display].disableAfter >= block.timestamp, \\n            \\\"Only in time\\\"\\n        );\\n\\n               \\n        // 3.Receive payment\\n        // There are two different cases: native token and erc20\\n        if (payWithItem.asset.assetType ==ETypes.AssetType.NATIVE )\\n        //if (pArray[_priceIndex].payWith == address(0)) \\n        {\\n            // Native token payment\\n            require(payWithItem.amount \\n                <= _transferSafe(payWithItem, address(this), beneficiary),\\n                \\\"Insufficient balance after payment transfer\\\"\\n            );\\n            // Return change\\n            if  ((msg.value - payWithItem.amount) > 0) {\\n                address payable s = payable(msg.sender);\\n                s.transfer(msg.value - payWithItem.amount);\\n            }\\n        } else {\\n            // ERC20 token payment\\n            require(msg.value == 0, \\\"Only ERC20 tokens\\\");\\n            require(payWithItem.amount \\n                <=_transferSafe(payWithItem, msg.sender, beneficiary),\\n                \\\"Insufficient balance after payment transfer\\\"\\n            );\\n        }\\n\\n        // 4. Send asset to buyer\\n        _transferSafe(_assetItem, address(this), _buyer);\\n\\n        emit EnvelopPurchase(p.display, _assetItem.asset.contractAddress, _assetItem.tokenId);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    function getDisplayOwner(bytes32 _displayNameHash) public view returns (address) {\\n        return displays[_displayNameHash].owner;\\n    }\\n\\n    function getDisplay(bytes32 _displayNameHash) \\n        public \\n        view \\n        returns (KTypes.Display memory) \\n    {\\n        return displays[_displayNameHash];\\n    }\\n\\n    function getAssetItemPlace(ETypes.AssetItem memory _assetItem) \\n        public \\n        view \\n        returns  (KTypes.Place memory) \\n    {\\n        if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            // ERC721\\n            require(\\n                _ownerOf(_assetItem) == address(this), \\n                \\\"Asset not transfered to kiosk\\\"\\n            );\\n        } else {\\n            //ERC1155 or other**\\n            require(\\n                _balanceOf(_assetItem, address(this)) >= _assetItem.amount, \\n                \\\"Asset not transfered to kiosk\\\"\\n            );\\n        }\\n        return assetAtDisplay[_assetItem.asset.contractAddress][_assetItem.tokenId];\\n    }\\n\\n    function getAssetItemPricesAndDiscounts(\\n        ETypes.AssetItem memory _assetItem,\\n        address _buyer,\\n        address _referrer,\\n        string calldata _promo\\n    ) \\n        external \\n        view\\n        returns (KTypes.Price[] memory, KTypes.Discount[] memory)\\n    {\\n        return _getAssetItemPricesAndDiscounts(\\n            _assetItem,\\n            _buyer,\\n            _referrer,\\n            hlpHashString(_promo)\\n        );\\n    }\\n\\n    /// @notice Returns ONLY items that was added with `addItemToDisplay`.\\n    /// @dev For obtain all items please use envelop oracle\\n    function getDisplayAssetItems(bytes32 _displayNameHash) \\n        public \\n        view \\n        virtual\\n        returns (KTypes.ItemForSale[] memory) \\n    {\\n        return displays[_displayNameHash].items; \\n    }\\n\\n    function getAssetItem(ETypes.AssetItem memory _assetItem)\\n        public\\n        view\\n        returns (KTypes.ItemForSale memory)\\n    {\\n        KTypes.Place memory p = getAssetItemPlace(_assetItem);\\n        return displays[p.display].items[p.index];\\n\\n    } \\n\\n    function hlpHashString(string memory _name) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_name));\\n    }\\n\\n    /////////////////////////////\\n    ///       Internals        //\\n    /////////////////////////////\\n    function _setDisplayParams(\\n        bytes32 _displayNameHash,\\n        address _owner,\\n        address _beneficiary, // who will receive assets from sale\\n        uint256 _enableAfter,\\n        uint256 _disableAfter,\\n        address _priceModel\\n    ) \\n        internal \\n    {\\n        KTypes.Display storage d = displays[_displayNameHash];\\n        d.owner = _owner;\\n        d.beneficiary  = _beneficiary;\\n        d.enableAfter  = _enableAfter;\\n        d.disableAfter = _disableAfter;\\n        d.priceModel   = _priceModel;\\n    }\\n\\n    function _addItemRecordAtDisplay(\\n        bytes32 _displayNameHash,\\n        address _itemOwner,\\n        ETypes.AssetItem memory _nft,\\n        KTypes.Price[] calldata _prices\\n    ) \\n        internal \\n        returns (KTypes.Place memory)\\n    {\\n        KTypes.ItemForSale storage it = displays[_displayNameHash].items.push();\\n        it.owner = _itemOwner;\\n        it.nft = _nft;\\n        if (_prices.length > 0){\\n            for (uint256 i = 0; i < _prices.length; ++ i) {\\n                it.prices.push(_prices[i]);    \\n            }\\n        }\\n        // add to mapping assetAtDisplay\\n        assetAtDisplay[_nft.asset.contractAddress][_nft.tokenId] = KTypes.Place(\\n            _displayNameHash,\\n            displays[_displayNameHash].items.length - 1\\n        );\\n        return assetAtDisplay[_nft.asset.contractAddress][_nft.tokenId];\\n    }\\n\\n    function _addItemPriceAtIndex(\\n        bytes32 _displayNameHash,\\n        uint256 _itemIndex,\\n        KTypes.Price[] calldata _prices\\n    )\\n        internal\\n    {\\n        KTypes.ItemForSale storage it = displays[_displayNameHash].items[_itemIndex];\\n        for (uint256 i = 0; i < _prices.length; ++ i) {\\n            it.prices.push(_prices[i]);    \\n        }\\n\\n    }\\n\\n\\n    function _editItemPriceAtIndex(\\n        bytes32 _displayNameHash,\\n        uint256 _itemIndex,\\n        uint256 _priceIndex,\\n        KTypes.Price calldata _price\\n    )\\n        internal\\n    {\\n        displays[_displayNameHash].items[_itemIndex].prices[_priceIndex] = _price;\\n    }\\n\\n    function _getAssetItemPricesAndDiscounts(\\n        ETypes.AssetItem memory _assetItem,\\n        address _buyer,\\n        address _referrer,\\n        bytes32 _promoHash\\n    ) \\n        internal\\n        view\\n        virtual\\n        returns(KTypes.Price[] memory, KTypes.Discount[] memory) \\n    {\\n        // Define current asset Place\\n        KTypes.Place memory pl = getAssetItemPlace(_assetItem);\\n        if (pl.display == bytes32(0) && pl.index == 0){\\n            return (\\n                IDisplayPriceModel(displays[DEFAULT_DISPLAY].priceModel).getItemPrices(_assetItem),\\n                IDisplayPriceModel(displays[DEFAULT_DISPLAY].priceModel).getItemDiscounts(\\n                    _assetItem,\\n                    _buyer,\\n                    _referrer,\\n                    _promoHash\\n                )\\n            );\\n        }\\n\\n        if (displays[pl.display].items[pl.index].prices.length > 0) \\n        {\\n            return (\\n                displays[pl.display].items[pl.index].prices,\\n                IDisplayPriceModel(displays[pl.display].priceModel).getItemDiscounts(\\n                    _assetItem,\\n                    _buyer,\\n                    _referrer,\\n                    _promoHash\\n                )\\n            );\\n        }\\n\\n        // If there is no individual prices then need ask priceModel contract of display\\n        return (\\n            IDisplayPriceModel(displays[pl.display].priceModel).getItemPrices(_assetItem),\\n            IDisplayPriceModel(displays[pl.display].priceModel).getItemDiscounts(\\n                _assetItem,\\n                _buyer,\\n                _referrer,\\n                _promoHash\\n            )\\n        );\\n    }\\n} \"\r\n    },\r\n    \"TokenServiceExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. Wrapper - main protocol contract\\npragma solidity 0.8.19;\\n\\nimport \\\"TokenService.sol\\\";\\n\\n/// @title Envelop PrtocolV1  helper service for manage ERC(20, 721, 115) getters\\n/// @author Envelop Team\\n/// @notice Just as dependence for main wrapper contract\\nabstract contract TokenServiceExtended is TokenService {\\n\\t\\n\\n    function _balanceOf(\\n        ETypes.AssetItem memory _assetItem,\\n        address _holder\\n    ) internal view virtual returns (uint256 _balance){\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            _balance = _holder.balance;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            _balance = IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_holder);\\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            _balance = IERC721Mintable(_assetItem.asset.contractAddress).balanceOf(_holder); \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            _balance = IERC1155Mintable(_assetItem.asset.contractAddress).balanceOf(_holder, _assetItem.tokenId);\\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n    }\\n\\n    function _ownerOf(\\n        ETypes.AssetItem memory _assetItem\\n    ) internal view virtual returns (address _owner){\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            _owner = address(0);\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            _owner = address(0);\\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            _owner = IERC721Mintable(_assetItem.asset.contractAddress).ownerOf(_assetItem.tokenId); \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            _owner = address(0);\\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"TokenService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. Wrapper - main protocol contract\\npragma solidity 0.8.19;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20Extended.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\nimport \\\"IERC721Mintable.sol\\\";\\nimport \\\"IERC1155Mintable.sol\\\";\\n\\n/// @title Envelop PrtocolV1  helper service for ERC(20, 721, 115) transfers\\n/// @author Envelop Team\\n/// @notice Just as dependence for main wrapper contract\\nabstract contract TokenService {\\n\\tusing SafeERC20 for IERC20Extended;\\n    \\n    error UnSupportedAsset(ETypes.AssetItem asset);\\n\\t\\n    function _mintNFT(\\n        ETypes.AssetType _mint_type, \\n        address _contract, \\n        address _mintFor, \\n        uint256 _tokenId, \\n        uint256 _outBalance\\n    ) \\n        internal \\n        virtual\\n    {\\n        if (_mint_type == ETypes.AssetType.ERC721) {\\n            IERC721Mintable(_contract).mint(_mintFor, _tokenId);\\n        } else if (_mint_type == ETypes.AssetType.ERC1155) {\\n            IERC1155Mintable(_contract).mint(_mintFor, _tokenId, _outBalance);\\n        }else {\\n            revert UnSupportedAsset(\\n                ETypes.AssetItem(\\n                    ETypes.Asset(_mint_type, _contract),\\n                    _tokenId, _outBalance\\n                )\\n            );\\n        }\\n    }\\n\\n    function _burnNFT(\\n        ETypes.AssetType _burn_type, \\n        address _contract, \\n        address _burnFor, \\n        uint256 _tokenId, \\n        uint256 _balance\\n    ) \\n        internal\\n        virtual \\n    {\\n        if (_burn_type == ETypes.AssetType.ERC721) {\\n            IERC721Mintable(_contract).burn(_tokenId);\\n\\n        } else if (_burn_type == ETypes.AssetType.ERC1155) {\\n            IERC1155Mintable(_contract).burn(_burnFor, _tokenId, _balance);\\n        }\\n        \\n    }\\n\\n    function _transfer(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) internal virtual returns (bool _transfered){\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            (bool success, ) = _to.call{ value: _assetItem.amount}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n            _transfered = true; \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            require(IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_from) <= _assetItem.amount, \\\"UPS!!!!\\\");\\n            IERC20Extended(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.amount);\\n            _transfered = true;\\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            IERC721Mintable(_assetItem.asset.contractAddress).transferFrom(_from, _to, _assetItem.tokenId);\\n            _transfered = true;\\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            IERC1155Mintable(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.tokenId, _assetItem.amount, \\\"\\\");\\n            _transfered = true;\\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n        return _transfered;\\n    }\\n\\n    function _transferSafe(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) internal virtual returns (uint256 _transferedValue){\\n        //TODO   think about try catch in transfers\\n        uint256 balanceBefore;\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            balanceBefore = _to.balance;\\n            (bool success, ) = _to.call{ value: _assetItem.amount}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n            _transferedValue = _to.balance - balanceBefore;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            balanceBefore = IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_to);\\n            if (_from == address(this)){\\n                IERC20Extended(_assetItem.asset.contractAddress).safeTransfer(_to, _assetItem.amount);\\n            } else {\\n                IERC20Extended(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.amount);\\n            }    \\n            _transferedValue = IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_to) - balanceBefore;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721 &&\\n            IERC721Mintable(_assetItem.asset.contractAddress).ownerOf(_assetItem.tokenId) == _from) {\\n            balanceBefore = IERC721Mintable(_assetItem.asset.contractAddress).balanceOf(_to); \\n            IERC721Mintable(_assetItem.asset.contractAddress).transferFrom(_from, _to, _assetItem.tokenId);\\n            if (IERC721Mintable(_assetItem.asset.contractAddress).ownerOf(_assetItem.tokenId) == _to &&\\n                IERC721Mintable(_assetItem.asset.contractAddress).balanceOf(_to) - balanceBefore == 1\\n                ) {\\n                _transferedValue = 1;\\n            }\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            balanceBefore = IERC1155Mintable(_assetItem.asset.contractAddress).balanceOf(_to, _assetItem.tokenId);\\n            IERC1155Mintable(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.tokenId, _assetItem.amount, \\\"\\\");\\n            _transferedValue = IERC1155Mintable(_assetItem.asset.contractAddress).balanceOf(_to, _assetItem.tokenId) - balanceBefore;\\n        \\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n        return _transferedValue;\\n    }\\n\\n    // This function must never revert. Use it for unwrap in case some \\n    // collateral transfers are revert\\n    function _transferEmergency(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) internal virtual returns (uint256 _transferedValue){\\n        //TODO   think about try catch in transfers\\n        uint256 balanceBefore;\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            balanceBefore = _to.balance;\\n            (bool success, ) = _to.call{ value: _assetItem.amount}(\\\"\\\");\\n            //require(success, \\\"transfer failed\\\");\\n            _transferedValue = _to.balance - balanceBefore;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            if (_from == address(this)){\\n               (bool success, ) = _assetItem.asset.contractAddress.call(\\n                   abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _assetItem.amount)\\n               );\\n            } else {\\n                (bool success, ) = _assetItem.asset.contractAddress.call(\\n                    abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _from,  _to, _assetItem.amount)\\n                );\\n            }    \\n            _transferedValue = _assetItem.amount;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            (bool success, ) = _assetItem.asset.contractAddress.call(\\n                abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _from,  _to, _assetItem.tokenId)\\n            );\\n            _transferedValue = 1;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            (bool success, ) = _assetItem.asset.contractAddress.call(\\n                abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\", _from, _to, _assetItem.tokenId, _assetItem.amount, \\\"\\\")\\n            );\\n            _transferedValue = _assetItem.amount;\\n        \\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n        return _transferedValue;\\n    }\\n}\"\r\n    },\r\n    \"IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IERC20Extended is  IERC20 {\\n     function mint(address _to, uint256 _value) external;\\n}\"\r\n    },\r\n    \"IERC721Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IERC721Metadata.sol\\\";\\n\\ninterface IERC721Mintable is  IERC721Metadata {\\n     function mint(address _to, uint256 _tokenId) external;\\n     function burn(uint256 _tokenId) external;\\n     function exists(uint256 _tokenId) external view returns(bool);\\n}\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"IERC1155Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IERC1155MetadataURI.sol\\\";\\n\\ninterface IERC1155Mintable is  IERC1155MetadataURI {\\n     function mint(address _to, uint256 _tokenId, uint256 _amount) external;\\n     function burn(address _to, uint256 _tokenId, uint256 _amount) external;\\n     function totalSupply(uint256 _id) external view returns (uint256); \\n     function exists(uint256 _tokenId) external view returns(bool);\\n}\"\r\n    },\r\n    \"IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155Receiver.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"KTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. \\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\npragma solidity 0.8.19;\\nlibrary KTypes {\\n\\tenum DiscountType {PROMO, REFERRAL, BATCH, TIME, WHITELIST, CUSTOM1, CUSTOM2, CUSTOM3}\\n\\n    struct Price {\\n        address payWith;\\n        uint256 amount;\\n    }\\n\\n    struct DenominatedPrice {\\n        address payWith;\\n        uint256 amount;\\n        uint256 denominator;\\n    }\\n\\n    struct Discount {\\n        DiscountType dsctType;\\n        uint16 dsctPercent; // 100%-10000, 20%-2000, 3%-300\\n    }\\n\\n    struct ItemForSale {\\n        address owner;\\n        ETypes.AssetItem nft;\\n        Price[] prices;\\n    }\\n\\n    struct Display {\\n        address owner;\\n        address beneficiary; // who will receive assets from sale\\n        uint256 enableAfter;\\n        uint256 disableAfter;\\n        address priceModel;\\n        ItemForSale[] items;\\n    }\\n\\n    struct Place {\\n        bytes32 display;\\n        uint256 index;\\n    }\\n}\"\r\n    },\r\n    \"IDisplayPriceModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n//import \\\"IERC721Enumerable.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\nimport \\\"KTypes.sol\\\";\\n\\ninterface IDisplayPriceModel  {\\n    \\n    event DiscountChanged(\\n        bytes32 indexed display,\\n        uint8 indexed DiscountType,\\n        bytes32 DiscountParam,\\n        uint16 DiscountPercent\\n    );\\n\\n    event DefaultPriceChanged(\\n        bytes32 indexed display,\\n        address indexed payWithContract,\\n        uint256 indexed priceAmount\\n    );\\n\\n    function getItemPrices(\\n        ETypes.AssetItem memory _assetItem\\n    ) external view returns (KTypes.Price[] memory);\\n\\n    function getDefaultDisplayPrices(\\n        ETypes.AssetItem memory _assetItem\\n    ) external view returns (KTypes.Price[] memory);\\n    \\n    function getItemDiscounts(\\n        ETypes.AssetItem memory _assetItem,\\n        address _buyer,\\n        address _referrer,\\n        bytes32 _promoHash\\n    ) external view returns (KTypes.Discount[] memory);\\n\\n    function getBatchPrices(\\n        ETypes.AssetItem[] memory _assetItemArray\\n    ) external view returns (KTypes.Price[] memory);\\n    \\n    function getBatchDiscounts(\\n        ETypes.AssetItem[] memory _assetItemArray,\\n        address _buyer,\\n        address _referrer,\\n        bytes32 _promoHash\\n    ) external view returns (KTypes.Discount[] memory);\\n}\"\r\n    },\r\n    \"DefaultPriceModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) NFT(wNFT) Kiosk Default Price Model;\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IDisplayPriceModel.sol\\\";\\nimport \\\"IEnvelopNFTKiosk.sol\\\";\\nimport \\\"IWNFT.sol\\\";\\n\\n/// @title Default price model implementation\\n/// @author Envelop Team\\n/// @notice This model operate sellings of erc20 collateral inside wNFTS V1\\n/// @dev ..\\ncontract DefaultPriceModel is IDisplayPriceModel {\\n\\n    struct DiscountUntil {\\n        uint256 untilDate;\\n        KTypes.Discount discount;\\n    }\\n\\n    // mapping from displayNameHash to ERC20 collateral prices\\n    mapping (bytes32 => mapping(address => KTypes.DenominatedPrice[])) public erc20CollateralPricesForDisplays;\\n\\n    // mapping from displayNameHash to default price for all NFT at the display\\n    mapping (bytes32 => KTypes.Price[]) public defaultNFTPriceForDisplay;\\n    \\n    // mapping from displayNameHash to time discounts\\n    mapping (bytes32 => DiscountUntil[]) public timeDiscounts;\\n\\n    // mapping from displayNameHash to PROMO hash to PROMO discount\\n    mapping (bytes32 => mapping (bytes32 => DiscountUntil)) public promoDiscounts;\\n\\n    // mapping from displayNameHash to referrer hash to PROMO discount\\n    mapping (bytes32 => mapping (bytes32 => DiscountUntil)) public referrerDiscounts;\\n\\n\\n    IEnvelopNFTKiosk public kiosk;\\n\\n    event CollateralPriceChanged(\\n        bytes32 indexed display,\\n        address indexed erc20Collateral\\n    );\\n\\n    constructor (address _kiosk){\\n        kiosk = IEnvelopNFTKiosk(_kiosk);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the display owner.\\n     */\\n    modifier onlyDisplayOwner(bytes32 _displayNameHash) {\\n        require(\\n            kiosk.getDisplayOwner(_displayNameHash) == msg.sender, \\n            \\\"Only for Display Owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCollateralPriceForDisplay(\\n        bytes32 _displayNameHash,\\n        address _erc20,\\n        KTypes.DenominatedPrice[] calldata _prices\\n    ) \\n        external virtual\\n        onlyDisplayOwner(_displayNameHash) \\n\\n    {\\n        KTypes.DenominatedPrice[] storage prices = erc20CollateralPricesForDisplays[_displayNameHash][_erc20];\\n        for (uint256 i = 0; i < _prices.length; ++ i) {\\n            prices.push(_prices[i]);\\n            emit CollateralPriceChanged(_displayNameHash, _erc20);    \\n        }\\n    }\\n\\n    function editCollateralPriceRecordForDisplay(\\n        bytes32 _displayNameHash,\\n        address _erc20,\\n        uint256 _priceIndex,\\n        KTypes.DenominatedPrice calldata _price\\n    )\\n        external virtual\\n        onlyDisplayOwner(_displayNameHash)\\n    {\\n        erc20CollateralPricesForDisplays[_displayNameHash][_erc20][_priceIndex] = _price;\\n        emit CollateralPriceChanged(_displayNameHash, _erc20);\\n    }\\n\\n    function setDefaultNFTPriceForDisplay(\\n        bytes32 _displayNameHash,\\n        KTypes.Price[] calldata _prices\\n    ) \\n       external virtual\\n       onlyDisplayOwner(_displayNameHash)\\n    {\\n        KTypes.Price[] storage prices = defaultNFTPriceForDisplay[_displayNameHash];\\n        for (uint256 i = 0; i < _prices.length; ++ i) {\\n            prices.push(_prices[i]);\\n            emit DefaultPriceChanged(\\n                _displayNameHash,\\n                _prices[i].payWith,\\n                _prices[i].amount\\n            );    \\n        }\\n    }\\n\\n    function editDefaultNFTPriceRecordForDisplay(\\n        bytes32 _displayNameHash,\\n        uint256 _priceIndex,\\n        KTypes.Price calldata _price\\n    )\\n        external virtual\\n        onlyDisplayOwner(_displayNameHash)\\n    {\\n        defaultNFTPriceForDisplay[_displayNameHash][_priceIndex] = _price;\\n        emit DefaultPriceChanged(\\n            _displayNameHash,\\n            _price.payWith,\\n            _price.amount\\n        );\\n    }\\n\\n    function setTimeDiscountsForDisplay(\\n        bytes32 _displayNameHash,\\n        DiscountUntil[] calldata _discounts\\n    ) \\n       external virtual\\n       onlyDisplayOwner(_displayNameHash)\\n    {\\n        DiscountUntil[] storage discounts = timeDiscounts[_displayNameHash];\\n        for (uint256 i = 0; i < _discounts.length; ++ i) {\\n            discounts.push(_discounts[i]);\\n            emit DiscountChanged(\\n            _displayNameHash,\\n            uint8(KTypes.DiscountType.TIME),\\n            bytes32(_discounts[i].untilDate),\\n            _discounts[i].discount.dsctPercent\\n        );    \\n        }\\n    }\\n\\n    function editTimeDiscountsForDisplay(\\n        bytes32 _displayNameHash,\\n        uint256 _discountIndex,\\n        DiscountUntil calldata _discount\\n    )\\n        external virtual\\n        onlyDisplayOwner(_displayNameHash)\\n    {\\n        timeDiscounts[_displayNameHash][_discountIndex] = _discount;\\n        emit DiscountChanged(\\n            _displayNameHash,\\n            uint8(KTypes.DiscountType.TIME),\\n            bytes32(_discount.untilDate),\\n            _discount.discount.dsctPercent\\n        );\\n    }\\n\\n    function setPromoDiscountForDisplay(\\n        bytes32 _displayNameHash,\\n        bytes32 _promoHash,\\n        DiscountUntil calldata _discount\\n    ) \\n        external virtual\\n        onlyDisplayOwner(_displayNameHash) \\n\\n    {\\n        promoDiscounts[_displayNameHash][_promoHash] = _discount;\\n        emit DiscountChanged(\\n            _displayNameHash,\\n            uint8(KTypes.DiscountType.PROMO),\\n            _promoHash,\\n            _discount.discount.dsctPercent\\n        );\\n    }\\n\\n    function setRefereerDiscountForDisplay(\\n        bytes32 _displayNameHash,\\n        address _referrer,\\n        DiscountUntil calldata _discount\\n    ) \\n        external virtual\\n        onlyDisplayOwner(_displayNameHash) \\n\\n    {\\n        referrerDiscounts[_displayNameHash][keccak256(abi.encode(_referrer))] = _discount; \\n        emit DiscountChanged(\\n            _displayNameHash,\\n            uint8(KTypes.DiscountType.REFERRAL),\\n            keccak256(abi.encode(_referrer)),\\n            _discount.discount.dsctPercent\\n        );\\n    }\\n    /////////////////////////\\n\\n    function getItemPrices(\\n        ETypes.AssetItem memory _assetItem\\n    ) external view virtual returns (KTypes.Price[] memory)\\n    {\\n        // 1. Try get collateral\\n        IWNFT wnftContract = IWNFT(_assetItem.asset.contractAddress);\\n        try wnftContract.wnftInfo(_assetItem.tokenId) returns (ETypes.WNFT memory wnft){\\n            KTypes.Place memory pl = _getVirtualPlace(_assetItem);\\n            // Only first collateral asset is tradable in this pricemodel\\n            KTypes.DenominatedPrice[] memory denPrices = _getCollateralUnitPrice(\\n                pl.display,\\n                wnft.collateral[0].asset.contractAddress\\n            );\\n            KTypes.Price[] memory prices = new KTypes.Price[](denPrices.length);\\n            for (uint256 i = 0; i < denPrices.length; ++ i ){\\n                // Calc wNFT price\\n                prices[i].payWith = denPrices[i].payWith;\\n                prices[i].amount = denPrices[i].amount \\n                    * wnft.collateral[0].amount / denPrices[i].denominator;\\n            }\\n            return prices; \\n        } catch {\\n            return getDefaultDisplayPrices(_assetItem);\\n        }\\n    }\\n\\n    function getDefaultDisplayPrices(\\n        ETypes.AssetItem memory _assetItem\\n    ) public view virtual returns (KTypes.Price[] memory _prices)\\n    {\\n        // get display of given item\\n        KTypes.Place memory pl = _getVirtualPlace(_assetItem);\\n        _prices = defaultNFTPriceForDisplay[pl.display];\\n    }\\n\\n    function getDisplayTimeDiscounts(\\n        bytes32 _displayNameHash\\n    ) public view virtual returns (DiscountUntil[] memory)\\n\\n    {\\n        return timeDiscounts[_displayNameHash];\\n    } \\n\\n    function getItemDiscounts(\\n        ETypes.AssetItem memory _assetItem,\\n        address _buyer,\\n        address _referrer,\\n        bytes32 _promoHash\\n    ) public view virtual returns (KTypes.Discount[] memory)\\n    {\\n        KTypes.Place memory pl = _getVirtualPlace(_assetItem);\\n        // 1.First check time discounts for this display\\n        DiscountUntil[] storage tdArray = timeDiscounts[pl.display];\\n        KTypes.Discount memory td;\\n        for (uint256 i = 0; i < tdArray.length; ++ i){\\n            if (tdArray[i].untilDate > block.timestamp){\\n                td = tdArray[i].discount;\\n                break;\\n            }\\n        }\\n\\n        // This Price Model support 3 slots for discounts\\n        KTypes.Discount[] memory discounts = new KTypes.Discount[](3);\\n        for (uint256 i = 0; i < discounts.length; ++ i){\\n            // add time discount to result\\n            discounts[0] = td;\\n            // add promo discount to result\\n            if (promoDiscounts[pl.display][_promoHash].untilDate > block.timestamp) {\\n                discounts[1] = KTypes.Discount(\\n                    promoDiscounts[pl.display][_promoHash].discount.dsctType,\\n                    promoDiscounts[pl.display][_promoHash].discount.dsctPercent\\n                );\\n            }\\n\\n            // add ref discount\\n            if (referrerDiscounts[pl.display][keccak256(abi.encode(_referrer))].untilDate > block.timestamp) {\\n                discounts[2] = KTypes.Discount(\\n                    referrerDiscounts[pl.display][keccak256(abi.encode(_referrer))].discount.dsctType,\\n                    referrerDiscounts[pl.display][keccak256(abi.encode(_referrer))].discount.dsctPercent\\n                );\\n            }\\n\\n        }\\n        return discounts;\\n    }\\n\\n    function getBatchPrices(\\n        ETypes.AssetItem[] memory _assetItemArray\\n    ) external view virtual returns (KTypes.Price[] memory)\\n    {\\n\\n    }\\n    \\n    function getBatchDiscounts(\\n        ETypes.AssetItem[] memory _assetItemArray,\\n        address _buyer,\\n        address _referrer,\\n        bytes32 _promoHash\\n    ) external view virtual returns (KTypes.Discount[] memory)\\n    {\\n\\n    }\\n\\n    function getCollateralUnitPrice(\\n        bytes32 _displayNameHash, \\n        address _erc20\\n    ) external view returns(KTypes.DenominatedPrice[] memory){\\n        return _getCollateralUnitPrice(_displayNameHash,_erc20);\\n    }\\n    ///////////////////////////////////////////////////////////////////\\n    function _getCollateralUnitPrice(\\n        bytes32 _displayNameHash, \\n        address _erc20\\n    ) internal view returns(KTypes.DenominatedPrice[] memory){\\n        return erc20CollateralPricesForDisplays[_displayNameHash][_erc20];\\n    }\\n\\n    function _getVirtualPlace(ETypes.AssetItem memory _assetItem) \\n        internal view returns(KTypes.Place memory place) \\n    {\\n        place = kiosk.getAssetItemPlace(_assetItem);\\n        if (place.display == bytes32(0)) {\\n               place.display = kiosk.DEFAULT_DISPLAY();\\n        }\\n    }\\n}   \\n\"\r\n    },\r\n    \"IEnvelopNFTKiosk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\nimport \\\"LibEnvelopTypes.sol\\\";\\nimport \\\"KTypes.sol\\\";\\n\\ninterface IEnvelopNFTKiosk  {\\n\\n    function DEFAULT_DISPLAY() external view returns (bytes32);\\n    \\n    function buyAssetItem(\\n        ETypes.AssetItem calldata _assetItem,\\n        uint256 _priceIndex,\\n        address _buyer,\\n        address _referrer,\\n        string calldata _promo\\n    ) external payable;\\n    \\n    function getDisplayOwner(\\n        bytes32 _displayNameHash\\n    ) external view returns (address);\\n    \\n    function getAssetItemPlace(\\n        ETypes.AssetItem memory _assetItem\\n    ) external view returns (KTypes.Place memory);\\n}\"\r\n    },\r\n    \"IWNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IWNFT  {\\n    function wnftInfo(uint256 tokenId) \\n        external view returns (ETypes.WNFT memory);\\n}\"\r\n    },\r\n    \"IModelWhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IModelWhiteList  {\\n    function isModelEnabled(address _model) external view returns(bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"EnvelopNFTKioskService.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscrRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"asset\",\"type\":\"tuple\"}],\"name\":\"UnSupportedAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disableAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DisplayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"DisplayTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetTokenId\",\"type\":\"uint256\"}],\"name\":\"EnvelopPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payWithToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payWithAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"percentDiscount\",\"type\":\"uint16\"}],\"name\":\"EnvelopReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placeIndex\",\"type\":\"uint256\"}],\"name\":\"ItemAddedToDisplay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetTokenId\",\"type\":\"uint256\"}],\"name\":\"ItemPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_DISPLAY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"_prices\",\"type\":\"tuple[]\"}],\"name\":\"addAssetItemPriceAtIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_displayNameHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem[]\",\"name\":\"_assetItems\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"_prices\",\"type\":\"tuple[]\"}],\"name\":\"addBatchItemsToDisplayWithSamePrice\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Place[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_displayNameHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"_prices\",\"type\":\"tuple[]\"}],\"name\":\"addItemToDisplay\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Place\",\"name\":\"place\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tariffIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_agentFeePercent\",\"type\":\"uint16\"}],\"name\":\"addPayOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetAtDisplay\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_serviceTariffIndexes\",\"type\":\"uint256[]\"}],\"name\":\"authorizeAgentForService\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTariffs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_priceIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_promo\",\"type\":\"string\"}],\"name\":\"buyAssetItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"needFix\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"displays\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableAfter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceModel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_priceIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price\",\"name\":\"_price\",\"type\":\"tuple\"}],\"name\":\"editAssetItemPriceAtIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tariffIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payWithIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_agentFeePercent\",\"type\":\"uint16\"}],\"name\":\"editPayOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tariffIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timelockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketValidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"editServiceTariff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"}],\"name\":\"getAssetItem\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"nft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct KTypes.ItemForSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"}],\"name\":\"getAssetItemPlace\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"display\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Place\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_promo\",\"type\":\"string\"}],\"name\":\"getAssetItemPricesAndDiscounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum KTypes.DiscountType\",\"name\":\"dsctType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"dsctPercent\",\"type\":\"uint16\"}],\"internalType\":\"struct KTypes.Discount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_displayNameHash\",\"type\":\"bytes32\"}],\"name\":\"getDisplay\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableAfter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceModel\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"nft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct KTypes.ItemForSale[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct KTypes.Display\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_displayNameHash\",\"type\":\"bytes32\"}],\"name\":\"getDisplayAssetItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"nft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payWith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct KTypes.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct KTypes.ItemForSale[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_displayNameHash\",\"type\":\"bytes32\"}],\"name\":\"getDisplayOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"hlpHashString\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modelWhiteListAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timelockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketValidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct SubscriptionType\",\"name\":\"subscription\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"agentFeePercent\",\"type\":\"uint16\"}],\"internalType\":\"struct PayOption[]\",\"name\":\"payWith\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Tariff\",\"name\":\"_newTariff\",\"type\":\"tuple\"}],\"name\":\"newTariff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tariffIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timelockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketValidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct SubscriptionType\",\"name\":\"subscription\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"agentFeePercent\",\"type\":\"uint16\"}],\"internalType\":\"struct PayOption[]\",\"name\":\"payWith\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Tariff\",\"name\":\"_newTariff\",\"type\":\"tuple\"}],\"name\":\"registerServiceTariff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"}],\"name\":\"removeLastPersonalPriceForAssetItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_enableAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disableAfter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceModel\",\"type\":\"address\"}],\"name\":\"setDisplayParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnable\",\"type\":\"bool\"}],\"name\":\"setSubscriptionOnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscrRegistry\",\"type\":\"address\"}],\"name\":\"setSubscriptionRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_modelWhiteList\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionRegistry\",\"outputs\":[{\"internalType\":\"contract ISubscriptionRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_displayNameHash\",\"type\":\"bytes32\"}],\"name\":\"transferDisplay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnvelopNFTKioskService", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000937cc2f0e4e40ebe774afd01911e3d14b9cd21c0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}