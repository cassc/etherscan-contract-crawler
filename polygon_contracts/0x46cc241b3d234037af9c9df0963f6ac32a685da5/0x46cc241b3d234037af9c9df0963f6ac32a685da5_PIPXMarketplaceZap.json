{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/solidity/interface/IApeRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IApeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXEligibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPIPXEligibility {\\r\\n    // Read functions.\\r\\n    function name() external pure returns (string memory);\\r\\n    function finalized() external view returns (bool);\\r\\n    function targetAsset() external pure returns (address);\\r\\n    function checkAllEligible(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n    function checkEligible(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool[] memory);\\r\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    // Write functions.\\r\\n    function __PIPXEligibility_init_bytes(bytes calldata configData) external;\\r\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\r\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\r\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\r\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPIPXFeeDistributor {\\r\\n  \\r\\n  struct FeeReceiver {\\r\\n    uint256 allocPoint;\\r\\n    address receiver;\\r\\n    bool isContract;\\r\\n  }\\r\\n\\r\\n  function pipxVaultFactory() external returns (address);\\r\\n  function lpStaking() external returns (address);\\r\\n  function treasury() external returns (address);\\r\\n  function defaultTreasuryAlloc() external returns (uint256);\\r\\n  function defaultLPAlloc() external returns (uint256);\\r\\n  function allocTotal(uint256 vaultId) external returns (uint256);\\r\\n  function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\\r\\n\\r\\n  // Write functions.\\r\\n  function __FeeDistributor__init__(address _lpStaking, address _treasury) external;\\r\\n  function rescueTokens(address token) external;\\r\\n  function distribute(uint256 vaultId) external;\\r\\n  function addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) external;\\r\\n  function initializeVaultReceivers(uint256 _vaultId) external;\\r\\n  function changeMultipleReceiverAlloc(\\r\\n    uint256[] memory _vaultIds, \\r\\n    uint256[] memory _receiverIdxs, \\r\\n    uint256[] memory allocPoints\\r\\n  ) external;\\r\\n\\r\\n  function changeMultipleReceiverAddress(\\r\\n    uint256[] memory _vaultIds, \\r\\n    uint256[] memory _receiverIdxs, \\r\\n    address[] memory addresses, \\r\\n    bool[] memory isContracts\\r\\n  ) external;\\r\\n  function changeReceiverAlloc(uint256 _vaultId, uint256 _idx, uint256 _allocPoint) external;\\r\\n  function changeReceiverAddress(uint256 _vaultId, uint256 _idx, address _address, bool _isContract) external;\\r\\n  function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\\r\\n\\r\\n  // Configuration functions.\\r\\n  function setTreasuryAddress(address _treasury) external;\\r\\n  function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\\r\\n  function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint) external;\\r\\n  function setLPStakingAddress(address _lpStaking) external;\\r\\n  function setPIPXVaultFactory(address _factory) external;\\r\\n  function setDefaultLPAlloc(uint256 _allocPoint) external;\\r\\n} \"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXLPStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPIPXLPStaking {\\r\\n    function pipxVaultFactory() external view returns (address);\\r\\n    function rewardDistTokenImpl() external view returns (address);\\r\\n    function stakingTokenProvider() external view returns (address);\\r\\n    function vaultToken(address _stakingToken) external view returns (address);\\r\\n    function stakingToken(address _vaultToken) external view returns (address);\\r\\n    function rewardDistributionToken(uint256 vaultId) external view returns (address);\\r\\n    function newRewardDistributionToken(uint256 vaultId) external view returns (address);\\r\\n    function oldRewardDistributionToken(uint256 vaultId) external view returns (address);\\r\\n    function unusedRewardDistributionToken(uint256 vaultId) external view returns (address);\\r\\n    function rewardDistributionTokenAddr(address stakedToken, address rewardToken) external view returns (address);\\r\\n    \\r\\n    // Write functions.\\r\\n    function __PIPXLPStaking__init(address _stakingTokenProvider) external;\\r\\n    function setPIPXVaultFactory(address newFactory) external;\\r\\n    function setStakingTokenProvider(address newProvider) external;\\r\\n    function addPoolForVault(uint256 vaultId) external;\\r\\n    function updatePoolForVault(uint256 vaultId) external;\\r\\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\\r\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\r\\n    function deposit(uint256 vaultId, uint256 amount) external;\\r\\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\\r\\n    function exit(uint256 vaultId, uint256 amount) external;\\r\\n    function rescue(uint256 vaultId) external;\\r\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\r\\n    function claimRewards(uint256 vaultId) external;\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interface/IPIPXEligibility.sol\\\";\\r\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"../interface/IPIPXVaultFactory.sol\\\";\\r\\n\\r\\ninterface IPIPXVault is IERC20Upgradeable {\\r\\n    function manager() external view returns (address);\\r\\n    function assetAddress() external view returns (address);\\r\\n    function vaultFactory() external view returns (IPIPXVaultFactory);\\r\\n    function eligibilityStorage() external view returns (IPIPXEligibility);\\r\\n\\r\\n    function is1155() external view returns (bool);\\r\\n    function allowAllItems() external view returns (bool);\\r\\n    function enableMint() external view returns (bool);\\r\\n    function enableRandomRedeem() external view returns (bool);\\r\\n    function enableTargetRedeem() external view returns (bool);\\r\\n    function enableRandomSwap() external view returns (bool);\\r\\n    function enableTargetSwap() external view returns (bool);\\r\\n\\r\\n    function vaultId() external view returns (uint256);\\r\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\r\\n    function allHoldings() external view returns (uint256[] memory);\\r\\n    function totalHoldings() external view returns (uint256);\\r\\n    function mintFee() external view returns (uint256);\\r\\n    function randomRedeemFee() external view returns (uint256);\\r\\n    function targetRedeemFee() external view returns (uint256);\\r\\n    function randomSwapFee() external view returns (uint256);\\r\\n    function targetSwapFee() external view returns (uint256);\\r\\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n    event VaultInit(\\r\\n        uint256 indexed vaultId,\\r\\n        address assetAddress,\\r\\n        bool is1155,\\r\\n        bool allowAllItems\\r\\n    );\\r\\n\\r\\n    event ManagerSet(address manager);\\r\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\r\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\r\\n\\r\\n    event EnableMintUpdated(bool enabled);\\r\\n    event EnableRandomRedeemUpdated(bool enabled);\\r\\n    event EnableTargetRedeemUpdated(bool enabled);\\r\\n    event EnableRandomSwapUpdated(bool enabled);\\r\\n    event EnableTargetSwapUpdated(bool enabled);\\r\\n\\r\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\r\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\r\\n    event Swapped(\\r\\n        uint256[] nftIds,\\r\\n        uint256[] amounts,\\r\\n        uint256[] specificIds,\\r\\n        uint256[] redeemedIds,\\r\\n        address to\\r\\n    );\\r\\n\\r\\n    function __PIPXVault_init(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address _assetAddress,\\r\\n        bool _is1155,\\r\\n        bool _allowAllItems\\r\\n    ) external;\\r\\n\\r\\n    function finalizeVault() external;\\r\\n\\r\\n    function setVaultMetadata(\\r\\n        string memory name_, \\r\\n        string memory symbol_\\r\\n    ) external;\\r\\n\\r\\n    function setVaultFeatures(\\r\\n        bool _enableMint,\\r\\n        bool _enableRandomRedeem,\\r\\n        bool _enableTargetRedeem,\\r\\n        bool _enableRandomSwap,\\r\\n        bool _enableTargetSwap\\r\\n    ) external;\\r\\n\\r\\n    function setFees(\\r\\n        uint256 _mintFee,\\r\\n        uint256 _randomRedeemFee,\\r\\n        uint256 _targetRedeemFee,\\r\\n        uint256 _randomSwapFee,\\r\\n        uint256 _targetSwapFee\\r\\n    ) external;\\r\\n    function disableVaultFees() external;\\r\\n\\r\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\r\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\r\\n    // a similar interface.\\r\\n    function deployEligibilityStorage(\\r\\n        uint256 moduleIndex,\\r\\n        bytes calldata initData\\r\\n    ) external returns (address);\\r\\n\\r\\n    // The manager has control over options like fees and features\\r\\n    function setManager(address _manager) external;\\r\\n\\r\\n    function mint(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function mintTo(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\r\\n        external\\r\\n        returns (uint256[] calldata);\\r\\n\\r\\n    function redeemTo(\\r\\n        uint256 amount,\\r\\n        uint256[] calldata specificIds,\\r\\n        address to\\r\\n    ) external returns (uint256[] calldata);\\r\\n\\r\\n    function swap(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\r\\n        uint256[] calldata specificIds\\r\\n    ) external returns (uint256[] calldata);\\r\\n\\r\\n    function swapTo(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\r\\n        uint256[] calldata specificIds,\\r\\n        address to\\r\\n    ) external returns (uint256[] calldata);\\r\\n\\r\\n    function allValidNFTs(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../proxy/IBeacon.sol\\\";\\r\\n\\r\\ninterface IPIPXVaultFactory is IBeacon {\\r\\n  // Read functions.\\r\\n  function numVaults() external view returns (uint256);\\r\\n  function zapContract() external view returns (address);\\r\\n  function feeDistributor() external view returns (address);\\r\\n  function eligibilityManager() external view returns (address);\\r\\n  function vault(uint256 vaultId) external view returns (address);\\r\\n  function allVaults() external view returns (address[] memory);\\r\\n  function vaultsForAsset(address asset) external view returns (address[] memory);\\r\\n  function isLocked(uint256 id) external view returns (bool);\\r\\n  function excludedFromFees(address addr) external view returns (bool);\\r\\n  function factoryMintFee() external view returns (uint64);\\r\\n  function factoryRandomRedeemFee() external view returns (uint64);\\r\\n  function factoryTargetRedeemFee() external view returns (uint64);\\r\\n  function factoryRandomSwapFee() external view returns (uint64);\\r\\n  function factoryTargetSwapFee() external view returns (uint64);\\r\\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\\r\\n  event NewZapContract(address oldZap, address newZap);\\r\\n  event FeeExclusion(address feeExcluded, bool excluded);\\r\\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\\r\\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\\r\\n  event UpdateVaultFees(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\r\\n  event DisableVaultFees(uint256 vaultId);\\r\\n  event UpdateFactoryFees(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\r\\n\\r\\n  // Write functions.\\r\\n  function __PIPXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\\r\\n  function createVault(\\r\\n      string calldata name,\\r\\n      string calldata symbol,\\r\\n      address _assetAddress,\\r\\n      bool is1155,\\r\\n      bool allowAllItems\\r\\n  ) external returns (uint256);\\r\\n  function setFeeDistributor(address _feeDistributor) external;\\r\\n  function setEligibilityManager(address _eligibilityManager) external;\\r\\n  function setZapContract(address _zapContract) external;\\r\\n  function setFeeExclusion(address _excludedAddr, bool excluded) external;\\r\\n\\r\\n  function setFactoryFees(\\r\\n    uint256 mintFee, \\r\\n    uint256 randomRedeemFee, \\r\\n    uint256 targetRedeemFee,\\r\\n    uint256 randomSwapFee, \\r\\n    uint256 targetSwapFee\\r\\n  ) external; \\r\\n  function setVaultFees(\\r\\n      uint256 vaultId, \\r\\n      uint256 mintFee, \\r\\n      uint256 randomRedeemFee, \\r\\n      uint256 targetRedeemFee,\\r\\n      uint256 randomSwapFee, \\r\\n      uint256 targetSwapFee\\r\\n  ) external;\\r\\n  function disableVaultFees(uint256 vaultId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/PIPXMarketplaceZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interface/IPIPXVault.sol\\\";\\r\\nimport \\\"./interface/IPIPXVaultFactory.sol\\\";\\r\\nimport \\\"./interface/IPIPXFeeDistributor.sol\\\";\\r\\nimport \\\"./interface/IPIPXLPStaking.sol\\\";\\r\\nimport \\\"./interface/IApeRouter01.sol\\\";\\r\\nimport \\\"./token/IERC1155Upgradeable.sol\\\";\\r\\nimport \\\"./token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./token/ERC721HolderUpgradeable.sol\\\";\\r\\nimport \\\"./token/ERC1155HolderUpgradeable.sol\\\";\\r\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\n// Authors: @0xKiwi_.\\r\\n\\r\\ninterface IWETH {\\r\\n  function deposit() external payable;\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function withdraw(uint) external;\\r\\n  function balanceOf(address to) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract PIPXMarketplaceZap is Ownable, ReentrancyGuard, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n  \\r\\n  IWETH public immutable WETH; \\r\\n  IPIPXLPStaking public immutable lpStaking;\\r\\n  IPIPXVaultFactory public immutable pipxFactory;\\r\\n  IApeRouter01 public immutable sushiRouter;\\r\\n\\r\\n  uint256 constant BASE = 1e18;\\r\\n\\r\\n  event Buy(uint256 count, uint256 ethSpent, address to);\\r\\n  event Sell(uint256 count, uint256 ethReceived, address to);\\r\\n  event Swap(uint256 count, uint256 ethSpent, address to);\\r\\n\\r\\n  constructor(address _pipxFactory, address _sushiRouter) Ownable() ReentrancyGuard() {\\r\\n    pipxFactory = IPIPXVaultFactory(_pipxFactory);\\r\\n    lpStaking = IPIPXLPStaking(IPIPXFeeDistributor(IPIPXVaultFactory(_pipxFactory).feeDistributor()).lpStaking());\\r\\n    sushiRouter = IApeRouter01(_sushiRouter);\\r\\n    WETH = IWETH(IApeRouter01(_sushiRouter).WETH());\\r\\n    IERC20Upgradeable(address(IApeRouter01(_sushiRouter).WETH())).safeApprove(_sushiRouter, type(uint256).max);\\r\\n  }\\r\\n\\r\\n  function mintAndSell721(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata ids, \\r\\n    uint256 minEthOut, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(ids.length != 0);\\r\\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\\r\\n    uint256[] memory amounts = _sellVaultTokenETH(vault, minEthOut, vaultBalance, path, to);\\r\\n    emit Sell(ids.length, amounts[amounts.length-1], to);\\r\\n  }\\r\\n\\r\\n  function mintAndSell721WETH(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata ids, \\r\\n    uint256 minWethOut, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(ids.length != 0);\\r\\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\\r\\n    uint256[] memory amounts = _sellVaultTokenWETH(vault, minWethOut, vaultBalance, path, to);\\r\\n    emit Sell(ids.length, amounts[amounts.length-1], to);\\r\\n  }\\r\\n\\r\\n  function buyAndSwap721(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata idsIn, \\r\\n    uint256[] calldata specificIds, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external payable nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(idsIn.length != 0);\\r\\n    WETH.deposit{value: msg.value}();\\r\\n    IPIPXVault vault = IPIPXVault(pipxFactory.vault(vaultId));\\r\\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\\r\\n        vault.randomSwapFee() * (idsIn.length - specificIds.length)\\r\\n    );\\r\\n    uint256[] memory amounts = _buyVaultToken(redeemFees, msg.value, path);\\r\\n    _swap721(vaultId, idsIn, specificIds, to);\\r\\n\\r\\n    emit Swap(idsIn.length, amounts[0], to);\\r\\n\\r\\n    // Return extras.\\r\\n    uint256 remaining = WETH.balanceOf(address(this));\\r\\n    WETH.withdraw(remaining);\\r\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  function buyAndSwap721WETH(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata idsIn, \\r\\n    uint256[] calldata specificIds, \\r\\n    uint256 maxWethIn, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(idsIn.length != 0);\\r\\n    IERC20Upgradeable(address(WETH)).safeTransferFrom(msg.sender, address(this), maxWethIn);\\r\\n    IPIPXVault vault = IPIPXVault(pipxFactory.vault(vaultId));\\r\\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\\r\\n        vault.randomSwapFee() * (idsIn.length - specificIds.length)\\r\\n    );\\r\\n    uint256[] memory amounts = _buyVaultToken(redeemFees, maxWethIn, path);\\r\\n    _swap721(vaultId, idsIn, specificIds, to);\\r\\n\\r\\n    emit Swap(idsIn.length, amounts[0], to);\\r\\n\\r\\n    // Return extras.\\r\\n    uint256 remaining = WETH.balanceOf(address(this));\\r\\n    if (remaining != 0) {\\r\\n      WETH.transfer(to, remaining);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function buyAndSwap1155(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata idsIn, \\r\\n    uint256[] calldata amounts, \\r\\n    uint256[] calldata specificIds, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external payable nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    uint256 length = idsIn.length;\\r\\n    require(length != 0);\\r\\n    WETH.deposit{value: msg.value}();\\r\\n    uint256 count;\\r\\n    for (uint256 i; i < length; ++i) {\\r\\n        uint256 amount = amounts[i];\\r\\n        require(amount > 0, \\\"Transferring < 1\\\");\\r\\n        count += amount;\\r\\n    }\\r\\n    IPIPXVault vault = IPIPXVault(pipxFactory.vault(vaultId));\\r\\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\\r\\n        vault.randomSwapFee() * (count - specificIds.length)\\r\\n    );\\r\\n    uint256[] memory swapAmounts = _buyVaultToken(redeemFees, msg.value, path);\\r\\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\\r\\n\\r\\n    emit Swap(count, swapAmounts[0], to);\\r\\n\\r\\n    // Return extras.\\r\\n    uint256 remaining = WETH.balanceOf(address(this));\\r\\n    WETH.withdraw(remaining);\\r\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  function buyAndSwap1155WETH(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata idsIn, \\r\\n    uint256[] calldata amounts, \\r\\n    uint256[] calldata specificIds, \\r\\n    uint256 maxWethIn, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external payable nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(idsIn.length != 0);\\r\\n    uint256 count;\\r\\n    for (uint256 i = 0; i < idsIn.length; i++) {\\r\\n        uint256 amount = amounts[i];\\r\\n        require(amount > 0, \\\"Transferring < 1\\\");\\r\\n        count += amount;\\r\\n    }\\r\\n    IPIPXVault vault = IPIPXVault(pipxFactory.vault(vaultId));\\r\\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\\r\\n        vault.randomSwapFee() * (count - specificIds.length)\\r\\n    );\\r\\n    IERC20Upgradeable(address(WETH)).safeTransferFrom(msg.sender, address(this), maxWethIn);\\r\\n    uint256[] memory swapAmounts = _buyVaultToken(redeemFees, maxWethIn, path);\\r\\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\\r\\n\\r\\n    emit Swap(count, swapAmounts[0], to);\\r\\n\\r\\n    // Return extras.\\r\\n    uint256 remaining = WETH.balanceOf(address(this));\\r\\n    WETH.transfer(to, remaining);\\r\\n  }\\r\\n\\r\\n  function buyAndRedeem(\\r\\n    uint256 vaultId, \\r\\n    uint256 amount,\\r\\n    uint256[] calldata specificIds, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external payable nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(amount != 0);\\r\\n    WETH.deposit{value: msg.value}();\\r\\n    (, uint256 randomRedeemFee, uint256 targetRedeemFee, ,) = pipxFactory.vaultFees(vaultId);\\r\\n    uint256 totalFee = (targetRedeemFee * specificIds.length) + (\\r\\n        randomRedeemFee * (amount - specificIds.length)\\r\\n    );\\r\\n    uint256[] memory amounts = _buyVaultToken((amount*BASE)+totalFee, msg.value, path);\\r\\n    _redeem(vaultId, amount, specificIds, to);\\r\\n\\r\\n    emit Buy(amount, amounts[0], to);\\r\\n\\r\\n    uint256 remaining = WETH.balanceOf(address(this));\\r\\n    if (remaining != 0) {\\r\\n      WETH.withdraw(remaining);\\r\\n      (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\r\\n      require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function buyAndRedeemWETH(\\r\\n    uint256 vaultId, \\r\\n    uint256 amount,\\r\\n    uint256[] calldata specificIds, \\r\\n    uint256 maxWethIn, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(amount != 0);\\r\\n    uint256 totalFee;\\r\\n    {\\r\\n    (, uint256 randomRedeemFee, uint256 targetRedeemFee, ,) = pipxFactory.vaultFees(vaultId);\\r\\n      totalFee = (targetRedeemFee * specificIds.length) + (\\r\\n        randomRedeemFee * (amount - specificIds.length)\\r\\n    );\\r\\n    }\\r\\n    IERC20Upgradeable(address(WETH)).safeTransferFrom(msg.sender, address(this), maxWethIn);\\r\\n    uint256[] memory amounts = _buyVaultToken((amount*BASE) + totalFee, maxWethIn, path);\\r\\n    _redeem(vaultId, amount, specificIds, to);\\r\\n    emit Buy(amount, amounts[0], to);\\r\\n\\r\\n    uint256 remaining = WETH.balanceOf(address(this));\\r\\n    if (remaining != 0) {\\r\\n      WETH.transfer(to, remaining);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function mintAndSell1155(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata ids, \\r\\n    uint256[] calldata amounts,\\r\\n    uint256 minWethOut, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(ids.length != 0);\\r\\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\\r\\n    uint256[] memory uniAmounts = _sellVaultTokenETH(vault, minWethOut, vaultTokenBalance, path, to);\\r\\n\\r\\n    uint256 count;\\r\\n    uint256 length = ids.length;\\r\\n    for (uint256 i; i < length; ++i) {\\r\\n        count += amounts[i];\\r\\n    }\\r\\n    emit Sell(count, uniAmounts[uniAmounts.length-1], to);\\r\\n  }\\r\\n\\r\\n  function mintAndSell1155WETH(\\r\\n    uint256 vaultId, \\r\\n    uint256[] calldata ids, \\r\\n    uint256[] calldata amounts,\\r\\n    uint256 minWethOut, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) external nonReentrant {\\r\\n    require(to != address(0) && to != address(this));\\r\\n    require(ids.length != 0);\\r\\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\\r\\n    _sellVaultTokenWETH(vault, minWethOut, vaultTokenBalance, path, to);\\r\\n\\r\\n    uint256 count;\\r\\n    uint256 length = ids.length;\\r\\n    for (uint256 i; i < length; ++i) {\\r\\n        count += amounts[i];\\r\\n    }\\r\\n    emit Sell(count, amounts[amounts.length-1], to);\\r\\n  }\\r\\n\\r\\n  function _mint721(\\r\\n    uint256 vaultId, \\r\\n    uint256[] memory ids\\r\\n  ) internal returns (address, uint256) {\\r\\n    address vault = pipxFactory.vault(vaultId);\\r\\n\\r\\n    // Transfer tokens to zap and mint to PIPX.\\r\\n    address assetAddress = IPIPXVault(vault).assetAddress();\\r\\n    uint256 length = ids.length;\\r\\n    for (uint256 i; i < length; ++i) {\\r\\n      transferFromERC721(assetAddress, ids[i], vault);\\r\\n      approveERC721(assetAddress, vault, ids[i]);\\r\\n    }\\r\\n    uint256[] memory emptyIds;\\r\\n    IPIPXVault(vault).mint(ids, emptyIds);\\r\\n    uint256 count = ids.length;\\r\\n    uint256 balance = (count * BASE) - (count * IPIPXVault(vault).mintFee()); \\r\\n    \\r\\n    return (vault, balance);\\r\\n  }\\r\\n\\r\\n  function _swap721(\\r\\n    uint256 vaultId, \\r\\n    uint256[] memory idsIn,\\r\\n    uint256[] memory idsOut,\\r\\n    address to\\r\\n  ) internal returns (address) {\\r\\n    address vault = pipxFactory.vault(vaultId);\\r\\n\\r\\n    // Transfer tokens to zap and mint to PIPX.\\r\\n    address assetAddress = IPIPXVault(vault).assetAddress();\\r\\n    uint256 length = idsIn.length;\\r\\n    for (uint256 i; i < length; ++i) {\\r\\n      transferFromERC721(assetAddress, idsIn[i], vault);\\r\\n      approveERC721(assetAddress, vault, idsIn[i]);\\r\\n    }\\r\\n    uint256[] memory emptyIds;\\r\\n    IPIPXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\\r\\n    \\r\\n    return (vault);\\r\\n  }\\r\\n\\r\\n  function _swap1155(\\r\\n    uint256 vaultId, \\r\\n    uint256[] memory idsIn,\\r\\n    uint256[] memory amounts,\\r\\n    uint256[] memory idsOut,\\r\\n    address to\\r\\n  ) internal returns (address) {\\r\\n    address vault = pipxFactory.vault(vaultId);\\r\\n\\r\\n    // Transfer tokens to zap and mint to PIPX.\\r\\n    address assetAddress = IPIPXVault(vault).assetAddress();\\r\\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \\\"\\\");\\r\\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\\r\\n    IPIPXVault(vault).swapTo(idsIn, amounts, idsOut, to);\\r\\n    \\r\\n    return (vault);\\r\\n  }\\r\\n\\r\\n  function _redeem(\\r\\n    uint256 vaultId, \\r\\n    uint256 amount,\\r\\n    uint256[] memory specificIds,\\r\\n    address to\\r\\n  ) internal {\\r\\n    address vault = pipxFactory.vault(vaultId);\\r\\n    IPIPXVault(vault).redeemTo(amount, specificIds, to);\\r\\n  }\\r\\n\\r\\n  function _mint1155(\\r\\n    uint256 vaultId, \\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts\\r\\n  ) internal returns (address, uint256) {\\r\\n    address vault = pipxFactory.vault(vaultId);\\r\\n    require(vault != address(0), \\\"PIPXZap: Vault does not exist\\\");\\r\\n\\r\\n    // Transfer tokens to zap and mint to PIPX.\\r\\n    address assetAddress = IPIPXVault(vault).assetAddress();\\r\\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \\\"\\\");\\r\\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\\r\\n\\r\\n    uint256 count = IPIPXVault(vault).mint(ids, amounts);\\r\\n    uint256 balance = (count * BASE) - (IPIPXVault(vault).mintFee()*count);\\r\\n    \\r\\n    return (vault, balance);\\r\\n  }\\r\\n\\r\\n  function _buyVaultToken(\\r\\n    uint256 minTokenOut, \\r\\n    uint256 maxWethIn, \\r\\n    address[] calldata path\\r\\n  ) internal returns (uint256[] memory) {\\r\\n    uint256[] memory amounts = sushiRouter.swapTokensForExactTokens(\\r\\n      minTokenOut,\\r\\n      maxWethIn,\\r\\n      path, \\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    return amounts;\\r\\n  }\\r\\n  function _sellVaultTokenWETH(\\r\\n    address vault, \\r\\n    uint256 minWethOut, \\r\\n    uint256 maxTokenIn, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) internal returns (uint256[] memory) {\\r\\n    IERC20Upgradeable(vault).safeApprove(address(sushiRouter), maxTokenIn);\\r\\n    uint256[] memory amounts = sushiRouter.swapExactTokensForTokens(\\r\\n      maxTokenIn,\\r\\n      minWethOut,\\r\\n      path, \\r\\n      to,\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    return amounts;\\r\\n  }\\r\\n\\r\\n  function _sellVaultTokenETH(\\r\\n    address vault, \\r\\n    uint256 minEthOut, \\r\\n    uint256 maxTokenIn, \\r\\n    address[] calldata path,\\r\\n    address to\\r\\n  ) internal returns (uint256[] memory) {\\r\\n    IERC20Upgradeable(vault).safeApprove(address(sushiRouter), maxTokenIn);\\r\\n    uint256[] memory amounts = sushiRouter.swapExactTokensForETH(\\r\\n      maxTokenIn,\\r\\n      minEthOut,\\r\\n      path, \\r\\n      to,\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    return amounts;\\r\\n  }\\r\\n\\r\\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\\r\\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\r\\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\r\\n    bytes memory data;\\r\\n    if (assetAddr == kitties) {\\r\\n        // Cryptokitties.\\r\\n        data = abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, to, tokenId);\\r\\n    } else if (assetAddr == punks) {\\r\\n        // CryptoPunks.\\r\\n        // Fix here for frontrun attack. Added in v1.0.2.\\r\\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenId);\\r\\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\\r\\n        (address nftOwner) = abi.decode(result, (address));\\r\\n        require(checkSuccess && nftOwner == msg.sender, \\\"Not the NFT owner\\\");\\r\\n        data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\r\\n    } else {\\r\\n        // Default.\\r\\n        // We push to the vault to avoid an unneeded transfer.\\r\\n        data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", msg.sender, to, tokenId);\\r\\n    }\\r\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\r\\n    require(success, string(resultData));\\r\\n  }\\r\\n\\r\\n  function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\\r\\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\r\\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\r\\n    bytes memory data;\\r\\n    if (assetAddr == kitties) {\\r\\n        // // Cryptokitties.\\r\\n        // data = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", to, tokenId);\\r\\n        // No longer needed to approve with pushing.\\r\\n        return;\\r\\n    } else if (assetAddr == punks) {\\r\\n        // CryptoPunks.\\r\\n        data = abi.encodeWithSignature(\\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\", tokenId, 0, to);\\r\\n    } else {\\r\\n      // No longer needed to approve with pushing.\\r\\n      return;\\r\\n    }\\r\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\r\\n    require(success, string(resultData));\\r\\n  }\\r\\n\\r\\n  // calculates the CREATE2 address for a pair without making any external calls\\r\\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\r\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\\r\\n      hex'ff',\\r\\n      sushiRouter.factory(),\\r\\n      keccak256(abi.encodePacked(token0, token1)),\\r\\n      hex'511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8' // init code hash\\r\\n    )))));\\r\\n  }\\r\\n\\r\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n      require(tokenA != tokenB, 'ApeV2Library: IDENTICAL_ADDRESSES');\\r\\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n      require(token0 != address(0), 'ApeV2Library: ZERO_ADDRESS');\\r\\n  }\\r\\n\\r\\n  function rescue(address token) external onlyOwner {\\r\\n    if (token == address(0)) {\\r\\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n      require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    } else {\\r\\n      IERC20Upgradeable(token).safeTransfer(msg.sender, IERC20Upgradeable(token).balanceOf(address(this)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n    require(msg.sender == address(WETH), \\\"Only WETH\\\");\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/proxy/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {BeaconProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function childImplementation() external view returns (address);\\r\\n    function upgradeChildTo(address newImplementation) external;\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/token/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\nabstract contract ERC1155HolderUpgradeable is ERC1155ReceiverUpgradeable {\\r\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"../util/ERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\nabstract contract ERC1155ReceiverUpgradeable is ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/ERC721HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC721Receiver} interface.\\r\\n *\\r\\n * Accepts all token transfers.\\r\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\r\\n */\\r\\ncontract ERC721HolderUpgradeable is IERC721ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev See {IERC721Receiver-onERC721Received}.\\r\\n     *\\r\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        To accept the transfer, this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n        (i.e. 0xf23a6e61, or its own function selector).\\r\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param id The ID of the token being transferred\\r\\n        @param value The amount of tokens being transferred\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns(bytes4);\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n        been updated. To accept the transfer(s), this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n        (i.e. 0xbc197c81, or its own function selector).\\r\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns(bytes4);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/util/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/util/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/util/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20Upgradeable {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pipxFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndRedeemWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap1155WETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap721WETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract IPIPXLPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell1155WETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minEthOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell721WETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pipxFactory\",\"outputs\":[{\"internalType\":\"contract IPIPXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IApeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PIPXMarketplaceZap", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000007b696f9b1b3fdf8561950496bebc5cba3baf7c47000000000000000000000000c0788a3ad43d79aa53b09c2eacc313a787d1d607", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}