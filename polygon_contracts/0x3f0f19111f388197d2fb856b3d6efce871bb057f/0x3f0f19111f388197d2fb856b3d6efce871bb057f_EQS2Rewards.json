{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/checkout/IEQS2Checkout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IEQS2Checkout {\\r\\n    function initialize() external;\\r\\n\\r\\n    function purchase(string memory _nftName) external;\\r\\n\\r\\n    function purchaseWithCredits(string memory _nftName) external;\\r\\n\\r\\n    function addUserCredits(address userAddress, uint256 credits) external;\\r\\n\\r\\n    function adminUpdateSettings(\\r\\n        address _userRegistry,\\r\\n        address _careerPlanPool,\\r\\n        address _meritocraticPool,\\r\\n        address _pioneersPool,\\r\\n        address _eqs2NFTs,\\r\\n        address _usdToken,\\r\\n        address _eqs2Rewards\\r\\n    ) external;\\r\\n\\r\\n    event Purchase(\\r\\n        bytes32 indexed _nftNameHash,\\r\\n        bytes32 indexed _purchaser,\\r\\n        uint256 _tokenId,\\r\\n        string _nftName,\\r\\n        string _purchaserUsername,\\r\\n        uint256 _price,\\r\\n        uint256 _apy,\\r\\n        uint256 _reward,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libs/EQS2StringLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary EQS2StringLibrary {\\r\\n    /**\\r\\n     * @dev Converts a string to lowercase.\\r\\n     * @param _string The string to convert to lowercase.\\r\\n     */\\r\\n    function toLowercase(\\r\\n        string memory _string\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes memory bStr = bytes(_string);\\r\\n        bytes memory bLower = new bytes(bStr.length);\\r\\n        for (uint i = 0; i < bStr.length; i++) {\\r\\n            // Uppercase character...\\r\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\r\\n                // So we add 32 to make it lowercase\\r\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\r\\n            } else {\\r\\n                bLower[i] = bStr[i];\\r\\n            }\\r\\n        }\\r\\n        return string(bLower);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if a string is empty.\\r\\n     * @param _string The string to check.\\r\\n     */\\r\\n    function isEmptyString(string memory _string) internal pure returns (bool) {\\r\\n        return (bytes(_string).length == 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Abi encodes a string.\\r\\n     */\\r\\n    function abiEncode(\\r\\n        string memory _string\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(bytes(_string));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Abi encodes and then keccak256 hashes a string.\\r\\n     */\\r\\n    function abiEncodeKeccak256(\\r\\n        string memory _string\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abiEncode(_string));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/nfts/IEQS2NFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"erc721a/contracts/extensions/IERC721AQueryable.sol\\\";\\r\\nimport \\\"erc721a/contracts/extensions/IERC721ABurnable.sol\\\";\\r\\n\\r\\ninterface IEQS2NFTs is IERC721AQueryable, IERC721ABurnable {\\r\\n    function mint(address _to) external returns (uint256 tokenId);\\r\\n\\r\\n    function isPaused() external view returns (bool);\\r\\n\\r\\n    function adminSetAllowedMinter(address _minter, bool _isAllowed) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/rewards/EQS2Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./EQS2RewardsBase.sol\\\";\\r\\nimport \\\"./../v1Interfaces/IEqueusUserRegistry.sol\\\";\\r\\nimport \\\"./../nfts/IEQS2NFTs.sol\\\";\\r\\nimport \\\"./../libs/EQS2StringLibrary.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ncontract EQS2Rewards is EQS2RewardsBase {\\r\\n    using EQS2StringLibrary for string;\\r\\n\\r\\n    event APYClaimed(uint256 indexed tokenId, uint256 reward);\\r\\n    event CommissionClaimed(\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 reward,\\r\\n        uint256 credits\\r\\n    );\\r\\n    event FidelityRewardClaimed(uint256 indexed tokenId, uint256 reward);\\r\\n\\r\\n    event RewardCreated(\\r\\n        bytes32 indexed _nftNameHash,\\r\\n        bytes32 indexed _purchaser,\\r\\n        uint256 _tokenId,\\r\\n        string _nftName,\\r\\n        string _purchaserUsername,\\r\\n        uint256 _price,\\r\\n        uint256 _apy,\\r\\n        uint256 _reward,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event CommissionCreated(\\r\\n        bytes32 indexed _receiver,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _tokenIdPurchaser,\\r\\n        string _receiverUsername,\\r\\n        uint256 _reward,\\r\\n        uint256 _level,\\r\\n        uint256 _fidelityReward,\\r\\n        uint256 _fidelityLockTime,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    function createReward(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _tokenIdAPY,\\r\\n        uint256 _tokenIdPurchaseValue,\\r\\n        string memory nftName,\\r\\n        string memory purchaserUsername\\r\\n    ) public onlyAllowedCheckoutContracts {\\r\\n        require(_tokenIdAPY > 0, \\\"invalid_apy\\\");\\r\\n        require(_tokenIdPurchaseValue > 0, \\\"invalid_purchase_value\\\");\\r\\n\\r\\n        bytes32 purchaserUsernameHash = purchaserUsername.abiEncodeKeccak256();\\r\\n\\r\\n        tokens[_tokenId] = TokenData({\\r\\n            tokenId: _tokenId,\\r\\n            apy: _tokenIdAPY,\\r\\n            purchaseValue: _tokenIdPurchaseValue,\\r\\n            totalReward: (_tokenIdPurchaseValue * _tokenIdAPY) / 100,\\r\\n            rewardLeft: (_tokenIdPurchaseValue * _tokenIdAPY) / 100,\\r\\n            lastClaimed: block.timestamp + REQUIRED_START_TIME,\\r\\n            startDate: block.timestamp + REQUIRED_START_TIME,\\r\\n            endDate: block.timestamp + TOTAL_REWARD_TIME\\r\\n        });\\r\\n\\r\\n        TOTAL_REWARD += _tokenIdPurchaseValue;\\r\\n\\r\\n        if (\\r\\n            purchaserActiveSince[purchaserUsernameHash] + 30 days <\\r\\n            block.timestamp\\r\\n        ) {\\r\\n            purchaserActiveSince[purchaserUsernameHash] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        emit RewardCreated(\\r\\n            nftName.abiEncodeKeccak256(),\\r\\n            purchaserUsernameHash,\\r\\n            _tokenId,\\r\\n            nftName,\\r\\n            purchaserUsername,\\r\\n            _tokenIdPurchaseValue,\\r\\n            _tokenIdAPY,\\r\\n            (_tokenIdPurchaseValue * _tokenIdAPY) / 100,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createCommissions(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _tokenIdPurchaser,\\r\\n        uint256 _totalReward,\\r\\n        uint256 _fidelityReward,\\r\\n        uint256 _level,\\r\\n        string memory receiverUsername\\r\\n    ) public onlyAllowedCheckoutContracts {\\r\\n        require(_totalReward > 0, \\\"invalid_total_reward\\\");\\r\\n\\r\\n        commissions[_tokenId] = CommissionTokenData({\\r\\n            tokenId: _tokenId,\\r\\n            totalReward: _totalReward,\\r\\n            rewardLeft: _totalReward,\\r\\n            lastClaimed: block.timestamp + REQUIRED_START_TIME,\\r\\n            fidelityReward: _fidelityReward,\\r\\n            fidelityUnlockTime: block.timestamp +\\r\\n                FIDELITY_LOCK_TIME +\\r\\n                REQUIRED_START_TIME,\\r\\n            startTime: block.timestamp + REQUIRED_START_TIME\\r\\n        });\\r\\n\\r\\n        TOTAL_COMMISSIONS += _totalReward;\\r\\n        TOTAL_FIDELITY_REWARDS += _fidelityReward;\\r\\n\\r\\n        emit CommissionCreated(\\r\\n            receiverUsername.abiEncodeKeccak256(),\\r\\n            _tokenId,\\r\\n            _tokenIdPurchaser,\\r\\n            receiverUsername,\\r\\n            _totalReward,\\r\\n            _level,\\r\\n            _fidelityReward,\\r\\n            block.timestamp + FIDELITY_LOCK_TIME + REQUIRED_START_TIME,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTokenIdAvailableAPY(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (uint256) {\\r\\n        TokenData memory tokenData = tokens[tokenId];\\r\\n\\r\\n        if (tokenData.rewardLeft == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            tokenData.startDate > block.timestamp ||\\r\\n            tokenData.lastClaimed > block.timestamp\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsedSinceLastClaim = block.timestamp -\\r\\n            tokenData.lastClaimed;\\r\\n        uint256 rewardPerSecond = (tokenData.totalReward * 1e6) / TOTAL_REWARD_TIME;\\r\\n        uint256 reward = (timeElapsedSinceLastClaim * rewardPerSecond) / 1e6;\\r\\n\\r\\n        if (reward > tokenData.rewardLeft) {\\r\\n            reward = tokenData.rewardLeft;\\r\\n        }\\r\\n\\r\\n        require(reward <= tokenData.totalReward, \\\"invalid_reward\\\");\\r\\n\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function claimAPY(\\r\\n        uint256 tokenId\\r\\n    ) public allowedToken(tokenId) claimIsNotPaused whenNotPaused {\\r\\n        require(eqs2NFTs.ownerOf(tokenId) == _msgSender(), \\\"permission_denied\\\");\\r\\n\\r\\n        uint256 reward = getTokenIdAvailableAPY(tokenId);\\r\\n        tokens[tokenId].rewardLeft -= reward;\\r\\n        if (tokens[tokenId].rewardLeft == 0) {\\r\\n            tokens[tokenId].endDate = block.timestamp;\\r\\n        }\\r\\n        tokens[tokenId].lastClaimed = block.timestamp;\\r\\n\\r\\n        TOTAL_REWARD -= reward;\\r\\n\\r\\n        USD.transfer(_msgSender(), reward);\\r\\n\\r\\n        emit APYClaimed(tokenId, reward);\\r\\n    }\\r\\n\\r\\n    function getTokenIdAvailableCommission(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 lastClaimed = commissions[tokenId].lastClaimed;\\r\\n        uint256 rewardLeft = commissions[tokenId].rewardLeft;\\r\\n        uint256 totalReward = commissions[tokenId].totalReward;\\r\\n\\r\\n        if (rewardLeft == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (lastClaimed > block.timestamp || lastClaimed == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsedSinceLastClaim = block.timestamp - lastClaimed;\\r\\n        uint256 rewardPerSecond = (totalReward * 1e6) / TOTAL_REWARD_TIME;\\r\\n        uint256 reward = (timeElapsedSinceLastClaim * rewardPerSecond) / 1e6;\\r\\n\\r\\n        if (reward > rewardLeft) {\\r\\n            reward = rewardLeft;\\r\\n        }\\r\\n\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function claimCommission(\\r\\n        uint256 tokenId\\r\\n    ) public allowedToken(tokenId) claimIsNotPaused whenNotPaused {\\r\\n        require(eqs2NFTs.ownerOf(tokenId) == _msgSender(), \\\"permission_denied\\\");\\r\\n\\r\\n        uint256 reward = getTokenIdAvailableCommission(tokenId);\\r\\n        commissions[tokenId].rewardLeft -= reward;\\r\\n        commissions[tokenId].lastClaimed = block.timestamp;\\r\\n\\r\\n        TOTAL_COMMISSIONS -= reward;\\r\\n\\r\\n        // 10% of the commission is added to the user credits\\r\\n        uint256 userCredits = reward / 10;\\r\\n        USD.approve(address(eqs2Checkout), userCredits);\\r\\n        eqs2Checkout.addUserCredits(_msgSender(), userCredits);\\r\\n\\r\\n        USD.transfer(_msgSender(), reward - userCredits);\\r\\n\\r\\n        emit CommissionClaimed(tokenId, reward, userCredits);\\r\\n    }\\r\\n\\r\\n    function bulkClaimCommission(uint256[] memory array) public {\\r\\n        for (uint256 i = 0; i < array.length; i++) {\\r\\n            claimCommission(array[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isUserEligibleForFidelityReward(\\r\\n        uint256 tokenId,\\r\\n        address userAddress\\r\\n    ) public view returns (bool) {\\r\\n        if (eqs2NFTs.ownerOf(tokenId) != userAddress) {\\r\\n            return false;\\r\\n        }\\r\\n        User memory user = userRegistry.getUserByAddress(userAddress);\\r\\n        if (user.username.isEmptyString()) {\\r\\n            return false;\\r\\n        }\\r\\n        if (\\r\\n            purchaserActiveSince[user.username.abiEncodeKeccak256()] >\\r\\n            commissions[tokenId].startTime\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimFidelityReward(\\r\\n        uint256 tokenId\\r\\n    ) public allowedToken(tokenId) claimIsNotPaused whenNotPaused {\\r\\n        require(eqs2NFTs.ownerOf(tokenId) == _msgSender(), \\\"permission_denied\\\");\\r\\n        require(\\r\\n            commissions[tokenId].fidelityReward > 0,\\r\\n            \\\"fidelity_reward_is_zero\\\"\\r\\n        );\\r\\n        require(\\r\\n            commissions[tokenId].fidelityUnlockTime < block.timestamp,\\r\\n            \\\"fidelity_reward_is_locked\\\"\\r\\n        );\\r\\n        User memory user = userRegistry.getUserByAddress(_msgSender());\\r\\n\\r\\n        require(\\r\\n            purchaserActiveSince[user.username.abiEncodeKeccak256()] <=\\r\\n                commissions[tokenId].startTime,\\r\\n            \\\"user_not_eligible_for_fidelity_reward\\\"\\r\\n        );\\r\\n\\r\\n        uint256 reward = commissions[tokenId].fidelityReward;\\r\\n        commissions[tokenId].fidelityReward = 0;\\r\\n\\r\\n        TOTAL_FIDELITY_REWARDS -= reward;\\r\\n\\r\\n        USD.transfer(_msgSender(), reward);\\r\\n\\r\\n        emit FidelityRewardClaimed(tokenId, reward);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/rewards/EQS2RewardsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./../v1Interfaces/IEqueusUserRegistry.sol\\\";\\r\\nimport \\\"./../nfts/IEQS2NFTs.sol\\\";\\r\\nimport \\\"./../libs/EQS2StringLibrary.sol\\\";\\r\\nimport \\\"./../checkout/IEQS2Checkout.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nabstract contract EQS2RewardsBase is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable\\r\\n{\\r\\n    using EQS2StringLibrary for string;\\r\\n\\r\\n    struct TokenData {\\r\\n        uint256 tokenId;\\r\\n        uint256 apy;\\r\\n        uint256 purchaseValue;\\r\\n        uint256 totalReward;\\r\\n        uint256 rewardLeft;\\r\\n        uint256 lastClaimed;\\r\\n        uint256 startDate;\\r\\n        uint256 endDate;\\r\\n    }\\r\\n\\r\\n    struct CommissionTokenData {\\r\\n        uint256 tokenId;\\r\\n        uint256 totalReward;\\r\\n        uint256 rewardLeft;\\r\\n        uint256 lastClaimed;\\r\\n        uint256 fidelityReward;\\r\\n        uint256 fidelityUnlockTime;\\r\\n        uint256 startTime;\\r\\n    }\\r\\n\\r\\n    IERC20 public USD;\\r\\n    IEqueusUserRegistry public userRegistry;\\r\\n    IEQS2NFTs public eqs2NFTs;\\r\\n    IEQS2Checkout public eqs2Checkout;\\r\\n\\r\\n    mapping(address => bool) public operators;\\r\\n    bool public isPaused;\\r\\n    bool public isClaimPaused;\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!isPaused, \\\"paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier operatorOrOwner() {\\r\\n        require(\\r\\n            operators[msg.sender] || msg.sender == owner(),\\r\\n            \\\"EQS2Rewards: caller is not an operator nor owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier claimIsNotPaused() {\\r\\n        require(!isClaimPaused, \\\"EQS2Rewards: claim is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This represents the total reward left distributed to all NFTs\\r\\n     */\\r\\n    uint256 public TOTAL_REWARD;\\r\\n    /**\\r\\n     * @notice This represents the total reward left distributed to all commissions\\r\\n     */\\r\\n    uint256 public TOTAL_COMMISSIONS;\\r\\n    /**\\r\\n     * @notice This represents the total reward left distributed to all loyalty bonuses\\r\\n     */\\r\\n    uint256 public TOTAL_FIDELITY_REWARDS;\\r\\n    /**\\r\\n     * @notice This represents the default distribution time for all tokens\\r\\n     */\\r\\n    uint256 public TOTAL_REWARD_TIME;\\r\\n    /**\\r\\n     * @notice The fidelity lock time for all tokens\\r\\n     */\\r\\n    uint256 public FIDELITY_LOCK_TIME;\\r\\n    /**\\r\\n     * @notice The time required by tokens to get activated\\r\\n     */\\r\\n    uint256 public REQUIRED_START_TIME;\\r\\n\\r\\n    mapping(address => bool) public allowedCheckoutContracts;\\r\\n\\r\\n    mapping(uint256 => TokenData) public tokens;\\r\\n    mapping(uint256 => CommissionTokenData) public commissions;\\r\\n\\r\\n    mapping(uint256 => bool) bannedTokens;\\r\\n\\r\\n    mapping(bytes32 => uint256) public purchaserActiveSince;\\r\\n\\r\\n    // initialize function\\r\\n    function initialize() public initializer {\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        TOTAL_REWARD_TIME = 30 * 30 days;\\r\\n        FIDELITY_LOCK_TIME = 30 * 26 days;\\r\\n        REQUIRED_START_TIME = 15 days;\\r\\n    }\\r\\n\\r\\n    modifier onlyAllowedCheckoutContracts() {\\r\\n        require(\\r\\n            allowedCheckoutContracts[msg.sender],\\r\\n            \\\"EQS2Rewards: caller is not allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier allowedToken(uint256 _tokenId) {\\r\\n        require(!bannedTokens[_tokenId], \\\"EQS2Rewards: token is not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getTokenData(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (TokenData memory) {\\r\\n        return tokens[tokenId];\\r\\n    }\\r\\n\\r\\n    function getCommissionData(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (CommissionTokenData memory) {\\r\\n        return commissions[tokenId];\\r\\n    }\\r\\n\\r\\n    function adminUpdateAddresses(\\r\\n        address _eqs2NFTs,\\r\\n        address _userRegistry,\\r\\n        address _usd,\\r\\n        address _eqs2Checkout\\r\\n    ) public onlyOwner {\\r\\n        require(_eqs2NFTs != address(0), \\\"null_address\\\");\\r\\n        require(_userRegistry != address(0), \\\"null_address\\\");\\r\\n        require(_usd != address(0), \\\"null_address\\\");\\r\\n        require(_eqs2Checkout != address(0), \\\"null_address\\\");\\r\\n\\r\\n        eqs2NFTs = IEQS2NFTs(_eqs2NFTs);\\r\\n        userRegistry = IEqueusUserRegistry(_userRegistry);\\r\\n        eqs2Checkout = IEQS2Checkout(_eqs2Checkout);\\r\\n        USD = IERC20(_usd);\\r\\n    }\\r\\n\\r\\n    function adminSetTotalRewardTime(\\r\\n        uint256 _totalRewardTime\\r\\n    ) public onlyOwner {\\r\\n        TOTAL_REWARD_TIME = _totalRewardTime;\\r\\n    }\\r\\n\\r\\n    function adminSetFidelityLockTime(\\r\\n        uint256 _fidelityLockTime\\r\\n    ) public onlyOwner {\\r\\n        FIDELITY_LOCK_TIME = _fidelityLockTime;\\r\\n    }\\r\\n\\r\\n    function adminSetAllowedCheckoutContracts(\\r\\n        address _checkoutContract,\\r\\n        bool _allowed\\r\\n    ) public onlyOwner {\\r\\n        allowedCheckoutContracts[_checkoutContract] = _allowed;\\r\\n    }\\r\\n\\r\\n    function adminSetBannedToken(\\r\\n        uint256 _tokenId,\\r\\n        bool _banned\\r\\n    ) public onlyOwner {\\r\\n        bannedTokens[_tokenId] = _banned;\\r\\n    }\\r\\n\\r\\n    function adminSetRequiredStartTime(\\r\\n        uint256 _requiredStartTime\\r\\n    ) public onlyOwner {\\r\\n        REQUIRED_START_TIME = _requiredStartTime;\\r\\n    }\\r\\n\\r\\n    function adminWithdrawERC20(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) public onlyOwner {\\r\\n        IERC20 token = IERC20(_tokenAddress);\\r\\n        token.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function adminSetPaused(bool _isPaused) public operatorOrOwner {\\r\\n        isPaused = _isPaused;\\r\\n    }\\r\\n\\r\\n    function adminSetOperator(\\r\\n        address _operator,\\r\\n        bool _isOperator\\r\\n    ) public onlyOwner {\\r\\n        operators[_operator] = _isOperator;\\r\\n    }\\r\\n\\r\\n    function adminSetClaimPaused(bool _isClaimPaused) public operatorOrOwner {\\r\\n        isClaimPaused = _isClaimPaused;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v1Interfaces/IEqueusUserRegistry.sol\": {\r\n      \"content\": \"// contracts/IEqueusUserRegistry.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct User {\\r\\n    string username;\\r\\n    string sponsor;\\r\\n    address addr;\\r\\n    uint256 activeLines;\\r\\n    uint256 activeLinesExpireTime;\\r\\n    uint256 createdAt;\\r\\n    bool kycVerified;\\r\\n    bool hasSocialMarketingSystemEnabled;\\r\\n    bool isSponsorshipEnabled;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Equeus User Registry Interface.\\r\\n * @notice Interface for the Equeus User Registry.\\r\\n */\\r\\ninterface IEqueusUserRegistry {\\r\\n    event UserRegistered(string username, string sponsor, uint256 timestamp);\\r\\n    event UserImported(\\r\\n        string username,\\r\\n        string sponsor,\\r\\n        address addr,\\r\\n        uint256 activeLines,\\r\\n        uint256 activeLinesExpireTime,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event UserAddressUpdated(string username, address addr, uint256 timestamp);\\r\\n    event KYCVerified(string username, bool isVerified, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if a user exists.\\r\\n     * @param _username The username of the user.\\r\\n     */\\r\\n    function usernameExists(string memory _username) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Registers a new user. Callable only by auth operators.\\r\\n     * @param _username The username of the user.\\r\\n     * @param _sponsor The sponsor of the user. The sponsor must be a registered user.\\r\\n     */\\r\\n    function registerUser(\\r\\n        string memory _username,\\r\\n        string memory _sponsor\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the user by address.\\r\\n     * @param _addr The address of the user.\\r\\n     */\\r\\n    function getUserByAddress(\\r\\n        address _addr\\r\\n    ) external view returns (User memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the user by username.\\r\\n     * @param _username The username of the user.\\r\\n     * @return The username, address, active lines, active lines expire time, created at and sponsorship enabled status of the user.\\r\\n     */\\r\\n    function getUserByUsername(\\r\\n        string memory _username\\r\\n    ) external view returns (User memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the address of the user by username.\\r\\n     * @param _username The username of the user.\\r\\n     * @return The address of the user.\\r\\n     */\\r\\n    function getAddressByUsername(\\r\\n        string memory _username\\r\\n    ) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of the user by username.\\r\\n     * @param _username The username of the user.\\r\\n     * @param _addr The address of the user.\\r\\n     */\\r\\n    function setUserAddress(string memory _username, address _addr) external;\\r\\n\\r\\n    /**\\r\\n     * @dev checks if a username is valid.\\r\\n     * @param _username The username of the user.\\r\\n     */\\r\\n    function isValidUsername(string memory _username) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the user has the social marketing system enabled.\\r\\n     * @param _username The username of the user.\\r\\n     */\\r\\n    function isSocialMarketingSystemEnabled(\\r\\n        string memory _username\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the data needed to process the commission.\\r\\n     * @param _username the username of the user\\r\\n     * @return sponsor\\r\\n     * @return address\\r\\n     * @return active lines\\r\\n     * @return active lines expire time\\r\\n     */\\r\\n    function getCommissioninfo(\\r\\n        string memory _username\\r\\n    ) external returns (string memory, address, uint256, uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the active lines of the user.\\r\\n     */\\r\\n    function setUserActiveLines(\\r\\n        string memory _username,\\r\\n        uint256 _activeLines,\\r\\n        uint256 _activeLinesExpireTime\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the KYC verification status of the user.\\r\\n     */\\r\\n    function setKYCVerified(string memory _username, bool _isVerified) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the sponsorship enabled status of the user.\\r\\n     */\\r\\n    function setSponsorshipEnabled(\\r\\n        string memory _username,\\r\\n        bool _isEnabled\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the social marketing system enabled status of the user.\\r\\n     */\\r\\n    function setSocialMarketingSystemEnabled(\\r\\n        string memory _username,\\r\\n        bool _isEnabled\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/IERC721ABurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721ABurnable.\\n */\\ninterface IERC721ABurnable is IERC721A {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/IERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"APYClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"}],\"name\":\"CommissionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdPurchaser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_receiverUsername\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fidelityReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fidelityLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"FidelityRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_nftNameHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_purchaser\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_nftName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_purchaserUsername\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIDELITY_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRED_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_COMMISSIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_FIDELITY_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkoutContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"adminSetAllowedCheckoutContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_banned\",\"type\":\"bool\"}],\"name\":\"adminSetBannedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimPaused\",\"type\":\"bool\"}],\"name\":\"adminSetClaimPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fidelityLockTime\",\"type\":\"uint256\"}],\"name\":\"adminSetFidelityLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isOperator\",\"type\":\"bool\"}],\"name\":\"adminSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"adminSetPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredStartTime\",\"type\":\"uint256\"}],\"name\":\"adminSetRequiredStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewardTime\",\"type\":\"uint256\"}],\"name\":\"adminSetTotalRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eqs2NFTs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eqs2Checkout\",\"type\":\"address\"}],\"name\":\"adminUpdateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"adminWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedCheckoutContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"bulkClaimCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFidelityReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fidelityReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fidelityUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdPurchaser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fidelityReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiverUsername\",\"type\":\"string\"}],\"name\":\"createCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdPurchaseValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"purchaserUsername\",\"type\":\"string\"}],\"name\":\"createReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eqs2Checkout\",\"outputs\":[{\"internalType\":\"contract IEQS2Checkout\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eqs2NFTs\",\"outputs\":[{\"internalType\":\"contract IEQS2NFTs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCommissionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fidelityReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fidelityUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EQS2RewardsBase.CommissionTokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"internalType\":\"struct EQS2RewardsBase.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdAvailableAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdAvailableCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserEligibleForFidelityReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"purchaserActiveSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userRegistry\",\"outputs\":[{\"internalType\":\"contract IEqueusUserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EQS2Rewards", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}