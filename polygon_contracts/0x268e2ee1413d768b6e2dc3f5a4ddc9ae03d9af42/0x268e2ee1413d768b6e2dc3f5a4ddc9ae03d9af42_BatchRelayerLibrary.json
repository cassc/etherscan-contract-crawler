{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Base minter interface, applicable to Mainnet minter or L2 pseudo minters.\\n */\\ninterface IBalancerMinter {\\n    event Minted(address indexed recipient, address gauge, uint256 minted);\\n\\n    /**\\n     * @notice Returns the address of the Balancer Governance Token\\n     */\\n    function getBalancerToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` and send to them\\n     * @param gauge `LiquidityGauge` address to get mintable amount from\\n     */\\n    function mint(address gauge) external returns (uint256);\\n\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` across multiple gauges\\n     * @param gauges List of `LiquidityGauge` addresses\\n     */\\n    function mintMany(address[] calldata gauges) external returns (uint256);\\n\\n    /**\\n     * @notice Mint tokens for `user`\\n     * @dev Only possible when `msg.sender` has been approved by `user` to mint on their behalf\\n     * @param gauge `LiquidityGauge` address to get mintable amount from\\n     * @param user Address to mint to\\n     */\\n    function mintFor(address gauge, address user) external returns (uint256);\\n\\n    /**\\n     * @notice Mint tokens for `user` across multiple gauges\\n     * @dev Only possible when `msg.sender` has been approved by `user` to mint on their behalf\\n     * @param gauges List of `LiquidityGauge` addresses\\n     * @param user Address to mint to\\n     */\\n    function mintManyFor(address[] calldata gauges, address user) external returns (uint256);\\n\\n    /**\\n     * @notice The total number of tokens minted for `user` from `gauge`\\n     */\\n    function minted(address user, address gauge) external view returns (uint256);\\n\\n    /**\\n     * @notice Whether `minter` is approved to mint tokens for `user`\\n     */\\n    function getMinterApproval(address minter, address user) external view returns (bool);\\n\\n    /**\\n     * @notice Set whether `minter` is approved to mint tokens on your behalf\\n     */\\n    function setMinterApproval(address minter, bool approval) external;\\n\\n    /**\\n     * @notice Set whether `minter` is approved to mint tokens on behalf of `user`, who has signed a message authorizing\\n     * them.\\n     */\\n    function setMinterApprovalWithSignature(\\n        address minter,\\n        bool approval,\\n        address user,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // The below functions are near-duplicates of functions available above.\\n    // They are included for ABI compatibility with snake_casing as used in vyper contracts.\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @notice Whether `minter` is approved to mint tokens for `user`\\n     */\\n    function allowed_to_mint_for(address minter, address user) external view returns (bool);\\n\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` across multiple gauges\\n     * @dev This function is not recommended as `mintMany()` is more flexible and gas efficient\\n     * @param gauges List of `LiquidityGauge` addresses\\n     */\\n    function mint_many(address[8] calldata gauges) external;\\n\\n    /**\\n     * @notice Mint tokens for `user`\\n     * @dev Only possible when `msg.sender` has been approved by `user` to mint on their behalf\\n     * @param gauge `LiquidityGauge` address to get mintable amount from\\n     * @param user Address to mint to\\n     */\\n    function mint_for(address gauge, address user) external;\\n\\n    /**\\n     * @notice Toggle whether `minter` is approved to mint tokens for `user`\\n     */\\n    function toggle_approve_mint(address minter) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase\\n// solhint-disable func-param-name-mixedcase\\n\\ninterface ILiquidityGauge {\\n    // solhint-disable-next-line var-name-mixedcase\\n    event RelativeWeightCapChanged(uint256 new_relative_weight_cap);\\n\\n    /**\\n     * @notice Returns BAL liquidity emissions calculated during checkpoints for the given user.\\n     * @param user User address.\\n     * @return uint256 BAL amount to issue for the address.\\n     */\\n    function integrate_fraction(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Record a checkpoint for a given user.\\n     * @param user User address.\\n     * @return bool Always true.\\n     */\\n    function user_checkpoint(address user) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if gauge is killed; false otherwise.\\n     */\\n    function is_killed() external view returns (bool);\\n\\n    /**\\n     * @notice Kills the gauge so it cannot mint BAL.\\n     */\\n    function killGauge() external;\\n\\n    /**\\n     * @notice Unkills the gauge so it can mint BAL again.\\n     */\\n    function unkillGauge() external;\\n\\n    /**\\n     * @notice Sets a new relative weight cap for the gauge.\\n     * The value shall be normalized to 1e18, and not greater than MAX_RELATIVE_WEIGHT_CAP.\\n     * @param relativeWeightCap New relative weight cap.\\n     */\\n    function setRelativeWeightCap(uint256 relativeWeightCap) external;\\n\\n    /**\\n     * @notice Gets the relative weight cap for the gauge.\\n     */\\n    function getRelativeWeightCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the gauge's relative weight for a given time, capped to its relative weight cap attribute.\\n     * @param time Timestamp in the past or present.\\n     */\\n    function getCappedRelativeWeight(uint256 time) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\n\\ninterface IRewardTokenDistributor {\\n    struct Reward {\\n        IERC20 token;\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 last_update;\\n        uint256 integral;\\n    }\\n\\n    function reward_tokens(uint256 index) external view returns (IERC20);\\n\\n    function reward_data(IERC20 token) external view returns (Reward memory);\\n\\n    function claim_rewards(address user) external;\\n\\n    function add_reward(IERC20 rewardToken, address distributor) external;\\n\\n    function set_reward_distributor(IERC20 rewardToken, address distributor) external;\\n\\n    function deposit_reward_token(IERC20 rewardToken, uint256 amount) external;\\n\\n    function claimable_reward(address rewardToken, address user) external view returns (uint256);\\n\\n    function claimable_reward_write(address rewardToken, address user) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./ILiquidityGauge.sol\\\";\\nimport \\\"./IRewardTokenDistributor.sol\\\";\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\n\\ninterface IStakingLiquidityGauge is IRewardTokenDistributor, ILiquidityGauge, IERC20 {\\n    function initialize(address lpToken, uint256 relativeWeightCap) external;\\n\\n    function lp_token() external view returns (IERC20);\\n\\n    function deposit(uint256 value, address recipient) external;\\n\\n    function withdraw(uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary StablePoolUserData {\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT, EXACT_BPT_IN_FOR_ALL_TOKENS_OUT }\\n\\n    function joinKind(bytes memory self) internal pure returns (JoinKind) {\\n        return abi.decode(self, (JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (ExitKind) {\\n        return abi.decode(self, (ExitKind));\\n    }\\n\\n    // Joins\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\\n    {\\n        (, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (JoinKind, uint256, uint256));\\n    }\\n\\n    function allTokensInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut) {\\n        (, bptAmountOut) = abi.decode(self, (JoinKind, uint256));\\n    }\\n\\n    // Exits\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (ExitKind, uint256[], uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nlibrary WeightedPoolUserData {\\n    // In order to preserve backwards compatibility, make sure new join and exit kinds are added at the end of the enum.\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n    function joinKind(bytes memory self) internal pure returns (JoinKind) {\\n        return abi.decode(self, (JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (ExitKind) {\\n        return abi.decode(self, (ExitKind));\\n    }\\n\\n    // Joins\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\\n    {\\n        (, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (JoinKind, uint256, uint256));\\n    }\\n\\n    function allTokensInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut) {\\n        (, bptAmountOut) = abi.decode(self, (JoinKind, uint256));\\n    }\\n\\n    // Exits\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (ExitKind, uint256[], uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.1 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @notice Simple interface to retrieve the version of a deployed contract.\\n */\\ninterface IVersion {\\n    /**\\n     * @dev Returns a JSON representation of the contract version containing name, version number and task ID.\\n     */\\n    function version() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\ninterface IERC4626 is IERC20 {\\n    /**\\n     * @dev `caller` has exchanged `assets` for `shares`, and transferred those `shares` to `owner`.\\n     */\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    /**\\n     * @dev `caller` has exchanged `shares`, owned by `owner`, for `assets`,\\n     *      and transferred those `assets` to `receiver`.\\n     */\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Mints `shares` Vault shares to `receiver` by depositing exactly `amount` of underlying tokens.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns exactly `shares` from `owner` and sends `assets` of underlying tokens to `receiver`.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev The address of the underlying token that the Vault uses for accounting, depositing, and withdrawing.\\n     */\\n    function asset() external view returns (address);\\n\\n    /**\\n     * @dev Total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n     * @dev The amount of `assets` that the Vault would exchange for the amount\\n     *      of `shares` provided, in an ideal scenario where all the conditions are met.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev The amount of `shares` that the Vault would exchange for the amount\\n     *      of `assets` provided, in an ideal scenario where all the conditions are met.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IERC20PermitDAI {\\n    /**\\n     * @notice update allowance with a signed permit\\n     * @param holder    Token owner's address (Authorizer)\\n     * @param spender   Spender's address\\n     * @param nonce     The permit nonce\\n     * @param expiry    The time at which this expires (unix time)\\n     * @param allowed   Whether the spender is allowed or disallowed from spending\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     */\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/**\\n * @title IBalancerRelayer\\n * @notice Allows safe multicall execution of a relayer's functions\\n */\\ninterface IBalancerRelayer {\\n    function getLibrary() external view returns (address);\\n\\n    function getVault() external view returns (IVault);\\n\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IButtonWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Source: https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/interfaces/IButtonWrapper.sol\\n// Interface definition for ButtonWrapper contract, which wraps an\\n// underlying ERC20 token into a new ERC20 with different characteristics.\\n// NOTE: \\\"uAmount\\\" => underlying token (wrapped) amount and\\n//       \\\"amount\\\" => wrapper token amount\\ninterface IButtonWrapper {\\n    //--------------------------------------------------------------------------\\n    // ButtonWrapper write methods\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens.\\n    /// @param amount The amount of wrapper tokens to mint.\\n    /// @return The amount of underlying tokens deposited.\\n    function mint(uint256 amount) external returns (uint256);\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param amount The amount of wrapper tokens to mint.\\n    /// @return The amount of underlying tokens deposited.\\n    function mintFor(address to, uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param amount The amount of wrapper tokens to burn.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burn(uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param amount The amount of wrapper tokens to burn.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burnTo(address to, uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burnAll() external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param to The beneficiary account.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burnAllTo(address to) external returns (uint256);\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens to the specified beneficiary.\\n    /// @param uAmount The amount of underlying tokens to deposit.\\n    /// @return The amount of wrapper tokens mint.\\n    function deposit(uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param uAmount The amount of underlying tokens to deposit.\\n    /// @return The amount of wrapper tokens mint.\\n    function depositFor(address to, uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param uAmount The amount of underlying tokens to withdraw.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdraw(uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param uAmount The amount of underlying tokens to withdraw.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdrawTo(address to, uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdrawAll() external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param to The beneficiary account.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdrawAllTo(address to) external returns (uint256);\\n\\n    //--------------------------------------------------------------------------\\n    // ButtonWrapper view methods\\n\\n    /// @return The address of the underlying token.\\n    function underlying() external view returns (address);\\n\\n    /// @return The total underlying tokens held by the wrapper contract.\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /// @param who The account address.\\n    /// @return The underlying token balance of the account.\\n    function balanceOfUnderlying(address who) external view returns (uint256);\\n\\n    /// @param uAmount The amount of underlying tokens.\\n    /// @return The amount of wrapper tokens exchangeable.\\n    function underlyingToWrapper(uint256 uAmount) external view returns (uint256);\\n\\n    /// @param amount The amount of wrapper tokens.\\n    /// @return The amount of underlying tokens exchangeable.\\n    function wrapperToUnderlying(uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Interface for MidasCapital. An open interest protocol based on\\n// modified Fuse contracts. Anyone can create an deploy isolated\\n// lending and borrowing pools with custom parameters.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface ICToken is IERC20 {\\n    // Error codes referenced in this file can be found here:\\n    // https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/ErrorReporter.sol\\n    // solhint-disable-previous-line max-line-length\\n\\n    /**\\n     * @dev Underlying asset for this CToken\\n     */\\n    function underlying() external view returns (address);\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise an error code (see ErrorReporter.sol link above for details)\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise an error code (see ErrorReporter.sol link above for details)\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IEulerToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IEulerToken is IERC20 {\\n    /**\\n     * @dev Convert an eToken balance to an underlying amount, taking into account current exchange rate\\n     * @param balance eToken balance, in internal book-keeping units (18 decimals)\\n     * @return Amount in underlying units, (same decimals as underlying token)\\n     */\\n    // https://github.com/euler-xyz/euler-contracts/blob/b1ee3265853628d5a529081d7908c38404201b4e/contracts/modules/EToken.sol#L104\\n    // solhint-disable-previous-line max-line-length\\n    function convertBalanceToUnderlying(uint256 balance) external view returns (uint256);\\n\\n    /**\\n     * @dev Convert an underlying amount to an eToken balance, taking into account current exchange rate\\n     * @param underlyingAmount Amount in underlying units (same decimals as underlying token)\\n     * @return eToken balance, in internal book-keeping units (18 decimals)\\n     */\\n    // https://github.com/euler-xyz/euler-contracts/blob/b1ee3265853628d5a529081d7908c38404201b4e/contracts/modules/EToken.sol#L114\\n    // solhint-disable-previous-line max-line-length\\n    function convertUnderlyingToBalance(uint256 underlyingAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev Transfer underlying tokens from sender to the Euler pool, and increase account's eTokens\\n     */\\n    function deposit(uint256 subAccountId, uint256 amount) external;\\n\\n    /**\\n     * @dev Transfer underlying tokens from Euler pool to sender, and decrease account's eTokens\\n     */\\n    function withdraw(uint256 subAccountId, uint256 amount) external;\\n\\n    /**\\n     * @dev Address of underlying asset\\n     */\\n    function underlyingAsset() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IGearboxDieselToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IGearboxDieselToken is IERC20 {\\n    /**\\n     * @dev returns the address of the vault\\n     */\\n    function owner() external view returns (address);\\n}\\n\\ninterface IGearboxVault {\\n    /**\\n     * @dev returns the address of the underlying asset\\n     */\\n    function underlyingToken() external view returns (address);\\n\\n    /**\\n     * @dev returns a 27 decimal fixed point 'ray' value so a rate of 1 is represented as 1e27\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function getDieselRate_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev converts diesel token amount to main token amount\\n     */\\n    function fromDiesel(uint256) external view returns (uint256);\\n\\n    /**\\n     * @dev converts main token amount to diesel token amount\\n     */\\n    function toDiesel(uint256) external view returns (uint256);\\n\\n    /**\\n     * @dev Adds liquidity to pool and sends diesel (LP) tokens back to the liquidity provider\\n     * The Referral code can be 0\\n     */\\n    function addLiquidity(\\n        uint256 underlyingAmount,\\n        address onBehalfOf,\\n        uint256 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Removes liquidity from the pool and sends the underlying tokens to the `to` address\\n     */\\n    function removeLiquidity(uint256 dieselAmount, address to) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IReaperTokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n// Source: https://github.com/Byte-Masons/beet-strat/blob/master/contracts/ReaperVaultv1_4.sol\\n// Interface definition for the ReaperTokenVault contract, a single strategy vault\\n// for Reaper Farm crypts. The pricePerFullShare is always represented with 18 decimals,\\n// regardless of the underlying token decimals.\\n// ie: If ppfs === 1e18, 1 USDC === 0.000_000_000_001_000_000 rfUSDC\\n// ie: If ppfs === 1e18, 1 DAI === 1 rfDAI\\ninterface IReaperTokenVault is IERC20 {\\n    /**\\n     * @dev returns the address of the vault's underlying asset (mainToken)\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev returns the price for a single Vault share (ie rf-scfUSDT). The getPricePerFullShare is always in 1e18\\n     */\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits `_amount` `token`, issuing shares to the caller.\\n     * If Panic is activated, deposits will not be accepted and this call will fail.\\n     * @param _amount The quantity of tokens to deposit.\\n     **/\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraws the calling account's tokens from this Vault,\\n     * redeeming amount `_shares` for an appropriate amount of tokens.\\n     **/\\n    function withdraw(uint256 _shares) external;\\n\\n    /**\\n     * @dev returns the number of decimals for this vault token.\\n     * For reaper single-strat vaults, the decimals are fixed to 18.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IShareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./ISilo.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    /**\\n     * @dev returns the underlying asset\\n     */\\n    function asset() external view returns (address);\\n\\n    /**\\n     * @dev returns the address of the silo\\n     */\\n    function silo() external view returns (ISilo);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/ISilo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface IBaseSilo {\\n    /// Storage struct that holds all required data for a single token market\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can ONLY be used\\n        // as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n    }\\n\\n    /**\\n     * @dev returns the asset storage struct\\n     * @dev AssetStorage struct contains necessary information for calculating shareToken exchange rates\\n     */\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n}\\n\\ninterface ISilo is IBaseSilo {\\n    /**\\n     * @dev Deposits funds into the Silo\\n     * @param _asset The address of the token to deposit\\n     * @param _depositor The address of the recipient of collateral tokens\\n     * @param _amount The amount of the token to deposit\\n     * @param _collateralOnly: True means your shareToken is protected (cannot be swapped for interest)\\n     * @return collateralAmount deposited amount\\n     * @return collateralShare user collateral shares based on deposited amount\\n     */\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external returns (uint256 collateralAmount, uint256 collateralShare);\\n\\n    /**\\n     * @dev Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n     * @param _asset The address of the token to withdraw\\n     * @param _amount The amount of the token to withdraw\\n     * @param _collateralOnly True if withdrawing collateral only deposit\\n     * @return withdrawnAmount withdrawn amount that was transferred to user\\n     * @return withdrawnShare burned share based on `withdrawnAmount`\\n     */\\n    function withdraw(\\n        address _asset,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external returns (uint256 withdrawnAmount, uint256 withdrawnShare);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n// solhint-disable-next-line max-line-length\\n// Based on https://github.com/aave/protocol-v2/blob/ac58fea62bb8afee23f66197e8bce6d79ecda292/contracts/interfaces/IStaticATokenLM.sol\\n\\ninterface IStaticATokenLM is IERC20 {\\n    struct SignatureParams {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Deposits `ASSET` in the Aave protocol and mints static aTokens to msg.sender\\n     * @param recipient The address that will receive the static aTokens\\n     * @param amount The amount of underlying `ASSET` to deposit (e.g. deposit of 100 USDC)\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param fromUnderlying bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     **/\\n    function deposit(\\n        address recipient,\\n        uint256 amount,\\n        uint16 referralCode,\\n        bool fromUnderlying\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\\n     * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\\n     * @param amount The amount to withdraw, in static balance of StaticAToken\\n     * @param toUnderlying bool\\n     * - `true` for the recipient to get underlying tokens (e.g. USDC)\\n     * - `false` for the recipient to get aTokens (e.g. aUSDC)\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\\n     **/\\n    function withdraw(\\n        address recipient,\\n        uint256 amount,\\n        bool toUnderlying\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\\n     * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\\n     * @param amount The amount to withdraw, in dynamic balance of aToken/underlying asset\\n     * @param toUnderlying bool\\n     * - `true` for the recipient to get underlying tokens (e.g. USDC)\\n     * - `false` for the recipient to get aTokens (e.g. aUSDC)\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\\n     **/\\n    function withdrawDynamicAmount(\\n        address recipient,\\n        uint256 amount,\\n        bool toUnderlying\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Allows to deposit on Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param depositor Address from which the funds to deposit are going to be pulled\\n     * @param recipient Address that will receive the staticATokens, in the average case, same as the `depositor`\\n     * @param value The amount to deposit\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param fromUnderlying bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function metaDeposit(\\n        address depositor,\\n        address recipient,\\n        uint256 value,\\n        uint16 referralCode,\\n        bool fromUnderlying,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows to withdraw from Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner Address owning the staticATokens\\n     * @param recipient Address that will receive the underlying withdrawn from Aave\\n     * @param staticAmount The amount of staticAToken to withdraw. If > 0, `dynamicAmount` needs to be 0\\n     * @param dynamicAmount The amount of underlying/aToken to withdraw. If > 0, `staticAmount` needs to be 0\\n     * @param toUnderlying bool\\n     * - `true` for the recipient to get underlying tokens (e.g. USDC)\\n     * - `false` for the recipient to get aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\\n     */\\n    function metaWithdraw(\\n        address owner,\\n        address recipient,\\n        uint256 staticAmount,\\n        uint256 dynamicAmount,\\n        bool toUnderlying,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Utility method to get the current aToken balance of an user, from his staticAToken balance\\n     * @param account The address of the user\\n     * @return uint256 The aToken balance\\n     **/\\n    function dynamicBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a static amount (scaled balance on aToken) to the aToken/underlying value,\\n     * using the current liquidity index on Aave\\n     * @param amount The amount to convert from\\n     * @return uint256 The dynamic amount\\n     **/\\n    function staticToDynamicAmount(uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts an aToken or underlying amount to the what it is denominated on the aToken as\\n     * scaled balance, function of the principal and the liquidity index\\n     * @param amount The amount to convert from\\n     * @return uint256 The static (scaled) amount\\n     **/\\n    function dynamicToStaticAmount(uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here\\n     * as it can be considered as an ever-increasing exchange rate\\n     * @return The liquidity index\\n     **/\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Function to return a dynamic domain separator, in order to be compatible with forks changing chainId\\n     * @return bytes32 The domain separator\\n     **/\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.\\n     */\\n    function collectAndUpdateRewards() external;\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @dev Only callable by if sender is onBehalfOf or sender is approved claimer\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param receiver The address to receive the rewards\\n     * @param forceUpdate Flag to retrieve latest rewards from `INCENTIVES_CONTROLLER`\\n     */\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        bool forceUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Claim rewards and send them to a receiver\\n     * @param receiver The address to receive the rewards\\n     * @param forceUpdate Flag to retrieve latest rewards from `INCENTIVES_CONTROLLER`\\n     */\\n    function claimRewards(address receiver, bool forceUpdate) external;\\n\\n    /**\\n     * @notice Claim rewards\\n     * @param forceUpdate Flag to retrieve latest rewards from `INCENTIVES_CONTROLLER`\\n     */\\n    function claimRewardsToSelf(bool forceUpdate) external;\\n\\n    /**\\n     * @notice Get the total claimable rewards of the contract.\\n     * @return The current balance + pending rewards from the `_incentivesController`\\n     */\\n    function getTotalClaimableRewards() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total claimable rewards for a user in WAD\\n     * @param user The address of the user\\n     * @return The claimable amount of rewards in WAD\\n     */\\n    function getClaimableRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice The unclaimed rewards for a user in WAD\\n     * @param user The address of the user\\n     * @return The unclaimed amount of rewards in WAD\\n     */\\n    function getUnclaimedRewards(address user) external view returns (uint256);\\n\\n    function getAccRewardsPerToken() external view returns (uint256);\\n\\n    function getLifetimeRewardsClaimed() external view returns (uint256);\\n\\n    function getLifetimeRewards() external view returns (uint256);\\n\\n    function getLastRewardBlock() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function LENDING_POOL() external returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INCENTIVES_CONTROLLER() external returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ATOKEN() external returns (IERC20);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ASSET() external returns (IERC20);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REWARD_TOKEN() external returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n// solhint-disable-next-line max-line-length\\n// Based on https://github.com/lidofinance/lido-dao/blob/816bf1d0995ba5cfdfc264de4acda34a7fe93eba/contracts/0.4.24/Lido.sol\\n\\ninterface IstETH is IERC20 {\\n    function submit(address referral) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/ITetuSmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface ITetuSmartVault is IERC20 {\\n    function deposit(uint256 amount) external;\\n\\n    function depositFor(uint256 amount, address holder) external;\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n\\n    function withdraw(uint256 numberOfShares) external;\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function underlyingUnit() external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IUnbuttonToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IButtonWrapper.sol\\\";\\n\\n// Balancer only supports ERC20 tokens, so we use this intermediate interface\\n// to enforce ERC20-ness of UnbuttonTokens.\\ninterface IUnbuttonToken is IButtonWrapper, IERC20 {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IstETH.sol\\\";\\n\\n// solhint-disable-next-line max-line-length\\n// Based on https://github.com/lidofinance/lido-dao/blob/2b46615a11dee77d4d22066f942f6c6afab9b87a/contracts/0.6.12/WstETH.sol\\n\\n/**\\n * @title StETH token wrapper with static balances.\\n * @dev It's an ERC20 token that represents the account's share of the total\\n * supply of stETH tokens. WstETH token's balance only changes on transfers,\\n * unlike StETH that is also changed when oracles report staking rewards and\\n * penalties. It's a \\\"power user\\\" token for DeFi protocols which don't\\n * support rebasable tokens.\\n *\\n * The contract is also a trustless wrapper that accepts stETH tokens and mints\\n * wstETH in return. Then the user unwraps, the contract burns user's wstETH\\n * and sends user locked stETH in return.\\n *\\n * The contract provides the staking shortcut: user can send ETH with regular\\n * transfer and get wstETH in return. The contract will send ETH to Lido submit\\n * method, staking it and wrapping the received stETH.\\n *\\n */\\ninterface IwstETH is IERC20 {\\n    function stETH() external returns (IstETH);\\n\\n    /**\\n     * @notice Exchanges stETH to wstETH\\n     * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\\n     * @dev Requirements:\\n     *  - `_stETHAmount` must be non-zero\\n     *  - msg.sender must approve at least `_stETHAmount` stETH to this\\n     *    contract.\\n     *  - msg.sender must have at least `_stETHAmount` of stETH.\\n     * User should first approve _stETHAmount to the WstETH contract\\n     * @return Amount of wstETH user receives after wrap\\n     */\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Exchanges wstETH to stETH\\n     * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\\n     * @dev Requirements:\\n     *  - `_wstETHAmount` must be non-zero\\n     *  - msg.sender must have at least `_wstETHAmount` wstETH.\\n     * @return Amount of stETH user receives after unwrap\\n     */\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for a given amount of stETH\\n     * @param _stETHAmount amount of stETH\\n     * @return Amount of wstETH for a given stETH amount\\n     */\\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a given amount of wstETH\\n     * @param _wstETHAmount amount of wstETH\\n     * @return Amount of stETH for a given wstETH amount\\n     */\\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for a one stETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a one wstETH\\n     * @return Amount of wstETH for a 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IYearnTokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IYearnTokenVault is IERC20 {\\n    /**\\n     * @dev returns the address of the vault's underlying asset (mainToken)\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev returns the price for a single Vault share (ie yvDAI). The pricePerShare is represented\\n     * in the same decimals as the underlying asset (ie: 6 decimals for USDC)\\n     */\\n    function pricePerShare() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits `_amount` `token`, issuing shares to `recipient`.\\n     * If the Vault is in Emergency Shutdown, deposits will not be accepted and this call will fail.\\n     * @param _amount The quantity of tokens to deposit, defaults to all.\\n     * @param recipient The address to issue the shares in this Vault to. Defaults to the caller's address.\\n     * @return The issued Vault shares.\\n     */\\n    function deposit(uint256 _amount, address recipient) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws the calling account's tokens from this Vault,\\n     * redeeming amount `_shares` for an appropriate amount of tokens.\\n     * See note on `setWithdrawalQueue` for further details of withdrawal ordering and behavior.\\n     * @param maxShares How many shares to try and redeem for tokens, defaults to all.\\n     * @param recipient The address to issue the shares in this Vault to. Defaults to the caller's address.\\n     * @return redeemed: The quantity of tokens redeemed for `_shares`.\\n     */\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nlibrary VaultHelpers {\\n    /**\\n     * @dev Returns the address of a Pool's contract.\\n     *\\n     * This is the same code the Vault runs in `PoolRegistry._getPoolAddress`.\\n     */\\n    function toPoolAddress(bytes32 poolId) internal pure returns (address) {\\n        // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\\n        // since the logical shift already sets the upper bits to zero.\\n        return address(uint256(poolId) >> (12 * 8));\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/Version.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IVersion.sol\\\";\\n\\n/**\\n * @notice Retrieves a contract's version set at creation time from storage.\\n */\\ncontract Version is IVersion {\\n    string private _version;\\n\\n    constructor(string memory version) {\\n        _setVersion(version);\\n    }\\n\\n    function version() external view override returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev Internal setter that allows this contract to be used in proxies.\\n     */\\n    function _setVersion(string memory newVersion) internal {\\n        _version = newVersion;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library.\\n */\\nlibrary Math {\\n    // solhint-disable no-inline-assembly\\n\\n    /**\\n     * @dev Returns the absolute value of a signed integer.\\n     */\\n    function abs(int256 a) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = a > 0 ? uint256(a) : uint256(-a)\\n        assembly {\\n            let s := sar(255, a)\\n            result := sub(xor(a, s), s)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (a < b) ? b : a;\\n        assembly {\\n            result := sub(a, mul(sub(a, b), lt(a, b)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to `result = (a < b) ? a : b`\\n        assembly {\\n            result := sub(a, mul(sub(a, b), gt(a, b)))\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : 1 + (a - 1) / b;\\n        assembly {\\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the Address library from OpenZeppelin Contracts, altered by removing the `isContract` checks on\\n// `functionCall` and `functionDelegateCall` in order to save gas, as the recipients are known to be contracts.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    // solhint-disable max-line-length\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        _require(address(this).balance >= amount, Errors.ADDRESS_INSUFFICIENT_BALANCE);\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        _require(success, Errors.ADDRESS_CANNOT_SEND_VALUE);\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    // solhint-enable max-line-length\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but passing some native ETH as msg.value to the call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling up the\\n     * revert reason or using the one provided.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                _revert(Errors.LOW_LEVEL_CALL_FAILED);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // Some contracts need their allowance reduced to 0 before setting it to an arbitrary amount.\\n        if (value != 0 && token.allowance(address(this), address(to)) != 0) {\\n            _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, to, 0));\\n        }\\n\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, to, value));\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-vault/contracts/AssetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\\\";\\n\\nabstract contract AssetHelpers {\\n    // solhint-disable-next-line var-name-mixedcase\\n    IWETH private immutable _weth;\\n\\n    // Sentinel value used to indicate WETH with wrapping/unwrapping semantics. The zero address is a good choice for\\n    // multiple reasons: it is cheap to pass as a calldata argument, it is a known invalid token and non-contract, and\\n    // it is an address Pools cannot register as a token.\\n    address private constant _ETH = address(0);\\n\\n    constructor(IWETH weth) {\\n        _weth = weth;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _WETH() internal view returns (IWETH) {\\n        return _weth;\\n    }\\n\\n    /**\\n     * @dev Returns true if `asset` is the sentinel value that represents ETH.\\n     */\\n    function _isETH(IAsset asset) internal pure returns (bool) {\\n        return address(asset) == _ETH;\\n    }\\n\\n    /**\\n     * @dev Translates `asset` into an equivalent IERC20 token address. If `asset` represents ETH, it will be translated\\n     * to the WETH contract.\\n     */\\n    function _translateToIERC20(IAsset asset) internal view returns (IERC20) {\\n        return _isETH(asset) ? _WETH() : _asIERC20(asset);\\n    }\\n\\n    /**\\n     * @dev Same as `_translateToIERC20(IAsset)`, but for an entire array.\\n     */\\n    function _translateToIERC20(IAsset[] memory assets) internal view returns (IERC20[] memory) {\\n        IERC20[] memory tokens = new IERC20[](assets.length);\\n        for (uint256 i = 0; i < assets.length; ++i) {\\n            tokens[i] = _translateToIERC20(assets[i]);\\n        }\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Interprets `asset` as an IERC20 token. This function should only be called on `asset` if `_isETH` previously\\n     * returned false for it, that is, if `asset` is guaranteed not to be the ETH sentinel value.\\n     */\\n    function _asIERC20(IAsset asset) internal pure returns (IERC20) {\\n        return IERC20(address(asset));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BatchRelayerLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./relayer/BaseRelayerLibrary.sol\\\";\\n\\nimport \\\"./relayer/AaveWrapping.sol\\\";\\nimport \\\"./relayer/ERC4626Wrapping.sol\\\";\\nimport \\\"./relayer/EulerWrapping.sol\\\";\\nimport \\\"./relayer/GaugeActions.sol\\\";\\nimport \\\"./relayer/GearboxWrapping.sol\\\";\\nimport \\\"./relayer/LidoWrapping.sol\\\";\\nimport \\\"./relayer/CompoundV2Wrapping.sol\\\";\\nimport \\\"./relayer/UnbuttonWrapping.sol\\\";\\nimport \\\"./relayer/ReaperWrapping.sol\\\";\\nimport \\\"./relayer/TetuWrapping.sol\\\";\\nimport \\\"./relayer/SiloWrapping.sol\\\";\\nimport \\\"./relayer/VaultActions.sol\\\";\\nimport \\\"./relayer/VaultPermit.sol\\\";\\nimport \\\"./relayer/YearnWrapping.sol\\\";\\n\\n/**\\n * @title Batch Relayer Library\\n * @notice This contract is not a relayer by itself and calls into it directly will fail.\\n * The associated relayer can be found by calling `getEntrypoint` on this contract.\\n */\\ncontract BatchRelayerLibrary is\\n    AaveWrapping,\\n    BaseRelayerLibrary,\\n    ERC4626Wrapping,\\n    EulerWrapping,\\n    GaugeActions,\\n    GearboxWrapping,\\n    LidoWrapping,\\n    UnbuttonWrapping,\\n    CompoundV2Wrapping,\\n    ReaperWrapping,\\n    SiloWrapping,\\n    TetuWrapping,\\n    VaultActions,\\n    VaultPermit,\\n    YearnWrapping\\n{\\n    constructor(\\n        IVault vault,\\n        IERC20 wstETH,\\n        IBalancerMinter minter,\\n        bool canCallUserCheckpoint,\\n        string memory version\\n    ) BaseRelayerLibrary(vault, version) LidoWrapping(wstETH) GaugeActions(minter, canCallUserCheckpoint) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/AaveWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title AaveWrapping\\n * @notice Allows users to wrap and unwrap Aave's aTokens into their StaticAToken wrappers\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract AaveWrapping is IBaseRelayerLibrary {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    function wrapAaveDynamicToken(\\n        IStaticATokenLM staticToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool fromUnderlying,\\n        uint256 outputReference\\n    ) external payable {\\n        if (_isChainedReference(amount)) {\\n            amount = _getChainedReferenceValue(amount);\\n        }\\n\\n        // Aave's StaticATokens allow wrapping either an aToken or the underlying asset.\\n        // We can query which token to pull and approve from the wrapper contract.\\n        IERC20 dynamicToken = fromUnderlying ? staticToken.ASSET() : staticToken.ATOKEN();\\n\\n        // The wrap caller is the implicit sender of tokens, so if the goal is for the tokens\\n        // to be sourced from outside the relayer, we must first pull them here.\\n        if (sender != address(this)) {\\n            require(sender == msg.sender, \\\"Incorrect sender\\\");\\n            _pullToken(sender, dynamicToken, amount);\\n        }\\n\\n        dynamicToken.safeApprove(address(staticToken), amount);\\n        // Use 0 for the referral code\\n        uint256 result = staticToken.deposit(recipient, amount, 0, fromUnderlying);\\n\\n        if (_isChainedReference(outputReference)) {\\n            _setChainedReferenceValue(outputReference, result);\\n        }\\n    }\\n\\n    function unwrapAaveStaticToken(\\n        IStaticATokenLM staticToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool toUnderlying,\\n        uint256 outputReference\\n    ) external payable {\\n        if (_isChainedReference(amount)) {\\n            amount = _getChainedReferenceValue(amount);\\n        }\\n\\n        // The unwrap caller is the implicit sender of tokens, so if the goal is for the tokens\\n        // to be sourced from outside the relayer, we must first pull them here.\\n        if (sender != address(this)) {\\n            require(sender == msg.sender, \\\"Incorrect sender\\\");\\n            _pullToken(sender, staticToken, amount);\\n        }\\n\\n        // No approval is needed here, as the Static Tokens are burned directly from the relayer's account\\n        (, uint256 result) = staticToken.withdraw(recipient, amount, toUnderlying);\\n\\n        if (_isChainedReference(outputReference)) {\\n            _setChainedReferenceValue(outputReference, result);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/BalancerRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/Version.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\\\";\\n\\n/**\\n * @title Balancer Relayer\\n * @notice Allows safe multicall execution of a relayer's functions\\n * @dev\\n * Relayers are composed of two contracts:\\n *  - This contract, which acts as a single point of entry into the system through a multicall function.\\n *  - A library contract, which defines the allowed behaviour of the relayer.\\n *\\n * The relayer entrypoint can then repeatedly delegatecall into the library's code to perform actions.\\n * We can then run combinations of the library contract's functions in the context of the relayer entrypoint,\\n * without having to expose all these functions on the entrypoint contract itself. The multicall function is\\n * then a single point of entry for all actions, so we can easily prevent reentrancy.\\n *\\n * This design gives much stronger reentrancy guarantees, as otherwise a malicious contract could reenter\\n * the relayer through another function (which must allow reentrancy for multicall logic), and that would\\n * potentially allow them to manipulate global state, resulting in loss of funds in some cases:\\n * e.g., sweeping any leftover ETH that should have been refunded to the user.\\n *\\n * NOTE: Only the entrypoint contract should be allowlisted by Balancer governance as a relayer, so that the\\n * Vault will reject calls from outside the context of the entrypoint: e.g., if a user mistakenly called directly\\n * into the library contract.\\n */\\ncontract BalancerRelayer is IBalancerRelayer, Version, ReentrancyGuard {\\n    using Address for address payable;\\n    using Address for address;\\n\\n    IVault private immutable _vault;\\n    address private immutable _library;\\n\\n    /**\\n     * @dev This contract is not meant to be deployed directly by an EOA, but rather during construction of a contract\\n     * derived from `BaseRelayerLibrary`, which will provide its own address as the relayer's library.\\n     */\\n    constructor(\\n        IVault vault,\\n        address libraryAddress,\\n        string memory version\\n    ) Version(version) {\\n        _vault = vault;\\n        _library = libraryAddress;\\n    }\\n\\n    receive() external payable {\\n        // Only accept ETH transfers from the Vault. This is expected to happen due to a swap/exit/withdrawal\\n        // with ETH as an output, should the relayer be listed as the recipient. This may also happen when\\n        // joining a pool, performing a swap, or if managing a user's balance uses less than the full ETH value\\n        // provided. Any excess ETH will be refunded to this contract, and then forwarded to the original sender.\\n        _require(msg.sender == address(_vault), Errors.ETH_TRANSFER);\\n    }\\n\\n    function getVault() external view override returns (IVault) {\\n        return _vault;\\n    }\\n\\n    function getLibrary() external view override returns (address) {\\n        return _library;\\n    }\\n\\n    function multicall(bytes[] calldata data) external payable override nonReentrant returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = _library.functionDelegateCall(data[i]);\\n        }\\n\\n        _refundETH();\\n    }\\n\\n    function _refundETH() private {\\n        uint256 remainingEth = address(this).balance;\\n        if (remainingEth > 0) {\\n            msg.sender.sendValue(remainingEth);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/BaseRelayerLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\nimport \\\"./BalancerRelayer.sol\\\";\\n\\n/**\\n * @title Base Relayer Library\\n * @notice Core functionality of a relayer. Allow users to use a signature to approve this contract\\n * to take further actions on their behalf.\\n * @dev\\n * Relayers are composed of two contracts:\\n *  - A `BalancerRelayer` contract, which acts as a single point of entry into the system through a multicall function\\n *  - A library contract such as this one, which defines the allowed behaviour of the relayer\\n\\n * NOTE: Only the entrypoint contract should be allowlisted by Balancer governance as a relayer, so that the Vault\\n * will reject calls from outside the entrypoint context.\\n *\\n * This contract should neither be allowlisted as a relayer, nor called directly by the user.\\n * No guarantees can be made about fund safety when calling this contract in an improper manner.\\n *\\n * All functions that are meant to be called from the entrypoint via `multicall` must be payable so that they\\n * do not revert in a call involving ETH. This also applies to functions that do not alter the state and would be\\n * usually labeled as `view`.\\n */\\ncontract BaseRelayerLibrary is IBaseRelayerLibrary {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    IVault private immutable _vault;\\n    IBalancerRelayer private immutable _entrypoint;\\n\\n    constructor(IVault vault, string memory version) IBaseRelayerLibrary(vault.WETH()) {\\n        _vault = vault;\\n        _entrypoint = new BalancerRelayer(vault, address(this), version);\\n    }\\n\\n    function getVault() public view override returns (IVault) {\\n        return _vault;\\n    }\\n\\n    function getEntrypoint() external view returns (IBalancerRelayer) {\\n        return _entrypoint;\\n    }\\n\\n    /**\\n     * @notice Sets whether a particular relayer is authorised to act on behalf of the user\\n     */\\n    function setRelayerApproval(\\n        address relayer,\\n        bool approved,\\n        bytes calldata authorisation\\n    ) external payable {\\n        require(relayer == address(this) || !approved, \\\"Relayer can only approve itself\\\");\\n        bytes memory data = abi.encodePacked(\\n            abi.encodeWithSelector(_vault.setRelayerApproval.selector, msg.sender, relayer, approved),\\n            authorisation\\n        );\\n\\n        address(_vault).functionCall(data);\\n    }\\n\\n    /**\\n     * @notice Approves the Vault to use tokens held in the relayer\\n     * @dev This is needed to avoid having to send intermediate tokens back to the user\\n     */\\n    function approveVault(IERC20 token, uint256 amount) external payable override {\\n        if (_isChainedReference(amount)) {\\n            amount = _getChainedReferenceValue(amount);\\n        }\\n        // TODO: gas golf this a bit\\n        token.safeApprove(address(getVault()), amount);\\n    }\\n\\n    /**\\n     * @notice Returns the amount referenced by chained reference `ref`.\\n     * @dev It does not alter the reference (even if it's marked as temporary).\\n     *\\n     * This function does not alter the state in any way. It is not marked as view because it has to be `payable`\\n     * in order to be used in a batch transaction.\\n     *\\n     * Use a static call to read the state off-chain.\\n     */\\n    function peekChainedReferenceValue(uint256 ref) external payable override returns (uint256 value) {\\n        (, value) = _peekChainedReferenceValue(ref);\\n    }\\n\\n    function _pullToken(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount\\n    ) internal override {\\n        if (amount == 0) return;\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = token;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        _pullTokens(sender, tokens, amounts);\\n    }\\n\\n    function _pullTokens(\\n        address sender,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts\\n    ) internal override {\\n        IVault.UserBalanceOp[] memory ops = new IVault.UserBalanceOp[](tokens.length);\\n        for (uint256 i; i < tokens.length; i++) {\\n            ops[i] = IVault.UserBalanceOp({\\n                asset: IAsset(address(tokens[i])),\\n                amount: amounts[i],\\n                sender: sender,\\n                recipient: payable(address(this)),\\n                kind: IVault.UserBalanceOpKind.TRANSFER_EXTERNAL\\n            });\\n        }\\n\\n        getVault().manageUserBalance(ops);\\n    }\\n\\n    /**\\n     * @dev Returns true if `amount` is not actually an amount, but rather a chained reference.\\n     */\\n    function _isChainedReference(uint256 amount) internal pure override returns (bool) {\\n        // First 3 nibbles are enough to determine if it's a chained reference.\\n        return\\n            (amount & 0xfff0000000000000000000000000000000000000000000000000000000000000) ==\\n            0xba10000000000000000000000000000000000000000000000000000000000000;\\n    }\\n\\n    /**\\n     * @dev Returns true if `ref` is temporary reference, i.e. to be deleted after reading it.\\n     */\\n    function _isTemporaryChainedReference(uint256 amount) internal pure returns (bool) {\\n        // First 3 nibbles determine if it's a chained reference.\\n        // If the 4th nibble is 0 it is temporary; otherwise it is considered read-only.\\n        // In practice, we shall use '0xba11' for read-only references.\\n        return\\n            (amount & 0xffff000000000000000000000000000000000000000000000000000000000000) ==\\n            0xba10000000000000000000000000000000000000000000000000000000000000;\\n    }\\n\\n    /**\\n     * @dev Stores `value` as the amount referenced by chained reference `ref`.\\n     */\\n    function _setChainedReferenceValue(uint256 ref, uint256 value) internal override {\\n        bytes32 slot = _getStorageSlot(ref);\\n\\n        // Since we do manual calculation of storage slots, it is easier (and cheaper) to rely on internal assembly to\\n        // access it.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the amount referenced by chained reference `ref`.\\n     * If the reference is temporary, it will be cleared after reading it, so they can each only be read once.\\n     * If the reference is not temporary (i.e. read-only), it will not be cleared after reading it\\n     * (see `_isTemporaryChainedReference` function).\\n     */\\n    function _getChainedReferenceValue(uint256 ref) internal override returns (uint256) {\\n        (bytes32 slot, uint256 value) = _peekChainedReferenceValue(ref);\\n\\n        if (_isTemporaryChainedReference(ref)) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sstore(slot, 0)\\n            }\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot for reference `ref` as well as the amount referenced by it.\\n     * It does not alter the reference (even if it's marked as temporary).\\n     */\\n    function _peekChainedReferenceValue(uint256 ref) private view returns (bytes32 slot, uint256 value) {\\n        slot = _getStorageSlot(ref);\\n\\n        // Since we do manual calculation of storage slots, it is easier (and cheaper) to rely on internal assembly to\\n        // access it.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            value := sload(slot)\\n        }\\n    }\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _TEMP_STORAGE_SUFFIX = keccak256(\\\"balancer.base-relayer-library\\\");\\n\\n    function _getStorageSlot(uint256 ref) private view returns (bytes32) {\\n        // This replicates the mechanism Solidity uses to allocate storage slots for mappings, but using a hash as the\\n        // mapping's storage slot, and subtracting 1 at the end. This should be more than enough to prevent collisions\\n        // with other state variables this or derived contracts might use.\\n        // See https://docs.soliditylang.org/en/v0.8.9/internals/layout_in_storage.html\\n\\n        return bytes32(uint256(keccak256(abi.encodePacked(_removeReferencePrefix(ref), _TEMP_STORAGE_SUFFIX))) - 1);\\n    }\\n\\n    /**\\n     * @dev Returns a reference without its prefix.\\n     * Use this function to calculate the storage slot so that it's the same for temporary and read-only references.\\n     */\\n    function _removeReferencePrefix(uint256 ref) private pure returns (uint256) {\\n        return (ref & 0x0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/CompoundV2Wrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/ICToken.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title CompoundV2Wrapping\\n * @notice Allows users to wrap and unwrap Compound v2 cTokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract CompoundV2Wrapping is IBaseRelayerLibrary {\\n    function wrapCompoundV2(\\n        ICToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 mainToken = IERC20(wrappedToken.underlying());\\n        amount = _resolveAmountPullTokenAndApproveSpender(mainToken, address(wrappedToken), amount, sender);\\n\\n        // The `mint` function deposits `amount` underlying tokens and transfers cTokens to the caller.\\n        // It returns an error code, where zero indicates success. Other error codes can be found here:\\n        // https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/ErrorReporter.sol\\n        // solhint-disable-previous-line max-line-length\\n        require(wrappedToken.mint(amount) == 0, \\\"wrapping failed\\\");\\n\\n        uint256 receivedWrappedAmount = wrappedToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(wrappedToken, recipient, receivedWrappedAmount, outputReference);\\n    }\\n\\n    function unwrapCompoundV2(\\n        ICToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(wrappedToken, amount, sender);\\n\\n        IERC20 mainToken = IERC20(wrappedToken.underlying());\\n\\n        // The `redeem` function burns `amount` cTokens and transfers underlying tokens to the caller.\\n        // It returns an error code, where zero indicates success. Other error codes can be found here:\\n        // https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/ErrorReporter.sol\\n        // solhint-disable-previous-line max-line-length\\n        require(wrappedToken.redeem(amount) == 0, \\\"unwrapping failed\\\");\\n\\n        uint256 withdrawnMainAmount = mainToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(mainToken, recipient, withdrawnMainAmount, outputReference);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/ERC4626Wrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title ERC4626Wrapping\\n * @notice Allows users to wrap and unwrap ERC4626 tokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract ERC4626Wrapping is IBaseRelayerLibrary {\\n    function wrapERC4626(\\n        IERC4626 wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 underlying = IERC20(wrappedToken.asset());\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(underlying, address(wrappedToken), amount, sender);\\n\\n        uint256 result = wrappedToken.deposit(amount, recipient);\\n\\n        _setChainedReference(outputReference, result);\\n    }\\n\\n    function unwrapERC4626(\\n        IERC4626 wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(wrappedToken, amount, sender);\\n\\n        uint256 result = wrappedToken.redeem(amount, recipient, address(this));\\n\\n        _setChainedReference(outputReference, result);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/EulerWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IEulerToken.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title EulerWrapping\\n * @notice Allows users to wrap and unwrap Euler tokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract EulerWrapping is IBaseRelayerLibrary {\\n    //solhint-disable-next-line private-vars-leading-underscore\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\n\\n    function wrapEuler(\\n        IEulerToken wrappedToken,\\n        address eulerProtocol,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 underlying = IERC20(wrappedToken.underlyingAsset());\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(underlying, eulerProtocol, amount, sender);\\n\\n        // Deposit MainToken into EulerToken\\n        // 0 for the Euler primary account\\n        wrappedToken.deposit(0, amount);\\n\\n        uint256 receivedWrappedAmount = wrappedToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(wrappedToken, recipient, receivedWrappedAmount, outputReference);\\n    }\\n\\n    function unwrapEuler(\\n        IEulerToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(wrappedToken, amount, sender);\\n\\n        // Euler offers two ways to withdraw:\\n        //     1. Calculate mainTokenOut via wrappedToken.convertBalanceToUnderlying(wrappedTokenAmount)\\n        //     2. Redeem the account's full balance of wrappedToken for mainToken\\n        // Option 1 may leave wrappedToken dust in the relayer, so we choose option 2\\n        // The 0 argument is for the Euler primary account\\n        wrappedToken.withdraw(0, MAX_UINT256); //MAX_UINT256 forces option 2\\n\\n        IERC20 mainToken = IERC20(wrappedToken.underlyingAsset());\\n        uint256 withdrawnMainAmount = mainToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(mainToken, recipient, withdrawnMainAmount, outputReference);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/GaugeActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title GaugeActions\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract GaugeActions is IBaseRelayerLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    IBalancerMinter private immutable _balancerMinter;\\n    bool private immutable _canCallUserCheckpoint;\\n\\n    /**\\n     * @dev The zero address may be passed as balancerMinter to safely disable features\\n     *      which only exist on mainnet\\n     */\\n    constructor(IBalancerMinter balancerMinter, bool canCallUserCheckpoint) {\\n        _balancerMinter = balancerMinter;\\n        _canCallUserCheckpoint = canCallUserCheckpoint;\\n    }\\n\\n    /**\\n     * @notice Returns true if the relayer is configured to checkpoint gauges directly via `user_checkpoint`.\\n     * @dev This method is not expected to be called inside `multicall` so it is not marked as `payable`.\\n     */\\n    function canCallUserCheckpoint() external view returns (bool) {\\n        return _canCallUserCheckpoint;\\n    }\\n\\n    function gaugeDeposit(\\n        IStakingLiquidityGauge gauge,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external payable {\\n        // We can query which token to pull and approve from the wrapper contract.\\n        IERC20 bptToken = gauge.lp_token();\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(bptToken, address(gauge), amount, sender);\\n\\n        gauge.deposit(amount, recipient);\\n    }\\n\\n    function gaugeWithdraw(\\n        IStakingLiquidityGauge gauge,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(gauge, amount, sender);\\n\\n        // No approval is needed here, as the gauge Tokens are burned directly from the relayer's account.\\n        gauge.withdraw(amount);\\n\\n        // Gauge does not support withdrawing BPT to another address atomically.\\n        // If intended recipient is not the relayer then forward the withdrawn BPT on to the recipient.\\n        if (recipient != address(this)) {\\n            IERC20 bptToken = gauge.lp_token();\\n\\n            bptToken.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    function gaugeMint(address[] calldata gauges, uint256 outputReference) external payable {\\n        uint256 balMinted = _balancerMinter.mintManyFor(gauges, msg.sender);\\n\\n        _setChainedReference(outputReference, balMinted);\\n    }\\n\\n    function gaugeSetMinterApproval(\\n        bool approval,\\n        address user,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable {\\n        _balancerMinter.setMinterApprovalWithSignature(address(this), approval, user, deadline, v, r, s);\\n    }\\n\\n    function gaugeClaimRewards(IStakingLiquidityGauge[] calldata gauges) external payable {\\n        uint256 numGauges = gauges.length;\\n        for (uint256 i; i < numGauges; ++i) {\\n            gauges[i].claim_rewards(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Perform a user checkpoint for the given user on the given set of gauges.\\n     * @dev Both mainnet and child chain gauges are supported.\\n     */\\n    function gaugeCheckpoint(address user, IStakingLiquidityGauge[] calldata gauges) external payable {\\n        if (_canCallUserCheckpoint) {\\n            _checkpointGaugesViaUserCheckpoint(user, gauges);\\n        } else {\\n            _checkpointGaugesViaUserBalance(user, gauges);\\n        }\\n    }\\n\\n    function _checkpointGaugesViaUserCheckpoint(address user, IStakingLiquidityGauge[] calldata gauges) internal {\\n        uint256 numGauges = gauges.length;\\n        // In L2s (child chain gauges), `user_checkpoint` is not permissioned, so we can just call it directly.\\n        for (uint256 i = 0; i < numGauges; ++i) {\\n            gauges[i].user_checkpoint(user);\\n        }\\n    }\\n\\n    function _checkpointGaugesViaUserBalance(address user, IStakingLiquidityGauge[] calldata gauges) internal {\\n        uint256 numGauges = gauges.length;\\n        IVault.UserBalanceOp[] memory ops = new IVault.UserBalanceOp[](numGauges);\\n\\n        // In mainnet, `user_checkpoint` is permissioned for liquidity gauges, so we cannot call it directly.\\n        // However, some non-permissioned actions cause the gauge to checkpoint a user as a side effect,\\n        // even if the operation itself is a no-op. The simplest of these is a gauge token transfer, which we\\n        // perform here. Since the Vault has an unlimited allowance for gauge tokens, and user balance\\n        // operations use the Vault allowance, no approvals are necessary.\\n        // The amount has to be greater than 0 for the checkpoint to take place, so we use 1 wei.\\n        // There is no actual value transfer since the sender and the recipient are the same.\\n        for (uint256 i = 0; i < numGauges; ++i) {\\n            // We first prepare all the transfer operations for each of the gauges.\\n            ops[i] = IVault.UserBalanceOp({\\n                asset: IAsset(address(gauges[i])),\\n                amount: 1,\\n                sender: user,\\n                recipient: payable(address(user)),\\n                kind: IVault.UserBalanceOpKind.TRANSFER_EXTERNAL\\n            });\\n        }\\n        // And we execute all of them at once.\\n        getVault().manageUserBalance(ops);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/GearboxWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IGearboxDieselToken.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title GearboxWrapping\\n * @notice Allows users to wrap and unwrap Gearbox tokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract GearboxWrapping is IBaseRelayerLibrary {\\n    function wrapGearbox(\\n        IGearboxDieselToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 mainAmount,\\n        uint256 outputReference\\n    ) external payable {\\n        IGearboxVault gearboxVault = IGearboxVault(wrappedToken.owner());\\n        IERC20 underlying = IERC20(gearboxVault.underlyingToken());\\n\\n        // Main Tokens are not deposited in the dieselToken address. Instead, they're deposited in a gearbox vault\\n        mainAmount = _resolveAmountPullTokenAndApproveSpender(underlying, address(gearboxVault), mainAmount, sender);\\n\\n        // The third argument of addLiquidity is a referral code, which will be always 0 for the relayer (no referee)\\n        gearboxVault.addLiquidity(mainAmount, recipient, 0);\\n\\n        _setChainedReference(outputReference, gearboxVault.toDiesel(mainAmount));\\n    }\\n\\n    function unwrapGearbox(\\n        IGearboxDieselToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 dieselAmount,\\n        uint256 outputReference\\n    ) external payable {\\n        dieselAmount = _resolveAmountAndPullToken(IERC20(address(wrappedToken)), dieselAmount, sender);\\n\\n        // Main Tokens are not deposited in the dieselToken address. Instead, they're deposited in a gearbox vault.\\n        // Therefore, to remove liquidity, we withdraw tokens from the vault, and not from the wrapped token.\\n        IGearboxVault gearboxVault = IGearboxVault(wrappedToken.owner());\\n        gearboxVault.removeLiquidity(dieselAmount, recipient);\\n\\n        _setChainedReference(outputReference, gearboxVault.fromDiesel(dieselAmount));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/IBaseRelayerLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-vault/contracts/AssetHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\n/**\\n * @title IBaseRelayerLibrary\\n */\\nabstract contract IBaseRelayerLibrary is AssetHelpers {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(IWETH weth) AssetHelpers(weth) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function getVault() public view virtual returns (IVault);\\n\\n    function approveVault(IERC20 token, uint256 amount) external payable virtual;\\n\\n    function peekChainedReferenceValue(uint256 ref) external payable virtual returns (uint256);\\n\\n    function _pullToken(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _pullTokens(\\n        address sender,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts\\n    ) internal virtual;\\n\\n    function _isChainedReference(uint256 amount) internal pure virtual returns (bool);\\n\\n    function _setChainedReferenceValue(uint256 ref, uint256 value) internal virtual;\\n\\n    function _getChainedReferenceValue(uint256 ref) internal virtual returns (uint256);\\n\\n    /**\\n     * @dev This reuses `_resolveAmountAndPullToken` to adjust the `amount` in case it is a chained reference,\\n     * then pull that amount of `token` to the relayer. Additionally, it approves the `spender` to enable\\n     * wrapping operations. The spender is usually a token, but could also be another kind of contract (e.g.,\\n     * a protocol or gauge).\\n     */\\n    function _resolveAmountPullTokenAndApproveSpender(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount,\\n        address sender\\n    ) internal returns (uint256 resolvedAmount) {\\n        resolvedAmount = _resolveAmountAndPullToken(token, amount, sender);\\n\\n        token.safeApprove(spender, resolvedAmount);\\n    }\\n\\n    /**\\n     * @dev Extract the `amount` (if it is a chained reference), and pull that amount of `token` to\\n     * this contract.\\n     */\\n    function _resolveAmountAndPullToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address sender\\n    ) internal returns (uint256 resolvedAmount) {\\n        resolvedAmount = _resolveAmount(amount);\\n\\n        // The wrap caller is the implicit sender of tokens, so if the goal is for the tokens\\n        // to be sourced from outside the relayer, we must first pull them here.\\n        if (sender != address(this)) {\\n            require(sender == msg.sender, \\\"Incorrect sender\\\");\\n            _pullToken(sender, token, resolvedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Resolve an amount from a possible chained reference. This is internal, since some wrappers\\n     * call it independently.\\n     */\\n    function _resolveAmount(uint256 amount) internal returns (uint256) {\\n        return _isChainedReference(amount) ? _getChainedReferenceValue(amount) : amount;\\n    }\\n\\n    /**\\n     * @dev Transfer the given `amount` of `token` to `recipient`, then call `_setChainedReference`\\n     * with that amount, in case it needs to be encoded as an output reference.\\n     */\\n    function _transferAndSetChainedReference(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) internal {\\n        if (recipient != address(this)) {\\n            token.safeTransfer(recipient, amount);\\n        }\\n\\n        _setChainedReference(outputReference, amount);\\n    }\\n\\n    /**\\n     * @dev Check for a chained output reference, and encode the given `amount` if necessary.\\n     * This is internal, since some wrappers call it independently.\\n     */\\n    function _setChainedReference(uint256 outputReference, uint256 amount) internal {\\n        if (_isChainedReference(outputReference)) {\\n            _setChainedReferenceValue(outputReference, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/LidoWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title LidoWrapping\\n * @notice Allows users to wrap and unwrap stETH\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract LidoWrapping is IBaseRelayerLibrary {\\n    using Address for address payable;\\n\\n    IstETH private immutable _stETH;\\n    IwstETH private immutable _wstETH;\\n\\n    /**\\n     * @dev The zero address may be passed as wstETH to safely disable this module\\n     * @param wstETH - the address of Lido's wrapped stETH contract\\n     */\\n    constructor(IERC20 wstETH) {\\n        // Safely disable stETH wrapping if no address has been passed for wstETH\\n        _stETH = wstETH != IERC20(0) ? IwstETH(address(wstETH)).stETH() : IstETH(0);\\n        _wstETH = IwstETH(address(wstETH));\\n    }\\n\\n    function wrapStETH(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountPullTokenAndApproveSpender(_stETH, address(_wstETH), amount, sender);\\n\\n        uint256 result = IwstETH(_wstETH).wrap(amount);\\n\\n        _transferAndSetChainedReference(_wstETH, recipient, result, outputReference);\\n    }\\n\\n    function unwrapWstETH(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(_wstETH, amount, sender);\\n\\n        // No approval is needed here, as wstETH is burned directly from the relayer's account\\n        uint256 result = _wstETH.unwrap(amount);\\n\\n        _transferAndSetChainedReference(_stETH, recipient, result, outputReference);\\n    }\\n\\n    function stakeETH(\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmount(amount);\\n\\n        uint256 result = _stETH.submit{ value: amount }(address(this));\\n\\n        _transferAndSetChainedReference(_stETH, recipient, result, outputReference);\\n    }\\n\\n    function stakeETHAndWrap(\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmount(amount);\\n\\n        // We must query this separately, since the wstETH contract doesn't return how much wstETH is minted.\\n        uint256 result = _wstETH.getWstETHByStETH(amount);\\n\\n        // The fallback function on the wstETH contract automatically stakes and wraps any ETH sent to it.\\n        // We can then send the ETH safely, and only have to ensure that the call doesn't revert.\\n        //\\n        // This would be dangerous if `_wstETH` were set to the zero address. However, in this scenario,\\n        // this function would have already reverted during the call to `getWstETHByStETH`, preventing loss of funds.\\n        payable(address(_wstETH)).sendValue(amount);\\n\\n        _transferAndSetChainedReference(_wstETH, recipient, result, outputReference);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/ReaperWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IReaperTokenVault.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title ReaperWrapping\\n * @notice Allows users to wrap and unwrap Reapers's rfTokens into their underlying main tokens\\n * @dev All functions must be payable so that it can be called as part of a multicall involving ETH\\n */\\nabstract contract ReaperWrapping is IBaseRelayerLibrary {\\n    function unwrapReaperVaultToken(\\n        IReaperTokenVault vaultToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(vaultToken, amount, sender);\\n\\n        // Burn the rf shares and receive the underlying token.\\n        vaultToken.withdraw(amount);\\n\\n        IERC20 underlyingToken = IERC20(vaultToken.token());\\n        // Determine the amount of underlying returned for the shares burned.\\n        uint256 withdrawnAmount = underlyingToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(underlyingToken, recipient, withdrawnAmount, outputReference);\\n    }\\n\\n    function wrapReaperVaultToken(\\n        IReaperTokenVault vaultToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 underlyingToken = IERC20(vaultToken.token());\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(underlyingToken, address(vaultToken), amount, sender);\\n\\n        // Deposit the tokens into the vault\\n        vaultToken.deposit(amount);\\n\\n        // Determine the amount of shares gained from depositing\\n        uint256 sharesGained = vaultToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(vaultToken, recipient, sharesGained, outputReference);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/SiloWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/ISilo.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IShareToken.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title SiloWrapping\\n * @notice Allows users to wrap and unwrap Silo shareTokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract SiloWrapping is IBaseRelayerLibrary {\\n    function wrapShareToken(\\n        IShareToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        // Initialize the token we will be wrapping (underlying asset of shareToken)\\n        IERC20 underlyingToken = IERC20(wrappedToken.asset());\\n        // Initialize the corresponding Silo (Liquidity Pool)\\n        ISilo silo = wrappedToken.silo();\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(underlyingToken, address(silo), amount, sender);\\n\\n        // the collateralOnly param is set to false because we want to receive interest bearing shareTokens\\n        (, uint256 result) = silo.depositFor(address(underlyingToken), recipient, amount, false);\\n\\n        _setChainedReference(outputReference, result);\\n    }\\n\\n    function unwrapShareToken(\\n        IShareToken wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(wrappedToken, amount, sender);\\n\\n        // Initialize the corresponding Silo (Liquidity Pool)\\n        ISilo silo = wrappedToken.silo();\\n        IERC20 underlyingToken = IERC20(wrappedToken.asset());\\n\\n        // No approval is needed here, as the shareTokens are burned directly from the relayer's account.\\n        // Setting the amount to type(uint256).max informs Silo that we'd like to redeem all the relayer's shares.\\n        // Ignore the return value which cannot be trusted. It does not include any fees assessed.\\n        silo.withdraw(address(underlyingToken), type(uint256).max, false);\\n\\n        uint256 result = underlyingToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(underlyingToken, recipient, result, outputReference);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/TetuWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/ITetuSmartVault.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title TetuWrapping\\n * @notice Allows users to wrap and unwrap Tetu tokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract TetuWrapping is IBaseRelayerLibrary {\\n    function wrapTetu(\\n        ITetuSmartVault wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 underlying = IERC20(wrappedToken.underlying());\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(underlying, address(wrappedToken), amount, sender);\\n\\n        wrappedToken.deposit(amount);\\n        uint256 receivedWrappedAmount = wrappedToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(wrappedToken, recipient, receivedWrappedAmount, outputReference);\\n    }\\n\\n    function unwrapTetu(\\n        ITetuSmartVault wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(wrappedToken, amount, sender);\\n\\n        IERC20 mainToken = IERC20(wrappedToken.underlying());\\n        wrappedToken.withdraw(amount);\\n        uint256 withdrawnMainAmount = mainToken.balanceOf(address(this));\\n\\n        _transferAndSetChainedReference(mainToken, recipient, withdrawnMainAmount, outputReference);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/UnbuttonWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IUnbuttonToken.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title UnbuttonWrapping\\n * @author @aalavandhan1984 (eng@fragments.org)\\n * @notice Allows users to wrap and unwrap any rebasing elastic balance token into a\\n *         a non-rebasing static balance version using the Unbutton wrapper.\\n * @dev All functions must be payable so that it can be called as part of a multicall involving ETH.\\n *      The rebasing token to be wrapped is called the \\\"underlying\\\" token.\\n *      The wrapped non-rebasing token is called the \\\"wrapped\\\" token.\\n *      Learn more: https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/UnbuttonToken.sol\\n */\\nabstract contract UnbuttonWrapping is IBaseRelayerLibrary {\\n    /// @param wrapperToken The address of the wrapper.\\n    /// @param sender The address of sender.\\n    /// @param sender The address of recepient.\\n    /// @param uAmount The underling token amount to be deposited into the wrapper.\\n    /// @param outputReference Chained output reference.\\n    function wrapUnbuttonToken(\\n        IUnbuttonToken wrapperToken,\\n        address sender,\\n        address recipient,\\n        uint256 uAmount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 underlyingToken = IERC20(wrapperToken.underlying());\\n\\n        uAmount = _resolveAmountPullTokenAndApproveSpender(underlyingToken, address(wrapperToken), uAmount, sender);\\n\\n        uint256 mintAmount = wrapperToken.depositFor(recipient, uAmount);\\n\\n        _setChainedReference(outputReference, mintAmount);\\n    }\\n\\n    /// @param wrapperToken The address of the wrapper.\\n    /// @param sender The address of sender.\\n    /// @param sender The address of recepient.\\n    /// @param amount The amount of wrapped tokens to be burnt for underlying tokens.\\n    /// @param outputReference Chained output reference.\\n    function unwrapUnbuttonToken(\\n        IUnbuttonToken wrapperToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(wrapperToken, amount, sender);\\n\\n        uint256 withdrawnUAmount = wrapperToken.burnTo(recipient, amount);\\n\\n        _setChainedReference(outputReference, withdrawnUAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/VaultActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title VaultActions\\n * @notice Allows users to call the core functions on the Balancer Vault (swaps/joins/exits/user balance management)\\n * @dev Since the relayer is not expected to hold user funds, we expect the user to be the recipient of any token\\n * transfers from the Vault.\\n *\\n * All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract VaultActions is IBaseRelayerLibrary {\\n    using Math for uint256;\\n\\n    /**\\n     * @dev In a relayer, \\\"chaining\\\" - passing values between otherwise independent operations in a multicall - is\\n     * achieved by passing reference structures between operations. Each reference has an index, corresponding to\\n     * an offset into the input or output array (e.g., 0 means the first element of the inputs or results), and\\n     * a key (computed from a hash of the index and some text), which is interpreted as a storage slot. Note that\\n     * the actual data of the reference is NOT stored in the reference structure, but rather at the storage slot\\n     * given by the key.\\n     *\\n     * The relayer uses masking on the unused MSB bits of all incoming and outgoing values to identify which are\\n     * references, and which are simply values that can be used directly. Incoming references are replaced with\\n     * their values before being forwarded to the underlying function. Likewise, outputs of underlying functions\\n     * that need to be chained are converted to references before being passed as inputs to the next function.\\n     * See `BaseRelayerLibrary`.\\n     */\\n    struct OutputReference {\\n        uint256 index;\\n        uint256 key;\\n    }\\n\\n    function swap(\\n        IVault.SingleSwap memory singleSwap,\\n        IVault.FundManagement calldata funds,\\n        uint256 limit,\\n        uint256 deadline,\\n        uint256 value,\\n        uint256 outputReference\\n    ) external payable {\\n        require(funds.sender == msg.sender || funds.sender == address(this), \\\"Incorrect sender\\\");\\n\\n        if (_isChainedReference(singleSwap.amount)) {\\n            singleSwap.amount = _getChainedReferenceValue(singleSwap.amount);\\n        }\\n\\n        uint256 result = getVault().swap{ value: value }(singleSwap, funds, limit, deadline);\\n\\n        if (_isChainedReference(outputReference)) {\\n            _setChainedReferenceValue(outputReference, result);\\n        }\\n    }\\n\\n    function batchSwap(\\n        IVault.SwapKind kind,\\n        IVault.BatchSwapStep[] memory swaps,\\n        IAsset[] calldata assets,\\n        IVault.FundManagement calldata funds,\\n        int256[] calldata limits,\\n        uint256 deadline,\\n        uint256 value,\\n        OutputReference[] calldata outputReferences\\n    ) external payable {\\n        require(funds.sender == msg.sender || funds.sender == address(this), \\\"Incorrect sender\\\");\\n\\n        for (uint256 i = 0; i < swaps.length; ++i) {\\n            uint256 amount = swaps[i].amount;\\n            if (_isChainedReference(amount)) {\\n                swaps[i].amount = _getChainedReferenceValue(amount);\\n            }\\n        }\\n\\n        int256[] memory results = getVault().batchSwap{ value: value }(kind, swaps, assets, funds, limits, deadline);\\n\\n        for (uint256 i = 0; i < outputReferences.length; ++i) {\\n            require(_isChainedReference(outputReferences[i].key), \\\"invalid chained reference\\\");\\n\\n            // Batch swap return values are signed, as they are Vault deltas (positive values correspond to assets sent\\n            // to the Vault, and negative values are assets received from the Vault). To simplify the chained reference\\n            // value model, we simply store the absolute value.\\n            // This should be fine for most use cases, as the caller can reason about swap results via the `limits`\\n            // parameter.\\n            _setChainedReferenceValue(outputReferences[i].key, Math.abs(results[outputReferences[i].index]));\\n        }\\n    }\\n\\n    function manageUserBalance(\\n        IVault.UserBalanceOp[] memory ops,\\n        uint256 value,\\n        OutputReference[] calldata outputReferences\\n    ) external payable {\\n        for (uint256 i = 0; i < ops.length; i++) {\\n            require(ops[i].sender == msg.sender || ops[i].sender == address(this), \\\"Incorrect sender\\\");\\n\\n            uint256 amount = ops[i].amount;\\n            if (_isChainedReference(amount)) {\\n                ops[i].amount = _getChainedReferenceValue(amount);\\n            }\\n        }\\n\\n        getVault().manageUserBalance{ value: value }(ops);\\n\\n        // `manageUserBalance` does not return results, but there is no calculation of amounts as with swaps.\\n        // We can just use the original amounts.\\n        for (uint256 i = 0; i < outputReferences.length; ++i) {\\n            require(_isChainedReference(outputReferences[i].key), \\\"invalid chained reference\\\");\\n\\n            _setChainedReferenceValue(outputReferences[i].key, ops[outputReferences[i].index].amount);\\n        }\\n    }\\n\\n    enum PoolKind { WEIGHTED, LEGACY_STABLE, COMPOSABLE_STABLE, COMPOSABLE_STABLE_V2 }\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        PoolKind kind,\\n        address sender,\\n        address recipient,\\n        IVault.JoinPoolRequest memory request,\\n        uint256 value,\\n        uint256 outputReference\\n    ) external payable {\\n        require(sender == msg.sender || sender == address(this), \\\"Incorrect sender\\\");\\n\\n        // The output of a join will be the Pool's token contract, typically known as BPT (Balancer Pool Tokens).\\n        // Since the Vault is unaware of this (BPT tokens are minted directly to the recipient), we manually\\n        // measure this balance increase: but only if an output reference is provided.\\n        IERC20 bpt = IERC20(VaultHelpers.toPoolAddress(poolId));\\n        uint256 maybeInitialRecipientBPT = _isChainedReference(outputReference) ? bpt.balanceOf(recipient) : 0;\\n\\n        request.userData = _doJoinPoolChainedReferenceReplacements(kind, request.userData);\\n\\n        getVault().joinPool{ value: value }(poolId, sender, recipient, request);\\n\\n        if (_isChainedReference(outputReference)) {\\n            // In this context, `maybeInitialRecipientBPT` is guaranteed to have been initialized, so we can safely read\\n            // from it. Note that we assume the recipient balance change has a positive sign (i.e. the recipient\\n            // received BPT).\\n            uint256 finalRecipientBPT = bpt.balanceOf(recipient);\\n            _setChainedReferenceValue(outputReference, finalRecipientBPT.sub(maybeInitialRecipientBPT));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the final userData for a join, depending on the PoolKind, performing replacements for chained\\n     * references as necessary.\\n     */\\n    function _doJoinPoolChainedReferenceReplacements(PoolKind kind, bytes memory userData)\\n        private\\n        returns (bytes memory)\\n    {\\n        if (kind == PoolKind.WEIGHTED) {\\n            return _doWeightedJoinChainedReferenceReplacements(userData);\\n        } else if (\\n            kind == PoolKind.LEGACY_STABLE ||\\n            kind == PoolKind.COMPOSABLE_STABLE ||\\n            kind == PoolKind.COMPOSABLE_STABLE_V2\\n        ) {\\n            return _doStableJoinChainedReferenceReplacements(userData);\\n        } else {\\n            revert(\\\"UNHANDLED_POOL_KIND\\\");\\n        }\\n    }\\n\\n    function _doWeightedJoinChainedReferenceReplacements(bytes memory userData) private returns (bytes memory) {\\n        WeightedPoolUserData.JoinKind kind = WeightedPoolUserData.joinKind(userData);\\n\\n        if (kind == WeightedPoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return _doWeightedExactTokensInForBPTOutReplacements(userData);\\n        } else {\\n            // All other join kinds are 'given out' (i.e the parameter is a BPT amount),\\n            // so we don't do replacements for those.\\n            return userData;\\n        }\\n    }\\n\\n    function _doWeightedExactTokensInForBPTOutReplacements(bytes memory userData) private returns (bytes memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = WeightedPoolUserData.exactTokensInForBptOut(userData);\\n\\n        // Save gas by only re-encoding the data if we actually performed a replacement\\n        return\\n            _replacedAmounts(amountsIn)\\n                ? abi.encode(WeightedPoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minBPTAmountOut)\\n                : userData;\\n    }\\n\\n    function _doStableJoinChainedReferenceReplacements(bytes memory userData) private returns (bytes memory) {\\n        // The only 'given in' join (in which the parameters are the amounts in) is EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        // so that is the only one where we do replacements. Luckily all versions of Stable Pool share the same\\n        // enum value for it, so we can treat them all the same, and just use the latest version.\\n\\n        // Note that ComposableStablePool versions V2 and up support a proportional join kind, which some previous\\n        // versions did not. While it is not rejected here, if passed to the Pool it will revert.\\n\\n        StablePoolUserData.JoinKind kind = StablePoolUserData.joinKind(userData);\\n\\n        if (kind == StablePoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return _doStableExactTokensInForBPTOutReplacements(userData);\\n        } else {\\n            // All other join kinds are 'given out' (i.e the parameter is a BPT amount),\\n            // so we don't do replacements for those.\\n            return userData;\\n        }\\n    }\\n\\n    function _doStableExactTokensInForBPTOutReplacements(bytes memory userData) private returns (bytes memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = StablePoolUserData.exactTokensInForBptOut(userData);\\n\\n        // Save gas by only re-encoding the data if we actually performed a replacement\\n        return\\n            _replacedAmounts(amountsIn)\\n                ? abi.encode(StablePoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minBPTAmountOut)\\n                : userData;\\n    }\\n\\n    // Mutates amountsIn, and returns true if any replacements were made\\n    function _replacedAmounts(uint256[] memory amountsIn) private returns (bool) {\\n        bool madeReplacements = false;\\n\\n        for (uint256 i = 0; i < amountsIn.length; ++i) {\\n            uint256 amount = amountsIn[i];\\n            if (_isChainedReference(amount)) {\\n                amountsIn[i] = _getChainedReferenceValue(amount);\\n                madeReplacements = true;\\n            }\\n        }\\n\\n        return madeReplacements;\\n    }\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        PoolKind kind,\\n        address sender,\\n        address payable recipient,\\n        IVault.ExitPoolRequest memory request,\\n        OutputReference[] calldata outputReferences\\n    ) external payable {\\n        require(sender == msg.sender || sender == address(this), \\\"Incorrect sender\\\");\\n\\n        // To track the changes of internal balances, we need an array of token addresses.\\n        // We save this here to avoid having to recalculate after the exit.\\n        IERC20[] memory trackedTokens = new IERC20[](outputReferences.length);\\n\\n        // Query initial balances for all tokens, and record them as chained references\\n        uint256[] memory initialRecipientBalances = new uint256[](outputReferences.length);\\n        for (uint256 i = 0; i < outputReferences.length; i++) {\\n            require(_isChainedReference(outputReferences[i].key), \\\"invalid chained reference\\\");\\n\\n            IAsset asset = request.assets[outputReferences[i].index];\\n            if (request.toInternalBalance) {\\n                trackedTokens[i] = _asIERC20(asset);\\n            } else {\\n                initialRecipientBalances[i] = _isETH(asset) ? recipient.balance : _asIERC20(asset).balanceOf(recipient);\\n            }\\n        }\\n        if (request.toInternalBalance) {\\n            initialRecipientBalances = getVault().getInternalBalance(recipient, trackedTokens);\\n        }\\n\\n        // Exit the Pool\\n        request.userData = _doExitPoolChainedReferenceReplacements(kind, request.userData);\\n        getVault().exitPool(poolId, sender, recipient, request);\\n\\n        // Query final balances for all tokens of interest\\n        uint256[] memory finalRecipientTokenBalances = new uint256[](outputReferences.length);\\n        if (request.toInternalBalance) {\\n            finalRecipientTokenBalances = getVault().getInternalBalance(recipient, trackedTokens);\\n        } else {\\n            for (uint256 i = 0; i < outputReferences.length; i++) {\\n                IAsset asset = request.assets[outputReferences[i].index];\\n                finalRecipientTokenBalances[i] = _isETH(asset)\\n                    ? recipient.balance\\n                    : _asIERC20(asset).balanceOf(recipient);\\n            }\\n        }\\n\\n        // Calculate deltas and save as chained references\\n        for (uint256 i = 0; i < outputReferences.length; i++) {\\n            _setChainedReferenceValue(\\n                outputReferences[i].key,\\n                finalRecipientTokenBalances[i].sub(initialRecipientBalances[i])\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the final userData for an exit, depending on the PoolKind, performing replacements for chained\\n     * references as necessary.\\n     */\\n    function _doExitPoolChainedReferenceReplacements(PoolKind kind, bytes memory userData)\\n        private\\n        returns (bytes memory)\\n    {\\n        if (kind == PoolKind.WEIGHTED) {\\n            return _doWeightedExitChainedReferenceReplacements(userData);\\n        } else {\\n            if (kind == PoolKind.LEGACY_STABLE) {\\n                return _doLegacyStableExitChainedReferenceReplacements(userData);\\n            } else if (kind == PoolKind.COMPOSABLE_STABLE) {\\n                return _doComposableStableExitChainedReferenceReplacements(userData);\\n            } else if (kind == PoolKind.COMPOSABLE_STABLE_V2) {\\n                return _doComposableStableV2ExitChainedReferenceReplacements(userData);\\n            } else {\\n                revert(\\\"UNHANDLED_POOL_KIND\\\");\\n            }\\n        }\\n    }\\n\\n    function _doWeightedExitChainedReferenceReplacements(bytes memory userData) private returns (bytes memory) {\\n        WeightedPoolUserData.ExitKind kind = WeightedPoolUserData.exitKind(userData);\\n\\n        if (kind == WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\n            return _doWeightedExactBptInForOneTokenOutReplacements(userData);\\n        } else if (kind == WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\n            return _doWeightedExactBptInForTokensOutReplacements(userData);\\n        } else {\\n            // All other exit kinds are 'given out' (i.e the parameter is a token amount),\\n            // so we don't do replacements for those.\\n            return userData;\\n        }\\n    }\\n\\n    function _doWeightedExactBptInForOneTokenOutReplacements(bytes memory userData) private returns (bytes memory) {\\n        (uint256 bptAmountIn, uint256 tokenIndex) = WeightedPoolUserData.exactBptInForTokenOut(userData);\\n\\n        if (_isChainedReference(bptAmountIn)) {\\n            bptAmountIn = _getChainedReferenceValue(bptAmountIn);\\n            return abi.encode(WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, tokenIndex);\\n        } else {\\n            // Save gas by only re-encoding the data if we actually performed a replacement\\n            return userData;\\n        }\\n    }\\n\\n    function _doWeightedExactBptInForTokensOutReplacements(bytes memory userData) private returns (bytes memory) {\\n        uint256 bptAmountIn = WeightedPoolUserData.exactBptInForTokensOut(userData);\\n\\n        if (_isChainedReference(bptAmountIn)) {\\n            bptAmountIn = _getChainedReferenceValue(bptAmountIn);\\n            return abi.encode(WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn);\\n        } else {\\n            // Save gas by only re-encoding the data if we actually performed a replacement\\n            return userData;\\n        }\\n    }\\n\\n    // Stable Pool version-dependent recoding dispatch functions\\n\\n    /*\\n     * While all Stable Pool versions fortuitously support the same join kinds (V2 and higher support one extra),\\n     * they do NOT all support the same exit kinds. Also, though the encoding of the data associated with the exit\\n     * is uniform across pool kinds for the same exit method, the ExitKind ID itself may have a different value.\\n     *\\n     * For instance, BPT_IN_FOR_EXACT_TOKENS_OUT is 2 in legacy Stable Pools, but 1 in Composable Stable Pools.\\n     * (See the reference comment and libraries below.)\\n     *\\n     * Accordingly, the three do[PoolKind]ExitChainedReferenceReplacements functions below (for LegacyStable,\\n     * ComposableStable, and CopmosableStableV2) extract the exitKind and pass it through to the shared\\n     * recoding functions.\\n     */\\n\\n    function _doLegacyStableExitChainedReferenceReplacements(bytes memory userData) private returns (bytes memory) {\\n        uint8 exitKind = uint8(StablePoolUserData.exitKind(userData));\\n\\n        if (exitKind == uint8(LegacyStablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT)) {\\n            return _doStableExactBptInForOneTokenOutReplacements(userData, exitKind);\\n        } else if (exitKind == uint8(LegacyStablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT)) {\\n            return _doStableExactBptInForTokensOutReplacements(userData, exitKind);\\n        } else {\\n            // All other exit kinds are 'given out' (i.e the parameter is a token amount),\\n            // so we don't do replacements for those.\\n            return userData;\\n        }\\n    }\\n\\n    // For the first deployment of ComposableStablePool\\n    function _doComposableStableExitChainedReferenceReplacements(bytes memory userData) private returns (bytes memory) {\\n        uint8 exitKind = uint8(StablePoolUserData.exitKind(userData));\\n\\n        if (exitKind == uint8(ComposableStablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT)) {\\n            return _doStableExactBptInForOneTokenOutReplacements(userData, exitKind);\\n        } else {\\n            // All other exit kinds are 'given out' (i.e the parameter is a token amount),\\n            // so we don't do replacements for those.\\n            return userData;\\n        }\\n    }\\n\\n    // For ComposableStablePool V2 and V3\\n    function _doComposableStableV2ExitChainedReferenceReplacements(bytes memory userData)\\n        private\\n        returns (bytes memory)\\n    {\\n        uint8 exitKind = uint8(StablePoolUserData.exitKind(userData));\\n\\n        if (exitKind == uint8(StablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT)) {\\n            return _doStableExactBptInForOneTokenOutReplacements(userData, exitKind);\\n        } else if (exitKind == uint8(StablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT)) {\\n            return _doStableExactBptInForTokensOutReplacements(userData, exitKind);\\n        } else {\\n            // All other exit kinds are 'given out' (i.e the parameter is a token amount),\\n            // so we don't do replacements for those.\\n            return userData;\\n        }\\n    }\\n\\n    // Shared Stable Exit recoding functions\\n\\n    // The following two functions perform the actual recoding, which involves parsing and re-encoding the userData.\\n    // The encoding of the actual arguments is uniform across pool kinds, which allows these recoding functions to be\\n    // shared. However, the ExitKind ID itself can vary, so it must be passed in from each specific pool kind handler.\\n\\n    function _doStableExactBptInForOneTokenOutReplacements(bytes memory userData, uint8 exitKind)\\n        private\\n        returns (bytes memory)\\n    {\\n        (uint256 bptAmountIn, uint256 tokenIndex) = StablePoolUserData.exactBptInForTokenOut(userData);\\n\\n        if (_isChainedReference(bptAmountIn)) {\\n            bptAmountIn = _getChainedReferenceValue(bptAmountIn);\\n            return abi.encode(exitKind, bptAmountIn, tokenIndex);\\n        } else {\\n            // Save gas by only re-encoding the data if we actually performed a replacement\\n            return userData;\\n        }\\n    }\\n\\n    function _doStableExactBptInForTokensOutReplacements(bytes memory userData, uint8 exitKind)\\n        private\\n        returns (bytes memory)\\n    {\\n        uint256 bptAmountIn = StablePoolUserData.exactBptInForTokensOut(userData);\\n\\n        if (_isChainedReference(bptAmountIn)) {\\n            bptAmountIn = _getChainedReferenceValue(bptAmountIn);\\n            return abi.encode(exitKind, bptAmountIn);\\n        } else {\\n            // Save gas by only re-encoding the data if we actually performed a replacement\\n            return userData;\\n        }\\n    }\\n}\\n\\n/*\\n    For reference:\\n\\n    StablePoolUserData (applies to ComposableStablePool V2+):\\n\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT, EXACT_BPT_IN_FOR_ALL_TOKENS_OUT }\\n\\n    WeightedPoolUserData:\\n\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n    StablePhantomPools can only be exited proportionally when the pool is paused: and the pause window has expired.\\n    They have their own enum:\\n\\n    enum ExitKindPhantom { EXACT_BPT_IN_FOR_TOKENS_OUT }\\n*/\\n\\n// Applies to StablePool, MetaStablePool, StablePool V2\\nlibrary LegacyStablePoolUserData {\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n}\\n\\n// Applies to the first deployment of ComposableStablePool (pre-Versioning)\\nlibrary ComposableStablePoolUserData {\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/VaultPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title VaultPermit\\n * @notice Allows users to use permit (where supported) to approve the Balancer Vault to use their tokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract VaultPermit is IBaseRelayerLibrary {\\n    function vaultPermit(\\n        IERC20Permit token,\\n        address owner,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable {\\n        token.permit(owner, address(getVault()), value, deadline, v, r, s);\\n    }\\n\\n    function vaultPermitDAI(\\n        IERC20PermitDAI token,\\n        address holder,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable {\\n        token.permit(holder, address(getVault()), nonce, expiry, allowed, v, r, s);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/YearnWrapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IYearnTokenVault.sol\\\";\\n\\nimport \\\"./IBaseRelayerLibrary.sol\\\";\\n\\n/**\\n * @title YearnWrapping\\n * @notice Allows users to wrap and unwrap Yearn tokens\\n * @dev All functions must be payable so they can be called from a multicall involving ETH\\n */\\nabstract contract YearnWrapping is IBaseRelayerLibrary {\\n    function wrapYearn(\\n        IYearnTokenVault wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        IERC20 underlying = IERC20(wrappedToken.token());\\n\\n        amount = _resolveAmountPullTokenAndApproveSpender(underlying, address(wrappedToken), amount, sender);\\n\\n        uint256 receivedWrappedAmount = wrappedToken.deposit(amount, recipient);\\n\\n        _setChainedReference(outputReference, receivedWrappedAmount);\\n    }\\n\\n    function unwrapYearn(\\n        IYearnTokenVault wrappedToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 outputReference\\n    ) external payable {\\n        amount = _resolveAmountAndPullToken(IERC20(address(wrappedToken)), amount, sender);\\n\\n        uint256 mainAmount = wrappedToken.withdraw(amount, recipient);\\n\\n        _setChainedReference(outputReference, mainAmount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"wstETH\",\"type\":\"address\"},{\"internalType\":\"contract IBalancerMinter\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canCallUserCheckpoint\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultActions.OutputReference[]\",\"name\":\"outputReferences\",\"type\":\"tuple[]\"}],\"name\":\"batchSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCallUserCheckpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum VaultActions.PoolKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultActions.OutputReference[]\",\"name\":\"outputReferences\",\"type\":\"tuple[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IStakingLiquidityGauge[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"gaugeCheckpoint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingLiquidityGauge[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"gaugeClaimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingLiquidityGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gaugeDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"gaugeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"gaugeSetMinterApproval\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingLiquidityGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gaugeWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntrypoint\",\"outputs\":[{\"internalType\":\"contract IBalancerRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum VaultActions.PoolKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultActions.OutputReference[]\",\"name\":\"outputReferences\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ref\",\"type\":\"uint256\"}],\"name\":\"peekChainedReferenceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"authorisation\",\"type\":\"bytes\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"stakeETHAndWrap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStaticATokenLM\",\"name\":\"staticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toUnderlying\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapAaveStaticToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapCompoundV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapERC4626\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEulerToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapEuler\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGearboxDieselToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dieselAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapGearbox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReaperTokenVault\",\"name\":\"vaultToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapReaperVaultToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShareToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapShareToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITetuSmartVault\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapTetu\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUnbuttonToken\",\"name\":\"wrapperToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapUnbuttonToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapWstETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYearnTokenVault\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"unwrapYearn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"vaultPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20PermitDAI\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"vaultPermitDAI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStaticATokenLM\",\"name\":\"staticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromUnderlying\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapAaveDynamicToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapCompoundV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapERC4626\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEulerToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eulerProtocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapEuler\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGearboxDieselToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapGearbox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReaperTokenVault\",\"name\":\"vaultToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapReaperVaultToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShareToken\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapShareToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapStETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITetuSmartVault\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapTetu\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUnbuttonToken\",\"name\":\"wrapperToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapUnbuttonToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYearnTokenVault\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReference\",\"type\":\"uint256\"}],\"name\":\"wrapYearn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BatchRelayerLibrary", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000007e7b226e616d65223a224368696c64436861696e476175676520636865636b706f696e746572202842616c616e63657252656c6179657229222c2276657273696f6e223a352e312c226465706c6f796d656e74223a2232303233303731322d6368696c642d636861696e2d67617567652d636865636b706f696e746572227d0000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}