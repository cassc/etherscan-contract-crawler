{"SourceCode": "// File: contracts\\interfaces\\UniswapRouterInterfaceV5.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface UniswapRouterInterfaceV5{\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\interfaces\\TokenInterfaceV5.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface TokenInterfaceV5{\r\n    function burn(address, uint256) external;\r\n    function mint(address, uint256) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function hasRole(bytes32, address) external view returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\interfaces\\NftInterfaceV5.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface NftInterfaceV5{\r\n    function balanceOf(address) external view returns (uint);\r\n    function ownerOf(uint) external view returns (address);\r\n    function transferFrom(address, address, uint) external;\r\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\VaultInterfaceV5.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface VaultInterfaceV5{\r\n\tfunction sendDaiToTrader(address, uint) external;\r\n\tfunction receiveDaiFromTrader(address, uint, uint) external;\r\n\tfunction currentBalanceDai() external view returns(uint);\r\n\tfunction distributeRewardDai(uint) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\PairsStorageInterfaceV6.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface PairsStorageInterfaceV6{\r\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\r\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\r\n    function incrementCurrentOrderId() external returns(uint);\r\n    function updateGroupCollateral(uint, uint, bool, bool) external;\r\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\r\n    function pairFeed(uint) external view returns(Feed memory);\r\n    function pairSpreadP(uint) external view returns(uint);\r\n    function pairMinLeverage(uint) external view returns(uint);\r\n    function pairMaxLeverage(uint) external view returns(uint);\r\n    function groupMaxCollateral(uint) external view returns(uint);\r\n    function groupCollateral(uint, bool) external view returns(uint);\r\n    function guaranteedSlEnabled(uint) external view returns(bool);\r\n    function pairOpenFeeP(uint) external view returns(uint);\r\n    function pairCloseFeeP(uint) external view returns(uint);\r\n    function pairOracleFeeP(uint) external view returns(uint);\r\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\r\n    function pairReferralFeeP(uint) external view returns(uint);\r\n    function pairMinLevPosDai(uint) external view returns(uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\StorageInterfaceV5.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface StorageInterfaceV5{\r\n    enum LimitOrder { TP, SL, LIQ, OPEN }\r\n    struct Trader{\r\n        uint leverageUnlocked;\r\n        address referral;\r\n        uint referralRewardsTotal;  // 1e18\r\n    }\r\n    struct Trade{\r\n        address trader;\r\n        uint pairIndex;\r\n        uint index;\r\n        uint initialPosToken;       // 1e18\r\n        uint positionSizeDai;       // 1e18\r\n        uint openPrice;             // PRECISION\r\n        bool buy;\r\n        uint leverage;\r\n        uint tp;                    // PRECISION\r\n        uint sl;                    // PRECISION\r\n    }\r\n    struct TradeInfo{\r\n        uint tokenId;\r\n        uint tokenPriceDai;         // PRECISION\r\n        uint openInterestDai;       // 1e18\r\n        uint tpLastUpdated;\r\n        uint slLastUpdated;\r\n        bool beingMarketClosed;\r\n    }\r\n    struct OpenLimitOrder{\r\n        address trader;\r\n        uint pairIndex;\r\n        uint index;\r\n        uint positionSize;          // 1e18 (DAI or GFARM2)\r\n        uint spreadReductionP;\r\n        bool buy;\r\n        uint leverage;\r\n        uint tp;                    // PRECISION (%)\r\n        uint sl;                    // PRECISION (%)\r\n        uint minPrice;              // PRECISION\r\n        uint maxPrice;              // PRECISION\r\n        uint block;\r\n        uint tokenId;               // index in supportedTokens\r\n    }\r\n    struct PendingMarketOrder{\r\n        Trade trade;\r\n        uint block;\r\n        uint wantedPrice;           // PRECISION\r\n        uint slippageP;             // PRECISION (%)\r\n        uint spreadReductionP;\r\n        uint tokenId;               // index in supportedTokens\r\n    }\r\n    struct PendingNftOrder{\r\n        address nftHolder;\r\n        uint nftId;\r\n        address trader;\r\n        uint pairIndex;\r\n        uint index;\r\n        LimitOrder orderType;\r\n    }\r\n    function PRECISION() external pure returns(uint);\r\n    function gov() external view returns(address);\r\n    function dev() external view returns(address);\r\n    function dai() external view returns(TokenInterfaceV5);\r\n    function token() external view returns(TokenInterfaceV5);\r\n    function linkErc677() external view returns(TokenInterfaceV5);\r\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\r\n    function priceAggregator() external view returns(AggregatorInterfaceV6);\r\n    function vault() external view returns(VaultInterfaceV5);\r\n    function trading() external view returns(address);\r\n    function callbacks() external view returns(address);\r\n    function handleTokens(address,uint,bool) external;\r\n    function transferDai(address, address, uint) external;\r\n    function transferLinkToAggregator(address, uint, uint) external;\r\n    function unregisterTrade(address, uint, uint) external;\r\n    function unregisterPendingMarketOrder(uint, bool) external;\r\n    function unregisterOpenLimitOrder(address, uint, uint) external;\r\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\r\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\r\n    function storeReferral(address, address) external;\r\n    function openTrades(address, uint, uint) external view returns(Trade memory);\r\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\r\n    function updateSl(address, uint, uint, uint) external;\r\n    function updateTp(address, uint, uint, uint) external;\r\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\r\n    function spreadReductionsP(uint) external view returns(uint);\r\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\r\n    function maxSlP() external view returns(uint);\r\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\r\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\r\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\r\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\r\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\r\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\r\n    function increaseNftRewards(uint, uint) external;\r\n    function nftSuccessTimelock() external view returns(uint);\r\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\r\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\r\n    function setNftLastSuccess(uint) external;\r\n    function updateTrade(Trade memory) external;\r\n    function nftLastSuccess(uint) external view returns(uint);\r\n    function unregisterPendingNftOrder(uint) external;\r\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\r\n    function distributeLpRewards(uint) external;\r\n    function getReferral(address) external view returns(address);\r\n    function increaseReferralRewards(address, uint) external;\r\n    function storeTrade(Trade memory, TradeInfo memory) external;\r\n    function setLeverageUnlocked(address, uint) external;\r\n    function getLeverageUnlocked(address) external view returns(uint);\r\n    function openLimitOrdersCount(address, uint) external view returns(uint);\r\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\r\n    function openTradesCount(address, uint) external view returns(uint);\r\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\r\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\r\n    function maxTradesPerPair() external view returns(uint);\r\n    function maxTradesPerBlock() external view returns(uint);\r\n    function tradesPerBlock(uint) external view returns(uint);\r\n    function pendingOrderIdsCount(address) external view returns(uint);\r\n    function maxPendingMarketOrders() external view returns(uint);\r\n    function maxGainP() external view returns(uint);\r\n    function defaultLeverageUnlocked() external view returns(uint);\r\n    function openInterestDai(uint, uint) external view returns(uint);\r\n    function getPendingOrderIds(address) external view returns(uint[] memory);\r\n    function traders(address) external view returns(Trader memory);\r\n    function nfts(uint) external view returns(NftInterfaceV5);\r\n}\r\n\r\ninterface AggregatorInterfaceV6{\r\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\r\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\r\n    function nftRewards() external view returns(NftRewardsInterfaceV6);\r\n    function getPrice(uint,OrderType,uint) external returns(uint);\r\n    function tokenPriceDai() external view returns(uint);\r\n    function linkFee(uint,uint) external view returns(uint);\r\n    function tokenDaiReservesLp() external view returns(uint, uint);\r\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\r\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\r\n    function unregisterPendingSlOrder(uint orderId) external;\r\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\r\n}\r\n\r\ninterface NftRewardsInterfaceV6{\r\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\r\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\r\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\r\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\r\n    function unregisterTrigger(TriggeredLimitId calldata) external;\r\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\r\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\r\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\r\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\r\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\r\n}\r\n\r\n// File: contracts\\GNSPairInfosV6_1.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\ncontract GNSPairInfosV6_1 {\r\n\r\n    // Addresses\r\n    StorageInterfaceV5 immutable storageT;\r\n    address public manager;\r\n\r\n    // Constant parameters\r\n    uint constant PRECISION = 1e10;     // 10 decimals\r\n    uint constant LIQ_THRESHOLD_P = 90; // -90% (of collateral)\r\n\r\n    // Adjustable parameters\r\n    uint public maxNegativePnlOnOpenP = 40 * PRECISION; // PRECISION (%)\r\n\r\n    // Pair parameters\r\n    struct PairParams{\r\n        uint onePercentDepthAbove; // DAI\r\n        uint onePercentDepthBelow; // DAI\r\n        uint rolloverFeePerBlockP; // PRECISION (%)\r\n        uint fundingFeePerBlockP;  // PRECISION (%)\r\n    }\r\n\r\n    mapping(uint => PairParams) public pairParams;\r\n\r\n    // Pair acc funding fees\r\n    struct PairFundingFees{\r\n        int accPerOiLong;  // 1e18 (DAI)\r\n        int accPerOiShort; // 1e18 (DAI)\r\n        uint lastUpdateBlock;\r\n    }\r\n\r\n    mapping(uint => PairFundingFees) public pairFundingFees;\r\n\r\n    // Pair acc rollover fees\r\n    struct PairRolloverFees{\r\n        uint accPerCollateral; // 1e18 (DAI)\r\n        uint lastUpdateBlock;\r\n    }\r\n\r\n    mapping(uint => PairRolloverFees) public pairRolloverFees;\r\n\r\n    // Trade initial acc fees\r\n    struct TradeInitialAccFees{\r\n        uint rollover; // 1e18 (DAI)\r\n        int funding;   // 1e18 (DAI)\r\n        bool openedAfterUpdate;\r\n    }\r\n\r\n    mapping(\r\n        address => mapping(\r\n            uint => mapping(\r\n                uint => TradeInitialAccFees\r\n            )\r\n        )\r\n    ) public tradeInitialAccFees;\r\n\r\n    // Events\r\n    event ManagerUpdated(address value);\r\n    event MaxNegativePnlOnOpenPUpdated(uint value);\r\n    \r\n    event PairParamsUpdated(uint pairIndex, PairParams value);\r\n    event OnePercentDepthUpdated(uint pairIndex, uint valueAbove, uint valueBelow);\r\n    event RolloverFeePerBlockPUpdated(uint pairIndex, uint value);\r\n    event FundingFeePerBlockPUpdated(uint pairIndex, uint value);\r\n\r\n    event TradeInitialAccFeesStored(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index,\r\n        uint rollover,\r\n        int funding\r\n    );\r\n\r\n    event AccFundingFeesStored(uint pairIndex, int valueLong, int valueShort);\r\n    event AccRolloverFeesStored(uint pairIndex, uint value);\r\n\r\n    event FeesCharged(\r\n        uint pairIndex,\r\n        bool long,\r\n        uint collateral,   // 1e18 (DAI)\r\n        uint leverage,\r\n        int percentProfit, // PRECISION (%)\r\n        uint rolloverFees, // 1e18 (DAI)\r\n        int fundingFees    // 1e18 (DAI)\r\n    );\r\n\r\n    constructor(StorageInterfaceV5 _storageT){\r\n        storageT = _storageT;\r\n    }\r\n\r\n    // Modifiers\r\n    modifier onlyGov(){\r\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\r\n        _;\r\n    }\r\n    modifier onlyManager(){\r\n        require(msg.sender == manager, \"MANAGER_ONLY\");\r\n        _;\r\n    }\r\n    modifier onlyCallbacks(){\r\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\r\n        _;\r\n    }\r\n\r\n    // Set manager address\r\n    function setManager(address _manager) external onlyGov{\r\n        manager = _manager;\r\n\r\n        emit ManagerUpdated(_manager);\r\n    }\r\n\r\n    // Set max negative PnL % on trade opening\r\n    function setMaxNegativePnlOnOpenP(uint value) external onlyManager{\r\n        maxNegativePnlOnOpenP = value;\r\n\r\n        emit MaxNegativePnlOnOpenPUpdated(value);\r\n    }\r\n\r\n    // Set parameters for pair\r\n    function setPairParams(uint pairIndex, PairParams memory value) public onlyManager{\r\n        storeAccRolloverFees(pairIndex);\r\n        storeAccFundingFees(pairIndex);\r\n\r\n        pairParams[pairIndex] = value;\r\n\r\n        emit PairParamsUpdated(pairIndex, value);\r\n    }\r\n    function setPairParamsArray(\r\n        uint[] memory indices,\r\n        PairParams[] memory values\r\n    ) external onlyManager{\r\n        require(indices.length == values.length, \"WRONG_LENGTH\");\r\n\r\n        for(uint i = 0; i < indices.length; i++){\r\n            setPairParams(indices[i], values[i]);\r\n        }\r\n    }\r\n\r\n    // Set one percent depth for pair\r\n    function setOnePercentDepth(\r\n        uint pairIndex,\r\n        uint valueAbove,\r\n        uint valueBelow\r\n    ) public onlyManager{\r\n        PairParams storage p = pairParams[pairIndex];\r\n\r\n        p.onePercentDepthAbove = valueAbove;\r\n        p.onePercentDepthBelow = valueBelow;\r\n        \r\n        emit OnePercentDepthUpdated(pairIndex, valueAbove, valueBelow);\r\n    }\r\n    function setOnePercentDepthArray(\r\n        uint[] memory indices,\r\n        uint[] memory valuesAbove,\r\n        uint[] memory valuesBelow\r\n    ) external onlyManager{\r\n        require(indices.length == valuesAbove.length\r\n            && indices.length == valuesBelow.length, \"WRONG_LENGTH\");\r\n\r\n        for(uint i = 0; i < indices.length; i++){\r\n            setOnePercentDepth(indices[i], valuesAbove[i], valuesBelow[i]);\r\n        }\r\n    }\r\n\r\n    // Set rollover fee for pair\r\n    function setRolloverFeePerBlockP(uint pairIndex, uint value) public onlyManager{\r\n        require(value <= 25000000, \"TOO_HIGH\"); // \u2248 100% per day\r\n\r\n        storeAccRolloverFees(pairIndex);\r\n\r\n        pairParams[pairIndex].rolloverFeePerBlockP = value;\r\n        \r\n        emit RolloverFeePerBlockPUpdated(pairIndex, value);\r\n    }\r\n    function setRolloverFeePerBlockPArray(\r\n        uint[] memory indices,\r\n        uint[] memory values\r\n    ) external onlyManager{\r\n        require(indices.length == values.length, \"WRONG_LENGTH\");\r\n\r\n        for(uint i = 0; i < indices.length; i++){\r\n            setRolloverFeePerBlockP(indices[i], values[i]);\r\n        }\r\n    }\r\n\r\n    // Set funding fee for pair\r\n    function setFundingFeePerBlockP(uint pairIndex, uint value) public onlyManager{\r\n        require(value <= 10000000, \"TOO_HIGH\"); // \u2248 40% per day\r\n\r\n        storeAccFundingFees(pairIndex);\r\n\r\n        pairParams[pairIndex].fundingFeePerBlockP = value;\r\n        \r\n        emit FundingFeePerBlockPUpdated(pairIndex, value);\r\n    }\r\n    function setFundingFeePerBlockPArray(\r\n        uint[] memory indices,\r\n        uint[] memory values\r\n    ) external onlyManager{\r\n        require(indices.length == values.length, \"WRONG_LENGTH\");\r\n\r\n        for(uint i = 0; i < indices.length; i++){\r\n            setFundingFeePerBlockP(indices[i], values[i]);\r\n        }\r\n    }\r\n\r\n    // Store trade details when opened (acc fee values)\r\n    function storeTradeInitialAccFees(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index,\r\n        bool long\r\n    ) external onlyCallbacks{\r\n        storeAccFundingFees(pairIndex);\r\n\r\n        TradeInitialAccFees storage t = tradeInitialAccFees[trader][pairIndex][index];\r\n\r\n        t.rollover = getPendingAccRolloverFees(pairIndex);\r\n\r\n        t.funding = long ? \r\n            pairFundingFees[pairIndex].accPerOiLong :\r\n            pairFundingFees[pairIndex].accPerOiShort;\r\n\r\n        t.openedAfterUpdate = true;\r\n\r\n        emit TradeInitialAccFeesStored(trader, pairIndex, index, t.rollover, t.funding);\r\n    }\r\n\r\n    // Acc rollover fees (store right before fee % update)\r\n    function storeAccRolloverFees(uint pairIndex) private{\r\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\r\n\r\n        r.accPerCollateral = getPendingAccRolloverFees(pairIndex);\r\n        r.lastUpdateBlock = block.number;\r\n\r\n        emit AccRolloverFeesStored(pairIndex, r.accPerCollateral);\r\n    }\r\n    function getPendingAccRolloverFees(\r\n        uint pairIndex\r\n    ) public view returns(uint){ // 1e18 (DAI)\r\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\r\n        \r\n        return r.accPerCollateral +\r\n            (block.number - r.lastUpdateBlock)\r\n            * pairParams[pairIndex].rolloverFeePerBlockP\r\n            * 1e18 / PRECISION / 100;\r\n    }\r\n\r\n    // Acc funding fees (store right before trades opened / closed and fee % update)\r\n    function storeAccFundingFees(uint pairIndex) private{\r\n        PairFundingFees storage f = pairFundingFees[pairIndex];\r\n\r\n        (f.accPerOiLong, f.accPerOiShort) = getPendingAccFundingFees(pairIndex);\r\n        f.lastUpdateBlock = block.number;\r\n\r\n        emit AccFundingFeesStored(pairIndex, f.accPerOiLong, f.accPerOiShort);\r\n    }\r\n    function getPendingAccFundingFees(uint pairIndex) public view returns(\r\n        int valueLong,\r\n        int valueShort\r\n    ){\r\n        PairFundingFees storage f = pairFundingFees[pairIndex];\r\n\r\n        valueLong = f.accPerOiLong;\r\n        valueShort = f.accPerOiShort;\r\n\r\n        int openInterestDaiLong = int(storageT.openInterestDai(pairIndex, 0));\r\n        int openInterestDaiShort = int(storageT.openInterestDai(pairIndex, 1));\r\n\r\n        int fundingFeesPaidByLongs = (openInterestDaiLong - openInterestDaiShort)\r\n            * int(block.number - f.lastUpdateBlock)\r\n            * int(pairParams[pairIndex].fundingFeePerBlockP)\r\n            / int(PRECISION) / 100;\r\n\r\n        if(openInterestDaiLong > 0){\r\n            valueLong += fundingFeesPaidByLongs * 1e18\r\n                / openInterestDaiLong;\r\n        }\r\n\r\n        if(openInterestDaiShort > 0){\r\n            valueShort += fundingFeesPaidByLongs * 1e18 * (-1)\r\n                / openInterestDaiShort;\r\n        }\r\n    }\r\n\r\n    // Dynamic price impact value on trade opening\r\n    function getTradePriceImpact(\r\n        uint openPrice,        // PRECISION\r\n        uint pairIndex,\r\n        bool long,\r\n        uint tradeOpenInterest // 1e18 (DAI)\r\n    ) external view returns(\r\n        uint priceImpactP,     // PRECISION (%)\r\n        uint priceAfterImpact  // PRECISION\r\n    ){\r\n        (priceImpactP, priceAfterImpact) = getTradePriceImpactPure(\r\n            openPrice,\r\n            long,\r\n            storageT.openInterestDai(pairIndex, long ? 0 : 1),\r\n            tradeOpenInterest,\r\n            long ?\r\n                pairParams[pairIndex].onePercentDepthAbove :\r\n                pairParams[pairIndex].onePercentDepthBelow\r\n        );\r\n    }\r\n    function getTradePriceImpactPure(\r\n        uint openPrice,         // PRECISION\r\n        bool long,\r\n        uint startOpenInterest, // 1e18 (DAI)\r\n        uint tradeOpenInterest, // 1e18 (DAI)\r\n        uint onePercentDepth\r\n    ) public pure returns(\r\n        uint priceImpactP,      // PRECISION (%)\r\n        uint priceAfterImpact   // PRECISION\r\n    ){\r\n        if(onePercentDepth == 0){\r\n            return (0, openPrice);\r\n        }\r\n\r\n        priceImpactP = (startOpenInterest + tradeOpenInterest / 2)\r\n            * PRECISION / 1e18 / onePercentDepth;\r\n        \r\n        uint priceImpact = priceImpactP * openPrice / PRECISION / 100;\r\n\r\n        priceAfterImpact = long ? openPrice + priceImpact : openPrice - priceImpact;\r\n    }\r\n\r\n    // Rollover fee value\r\n    function getTradeRolloverFee(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index,\r\n        uint collateral // 1e18 (DAI)\r\n    ) public view returns(uint){ // 1e18 (DAI)\r\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][index];\r\n\r\n        if(!t.openedAfterUpdate){\r\n            return 0;\r\n        }\r\n\r\n        return getTradeRolloverFeePure(\r\n            t.rollover,\r\n            getPendingAccRolloverFees(pairIndex),\r\n            collateral\r\n        );\r\n    }\r\n    function getTradeRolloverFeePure(\r\n        uint accRolloverFeesPerCollateral,\r\n        uint endAccRolloverFeesPerCollateral,\r\n        uint collateral // 1e18 (DAI)\r\n    ) public pure returns(uint){ // 1e18 (DAI)\r\n        return (endAccRolloverFeesPerCollateral - accRolloverFeesPerCollateral)\r\n            * collateral / 1e18;\r\n    }\r\n\r\n    // Funding fee value\r\n    function getTradeFundingFee(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index,\r\n        bool long,\r\n        uint collateral, // 1e18 (DAI)\r\n        uint leverage\r\n    ) public view returns(\r\n        int // 1e18 (DAI) | Positive => Fee, Negative => Reward\r\n    ){\r\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][index];\r\n\r\n        if(!t.openedAfterUpdate){\r\n            return 0;\r\n        }\r\n\r\n        (int pendingLong, int pendingShort) = getPendingAccFundingFees(pairIndex);\r\n\r\n        return getTradeFundingFeePure(\r\n            t.funding,\r\n            long ? pendingLong : pendingShort,\r\n            collateral,\r\n            leverage\r\n        );\r\n    }\r\n    function getTradeFundingFeePure(\r\n        int accFundingFeesPerOi,\r\n        int endAccFundingFeesPerOi,\r\n        uint collateral, // 1e18 (DAI)\r\n        uint leverage\r\n    ) public pure returns(\r\n        int // 1e18 (DAI) | Positive => Fee, Negative => Reward\r\n    ){\r\n        return (endAccFundingFeesPerOi - accFundingFeesPerOi)\r\n            * int(collateral) * int(leverage) / 1e18;\r\n    }\r\n\r\n    // Liquidation price value after rollover and funding fees\r\n    function getTradeLiquidationPrice(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index,\r\n        uint openPrice,  // PRECISION\r\n        bool long,\r\n        uint collateral, // 1e18 (DAI)\r\n        uint leverage\r\n    ) external view returns(uint){ // PRECISION\r\n        return getTradeLiquidationPricePure(\r\n            openPrice,\r\n            long,\r\n            collateral,\r\n            leverage,\r\n            getTradeRolloverFee(trader, pairIndex, index, collateral),\r\n            getTradeFundingFee(trader, pairIndex, index, long, collateral, leverage)\r\n        );\r\n    }\r\n    function getTradeLiquidationPricePure(\r\n        uint openPrice,   // PRECISION\r\n        bool long,\r\n        uint collateral,  // 1e18 (DAI)\r\n        uint leverage,\r\n        uint rolloverFee, // 1e18 (DAI)\r\n        int fundingFee    // 1e18 (DAI)\r\n    ) public pure returns(uint){ // PRECISION\r\n        int liqPriceDistance = int(openPrice) * (\r\n                int(collateral * LIQ_THRESHOLD_P / 100)\r\n                - int(rolloverFee) - fundingFee\r\n            ) / int(collateral) / int(leverage);\r\n\r\n        int liqPrice = long ?\r\n            int(openPrice) - liqPriceDistance :\r\n            int(openPrice) + liqPriceDistance;\r\n\r\n        return liqPrice > 0 ? uint(liqPrice) : 0;\r\n    }\r\n\r\n    // Dai sent to trader after PnL and fees\r\n    function getTradeValue(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index,\r\n        bool long,\r\n        uint collateral,   // 1e18 (DAI)\r\n        uint leverage,\r\n        int percentProfit, // PRECISION (%)\r\n        uint closingFee    // 1e18 (DAI)\r\n    ) external onlyCallbacks returns(uint amount){ // 1e18 (DAI)\r\n        storeAccFundingFees(pairIndex);\r\n\r\n        uint r = getTradeRolloverFee(trader, pairIndex, index, collateral);\r\n        int f = getTradeFundingFee(trader, pairIndex, index, long, collateral, leverage);\r\n\r\n        amount = getTradeValuePure(collateral, percentProfit, r, f, closingFee);\r\n\r\n        emit FeesCharged(pairIndex, long, collateral, leverage, percentProfit, r, f);\r\n    }\r\n    function getTradeValuePure(\r\n        uint collateral,   // 1e18 (DAI)\r\n        int percentProfit, // PRECISION (%)\r\n        uint rolloverFee,  // 1e18 (DAI)\r\n        int fundingFee,    // 1e18 (DAI)\r\n        uint closingFee    // 1e18 (DAI)\r\n    ) public pure returns(uint){ // 1e18 (DAI)\r\n        int value = int(collateral)\r\n            + int(collateral) * percentProfit / int(PRECISION) / 100\r\n            - int(rolloverFee) - fundingFee;\r\n\r\n        if(value <= int(collateral) * int(100 - LIQ_THRESHOLD_P) / 100){\r\n            return 0;\r\n        }\r\n\r\n        value -= int(closingFee);\r\n\r\n        return value > 0 ? uint(value) : 0;\r\n    }\r\n\r\n    // Useful getters\r\n    function getPairInfos(uint[] memory indices) external view returns(\r\n        PairParams[] memory,\r\n        PairRolloverFees[] memory,\r\n        PairFundingFees[] memory\r\n    ){\r\n        PairParams[] memory params = new PairParams[](indices.length);\r\n        PairRolloverFees[] memory rolloverFees = new PairRolloverFees[](indices.length);\r\n        PairFundingFees[] memory fundingFees = new PairFundingFees[](indices.length);\r\n\r\n        for(uint i = 0; i < indices.length; i++){\r\n            uint index = indices[i];\r\n\r\n            params[i] = pairParams[index];\r\n            rolloverFees[i] = pairRolloverFees[index];\r\n            fundingFees[i] = pairFundingFees[index];\r\n        }\r\n\r\n        return (params, rolloverFees, fundingFees);\r\n    }\r\n    function getOnePercentDepthAbove(uint pairIndex) external view returns(uint){\r\n        return pairParams[pairIndex].onePercentDepthAbove;\r\n    }\r\n    function getOnePercentDepthBelow(uint pairIndex) external view returns(uint){\r\n        return pairParams[pairIndex].onePercentDepthBelow;\r\n    }\r\n    function getRolloverFeePerBlockP(uint pairIndex) external view returns(uint){\r\n        return pairParams[pairIndex].rolloverFeePerBlockP;\r\n    }\r\n    function getFundingFeePerBlockP(uint pairIndex) external view returns(uint){\r\n        return pairParams[pairIndex].fundingFeePerBlockP;\r\n    }\r\n    function getAccRolloverFees(uint pairIndex) external view returns(uint){\r\n        return pairRolloverFees[pairIndex].accPerCollateral;\r\n    }\r\n    function getAccRolloverFeesUpdateBlock(uint pairIndex) external view returns(uint){\r\n        return pairRolloverFees[pairIndex].lastUpdateBlock;\r\n    }\r\n    function getAccFundingFeesLong(uint pairIndex) external view returns(int){\r\n        return pairFundingFees[pairIndex].accPerOiLong;\r\n    }\r\n    function getAccFundingFeesShort(uint pairIndex) external view returns(int){\r\n        return pairFundingFees[pairIndex].accPerOiShort;\r\n    }\r\n    function getAccFundingFeesUpdateBlock(uint pairIndex) external view returns(uint){\r\n        return pairFundingFees[pairIndex].lastUpdateBlock;\r\n    }\r\n    function getTradeInitialAccRolloverFeesPerCollateral(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index\r\n    ) external view returns(uint){\r\n        return tradeInitialAccFees[trader][pairIndex][index].rollover;\r\n    }\r\n    function getTradeInitialAccFundingFeesPerOi(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index\r\n    ) external view returns(int){\r\n        return tradeInitialAccFees[trader][pairIndex][index].funding;\r\n    }\r\n    function getTradeOpenedAfterUpdate(\r\n        address trader,\r\n        uint pairIndex,\r\n        uint index\r\n    ) external view returns(bool){\r\n        return tradeInitialAccFees[trader][pairIndex][index].openedAfterUpdate;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"valueLong\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"valueShort\",\"type\":\"int256\"}],\"name\":\"AccFundingFeesStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccRolloverFeesStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rolloverFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFees\",\"type\":\"int256\"}],\"name\":\"FeesCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundingFeePerBlockPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxNegativePnlOnOpenPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAbove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBelow\",\"type\":\"uint256\"}],\"name\":\"OnePercentDepthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GNSPairInfosV6_1.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RolloverFeePerBlockPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesLong\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesShort\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccRolloverFeesUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getFundingFeePerBlockP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getOnePercentDepthAbove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getOnePercentDepthBelow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getPairInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairParams[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairRolloverFees[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"accPerOiLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accPerOiShort\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairFundingFees[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAccFundingFees\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"valueLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"valueShort\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAccRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getRolloverFeePerBlockP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeFundingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"accFundingFeesPerOi\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"endAccFundingFeesPerOi\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeFundingFeePure\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFundingFeesPerOi\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccRolloverFeesPerCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"getTradeLiquidationPricePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeOpenedAfterUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tradeOpenInterest\",\"type\":\"uint256\"}],\"name\":\"getTradePriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAfterImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepth\",\"type\":\"uint256\"}],\"name\":\"getTradePriceImpactPure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAfterImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getTradeRolloverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accRolloverFeesPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAccRolloverFeesPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getTradeRolloverFeePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"getTradeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"getTradeValuePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNegativePnlOnOpenP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairFundingFees\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"accPerOiLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accPerOiShort\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFundingFeePerBlockP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setFundingFeePerBlockPArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxNegativePnlOnOpenP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueBelow\",\"type\":\"uint256\"}],\"name\":\"setOnePercentDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesAbove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesBelow\",\"type\":\"uint256[]\"}],\"name\":\"setOnePercentDepthArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRolloverFeePerBlockP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setRolloverFeePerBlockPArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"storeTradeInitialAccFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradeInitialAccFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GNSPairInfosV6_1", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000aee4d11a16b2bc65edd6416fb626eb404a6d65bd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ed5d1c739cf7c1d0542b9fc9e7fb2e3d86f316ee71b16b998226e465d2509fd7"}