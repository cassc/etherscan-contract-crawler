{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/0xerc1155/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n  // Default hash for EOA accounts returned by extcodehash\\n  bytes32 internal constant ACCOUNT_HASH =\\n    0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract.\\n   * @param _address address of the account to check\\n   * @return Whether the target address is a contract\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    bytes32 codehash;\\n\\n    // Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(_address)\\n    }\\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internall call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internall call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overriden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/src/proxy/UpgradeProxy.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../0xerc1155/utils/Context.sol';\\n\\nimport '../utils/AddressBook.sol';\\nimport '../utils/interfaces/IAddressRegistry.sol';\\n\\nimport './UpgradeableProxy.sol';\\n\\ncontract UpgradeProxy is Context, UpgradeableProxy {\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 private constant _ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n   */\\n  modifier ifAdmin() {\\n    if (_msgSender() == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  constructor(\\n    IAddressRegistry addressRegistry_,\\n    address _logic,\\n    bytes memory _data\\n  ) UpgradeableProxy(_logic, _data) {\\n    assert(\\n      _ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)\\n    );\\n    // Initialize {AccessControl}\\n    _setAdmin(addressRegistry_.getRegistryEntry(AddressBook.ADMIN_ACCOUNT));\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy.\\n   *\\n   * NOTE: Only the admin can call this function.\\n   */\\n  function upgradeTo(address newImplementation) external virtual ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n   * proxied contract.\\n   *\\n   * NOTE: Only the admin can call this function.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\\n    external\\n    virtual\\n    ifAdmin\\n  {\\n    _upgradeTo(newImplementation);\\n    Address.functionDelegateCall(newImplementation, data, 'Proxy: Call failed');\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns the current admin.\\n   */\\n  function _admin() internal view virtual returns (address adm) {\\n    bytes32 slot = _ADMIN_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setAdmin(address adm) private {\\n    bytes32 slot = _ADMIN_SLOT;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, adm)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport './Proxy.sol';\\nimport '../../0xerc1155/utils/Address.sol';\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n  constructor(address _logic, bytes memory _data) payable {\\n    assert(\\n      _IMPLEMENTATION_SLOT ==\\n        bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\n    );\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      Address.functionDelegateCall(_logic, _data, 'UpgradeableProxy: Failed');\\n    }\\n  }\\n\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 private constant _IMPLEMENTATION_SLOT =\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address impl)\\n  {\\n    bytes32 slot = _IMPLEMENTATION_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal virtual {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(\\n      Address.isContract(newImplementation),\\n      'UpgradeableProxy: Not a contract'\\n    );\\n\\n    bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/AddressBook.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary AddressBook {\\n  bytes32 public constant DEPLOYER = 'DEPLOYER';\\n  bytes32 public constant TEAM_WALLET = 'TEAM_WALLET';\\n  bytes32 public constant MARKETING_WALLET = 'MARKETING_WALLET';\\n  bytes32 public constant ADMIN_ACCOUNT = 'ADMIN_ACCOUNT';\\n  bytes32 public constant UNISWAP_V2_ROUTER02 = 'UNISWAP_V2_ROUTER02';\\n  bytes32 public constant WETH_WOWS_STAKE_FARM = 'WETH_WOWS_STAKE_FARM';\\n  bytes32 public constant WOWS_TOKEN = 'WOWS_TOKEN';\\n  bytes32 public constant UNISWAP_V2_PAIR = 'UNISWAP_V2_PAIR';\\n  bytes32 public constant WOWS_BOOSTER_PROXY = 'WOWS_BOOSTER_PROXY';\\n  bytes32 public constant REWARD_HANDLER = 'REWARD_HANDLER';\\n  bytes32 public constant SFT_MINTER_PROXY = 'SFT_MINTER_PROXY';\\n  bytes32 public constant SFT_HOLDER_PROXY = 'SFT_HOLDER_PROXY';\\n  bytes32 public constant SFT_EVALUATOR_PROXY = 'SFT_EVALUATOR_PROXY';\\n  bytes32 public constant TRADE_FLOOR_PROXY = 'TRADE_FLOOR_PROXY';\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IAddressRegistry {\\n  /**\\n   * @dev Set an abitrary key / address pair into the registry\\n   */\\n  function setRegistryEntry(bytes32 _key, address _location) external;\\n\\n  /**\\n   * @dev Get a registry enty with by key, returns 0 address if not existing\\n   */\\n  function getRegistryEntry(bytes32 _key) external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"addressRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UpgradeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000fef1f573121b4418012d144534506ad35ef4b81a000000000000000000000000b4f334b98b871a7cc141185b45c9ca3c518031f200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024c4d66de800000000000000000000000073812b9df8da3271789a4ae27f74f1c79a5bfe5900000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x978f10f20475b5e71cc03809a1d096d8510019b8", "SwarmSource": "ipfs://841b216931083752bd81d1d087b3d8ee930441517fc9db708bc18180f0ef578a"}