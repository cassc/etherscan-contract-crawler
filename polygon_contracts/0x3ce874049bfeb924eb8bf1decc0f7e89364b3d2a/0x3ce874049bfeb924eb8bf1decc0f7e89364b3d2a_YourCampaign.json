{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FinalContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: YourCampaign.io\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ncontract YourCampaign {\\r\\n    struct Campaign {\\r\\n        string name;\\r\\n        address owner;\\r\\n        string title;\\r\\n        string description;\\r\\n        uint256 target;\\r\\n        uint256 deadline;\\r\\n        uint256 amountCollected;\\r\\n        string image;\\r\\n        string typeOfCampaign;\\r\\n        address[] donators;\\r\\n        uint256[] donations;\\r\\n        string[] comments;\\r\\n        bool cashedOut;\\r\\n        bool isCheckedByWebsite;\\r\\n        string bitWallet;\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n    event CampaignCreated(uint256 campaignId, address owner, string title);\\r\\n    event DonationReceived(uint256 campaignId, address donor, uint256 amount);\\r\\n    event CampaignWithdrawn(uint256 campaignId, address owner, uint256 amount);\\r\\n    event ContractWithdrawn(address owner, uint256 amount);\\r\\n    event CampaignClosed(uint256 campaignId, address exterminator);\\r\\n    event CommentLiked(uint256 campaignId, uint256 commentIndex, address liker);\\r\\n    event ModeratorAdded(address moderator);\\r\\n    event ModeratorRemoved(address moderator);\\r\\n    event CampaignReported(uint256 campaignId, address reporter);\\r\\n    event CampaignFlagged(uint256 campaignId);\\r\\n\\r\\n    mapping (uint256 => Campaign) public campaigns;\\r\\n    uint256[] public activeCampaignIDs;\\r\\n    uint256 public numberOfCampaigns = 0;\\r\\n    \\r\\n    address public contractOwner;\\r\\n    uint256 public contractBalance = 0;\\r\\n    \\r\\n    // New data structures for \\\"like comment\\\" feature\\r\\n    uint256 constant LIKE_COST = 0.0000001 ether;\\r\\n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public hasLiked;\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) public commentLikes;\\r\\n     \\r\\n    mapping(uint256 => mapping(address => uint256)) public individualReportAmounts; // Mapping to store individual report amounts for campaigns\\r\\n    mapping(uint256 => address[]) public campaignReporters; // Mapping to store addresses of all reporters for a campaign\\r\\n    mapping(uint256 => mapping(address => bool)) public hasReported;\\r\\n    \\r\\n    mapping(uint256 => mapping(address => string)) public reportReasons;\\r\\n\\r\\n    bool internal locked = false;\\r\\n    modifier reentrancyGuard() {\\r\\n        require(!locked, \\\"Reentrant call\\\");\\r\\n        locked = true;\\r\\n        _;\\r\\n        locked = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    constructor(address _ownerofYourCampaign) {\\r\\n        contractOwner = _ownerofYourCampaign;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == contractOwner, \\\"Only the contract owner can execute this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyModerator() {\\r\\n        require(moderators[msg.sender], \\\"Only a moderator can execute this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function createCampaign(string memory _name , string memory _title, string memory _description, uint256 _target, uint256 _deadline, string memory _image, string memory _type) public returns (uint256) {\\r\\n        require(_deadline > block.timestamp, \\\"The deadline should be a date in the future\\\");\\r\\n        Campaign storage campaign = campaigns[numberOfCampaigns];\\r\\n        campaign.owner = msg.sender;\\r\\n        campaign.name = _name;\\r\\n        campaign.title = _title;\\r\\n        campaign.description = _description;\\r\\n        campaign.target = _target;\\r\\n        campaign.deadline = _deadline;\\r\\n        campaign.image = _image;\\r\\n        campaign.typeOfCampaign = _type;\\r\\n        campaign.amountCollected = 0;\\r\\n        campaign.cashedOut = false;\\r\\n        numberOfCampaigns++;\\r\\n        campaign.isCheckedByWebsite = false;\\r\\n        campaign.bitWallet = \\\"Hasn't verified yet\\\";\\r\\n        \\r\\n        emit CampaignCreated(numberOfCampaigns-1, msg.sender, _title);\\r\\n\\r\\n        return numberOfCampaigns-1;\\r\\n    }\\r\\n\\r\\n    function gotChecked(uint256 _id,string memory _bitWallet) public onlyModerator {\\r\\n        Campaign storage campaign = campaigns[_id];\\r\\n        campaign.isCheckedByWebsite = true;\\r\\n        campaign.bitWallet = _bitWallet;\\r\\n        activeCampaignIDs.push(_id);\\r\\n    }\\r\\n\\r\\n    function donateToCampaign(uint256 _id, string memory _comment) public payable {\\r\\n        require( campaigns[_id].cashedOut==false ,\\\"Campaign already cashed out\\\");\\r\\n        require(_id < numberOfCampaigns && campaigns[_id].owner != address(0) && msg.value >= 1 ether && campaigns[_id].isCheckedByWebsite == true, \\\"Invalid campaign ID or less then minimum amount or the campaign hasn't reviewed yet by the website\\\");\\r\\n        Campaign storage campaign = campaigns[_id];\\r\\n        require(block.timestamp < campaign.deadline, \\\"Donation period for this campaign has ended\\\");\\r\\n        campaign.comments.push(_comment);\\r\\n        uint256 amount = msg.value;\\r\\n        campaign.donators.push(msg.sender);\\r\\n        campaign.donations.push(amount);\\r\\n        campaign.amountCollected += amount;\\r\\n        emit DonationReceived(_id, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function getDonators(uint256 _id) view public returns (address[] memory, uint256[] memory, string[] memory) {\\r\\n        return (campaigns[_id].donators, campaigns[_id].donations, campaigns[_id].comments);\\r\\n    }\\r\\n\\r\\n    function getCampaigns() public view returns (Campaign[] memory) {\\r\\n        Campaign[] memory allCampaigns = new Campaign[](numberOfCampaigns);\\r\\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\\r\\n            Campaign storage item = campaigns[i];\\r\\n            allCampaigns[i] = item;\\r\\n        }\\r\\n        return allCampaigns;\\r\\n    }\\r\\n\\r\\n    function withdrawDonationAfterEndTime(uint256 _id) public reentrancyGuard {\\r\\n        Campaign storage campaign = campaigns[_id];\\r\\n        require(msg.sender == campaign.owner, \\\"Only the campaign owner can withdraw\\\");\\r\\n        require( campaign.target <= campaign.amountCollected || block.timestamp > campaign.deadline, \\\"Cannot withdraw before reaching the target amount or before the campaign's end time\\\");\\r\\n        require( campaign.cashedOut==false ,\\\"Campaign already cashed out\\\");\\r\\n        require(campaign.isCheckedByWebsite==true, \\\"Please note that this campaign has not yet been reviewed by our team. For further assistance or inquiries, kindly reach out to us at support@YourCampaign.io\\\");\\r\\n        uint256 fee = campaign.amountCollected * 7 / 100;\\r\\n        uint256 amountToWithdraw = campaign.amountCollected - fee;\\r\\n        \\r\\n        contractBalance += fee + reportBalances[_id];\\r\\n        payable(campaign.owner).transfer(amountToWithdraw);\\r\\n\\r\\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\\r\\n            if (activeCampaignIDs[i] == _id) {\\r\\n                activeCampaignIDs[i] = activeCampaignIDs[activeCampaignIDs.length - 1];\\r\\n                activeCampaignIDs.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        campaign.amountCollected = 0;\\r\\n\\r\\n        campaign.cashedOut = true;\\r\\n\\r\\n        emit CampaignWithdrawn(_id, campaign.owner, amountToWithdraw);\\r\\n    }\\r\\n\\r\\n    function withdraw() public reentrancyGuard {\\r\\n        require(msg.sender == contractOwner, \\\"Only the contract owner can withdraw\\\");\\r\\n        require(contractBalance > 0, \\\"No funds to withdraw\\\");\\r\\n        uint256 amount = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        \\r\\n        payable(contractOwner).transfer(amount);\\r\\n\\r\\n        emit ContractWithdrawn(contractOwner, amount);\\r\\n    }\\r\\n\\r\\n    function distributeReportFunds(uint256 _campaignId) internal {\\r\\n        uint256 totalReportFunds = reportBalances[_campaignId];\\r\\n        address[] memory reporters = campaignReporters[_campaignId];\\r\\n\\r\\n        for (uint256 i = 0; i < reporters.length; i++) {\\r\\n            address reporter = reporters[i];\\r\\n            uint256 refundAmount = individualReportAmounts[_campaignId][reporter];\\r\\n\\r\\n            if (refundAmount > 0 && totalReportFunds >= refundAmount) {\\r\\n                payable(reporter).transfer(refundAmount);\\r\\n                totalReportFunds -= refundAmount;\\r\\n\\r\\n                // Reset the individual report amount for the reporter\\r\\n                individualReportAmounts[_campaignId][reporter] = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Reset the total report balance for the campaign\\r\\n        reportBalances[_campaignId] = 0;\\r\\n    }\\r\\n\\r\\n    function closeCampaign(uint256 _id) public onlyModerator {\\r\\n        Campaign storage campaign = campaigns[_id];\\r\\n\\r\\n        returnFundsToDonators(_id);\\r\\n\\r\\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\\r\\n            if (activeCampaignIDs[i] == _id) {\\r\\n                activeCampaignIDs[i] = activeCampaignIDs[activeCampaignIDs.length - 1];\\r\\n                activeCampaignIDs.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        campaign.isCheckedByWebsite = false;\\r\\n        campaign.image = \\\"X\\\";\\r\\n        campaign.bitWallet = \\\"Refunded because of iligall activity\\\";\\r\\n        emit CampaignClosed(_id, msg.sender);\\r\\n    }\\r\\n\\r\\n    mapping(address => bool) public moderators; // Mapping to check if an address is a moderator\\r\\n    mapping(uint256 => uint256) public reportBalances; // Mapping to store report balances for campaigns\\r\\n    mapping(uint256 => uint256) public reportCounts; // Mapping to store report counts for campaigns\\r\\n    uint256 constant REPORT_COST = 10 ether; // Cost to report a campaign\\r\\n\\r\\n    function addModerator(address _moderator) public onlyOwner {\\r\\n        moderators[_moderator] = true;\\r\\n        emit ModeratorAdded(_moderator);\\r\\n    }\\r\\n\\r\\n    function removeModerator(address _moderator) public onlyOwner {\\r\\n            moderators[_moderator] = false;\\r\\n            emit ModeratorRemoved(_moderator);\\r\\n        }\\r\\n\\r\\n    function reportCampaign(uint256 _campaignId, string memory _reason) public payable {\\r\\n        require(msg.value >= REPORT_COST, \\\"Insufficient report fee\\\");\\r\\n        require(!hasReported[_campaignId][msg.sender], \\\"You have already reported this campaign\\\");\\r\\n        \\r\\n        hasReported[_campaignId][msg.sender] = true;\\r\\n        \\r\\n        if(individualReportAmounts[_campaignId][msg.sender] == 0) {\\r\\n            campaignReporters[_campaignId].push(msg.sender);\\r\\n        }\\r\\n\\r\\n        individualReportAmounts[_campaignId][msg.sender] += msg.value;\\r\\n        reportBalances[_campaignId] += msg.value;\\r\\n        reportCounts[_campaignId]++;\\r\\n\\r\\n        emit CampaignReported(_campaignId, msg.sender);\\r\\n\\r\\n        reportReasons[_campaignId][msg.sender] = _reason;\\r\\n    }\\r\\n\\r\\n    function flagCampaignByMod(uint256 _campaignId) public onlyModerator {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n        campaign.isCheckedByWebsite = false;\\r\\n        emit CampaignFlagged(_campaignId);\\r\\n    }\\r\\n\\r\\n    function returnFundsToDonators(uint256 _campaignId) internal {\\r\\n        require(msg.sender == campaigns[_campaignId].owner, \\\"Only the campaign owner\\\");\\r\\n        \\r\\n        for (uint256 i = 0; i < campaigns[_campaignId].donators.length; i++) {\\r\\n            payable(campaigns[_campaignId].donators[i]).transfer(campaigns[_campaignId].donations[i]);\\r\\n        }\\r\\n        \\r\\n        distributeReportFunds(_campaignId);\\r\\n\\r\\n        campaigns[_campaignId].amountCollected = 0;\\r\\n    }\\r\\n\\r\\n    function likeComment(uint256 _campaignId, uint256 _commentIndex) public payable {\\r\\n        require(msg.value >= LIKE_COST, \\\"You must send 0.0000001 ETH to like a comment\\\");\\r\\n        require(!hasLiked[_campaignId][_commentIndex][msg.sender], \\\"You've already liked this comment\\\");\\r\\n\\r\\n        hasLiked[_campaignId][_commentIndex][msg.sender] = true;\\r\\n        commentLikes[_campaignId][_commentIndex]++;\\r\\n        contractBalance += msg.value;\\r\\n\\r\\n        emit CommentLiked(_campaignId, _commentIndex, msg.sender);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerofYourCampaign\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exterminator\",\"type\":\"address\"}],\"name\":\"CampaignClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignFlagged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"CampaignReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CampaignWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"}],\"name\":\"CommentLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"ModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"ModeratorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeCampaignIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignReporters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCheckedByWebsite\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"bitWallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commentLikes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"donateToCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"flagCampaignByMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaigns\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"donators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"donations\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"comments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCheckedByWebsite\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"bitWallet\",\"type\":\"string\"}],\"internalType\":\"struct YourCampaign.Campaign[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDonators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bitWallet\",\"type\":\"string\"}],\"name\":\"gotChecked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasLiked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasReported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualReportAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentIndex\",\"type\":\"uint256\"}],\"name\":\"likeComment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"reportCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reportReasons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawDonationAfterEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YourCampaign", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000016e5d9a81db7f898ba6feb023b6130c65978b792", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}