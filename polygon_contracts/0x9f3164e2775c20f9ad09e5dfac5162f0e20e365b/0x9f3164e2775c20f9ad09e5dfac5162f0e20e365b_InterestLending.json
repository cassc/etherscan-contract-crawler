{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lending/InterestLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Mortgage/TokenInfo.sol\\\";\\nimport \\\"./Calcs.sol\\\";\\nimport \\\"./ILendingControl.sol\\\";\\nimport \\\"./IVaultLendersRewards.sol\\\";\\nimport \\\"./IVaultLenders.sol\\\";\\nimport \\\"./ILending.sol\\\";\\n\\n/// @title A Contract to claim, reinvest Interests / Rewards to be paid to lenders.\\n/// @author Panoram Finance.\\n/// @notice You can use this contract to claim, reinvest the interest earning for any user in Lending/Earn Section.\\ncontract InterestLending is ReentrancyGuard, Calcs, ILending {\\n    /// @dev Using SafeERC for tokens\\n    using SafeERC20 for IERC20; \\n    uint256 private constant MAX_UINT = 2**255;\\n    bool internal paused = false;\\n    /// @dev Time to wait to withdraw the generated interest.\\n    uint256 private waitTimeForRewards = 86400; \\n\\n    TokenInfo public tokenInfo;\\n    /// @dev Events Emitted\\n    event ClaimRewardsSuccess(address indexed wallet, uint256 indexed idRequest, uint256 amount);\\n    event ReinvestRewardsSuccess(address indexed wallet, uint256 indexed idLending, uint256 amount);\\n    event ClaimRequestSuccess(address indexed wallet, uint256 indexed idRequest, uint256 amountRewards);\\n\\n    /// @dev Modifier to prevent the use of the function if the contract is paused.\\n    modifier isPaused(){\\n        if(paused){\\n            revert(\\\"contract paused\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to validate if the address sent is from an allowed token.\\n    modifier validToken(address _token){\\n        if(!tokenInfo.getToken(_token)){\\n            revert(\\\"Token not support\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if the address is the zero address.\\n    modifier checkAddress0(address add){\\n        if(add == address(0)){\\n            revert(\\\"address 0 not allowed\\\");\\n        }\\n        _;\\n    }\\n    /// @dev constructor\\n    /// @param _tokenInfo - the address of the Token Info contract.\\n    /// @param _lenControl - the address of the lending Control contract.\\n    /// @param _vaulLenders - the address of the Vault Lenders contract.\\n    /// @param _token - the address of the Token allowed.\\n    constructor(address _tokenInfo, address _lenControl, address _vaulLenders, address _token) Calcs(_lenControl) {\\n        //Set Roles\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEV_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x526324c87e3e44630971fd2f6d9D69f3914e01DA); // cambiar por el Multisign\\n        _setupRole(DEV_ROLE, 0x526324c87e3e44630971fd2f6d9D69f3914e01DA); // cambiar por el Multisign\\n        //Set contracts needed\\n        tokenInfo = TokenInfo(_tokenInfo);\\n        permissions(_vaulLenders, _token);\\n    }\\n\\n    /// @dev Function to reinvest the user's rewards / interest\\n    /// @param _idLending - the user's lending ID.\\n    /// @param _token - the allowed token address for withdrawals.\\n    function reinvestRewards(uint256 _idLending, address _token) public nonReentrant validToken(_token) isPaused{\\n         (uint256 amount, , , , , ) = LControl.getLenderInfo(msg.sender, _idLending);\\n        \\n        (uint256 amountRewards, uint256 timeOfCalc) = calcInterestAccumulated(msg.sender, _idLending);\\n        uint256 totalRewards = amountRewards + LControl.getPendingRewards(msg.sender, _idLending);\\n        // Validate that reinvestment is not possible if they don't have rewards (a value representable in 6 digits).\\n        totalRewards /= 1e12; // si no es representable en 6 digitos la division dara 0.\\n        if(totalRewards == 0){\\n            revert(\\\"You have not enough rewards yet\\\");\\n        }\\n\\n        (address vaultLenders,address lenderRewards,) = tokenInfo.getVaultInfo(_token);\\n        if(totalRewards > IVaultLendersRewards(lenderRewards).getTotalRewards()){\\n            revert(\\\"Not enough rewards in the vault\\\");\\n        }\\n        if((IVaultLenders(vaultLenders).totalSupply() + totalRewards) > IVaultLenders(vaultLenders).getMaxDeposit()){\\n            revert(\\\"Maximum Vault Deposit Has Been Reached\\\");\\n        }\\n        IVaultLendersRewards(lenderRewards).withdraw(totalRewards, _token);\\n        IVaultLenders(vaultLenders).deposit(totalRewards, _token);\\n\\n        LControl.updateOnReinvestmentRewards(msg.sender, _idLending, totalRewards, totalRewards, timeOfCalc);\\n       // LControl.resetRewards(msg.sender, _idRequest);\\n        uint256 payPerSecond = calcInterestForSecond((totalRewards + amount), LControl.interesLenders());\\n        LControl.updatePayPerSecond(msg.sender, _idLending, payPerSecond);\\n        emit ReinvestRewardsSuccess(msg.sender, _idLending, totalRewards);\\n    }\\n\\n    /// @dev Function for the user to claim his rewards/interests accumulated after 1 day of SetClaimRewardsRequest.\\n    /// @param _idRequest - the request ID generated to claim the user's interest earned.\\n    /// @param _idLending the user's lending ID.\\n    /// @param _token - the allowed token address for withdrawals.\\n    function claimRewards(uint256 _idRequest, uint256 _idLending, address _token) public nonReentrant validToken(_token) isPaused{\\n        (,uint256 rewards, Status state, uint96 date) = LControl.getRequest(msg.sender, _idRequest);\\n        if(state != Status.pendrewards){\\n            revert(\\\"You Don't have a Rewards Request Open\\\");\\n        } \\n        if(rewards == 0){  \\n            revert(\\\"You have no rewards yet\\\");\\n        }\\n        uint256 checkLastClaimTime = block.timestamp - uint256 (date);\\n        if(checkLastClaimTime <= waitTimeForRewards){\\n            revert(\\\"You Must Wait At Least 24 Hours To Claim\\\");\\n        }\\n         (,address lenderRewards,) = tokenInfo.getVaultInfo(address(_token));\\n        if(rewards > IVaultLendersRewards(lenderRewards).getTotalRewards()){\\n            revert(\\\"Not enough rewards in the vault\\\");\\n        } \\n        IVaultLendersRewards(lenderRewards).claimRequest(rewards, _token);\\n        IERC20(_token).safeTransfer(msg.sender, rewards);\\n\\n        LControl.updateClaimed(_idLending, msg.sender, rewards, block.timestamp);\\n        //LControl.resetRewards(msg.sender, _idRequest);\\n        LControl.closeRequest(msg.sender, _idRequest, Status.complete, _idLending);\\n        emit ClaimRewardsSuccess(msg.sender, _idLending, rewards); \\n    }\\n\\n    /// @dev Function to set an interest claim request. The user must set a claim request before He is able to claim the interest earned.\\n    /// @param _idLending the user's lending ID.\\n    /// @param _token - the allowed token address for withdrawals.\\n    function SetClaimRewardsRequest(uint256 _idLending, address _token) public nonReentrant validToken(_token) isPaused{\\n        (uint256 amountRewards, uint256 timeOfCalc) = calcInterestAccumulated(msg.sender, _idLending);\\n        uint256 totalRewards = amountRewards + LControl.getPendingRewards(msg.sender, _idLending);\\n        totalRewards /= 1e12;\\n        (,address lenderRewards,) = tokenInfo.getVaultInfo(_token);\\n        if(totalRewards == 0){  \\n            revert(\\\"You have not enough rewards yet\\\");\\n        }\\n        uint256 amountVault = IVaultLendersRewards(lenderRewards).getTotalRewards();\\n        if(totalRewards > amountVault){\\n            revert(\\\"Not enough rewards in the vault\\\");\\n        }\\n        uint96 date = LControl.getLastSetClaimRewards(msg.sender, _idLending);\\n         if((block.timestamp - uint256(date)) < waitTimeForRewards){\\n            revert(\\\"You must wait at least 24 hours to Set a Rewards Claim Again\\\");\\n        } \\n        \\n        IVaultLendersRewards(lenderRewards).addRequest(totalRewards);\\n        uint256 _id = LControl.createRequest(msg.sender, 0, totalRewards,2);\\n        LControl.updateLastTimeClaim(msg.sender, _idLending, timeOfCalc);\\n        // Actualizar el valor de los rewards pendientes\\n        LControl.updatePendingRewards(msg.sender, _idLending, timeOfCalc);\\n        emit ClaimRequestSuccess(msg.sender, _id, totalRewards);\\n    }\\n\\n    /// @dev Function to update the time that a user must wait to withdraw the earned interests.\\n    /// @param _newWaitTime - the time to wait for the withdrawal of the interest generated.\\n    function updateWaitTimeForRewards(uint256 _newWaitTime) external onlyDev{\\n        waitTimeForRewards = _newWaitTime;\\n    }\\n\\n    /// @dev Function to get the waiting time to withdraw the generated interests.\\n    /// @return waitTimeForRewards - the time to wait for withdraw the earned interests.\\n    function getWaitTimeForRewards() external view returns(uint256){\\n        return waitTimeForRewards;\\n    }\\n\\n    /// @dev Function to pause the contract if necessary.\\n    /// @param _Status - a bool true/false to pause or unpause the contract.\\n    function updatePaused(bool _Status) external onlyDev {\\n        paused = _Status;\\n    }\\n    /// @dev Function to update the TokenInfo contract if necessary.\\n    /// @param _newTokenInfo - The new address of the token info contract.\\n    function updateTokenInfo(address _newTokenInfo) external onlyDev checkAddress0(_newTokenInfo) {\\n         tokenInfo = TokenInfo(_newTokenInfo);\\n    }\\n    /// @dev Function to update the Lending control contract address if necessary.\\n    /// @param _LendingControl - The new address of the token info contract.\\n    function updateLendingControl(address _LendingControl) external onlyDev checkAddress0(_LendingControl) {\\n        LControl = ILendingControl(_LendingControl);\\n    }\\n\\n    /// @dev Function to approve the Vault Lenders contract to transfer token From  this contract when a user wants to reinvest their earnings.\\n    /// @param _vaulLenders - The new address of the Vault Lenders contract.\\n    /// @param _token - the address of the Token allowed.\\n    function permissions(address _vaulLenders, address _token) public onlyDev validToken(_token) checkAddress0(_vaulLenders){\\n        IERC20(_token).safeApprove(_vaulLenders, MAX_UINT);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/Mortgage/TokenInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ncontract TokenInfo is AccessControl {\\n\\n    ///@dev developer role created\\n    bytes32 public constant DEV_ROLE = keccak256(\\\"DEV_ROLE\\\");\\n\\n    \\n    modifier onlydev() {\\n         if (!hasRole(DEV_ROLE, msg.sender)) {\\n            revert(\\\"have no dev role\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEV_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x30268390218B20226FC101cD5651A51b12C07470);\\n        _setupRole(DEV_ROLE, 0x30268390218B20226FC101cD5651A51b12C07470);\\n        _setupRole(DEV_ROLE, 0x1921a154365A82b8d54a3Cb6e2Fd7488cD0FFd23); \\n    }\\n\\n    struct Vaults{\\n        address lender;\\n        address lenderRewards;\\n        address rewards;\\n    }\\n    //registration and control of approved tokens\\n    mapping(address => bool) internal tokens;\\n    //save the token contract and the vault for it\\n    mapping(address => Vaults) internal vaultsInfo;\\n    //save the collection contract and the rental vault contract to be used for each collection\\n    mapping(address => address) internal collectionToVault;\\n\\n    function addToken(address _token) public onlydev {\\n        tokens[_token] = true;\\n    }\\n\\n    function removeToken(address _token) public onlydev {\\n        tokens[_token] = false;\\n    }\\n\\n    function getToken(address _token) public view returns(bool _ok){\\n        return tokens[_token];\\n    }\\n\\n    function addVaultRegistry(address _token, address _lender,address _lenderRewards,address _rewards) public onlydev  {\\n        vaultsInfo[_token].lender = _lender;\\n        vaultsInfo[_token].lenderRewards = _lenderRewards;\\n        vaultsInfo[_token].rewards = _rewards;\\n    }\\n\\n    function removeVaultRegistry(address _token) public onlydev  {\\n        vaultsInfo[_token].lender = address(0);\\n        vaultsInfo[_token].lenderRewards = address(0);\\n        vaultsInfo[_token].rewards = address(0);\\n    }\\n\\n    function getVaultInfo(address _token) public view returns(address _lender, address _lenderRewards,address _rewards){\\n        return ( vaultsInfo[_token].lender,\\n        vaultsInfo[_token].lenderRewards,\\n        vaultsInfo[_token].rewards);\\n    }\\n\\n    function addVaultRent(address _collection, address _vault) public onlydev {\\n        collectionToVault[_collection] = _vault;\\n    }\\n\\n    function removeVaultRent(address _collection) public onlydev {\\n        collectionToVault[_collection] = address(0);\\n    }\\n\\n    function getVaultRent(address _collection) public view returns(address _vault){\\n        return collectionToVault[_collection];\\n    }\\n}\"\r\n    },\r\n    \"contracts/Lending/Calcs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../Marketplace/PRBMathUD60x18Typed.sol\\\";\\nimport \\\"./ILendingControl.sol\\\";\\n\\n/// @title A Contract to Calculate interest or penalization.\\n/// @author Panoram Finance.\\n/// @notice You can use this contract to calculate the interest or penalization for any user in Lending/Earn Section.\\n/// @dev Functions to Calculate the interest to pay or the penalization for an user in Lending/Earn section.\\ncontract Calcs is AccessControl {\\n    using PRBMathUD60x18Typed for PRBMath.UD60x18;\\n\\n    uint256 private constant SECONDS_PER_YEAR = 365 days;\\n    uint256 internal percentagePenalization = 150; // 1.5% de 10k \\n    uint256 private feeLenders= 4000; //Equals 40%\\n    uint256 private feePanoram = 6000; //Equals 60%\\n\\n    bytes32 public constant DEV_ROLE = keccak256(\\\"DEV_ROLE\\\");\\n\\n    /// @dev Lending control Contract.\\n    ILendingControl public LControl; \\n\\n    /// @dev Constructor to set the Roles and the Lending Control Contract address.\\n    /// @param _LendingControl the address of the Lending Control Contract.\\n    constructor(address _LendingControl){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEV_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x526324c87e3e44630971fd2f6d9D69f3914e01DA); // cambiar por el Multisign\\n        _setupRole(DEV_ROLE, 0x526324c87e3e44630971fd2f6d9D69f3914e01DA); // cambiar por el Multisign\\n        LControl = ILendingControl(_LendingControl);\\n    }\\n\\n    /// @dev Modifier to check if an Address has the Role to use admin functions.\\n    modifier onlyDev(){\\n        if(!hasRole(DEV_ROLE, msg.sender)){\\n            revert(\\\"Not enough Permissions\\\");\\n        }\\n        _;\\n    }\\n  \\n\\n    /// @dev Function to calculate the user's interest accumulated in Lending.\\n    /// @param _wallet - the user's address.\\n    /// @param _idLending - the user's lending ID.\\n    /// @return interesToPay - The amount that must be paid to the user.\\n    /// @return timeOfCalc - The date on which the interest payable to the user was calculated.\\n    function calcInterestAccumulated(address _wallet,uint256 _idLending) public view returns(uint256 interesToPay, uint256 timeOfCalc){\\n        (uint256 amount, , , uint96 lastCalcTime, uint256 payPerSecond,) = LControl.getLenderInfo(_wallet, _idLending);\\n        if(amount == 0){\\n           return(interesToPay = 0, timeOfCalc = block.timestamp);\\n        }\\n        timeOfCalc = block.timestamp;\\n        uint256 timeToPay = timeOfCalc - lastCalcTime;\\n        PRBMath.UD60x18 memory PRBpayPerSecond = PRBMath.UD60x18({value: payPerSecond});\\n        PRBMath.UD60x18 memory PRBinteresToPay = PRBpayPerSecond.mul(PRBMath.UD60x18({value: timeToPay * 1e18}));\\n        interesToPay = PRBinteresToPay.value; // return number in factor 18\\n    }\\n\\n    /// @dev Function to calculate the interest paid to the user every second.\\n    /// @param _amountDeposit - amount deposited by the user.\\n    /// @param _interes - interest payable based on 10k.\\n    /// @return payPerSecond - the amount to be paid every second to the user with 18 decimals.\\n    function calcInterestForSecond(uint256 _amountDeposit, uint16 _interes) public pure returns(uint256 payPerSecond){\\n        if(_amountDeposit == 0){\\n           return payPerSecond = 0;\\n        }\\n        PRBMath.UD60x18 memory amount = PRBMath.UD60x18({value: _amountDeposit * 1e12});\\n        PRBMath.UD60x18 memory AmountxPercentage = amount.mul(PRBMath.UD60x18({value: _interes}));\\n        PRBMath.UD60x18 memory annualPay = AmountxPercentage.div(PRBMath.UD60x18({value: 10000}));\\n        PRBMath.UD60x18 memory AmountPerSecond = annualPay.div(PRBMath.UD60x18({value: SECONDS_PER_YEAR * 1e18}));\\n\\n        ///@dev FALTA HACER LA CONVERSION 1e12 PARA PASARLO A USDC CUANDO EL USUARIO COBRE LOS INTERESES\\n         payPerSecond = AmountPerSecond.value; // return number in factor 18\\n    }\\n\\n    /// @dev Function to calculate the user's penalization when they withdraw the money before the time he lend it.\\n    /// @param _amount - the amount to withdraw.\\n    /// @return penalization - the penalization amount with 18 decimals.\\n    function calcPenalization(uint256 _amount) internal view returns(uint256 penalization){\\n            PRBMath.UD60x18 memory PRBamount = PRBMath.UD60x18({value: _amount * 1e12});\\n            PRBMath.UD60x18 memory PRBamountxPercentage = PRBamount.mul(PRBMath.UD60x18({value: percentagePenalization }));\\n            PRBMath.UD60x18 memory PRBpenalization = PRBamountxPercentage.div(PRBMath.UD60x18({value: 10000}));\\n            penalization = PRBpenalization.value;\\n    }\\n\\n    /// @dev Function to calculate the fees for Panoram and Vault lenders rewards from the penalization amount.\\n    /// @param _penalizationAmount - the amount on which  the fee will be calculated.\\n    /// @return panoram - the fee amount for Panoram \\n    /// @return lenders - the fee amount for Lenders rewards.\\n    function distFees(uint256 _penalizationAmount) internal view returns(uint256 panoram, uint256 lenders){\\n        panoram = _getPortion(_penalizationAmount, feePanoram);\\n        lenders =   _getPortion(_penalizationAmount, feeLenders);\\n        return (panoram, lenders);\\n    } \\n\\n    /// @dev Function to calculate percentages.\\n    /// @param _amount - the amount on which  the percentage will be calculated.\\n    /// @param _percentage - the percentage to calculate.\\n    /// @return amount - the amount that represents the percentage.\\n    function _getPortion(uint256 _amount, uint256 _percentage)internal pure returns (uint256){\\n        return (_amount * (_percentage)) / 10000;\\n    }\\n\\n    /// @dev Admin function to update the penalty percentage.\\n    /// @param _newPenalization - the new penalty percentage.\\n    function updatePercentagePenalization(uint256 _newPenalization) external onlyDev {\\n        percentagePenalization = _newPenalization;\\n    }   \\n    /// @dev Admin function to update the Lending control contract address if needed.\\n    /// @param _LendingControl - the new Lending Control address.\\n    function updateLendControl(address _LendingControl) external onlyDev {\\n        LControl = ILendingControl(_LendingControl);\\n    }\\n\\n    /// @dev Admin function to update the penalization fee for Vault lenders rewards.\\n    /// @param _newFeeLender - the new penalization fee\\n    function updateFeeLenders(uint256 _newFeeLender) external onlyDev {\\n        feeLenders = _newFeeLender;\\n    }\\n    /// @dev Admin function to update the penalization fee for Panoram.\\n    /// @param _newFeePanoram - the new penalization fee for Panoram.\\n    function updateFeePanoram(uint256 _newFeePanoram) external onlyDev {\\n        feePanoram = _newFeePanoram;\\n    }\\n    \\n}\"\r\n    },\r\n    \"contracts/Lending/ILendingControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\nimport \\\"./ILending.sol\\\";\\n\\n/// @title Lending Control Interface.\\n/// @author Panoram Finance.\\n/// @notice You can use this interface to connect to the Lending Control contract.\\ninterface ILendingControl is ILending {\\n\\n    /// @dev Function to register a new user and his deposit in Lending/Earn.\\n    function addRegistry(uint256 id, address wallet, uint256 _amount,address _token, uint256 _payPerSecond) external;\\n\\n    /// @dev Function to update a user deposit in Lending/Earn.\\n    function updateRegistry(uint256 id, address wallet, uint256 _amount, uint256 _payPerSecond) external;\\n    \\n    /// @dev Function to rest the amount from the amount register for the user after He set a withdrawal request.\\n    function claimMoney(uint256 id, address wallet, uint256 _amount) external;\\n\\n    /// @dev Function to sum the amount to the amount register for the user if He cancel the withdraw.\\n    function updateMoney(uint256 id, address wallet, uint256 _amount) external;\\n\\n    /// @dev Function to get the information registered for an user in Lending/Earn.\\n    function getLenderInfo(address wallet, uint256 id) external view returns (uint256 _amount, uint256 _deposit, address _token, uint96 _lastCalcTime, uint256 _payPerSecond, uint96 _withdraw);\\n\\n    /// @dev Function to associate and address to a Lending ID.\\n    function addInfo(uint256 id, address wallet) external;\\n\\n    /// @dev Function to delete the register of an address => Lending ID.\\n    function deleteInfo(address wallet) external;\\n\\n    /// @dev Function to get the Lending ID of an Address.\\n    function getIdInfo(address wallet) external view returns(uint256 _id);\\n\\n    /// @dev Function to get the interest/rewards information from the user.\\n    function getRewardsClaimed(address wallet, uint256 id) external view returns (uint256 rewards, uint96 claimTime, uint96 lastTimeClaim);\\n\\n    /// @dev Function to update the interest claimed and the last time the user claims it.\\n    function updateClaimed(uint256 id, address wallet, uint256 _rewards, uint256 _claimTime) external;\\n\\n    /// @dev Function to create a request to withdraw your investment in Lending or your interest earn.\\n    function createRequest(address _wallet, uint256 _amount, uint256 _rewards, uint8 _flag) external returns(uint256);\\n\\n    /// @dev Function to close a withdrawal request.\\n    function closeRequest(address _wallet, uint256 _id, Status _state, uint256 _idLending) external;\\n\\n    /// @dev Function to get the information registered in a withdrawal request.\\n    function getRequest(address _wallet, uint256 _id) external view returns(uint256 _amount,uint256 _rewards, Status _state, uint96 _date);\\n\\n    /// @dev Function to check if a Lending ID is associated with an address wallet.\\n    function validateId(address wallet, uint256 _id) external view returns (bool _valid);\\n\\n    /// @dev Function to get the interest paid to lenders.\\n    function interesLenders() external view returns(uint16);\\n\\n    /// @dev Function to update the amount to pay per second to a lender.\\n    function updatePayPerSecond(address _wallet, uint256 _idLending ,uint256 _newPayPerSecond) external;\\n\\n    /// @dev Function that returns the remaining days to avoid penalties for withdrawals of money deposited in lending.\\n    function getDaysLeft(address _wallet,uint256 _idLending) external view returns(uint32 daysLeft);\\n\\n    /// @dev Function to update the pending days to avoid penalties for withdrawals of money deposited in lending.\\n    function updateDaysLeft(address _wallet, uint256 _idLending, uint32 _daysLeft) external;\\n\\n    /// @dev Function to update the key information in \\\"Data\\\" struct from lending control after the user reinvest the interest generated.\\n    function updateOnReinvestmentRewards(address _wallet, uint256 _idLending, uint256 _amount, uint256 _claimed, uint256 _lastCalcTime) external;\\n\\n    /// @dev Function to update the days Left to avoid penalizations for lending withdrawals.\\n    function updatePenalization(uint256 id, address wallet) external;\\n\\n    /// @dev Function to get the variable \\\"daysBeforePenalization\\\" from LendingControl, that saves the days that a user must wait before making a withdrawal to avoid being penalized.\\n    function getDaysBeforePenalization() external view returns(uint32 _days);\\n\\n    /// @dev Function to update the last time the interest to be paid to the user was calculated.\\n    function updateLastTimeClaim(address wallet, uint256 idLending, uint256 _timeClaim) external;\\n\\n    /// @dev Function to get the pending interests to be paid to the user.\\n    function getPendingRewards(address _wallet, uint256 _idLending) external view returns(uint256);\\n\\n    /// @dev Function to update the pending interest to pay for an user.\\n    function UpdateInteresAccumulated(address _wallet, uint _id) external;\\n\\n    /// @dev Function to clear the pending rewards after the user set a claim for that rewards/interests.\\n    function updatePendingRewards(address wallet, uint256 idLending, uint256 _timeClaim) external;\\n\\n    /// @dev Function to get the date of the last time a user set a request to withdraw the generated interests.\\n    function getLastSetClaimRewards(address _wallet,uint256 _idLending) external view returns(uint96 lastSetClaimRewards);\\n\\n    /// @dev Function to migrate the data for the USDT Migration.\\n    function updatePosition(address wallet, uint256 id, Data calldata info, address _token) external;\\n\\n    function updateRequest(address _wallet, uint256 _amount, uint256 _rewards, uint8 _flag, uint96 _date, uint96 _lastCalcTime) external;\\n}\"\r\n    },\r\n    \"contracts/Lending/IVaultLenders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.11;\\n\\n/// @title Vault Lenders Interface.\\n/// @author Panoram Finance.\\n/// @notice You can use this interface to connect to the Vault Lenders contract.\\ninterface IVaultLenders {\\n    /// @dev Function to deposit tokens in the vault.\\n    function deposit(uint256,address) external;\\n\\n    /// @dev Function to deposit Capital payments for loans.\\n    function depositCapital(uint256,address) external;\\n\\n    /// @dev Function to withdraw money when a loan is created\\n    function withdraw(uint256,address) external;\\n\\n    /// @dev Function for the multisign to withdraw all the money in the vault if necessary.\\n    function withdrawAll() external;\\n\\n    /// @dev Function to get the variable totalSupply, that represents the total tokens in the vault.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Function to get the total borrowed money.\\n    function getBorrows() external view returns(uint256 _borrows);\\n\\n    /// @dev Function to get the available money for loans.\\n    function getAvaible() external view returns(uint256 _avaible);\\n\\n    /// @dev Function to add a withdrawal request for the money that the user deposited in lending. \\n    /// @dev They will be able to withdraw the money when the withdrawal waiting time is over.\\n    function addRequest(uint256 _amount) external;\\n\\n    /// @dev Function to delete a withdrawals request when the user cancel the request.\\n    function deleteRequest(uint256 _amount) external;\\n\\n    /// @dev Function to transfer money from the vault to the lending contract to fulfill a user's withdrawal request.\\n    function claimRequest(uint256 _amount) external;\\n\\n    /// @dev Function to get the amount of money requested for withdrawal.\\n    function getMoneyRequest() external view returns(uint256);\\n\\n    /// @dev Function to get the maximum amount that can be deposit into the vault.\\n    function getMaxDeposit() external view returns(uint256);\\n\\n    /// @dev Function to get the minimum amount that can be deposit into the vault.\\n    function getMinDeposit() external view returns(uint256);\\n\\n    /// @dev Function to get the percentage of the vault used in loans, based on scale of 10k.\\n    function usageRatio() external view returns(uint256 _usage);\\n}\\n\"\r\n    },\r\n    \"contracts/Lending/IVaultLendersRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.11;\\r\\n\\r\\n/// @title Vault Lenders Rewards Interface.\\r\\n/// @author Panoram Finance.\\r\\n/// @notice You can use this interface to connect to the Vault Lenders Rewards contract.\\r\\ninterface IVaultLendersRewards{\\r\\n    /// @dev Function to deposit tokens in the vault.\\r\\n    function deposit(uint256 _amount,  address _token) external;\\r\\n\\r\\n    /// @dev Function to withdraw money from the vault.\\r\\n    function withdraw(uint256 amount, address _token) external ;\\r\\n\\r\\n    /// @dev Function for the multisign to withdraw all the money in the vault if necessary.\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    /// @dev Function to add a withdrawal request to pay user's interests from lending.\\r\\n    function addRequest(uint256 _amount) external;\\r\\n\\r\\n    /// @dev Funcion to delete a withdrawal request (cancel option no implemented)\\r\\n    function deleteRequest(uint256 _amount) external;  \\r\\n\\r\\n    /// @dev Function to transfer money from the vault to the Interest Lending contract to pay user interest.\\r\\n    function claimRequest(uint256 _amount, address _token) external;\\r\\n\\r\\n    /// @dev Function to get the amount of money requested for withdrawal.\\r\\n    function getMoneyRequest() external view returns(uint256);\\r\\n\\r\\n    /// @dev Function to get the total amount deposited in the vault.\\r\\n    function getTotalRewards() external view returns(uint256);\\r\\n        \\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/Lending/ILending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\n/// @title Lending Interface.\\n/// @author Panoram Finance.\\n/// @notice You can import this interface to access the statuses of a lending withdraw.\\ninterface ILending {\\n\\n    /// @dev Enum to declare the Status of a lending / interest withdrawal\\n    enum Status{\\n        complete, //0\\n        pending, //1\\n        pendrewards,\\n        cancelled //2\\n    }\\n\\n     /// @dev Lending Struct.\\n    struct Data {\\n        uint256 amount; // amount deposited\\n        uint256 pendRewards; // pending Rewards for withdrawals.\\n        uint256 claimed; //Amount of rewards already redeemed\\n        uint256 payPerSecond; // how much the user earn per second.\\n        uint96 depositTime;\\n        uint96 lastCalcTime; // calculate the interest based on the date, starting from the date when it was last calculated.\\n        uint96 withdrawTime; \\n        uint96 claimTime; // last time the user claim the rewards\\n        uint96 lastSetClaimRewards; // the date when the user set a claim.\\n        uint32 daysLeft; // days left to avoid penalization.\\n        address token;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/PRBMathUD60x18Typed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18Typed\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\n/// @dev This is the same as PRBMathUD59x18, except that it works with structs instead of raw uint256s.\\nlibrary PRBMathUD60x18Typed {\\n    /// STORAGE ///\\n\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Adds two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @param x The first summand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second summand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The sum as an unsigned 59.18 decimal fixed-point number.\\n    function add(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        unchecked {\\n            uint256 rValue = x.value + y.value;\\n            if (rValue < x.value) {\\n                revert PRBMathUD60x18__AddOverflow(x.value, y.value);\\n            }\\n            result = PRBMath.UD60x18({ value: rValue });\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            uint256 rValue = (x.value >> 1) + (y.value >> 1) + (x.value & y.value & 1);\\n            result = PRBMath.UD60x18({ value: rValue });\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        uint256 xValue = x.value;\\n        if (xValue > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(xValue);\\n        }\\n\\n        uint256 rValue;\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(xValue, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            rValue := add(xValue, mul(delta, gt(remainder, 0)))\\n        }\\n        result = PRBMath.UD60x18({ value: rValue });\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        result = PRBMath.UD60x18({ value: PRBMath.mulDiv(x.value, SCALE, y.value) });\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (PRBMath.UD60x18 memory result) {\\n        result = PRBMath.UD60x18({ value: 2_718281828459045235 });\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        uint256 xValue = x.value;\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (xValue >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(xValue);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x.value * LOG2_E;\\n            PRBMath.UD60x18 memory exponent = PRBMath.UD60x18({ value: (doubleScaleProduct + HALF_SCALE) / SCALE });\\n            result = exp2(exponent);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x.value >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x.value);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x.value << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.UD60x18({ value: PRBMath.exp2(x192x64) });\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        uint256 xValue = x.value;\\n        uint256 rValue;\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(xValue, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            rValue := sub(xValue, mul(remainder, gt(remainder, 0)))\\n        }\\n        result = PRBMath.UD60x18({ value: rValue });\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        uint256 xValue = x.value;\\n        uint256 rValue;\\n        assembly {\\n            rValue := mod(xValue, SCALE)\\n        }\\n        result = PRBMath.UD60x18({ value: rValue });\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = PRBMath.UD60x18({ value: x * SCALE });\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        if (x.value == 0) {\\n            return PRBMath.UD60x18({ value: 0 });\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x.value * y.value;\\n            if (xy / x.value != y.value) {\\n                revert PRBMathUD60x18__GmOverflow(x.value, y.value);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.UD60x18({ value: PRBMath.sqrt(xy) });\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = PRBMath.UD60x18({ value: 1e36 / x.value });\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            uint256 rValue = (log2(x).value * SCALE) / LOG2_E;\\n            result = PRBMath.UD60x18({ value: rValue });\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        uint256 xValue = x.value;\\n        if (xValue < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(xValue);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        uint256 rValue;\\n\\n        // prettier-ignore\\n        assembly {\\n            switch xValue\\n            case 1 { rValue := mul(SCALE, sub(0, 18)) }\\n            case 10 { rValue := mul(SCALE, sub(1, 18)) }\\n            case 100 { rValue := mul(SCALE, sub(2, 18)) }\\n            case 1000 { rValue := mul(SCALE, sub(3, 18)) }\\n            case 10000 { rValue := mul(SCALE, sub(4, 18)) }\\n            case 100000 { rValue := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { rValue := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { rValue := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { rValue := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { rValue := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { rValue := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { rValue := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { rValue := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { rValue := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { rValue := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { rValue := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { rValue := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { rValue := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { rValue := 0 }\\n            case 10000000000000000000 { rValue := SCALE }\\n            case 100000000000000000000 { rValue := mul(SCALE, 2) }\\n            case 1000000000000000000000 { rValue := mul(SCALE, 3) }\\n            case 10000000000000000000000 { rValue := mul(SCALE, 4) }\\n            case 100000000000000000000000 { rValue := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { rValue := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { rValue := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { rValue := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { rValue := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { rValue := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { rValue := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { rValue := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { rValue := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { rValue := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { rValue := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { rValue := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { rValue := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { rValue := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { rValue := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { rValue := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { rValue := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { rValue := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { rValue := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { rValue := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { rValue := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { rValue := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 59) }\\n            default {\\n                rValue := MAX_UD60x18\\n            }\\n        }\\n\\n        if (rValue != MAX_UD60x18) {\\n            result = PRBMath.UD60x18({ value: rValue });\\n        } else {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                rValue = (log2(x).value * SCALE) / 3_321928094887362347;\\n                result = PRBMath.UD60x18({ value: rValue });\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        uint256 xValue = x.value;\\n        if (xValue < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(xValue);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(xValue / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            uint256 rValue = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = xValue >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return PRBMath.UD60x18({ value: rValue });\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    rValue += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result = PRBMath.UD60x18({ value: rValue });\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        result = PRBMath.UD60x18({ value: PRBMath.mulDivFixedPoint(x.value, y.value) });\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (PRBMath.UD60x18 memory result) {\\n        result = PRBMath.UD60x18({ value: 3_141592653589793238 });\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        if (x.value == 0) {\\n            return PRBMath.UD60x18({ value: y.value == 0 ? SCALE : uint256(0) });\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(PRBMath.UD60x18 memory x, uint256 y) internal pure returns (PRBMath.UD60x18 memory result) {\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 xValue = x.value;\\n        uint256 rValue = y & 1 > 0 ? xValue : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            xValue = PRBMath.mulDivFixedPoint(xValue, xValue);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                rValue = PRBMath.mulDivFixedPoint(rValue, xValue);\\n            }\\n        }\\n        result = PRBMath.UD60x18({ value: rValue });\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (PRBMath.UD60x18 memory result) {\\n        result = PRBMath.UD60x18({ value: SCALE });\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(PRBMath.UD60x18 memory x) internal pure returns (PRBMath.UD60x18 memory result) {\\n        unchecked {\\n            if (x.value > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x.value);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.UD60x18({ value: PRBMath.sqrt(x.value * SCALE) });\\n        }\\n    }\\n\\n    /// @notice Subtracts one unsigned 60.18-decimal fixed-point number from another one, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @param x The minuend as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The subtrahend as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The difference as an unsigned 60.18 decimal fixed-point number.\\n    function sub(PRBMath.UD60x18 memory x, PRBMath.UD60x18 memory y)\\n        internal\\n        pure\\n        returns (PRBMath.UD60x18 memory result)\\n    {\\n        unchecked {\\n            if (x.value < y.value) {\\n                revert PRBMathUD60x18__SubUnderflow(x.value, y.value);\\n            }\\n            result = PRBMath.UD60x18({ value: x.value - y.value });\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(PRBMath.UD60x18 memory x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x.value / SCALE;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/Marketplace/PRBMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @notice Emitted when the result overflows uint256.\\r\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\r\\n\\r\\n/// @notice Emitted when the result overflows uint256.\\r\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\r\\n\\r\\n/// @notice Emitted when one of the inputs is type(int256).min.\\r\\nerror PRBMath__MulDivSignedInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\r\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the input is MIN_SD59x18.\\r\\nerror PRBMathSD59x18__AbsInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\r\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\r\\nerror PRBMathSD59x18__DivInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\r\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\r\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 192.\\r\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\r\\n\\r\\n/// @notice Emitted when flooring a number underflows SD59x18.\\r\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\r\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\r\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when the product of the inputs is negative.\\r\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\r\\n\\r\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\r\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\r\\n\\r\\n/// @notice Emitted when the input is less than or equal to zero.\\r\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\r\\n\\r\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\r\\nerror PRBMathSD59x18__MulInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\r\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\r\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the input is negative.\\r\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\r\\n\\r\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\r\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when addition overflows UD60x18.\\r\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\r\\n\\r\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\r\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\r\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 192.\\r\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\r\\n\\r\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\r\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\r\\n\\r\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\r\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\r\\n\\r\\n/// @notice Emitted when the input is less than 1.\\r\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\r\\n\\r\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\r\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\r\\n\\r\\n/// @notice Emitted when subtraction underflows UD60x18.\\r\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\r\\n\\r\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\r\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\r\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\r\\nlibrary PRBMath {\\r\\n    /// STRUCTS ///\\r\\n\\r\\n    struct SD59x18 {\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct UD60x18 {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    /// STORAGE ///\\r\\n\\r\\n    /// @dev How many trailing decimals can be represented.\\r\\n    uint256 internal constant SCALE = 1e18;\\r\\n\\r\\n    /// @dev Largest power of two divisor of SCALE.\\r\\n    uint256 internal constant SCALE_LPOTD = 262144;\\r\\n\\r\\n    /// @dev SCALE inverted mod 2^256.\\r\\n    uint256 internal constant SCALE_INVERSE =\\r\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\r\\n\\r\\n    /// FUNCTIONS ///\\r\\n\\r\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\r\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\r\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\r\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\r\\n            result = 0x800000000000000000000000000000000000000000000000;\\r\\n\\r\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\r\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\r\\n            if (x & 0x8000000000000000 > 0) {\\r\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000000000000 > 0) {\\r\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000000000000 > 0) {\\r\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000000000000 > 0) {\\r\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000000000000 > 0) {\\r\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000000000000 > 0) {\\r\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000000000000 > 0) {\\r\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000000000000 > 0) {\\r\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000000000000 > 0) {\\r\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000000000000 > 0) {\\r\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000000000000 > 0) {\\r\\n                result = (result * 0x100162F3904051FA1) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000000000000 > 0) {\\r\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000000000000 > 0) {\\r\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000000000 > 0) {\\r\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000000000 > 0) {\\r\\n                result = (result * 0x1000162E525EE0547) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000000000 > 0) {\\r\\n                result = (result * 0x10000B17255775C04) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000000000 > 0) {\\r\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000000000 > 0) {\\r\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000000000 > 0) {\\r\\n                result = (result * 0x10000162E43F4F831) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000000000 > 0) {\\r\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000000000 > 0) {\\r\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000000000 > 0) {\\r\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000000000 > 0) {\\r\\n                result = (result * 0x100000162E430E5A2) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000000000 > 0) {\\r\\n                result = (result * 0x1000000B172183551) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000000000 > 0) {\\r\\n                result = (result * 0x100000058B90C0B49) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000000 > 0) {\\r\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000000 > 0) {\\r\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000000 > 0) {\\r\\n                result = (result * 0x10000000B17217FBB) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000000 > 0) {\\r\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000000 > 0) {\\r\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000000 > 0) {\\r\\n                result = (result * 0x10000000162E42FF1) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000000 > 0) {\\r\\n                result = (result * 0x100000000B17217F8) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000000 > 0) {\\r\\n                result = (result * 0x10000000058B90BFC) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000000 > 0) {\\r\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000000 > 0) {\\r\\n                result = (result * 0x100000000162E42FF) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000000 > 0) {\\r\\n                result = (result * 0x1000000000B17217F) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000000 > 0) {\\r\\n                result = (result * 0x100000000058B90C0) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000 > 0) {\\r\\n                result = (result * 0x10000000002C5C860) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000 > 0) {\\r\\n                result = (result * 0x1000000000162E430) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000 > 0) {\\r\\n                result = (result * 0x10000000000B17218) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000 > 0) {\\r\\n                result = (result * 0x1000000000058B90C) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000 > 0) {\\r\\n                result = (result * 0x100000000002C5C86) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000 > 0) {\\r\\n                result = (result * 0x10000000000162E43) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000 > 0) {\\r\\n                result = (result * 0x100000000000B1721) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000 > 0) {\\r\\n                result = (result * 0x10000000000058B91) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000 > 0) {\\r\\n                result = (result * 0x1000000000002C5C8) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000 > 0) {\\r\\n                result = (result * 0x100000000000162E4) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000 > 0) {\\r\\n                result = (result * 0x1000000000000B172) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000 > 0) {\\r\\n                result = (result * 0x100000000000058B9) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000 > 0) {\\r\\n                result = (result * 0x10000000000002C5D) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000 > 0) {\\r\\n                result = (result * 0x1000000000000162E) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000 > 0) {\\r\\n                result = (result * 0x10000000000000B17) >> 64;\\r\\n            }\\r\\n            if (x & 0x800 > 0) {\\r\\n                result = (result * 0x1000000000000058C) >> 64;\\r\\n            }\\r\\n            if (x & 0x400 > 0) {\\r\\n                result = (result * 0x100000000000002C6) >> 64;\\r\\n            }\\r\\n            if (x & 0x200 > 0) {\\r\\n                result = (result * 0x10000000000000163) >> 64;\\r\\n            }\\r\\n            if (x & 0x100 > 0) {\\r\\n                result = (result * 0x100000000000000B1) >> 64;\\r\\n            }\\r\\n            if (x & 0x80 > 0) {\\r\\n                result = (result * 0x10000000000000059) >> 64;\\r\\n            }\\r\\n            if (x & 0x40 > 0) {\\r\\n                result = (result * 0x1000000000000002C) >> 64;\\r\\n            }\\r\\n            if (x & 0x20 > 0) {\\r\\n                result = (result * 0x10000000000000016) >> 64;\\r\\n            }\\r\\n            if (x & 0x10 > 0) {\\r\\n                result = (result * 0x1000000000000000B) >> 64;\\r\\n            }\\r\\n            if (x & 0x8 > 0) {\\r\\n                result = (result * 0x10000000000000006) >> 64;\\r\\n            }\\r\\n            if (x & 0x4 > 0) {\\r\\n                result = (result * 0x10000000000000003) >> 64;\\r\\n            }\\r\\n            if (x & 0x2 > 0) {\\r\\n                result = (result * 0x10000000000000001) >> 64;\\r\\n            }\\r\\n            if (x & 0x1 > 0) {\\r\\n                result = (result * 0x10000000000000001) >> 64;\\r\\n            }\\r\\n\\r\\n            // We're doing two things at the same time:\\r\\n            //\\r\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\r\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\r\\n            //      rather than 192.\\r\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\r\\n            //\\r\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\r\\n            result *= SCALE;\\r\\n            result >>= (191 - (x >> 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\r\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\r\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\r\\n    /// @return msb The index of the most significant bit as an uint256.\\r\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\r\\n        if (x >= 2**128) {\\r\\n            x >>= 128;\\r\\n            msb += 128;\\r\\n        }\\r\\n        if (x >= 2**64) {\\r\\n            x >>= 64;\\r\\n            msb += 64;\\r\\n        }\\r\\n        if (x >= 2**32) {\\r\\n            x >>= 32;\\r\\n            msb += 32;\\r\\n        }\\r\\n        if (x >= 2**16) {\\r\\n            x >>= 16;\\r\\n            msb += 16;\\r\\n        }\\r\\n        if (x >= 2**8) {\\r\\n            x >>= 8;\\r\\n            msb += 8;\\r\\n        }\\r\\n        if (x >= 2**4) {\\r\\n            x >>= 4;\\r\\n            msb += 4;\\r\\n        }\\r\\n        if (x >= 2**2) {\\r\\n            x >>= 2;\\r\\n            msb += 2;\\r\\n        }\\r\\n        if (x >= 2**1) {\\r\\n            // No need to shift x any more.\\r\\n            msb += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\r\\n    ///\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - The denominator cannot be zero.\\r\\n    /// - The result must fit within uint256.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - This function does not work with fixed-point numbers.\\r\\n    ///\\r\\n    /// @param x The multiplicand as an uint256.\\r\\n    /// @param y The multiplier as an uint256.\\r\\n    /// @param denominator The divisor as an uint256.\\r\\n    /// @return result The result as an uint256.\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n        // variables such that product = prod1 * 2^256 + prod0.\\r\\n        uint256 prod0; // Least significant 256 bits of the product\\r\\n        uint256 prod1; // Most significant 256 bits of the product\\r\\n        assembly {\\r\\n            let mm := mulmod(x, y, not(0))\\r\\n            prod0 := mul(x, y)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        // Handle non-overflow cases, 256 by 256 division.\\r\\n        if (prod1 == 0) {\\r\\n            unchecked {\\r\\n                result = prod0 / denominator;\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n        if (prod1 >= denominator) {\\r\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\r\\n        }\\r\\n\\r\\n        ///////////////////////////////////////////////\\r\\n        // 512 by 256 division.\\r\\n        ///////////////////////////////////////////////\\r\\n\\r\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n        uint256 remainder;\\r\\n        assembly {\\r\\n            // Compute remainder using mulmod.\\r\\n            remainder := mulmod(x, y, denominator)\\r\\n\\r\\n            // Subtract 256 bit number from 512 bit number.\\r\\n            prod1 := sub(prod1, gt(remainder, prod0))\\r\\n            prod0 := sub(prod0, remainder)\\r\\n        }\\r\\n\\r\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n        // See https://cs.stackexchange.com/q/138556/92363.\\r\\n        unchecked {\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 lpotdod = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by lpotdod.\\r\\n                denominator := div(denominator, lpotdod)\\r\\n\\r\\n                // Divide [prod1 prod0] by lpotdod.\\r\\n                prod0 := div(prod0, lpotdod)\\r\\n\\r\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\r\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * lpotdod;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates floor(x*y\u00f71e18) with full precision.\\r\\n    ///\\r\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\r\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\r\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - The result must fit within uint256.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\r\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\r\\n    ///     1. x * y = type(uint256).max * SCALE\\r\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\r\\n    ///\\r\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        uint256 prod0;\\r\\n        uint256 prod1;\\r\\n        assembly {\\r\\n            let mm := mulmod(x, y, not(0))\\r\\n            prod0 := mul(x, y)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        if (prod1 >= SCALE) {\\r\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\r\\n        }\\r\\n\\r\\n        uint256 remainder;\\r\\n        uint256 roundUpUnit;\\r\\n        assembly {\\r\\n            remainder := mulmod(x, y, SCALE)\\r\\n            roundUpUnit := gt(remainder, 499999999999999999)\\r\\n        }\\r\\n\\r\\n        if (prod1 == 0) {\\r\\n            unchecked {\\r\\n                result = (prod0 / SCALE) + roundUpUnit;\\r\\n                return result;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            result := add(\\r\\n                mul(\\r\\n                    or(\\r\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\r\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\r\\n                    ),\\r\\n                    SCALE_INVERSE\\r\\n                ),\\r\\n                roundUpUnit\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\r\\n    ///\\r\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - None of the inputs can be type(int256).min.\\r\\n    /// - The result must fit within int256.\\r\\n    ///\\r\\n    /// @param x The multiplicand as an int256.\\r\\n    /// @param y The multiplier as an int256.\\r\\n    /// @param denominator The divisor as an int256.\\r\\n    /// @return result The result as an int256.\\r\\n    function mulDivSigned(\\r\\n        int256 x,\\r\\n        int256 y,\\r\\n        int256 denominator\\r\\n    ) internal pure returns (int256 result) {\\r\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\r\\n            revert PRBMath__MulDivSignedInputTooSmall();\\r\\n        }\\r\\n\\r\\n        // Get hold of the absolute values of x, y and the denominator.\\r\\n        uint256 ax;\\r\\n        uint256 ay;\\r\\n        uint256 ad;\\r\\n        unchecked {\\r\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\r\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\r\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\r\\n        }\\r\\n\\r\\n        // Compute the absolute value of (x*y)\u00f7denominator. The result must fit within int256.\\r\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\r\\n        if (rAbs > uint256(type(int256).max)) {\\r\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\r\\n        }\\r\\n\\r\\n        // Get the signs of x, y and the denominator.\\r\\n        uint256 sx;\\r\\n        uint256 sy;\\r\\n        uint256 sd;\\r\\n        assembly {\\r\\n            sx := sgt(x, sub(0, 1))\\r\\n            sy := sgt(y, sub(0, 1))\\r\\n            sd := sgt(denominator, sub(0, 1))\\r\\n        }\\r\\n\\r\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\r\\n        // If yes, the result should be negative.\\r\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the square root of x, rounding down.\\r\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - This function does not work with fixed-point numbers.\\r\\n    ///\\r\\n    /// @param x The uint256 number for which to calculate the square root.\\r\\n    /// @return result The result as an uint256.\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\r\\n        uint256 xAux = uint256(x);\\r\\n        result = 1;\\r\\n        if (xAux >= 0x100000000000000000000000000000000) {\\r\\n            xAux >>= 128;\\r\\n            result <<= 64;\\r\\n        }\\r\\n        if (xAux >= 0x10000000000000000) {\\r\\n            xAux >>= 64;\\r\\n            result <<= 32;\\r\\n        }\\r\\n        if (xAux >= 0x100000000) {\\r\\n            xAux >>= 32;\\r\\n            result <<= 16;\\r\\n        }\\r\\n        if (xAux >= 0x10000) {\\r\\n            xAux >>= 16;\\r\\n            result <<= 8;\\r\\n        }\\r\\n        if (xAux >= 0x100) {\\r\\n            xAux >>= 8;\\r\\n            result <<= 4;\\r\\n        }\\r\\n        if (xAux >= 0x10) {\\r\\n            xAux >>= 4;\\r\\n            result <<= 2;\\r\\n        }\\r\\n        if (xAux >= 0x4) {\\r\\n            result <<= 1;\\r\\n        }\\r\\n\\r\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\r\\n        unchecked {\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\r\\n            uint256 roundedDownResult = x / result;\\r\\n            return result >= roundedDownResult ? roundedDownResult : result;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 750\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lenControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaulLenders\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idRequest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimRequestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idRequest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewardsSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idLending\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestRewardsSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LControl\",\"outputs\":[{\"internalType\":\"contract ILendingControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idLending\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SetClaimRewardsRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idLending\",\"type\":\"uint256\"}],\"name\":\"calcInterestAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interesToPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfCalc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_interes\",\"type\":\"uint16\"}],\"name\":\"calcInterestForSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idLending\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitTimeForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaulLenders\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idLending\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reinvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"contract TokenInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeLender\",\"type\":\"uint256\"}],\"name\":\"updateFeeLenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePanoram\",\"type\":\"uint256\"}],\"name\":\"updateFeePanoram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LendingControl\",\"type\":\"address\"}],\"name\":\"updateLendControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LendingControl\",\"type\":\"address\"}],\"name\":\"updateLendingControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_Status\",\"type\":\"bool\"}],\"name\":\"updatePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPenalization\",\"type\":\"uint256\"}],\"name\":\"updatePercentagePenalization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenInfo\",\"type\":\"address\"}],\"name\":\"updateTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWaitTime\",\"type\":\"uint256\"}],\"name\":\"updateWaitTimeForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterestLending", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "750", "ConstructorArguments": "000000000000000000000000f106ec236ad8e887c8c227dc8d50bb64a84a409d00000000000000000000000037cf6455e29b7561ee088fe6d30924dbe28648cc000000000000000000000000248f7e88f465ecbd348e4b2272c1a94c06b8557f000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}