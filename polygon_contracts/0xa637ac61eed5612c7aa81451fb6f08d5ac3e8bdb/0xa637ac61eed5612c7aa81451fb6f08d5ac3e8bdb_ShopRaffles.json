{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: ShopRaffles.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\ncontract ShopRaffles is Ownable {\r\n    IERC20 headToken;\r\n    address toAddress;\r\n\r\n    enum RAFFLE_STATUS { ACCEPTING, FINISHED }\r\n\r\n    struct Raffle {\r\n        uint id;\r\n        uint256 entryCost;\r\n        uint endsOn;\r\n        string prizeName;\r\n        string prizeImage;\r\n        string prizeLink;\r\n        RAFFLE_STATUS status;\r\n        address[] participants;\r\n        address winner;\r\n        uint createdAt;\r\n    }\r\n\r\n    mapping (uint => Raffle) public raffles;\r\n    uint public raffleCount;\r\n\r\n    constructor(address _headTokenAddress, address _toAddress) {\r\n        raffleCount = 1;\r\n        headToken = IERC20(_headTokenAddress);\r\n        toAddress = _toAddress;\r\n    }\r\n\r\n    // Create a new raffle\r\n    function newRaffle(uint256 _entryCost, uint _endsOn, string memory _prizeName, string memory _prizeImage, string memory _prizeLink) public onlyOwner {\r\n        Raffle memory raffle;\r\n        raffle.id = raffleCount;\r\n        raffle.entryCost = _entryCost;\r\n        raffle.endsOn = _endsOn;\r\n        raffle.prizeName = _prizeName;\r\n        raffle.prizeImage = _prizeImage;\r\n        raffle.prizeLink = _prizeLink;\r\n        raffle.status = RAFFLE_STATUS.ACCEPTING;\r\n        raffle.createdAt = block.timestamp;\r\n        raffles[raffleCount] = raffle;\r\n        raffleCount++;\r\n    }\r\n\r\n    // Join a raffle\r\n    function joinRaffle(uint _raffleId) external {\r\n        require(raffles[_raffleId].status == RAFFLE_STATUS.ACCEPTING, \"Raffle not accepting entries\");\r\n        require(headToken.allowance(msg.sender, address(this)) >= raffles[_raffleId].entryCost  * 10 ** 18, \"Insufficient allowance\");\r\n        headToken.transferFrom(msg.sender, toAddress, raffles[_raffleId].entryCost  * 10 ** 18);\r\n        raffles[_raffleId].participants.push(msg.sender);\r\n    }\r\n\r\n    // Draw a winner for a raffle\r\n    function draw(uint _raffleId) external onlyOwner {\r\n        require(raffles[_raffleId].status == RAFFLE_STATUS.ACCEPTING, \"Raffle already drawn\");\r\n        require(raffles[_raffleId].participants.length > 0, \"Raffle has no participants\");\r\n        uint totalParticipants = raffles[_raffleId].participants.length;\r\n        uint winnerId = (block.number % totalParticipants);\r\n        raffles[_raffleId].winner = raffles[_raffleId].participants[winnerId];\r\n        raffles[_raffleId].status = RAFFLE_STATUS.FINISHED;\r\n    }\r\n\r\n    // To be used if raffle miscreated\r\n    function finishRaffle(uint _raffleId) external onlyOwner {\r\n        raffles[_raffleId].status = RAFFLE_STATUS.FINISHED;\r\n    }\r\n\r\n    // To be used to migrate legacty active raffles\r\n    function addParticipant(uint _raffleId, address participant) external onlyOwner {\r\n        require(raffles[_raffleId].status == RAFFLE_STATUS.ACCEPTING, \"Raffle not accepting entries\");\r\n        raffles[_raffleId].participants.push(participant);\r\n    }\r\n\r\n    // Get all raffles\r\n    function getRaffles() public view returns(Raffle[] memory) {\r\n        Raffle[] memory tempRaffles = new Raffle[](raffleCount);\r\n        for (uint i = 0; i < raffleCount; i++) {\r\n            Raffle storage tempRaffle = raffles[i];\r\n            tempRaffles[i] = tempRaffle;\r\n        }\r\n        return tempRaffles;\r\n    }\r\n\r\n    // Get one raffle\r\n    function getRaffle(uint _raffleId) public view returns(Raffle memory) {\r\n        return raffles[_raffleId];\r\n    }\r\n\r\n    // Change head token address\r\n    function setHeadTokenAddress(address _headTokenAddress) external onlyOwner {\r\n        headToken = IERC20(_headTokenAddress);\r\n    }\r\n\r\n    // Change transferTo address\r\n    function setToAddress(address _toAddress) external onlyOwner {\r\n        toAddress = _toAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_headTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"addParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"finishRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getRaffle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsOn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prizeImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prizeLink\",\"type\":\"string\"},{\"internalType\":\"enum ShopRaffles.RAFFLE_STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ShopRaffles.Raffle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsOn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prizeImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prizeLink\",\"type\":\"string\"},{\"internalType\":\"enum ShopRaffles.RAFFLE_STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ShopRaffles.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"joinRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endsOn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prizeImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prizeLink\",\"type\":\"string\"}],\"name\":\"newRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsOn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prizeImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prizeLink\",\"type\":\"string\"},{\"internalType\":\"enum ShopRaffles.RAFFLE_STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_headTokenAddress\",\"type\":\"address\"}],\"name\":\"setHeadTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"setToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShopRaffles", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000087ca74cebc8289bc9c6121778805a44f48dcdfab000000000000000000000000db6c92a9ccaa27b394f4f496557c319dc22ebc67", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc975fbd55e08ea0c86559ab37c59167ecef4cc51be1f4cb0c487bd637e9f48d"}