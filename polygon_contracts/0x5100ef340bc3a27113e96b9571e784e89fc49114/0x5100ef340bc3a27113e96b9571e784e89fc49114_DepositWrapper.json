{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/dispatcher/IDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/external-positions/IExternalPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable()\\n        external\\n        view\\n        returns (bool sharesAreFreelyTransferable_);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IMigratableVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund-deployer/IFundDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund/comptroller/ComptrollerLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../../../../persistent/external-positions/IExternalPosition.sol\\\";\\nimport \\\"../../../extensions/IExtension.sol\\\";\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/GasRelayRecipientMixin.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/IGasRelayPaymaster.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/IGasRelayPaymasterDepositor.sol\\\";\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\nimport \\\"../../../utils/beacon-proxy/IBeaconProxyFactory.sol\\\";\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\n\\n/// @title ComptrollerLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The core logic library shared by all funds\\ncontract ComptrollerLib is IComptroller, IGasRelayPaymasterDepositor, GasRelayRecipientMixin {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    event AutoProtocolFeeSharesBuybackSet(bool autoProtocolFeeSharesBuyback);\\n\\n    event BuyBackMaxProtocolFeeSharesFailed(\\n        bytes indexed failureReturnData,\\n        uint256 sharesAmount,\\n        uint256 buybackValueInMln,\\n        uint256 gav\\n    );\\n    event DeactivateFeeManagerFailed();\\n\\n    event GasRelayPaymasterSet(address gasRelayPaymaster);\\n\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\n\\n    event PayProtocolFeeDuringDestructFailed();\\n\\n    event PreRedeemSharesHookFailed(\\n        bytes indexed failureReturnData,\\n        address indexed redeemer,\\n        uint256 sharesAmount\\n    );\\n\\n    event RedeemSharesInKindCalcGavFailed();\\n\\n    event SharesBought(\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 sharesIssued,\\n        uint256 sharesReceived\\n    );\\n\\n    event SharesRedeemed(\\n        address indexed redeemer,\\n        address indexed recipient,\\n        uint256 sharesAmount,\\n        address[] receivedAssets,\\n        uint256[] receivedAssetAmounts\\n    );\\n\\n    event VaultProxySet(address vaultProxy);\\n\\n    // Constants and immutables - shared by all proxies\\n    uint256 private constant ONE_HUNDRED_PERCENT = 10000;\\n    uint256 private constant SHARES_UNIT = 10**18;\\n    address private constant SPECIFIC_ASSET_REDEMPTION_DUMMY_FORFEIT_ADDRESS =\\n        0x000000000000000000000000000000000000aaaa;\\n    address private immutable DISPATCHER;\\n    address private immutable EXTERNAL_POSITION_MANAGER;\\n    address private immutable FUND_DEPLOYER;\\n    address private immutable FEE_MANAGER;\\n    address private immutable INTEGRATION_MANAGER;\\n    address private immutable MLN_TOKEN;\\n    address private immutable POLICY_MANAGER;\\n    address private immutable PROTOCOL_FEE_RESERVE;\\n    address private immutable VALUE_INTERPRETER;\\n    address private immutable WETH_TOKEN;\\n\\n    // Pseudo-constants (can only be set once)\\n\\n    address internal denominationAsset;\\n    address internal vaultProxy;\\n    // True only for the one non-proxy\\n    bool internal isLib;\\n\\n    // Storage\\n\\n    // Attempts to buy back protocol fee shares immediately after collection\\n    bool internal autoProtocolFeeSharesBuyback;\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\n    bool internal permissionedVaultActionAllowed;\\n    // A mutex to protect against reentrancy\\n    bool internal reentranceLocked;\\n    // A timelock after the last time shares were bought for an account\\n    // that must expire before that account transfers or redeems their shares\\n    uint256 internal sharesActionTimelock;\\n    mapping(address => uint256) internal acctToLastSharesBoughtTimestamp;\\n    // The contract which manages paying gas relayers\\n    address private gasRelayPaymaster;\\n\\n    ///////////////\\n    // MODIFIERS //\\n    ///////////////\\n\\n    modifier allowsPermissionedVaultAction() {\\n        __assertPermissionedVaultActionNotAllowed();\\n        permissionedVaultActionAllowed = true;\\n        _;\\n        permissionedVaultActionAllowed = false;\\n    }\\n\\n    modifier locksReentrance() {\\n        __assertNotReentranceLocked();\\n        reentranceLocked = true;\\n        _;\\n        reentranceLocked = false;\\n    }\\n\\n    modifier onlyFundDeployer() {\\n        __assertIsFundDeployer();\\n        _;\\n    }\\n    modifier onlyGasRelayPaymaster() {\\n        __assertIsGasRelayPaymaster();\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        __assertIsOwner(__msgSender());\\n        _;\\n    }\\n\\n    modifier onlyOwnerNotRelayable() {\\n        __assertIsOwner(msg.sender);\\n        _;\\n    }\\n\\n    // ASSERTION HELPERS\\n\\n    // Modifiers are inefficient in terms of contract size,\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\n\\n    function __assertIsFundDeployer() private view {\\n        require(msg.sender == getFundDeployer(), \\\"Only FundDeployer callable\\\");\\n    }\\n\\n    function __assertIsGasRelayPaymaster() private view {\\n        require(msg.sender == getGasRelayPaymaster(), \\\"Only Gas Relay Paymaster callable\\\");\\n    }\\n\\n    function __assertIsOwner(address _who) private view {\\n        require(_who == IVault(getVaultProxy()).getOwner(), \\\"Only fund owner callable\\\");\\n    }\\n\\n    function __assertNotReentranceLocked() private view {\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\n    }\\n\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\n    }\\n\\n    function __assertSharesActionNotTimelocked(address _vaultProxy, address _account)\\n        private\\n        view\\n    {\\n        uint256 lastSharesBoughtTimestamp = getLastSharesBoughtTimestampForAccount(_account);\\n\\n        require(\\n            lastSharesBoughtTimestamp == 0 ||\\n                block.timestamp.sub(lastSharesBoughtTimestamp) >= getSharesActionTimelock() ||\\n                __hasPendingMigrationOrReconfiguration(_vaultProxy),\\n            \\\"Shares action timelocked\\\"\\n        );\\n    }\\n\\n    constructor(\\n        address _dispatcher,\\n        address _protocolFeeReserve,\\n        address _fundDeployer,\\n        address _valueInterpreter,\\n        address _externalPositionManager,\\n        address _feeManager,\\n        address _integrationManager,\\n        address _policyManager,\\n        address _gasRelayPaymasterFactory,\\n        address _mlnToken,\\n        address _wethToken\\n    ) public GasRelayRecipientMixin(_gasRelayPaymasterFactory) {\\n        DISPATCHER = _dispatcher;\\n        EXTERNAL_POSITION_MANAGER = _externalPositionManager;\\n        FEE_MANAGER = _feeManager;\\n        FUND_DEPLOYER = _fundDeployer;\\n        INTEGRATION_MANAGER = _integrationManager;\\n        MLN_TOKEN = _mlnToken;\\n        POLICY_MANAGER = _policyManager;\\n        PROTOCOL_FEE_RESERVE = _protocolFeeReserve;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n        WETH_TOKEN = _wethToken;\\n        isLib = true;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Calls a specified action on an Extension\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\n    /// @param _callArgs The encoded data for the call\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\n    /// during calls originating from this function.\\n    function callOnExtension(\\n        address _extension,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override locksReentrance allowsPermissionedVaultAction {\\n        require(\\n            _extension == getFeeManager() ||\\n                _extension == getIntegrationManager() ||\\n                _extension == getExternalPositionManager(),\\n            \\\"callOnExtension: _extension invalid\\\"\\n        );\\n\\n        IExtension(_extension).receiveCallFromComptroller(__msgSender(), _actionId, _callArgs);\\n    }\\n\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\n    /// @param _contract The contract to call\\n    /// @param _selector The selector to call\\n    /// @param _encodedArgs The encoded arguments for the call\\n    /// @return returnData_ The data returned by the call\\n    function vaultCallOnContract(\\n        address _contract,\\n        bytes4 _selector,\\n        bytes calldata _encodedArgs\\n    ) external onlyOwner returns (bytes memory returnData_) {\\n        require(\\n            IFundDeployer(getFundDeployer()).isAllowedVaultCall(\\n                _contract,\\n                _selector,\\n                keccak256(_encodedArgs)\\n            ),\\n            \\\"vaultCallOnContract: Not allowed\\\"\\n        );\\n\\n        return\\n            IVault(getVaultProxy()).callOnContract(\\n                _contract,\\n                abi.encodePacked(_selector, _encodedArgs)\\n            );\\n    }\\n\\n    /// @dev Helper to check if a VaultProxy has a pending migration or reconfiguration request\\n    function __hasPendingMigrationOrReconfiguration(address _vaultProxy)\\n        private\\n        view\\n        returns (bool hasPendingMigrationOrReconfiguration)\\n    {\\n        return\\n            IDispatcher(getDispatcher()).hasMigrationRequest(_vaultProxy) ||\\n            IFundDeployer(getFundDeployer()).hasReconfigurationRequest(_vaultProxy);\\n    }\\n\\n    //////////////////\\n    // PROTOCOL FEE //\\n    //////////////////\\n\\n    /// @notice Buys back shares collected as protocol fee at a discounted shares price, using MLN\\n    /// @param _sharesAmount The amount of shares to buy back\\n    function buyBackProtocolFeeShares(uint256 _sharesAmount) external {\\n        address vaultProxyCopy = vaultProxy;\\n        require(\\n            IVault(vaultProxyCopy).canManageAssets(__msgSender()),\\n            \\\"buyBackProtocolFeeShares: Unauthorized\\\"\\n        );\\n\\n        uint256 gav = calcGav();\\n\\n        IVault(vaultProxyCopy).buyBackProtocolFeeShares(\\n            _sharesAmount,\\n            __getBuybackValueInMln(vaultProxyCopy, _sharesAmount, gav),\\n            gav\\n        );\\n    }\\n\\n    /// @notice Sets whether to attempt to buyback protocol fee shares immediately when collected\\n    /// @param _nextAutoProtocolFeeSharesBuyback True if protocol fee shares should be attempted\\n    /// to be bought back immediately when collected\\n    function setAutoProtocolFeeSharesBuyback(bool _nextAutoProtocolFeeSharesBuyback)\\n        external\\n        onlyOwner\\n    {\\n        autoProtocolFeeSharesBuyback = _nextAutoProtocolFeeSharesBuyback;\\n\\n        emit AutoProtocolFeeSharesBuybackSet(_nextAutoProtocolFeeSharesBuyback);\\n    }\\n\\n    /// @dev Helper to buyback the max available protocol fee shares, during an auto-buyback\\n    function __buyBackMaxProtocolFeeShares(address _vaultProxy, uint256 _gav) private {\\n        uint256 sharesAmount = ERC20(_vaultProxy).balanceOf(getProtocolFeeReserve());\\n        uint256 buybackValueInMln = __getBuybackValueInMln(_vaultProxy, sharesAmount, _gav);\\n\\n        try\\n            IVault(_vaultProxy).buyBackProtocolFeeShares(sharesAmount, buybackValueInMln, _gav)\\n        {} catch (bytes memory reason) {\\n            emit BuyBackMaxProtocolFeeSharesFailed(reason, sharesAmount, buybackValueInMln, _gav);\\n        }\\n    }\\n\\n    /// @dev Helper to buyback the max available protocol fee shares\\n    function __getBuybackValueInMln(\\n        address _vaultProxy,\\n        uint256 _sharesAmount,\\n        uint256 _gav\\n    ) private returns (uint256 buybackValueInMln_) {\\n        address denominationAssetCopy = getDenominationAsset();\\n\\n        uint256 grossShareValue = __calcGrossShareValue(\\n            _gav,\\n            ERC20(_vaultProxy).totalSupply(),\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\n        );\\n\\n        uint256 buybackValueInDenominationAsset = grossShareValue.mul(_sharesAmount).div(\\n            SHARES_UNIT\\n        );\\n\\n        return\\n            IValueInterpreter(getValueInterpreter()).calcCanonicalAssetValue(\\n                denominationAssetCopy,\\n                buybackValueInDenominationAsset,\\n                getMlnToken()\\n            );\\n    }\\n\\n    ////////////////////////////////\\n    // PERMISSIONED VAULT ACTIONS //\\n    ////////////////////////////////\\n\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\n    /// @param _actionData The call data for the action to perform\\n    function permissionedVaultAction(IVault.VaultAction _action, bytes calldata _actionData)\\n        external\\n        override\\n    {\\n        __assertPermissionedVaultAction(msg.sender, _action);\\n\\n        // Validate action as needed\\n        if (_action == IVault.VaultAction.RemoveTrackedAsset) {\\n            require(\\n                abi.decode(_actionData, (address)) != getDenominationAsset(),\\n                \\\"permissionedVaultAction: Cannot untrack denomination asset\\\"\\n            );\\n        }\\n\\n        IVault(getVaultProxy()).receiveValidatedVaultAction(_action, _actionData);\\n    }\\n\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction.\\n    /// Uses this pattern rather than multiple `require` statements to save on contract size.\\n    function __assertPermissionedVaultAction(address _caller, IVault.VaultAction _action)\\n        private\\n        view\\n    {\\n        bool validAction;\\n        if (permissionedVaultActionAllowed) {\\n            // Calls are roughly ordered by likely frequency\\n            if (_caller == getIntegrationManager()) {\\n                if (\\n                    _action == IVault.VaultAction.AddTrackedAsset ||\\n                    _action == IVault.VaultAction.RemoveTrackedAsset ||\\n                    _action == IVault.VaultAction.WithdrawAssetTo ||\\n                    _action == IVault.VaultAction.ApproveAssetSpender\\n                ) {\\n                    validAction = true;\\n                }\\n            } else if (_caller == getFeeManager()) {\\n                if (\\n                    _action == IVault.VaultAction.MintShares ||\\n                    _action == IVault.VaultAction.BurnShares ||\\n                    _action == IVault.VaultAction.TransferShares\\n                ) {\\n                    validAction = true;\\n                }\\n            } else if (_caller == getExternalPositionManager()) {\\n                if (\\n                    _action == IVault.VaultAction.CallOnExternalPosition ||\\n                    _action == IVault.VaultAction.AddExternalPosition ||\\n                    _action == IVault.VaultAction.RemoveExternalPosition\\n                ) {\\n                    validAction = true;\\n                }\\n            }\\n        }\\n\\n        require(validAction, \\\"__assertPermissionedVaultAction: Action not allowed\\\");\\n    }\\n\\n    ///////////////\\n    // LIFECYCLE //\\n    ///////////////\\n\\n    // Ordered by execution in the lifecycle\\n\\n    /// @notice Initializes a fund with its core config\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\n    /// (buying or selling shares) by the same user\\n    /// @dev Pseudo-constructor per proxy.\\n    /// No need to assert access because this is called atomically on deployment,\\n    /// and once it's called, it cannot be called again.\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\n        require(getDenominationAsset() == address(0), \\\"init: Already initialized\\\");\\n        require(\\n            IValueInterpreter(getValueInterpreter()).isSupportedPrimitiveAsset(_denominationAsset),\\n            \\\"init: Bad denomination asset\\\"\\n        );\\n\\n        denominationAsset = _denominationAsset;\\n        sharesActionTimelock = _sharesActionTimelock;\\n    }\\n\\n    /// @notice Sets the VaultProxy\\n    /// @param _vaultProxy The VaultProxy contract\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Called atomically with init(), but after ComptrollerProxy has been deployed.\\n    function setVaultProxy(address _vaultProxy) external override onlyFundDeployer {\\n        vaultProxy = _vaultProxy;\\n\\n        emit VaultProxySet(_vaultProxy);\\n    }\\n\\n    /// @notice Runs atomic logic after a ComptrollerProxy has become its vaultProxy's `accessor`\\n    /// @param _isMigration True if a migrated fund is being activated\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    function activate(bool _isMigration) external override onlyFundDeployer {\\n        address vaultProxyCopy = getVaultProxy();\\n\\n        if (_isMigration) {\\n            // Distribute any shares in the VaultProxy to the fund owner.\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\n            // to payout fee shares owed during migration, these shares are not lost.\\n            uint256 sharesDue = ERC20(vaultProxyCopy).balanceOf(vaultProxyCopy);\\n            if (sharesDue > 0) {\\n                IVault(vaultProxyCopy).transferShares(\\n                    vaultProxyCopy,\\n                    IVault(vaultProxyCopy).getOwner(),\\n                    sharesDue\\n                );\\n\\n                emit MigratedSharesDuePaid(sharesDue);\\n            }\\n        }\\n\\n        IVault(vaultProxyCopy).addTrackedAsset(getDenominationAsset());\\n\\n        // Activate extensions\\n        IExtension(getFeeManager()).activateForFund(_isMigration);\\n        IExtension(getPolicyManager()).activateForFund(_isMigration);\\n    }\\n\\n    /// @notice Wind down and destroy a ComptrollerProxy that is active\\n    /// @param _deactivateFeeManagerGasLimit The amount of gas to forward to deactivate the FeeManager\\n    /// @param _payProtocolFeeGasLimit The amount of gas to forward to pay the protocol fee\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Uses the try/catch pattern throughout out of an abundance of caution for the function's success.\\n    /// All external calls must use limited forwarded gas to ensure that a migration to another release\\n    /// does not get bricked by logic that consumes too much gas for the block limit.\\n    function destructActivated(\\n        uint256 _deactivateFeeManagerGasLimit,\\n        uint256 _payProtocolFeeGasLimit\\n    ) external override onlyFundDeployer allowsPermissionedVaultAction {\\n        // Forwarding limited gas here also protects fee recipients by guaranteeing that fee payout logic\\n        // will run in the next function call\\n        try IVault(getVaultProxy()).payProtocolFee{gas: _payProtocolFeeGasLimit}() {} catch {\\n            emit PayProtocolFeeDuringDestructFailed();\\n        }\\n\\n        // Do not attempt to auto-buyback protocol fee shares in this case,\\n        // as the call is gav-dependent and can consume too much gas\\n\\n        // Deactivate extensions only as-necessary\\n\\n        // Pays out shares outstanding for fees\\n        try\\n            IExtension(getFeeManager()).deactivateForFund{gas: _deactivateFeeManagerGasLimit}()\\n        {} catch {\\n            emit DeactivateFeeManagerFailed();\\n        }\\n\\n        __selfDestruct();\\n    }\\n\\n    /// @notice Destroy a ComptrollerProxy that has not been activated\\n    function destructUnactivated() external override onlyFundDeployer {\\n        __selfDestruct();\\n    }\\n\\n    /// @dev Helper to self-destruct the contract.\\n    /// There should never be ETH in the ComptrollerLib,\\n    /// so no need to waste gas to get the fund owner\\n    function __selfDestruct() private {\\n        // Not necessary, but failsafe to protect the lib against selfdestruct\\n        require(!isLib, \\\"__selfDestruct: Only delegate callable\\\");\\n\\n        selfdestruct(payable(address(this)));\\n    }\\n\\n    ////////////////\\n    // ACCOUNTING //\\n    ////////////////\\n\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\n    /// @return gav_ The fund GAV\\n    function calcGav() public override returns (uint256 gav_) {\\n        address vaultProxyAddress = getVaultProxy();\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\n        address[] memory externalPositions = IVault(vaultProxyAddress)\\n            .getActiveExternalPositions();\\n\\n        if (assets.length == 0 && externalPositions.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256[] memory balances = new uint256[](assets.length);\\n        for (uint256 i; i < assets.length; i++) {\\n            balances[i] = ERC20(assets[i]).balanceOf(vaultProxyAddress);\\n        }\\n\\n        gav_ = IValueInterpreter(getValueInterpreter()).calcCanonicalAssetsTotalValue(\\n            assets,\\n            balances,\\n            getDenominationAsset()\\n        );\\n\\n        if (externalPositions.length > 0) {\\n            for (uint256 i; i < externalPositions.length; i++) {\\n                uint256 externalPositionValue = __calcExternalPositionValue(externalPositions[i]);\\n\\n                gav_ = gav_.add(externalPositionValue);\\n            }\\n        }\\n\\n        return gav_;\\n    }\\n\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\n    /// @dev Does not account for any fees outstanding.\\n    function calcGrossShareValue() external override returns (uint256 grossShareValue_) {\\n        uint256 gav = calcGav();\\n\\n        grossShareValue_ = __calcGrossShareValue(\\n            gav,\\n            ERC20(getVaultProxy()).totalSupply(),\\n            10**uint256(ERC20(getDenominationAsset()).decimals())\\n        );\\n\\n        return grossShareValue_;\\n    }\\n\\n    // @dev Helper for calculating a external position value. Prevents from stack too deep\\n    function __calcExternalPositionValue(address _externalPosition)\\n        private\\n        returns (uint256 value_)\\n    {\\n        (address[] memory managedAssets, uint256[] memory managedAmounts) = IExternalPosition(\\n            _externalPosition\\n        ).getManagedAssets();\\n\\n        uint256 managedValue = IValueInterpreter(getValueInterpreter())\\n            .calcCanonicalAssetsTotalValue(managedAssets, managedAmounts, getDenominationAsset());\\n\\n        (address[] memory debtAssets, uint256[] memory debtAmounts) = IExternalPosition(\\n            _externalPosition\\n        ).getDebtAssets();\\n\\n        uint256 debtValue = IValueInterpreter(getValueInterpreter()).calcCanonicalAssetsTotalValue(\\n            debtAssets,\\n            debtAmounts,\\n            getDenominationAsset()\\n        );\\n\\n        if (managedValue > debtValue) {\\n            value_ = managedValue.sub(debtValue);\\n        }\\n\\n        return value_;\\n    }\\n\\n    /// @dev Helper for calculating the gross share value\\n    function __calcGrossShareValue(\\n        uint256 _gav,\\n        uint256 _sharesSupply,\\n        uint256 _denominationAssetUnit\\n    ) private pure returns (uint256 grossShareValue_) {\\n        if (_sharesSupply == 0) {\\n            return _denominationAssetUnit;\\n        }\\n\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\n    }\\n\\n    ///////////////////\\n    // PARTICIPATION //\\n    ///////////////////\\n\\n    // BUY SHARES\\n\\n    /// @notice Buys shares on behalf of another user\\n    /// @param _buyer The account on behalf of whom to buy shares\\n    /// @param _investmentAmount The amount of the fund's denomination asset with which to buy shares\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy\\n    /// @return sharesReceived_ The actual amount of shares received\\n    /// @dev This function is freely callable if there is no sharesActionTimelock set, but it is\\n    /// limited to a list of trusted callers otherwise, in order to prevent a griefing attack\\n    /// where the caller buys shares for a _buyer, thereby resetting their lastSharesBought value.\\n    function buySharesOnBehalf(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity\\n    ) external returns (uint256 sharesReceived_) {\\n        bool hasSharesActionTimelock = getSharesActionTimelock() > 0;\\n        address canonicalSender = __msgSender();\\n\\n        require(\\n            !hasSharesActionTimelock ||\\n                IFundDeployer(getFundDeployer()).isAllowedBuySharesOnBehalfCaller(canonicalSender),\\n            \\\"buySharesOnBehalf: Unauthorized\\\"\\n        );\\n\\n        return\\n            __buyShares(\\n                _buyer,\\n                _investmentAmount,\\n                _minSharesQuantity,\\n                hasSharesActionTimelock,\\n                canonicalSender\\n            );\\n    }\\n\\n    /// @notice Buys shares\\n    /// @param _investmentAmount The amount of the fund's denomination asset\\n    /// with which to buy shares\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy\\n    /// @return sharesReceived_ The actual amount of shares received\\n    function buyShares(uint256 _investmentAmount, uint256 _minSharesQuantity)\\n        external\\n        returns (uint256 sharesReceived_)\\n    {\\n        bool hasSharesActionTimelock = getSharesActionTimelock() > 0;\\n        address canonicalSender = __msgSender();\\n\\n        return\\n            __buyShares(\\n                canonicalSender,\\n                _investmentAmount,\\n                _minSharesQuantity,\\n                hasSharesActionTimelock,\\n                canonicalSender\\n            );\\n    }\\n\\n    /// @dev Helper for buy shares logic\\n    function __buyShares(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity,\\n        bool _hasSharesActionTimelock,\\n        address _canonicalSender\\n    ) private locksReentrance allowsPermissionedVaultAction returns (uint256 sharesReceived_) {\\n        // Enforcing a _minSharesQuantity also validates `_investmentAmount > 0`\\n        // and guarantees the function cannot succeed while minting 0 shares\\n        require(_minSharesQuantity > 0, \\\"__buyShares: _minSharesQuantity must be >0\\\");\\n\\n        address vaultProxyCopy = getVaultProxy();\\n        require(\\n            !_hasSharesActionTimelock || !__hasPendingMigrationOrReconfiguration(vaultProxyCopy),\\n            \\\"__buyShares: Pending migration or reconfiguration\\\"\\n        );\\n\\n        uint256 gav = calcGav();\\n\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares.\\n        // Fees implementing this hook should be aware that\\n        // it might be the case that _investmentAmount != actualInvestmentAmount,\\n        // if the denomination asset charges a transfer fee, for example.\\n        __preBuySharesHook(_buyer, _investmentAmount, gav);\\n\\n        // Pay the protocol fee after running other fees, but before minting new shares\\n        IVault(vaultProxyCopy).payProtocolFee();\\n        if (doesAutoProtocolFeeSharesBuyback()) {\\n            __buyBackMaxProtocolFeeShares(vaultProxyCopy, gav);\\n        }\\n\\n        // Transfer the investment asset to the fund.\\n        // Does not follow the checks-effects-interactions pattern, but it is necessary to\\n        // do this delta balance calculation before calculating shares to mint.\\n        uint256 receivedInvestmentAmount = __transferFromWithReceivedAmount(\\n            getDenominationAsset(),\\n            _canonicalSender,\\n            vaultProxyCopy,\\n            _investmentAmount\\n        );\\n\\n        // Calculate the amount of shares to issue with the investment amount\\n        uint256 sharePrice = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxyCopy).totalSupply(),\\n            10**uint256(ERC20(getDenominationAsset()).decimals())\\n        );\\n        uint256 sharesIssued = receivedInvestmentAmount.mul(SHARES_UNIT).div(sharePrice);\\n\\n        // Mint shares to the buyer\\n        uint256 prevBuyerShares = ERC20(vaultProxyCopy).balanceOf(_buyer);\\n        IVault(vaultProxyCopy).mintShares(_buyer, sharesIssued);\\n\\n        // Gives Extensions a chance to run logic after shares are issued\\n        __postBuySharesHook(_buyer, receivedInvestmentAmount, sharesIssued, gav);\\n\\n        // The number of actual shares received may differ from shares issued due to\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\n        sharesReceived_ = ERC20(vaultProxyCopy).balanceOf(_buyer).sub(prevBuyerShares);\\n        require(\\n            sharesReceived_ >= _minSharesQuantity,\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\n        );\\n\\n        if (_hasSharesActionTimelock) {\\n            acctToLastSharesBoughtTimestamp[_buyer] = block.timestamp;\\n        }\\n\\n        emit SharesBought(_buyer, receivedInvestmentAmount, sharesIssued, sharesReceived_);\\n\\n        return sharesReceived_;\\n    }\\n\\n    /// @dev Helper for Extension actions immediately prior to issuing shares\\n    function __preBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _gav\\n    ) private {\\n        IFeeManager(getFeeManager()).invokeHook(\\n            IFeeManager.FeeHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\n    /// the GAV value for the current policies as there is for the fees.\\n    function __postBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _sharesIssued,\\n        uint256 _preBuySharesGav\\n    ) private {\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\n        IFeeManager(getFeeManager()).invokeHook(\\n            IFeeManager.FeeHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\n            gav\\n        );\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\n        );\\n    }\\n\\n    /// @dev Helper to execute ERC20.transferFrom() while calculating the actual amount received\\n    function __transferFromWithReceivedAmount(\\n        address _asset,\\n        address _sender,\\n        address _recipient,\\n        uint256 _transferAmount\\n    ) private returns (uint256 receivedAmount_) {\\n        uint256 preTransferRecipientBalance = ERC20(_asset).balanceOf(_recipient);\\n\\n        ERC20(_asset).safeTransferFrom(_sender, _recipient, _transferAmount);\\n\\n        return ERC20(_asset).balanceOf(_recipient).sub(preTransferRecipientBalance);\\n    }\\n\\n    // REDEEM SHARES\\n\\n    /// @notice Redeems a specified amount of the sender's shares for specified asset proportions\\n    /// @param _recipient The account that will receive the specified assets\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _payoutAssets The assets to payout\\n    /// @param _payoutAssetPercentages The percentage of the owed amount to pay out in each asset\\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\\n    /// _payoutAssetPercentages must total exactly 100%. In order to specify less and forgo the\\n    /// remaining gav owed on the redeemed shares, pass in address(0) with the percentage to forego.\\n    /// Unlike redeemSharesInKind(), this function allows policies to run and prevent redemption.\\n    function redeemSharesForSpecificAssets(\\n        address _recipient,\\n        uint256 _sharesQuantity,\\n        address[] calldata _payoutAssets,\\n        uint256[] calldata _payoutAssetPercentages\\n    ) external locksReentrance returns (uint256[] memory payoutAmounts_) {\\n        address canonicalSender = __msgSender();\\n        require(\\n            _payoutAssets.length == _payoutAssetPercentages.length,\\n            \\\"redeemSharesForSpecificAssets: Unequal arrays\\\"\\n        );\\n        require(\\n            _payoutAssets.isUniqueSet(),\\n            \\\"redeemSharesForSpecificAssets: Duplicate payout asset\\\"\\n        );\\n\\n        uint256 gav = calcGav();\\n\\n        IVault vaultProxyContract = IVault(getVaultProxy());\\n        (uint256 sharesToRedeem, uint256 sharesSupply) = __redeemSharesSetup(\\n            vaultProxyContract,\\n            canonicalSender,\\n            _sharesQuantity,\\n            true,\\n            gav\\n        );\\n\\n        payoutAmounts_ = __payoutSpecifiedAssetPercentages(\\n            vaultProxyContract,\\n            _recipient,\\n            _payoutAssets,\\n            _payoutAssetPercentages,\\n            gav.mul(sharesToRedeem).div(sharesSupply)\\n        );\\n\\n        // Run post-redemption in order to have access to the payoutAmounts\\n        __postRedeemSharesForSpecificAssetsHook(\\n            canonicalSender,\\n            _recipient,\\n            sharesToRedeem,\\n            _payoutAssets,\\n            payoutAmounts_,\\n            gav\\n        );\\n\\n        emit SharesRedeemed(\\n            canonicalSender,\\n            _recipient,\\n            sharesToRedeem,\\n            _payoutAssets,\\n            payoutAmounts_\\n        );\\n\\n        return payoutAmounts_;\\n    }\\n\\n    /// @notice Redeems a specified amount of the sender's shares\\n    /// for a proportionate slice of the vault's assets\\n    /// @param _recipient The account that will receive the proportionate slice of assets\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\n    /// @param _assetsToSkip Tracked assets to forfeit\\n    /// @return payoutAssets_ The assets paid out to the _recipient\\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\\n    /// Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\n    /// only be exercised if a bad asset is causing redemption to fail.\\n    /// This function should never fail without a way to bypass the failure, which is assured\\n    /// through two mechanisms:\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\n    /// can never block redemption.\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\n    /// by explicitly specifying _assetsToSkip.\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\n    /// of the timelock period on shares actions that must be respected.\\n    function redeemSharesInKind(\\n        address _recipient,\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets,\\n        address[] calldata _assetsToSkip\\n    )\\n        external\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {\\n        address canonicalSender = __msgSender();\\n        require(\\n            _additionalAssets.isUniqueSet(),\\n            \\\"redeemSharesInKind: _additionalAssets contains duplicates\\\"\\n        );\\n        require(\\n            _assetsToSkip.isUniqueSet(),\\n            \\\"redeemSharesInKind: _assetsToSkip contains duplicates\\\"\\n        );\\n\\n        // Parse the payout assets given optional params to add or skip assets.\\n        // Note that there is no validation that the _additionalAssets are known assets to\\n        // the protocol. This means that the redeemer could specify a malicious asset,\\n        // but since all state-changing, user-callable functions on this contract share the\\n        // non-reentrant modifier, there is nowhere to perform a reentrancy attack.\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\n            IVault(vaultProxy).getTrackedAssets(),\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n\\n        // If protocol fee shares will be auto-bought back, attempt to calculate GAV to pass into fees,\\n        // as we will require GAV later during the buyback.\\n        uint256 gavOrZero;\\n        if (doesAutoProtocolFeeSharesBuyback()) {\\n            // Since GAV calculation can fail with a revering price or a no-longer-supported asset,\\n            // we must try/catch GAV calculation to ensure that in-kind redemption can still succeed\\n            try this.calcGav() returns (uint256 gav) {\\n                gavOrZero = gav;\\n            } catch {\\n                emit RedeemSharesInKindCalcGavFailed();\\n            }\\n        }\\n\\n        (uint256 sharesToRedeem, uint256 sharesSupply) = __redeemSharesSetup(\\n            IVault(vaultProxy),\\n            canonicalSender,\\n            _sharesQuantity,\\n            false,\\n            gavOrZero\\n        );\\n\\n        // Calculate and transfer payout asset amounts due to _recipient\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\n            payoutAmounts_[i] = ERC20(payoutAssets_[i])\\n                .balanceOf(vaultProxy)\\n                .mul(sharesToRedeem)\\n                .div(sharesSupply);\\n\\n            // Transfer payout asset to _recipient\\n            if (payoutAmounts_[i] > 0) {\\n                IVault(vaultProxy).withdrawAssetTo(\\n                    payoutAssets_[i],\\n                    _recipient,\\n                    payoutAmounts_[i]\\n                );\\n            }\\n        }\\n\\n        emit SharesRedeemed(\\n            canonicalSender,\\n            _recipient,\\n            sharesToRedeem,\\n            payoutAssets_,\\n            payoutAmounts_\\n        );\\n\\n        return (payoutAssets_, payoutAmounts_);\\n    }\\n\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\n    /// All input arrays are assumed to be unique.\\n    function __parseRedemptionPayoutAssets(\\n        address[] memory _trackedAssets,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) private pure returns (address[] memory payoutAssets_) {\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\n        if (_additionalAssets.length == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\n        uint256 additionalItemsCount;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\n                indexesToAdd[i] = true;\\n                additionalItemsCount++;\\n            }\\n        }\\n        if (additionalItemsCount == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\n        }\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (indexesToAdd[i]) {\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\n                payoutAssetsIndex++;\\n            }\\n        }\\n\\n        return payoutAssets_;\\n    }\\n\\n    /// @dev Helper to payout specified asset percentages during redeemSharesForSpecificAssets()\\n    function __payoutSpecifiedAssetPercentages(\\n        IVault vaultProxyContract,\\n        address _recipient,\\n        address[] calldata _payoutAssets,\\n        uint256[] calldata _payoutAssetPercentages,\\n        uint256 _owedGav\\n    ) private returns (uint256[] memory payoutAmounts_) {\\n        address denominationAssetCopy = getDenominationAsset();\\n        uint256 percentagesTotal;\\n        payoutAmounts_ = new uint256[](_payoutAssets.length);\\n        for (uint256 i; i < _payoutAssets.length; i++) {\\n            percentagesTotal = percentagesTotal.add(_payoutAssetPercentages[i]);\\n\\n            // Used to explicitly specify less than 100% in total _payoutAssetPercentages\\n            if (_payoutAssets[i] == SPECIFIC_ASSET_REDEMPTION_DUMMY_FORFEIT_ADDRESS) {\\n                continue;\\n            }\\n\\n            payoutAmounts_[i] = IValueInterpreter(getValueInterpreter()).calcCanonicalAssetValue(\\n                denominationAssetCopy,\\n                _owedGav.mul(_payoutAssetPercentages[i]).div(ONE_HUNDRED_PERCENT),\\n                _payoutAssets[i]\\n            );\\n            // Guards against corner case of primitive-to-derivative asset conversion that floors to 0,\\n            // or redeeming a very low shares amount and/or percentage where asset value owed is 0\\n            require(\\n                payoutAmounts_[i] > 0,\\n                \\\"__payoutSpecifiedAssetPercentages: Zero amount for asset\\\"\\n            );\\n\\n            vaultProxyContract.withdrawAssetTo(_payoutAssets[i], _recipient, payoutAmounts_[i]);\\n        }\\n\\n        require(\\n            percentagesTotal == ONE_HUNDRED_PERCENT,\\n            \\\"__payoutSpecifiedAssetPercentages: Percents must total 100%\\\"\\n        );\\n\\n        return payoutAmounts_;\\n    }\\n\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\n    function __preRedeemSharesHook(\\n        address _redeemer,\\n        uint256 _sharesToRedeem,\\n        bool _forSpecifiedAssets,\\n        uint256 _gavIfCalculated\\n    ) private allowsPermissionedVaultAction {\\n        try\\n            IFeeManager(getFeeManager()).invokeHook(\\n                IFeeManager.FeeHook.PreRedeemShares,\\n                abi.encode(_redeemer, _sharesToRedeem, _forSpecifiedAssets),\\n                _gavIfCalculated\\n            )\\n        {} catch (bytes memory reason) {\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesToRedeem);\\n        }\\n    }\\n\\n    /// @dev Helper to run policy validation after other logic for redeeming shares for specific assets.\\n    /// Avoids stack-too-deep error.\\n    function __postRedeemSharesForSpecificAssetsHook(\\n        address _redeemer,\\n        address _recipient,\\n        uint256 _sharesToRedeemPostFees,\\n        address[] memory _assets,\\n        uint256[] memory _assetAmounts,\\n        uint256 _gavPreRedeem\\n    ) private {\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.RedeemSharesForSpecificAssets,\\n            abi.encode(\\n                _redeemer,\\n                _recipient,\\n                _sharesToRedeemPostFees,\\n                _assets,\\n                _assetAmounts,\\n                _gavPreRedeem\\n            )\\n        );\\n    }\\n\\n    /// @dev Helper to execute common pre-shares redemption logic\\n    function __redeemSharesSetup(\\n        IVault vaultProxyContract,\\n        address _redeemer,\\n        uint256 _sharesQuantityInput,\\n        bool _forSpecifiedAssets,\\n        uint256 _gavIfCalculated\\n    ) private returns (uint256 sharesToRedeem_, uint256 sharesSupply_) {\\n        __assertSharesActionNotTimelocked(address(vaultProxyContract), _redeemer);\\n\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\n\\n        uint256 preFeesRedeemerSharesBalance = sharesContract.balanceOf(_redeemer);\\n\\n        if (_sharesQuantityInput == type(uint256).max) {\\n            sharesToRedeem_ = preFeesRedeemerSharesBalance;\\n        } else {\\n            sharesToRedeem_ = _sharesQuantityInput;\\n        }\\n        require(sharesToRedeem_ > 0, \\\"__redeemSharesSetup: No shares to redeem\\\");\\n\\n        __preRedeemSharesHook(_redeemer, sharesToRedeem_, _forSpecifiedAssets, _gavIfCalculated);\\n\\n        // Update the redemption amount if fees were charged (or accrued) to the redeemer\\n        uint256 postFeesRedeemerSharesBalance = sharesContract.balanceOf(_redeemer);\\n        if (_sharesQuantityInput == type(uint256).max) {\\n            sharesToRedeem_ = postFeesRedeemerSharesBalance;\\n        } else if (postFeesRedeemerSharesBalance < preFeesRedeemerSharesBalance) {\\n            sharesToRedeem_ = sharesToRedeem_.sub(\\n                preFeesRedeemerSharesBalance.sub(postFeesRedeemerSharesBalance)\\n            );\\n        }\\n\\n        // Pay the protocol fee after running other fees, but before burning shares\\n        vaultProxyContract.payProtocolFee();\\n\\n        if (_gavIfCalculated > 0 && doesAutoProtocolFeeSharesBuyback()) {\\n            __buyBackMaxProtocolFeeShares(address(vaultProxyContract), _gavIfCalculated);\\n        }\\n\\n        // Destroy the shares after getting the shares supply\\n        sharesSupply_ = sharesContract.totalSupply();\\n        vaultProxyContract.burnShares(_redeemer, sharesToRedeem_);\\n\\n        return (sharesToRedeem_, sharesSupply_);\\n    }\\n\\n    // TRANSFER SHARES\\n\\n    /// @notice Runs logic prior to transferring shares that are not freely transferable\\n    /// @param _sender The sender of the shares\\n    /// @param _recipient The recipient of the shares\\n    /// @param _amount The amount of shares\\n    function preTransferSharesHook(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override {\\n        address vaultProxyCopy = getVaultProxy();\\n        require(msg.sender == vaultProxyCopy, \\\"preTransferSharesHook: Only VaultProxy callable\\\");\\n        __assertSharesActionNotTimelocked(vaultProxyCopy, _sender);\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PreTransferShares,\\n            abi.encode(_sender, _recipient, _amount)\\n        );\\n    }\\n\\n    /// @notice Runs logic prior to transferring shares that are freely transferable\\n    /// @param _sender The sender of the shares\\n    /// @dev No need to validate caller, as policies are not run\\n    function preTransferSharesHookFreelyTransferable(address _sender) external view override {\\n        __assertSharesActionNotTimelocked(getVaultProxy(), _sender);\\n    }\\n\\n    /////////////////\\n    // GAS RELAYER //\\n    /////////////////\\n\\n    /// @notice Deploys a paymaster contract and deposits WETH, enabling gas relaying\\n    function deployGasRelayPaymaster() external onlyOwnerNotRelayable {\\n        require(\\n            getGasRelayPaymaster() == address(0),\\n            \\\"deployGasRelayPaymaster: Paymaster already deployed\\\"\\n        );\\n\\n        bytes memory constructData = abi.encodeWithSignature(\\\"init(address)\\\", getVaultProxy());\\n        address paymaster = IBeaconProxyFactory(getGasRelayPaymasterFactory()).deployProxy(\\n            constructData\\n        );\\n\\n        __setGasRelayPaymaster(paymaster);\\n\\n        __depositToGasRelayPaymaster(paymaster);\\n    }\\n\\n    /// @notice Tops up the gas relay paymaster deposit\\n    function depositToGasRelayPaymaster() external onlyOwner {\\n        __depositToGasRelayPaymaster(getGasRelayPaymaster());\\n    }\\n\\n    /// @notice Pull WETH from vault to gas relay paymaster\\n    /// @param _amount Amount of the WETH to pull from the vault\\n    function pullWethForGasRelayer(uint256 _amount) external override onlyGasRelayPaymaster {\\n        IVault(getVaultProxy()).withdrawAssetTo(getWethToken(), getGasRelayPaymaster(), _amount);\\n    }\\n\\n    /// @notice Sets the gasRelayPaymaster variable value\\n    /// @param _nextGasRelayPaymaster The next gasRelayPaymaster value\\n    function setGasRelayPaymaster(address _nextGasRelayPaymaster)\\n        external\\n        override\\n        onlyFundDeployer\\n    {\\n        __setGasRelayPaymaster(_nextGasRelayPaymaster);\\n    }\\n\\n    /// @notice Removes the gas relay paymaster, withdrawing the remaining WETH balance\\n    /// and disabling gas relaying\\n    function shutdownGasRelayPaymaster() external onlyOwnerNotRelayable {\\n        IGasRelayPaymaster(gasRelayPaymaster).withdrawBalance();\\n\\n        IVault(vaultProxy).addTrackedAsset(getWethToken());\\n\\n        delete gasRelayPaymaster;\\n\\n        emit GasRelayPaymasterSet(address(0));\\n    }\\n\\n    /// @dev Helper to deposit to the gas relay paymaster\\n    function __depositToGasRelayPaymaster(address _paymaster) private {\\n        IGasRelayPaymaster(_paymaster).deposit();\\n    }\\n\\n    /// @dev Helper to set the next `gasRelayPaymaster` variable\\n    function __setGasRelayPaymaster(address _nextGasRelayPaymaster) private {\\n        gasRelayPaymaster = _nextGasRelayPaymaster;\\n\\n        emit GasRelayPaymasterSet(_nextGasRelayPaymaster);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    // LIB IMMUTABLES\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the `EXTERNAL_POSITION_MANAGER` variable\\n    /// @return externalPositionManager_ The `EXTERNAL_POSITION_MANAGER` variable value\\n    function getExternalPositionManager()\\n        public\\n        view\\n        override\\n        returns (address externalPositionManager_)\\n    {\\n        return EXTERNAL_POSITION_MANAGER;\\n    }\\n\\n    /// @notice Gets the `FEE_MANAGER` variable\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\n    function getFeeManager() public view override returns (address feeManager_) {\\n        return FEE_MANAGER;\\n    }\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view override returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() public view override returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n\\n    /// @notice Gets the `MLN_TOKEN` variable\\n    /// @return mlnToken_ The `MLN_TOKEN` variable value\\n    function getMlnToken() public view returns (address mlnToken_) {\\n        return MLN_TOKEN;\\n    }\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() public view override returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n\\n    /// @notice Gets the `PROTOCOL_FEE_RESERVE` variable\\n    /// @return protocolFeeReserve_ The `PROTOCOL_FEE_RESERVE` variable value\\n    function getProtocolFeeReserve() public view returns (address protocolFeeReserve_) {\\n        return PROTOCOL_FEE_RESERVE;\\n    }\\n\\n    /// @notice Gets the `VALUE_INTERPRETER` variable\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\n    function getValueInterpreter() public view returns (address valueInterpreter_) {\\n        return VALUE_INTERPRETER;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n\\n    // PROXY STORAGE\\n\\n    /// @notice Checks if collected protocol fee shares are automatically bought back\\n    /// while buying or redeeming shares\\n    /// @return doesAutoBuyback_ True if shares are automatically bought back\\n    function doesAutoProtocolFeeSharesBuyback() public view returns (bool doesAutoBuyback_) {\\n        return autoProtocolFeeSharesBuyback;\\n    }\\n\\n    /// @notice Gets the `denominationAsset` variable\\n    /// @return denominationAsset_ The `denominationAsset` variable value\\n    function getDenominationAsset() public view override returns (address denominationAsset_) {\\n        return denominationAsset;\\n    }\\n\\n    /// @notice Gets the `gasRelayPaymaster` variable\\n    /// @return gasRelayPaymaster_ The `gasRelayPaymaster` variable value\\n    function getGasRelayPaymaster() public view override returns (address gasRelayPaymaster_) {\\n        return gasRelayPaymaster;\\n    }\\n\\n    /// @notice Gets the timestamp of the last time shares were bought for a given account\\n    /// @param _who The account for which to get the timestamp\\n    /// @return lastSharesBoughtTimestamp_ The timestamp of the last shares bought\\n    function getLastSharesBoughtTimestampForAccount(address _who)\\n        public\\n        view\\n        returns (uint256 lastSharesBoughtTimestamp_)\\n    {\\n        return acctToLastSharesBoughtTimestamp[_who];\\n    }\\n\\n    /// @notice Gets the `sharesActionTimelock` variable\\n    /// @return sharesActionTimelock_ The `sharesActionTimelock` variable value\\n    function getSharesActionTimelock() public view returns (uint256 sharesActionTimelock_) {\\n        return sharesActionTimelock;\\n    }\\n\\n    /// @notice Gets the `vaultProxy` variable\\n    /// @return vaultProxy_ The `vaultProxy` variable value\\n    function getVaultProxy() public view override returns (address vaultProxy_) {\\n        return vaultProxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund/comptroller/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool) external;\\n\\n    function calcGav() external returns (uint256);\\n\\n    function calcGrossShareValue() external returns (uint256);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function destructActivated(uint256, uint256) external;\\n\\n    function destructUnactivated() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getExternalPositionManager() external view returns (address);\\n\\n    function getFeeManager() external view returns (address);\\n\\n    function getFundDeployer() external view returns (address);\\n\\n    function getGasRelayPaymaster() external view returns (address);\\n\\n    function getIntegrationManager() external view returns (address);\\n\\n    function getPolicyManager() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction, bytes calldata) external;\\n\\n    function preTransferSharesHook(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address) external view;\\n\\n    function setGasRelayPaymaster(address) external;\\n\\n    function setVaultProxy(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addTrackedAsset(address) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function buyBackProtocolFeeShares(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function callOnContract(address, bytes calldata) external returns (bytes memory);\\n\\n    function canManageAssets(address) external view returns (bool);\\n\\n    function canRelayCalls(address) external view returns (bool);\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getActiveExternalPositions() external view returns (address[] memory);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isActiveExternalPosition(address) external view returns (bool);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction, bytes calldata) external;\\n\\n    function setAccessorForFundReconfiguration(address) external;\\n\\n    function setSymbol(string calldata) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/IExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _configData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/fee-manager/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {\\n        Continuous,\\n        PreBuyShares,\\n        PostBuyShares,\\n        PreRedeemShares\\n    }\\n    enum SettlementType {\\n        None,\\n        Direct,\\n        Mint,\\n        Burn,\\n        MintSharesOutstanding,\\n        BurnSharesOutstanding\\n    }\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/policy-manager/IPolicyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    // When updating PolicyHook, also update these functions in PolicyManager:\\n    // 1. __getAllPolicyHooks()\\n    // 2. __policyHookRestrictsCurrentInvestorActions()\\n    enum PolicyHook {\\n        PostBuyShares,\\n        PostCallOnIntegration,\\n        PreTransferShares,\\n        RedeemSharesForSpecificAssets,\\n        AddTrackedAssets,\\n        RemoveTrackedAssets,\\n        CreateExternalPosition,\\n        PostCallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/gas-relayer/GasRelayRecipientMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"../../utils/beacon-proxy/IBeaconProxyFactory.sol\\\";\\nimport \\\"./IGasRelayPaymaster.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title GasRelayRecipientMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin that enables receiving GSN-relayed calls\\n/// @dev IMPORTANT: Do not use storage var in this contract,\\n/// unless it is no longer inherited by the VaultLib\\nabstract contract GasRelayRecipientMixin {\\n    address internal immutable GAS_RELAY_PAYMASTER_FACTORY;\\n\\n    constructor(address _gasRelayPaymasterFactory) internal {\\n        GAS_RELAY_PAYMASTER_FACTORY = _gasRelayPaymasterFactory;\\n    }\\n\\n    /// @dev Helper to parse the canonical sender of a tx based on whether it has been relayed\\n    function __msgSender() internal view returns (address payable canonicalSender_) {\\n        if (msg.data.length >= 24 && msg.sender == getGasRelayTrustedForwarder()) {\\n            assembly {\\n                canonicalSender_ := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n\\n            return canonicalSender_;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable\\n    /// @return gasRelayPaymasterFactory_ The `GAS_RELAY_PAYMASTER_FACTORY` variable value\\n    function getGasRelayPaymasterFactory()\\n        public\\n        view\\n        returns (address gasRelayPaymasterFactory_)\\n    {\\n        return GAS_RELAY_PAYMASTER_FACTORY;\\n    }\\n\\n    /// @notice Gets the trusted forwarder for GSN relaying\\n    /// @return trustedForwarder_ The trusted forwarder\\n    function getGasRelayTrustedForwarder() public view returns (address trustedForwarder_) {\\n        return\\n            IGasRelayPaymaster(\\n                IBeaconProxyFactory(getGasRelayPaymasterFactory()).getCanonicalLib()\\n            ).trustedForwarder();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/gas-relayer/IGasRelayPaymaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../interfaces/IGsnPaymaster.sol\\\";\\n\\n/// @title IGasRelayPaymaster Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGasRelayPaymaster is IGsnPaymaster {\\n    function deposit() external;\\n\\n    function withdrawBalance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/gas-relayer/IGasRelayPaymasterDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGasRelayPaymasterDepositor Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGasRelayPaymasterDepositor {\\n    function pullWethForGasRelayer(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IValueInterpreter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for ValueInterpreter\\ninterface IValueInterpreter {\\n    function calcCanonicalAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256);\\n\\n    function calcCanonicalAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n\\n    function isSupportedDerivativeAsset(address) external view returns (bool);\\n\\n    function isSupportedPrimitiveAsset(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IGsnForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGsnForwarder interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnForwarder {\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntil;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IGsnPaymaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGsnTypes.sol\\\";\\n\\n/// @title IGsnPaymaster interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnPaymaster {\\n    struct GasAndDataLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n        uint256 calldataSizeLimit;\\n    }\\n\\n    function getGasAndDataLimits() external view returns (GasAndDataLimits memory limits);\\n\\n    function getHubAddr() external view returns (address);\\n\\n    function getRelayHubDeposit() external view returns (uint256);\\n\\n    function preRelayedCall(\\n        IGsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    ) external returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        IGsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    function trustedForwarder() external view returns (address);\\n\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IGsnTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGsnForwarder.sol\\\";\\n\\n/// @title IGsnTypes Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnTypes {\\n    struct RelayData {\\n        uint256 gasPrice;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    struct RelayRequest {\\n        IGsnForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IWETH Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/peripheral/DepositWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund/comptroller/ComptrollerLib.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../utils/AssetHelpers.sol\\\";\\n\\n/// @title DepositWrapper Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Logic related to wrapping deposit actions\\ncontract DepositWrapper is AssetHelpers {\\n    bytes4 private constant BUY_SHARES_ON_BEHALF_SELECTOR = 0x877fd894;\\n    address private immutable WETH_TOKEN;\\n\\n    constructor(address _weth) public {\\n        WETH_TOKEN = _weth;\\n    }\\n\\n    /// @dev Needed in case WETH not fully used during exchangeAndBuyShares,\\n    /// to unwrap into ETH and refund\\n    receive() external payable {}\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Exchanges ETH into a fund's denomination asset and then buys shares\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy with the sent ETH\\n    /// @param _exchange The exchange on which to execute the swap to the denomination asset\\n    /// @param _exchangeApproveTarget The address that should be given an allowance of WETH\\n    /// for the given _exchange\\n    /// @param _exchangeData The data with which to call the exchange to execute the swap\\n    /// to the denomination asset\\n    /// @param _minInvestmentAmount The minimum amount of the denomination asset\\n    /// to receive in the trade for investment (not necessary for WETH)\\n    /// @return sharesReceived_ The actual amount of shares received\\n    /// @dev Use a reasonable _minInvestmentAmount always, in case the exchange\\n    /// does not perform as expected (low incoming asset amount, blend of assets, etc).\\n    /// If the fund's denomination asset is WETH, _exchange, _exchangeApproveTarget, _exchangeData,\\n    /// and _minInvestmentAmount will be ignored.\\n    function exchangeEthAndBuyShares(\\n        address _comptrollerProxy,\\n        uint256 _minSharesQuantity,\\n        address _exchange,\\n        address _exchangeApproveTarget,\\n        bytes calldata _exchangeData,\\n        uint256 _minInvestmentAmount\\n    ) external payable returns (uint256 sharesReceived_) {\\n        address denominationAsset = ComptrollerLib(_comptrollerProxy).getDenominationAsset();\\n\\n        // Wrap ETH into WETH\\n        IWETH(payable(getWethToken())).deposit{value: msg.value}();\\n\\n        // If denominationAsset is WETH, can just buy shares directly\\n        if (denominationAsset == getWethToken()) {\\n            __approveAssetMaxAsNeeded(getWethToken(), _comptrollerProxy, msg.value);\\n\\n            return __buyShares(_comptrollerProxy, msg.sender, msg.value, _minSharesQuantity);\\n        }\\n\\n        // Deny access to privileged core calls originating from this contract\\n        bytes4 exchangeSelector = abi.decode(_exchangeData, (bytes4));\\n        require(\\n            exchangeSelector != BUY_SHARES_ON_BEHALF_SELECTOR,\\n            \\\"exchangeEthAndBuyShares: Disallowed selector\\\"\\n        );\\n\\n        // Exchange ETH to the fund's denomination asset\\n        __approveAssetMaxAsNeeded(getWethToken(), _exchangeApproveTarget, msg.value);\\n        (bool success, bytes memory returnData) = _exchange.call(_exchangeData);\\n        require(success, string(returnData));\\n\\n        // Confirm the amount received in the exchange is above the min acceptable amount\\n        uint256 investmentAmount = ERC20(denominationAsset).balanceOf(address(this));\\n        require(\\n            investmentAmount >= _minInvestmentAmount,\\n            \\\"exchangeEthAndBuyShares: _minInvestmentAmount not met\\\"\\n        );\\n\\n        // Give the ComptrollerProxy max allowance for its denomination asset as necessary\\n        __approveAssetMaxAsNeeded(denominationAsset, _comptrollerProxy, investmentAmount);\\n\\n        // Buy fund shares\\n        sharesReceived_ = __buyShares(\\n            _comptrollerProxy,\\n            msg.sender,\\n            investmentAmount,\\n            _minSharesQuantity\\n        );\\n\\n        // Unwrap and refund any remaining WETH not used in the exchange\\n        uint256 remainingWeth = ERC20(getWethToken()).balanceOf(address(this));\\n        if (remainingWeth > 0) {\\n            IWETH(payable(getWethToken())).withdraw(remainingWeth);\\n            (success, returnData) = msg.sender.call{value: remainingWeth}(\\\"\\\");\\n            require(success, string(returnData));\\n        }\\n\\n        return sharesReceived_;\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper for buying shares\\n    function __buyShares(\\n        address _comptrollerProxy,\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity\\n    ) private returns (uint256 sharesReceived_) {\\n        ComptrollerLib comptrollerProxyContract = ComptrollerLib(_comptrollerProxy);\\n        sharesReceived_ = comptrollerProxyContract.buySharesOnBehalf(\\n            _buyer,\\n            _investmentAmount,\\n            _minSharesQuantity\\n        );\\n\\n        return sharesReceived_;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/AddressArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    /// @dev Helper to verify if a storage array contains a particular value\\n    function storageArrayContains(address[] storage _self, address _target)\\n        internal\\n        view\\n        returns (bool doesContain_)\\n    {\\n        uint256 arrLength = _self.length;\\n        for (uint256 i; i < arrLength; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/AssetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to aggregate amounts of the same assets\\n    function __aggregateAssetAmounts(address[] memory _rawAssets, uint256[] memory _rawAmounts)\\n        internal\\n        pure\\n        returns (address[] memory aggregatedAssets_, uint256[] memory aggregatedAmounts_)\\n    {\\n        if (_rawAssets.length == 0) {\\n            return (aggregatedAssets_, aggregatedAmounts_);\\n        }\\n\\n        uint256 aggregatedAssetCount = 1;\\n        for (uint256 i = 1; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < i; j++) {\\n                if (_rawAssets[i] == _rawAssets[j]) {\\n                    contains = true;\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssetCount++;\\n            }\\n        }\\n\\n        aggregatedAssets_ = new address[](aggregatedAssetCount);\\n        aggregatedAmounts_ = new uint256[](aggregatedAssetCount);\\n        uint256 aggregatedAssetIndex;\\n        for (uint256 i; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < aggregatedAssetIndex; j++) {\\n                if (_rawAssets[i] == aggregatedAssets_[j]) {\\n                    contains = true;\\n\\n                    aggregatedAmounts_[j] += _rawAmounts[i];\\n\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssets_[aggregatedAssetIndex] = _rawAssets[i];\\n                aggregatedAmounts_[aggregatedAssetIndex] = _rawAmounts[i];\\n                aggregatedAssetIndex++;\\n            }\\n        }\\n\\n        return (aggregatedAssets_, aggregatedAmounts_);\\n    }\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/beacon-proxy/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IBeacon interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IBeacon {\\n    function getCanonicalLib() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/beacon-proxy/IBeaconProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"./IBeacon.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title IBeaconProxyFactory interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IBeaconProxyFactory is IBeacon {\\n    function deployProxy(bytes memory _constructData) external returns (address proxy_);\\n\\n    function setCanonicalLib(address _canonicalLib) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeApproveTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestmentAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeEthAndBuyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReceived_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DepositWrapper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}