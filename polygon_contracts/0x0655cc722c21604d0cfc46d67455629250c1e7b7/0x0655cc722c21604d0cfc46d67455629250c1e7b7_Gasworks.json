{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Gasworks.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2023 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\n\\npragma solidity ^0.8.21.0;\\n\\nimport { ERC2771Recipient } from \\\"gsn/ERC2771Recipient.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { ISetToken } from \\\"./interfaces/ISetToken.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Permit } from\\n    \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\nimport { IExchangeIssuanceZeroEx } from \\\"./interfaces/IExchangeIssuanceZeroEx.sol\\\";\\nimport { ISignatureTransfer } from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ITradeIssuerV2 } from \\\"chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\\\";\\nimport { IChamber } from \\\"chambers/interfaces/IChamber.sol\\\";\\nimport { IIssuerWizard } from \\\"chambers/interfaces/IIssuerWizard.sol\\\";\\nimport { WETH } from \\\"solmate/src/tokens/WETH.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IGasworks } from \\\"./interfaces/IGasworks.sol\\\";\\n\\ncontract Gasworks is IGasworks, ERC2771Recipient, Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                              LIBRARIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    using SafeTransferLib for ERC20;\\n    using SafeTransferLib for ISetToken;\\n    using Address for address payable;\\n    using SafeERC20 for IERC20Permit;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    IExchangeIssuanceZeroEx public immutable exchangeIssuance;\\n    ISignatureTransfer public immutable signatureTransfer;\\n    ITradeIssuerV2 public immutable tradeIssuer;\\n\\n    bytes private constant TOKEN_PERMISSIONS_TYPE = \\\"TokenPermissions(address token,uint256 amount)\\\";\\n\\n    bytes private constant SWAP_DATA_TYPE =\\n        \\\"SwapData(address buyToken,uint256 buyAmount,uint256 nativeTokenAmount,address swapTarget,address swapAllowanceTarget)\\\";\\n    bytes32 private constant SWAP_DATA_TYPE_HASH= keccak256(SWAP_DATA_TYPE);\\n    \\n    string internal constant PERMIT2_SWAP_DATA_TYPE =\\n        string(abi.encodePacked(\\\"SwapData witness)\\\", SWAP_DATA_TYPE, TOKEN_PERMISSIONS_TYPE));\\n\\n    bytes private constant SWAP_CALL_INSTRUCTION_TYPE =\\n        \\\"SwapCallInstruction(address sellToken,uint256 sellAmount,address buyToken,uint256 minBuyAmount,address swapTarget,address swapAllowanceTarget)\\\";\\n    bytes32 private constant SWAP_CALL_INSTRUCTION_TYPE_HASH= keccak256(SWAP_CALL_INSTRUCTION_TYPE);\\n    bytes private constant MINT_DATA_TYPE =\\n        \\\"MintData(address archToken,uint256 archTokenAmount,address inputToken,uint256 inputTokenMaxAmount,address issuer,SwapCallInstruction[] swapCallInstructions)\\\";\\n    string internal constant PERMIT2_MINT_DATA_TYPE = string(\\n        abi.encodePacked(\\n            \\\"MintData witness)\\\", MINT_DATA_TYPE, SWAP_CALL_INSTRUCTION_TYPE, TOKEN_PERMISSIONS_TYPE\\n        )\\n    );\\n    bytes32 internal constant PERMIT_WITNESS_TRANSFERFROM_HASH = keccak256(\\\"PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,MintData witness)MintData(address archToken,uint256 archTokenAmount,address inputToken,uint256 inputTokenMaxAmount,address issuer,SwapCallInstruction[] swapCallInstructions)SwapCallInstruction(address sellToken,uint256 sellAmount,address buyToken,uint256 minBuyAmount,address swapTarget,address swapAllowanceTarget)TokenPermissions(address token,uint256 amount)\\\");\\n    bytes32 internal constant MINT_DATA_TYPE_HASH = keccak256(abi.encodePacked(MINT_DATA_TYPE, SWAP_CALL_INSTRUCTION_TYPE));\\n\\n    bytes private constant REDEEM_DATA_TYPE =\\n        \\\"RedeemData(address archToken,uint256 archTokenAmount,address outputToken,uint256 outputTokenMinAmount,address issuer,SwapCallInstruction[] swapCallInstructions)\\\";\\n    bytes32 private constant REDEEM_DATA_TYPE_HASH = keccak256(abi.encodePacked(REDEEM_DATA_TYPE, SWAP_CALL_INSTRUCTION_TYPE));\\n    string internal constant PERMIT2_REDEEM_DATA_TYPE = string(\\n        abi.encodePacked(\\n            \\\"RedeemData witness)\\\",\\n            REDEEM_DATA_TYPE,\\n            SWAP_CALL_INSTRUCTION_TYPE,\\n            TOKEN_PERMISSIONS_TYPE\\n        )\\n    );\\n    ///\\n\\n    WETH public constant WMATIC = WETH(payable(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270));\\n\\n    mapping(address => bool) public tokens;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _forwarder, address _exchangeIssuance, address _tradeIssuer)\\n        Owned(_msgSender())\\n    {\\n        _setTrustedForwarder(_forwarder);\\n        exchangeIssuance = IExchangeIssuanceZeroEx(payable(_exchangeIssuance));\\n        signatureTransfer = ISignatureTransfer(0x000000000022D473030F116dDEE9F6B43aC78BA3);\\n        tradeIssuer = ITradeIssuerV2(_tradeIssuer);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EXTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    receive() external payable { }\\n\\n    function setTrustedForwarder(address forwarder) external onlyOwner {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    function setTokens(address token) external onlyOwner {\\n        tokens[token] = true;\\n    }\\n\\n    /**\\n     * Swaps an exact amount of SetTokens in 0x for a given amount of ERC20 tokens.\\n     * Using a permit for the ERC20 token transfer (through Permit2)\\n     *\\n     * @param permit2             Permit2 data of the ERC20 token used\\n     * @param owner               Owner of the tokens to transfer\\n     * @param signature           Signature of the owner of the tokens\\n     * @param swapData            Data of the swap to perform\\n     */\\n    function swapWithPermit2(\\n        ISignatureTransfer.PermitTransferFrom memory permit2,\\n        address owner,\\n        bytes calldata signature,\\n        SwapData calldata swapData\\n    ) external {\\n        if (!tokens[permit2.permitted.token]) revert InvalidToken(permit2.permitted.token);\\n        if (!tokens[swapData.buyToken]) revert InvalidToken(swapData.buyToken);\\n\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails = ISignatureTransfer\\n            .SignatureTransferDetails({ to: address(this), requestedAmount: permit2.permitted.amount });\\n\\n        bytes32 witness = _calculateSwapDataTypeWitness(swapData);\\n\\n        signatureTransfer.permitWitnessTransferFrom(\\n            permit2, transferDetails, owner, witness, PERMIT2_SWAP_DATA_TYPE, signature\\n        );\\n\\n        _fillQuoteInternal(\\n            swapData, transferDetails.requestedAmount, owner, ERC20(permit2.permitted.token)\\n        );\\n    }\\n\\n    /**\\n     * Mints an exact amount of Chamber from a given amount of input ERC20 tokens.\\n     * Using a permit for the ERC20 token (through Permit2)\\n     *\\n     * @param permit2                       Permit2 data of the ERC20 token used\\n     * @param owner                         Owner of the tokens to transfer\\n     * @param signature                     Signature of the owner of the tokens\\n     * @param mintData               Data of the chamber issuance to perform\\n     */\\n    function mintWithPermit2(\\n        ISignatureTransfer.PermitTransferFrom memory permit2,\\n        address owner,\\n        bytes calldata signature,\\n        MintData calldata mintData\\n    ) external {\\n        if (!tokens[permit2.permitted.token]) revert InvalidToken(permit2.permitted.token);\\n        if (!tokens[address(mintData.archToken)]) {\\n            revert InvalidToken(address(mintData.archToken));\\n        }\\n\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails = ISignatureTransfer\\n            .SignatureTransferDetails({ to: address(this), requestedAmount: permit2.permitted.amount });\\n\\n        (\\n            ITradeIssuerV2.ContractCallInstruction[] memory contractCallInstructions,\\n            bytes32 concatenatedHashedSwapCallInstructions\\n        ) = hashSwapCallInstructionAndConvertToTraderIssuerCallInstruction(\\n            mintData.swapCallInstructions\\n        );\\n\\n        bytes32 witness =\\n            calculateMintDataTypeWitness(mintData, concatenatedHashedSwapCallInstructions);\\n\\n        signatureTransfer.permitWitnessTransferFrom(\\n            permit2, transferDetails, owner, witness, PERMIT2_MINT_DATA_TYPE, signature\\n        );\\n\\n        ERC20 token = ERC20(permit2.permitted.token);\\n        uint256 beforeBalance = token.balanceOf(address(this));\\n\\n        token.safeApprove(address(tradeIssuer), mintData.inputTokenMaxAmount);\\n\\n        tradeIssuer.mintChamberFromToken(\\n            contractCallInstructions,\\n            IChamber(mintData.archToken),\\n            IIssuerWizard(mintData.issuer),\\n            IERC20(mintData.inputToken),\\n            mintData.inputTokenMaxAmount,\\n            mintData.archTokenAmount\\n        );\\n\\n        uint256 totalPaid = beforeBalance - token.balanceOf(address(this));\\n\\n        ERC20(mintData.archToken).safeTransfer(owner, mintData.archTokenAmount);\\n        token.safeTransfer(owner, token.balanceOf(address(this)));\\n\\n        emit MintWithPermit2(\\n            mintData.archToken, mintData.archTokenAmount, permit2.permitted.token, totalPaid\\n        );\\n    }\\n\\n    /**\\n     * Redeems an exact amount of Chamber to a given amount of ERC20 tokens.\\n     * Using a permit for the Chamber token (through Permit2)\\n     *\\n     * @param permit2                       Permit2 data of the ERC20 token used\\n     * @param owner                         Owner of the tokens to transfer\\n     * @param signature                     Signature of the owner of the tokens\\n     * @param redeemData                    Data of the chamber redeem to perform\\n     * @param toNative                      True if output is native token\\n     */\\n    function redeemWithPermit2(\\n        ISignatureTransfer.PermitTransferFrom memory permit2,\\n        address owner,\\n        bytes calldata signature,\\n        RedeemData calldata redeemData,\\n        bool toNative\\n    ) external {\\n        if (!tokens[permit2.permitted.token]) revert InvalidToken(permit2.permitted.token);\\n        if (!tokens[address(redeemData.outputToken)]) {\\n            revert InvalidToken(address(redeemData.outputToken));\\n        }\\n\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails = ISignatureTransfer\\n            .SignatureTransferDetails({ to: address(this), requestedAmount: permit2.permitted.amount });\\n\\n        (\\n            ITradeIssuerV2.ContractCallInstruction[] memory contractCallInstructions,\\n            bytes32 concatenatedHashedSwapCallInstructions\\n        ) = hashSwapCallInstructionAndConvertToTraderIssuerCallInstruction(\\n            redeemData.swapCallInstructions\\n        );\\n\\n        bytes32 witness =\\n            calculateRedeemDataTypeWitness(redeemData, concatenatedHashedSwapCallInstructions);\\n\\n        signatureTransfer.permitWitnessTransferFrom(\\n            permit2, transferDetails, owner, witness, PERMIT2_REDEEM_DATA_TYPE, signature\\n        );\\n\\n        ERC20 token = ERC20(permit2.permitted.token);\\n\\n        token.safeApprove(address(tradeIssuer), redeemData.archTokenAmount);\\n\\n        tradeIssuer.redeemChamberToToken(\\n            contractCallInstructions,\\n            IChamber(redeemData.archToken),\\n            IIssuerWizard(redeemData.issuer),\\n            IERC20(redeemData.outputToken),\\n            redeemData.outputTokenMinAmount,\\n            redeemData.archTokenAmount\\n        );\\n        ERC20 outputToken = ERC20(address(redeemData.outputToken));\\n        uint256 outputTokenBalance = outputToken.balanceOf(address(this));\\n        if (toNative) {\\n            WETH(payable(address(outputToken))).withdraw(outputTokenBalance);\\n            payable(owner).sendValue(outputTokenBalance);\\n        } else {\\n            outputToken.safeTransfer(owner, outputToken.balanceOf(address(this)));\\n        }\\n\\n        emit RedeemWithPermit2(\\n            address(redeemData.archToken),\\n            redeemData.archTokenAmount,\\n            address(outputToken),\\n            outputTokenBalance\\n        );\\n    }\\n\\n    /**\\n     * Withdraws all the balance of a given ERC20 token to the owner of the contract\\n     *\\n     * @param token              Swap data of the trade to perform\\n     */\\n    function withdrawTokenBalance(ERC20 token) external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        if (balance == 0) revert ZeroBalance(address(token));\\n        token.safeTransfer(owner, balance);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            INTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * Performs a low-level call to swapTarget to perform a swap between two tokens\\n     *\\n     * @param swap              Swap data of the trade to perform\\n     * @param sellAmount        Amount of sellToken to sell\\n     * @param owner             Owner of the tokens to transfer\\n     * @param sellToken         ERC20 token to sell\\n     */\\n    function _fillQuoteInternal(\\n        SwapData calldata swap,\\n        uint256 sellAmount,\\n        address owner,\\n        ERC20 sellToken\\n    ) internal {\\n        bytes memory returnData;\\n        ERC20 buyToken = ERC20(swap.buyToken);\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n\\n        sellToken.safeApprove(swap.swapAllowanceTarget, type(uint256).max);\\n\\n        (bool success,) = swap.swapTarget.call{ value: swap.nativeTokenAmount }(swap.swapCallData);\\n        if (!success) revert SwapCallFailed();\\n\\n        uint256 swapBalance = buyToken.balanceOf(address(this)) - beforeBalance;\\n\\n        if (swapBalance < swap.buyAmount) {\\n            revert Underbought(address(buyToken), swap.buyAmount);\\n        }\\n\\n        if (swap.buyToken == address(WMATIC)) {\\n            WMATIC.withdraw(swapBalance);\\n            (success, returnData) = owner.call{ value: (swapBalance) }(\\\"\\\");\\n            if (!success) revert TransferFailed(owner, swapBalance, returnData);\\n        } else {\\n            buyToken.safeTransfer(owner, swapBalance);\\n        }\\n\\n        emit SwapWithPermit(swap.buyToken, swap.buyAmount, address(sellToken), sellAmount);\\n    }\\n\\n    /**\\n     * Calculate the EIP-712 bytes32 hash of a swapDAta struct.\\n     *\\n     * @param swapData  IGasworks.SwapData\\n     */\\n    function _calculateSwapDataTypeWitness(IGasworks.SwapData memory swapData)\\n        internal\\n        pure\\n        returns (bytes32 witness)\\n    {\\n        witness = keccak256(\\n            abi.encode(\\n                SWAP_DATA_TYPE_HASH,\\n                swapData.buyToken,\\n                swapData.buyAmount,\\n                swapData.nativeTokenAmount,\\n                swapData.swapTarget,\\n                swapData.swapAllowanceTarget\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Cast IGasworks.SwapCallInstruction to ITradeIssuerV2.Contract call instruction, and also\\n     * returns the EIP-712 hashed swapCallInstructions\\n     *\\n     * @param swapCallInstructions  Mint or Redeem swap call instructions array\\n     */\\n    function hashSwapCallInstructionAndConvertToTraderIssuerCallInstruction(\\n        SwapCallInstruction[] memory swapCallInstructions\\n    )\\n        public\\n        pure\\n        returns (\\n            ITradeIssuerV2.ContractCallInstruction[] memory contractCallInstructions,\\n            bytes32 concatenatedHashedSwapCallInstructions\\n        )\\n    {\\n        bytes32[] memory instructionHashes = new bytes32[](swapCallInstructions.length);\\n        contractCallInstructions =\\n            new ITradeIssuerV2.ContractCallInstruction[](swapCallInstructions.length);\\n\\n        for (uint256 i = 0; i < swapCallInstructions.length;) {\\n            contractCallInstructions[i] = ITradeIssuerV2.ContractCallInstruction(\\n                payable(swapCallInstructions[i].swapTarget),\\n                swapCallInstructions[i].swapAllowanceTarget,\\n                IERC20(swapCallInstructions[i].sellToken),\\n                swapCallInstructions[i].sellAmount,\\n                IERC20(swapCallInstructions[i].buyToken),\\n                swapCallInstructions[i].minBuyAmount,\\n                swapCallInstructions[i].swapCallData\\n            );\\n\\n            instructionHashes[i] = keccak256(abi.encode(\\n                SWAP_CALL_INSTRUCTION_TYPE_HASH,\\n                swapCallInstructions[i].sellToken,\\n                swapCallInstructions[i].sellAmount,\\n                swapCallInstructions[i].buyToken,\\n                swapCallInstructions[i].minBuyAmount,\\n                swapCallInstructions[i].swapTarget,\\n                swapCallInstructions[i].swapAllowanceTarget\\n            ));\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        concatenatedHashedSwapCallInstructions =\\n            keccak256(abi.encodePacked(instructionHashes));\\n\\n        return (contractCallInstructions, concatenatedHashedSwapCallInstructions);\\n    }\\n\\n    /**\\n     * Calculate the EIP-712 bytes32 hash of a mintData struct. The swapCallInstructions is passed to avoid\\n     * a double for in the parent function\\n     *\\n     * @param mintData                                IGasworks.MintData\\n     * @param concatenatedHashedSwapCallInstructions  Already EIP-712 hashed instructions\\n     */\\n    function calculateMintDataTypeWitness(\\n        IGasworks.MintData memory mintData,\\n        bytes32 concatenatedHashedSwapCallInstructions\\n    ) public pure returns (bytes32 witness) {\\n        witness = keccak256(\\n            abi.encode(\\n                MINT_DATA_TYPE_HASH,\\n                mintData.archToken,\\n                mintData.archTokenAmount,\\n                mintData.inputToken,\\n                mintData.inputTokenMaxAmount,\\n                mintData.issuer,\\n                concatenatedHashedSwapCallInstructions\\n            )\\n        );\\n        return witness;\\n    }\\n\\n    /**\\n     * Calculate the EIP-712 bytes32 hash of a redeemData struct. The swapCallInstructions is passed to avoid\\n     * a double for in the parent function\\n     *\\n     * @param redeemData                              IGasworks.RedeemData\\n     * @param concatenatedHashedSwapCallInstructions  Already EIP-712 hashed instructions\\n     */\\n    function calculateRedeemDataTypeWitness(\\n        IGasworks.RedeemData memory redeemData,\\n        bytes32 concatenatedHashedSwapCallInstructions\\n    ) public pure returns (bytes32 witness) {\\n        witness = keccak256(\\n            abi.encode(\\n                REDEEM_DATA_TYPE_HASH,\\n                redeemData.archToken,\\n                redeemData.archTokenAmount,\\n                redeemData.outputToken,\\n                redeemData.outputTokenMinAmount,\\n                redeemData.issuer,\\n                concatenatedHashedSwapCallInstructions\\n            )\\n        );\\n        return witness;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/gsn/packages/contracts/src/ERC2771Recipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISetToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.21.0;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and\\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     * updating all units at once via the position multiplier. Virtual units are achieved\\n     * by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex\\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     * maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n        int256 virtualUnit;\\n        address[] externalPositionModules;\\n        mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n        int256 virtualUnit;\\n        bytes data;\\n    }\\n\\n    /* ============ Functions ============ */\\n\\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit)\\n        external;\\n    function editExternalPositionData(\\n        address _component,\\n        address _positionModule,\\n        bytes calldata _data\\n    ) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data)\\n        external\\n        returns (bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(address _component) external view returns (int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule)\\n        external\\n        view\\n        returns (int256);\\n    function getComponents() external view returns (address[] memory);\\n    function getExternalPositionModules(address _component)\\n        external\\n        view\\n        returns (address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule)\\n        external\\n        view\\n        returns (bytes memory);\\n    function isExternalPositionModule(address _component, address _module)\\n        external\\n        view\\n        returns (bool);\\n    function isComponent(address _component) external view returns (bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns (int256);\\n\\n    function isInitializedModule(address _module) external view returns (bool);\\n    function isPendingModule(address _module) external view returns (bool);\\n    function isLocked() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IExchangeIssuanceZeroEx.sol\": {\r\n      \"content\": \"//    SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.21.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport { Address } from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { IController } from \\\"./IController.sol\\\";\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IExchangeIssuanceZeroEx {\\n    struct IssuanceModuleData {\\n        bool isAllowed;\\n        bool isDebtIssuanceModule;\\n    }\\n\\n    // The issued SetToken\\n    // The address of the input asset(ERC20/ETH) used to issue the SetTokens\\n    // The amount of input tokens used for issuance\\n    // The amount of SetTokens received by the recipient\\n    event ExchangeIssue( // The recipient address of the issued SetTokens\\n        address indexed _recipient,\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _inputToken,\\n        uint256 _amountInputToken,\\n        uint256 _amountSetIssued\\n    );\\n\\n    // The redeemed SetToken\\n    // The address of output asset(ERC20/ETH) received by the recipient\\n    // The amount of SetTokens redeemed for output tokens\\n    // The amount of output tokens received by the recipient\\n    event ExchangeRedeem( // The recipient adress of the output tokens obtained for redemption\\n        address indexed _recipient,\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _outputToken,\\n        uint256 _amountSetRedeemed,\\n        uint256 _amountOutputToken\\n    );\\n\\n    function withdrawTokens(IERC20[] calldata _tokens, address payable _to) external payable;\\n\\n    receive() external payable;\\n\\n    /* ============ Public Functions ============ */\\n\\n    /**\\n     * Runs all the necessary approval functions required for a given ERC20 token.\\n     * This function can be called when a new token is added to a SetToken during a\\n     * rebalance.\\n     *\\n     * @param _token    Address of the token which needs approval\\n     * @param _spender  Address of the spender which will be approved to spend token. (Must be a whitlisted issuance module)\\n     */\\n    function approveToken(IERC20 _token, address _spender) external;\\n\\n    /**\\n     * Runs all the necessary approval functions required for a list of ERC20 tokens.\\n     *\\n     * @param _tokens    Addresses of the tokens which need approval\\n     * @param _spender   Address of the spender which will be approved to spend token. (Must be a whitlisted issuance module)\\n     */\\n    function approveTokens(IERC20[] calldata _tokens, address _spender) external;\\n\\n    /**\\n     * Runs all the necessary approval functions required before issuing\\n     * or redeeming a SetToken. This function need to be called only once before the first time\\n     * this smart contract is used on any particular SetToken.\\n     *\\n     * @param _setToken          Address of the SetToken being initialized\\n     * @param _issuanceModule    Address of the issuance module which will be approved to spend component tokens.\\n     */\\n    function approveSetToken(ISetToken _setToken, address _issuanceModule) external;\\n\\n    /**\\n     * Issues an exact amount of SetTokens for given amount of input ERC20 tokens.\\n     * The excess amount of tokens is returned in an equivalent amount of ether.\\n     *\\n     * @param _setToken              Address of the SetToken to be issued\\n     * @param _inputToken            Address of the input token\\n     * @param _amountSetToken        Amount of SetTokens to issue\\n     * @param _maxAmountInputToken   Maximum amount of input tokens to be used to issue SetTokens.\\n     * @param _componentQuotes       The encoded 0x transactions to execute\\n     *\\n     * @return totalInputTokenSold   Amount of input token spent for issuance\\n     */\\n    function issueExactSetFromToken(\\n        ISetToken _setToken,\\n        IERC20 _inputToken,\\n        uint256 _amountSetToken,\\n        uint256 _maxAmountInputToken,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external returns (uint256);\\n\\n    /**\\n     * Issues an exact amount of SetTokens for given amount of ETH.\\n     * The excess amount of tokens is returned in an equivalent amount of ether.\\n     *\\n     * @param _setToken              Address of the SetToken to be issued\\n     * @param _amountSetToken        Amount of SetTokens to issue\\n     * @param _componentQuotes       The encoded 0x transactions to execute\\n     *\\n     * @return amountEthReturn       Amount of ether returned to the caller\\n     */\\n    function issueExactSetFromETH(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * Redeems an exact amount of SetTokens for an ERC20 token.\\n     * The SetToken must be approved by the sender to this contract.\\n     *\\n     * @param _setToken             Address of the SetToken being redeemed\\n     * @param _outputToken          Address of output token\\n     * @param _amountSetToken       Amount SetTokens to redeem\\n     * @param _minOutputReceive     Minimum amount of output token to receive\\n     * @param _componentQuotes      The encoded 0x transactions execute (components -> WETH).\\n     * @param _issuanceModule       Address of issuance Module to use\\n     * @param _isDebtIssuance       Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return outputAmount         Amount of output tokens sent to the caller\\n     */\\n    function redeemExactSetForToken(\\n        ISetToken _setToken,\\n        IERC20 _outputToken,\\n        uint256 _amountSetToken,\\n        uint256 _minOutputReceive,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external returns (uint256);\\n\\n    /**\\n     * Redeems an exact amount of SetTokens for ETH.\\n     * The SetToken must be approved by the sender to this contract.\\n     *\\n     * @param _setToken             Address of the SetToken being redeemed\\n     * @param _amountSetToken       Amount SetTokens to redeem\\n     * @param _minEthReceive        Minimum amount of Eth to receive\\n     * @param _componentQuotes      The encoded 0x transactions execute\\n     * @param _issuanceModule       Address of issuance Module to use\\n     * @param _isDebtIssuance       Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return outputAmount         Amount of output tokens sent to the caller\\n     */\\n    function redeemExactSetForETH(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        uint256 _minEthReceive,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external returns (uint256);\\n\\n    /**\\n     * Returns component positions required for issuance\\n     *\\n     * @param _issuanceModule    Address of issuance Module to use\\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     * @param _setToken          Set token to issue\\n     * @param _amountSetToken    Amount of set token to issue\\n     */\\n    function getRequiredIssuanceComponents(\\n        address _issuanceModule,\\n        bool _isDebtIssuance,\\n        ISetToken _setToken,\\n        uint256 _amountSetToken\\n    ) external view returns (address[] memory components, uint256[] memory positions);\\n\\n    /**\\n     * Returns component positions required for Redemption\\n     *\\n     * @param _issuanceModule    Address of issuance Module to use\\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     * @param _setToken          Set token to issue\\n     * @param _amountSetToken    Amount of set token to issue\\n     */\\n    function getRequiredRedemptionComponents(\\n        address _issuanceModule,\\n        bool _isDebtIssuance,\\n        ISetToken _setToken,\\n        uint256 _amountSetToken\\n    ) external view returns (address[] memory components, uint256[] memory positions);\\n}\\n\"\r\n    },\r\n    \"lib/permit2/src/interfaces/ISignatureTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer {\\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n    /// @param maxAmount The maximum amount a spender can request to transfer\\n    error InvalidAmount(uint256 maxAmount);\\n\\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n    error LengthMismatch();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n    struct TokenPermissions {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount that can be spent\\n        uint256 amount;\\n    }\\n\\n    /// @notice The signed permit message for a single token transfer\\n    struct PermitTransferFrom {\\n        TokenPermissions permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Specifies the recipient address and amount for batched transfers.\\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n    struct SignatureTransferDetails {\\n        // recipient address\\n        address to;\\n        // spender requested amount\\n        uint256 requestedAmount;\\n    }\\n\\n    /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n    /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n    /// @dev Note that a user still signs over a spender address\\n    struct PermitBatchTransferFrom {\\n        // the tokens and corresponding amounts permitted for a transfer\\n        TokenPermissions[] permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n    /// @dev It returns a uint256 bitmap\\n    /// @dev The index, or wordPosition is capped at type(uint248).max\\n    function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers multiple tokens using a signed permit message\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers multiple tokens using a signed permit message\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n    /// @dev The wordPos is maxed at type(uint248).max\\n    /// @param wordPos A number to index the nonceBitmap at\\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2021 Index Cooperative\\n *     Copyright 2023 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Index Cooperative found at\\n *\\n *     https://github.com/IndexCoop/index-coop-smart-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\n\\npragma solidity ^0.8.21.0;\\n\\nimport {IChamber} from \\\"chambers/interfaces/IChamber.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IIssuerWizard} from \\\"chambers/interfaces/IIssuerWizard.sol\\\";\\n\\ninterface ITradeIssuerV2 {\\n    /*//////////////////////////////////////////////////////////////\\n                               STRUCTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct ContractCallInstruction {\\n        address payable _target;\\n        address _allowanceTarget;\\n        IERC20 _sellToken;\\n        uint256 _sellAmount;\\n        IERC20 _buyToken;\\n        uint256 _minBuyAmount;\\n        bytes _callData;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event AllowedTargetAdded(address indexed _target);\\n\\n    event AllowedTargetRemoved(address indexed _targer);\\n\\n    event TradeIssuerTokenMinted(\\n        address indexed chamber,\\n        address indexed recipient,\\n        address indexed inputToken,\\n        uint256 totalTokensUsed,\\n        uint256 mintAmount\\n    );\\n\\n    event TradeIssuerTokenRedeemed(\\n        address indexed chamber,\\n        address indexed recipient,\\n        address indexed outputToken,\\n        uint256 totalTokensReturned,\\n        uint256 redeemAmount\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    error CannotAllowTarget();\\n\\n    error CannotRemoveTarget();\\n\\n    error InvalidTarget(address target);\\n\\n    error LowLevelFunctionCallFailed();\\n\\n    error OversoldBaseToken();\\n\\n    error RedeemedForLessTokens();\\n\\n    error TargetAlreadyAllowed();\\n\\n    error UnderboughtAsset(IERC20 asset, uint256 buyAmount);\\n\\n    error UnderboughtConstituent(IERC20 asset, uint256 buyAmount);\\n\\n    error ZeroChamberAmount();\\n\\n    error ZeroBalanceAsset();\\n\\n    error ZeroNativeTokenSent();\\n\\n    error ZeroRequiredAmount();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getAllowedTargets() external returns (address[] memory);\\n\\n    function isAllowedTarget(address _target) external returns (bool);\\n\\n    function addTarget(address _target) external;\\n\\n    function removeTarget(address _target) external;\\n\\n    function transferERC20ToOwner(address _tokenToWithdraw) external;\\n\\n    function transferEthToOwner() external;\\n\\n    function mintChamberFromToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        IERC20 _baseToken,\\n        uint256 _maxPayAmount,\\n        uint256 _chamberAmount\\n    ) external returns (uint256 baseTokenUsed);\\n\\n    function mintChamberFromNativeToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        uint256 _chamberAmount\\n    ) external payable returns (uint256 wrappedNativeTokenUsed);\\n\\n    function redeemChamberToToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        IERC20 _baseToken,\\n        uint256 _minReceiveAmount,\\n        uint256 _chamberAmount\\n    ) external returns (uint256 baseTokenReturned);\\n\\n    function redeemChamberToNativeToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        uint256 _minReceiveAmount,\\n        uint256 _chamberAmount\\n    ) external returns (uint256 wrappedNativeTokenReturned);\\n}\\n\"\r\n    },\r\n    \"lib/chambers/src/interfaces/IChamber.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.21.0;\\n\\ninterface IChamber {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ENUMS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    enum ChamberState {\\n        LOCKED,\\n        UNLOCKED\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ManagerAdded(address indexed _manager);\\n\\n    event ManagerRemoved(address indexed _manager);\\n\\n    event ConstituentAdded(address indexed _constituent);\\n\\n    event ConstituentRemoved(address indexed _constituent);\\n\\n    event WizardAdded(address indexed _wizard);\\n\\n    event WizardRemoved(address indexed _wizard);\\n\\n    event AllowedContractAdded(address indexed _allowedContract);\\n\\n    event AllowedContractRemoved(address indexed _allowedContract);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CHAMBER MANAGEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addConstituent(address _constituent) external;\\n\\n    function removeConstituent(address _constituent) external;\\n\\n    function isManager(address _manager) external view returns (bool);\\n\\n    function isWizard(address _wizard) external view returns (bool);\\n\\n    function isConstituent(address _constituent) external view returns (bool);\\n\\n    function addManager(address _manager) external;\\n\\n    function removeManager(address _manager) external;\\n\\n    function addWizard(address _wizard) external;\\n\\n    function removeWizard(address _wizard) external;\\n\\n    function getConstituentsAddresses() external view returns (address[] memory);\\n\\n    function getQuantities() external view returns (uint256[] memory);\\n\\n    function getConstituentQuantity(address _constituent) external view returns (uint256);\\n\\n    function getWizards() external view returns (address[] memory);\\n\\n    function getManagers() external view returns (address[] memory);\\n\\n    function getAllowedContracts() external view returns (address[] memory);\\n\\n    function mint(address _recipient, uint256 _quantity) external;\\n\\n    function burn(address _from, uint256 _quantity) external;\\n\\n    function withdrawTo(address _constituent, address _recipient, uint256 _quantity) external;\\n\\n    function updateQuantities() external;\\n\\n    function lockChamber() external;\\n\\n    function unlockChamber() external;\\n\\n    function addAllowedContract(address target) external;\\n\\n    function removeAllowedContract(address target) external;\\n\\n    function isAllowedContract(address _target) external returns (bool);\\n\\n    function executeTrade(\\n        address _sellToken,\\n        uint256 _sellQuantity,\\n        address _buyToken,\\n        uint256 _minBuyQuantity,\\n        bytes memory _data,\\n        address payable _target,\\n        address _allowanceTarget\\n    ) external returns (uint256 tokenAmountBought);\\n}\\n\"\r\n    },\r\n    \"lib/chambers/src/interfaces/IIssuerWizard.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.21.0;\\n\\nimport {IChamber} from \\\"./IChamber.sol\\\";\\n\\ninterface IIssuerWizard {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ChamberTokenIssued(address indexed chamber, address indexed recipient, uint256 quantity);\\n\\n    event ChamberTokenRedeemed(\\n        address indexed chamber, address indexed recipient, uint256 quantity\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getConstituentsQuantitiesForIssuance(IChamber chamber, uint256 mintQuantity)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getConstituentsQuantitiesForRedeem(IChamber chamber, uint256 redeemQuantity)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function issue(IChamber chamber, uint256 quantity) external;\\n\\n    function redeem(IChamber _chamber, uint256 _quantity) external;\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/WETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\n\\n/// @notice Minimalist and modern Wrapped Ether implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/WETH.sol)\\n/// @author Inspired by WETH9 (https://github.com/dapphub/ds-weth/blob/master/src/weth9.sol)\\ncontract WETH is ERC20(\\\"Wrapped Ether\\\", \\\"WETH\\\", 18) {\\n    using SafeTransferLib for address;\\n\\n    event Deposit(address indexed from, uint256 amount);\\n\\n    event Withdrawal(address indexed to, uint256 amount);\\n\\n    function deposit() public payable virtual {\\n        _mint(msg.sender, msg.value);\\n\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n\\n        msg.sender.safeTransferETH(amount);\\n    }\\n\\n    receive() external payable virtual {\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGasworks.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2023 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\n\\npragma solidity ^0.8.21.0;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\nimport { ISignatureTransfer } from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ITradeIssuerV2 } from \\\"chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\\\";\\nimport { IChamber } from \\\"chambers/interfaces/IChamber.sol\\\";\\nimport { IIssuerWizard } from \\\"chambers/interfaces/IIssuerWizard.sol\\\";\\nimport { ITradeIssuerV2 } from \\\"chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\\\";\\n\\ninterface IGasworks {\\n    /*//////////////////////////////////////////////////////////////\\n                              STRUCTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct SwapData {\\n        // The `buyTokenAddress` field from the API response.\\n        address buyToken;\\n        // The `buyAmount` field from the API response.\\n        uint256 buyAmount;\\n        // The `value` field from the API response.\\n        uint256 nativeTokenAmount;\\n        // The `to` field from the API response.\\n        address payable swapTarget;\\n        // The `allowanceTarget` field from the API response.\\n        address swapAllowanceTarget;\\n        // The `data` field from the API response.\\n        bytes swapCallData;\\n    }\\n\\n    struct SwapCallInstruction {\\n        address sellToken;\\n        uint256 sellAmount;\\n        address buyToken;\\n        uint256 minBuyAmount;\\n        address swapTarget;\\n        address swapAllowanceTarget;\\n        bytes swapCallData;\\n    }\\n\\n    struct MintData {\\n        // The address of the chamber to mint\\n        address archToken;\\n        // The amount of Chamber to mint\\n        uint256 archTokenAmount;\\n        // The address of the token used to mint\\n        address inputToken;\\n        // Maximum amount of baseToken to use to mint\\n        uint256 inputTokenMaxAmount;\\n        // The address of the issuer wizard that will mint the Chamber\\n        address issuer;\\n        // Intructions to pass the TradeIssuer\\n        SwapCallInstruction[] swapCallInstructions;\\n    }\\n\\n    struct RedeemData {\\n        // The address of the chamber to redeem\\n        address archToken;\\n        // The amount of Chamber to redeem\\n        uint256 archTokenAmount;\\n        // The address of the token used to mint\\n        address outputToken;\\n        // Min amount of baseToken to receive after redemption\\n        uint256 outputTokenMinAmount;\\n        // The address of the issuer wizard that will mint the Chamber\\n        address issuer;\\n        // Intructions to pass the TradeIssuer\\n        SwapCallInstruction[] swapCallInstructions;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Withdrawn(address token, uint256 amount);\\n\\n    event SwapWithPermit(\\n        address buyToken, uint256 buyAmount, address sellToken, uint256 sellAmount\\n    );\\n\\n    event MintWithPermit2(\\n        address tokenMinted, uint256 amountMinted, address tokenPaid, uint256 amountPaid\\n    );\\n\\n    event RedeemWithPermit2(\\n        address tokenRedeemed, uint256 amountRedeemed, address tokenBought, uint256 amountBought\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    error InvalidToken(address token);\\n\\n    error ZeroBalance(address token);\\n\\n    error SwapCallFailed();\\n\\n    error Underbought(address token, uint256 amountToBuy);\\n\\n    error TransferFailed(address recipient, uint256 amount, bytes returnData);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setTokens(address token) external;\\n\\n    function swapWithPermit2(\\n        ISignatureTransfer.PermitTransferFrom memory permit2,\\n        address owner,\\n        bytes calldata signature,\\n        SwapData calldata swapData\\n    ) external;\\n\\n    function mintWithPermit2(\\n        ISignatureTransfer.PermitTransferFrom memory permit2,\\n        address owner,\\n        bytes calldata signature,\\n        MintData calldata mintData\\n    ) external;\\n\\n    function redeemWithPermit2(\\n        ISignatureTransfer.PermitTransferFrom memory permit2,\\n        address owner,\\n        bytes calldata signature,\\n        RedeemData calldata redeemData,\\n        bool toNative\\n    ) external;\\n\\n    function withdrawTokenBalance(ERC20 token) external;\\n}\"\r\n    },\r\n    \"lib/gsn/packages/contracts/src/interfaces/IERC2771Recipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.21.0;\\n\\ninterface IController {\\n    function addSet(address _setToken) external;\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function getModuleFee(address _module, uint256 _feeType) external view returns (uint256);\\n\\n    function isModule(address _module) external view returns (bool);\\n\\n    function isSet(address _setToken) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function resourceId(uint256 _id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"gsn/=lib/gsn/packages/contracts/src/\",\r\n      \"paymasters/=lib/gsn/packages/paymasters/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/\",\r\n      \"@opengsn/=node_modules/@opengsn/\",\r\n      \"indexcoop/=lib/index-coop-smart-contracts/contracts/exchangeIssuance/\",\r\n      \"permit2/=lib/permit2/\",\r\n      \"chambers-peripherals/=lib/chambers-peripherals/\",\r\n      \"chambers/=lib/chambers/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\r\n      \"index-coop-smart-contracts/=lib/index-coop-smart-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeIssuance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradeIssuer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"}],\"name\":\"Underbought\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ZeroBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenMinted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenPaid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"MintWithPermit2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRedeemed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBought\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"RedeemWithPermit2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"SwapWithPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WMATIC\",\"outputs\":[{\"internalType\":\"contract WETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"archToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"archTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAllowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct IGasworks.SwapCallInstruction[]\",\"name\":\"swapCallInstructions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGasworks.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"concatenatedHashedSwapCallInstructions\",\"type\":\"bytes32\"}],\"name\":\"calculateMintDataTypeWitness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"archToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"archTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputTokenMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAllowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct IGasworks.SwapCallInstruction[]\",\"name\":\"swapCallInstructions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGasworks.RedeemData\",\"name\":\"redeemData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"concatenatedHashedSwapCallInstructions\",\"type\":\"bytes32\"}],\"name\":\"calculateRedeemDataTypeWitness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeIssuance\",\"outputs\":[{\"internalType\":\"contract IExchangeIssuanceZeroEx\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAllowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct IGasworks.SwapCallInstruction[]\",\"name\":\"swapCallInstructions\",\"type\":\"tuple[]\"}],\"name\":\"hashSwapCallInstructionAndConvertToTraderIssuerCallInstruction\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ITradeIssuerV2.ContractCallInstruction[]\",\"name\":\"contractCallInstructions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"concatenatedHashedSwapCallInstructions\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit2\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"archToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"archTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAllowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct IGasworks.SwapCallInstruction[]\",\"name\":\"swapCallInstructions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGasworks.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"}],\"name\":\"mintWithPermit2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit2\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"archToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"archTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputTokenMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAllowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct IGasworks.SwapCallInstruction[]\",\"name\":\"swapCallInstructions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGasworks.RedeemData\",\"name\":\"redeemData\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"name\":\"redeemWithPermit2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureTransfer\",\"outputs\":[{\"internalType\":\"contract ISignatureTransfer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit2\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAllowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct IGasworks.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"swapWithPermit2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeIssuer\",\"outputs\":[{\"internalType\":\"contract ITradeIssuerV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Gasworks", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000da78a11fd57af7be2edd804840ea7f4c2a38801d0000000000000000000000001c0c05a2aa31692e5dc9511b04f651db9e4d83200000000000000000000000002b13d2b9407d5776b0bb63c8cd144978b6b7ce58", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}