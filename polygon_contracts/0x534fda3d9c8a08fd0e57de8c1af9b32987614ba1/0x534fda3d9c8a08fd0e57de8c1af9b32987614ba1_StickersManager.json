{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/stickers/StickersManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IPookyball, PookyballMetadata, PookyballRarity } from \\\"@/pookyball/IPookyball.sol\\\";\\nimport { IStickers } from \\\"@/stickers/IStickers.sol\\\";\\nimport { IStickersController } from \\\"@/stickers/IStickersController.sol\\\";\\n\\n/// @title StickersManager\\n/// @author Mathieu Bour for Pooky Labs Ltd.\\n///\\n/// @dev Implementation of the manager that allows end users to attach or replace stickers to Pookyballs.\\ncontract StickersManager {\\n  IStickers public immutable stickers;\\n  IPookyball public immutable pookyball;\\n  IStickersController public immutable controller;\\n\\n  error OwnershipRequired(address token, uint256 tokenId);\\n  error InsufficientFreeSlot(uint256 pookyballId);\\n\\n  constructor(IStickersController _controller) {\\n    controller = _controller;\\n    stickers = _controller.stickers();\\n    pookyball = _controller.pookyball();\\n  }\\n\\n  modifier checkOwnership(uint256 stickerId, uint256 pookyballId) {\\n    if (stickers.ownerOf(stickerId) != msg.sender) {\\n      revert OwnershipRequired(address(stickers), stickerId);\\n    }\\n\\n    if (pookyball.ownerOf(pookyballId) != msg.sender) {\\n      revert OwnershipRequired(address(pookyball), pookyballId);\\n    }\\n\\n    _;\\n  }\\n\\n  function slots(uint256 pookyballId)\\n    public\\n    view\\n    returns (uint256 total, uint256 unlocked, uint256 free)\\n  {\\n    PookyballMetadata memory metadata = pookyball.metadata(pookyballId);\\n\\n    if (metadata.rarity == PookyballRarity.COMMON) {\\n      total = 4;\\n    } else if (metadata.rarity == PookyballRarity.RARE) {\\n      total = 6;\\n    } else if (metadata.rarity == PookyballRarity.EPIC) {\\n      total = 8;\\n    } else if (metadata.rarity == PookyballRarity.LEGENDARY) {\\n      total = 10;\\n    } else if (metadata.rarity == PookyballRarity.MYTHIC) {\\n      total = 12;\\n    }\\n\\n    unlocked = (metadata.level + 5) / 10;\\n    uint256 used = controller.slots(pookyballId).length;\\n\\n    // We might have some promotional offers that allow to unlock the slots before the Pookyball has reached the required level\\n    if (used > unlocked) {\\n      unlocked = used;\\n    }\\n\\n    free = unlocked - used;\\n  }\\n\\n  function attach(uint256 stickerId, uint256 pookyballId)\\n    external\\n    checkOwnership(stickerId, pookyballId)\\n  {\\n    (,, uint256 free) = slots(pookyballId);\\n\\n    if (free == 0) {\\n      revert InsufficientFreeSlot(pookyballId);\\n    }\\n\\n    controller.attach(stickerId, pookyballId);\\n  }\\n\\n  function replace(uint256 stickerId, uint256 previousStickerId, uint256 pookyballId)\\n    external\\n    checkOwnership(stickerId, pookyballId)\\n  {\\n    controller.replace(stickerId, previousStickerId, pookyballId);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/pookyball/IPookyball.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IAccessControl } from \\\"openzeppelin/access/IAccessControl.sol\\\";\\nimport { IERC721 } from \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport { IERC2981 } from \\\"openzeppelin/interfaces/IERC2981.sol\\\";\\n\\n/// @title PookyballMetadata\\n/// @notice The Pookyball rarities are represented on chain by this enum.\\nenum PookyballRarity {\\n  COMMON,\\n  RARE,\\n  EPIC,\\n  LEGENDARY,\\n  MYTHIC\\n}\\n\\n/// @title PookyballMetadata\\n/// @notice Pookyballs NFT have the following features:\\n/// - rarity: integer enum.\\n/// - level: token level, can be increase by spending token experiences points (PXP).\\n/// - pxp: token experience points.\\n/// - seed: a random uint256 word provided by Chainlink VRF service that will be used by Pooky's NFT generator\\n///     back-end to generate the NFT visuals and in-game statistics\\\\.\\nstruct PookyballMetadata {\\n  PookyballRarity rarity;\\n  uint256 level;\\n  uint256 pxp;\\n  uint256 seed;\\n}\\n\\n/// @title IPookyball\\n/// @author Mathieu Bour for Pooky Labs Ltd.\\n/// @notice Minimal Pookyball interface.\\ninterface IPookyball is IAccessControl, IERC2981, IERC721 {\\n  /// Fired when the seed of a Pookyball token is set by the VRFCoordinator\\n  event SeedSet(uint256 indexed tokenId, uint256 seed);\\n  /// Fired when the level of a Pookyball token is changed\\n  event LevelChanged(uint256 indexed tokenId, uint256 level);\\n  /// Fired when the PXP of a Pookyball token is changed\\n  event PXPChanged(uint256 indexed tokenId, uint256 amount);\\n\\n  /// Thrown when the length of two parameters mismatch. Used in the mint batched function.\\n  error ArgumentSizeMismatch(uint256 x, uint256 y);\\n\\n  /// @notice PookyballMetadata of the token {tokenId}.\\n  /// @dev Requirements:\\n  /// - Pookyball {tokenId} should exist (minted and not burned).\\n  function metadata(uint256 tokenId) external view returns (PookyballMetadata memory);\\n\\n  /// @notice Change the secondary sale royalties receiver address.\\n  function setERC2981Receiver(address newReceiver) external;\\n\\n  /// @notice Mint a new Pookyball token with a given rarity.\\n  function mint(address[] memory recipients, PookyballRarity[] memory rarities)\\n    external\\n    returns (uint256);\\n\\n  /// @notice Change the level of a Pookyball token.\\n  /// @dev Requirements:\\n  /// - Pookyball {tokenId} should exist (minted and not burned).\\n  function setLevel(uint256 tokenId, uint256 newLevel) external;\\n\\n  /// @notice Change the PXP of a Pookyball token.\\n  /// @dev Requirements:\\n  /// - Pookyball {tokenId} should exist (minted and not burned).\\n  function setPXP(uint256 tokenId, uint256 newPXP) external;\\n}\\n\"\r\n    },\r\n    \"src/stickers/IStickers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IBaseERC721A } from \\\"@/common/IBaseERC721A.sol\\\";\\n\\nenum StickerRarity {\\n  COMMON,\\n  RARE,\\n  EPIC,\\n  LEGENDARY,\\n  MYTHIC\\n}\\n\\nstruct StickerMint {\\n  address recipient;\\n  StickerRarity rarity;\\n}\\n\\nstruct StickerMetadata {\\n  uint248 level;\\n  StickerRarity rarity;\\n}\\n\\n/// @title IStickers\\n/// @author Mathieu Bour for Pooky Labs Ltd.\\ninterface IStickers is IBaseERC721A {\\n  /// Fired when the level of a Pookyball token is changed,\\n  event LevelChanged(uint256 indexed tokenId, uint256 level);\\n\\n  /// @notice StickerMetadata of the token {tokenId}.\\n  /// @dev Requirements:\\n  /// - Sticker {tokenId} should exist (minted and not burned).\\n  function metadata(uint256 tokenId) external view returns (StickerMetadata memory);\\n\\n  /// @notice Change the level of a Sticker token.\\n  /// @dev Requirements:\\n  /// - Sticker {tokenId} should exist (minted and not burned).\\n  function setLevel(uint256 tokenId, uint248 newLevel) external;\\n\\n  /// @notice Mint multiple Stickers at once.\\n  /// @param recipient The mint recipient.\\n  /// @param rarities The Sticker rarities.\\n  function mint(address recipient, StickerRarity[] memory rarities) external;\\n}\\n\"\r\n    },\r\n    \"src/stickers/IStickersController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IPookyball } from \\\"@/pookyball/IPookyball.sol\\\";\\nimport { IStickers } from \\\"@/stickers/IStickers.sol\\\";\\n\\n/// @notice IStickersController\\n/// @author Mathieu Bour for Pooky Labs Ltd.\\ninterface IStickersController {\\n  /// @notice Fired when a sticker is attached to a Pookyball.\\n  event StickerAttached(uint256 stickerId, uint256 pookyballId);\\n  /// @notice Fired when a sticker is replace from a Pookyball.\\n  event StickerReplaced(uint256 stickerId, uint256 previousStickerId, uint256 pookyballId);\\n  /// @notice Fired when a sticker is detached from a Pookyball.\\n  event StickerDetached(uint256 stickerId, uint256 pookyballId);\\n\\n  /// @notice Thrown when a sticker is invalid.\\n  error InvalidSticker(uint256 stickerId);\\n\\n  /// @notice The Stickers ERC-721 contract.\\n  function stickers() external view returns (IStickers);\\n\\n  /// @notice The Pookyball ERC-721 contract.\\n  function pookyball() external view returns (IPookyball);\\n\\n  /// @notice Get the Pookyball token id linked to a Sticker.\\n  /// @param stickerId The Sticker token id.\\n  function attachedTo(uint256 stickerId) external view returns (uint256);\\n\\n  /// @notice Get the Stickers token ids attahced to a Pookyball.\\n  /// @param pookyballId The Pookyball token id.\\n  function slots(uint256 pookyballId) external view returns (uint256[] memory);\\n\\n  /// @notice Attach a sticker to a Pookyball.\\n  /// @param stickerId The sticker token id.\\n  /// @param pookyballId The Pookyball token id.\\n  /// @dev Caution: no ownership checks are run.\\n  function attach(uint256 stickerId, uint256 pookyballId) external;\\n\\n  /// @notice Replace a sticker from a Pookyball, burning the previous one.\\n  /// @param stickerId The sticker token id.\\n  /// @param previousStickerId The previous sticker token id that will be burned.\\n  /// @param pookyballId The Pookyball token id.\\n  /// @dev Caution: no ownership checks are run.\\n  function replace(uint256 stickerId, uint256 previousStickerId, uint256 pookyballId) external;\\n\\n  /// @notice Detach (remove) a sticker from a Pookyball.\\n  /// @param stickerId The Sstickerticker token id.\\n  /// @param recepient The address when to send the detached sticker.\\n  function detach(uint256 stickerId, address recepient) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"src/common/IBaseERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IERC721A } from \\\"ERC721A/IERC721A.sol\\\";\\nimport { IERC721ABurnable } from \\\"ERC721A/extensions/IERC721ABurnable.sol\\\";\\nimport { IERC721AQueryable } from \\\"ERC721A/extensions/IERC721AQueryable.sol\\\";\\nimport { IERC165 } from \\\"openzeppelin/interfaces/IERC165.sol\\\";\\nimport { IERC2981 } from \\\"openzeppelin/interfaces/IERC2981.sol\\\";\\n\\n/// @title IBaseERC721\\n///\\n/// @author Mathieu Bour for Pooky Labs Ltd.\\ninterface IBaseERC721A is IERC165, IERC721A, IERC721ABurnable, IERC721AQueryable, IERC2981 {\\n  /// Fired when the seed of a Pookyball token is set by the VRFCoordinator,\\n  event SeedSet(uint256 indexed tokenId, uint256 seed);\\n\\n  /// Thrown when the token {tokenId} does not exist.\\n  error NonExistentToken(uint256 tokenId);\\n\\n  // ----- ERC721A patches -----\\n  /// @dev This allow to iterate over the token ids.\\n  function nextTokenId() external view returns (uint256);\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    view\\n    override(IERC165, IERC721A)\\n    returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/ERC721A/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"lib/ERC721A/contracts/extensions/IERC721ABurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721ABurnable.\\n */\\ninterface IERC721ABurnable is IERC721A {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"lib/ERC721A/contracts/extensions/IERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"operator-filter-registry/=lib/operator-filter-registry/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"@/=src/\",\r\n      \"@test/=test/\",\r\n      \"@script/=script/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IStickersController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pookyballId\",\"type\":\"uint256\"}],\"name\":\"InsufficientFreeSlot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OwnershipRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stickerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pookyballId\",\"type\":\"uint256\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IStickersController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pookyball\",\"outputs\":[{\"internalType\":\"contract IPookyball\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stickerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousStickerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pookyballId\",\"type\":\"uint256\"}],\"name\":\"replace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pookyballId\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stickers\",\"outputs\":[{\"internalType\":\"contract IStickers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StickersManager", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000075cc3c6329930758659ed87338b926c90e16d05f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}