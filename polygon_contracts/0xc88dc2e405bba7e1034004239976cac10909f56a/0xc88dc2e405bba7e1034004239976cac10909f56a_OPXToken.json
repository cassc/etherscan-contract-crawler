{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BlackList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract BlackList is Ownable {\\r\\n\\r\\n    mapping (address => bool) public isBlackListed;\\r\\n\\r\\n    /////// Getter to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\r\\n    function getBlackListStatus(address _maker) external view returns (bool) {\\r\\n        return isBlackListed[_maker];\\r\\n    }\\r\\n\\r\\n    function addBlackList (address _evilUser) public onlyOwner {\\r\\n        isBlackListed[_evilUser] = true;\\r\\n        emit AddedBlackList(_evilUser);\\r\\n    }\\r\\n\\r\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\r\\n        isBlackListed[_clearedUser] = false;\\r\\n        emit RemovedBlackList(_clearedUser);\\r\\n    }\\r\\n\\r\\n    event AddedBlackList(address indexed _user);\\r\\n\\r\\n    event RemovedBlackList(address indexed _user);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/OPXToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./BlackList.sol\\\";\\r\\n\\r\\ninterface ERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Issue(uint256 amount);\\r\\n    event Redeem(uint256 amount);\\r\\n    event DestroyedBlackFunds(address indexed _blackListedUser, uint _balance);\\r\\n}\\r\\n\\r\\ninterface UpgradedStandardToken {\\r\\n    // those methods are called by the legacy contract\\r\\n    // and they must ensure msg.sender to be the contract address\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transferByLegacy(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferFromByLegacy(\\r\\n        address sender,\\r\\n        address from,\\r\\n        address spender,\\r\\n        uint value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function approveByLegacy(\\r\\n        address from,\\r\\n        address spender,\\r\\n        uint value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract OPXToken is ERC20, BlackList, Pausable {\\r\\n    address public upgradedAddress;\\r\\n    bool public deprecated;\\r\\n\\r\\n    string public constant name = \\\"OPX Token\\\";\\r\\n    string public constant symbol = \\\"OPX\\\";\\r\\n    address private _owner;\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    mapping(address => uint256) balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) allowed;\\r\\n\\r\\n    uint256 totalSupply_ = 1000000000 ether;\\r\\n\\r\\n    constructor() {\\r\\n        balances[msg.sender] = totalSupply_;\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return totalSupply_;\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address tokenOwner\\r\\n    ) public view override returns (uint256) {\\r\\n        if (deprecated) {\\r\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(tokenOwner);\\r\\n        }\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n\\r\\n    function oldBalanceOf(address tokenOwner) public view returns (uint) {\\r\\n        if (deprecated) {\\r\\n            return balances[tokenOwner];\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address receiver,\\r\\n        uint256 numTokens\\r\\n    ) public override whenNotPaused returns (bool) {\\r\\n        require(!isBlackListed[msg.sender]);\\r\\n        if (deprecated) {\\r\\n            return\\r\\n                UpgradedStandardToken(upgradedAddress).transferByLegacy(\\r\\n                    msg.sender,\\r\\n                    receiver,\\r\\n                    numTokens\\r\\n                );\\r\\n        }\\r\\n\\r\\n        require(numTokens <= balances[msg.sender]);\\r\\n        balances[msg.sender] -= numTokens;\\r\\n        balances[receiver] += numTokens;\\r\\n        emit Transfer(msg.sender, receiver, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address delegate,\\r\\n        uint256 numTokens\\r\\n    ) public override whenNotPaused returns (bool) {\\r\\n        if (deprecated) {\\r\\n            return\\r\\n                UpgradedStandardToken(upgradedAddress).approveByLegacy(\\r\\n                    msg.sender,\\r\\n                    delegate,\\r\\n                    numTokens\\r\\n                );\\r\\n        }\\r\\n        allowed[msg.sender][delegate] = numTokens;\\r\\n        emit Approval(msg.sender, delegate, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address delegate\\r\\n    ) public view override returns (uint) {\\r\\n        if (deprecated) {\\r\\n            return ERC20(upgradedAddress).allowance(owner, delegate);\\r\\n        }\\r\\n        return allowed[owner][delegate];\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address owner,\\r\\n        address buyer,\\r\\n        uint256 numTokens\\r\\n    ) public override whenNotPaused returns (bool) {\\r\\n        require(!isBlackListed[msg.sender]);\\r\\n        if (deprecated) {\\r\\n            return\\r\\n                UpgradedStandardToken(upgradedAddress).transferFromByLegacy(\\r\\n                    msg.sender,\\r\\n                    owner,\\r\\n                    buyer,\\r\\n                    numTokens\\r\\n                );\\r\\n        }\\r\\n\\r\\n        require(numTokens <= balances[owner]);\\r\\n        require(numTokens <= allowed[owner][msg.sender]);\\r\\n\\r\\n        balances[owner] -= numTokens;\\r\\n        allowed[owner][msg.sender] -= numTokens;\\r\\n        balances[buyer] += numTokens;\\r\\n        emit Transfer(owner, buyer, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function governanceTransfer(\\r\\n        address owner,\\r\\n        address buyer,\\r\\n        uint256 numTokens\\r\\n    ) public whenNotPaused onlyGovernors returns (bool) {\\r\\n        require(!isBlackListed[owner]);\\r\\n        require(numTokens <= balances[owner]);\\r\\n\\r\\n        balances[owner] -= numTokens;\\r\\n        balances[buyer] += numTokens;\\r\\n        emit Transfer(owner, buyer, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function issue(uint amount) public onlyOwner {\\r\\n        balances[owner] += amount;\\r\\n        totalSupply_ += amount;\\r\\n        emit Issue(amount);\\r\\n        emit Transfer(address(0), owner, amount);\\r\\n    }\\r\\n\\r\\n    function redeem(uint amount) public onlyOwner {\\r\\n        balances[owner] -= amount;\\r\\n        totalSupply_ -= amount;\\r\\n        emit Redeem(amount);\\r\\n        emit Transfer(owner, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\\r\\n        require(isBlackListed[_blackListedUser]);\\r\\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\\r\\n        balances[_blackListedUser] = 0;\\r\\n        totalSupply_ -= dirtyFunds;\\r\\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n    mapping(address => bool) public isGovernor;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernors() {\\r\\n        require(\\r\\n            isGovernor[msg.sender] == true || msg.sender == owner,\\r\\n            \\\"Not a governor.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function giveGovernance(address governor) public onlyOwner {\\r\\n        isGovernor[governor] = true;\\r\\n    }\\r\\n\\r\\n    function revokeGovernance(address governor) public onlyOwner {\\r\\n        isGovernor[governor] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to pause, triggers stopped state\\r\\n     */\\r\\n    function pause() public onlyOwner whenNotPaused {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to unpause, returns to normal state\\r\\n     */\\r\\n    function unpause() public onlyOwner whenPaused {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"giveGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"governanceTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"oldBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"revokeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OPXToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}