{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-03-06\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n/*\r\n\r\n      ___           ___           ___          _____                        ___                    ___           ___           ___                       ___     \r\n     /  /\\         /  /\\         /__/\\        /  /::\\                      /  /\\                  /  /\\         /  /\\         /__/\\        ___          /  /\\    \r\n    /  /:/        /  /::\\        \\  \\:\\      /  /:/\\:\\                    /  /:/_                /  /:/_       /  /:/_        \\  \\:\\      /  /\\        /  /:/_   \r\n   /  /:/        /  /:/\\:\\        \\  \\:\\    /  /:/  \\:\\   ___     ___    /  /:/ /\\              /  /:/ /\\     /  /:/ /\\        \\  \\:\\    /  /:/       /  /:/ /\\  \r\n  /  /:/  ___   /  /:/~/::\\   _____\\__\\:\\  /__/:/ \\__\\:| /__/\\   /  /\\  /  /:/ /:/_            /  /:/_/::\\   /  /:/ /:/_   _____\\__\\:\\  /__/::\\      /  /:/ /:/_ \r\n /__/:/  /  /\\ /__/:/ /:/\\:\\ /__/::::::::\\ \\  \\:\\ /  /:/ \\  \\:\\ /  /:/ /__/:/ /:/ /\\          /__/:/__\\/\\:\\ /__/:/ /:/ /\\ /__/::::::::\\ \\__\\/\\:\\__  /__/:/ /:/ /\\\r\n \\  \\:\\ /  /:/ \\  \\:\\/:/__\\/ \\  \\:\\~~\\~~\\/  \\  \\:\\  /:/   \\  \\:\\  /:/  \\  \\:\\/:/ /:/          \\  \\:\\ /~~/:/ \\  \\:\\/:/ /:/ \\  \\:\\~~\\~~\\/    \\  \\:\\/\\ \\  \\:\\/:/ /:/\r\n  \\  \\:\\  /:/   \\  \\::/       \\  \\:\\  ~~~    \\  \\:\\/:/     \\  \\:\\/:/    \\  \\::/ /:/            \\  \\:\\  /:/   \\  \\::/ /:/   \\  \\:\\  ~~~      \\__\\::/  \\  \\::/ /:/ \r\n   \\  \\:\\/:/     \\  \\:\\        \\  \\:\\         \\  \\::/       \\  \\::/      \\  \\:\\/:/              \\  \\:\\/:/     \\  \\:\\/:/     \\  \\:\\          /__/:/    \\  \\:\\/:/  \r\n    \\  \\::/       \\  \\:\\        \\  \\:\\         \\__\\/         \\__\\/        \\  \\::/                \\  \\::/       \\  \\::/       \\  \\:\\         \\__\\/      \\  \\::/   \r\n     \\__\\/         \\__\\/         \\__\\/                                     \\__\\/                  \\__\\/         \\__\\/         \\__\\/                     \\__\\/    \r\n     \r\n                                                                              \r\n                                                                 CANDLE GENIE ADVANCED PREDICTIONS V1\ud83d\uddf2      \r\n                                                                      \r\n                                                                        https://candlegenie.io\r\n\r\n\r\n*/\r\n\r\n\r\n//CONTEXT\r\nabstract contract Context \r\n{\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// REENTRANCY GUARD\r\nabstract contract ReentrancyGuard \r\n{\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n//OWNABLE\r\nabstract contract Ownable is Context \r\n{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() { address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function OwnershipTransfer(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function OwnershipRenounce() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n//PAUSABLE\r\nabstract contract Pausable is Context \r\n{\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n   function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n    }\r\n\r\n}\r\n\r\n// ADDRESS\r\nlibrary Address {\r\n   \r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value,string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data,string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target,bytes memory data,string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(bool success,bytes memory returndata,string memory errorMessage) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// IERC20\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SAFEERC20\r\nlibrary SafeIERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token,address to,uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token,address from, address to,uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n\r\n    function safeApprove(IERC20 token,address spender,uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token,address spender,uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n//CONTRACT\r\ncontract CandleGenieAdvancedPredictions is Ownable, Pausable, ReentrancyGuard \r\n{\r\n    // TOKENS\r\n    using SafeIERC20 for IERC20;\r\n\r\n\r\n    // EPOCHES\r\n    uint256 public depositEpoch;\r\n\r\n    struct DepositStruct {\r\n        address user;\r\n        uint256 amount;\r\n        address token;\r\n    }\r\n\r\n    // -----------------------------------\r\n    // MAPPINGS --------------------------\r\n    // -----------------------------------\r\n    mapping(uint256 => DepositStruct) public Deposits;\r\n    mapping(address => mapping(uint256 => bool)) public Withdraws; \r\n    mapping(address => bool) public AllowedTokens; \r\n\r\n    // Payable\r\n    receive() external payable {\r\n    }\r\n\r\n    // -----------------------------------\r\n    // MODIFIERS -------------------------\r\n    // -----------------------------------\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contracts not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contracts not allowed\");\r\n        _;\r\n    }\r\n\r\n    // -----------------------------------\r\n    // INTERNAL FUNCTIONS ----------------\r\n    // -----------------------------------\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n    \r\n\r\n    // -----------------------------------\r\n    // OWNER FUNCTIONS -------------------\r\n    // -----------------------------------\r\n    function FundsInject() external payable onlyOwner {}\r\n    \r\n    function FundsExtract(uint256 amount) external onlyOwner \r\n    {\r\n        (bool sent, ) = payable(owner()).call{value: amount}(\"\");\r\n        require(sent, \"Transfer failed.\");\r\n    }\r\n    function FundsExtractAll() external onlyOwner \r\n    {\r\n        (bool sent, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n        require(sent, \"Transfer failed.\");\r\n    }\r\n\r\n    function TokenExtract(address token, uint256 amount) external onlyOwner {\r\n          IERC20(token).safeTransfer(owner(), amount);\r\n    }\r\n\r\n    function TokenExtractAll(address token) external onlyOwner {\r\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).safeTransfer(owner(), tokenBalance);\r\n    }\r\n\r\n    function TokenAllow(address token, bool allowed) external onlyOwner {\r\n       AllowedTokens[token] = allowed;\r\n    }\r\n\r\n    function Withdraw(address user,  uint256 id, uint256 amount) external onlyOwner {\r\n        (bool sent, ) = payable(user).call{value: amount}(\"\");\r\n        require(sent, \"Transfer failed.\");\r\n        Withdraws[user][id] = true;\r\n    }\r\n\r\n    function WithdrawToken(address token, address user, uint256 id, uint256 amount) external onlyOwner {\r\n        require(token != address(0), \"Invalid token !\");\r\n        IERC20(token).safeTransfer(user, amount);\r\n        Withdraws[user][id] = true;\r\n    }\r\n\r\n    // -----------------------------------\r\n    // USER FUNCTIONS --------------------\r\n    // -----------------------------------\r\n    function Deposit() external payable whenNotPaused nonReentrant notContract {\r\n        require(msg.value > 0, \"Invalid amount !\");\r\n        DepositStruct storage deposit = Deposits[depositEpoch++];\r\n        deposit.user = msg.sender;\r\n        deposit.amount = msg.value;\r\n    }\r\n\r\n    function DepositToken(address token, uint256 amount) external whenNotPaused nonReentrant notContract {\r\n        require(token != address(0), \"Invalid token !\");\r\n        require(AllowedTokens[token], \"Token is not allowed !\");\r\n        require(amount > 0, \"Invalid amount !\");\r\n\r\n        // Transfer\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // Store\r\n        DepositStruct storage deposit = Deposits[depositEpoch++];\r\n        deposit.user = msg.sender;\r\n        deposit.amount = amount;\r\n        deposit.token = token;\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsExtract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FundsExtractAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FundsInject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OwnershipRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"TokenAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenExtract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenExtractAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraws\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CandleGenieAdvancedPredictions", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66fdb1d91e181ebfa2d90bbb875e23741724da77ac07703ed3e071c038cf808d"}