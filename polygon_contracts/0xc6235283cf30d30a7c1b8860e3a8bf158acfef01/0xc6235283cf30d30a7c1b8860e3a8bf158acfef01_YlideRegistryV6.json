{"SourceCode": "/**\r\n *Submitted for verification at gnosisscan.io on 2023-03-17\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function terminate() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n}\r\ncontract Terminatable is Owned {\r\n    uint256 public terminationBlock;\r\n    uint256 public creationBlock;\r\n\r\n    constructor() {\r\n        terminationBlock = 0;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    modifier notTerminated() {\r\n        if (terminationBlock != 0 && block.number >= terminationBlock) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // intendedly left non-blocked to allow reassignment of termination block\r\n    function gracefullyTerminateAt(uint256 blockNumber) public onlyOwner {\r\n        terminationBlock = blockNumber;\r\n    }\r\n}\r\ncontract BlockNumberRingBufferIndex {\r\n    \r\n    uint256 constant empty0 = 0x00ff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty1 = 0x00ffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty2 = 0x00ffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty3 = 0x00ffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty4 = 0x00ffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff;\r\n    uint256 constant empty5 = 0x00ffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\r\n    uint256 constant empty6 = 0x00ffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\r\n    uint256 constant empty7 = 0x00ffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\r\n    uint256 constant empty8 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffff;\r\n    uint256 constant empty9 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000;\r\n\r\n    uint256 constant indexF = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 constant index1 = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index2 = 0x0200000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index3 = 0x0300000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index4 = 0x0400000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index5 = 0x0500000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index6 = 0x0600000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index7 = 0x0700000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index8 = 0x0800000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index9 = 0x0900000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 constant shift024 = 0x0000000000000000000000000000000000000000000000000000000001000000;\r\n    uint256 constant shift048 = 0x0000000000000000000000000000000000000000000000000001000000000000;\r\n    uint256 constant shift072 = 0x0000000000000000000000000000000000000000000001000000000000000000;\r\n    uint256 constant shift096 = 0x0000000000000000000000000000000000000001000000000000000000000000;\r\n    uint256 constant shift120 = 0x0000000000000000000000000000000001000000000000000000000000000000;\r\n    uint256 constant shift144 = 0x0000000000000000000000000001000000000000000000000000000000000000;\r\n    uint256 constant shift168 = 0x0000000000000000000001000000000000000000000000000000000000000000;\r\n    uint256 constant shift192 = 0x0000000000000001000000000000000000000000000000000000000000000000;\r\n    uint256 constant shift216 = 0x0000000001000000000000000000000000000000000000000000000000000000;\r\n\r\n    function storeBlockNumber(uint256 indexValue, uint256 blockNumber) public pure returns (uint256) {\r\n        blockNumber = blockNumber & 0xffffff; // 3 bytes\r\n        uint256 currIdx = indexValue & indexF;\r\n        if (currIdx == 0) {\r\n            return (indexValue & empty1) | index1 | (blockNumber * shift192);\r\n        } else\r\n        if (currIdx == index1) {\r\n            return (indexValue & empty2) | index2 | (blockNumber * shift168);\r\n        } else\r\n        if (currIdx == index2) {\r\n            return (indexValue & empty3) | index3 | (blockNumber * shift144);\r\n        } else\r\n        if (currIdx == index3) {\r\n            return (indexValue & empty4) | index4 | (blockNumber * shift120);\r\n        } else\r\n        if (currIdx == index4) {\r\n            return (indexValue & empty5) | index5 | (blockNumber * shift096);\r\n        } else\r\n        if (currIdx == index5) {\r\n            return (indexValue & empty6) | index6 | (blockNumber * shift072);\r\n        } else\r\n        if (currIdx == index6) {\r\n            return (indexValue & empty7) | index7 | (blockNumber * shift048);\r\n        } else\r\n        if (currIdx == index7) {\r\n            return (indexValue & empty8) | index8 | (blockNumber * shift024);\r\n        } else\r\n        if (currIdx == index8) {\r\n            return (indexValue & empty9) | index9 | blockNumber;\r\n        } else {\r\n            return (indexValue & empty0) | (blockNumber * shift216);\r\n        }\r\n    }\r\n}\r\n\r\nstruct RegistryEntryV6 {\r\n    uint256 previousEventsIndex;\r\n    uint256 publicKey;\r\n    uint64 block;\r\n    uint64 timestamp;\r\n    uint32 keyVersion;\r\n    uint32 registrar;\r\n}\r\n\r\ncontract YlideRegistryV6 is Owned, Terminatable, BlockNumberRingBufferIndex {\r\n    uint256 public version = 6;\r\n\r\n    event KeyAttached(address indexed addr, uint256 publicKey, uint32 keyVersion, uint32 registrar, uint256 previousEventsIndex);\r\n    \r\n    mapping(address => RegistryEntryV6) public addressToPublicKey;\r\n    mapping(address => bool) public bonucers;\r\n\r\n    uint256 public newcomerBonus = 0;\r\n    uint256 public referrerBonus = 0;\r\n\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n\r\n    constructor() {\r\n        bonucers[msg.sender] = true;\r\n    }\r\n\r\n    function getPublicKey(address addr) view public returns (RegistryEntryV6 memory entry) {\r\n        entry = addressToPublicKey[addr];\r\n    }\r\n\r\n    modifier onlyBonucer() {\r\n        if (bonucers[msg.sender] != true) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setBonucer(address newBonucer, bool val) public onlyOwner notTerminated {\r\n        if (newBonucer != address(0)) {\r\n            bonucers[newBonucer] = val;\r\n        }\r\n    }\r\n\r\n    function setBonuses(uint256 _newcomerBonus, uint256 _referrerBonus) public onlyOwner notTerminated {\r\n        newcomerBonus = _newcomerBonus;\r\n        referrerBonus = _referrerBonus;\r\n    }\r\n\r\n    function uint256ToHex(bytes32 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(64);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function uint32ToHex(bytes4 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(8);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 4; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function uint64ToHex(bytes8 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(16);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 8; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function verifyMessage(bytes32 publicKey, uint8 _v, bytes32 _r, bytes32 _s, uint32 registrar, uint64 timestampLock) public view returns (address) {\r\n        if (timestampLock > block.timestamp) {\r\n            revert('Timestamp lock is in future');\r\n        }\r\n        if (block.timestamp - timestampLock > 5 * 60) {\r\n            revert('Timestamp lock is too old');\r\n        }\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n330\";\r\n        // (121 + 2) + (14 + 64 + 1) + (13 + 8 + 1) + (12 + 64 + 1) + (13 + 16 + 0)\r\n        bytes memory _msg = abi.encodePacked(\r\n            \"I authorize Ylide Faucet to publish my public key on my behalf to eliminate gas costs on my transaction for five minutes.\\n\\n\", \r\n            \"Public key: 0x\", uint256ToHex(publicKey), \"\\n\",\r\n            \"Registrar: 0x\", uint32ToHex(bytes4(registrar)), \"\\n\",\r\n            \"Chain ID: 0x\", uint256ToHex(bytes32(block.chainid)), \"\\n\",\r\n            \"Timestamp: 0x\", uint64ToHex(bytes8(timestampLock))\r\n        );\r\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _msg));\r\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\r\n        return signer;\r\n    }\r\n\r\n    receive() external payable {\r\n        // do nothing\r\n    }\r\n\r\n    function internalKeyAttach(address addr, uint256 publicKey, uint32 keyVersion, uint32 registrar) internal {\r\n        uint256 index = 0;\r\n        if (addressToPublicKey[addr].keyVersion != 0) {\r\n            index = storeBlockNumber(addressToPublicKey[addr].previousEventsIndex, addressToPublicKey[addr].block / 128);\r\n        }\r\n\r\n        addressToPublicKey[addr] = RegistryEntryV6(index, publicKey, uint64(block.number), uint64(block.timestamp), keyVersion, registrar);\r\n        emit KeyAttached(addr, publicKey, keyVersion, registrar, index);\r\n    }\r\n\r\n    function attachPublicKey(uint256 publicKey, uint32 keyVersion, uint32 registrar) public notTerminated {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n\r\n        internalKeyAttach(msg.sender, publicKey, keyVersion, registrar);\r\n    }\r\n\r\n    function attachPublicKeyByAdmin(uint8 _v, bytes32 _r, bytes32 _s, address payable addr, uint256 publicKey, uint32 keyVersion, uint32 registrar, uint64 timestampLock, address payable referrer, bool payBonus) external payable onlyBonucer notTerminated {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n        require(verifyMessage(bytes32(publicKey), _v, _r, _s, registrar, timestampLock) == addr, 'Signature does not match the user''s address');\r\n        require(referrer == address(0x0) || addressToPublicKey[referrer].keyVersion != 0, 'Referrer must be registered');\r\n        require(addr != address(0x0) && addressToPublicKey[addr].keyVersion == 0, 'Only new user key can be assigned by admin');\r\n\r\n        internalKeyAttach(addr, publicKey, keyVersion, registrar);\r\n\r\n        if (payBonus && newcomerBonus != 0) {\r\n            addr.transfer(newcomerBonus);\r\n        }\r\n        if (referrer != address(0x0) && referrerBonus != 0) {\r\n            referrer.transfer(referrerBonus);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicKey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"keyVersion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"registrar\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousEventsIndex\",\"type\":\"uint256\"}],\"name\":\"KeyAttached\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPublicKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"previousEventsIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKey\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"block\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"keyVersion\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"registrar\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"publicKey\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"keyVersion\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"registrar\",\"type\":\"uint32\"}],\"name\":\"attachPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKey\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"keyVersion\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"registrar\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestampLock\",\"type\":\"uint64\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"payBonus\",\"type\":\"bool\"}],\"name\":\"attachPublicKeyByAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonucers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPublicKey\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"previousEventsIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKey\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"block\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"keyVersion\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"registrar\",\"type\":\"uint32\"}],\"internalType\":\"struct RegistryEntryV6\",\"name\":\"entry\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"gracefullyTerminateAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newcomerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBonucer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setBonucer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newcomerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerBonus\",\"type\":\"uint256\"}],\"name\":\"setBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"storeBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"buffer\",\"type\":\"bytes32\"}],\"name\":\"uint256ToHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"buffer\",\"type\":\"bytes4\"}],\"name\":\"uint32ToHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"buffer\",\"type\":\"bytes8\"}],\"name\":\"uint64ToHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"publicKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"registrar\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestampLock\",\"type\":\"uint64\"}],\"name\":\"verifyMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YlideRegistryV6", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1f315331917db580464e398fb1eaa3632811ce1a299e673ee323f2b669c934e"}