{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bases/ArcBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Provides set of properties, functions, and modifiers to help with \\n * security and access control of extending contracts\\n */\\ncontract ArcBase is Ownable2Step, Pausable, ReentrancyGuard\\n{\\n    function pause() public onlyOwner\\n    {\\n        _pause();\\n    }\\n    \\n    function unpause() public onlyOwner\\n    {\\n        _unpause();\\n    }\\n\\n    function withdrawNative(address beneficiary) public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool sent, ) = beneficiary.call{value: amount}(\\\"\\\");\\n        require(sent, 'Unable to withdraw');\\n    }\\n\\n    function withdrawToken(address beneficiary, address token) public onlyOwner {\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(beneficiary, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IArc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IArc {\\n    function burn(uint amount) external;\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address _from, address _to, uint _value) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IHandler {\\n    function handleReceive(address target, bytes calldata payload) external;\\n    function handleSend(address target, bytes calldata payload) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRainbowRoad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IArc} from \\\"./IArc.sol\\\";\\n\\ninterface IRainbowRoad {\\n    \\n    function acceptTeam() external;\\n    function actionHandlers(string calldata action) external view returns (address);\\n    function arc() external view returns (IArc);\\n    function blockToken(address tokenAddress) external;\\n    function disableFeeManager(address feeManager) external;\\n    function disableOpenTokenWhitelisting() external;\\n    function disableReceiver(address receiver) external;\\n    function disableSender(address sender) external;\\n    function disableSendFeeBurn() external;\\n    function disableSendFeeCharge() external;\\n    function disableWhitelistingFeeBurn() external;\\n    function disableWhitelistingFeeCharge() external;\\n    function enableFeeManager(address feeManager) external;\\n    function enableOpenTokenWhitelisting() external;\\n    function enableReceiver(address receiver) external;\\n    function enableSendFeeBurn() external;\\n    function enableSender(address sender) external;\\n    function enableSendFeeCharge() external;\\n    function enableWhitelistingFeeBurn() external;\\n    function enableWhitelistingFeeCharge() external;\\n    function sendFee() external view returns (uint256);\\n    function whitelistingFee() external view returns (uint256);\\n    function chargeSendFee() external view returns (bool);\\n    function chargeWhitelistingFee() external view returns (bool);\\n    function burnSendFee() external view returns (bool);\\n    function burnWhitelistingFee() external view returns (bool);\\n    function openTokenWhitelisting() external view returns (bool);\\n    function config(string calldata configName) external view returns (bytes memory);\\n    function blockedTokens(address tokenAddress) external view returns (bool);\\n    function feeManagers(address feeManager) external view returns (bool);\\n    function receiveAction(string calldata action, address to, bytes calldata payload) external;\\n    function sendAction(string calldata action, address from, bytes calldata payload) external;\\n    function setActionHandler(string memory action, address handler) external;\\n    function setArc(address _arc) external;\\n    function setSendFee(uint256 _fee) external;\\n    function setTeam(address _team) external;\\n    function setTeamRate(uint256 _teamRate) external;\\n    function setToken(string calldata tokenSymbol, address tokenAddress) external;\\n    function setWhitelistingFee(uint256 _fee) external;\\n    function team() external view returns (address);\\n    function teamRate() external view returns (uint256);\\n    function tokens(string calldata tokenSymbol) external view returns (address);\\n    function MAX_TEAM_RATE() external view returns (uint256);\\n    function receivers(address receiver) external view returns (bool);\\n    function senders(address sender) external view returns (bool);\\n    function unblockToken(address tokenAddress) external;\\n    function whitelist(address tokenAddress) external;\\n}\"\r\n    },\r\n    \"contracts/RainbowRoad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ArcBase} from \\\"./bases/ArcBase.sol\\\";\\nimport {IArc} from \\\"./interfaces/IArc.sol\\\";\\nimport {IRainbowRoad} from \\\"./interfaces/IRainbowRoad.sol\\\";\\nimport {IHandler} from \\\"./interfaces/IHandler.sol\\\";\\n\\n/**\\n * Manages sending and receiving of tokens and NFTs between chains\\n */\\ncontract RainbowRoad is ArcBase, IRainbowRoad\\n{\\n    IArc public arc;\\n    address public team;\\n    address public pendingTeam;\\n    uint256 public constant MAX_TEAM_RATE = 750; // 75%\\n    uint256 public teamRate;\\n    uint256 public sendFee;\\n    uint256 public whitelistingFee;\\n    bool public chargeSendFee;\\n    bool public chargeWhitelistingFee;\\n    bool public burnSendFee;\\n    bool public burnWhitelistingFee;\\n    bool public openTokenWhitelisting;\\n    mapping(address => bool) public feeManagers;\\n    mapping(address => bool) public receivers;\\n    mapping(address => bool) public senders;\\n    mapping(address => bool) public blockedTokens;\\n    mapping(string => address) public tokens;\\n    mapping(string => address) public actionHandlers;\\n    mapping(string => bytes) public config;\\n    \\n    constructor(address _arc)\\n    {\\n        require(_arc != address(0), 'Arc cannot be zero address');\\n        arc = IArc(_arc);\\n        team = 0x0c5D52630c982aE81b78AB2954Ddc9EC2797bB9c;\\n        teamRate = 400; // 400 bps = 40%\\n        openTokenWhitelisting = false;\\n        sendFee = 100000e18;\\n        whitelistingFee = 1000000e18;\\n        chargeSendFee = true;\\n        chargeWhitelistingFee = true;\\n        burnSendFee = true;\\n        burnWhitelistingFee = true;\\n        feeManagers[msg.sender] = true;\\n        feeManagers[team] = true;\\n        feeManagers[0x726461FA6e788bd8a79986D36F1992368A3e56eA] = true;\\n        tokens['Arc'] = _arc;\\n    }\\n    \\n    function setArc(address _arc) external onlyOwner\\n    {\\n        require(_arc != address(0), 'Arc cannot be zero address');\\n        arc = IArc(_arc);\\n    }\\n    \\n    function setTeam(address _team) external onlyTeam \\n    {\\n        pendingTeam = _team;\\n    }\\n\\n    function acceptTeam() external \\n    {\\n        require(msg.sender == pendingTeam, \\\"Invalid pending team\\\");\\n        team = pendingTeam;\\n    }\\n\\n    function setTeamRate(uint256 _teamRate) external onlyTeam \\n    {\\n        require(_teamRate <= MAX_TEAM_RATE, \\\"Team rate too high\\\");\\n        teamRate = _teamRate;\\n    }\\n    \\n    function setSendFee(uint256 _fee) external onlyFeeManagers\\n    {\\n        require(_fee > 0, 'Fee must be greater than zero');\\n        sendFee = _fee;\\n    }\\n    \\n    function setWhitelistingFee(uint256 _fee) external onlyFeeManagers\\n    {\\n        require(_fee > 0, 'Fee must be greater than zero');\\n        whitelistingFee = _fee;\\n    }\\n    \\n    function setToken(string calldata tokenSymbol, address tokenAddress) external onlyOwner\\n    {\\n        tokens[tokenSymbol] = tokenAddress;\\n    }\\n    \\n    function setActionHandler(string memory action, address handler) external onlyOwner\\n    {\\n        actionHandlers[action] = handler;\\n    }\\n    \\n    function blockToken(address tokenAddress) external onlyOwner\\n    {\\n        require(tokenAddress != address(0), 'Token address cannot be zero address');\\n        require(!blockedTokens[tokenAddress], 'Token address is blocked');\\n        blockedTokens[tokenAddress] = true;\\n    }\\n    \\n    function unblockToken(address tokenAddress) external onlyOwner\\n    {\\n        require(tokenAddress != address(0), 'Token address cannot be zero address');\\n        require(blockedTokens[tokenAddress], 'Token address is unblocked');\\n        blockedTokens[tokenAddress] = false;\\n    }\\n    \\n    function whitelist(address tokenAddress) external\\n    {\\n        string memory tokenSymbol = IERC20Metadata(tokenAddress).symbol();\\n        require(openTokenWhitelisting, 'Open token whitelisting is disabled');\\n        require(tokenAddress != address(0), 'Token address cannot be zero address');\\n        require(tokens[tokenSymbol] == address(0), 'Token is already enabled');\\n        require(!blockedTokens[tokenAddress], 'Token address is blocked');\\n        \\n        if(chargeWhitelistingFee) {\\n            arc.transferFrom(msg.sender, address(this), whitelistingFee);\\n            \\n            uint256 teamFee = (teamRate * whitelistingFee) / 1000;\\n            require(arc.transfer(team, teamFee));\\n            \\n            if(burnWhitelistingFee) {\\n                arc.burn(whitelistingFee - teamFee);\\n            }\\n        }\\n        \\n        tokens[tokenSymbol] = tokenAddress;\\n    }\\n    \\n    function enableOpenTokenWhitelisting() external onlyOwner\\n    {\\n        require(!openTokenWhitelisting, 'Open token whitelisting is enabled');\\n        openTokenWhitelisting = true;\\n    }\\n    \\n    function disableOpenTokenWhitelisting() external onlyOwner\\n    {\\n        require(openTokenWhitelisting, 'Open token whitelisting is disabled');\\n        openTokenWhitelisting = false;\\n    }\\n    \\n    function enableSendFeeCharge() external onlyOwner\\n    {\\n        require(!chargeSendFee, 'Charge send fee is enabled');\\n        chargeSendFee = true;\\n    }\\n    \\n    function disableSendFeeCharge() external onlyOwner\\n    {\\n        require(chargeSendFee, 'Charge send fee is disabled');\\n        chargeSendFee = false;\\n    }\\n    \\n    function enableSendFeeBurn() external onlyOwner\\n    {\\n        require(!burnSendFee, 'Burn send fee is enabled');\\n        burnSendFee = true;\\n    }\\n    \\n    function disableSendFeeBurn() external onlyOwner\\n    {\\n        require(burnSendFee, 'Burn send fee is disabled');\\n        burnSendFee = false;\\n    }\\n    \\n    function enableWhitelistingFeeCharge() external onlyOwner\\n    {\\n        require(!chargeWhitelistingFee, 'Charge whitelisting fee is enabled');\\n        chargeWhitelistingFee = true;\\n    }\\n    \\n    function disableWhitelistingFeeCharge() external onlyOwner\\n    {\\n        require(chargeWhitelistingFee, 'Charge whitelisting fee is disabled');\\n        chargeWhitelistingFee = false;\\n    }\\n    \\n    function enableWhitelistingFeeBurn() external onlyOwner\\n    {\\n        require(!burnWhitelistingFee, 'Burn whitelisting fee is enabled');\\n        burnWhitelistingFee = true;\\n    }\\n    \\n    function disableWhitelistingFeeBurn() external onlyOwner\\n    {\\n        require(burnWhitelistingFee, 'Burn whitelisting fee is disabled');\\n        burnWhitelistingFee = false;\\n    }\\n    \\n    function enableFeeManager(address feeManager) external onlyOwner\\n    {\\n        require(!feeManagers[feeManager], 'Fee manager is enabled');\\n        feeManagers[feeManager] = true;\\n    }\\n    \\n    function disableFeeManager(address feeManager) external onlyOwner\\n    {\\n        require(feeManagers[feeManager], 'Fee manager is disabled');\\n        feeManagers[feeManager] = false;\\n    }\\n    \\n    function enableReceiver(address receiver) external onlyOwner\\n    {\\n        require(!receivers[receiver], 'Receiver is enabled');\\n        receivers[receiver] = true;\\n    }\\n    \\n    function disableReceiver(address receiver) external onlyOwner\\n    {\\n        require(receivers[receiver], 'Receiver is disabled');\\n        receivers[receiver] = false;\\n    }\\n    \\n    function enableSender(address sender) external onlyOwner\\n    {\\n        require(!senders[sender], 'Sender is enabled');\\n        senders[sender] = true;\\n    }\\n    \\n    function disableSender(address sender) external onlyOwner\\n    {\\n        require(senders[sender], 'Sender is disabled');\\n        senders[sender] = false;\\n    }\\n    \\n    function setConfig(string calldata configName, bytes calldata configData) external onlyOwner\\n    {\\n        config[configName] = configData;\\n    }\\n    \\n    function receiveAction(string calldata action, address to, bytes calldata payload) external onlyReceivers whenNotPaused nonReentrant\\n    {\\n        require(actionHandlers[action] != address(0), 'Unsupported action');\\n        require(to != address(0), 'To cannot be zero address');\\n        IHandler(actionHandlers[action]).handleReceive(to, payload);\\n    }\\n    \\n    function sendAction(string calldata action, address from, bytes calldata payload) external onlySenders whenNotPaused nonReentrant\\n    {\\n        require(actionHandlers[action] != address(0), 'Unsupported action');\\n        require(from != address(0), 'From cannot be zero address');\\n        \\n        if(chargeSendFee) {\\n            arc.transferFrom(from, address(this), sendFee);\\n            \\n            uint256 teamFee = (teamRate * sendFee) / 1000;\\n            require(arc.transfer(team, teamFee));\\n            \\n            if(burnSendFee) {\\n                arc.burn(sendFee - teamFee);\\n            }\\n        }\\n        \\n        IHandler(actionHandlers[action]).handleSend(from, payload);\\n    }\\n    \\n    receive() external payable {}\\n    \\n    /// @dev Only calls from the enabled fee managers are accepted.\\n    modifier onlyFeeManagers() \\n    {\\n        require(feeManagers[msg.sender], 'Invalid fee manager');\\n        _;\\n    }\\n    \\n    /// @dev Only calls from the enabled receivers are accepted.\\n    modifier onlyReceivers() \\n    {\\n        require(receivers[msg.sender], 'Invalid receiver');\\n        _;\\n    }\\n    \\n    /// @dev Only calls from the enabled senders are accepted.\\n    modifier onlySenders() \\n    {\\n        require(senders[msg.sender], 'Invalid sender');\\n        _;\\n    }\\n    \\n    /// @dev Only calls from the team are accepted.\\n    modifier onlyTeam() \\n    {\\n        require(msg.sender == team, \\\"Invalid team\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TEAM_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"actionHandlers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arc\",\"outputs\":[{\"internalType\":\"contract IArc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"blockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSendFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWhitelistingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargeSendFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargeWhitelistingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"disableFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableOpenTokenWhitelisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"disableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSendFeeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSendFeeCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"disableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelistingFeeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelistingFeeCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"enableFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOpenTokenWhitelisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSendFeeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSendFeeCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelistingFeeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelistingFeeCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTokenWhitelisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"receiveAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sendAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setActionHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arc\",\"type\":\"address\"}],\"name\":\"setArc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"configName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"configData\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamRate\",\"type\":\"uint256\"}],\"name\":\"setTeamRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWhitelistingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"unblockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RainbowRoad", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000684802262d614d0cd0c9571672f03dd9e85d7824", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}