{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Pools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IPancakeRouter {\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\\ninterface IRefferal {\\n    function userInfos(address _user) external view returns(address user,\\n        address refferBy,\\n        uint dateTime,\\n        uint totalRefer,\\n        uint totalRefer7,\\n        bool top10Refer);\\n}\\ncontract Pools is Ownable, ReentrancyGuard {\\n    using Address for address payable;\\n    IPancakeRouter public pancakeRouter;\\n    IRefferal refer;\\n    uint public taxPercent = 1250;\\n    uint public interestDecimal = 1000_000;\\n    uint public multiTimeInterest = 1095;\\n    bool public canWD;\\n    address public immutable wBnb;\\n    address public immutable usd;\\n    struct Pool {\\n//        uint timeLock;\\n        uint minLock;\\n        uint maxLock;\\n        uint currentInterest; // daily\\n        uint bonusInterest; // % base on user interest\\n        uint totalLock;\\n        bool enable;\\n        uint commPercent;\\n    }\\n    struct User {\\n        uint totalLock;\\n        uint startTime;\\n        uint totalReward;\\n        uint remainReward;\\n    }\\n    struct Claim {\\n        uint date;\\n        uint amount;\\n        uint totalLock;\\n        uint interrest;\\n    }\\n    struct Vote {\\n        address[] uservote;\\n        uint totalVote;\\n        bool status;\\n    }\\n    struct VoteConfig {\\n        address[] uservote;\\n        uint totalVote;\\n        uint pid;\\n        uint status; // 1 = request; 2 = success\\n        uint amount;\\n    }\\n    Pool[] public pools;\\n    mapping(address => mapping(uint => User)) public users; // user => pId => detail\\n    mapping(address => uint) public userTotalLock; // user => totalLock\\n    uint public usdTotalLock;\\n    uint public requestVote;\\n    uint public requestVoteConfigInterest;\\n    uint public requestVoteConfigComm;\\n    mapping(uint => Vote) public votes;\\n    mapping(uint => mapping(uint => VoteConfig)) public voteConfigs; // vote type => requestVote => vote config detail, 1 = interest percent; 2 = comm percent\\n    mapping(address => mapping(uint => bool)) public userVote; // user => requestVote => result\\n    mapping(address => mapping(uint => bool)) public userVoteConfig; // user => requestVote => result\\n    mapping(address => mapping(uint => Claim[])) public userClaimed;\\n    mapping(address => uint) public remainComm;\\n    mapping(address => uint) public volumeOntree;\\n    mapping(address => uint) public totalComms;\\n    mapping(address => uint) public totalRewards;\\n    uint[] public conditionMemOnTree = [0,2,10,30,50,100,200];\\n    uint[] public conditionVolumeOnTree = [100, 1000,5000,30000,100000,200000,300000];\\n    address public gnosisSafe;\\n\\n    modifier onlyGnosisSafe() {\\n        require(gnosisSafe == _msgSender(), \\\"Pools: caller is not the gnosisSafe\\\");\\n        _;\\n    }\\n\\n    event SetRoute(IPancakeRouter pancakeRouteAddress);\\n    event SetConditionMemOnTree(uint[] conditionMem);\\n    event SetConditionVolumeOnTree(uint[] conditionVolume);\\n    event SetRefer(IRefferal iRefer);\\n    event TogglePool(uint pid, bool enable);\\n    event AddPool(uint minLock, uint maxLock, uint currentInterest, uint bonusInterest, uint commPercent);\\n    event UpdateMinMaxPool(uint pid, uint minLock, uint maxLock);\\n    event UpdateInterestPool(uint pid, uint currentInterest);\\n    event UpdateCommPercent(uint pid, uint commPercent);\\n    event UpdatePool(uint pid, uint minLock, uint maxLock, uint bonusInterest, bool enable);\\n    event GetStuck(address payable user, uint amount);\\n    event VoteEvent(bool result);\\n    event VoteConfigEvent(bool result);\\n    event AdminRequestVote();\\n    event AdminRequestVoteConfig();\\n\\n    constructor(IRefferal _refer, address gnosisSafeAddress, IPancakeRouter pancakeRouteAddress, address _wBnbAddress, address _usdAddress) {\\n        require(gnosisSafeAddress != address(0), \\\"Pools::setGnosisSafe: invalid input\\\");\\n        require(_wBnbAddress != address(0), \\\"Pools::wBnbAddress: invalid input\\\");\\n        require(_usdAddress != address(0), \\\"Pools::usdAddress: invalid input\\\");\\n        refer = _refer;\\n        gnosisSafe = gnosisSafeAddress;\\n        pancakeRouter = pancakeRouteAddress;\\n        wBnb = _wBnbAddress;\\n        usd = _usdAddress;\\n    }\\n    function setRoute(IPancakeRouter pancakeRouteAddress) external onlyGnosisSafe {\\n        pancakeRouter = pancakeRouteAddress;\\n        emit SetRoute(pancakeRouteAddress);\\n    }\\n    function setConditionMemOnTree(uint[] memory conditionMem) external onlyGnosisSafe {\\n        conditionMemOnTree = conditionMem;\\n        emit SetConditionMemOnTree(conditionMem);\\n    }\\n    function setConditionVolumeOnTree(uint[] memory conditionVolume) external onlyGnosisSafe {\\n        conditionVolumeOnTree = conditionVolume;\\n        emit SetConditionVolumeOnTree(conditionVolume);\\n    }\\n\\n    function bnbPrice() public view returns (uint[] memory amounts){\\n        address[] memory path = new address[](2);\\n        path[0] = usd;\\n        path[1] = wBnb;\\n        amounts = IPancakeRouter(pancakeRouter).getAmountsIn(1 ether, path);\\n        amounts[0] = amounts[0] * 10**12;\\n    }\\n\\n    function minMaxUSD2BNB(uint pid) public view returns (uint _min, uint _max) {\\n        Pool memory p = pools[pid];\\n        _min = p.minLock * 1 ether / bnbPrice()[0];\\n        _max = p.maxLock * 1 ether / bnbPrice()[0];\\n    }\\n    function bnb2USD(uint amount) public view returns (uint _usd) {\\n        _usd = bnbPrice()[0] * amount / 1 ether;\\n    }\\n    function setRefer(IRefferal iRefer) external onlyGnosisSafe {\\n        refer = iRefer;\\n        emit SetRefer(iRefer);\\n    }\\n    function setGnosisSafe(address gnosisSafeAddress) external onlyGnosisSafe {\\n        require(gnosisSafeAddress != address(0), \\\"Pools::setGnosisSafe: invalid input\\\");\\n        gnosisSafe = gnosisSafeAddress;\\n    }\\n    function getPools(uint[] memory pids) external pure returns(Pool[] memory poolsInfo) {\\n        poolsInfo = new Pool[](pids.length);\\n        for(uint i = 0; i < pids.length; i++) poolsInfo[i] = poolsInfo[pids[i]];\\n    }\\n\\n    function getDays() public view returns(uint) {\\n        return block.timestamp / 1 days;\\n    }\\n    function getUsersClaimedLength(uint pid, address user) external view returns(uint length) {\\n        return userClaimed[user][pid].length;\\n    }\\n    function getUsersClaimed(uint pid, address user, uint limit, uint skip) external view returns(Claim[] memory list, uint totalItem) {\\n        totalItem = userClaimed[user][pid].length;\\n        limit = limit <= totalItem - skip ? limit + skip : totalItem;\\n        uint lengthReturn = limit <= totalItem - skip ? limit : totalItem - skip;\\n        list = new Claim[](lengthReturn);\\n        for(uint i = skip; i < limit; i++) {\\n            list[i-skip] = userClaimed[user][pid][i];\\n        }\\n    }\\n    function currentReward(uint pid, address user) public view returns(uint) {\\n        User memory u = users[user][pid];\\n        if(u.totalLock == 0) return 0;\\n        Pool memory p = pools[pid];\\n        uint spendDays = getDays() - u.startTime / 1 days;\\n        if(userClaimed[user][pid].length > 0) {\\n            Claim memory claim = userClaimed[user][pid][userClaimed[user][pid].length-1];\\n            if(claim.date > u.startTime / 1 days) spendDays = getDays() - claim.date;\\n        }\\n        return p.currentInterest * u.totalLock * spendDays / interestDecimal;\\n    }\\n\\n    function claimReward(uint pid) public nonReentrant {\\n        uint reward = currentReward(pid, _msgSender());\\n        uint tax = reward * taxPercent / interestDecimal;\\n        uint processAmount = reward - tax;\\n        if(reward > users[_msgSender()][pid].remainReward) reward = users[_msgSender()][pid].remainReward;\\n        if(reward > 0) {\\n\\n            payable(_msgSender()).sendValue(processAmount);\\n            userClaimed[_msgSender()][pid].push(Claim(getDays(), reward, users[_msgSender()][pid].totalLock, pools[pid].currentInterest));\\n            users[_msgSender()][pid].totalReward += reward;\\n            users[_msgSender()][pid].remainReward -= reward;\\n            totalRewards[_msgSender()] += reward;\\n            remainComm[gnosisSafe] += tax;\\n            giveBonus(processAmount * pools[pid].bonusInterest / interestDecimal);\\n        }\\n    }\\n    function logVolume(uint amount) internal {\\n        uint _usd = bnb2USD(amount);\\n        address from = _msgSender();\\n        address _refferBy;\\n        for(uint i = 0; i < 7; i++) {\\n            (, _refferBy,,,,) = refer.userInfos(from);\\n            if(_refferBy == from) break;\\n            volumeOntree[_refferBy] += _usd;\\n            from = _refferBy;\\n        }\\n\\n    }\\n\\n    function deposit(uint pid) external payable {\\n\\n        Pool storage p = pools[pid];\\n        User storage u = users[_msgSender()][pid];\\n        uint _min;\\n        uint _max;\\n        (_min, _max) = minMaxUSD2BNB(pid);\\n        require(msg.value >= _min && msg.value <= _max, 'Pools::deposit: Invalid amount');\\n        require(p.enable, 'Pools::deposit: pool disabled');\\n\\n        uint tax = msg.value * taxPercent / interestDecimal;\\n        uint processAmount = msg.value - tax;\\n\\n        claimReward(pid);\\n        u.totalLock += processAmount;\\n        u.startTime = block.timestamp;\\n        u.remainReward = p.currentInterest * processAmount * multiTimeInterest / interestDecimal + u.remainReward;\\n        p.totalLock += processAmount;\\n        giveComm(processAmount, pid);\\n        logVolume(processAmount);\\n        remainComm[owner()] += msg.value * 15 / 1000;\\n        remainComm[gnosisSafe] += tax;\\n        userTotalLock[_msgSender()] += msg.value;\\n        usdTotalLock += bnb2USD(msg.value);\\n    }\\n    function claimComm(address payable to) external nonReentrant {\\n        require(to != address(0), \\\"Pools::claimComm: invalid input\\\");\\n        require(remainComm[_msgSender()] > 0, 'Pools::claimComm: not comm');\\n        to.sendValue(remainComm[_msgSender()]);\\n        totalComms[_msgSender()] += remainComm[_msgSender()];\\n        remainComm[_msgSender()] = 0;\\n    }\\n\\n    function giveBonus(uint totalComm) internal {\\n        uint currentComm = totalComm;\\n        address from = _msgSender();\\n        for(uint i = 0; i <= 7; i++) {\\n            address _refferBy;\\n            uint totalRefer;\\n            (, _refferBy,,totalRefer,,) = refer.userInfos(from);\\n            if((i == 7 || from == _refferBy)) {\\n                if(currentComm > 0) remainComm[gnosisSafe] += currentComm;\\n                break;\\n            } else {\\n                from = _refferBy;\\n\\n                uint comm = totalComm / (2 ** (i+1));\\n                remainComm[_refferBy] += comm;\\n                currentComm -= comm;\\n            }\\n\\n        }\\n\\n    }\\n    function giveComm(uint amount, uint pid) internal {\\n        Pool memory p = pools[pid];\\n        uint totalComm = amount * p.commPercent / interestDecimal;\\n        uint currentComm = totalComm;\\n        address from = _msgSender();\\n        bool isContinue;\\n        for(uint i = 0; i <= 7; i++) {\\n            address _refferBy;\\n            uint totalRefer;\\n            (, _refferBy,,totalRefer,,) = refer.userInfos(from);\\n            if((i == 7 || from == _refferBy)) {\\n                if(currentComm > 0) remainComm[gnosisSafe] += currentComm;\\n                break;\\n            } else {\\n                if(isContinue) continue;\\n                from = _refferBy;\\n\\n                uint comm = totalComm / (2 ** (i+1));\\n                if(i == 0) {\\n                    if(users[_refferBy][pid].totalLock > 0 && volumeOntree[_refferBy] >= conditionVolumeOnTree[i]) {\\n                        remainComm[_refferBy] += comm;\\n                        currentComm -= comm;\\n                    }\\n                }\\n                else if(totalRefer >= conditionMemOnTree[i] && volumeOntree[_refferBy] >= conditionVolumeOnTree[i]) {\\n                    remainComm[_refferBy] += comm;\\n                    currentComm -= comm;\\n                } else isContinue = true;\\n            }\\n\\n        }\\n\\n    }\\n    function togglePool(uint pid, bool enable) external onlyGnosisSafe {\\n        pools[pid].enable = enable;\\n        emit TogglePool(pid, enable);\\n    }\\n    function updateMinMaxPool(uint pid, uint minLock, uint maxLock) external onlyGnosisSafe {\\n        pools[pid].minLock = minLock;\\n        pools[pid].maxLock = maxLock;\\n        emit UpdateMinMaxPool(pid, minLock, maxLock);\\n    }\\n    function updateInterestPool(uint pid, uint currentInterest) external onlyGnosisSafe {\\n        require(voteConfigs[1][requestVoteConfigInterest].status == 2, 'Pools::updateCommPercent: vote not success');\\n        pools[pid].currentInterest = currentInterest;\\n        emit UpdateInterestPool(pid, currentInterest);\\n    }\\n    function updateCommPercent(uint pid, uint commPercent) external onlyGnosisSafe {\\n        require(voteConfigs[2][requestVoteConfigComm].status == 2, 'Pools::updateCommPercent: vote not success');\\n        pools[pid].commPercent = commPercent;\\n        emit UpdateCommPercent(pid, commPercent);\\n    }\\n    function updatePool(uint pid, uint minLock, uint maxLock, uint bonusInterest, bool enable) external onlyGnosisSafe {\\n        pools[pid].minLock = minLock;\\n        pools[pid].maxLock = maxLock;\\n        pools[pid].bonusInterest = bonusInterest;\\n        pools[pid].enable = enable;\\n        emit UpdatePool(pid, minLock, maxLock, bonusInterest, enable);\\n    }\\n    function addPool(uint minLock, uint maxLock, uint currentInterest, uint bonusInterest, uint commPercent) external onlyGnosisSafe {\\n        pools.push(Pool(minLock * 1 ether, maxLock * 1 ether, currentInterest, bonusInterest, 0, true, commPercent));\\n        emit AddPool(minLock, maxLock, currentInterest, bonusInterest, commPercent);\\n    }\\n    function inCaseTokensGetStuck(IERC20 token) external onlyGnosisSafe {\\n        uint _amount = token.balanceOf(address(this));\\n        require(token.transfer(msg.sender, _amount));\\n    }\\n    function adminRequestVote() external onlyGnosisSafe {\\n        require(bnb2USD(address(this).balance) >= usdTotalLock * 3, 'Pools::adminRequestVote: need x3 price to open vote');\\n        requestVote += 1;\\n        emit AdminRequestVote();\\n    }\\n    function adminRequestVoteConfig(uint pid, uint voteType, uint amount) external onlyGnosisSafe {\\n        require(pools[pid].enable, 'Pools::adminRequestVoteConfig: pool not active');\\n\\n        uint reqVote;\\n        if(voteType == 1) {\\n            requestVoteConfigInterest += 1;\\n            reqVote = requestVoteConfigInterest;\\n        }\\n        else {\\n            requestVoteConfigComm += 1;\\n            reqVote = requestVoteConfigComm;\\n        }\\n        voteConfigs[voteType][reqVote].pid = pid;\\n        voteConfigs[voteType][reqVote].status = 1;\\n        voteConfigs[voteType][reqVote].amount = amount;\\n\\n        emit AdminRequestVoteConfig();\\n    }\\n    function voteConfig(uint voteType, bool result) external {\\n\\n        uint reqVote;\\n        if(voteType == 1) {\\n            reqVote = requestVoteConfigInterest;\\n        }\\n        else {\\n            reqVote = requestVoteConfigComm;\\n        }\\n        VoteConfig storage v = voteConfigs[voteType][reqVote];\\n        require(v.status == 1, 'Pools::voteConfig: Vote is not requested');\\n        require(result != userVoteConfig[_msgSender()][reqVote], 'Pools::vote: Same result');\\n        if(userVoteConfig[_msgSender()][reqVote]) v.totalVote -= userTotalLock[_msgSender()];\\n        else v.totalVote += userTotalLock[_msgSender()];\\n        userVoteConfig[_msgSender()][reqVote] = result;\\n\\n        if(v.totalVote >= address(this).balance * 50 / 100) {\\n            v.status = 2;\\n        }\\n        emit VoteConfigEvent(result);\\n    }\\n    function vote(bool result) external {\\n        require(!votes[requestVote].status, 'Pools::vote: Vote finished');\\n        require(result != userVote[_msgSender()][requestVote], 'Pools::vote: Same result');\\n        if(userVote[_msgSender()][requestVote]) votes[requestVote].totalVote -= userTotalLock[_msgSender()];\\n        else votes[requestVote].totalVote += userTotalLock[_msgSender()];\\n        userVote[_msgSender()][requestVote] = result;\\n\\n        if(votes[requestVote].totalVote >= address(this).balance * 50 / 100) {\\n            votes[requestVote].status = true;\\n            canWD = true;\\n        }\\n        emit VoteEvent(result);\\n    }\\n    function getStuck(address payable user, uint amount) external onlyGnosisSafe {\\n        require(user != address(0), \\\"Pools::getStuck: invalid input\\\");\\n        require(canWD, 'Pools::getStuck: Need finish vote');\\n        user.sendValue(amount);\\n        canWD = false;\\n        emit GetStuck(user, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IRefferal\",\"name\":\"_refer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gnosisSafeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IPancakeRouter\",\"name\":\"pancakeRouteAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wBnbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commPercent\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRequestVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRequestVoteConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetStuck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"conditionMem\",\"type\":\"uint256[]\"}],\"name\":\"SetConditionMemOnTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"conditionVolume\",\"type\":\"uint256[]\"}],\"name\":\"SetConditionVolumeOnTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRefferal\",\"name\":\"iRefer\",\"type\":\"address\"}],\"name\":\"SetRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPancakeRouter\",\"name\":\"pancakeRouteAddress\",\"type\":\"address\"}],\"name\":\"SetRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"TogglePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commPercent\",\"type\":\"uint256\"}],\"name\":\"UpdateCommPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentInterest\",\"type\":\"uint256\"}],\"name\":\"UpdateInterestPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"}],\"name\":\"UpdateMinMaxPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"VoteConfigEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"VoteEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commPercent\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRequestVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminRequestVoteConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bnb2USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_usd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimComm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditionMemOnTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditionVolumeOnTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"commPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct Pools.Pool[]\",\"name\":\"poolsInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"}],\"name\":\"getUsersClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interrest\",\"type\":\"uint256\"}],\"internalType\":\"struct Pools.Claim[]\",\"name\":\"list\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalItem\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUsersClaimedLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"minMaxUSD2BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiTimeInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"commPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainComm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestVoteConfigComm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestVoteConfigInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"conditionMem\",\"type\":\"uint256[]\"}],\"name\":\"setConditionMemOnTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"conditionVolume\",\"type\":\"uint256[]\"}],\"name\":\"setConditionVolumeOnTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gnosisSafeAddress\",\"type\":\"address\"}],\"name\":\"setGnosisSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRefferal\",\"name\":\"iRefer\",\"type\":\"address\"}],\"name\":\"setRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"pancakeRouteAddress\",\"type\":\"address\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"togglePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalComms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commPercent\",\"type\":\"uint256\"}],\"name\":\"updateCommPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInterest\",\"type\":\"uint256\"}],\"name\":\"updateInterestPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"}],\"name\":\"updateMinMaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdTotalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interrest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVoteConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"volumeOntree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voteType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"voteConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVote\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Pools", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d974e34ca7ea82ffb339f493326dbf998fb34bb0000000000000000000000001ec0f8875b7fc2400a6f44788c6710959614e68a0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b479975060000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}