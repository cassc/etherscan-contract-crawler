{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\n\\ninterface IRewardTokenDistributor {\\n    struct Reward {\\n        IERC20 token;\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 last_update;\\n        uint256 integral;\\n    }\\n\\n    function reward_tokens(uint256 index) external view returns (IERC20);\\n\\n    function reward_data(IERC20 token) external view returns (Reward memory);\\n\\n    function claim_rewards(address user) external;\\n\\n    function add_reward(IERC20 rewardToken, address distributor) external;\\n\\n    function set_reward_distributor(IERC20 rewardToken, address distributor) external;\\n\\n    function deposit_reward_token(IERC20 rewardToken, uint256 amount) external;\\n\\n    function claimable_reward(address rewardToken, address user) external view returns (uint256);\\n\\n    function claimable_reward_write(address rewardToken, address user) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase\\n\\ninterface IChildChainStreamer {\\n    function initialize(address gauge) external;\\n\\n    function get_reward() external;\\n\\n    function reward_tokens(uint256 index) external view returns (IERC20);\\n\\n    function add_reward(\\n        IERC20 rewardToken,\\n        address distributor,\\n        uint256 duration\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IChildChainStreamer.sol\\\";\\nimport \\\"./IRewardTokenDistributor.sol\\\";\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRewardsOnlyGauge is IRewardTokenDistributor {\\n    function initialize(\\n        address pool,\\n        address streamer,\\n        bytes32 claimSignature\\n    ) external;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function lp_token() external view returns (IERC20);\\n\\n    function reward_contract() external view returns (IChildChainStreamer);\\n\\n    function set_rewards(\\n        address childChainStreamer,\\n        bytes32 claimSig,\\n        address[8] calldata rewardTokens\\n    ) external;\\n\\n    function last_claim() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/gauges/ChildChainGaugeRewardHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol\\\";\\n\\n/**\\n * @title ChildChainGaugeRewardHelper\\n * @author Balancer Labs\\n * @notice Helper contract which allows claiming rewards from many RewardsOnlyGauges in a single transaction.\\n * This contract manually triggers an update to the gauges' streamers as a workaround for the gauge .\\n */\\ncontract ChildChainGaugeRewardHelper {\\n    uint256 public constant CLAIM_FREQUENCY = 3600;\\n\\n    /**\\n     * @notice Returns the amount of ERC20 token `token` on RewardsOnlyGauge `gauge` claimable by address `user`.\\n     * @dev This function cannot be marked `view` as it updates the gauge's state (not possible in a view context).\\n     * Offchain users attempting to read from this function should manually perform a static call or modify the abi.\\n     * @param gauge - The address of the RewardsOnlyGauge for which to query.\\n     * @param user - The address of the user for which to query.\\n     * @param token - The address of the reward token for which to query.\\n     */\\n    function getPendingRewards(\\n        IRewardsOnlyGauge gauge,\\n        address user,\\n        address token\\n    ) external returns (uint256) {\\n        gauge.reward_contract().get_reward();\\n        return gauge.claimable_reward_write(user, token);\\n    }\\n\\n    /**\\n     * @notice Claims pending rewards on RewardsOnlyGauge `gauge` for account `user`.\\n     * @param gauge - The address of the RewardsOnlyGauge from which to claim rewards.\\n     * @param user - The address of the user for which to claim rewards.\\n     */\\n    function claimRewardsFromGauge(IRewardsOnlyGauge gauge, address user) external {\\n        _claimRewardsFromGauge(gauge, user);\\n    }\\n\\n    /**\\n     * @notice Claims pending rewards on a list of RewardsOnlyGauges `gauges` for account `user`.\\n     * @param gauges - An array of address of RewardsOnlyGauges from which to claim rewards.\\n     * @param user - The address of the user for which to claim rewards.\\n     */\\n    function claimRewardsFromGauges(IRewardsOnlyGauge[] calldata gauges, address user) external {\\n        for (uint256 i = 0; i < gauges.length; i++) {\\n            _claimRewardsFromGauge(gauges[i], user);\\n        }\\n    }\\n\\n    // Internal functions\\n\\n    function _claimRewardsFromGauge(IRewardsOnlyGauge gauge, address user) internal {\\n        // Force rewards from the streamer onto the gauge.\\n        gauge.reward_contract().get_reward();\\n        gauge.claim_rewards(user);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CLAIM_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsOnlyGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewardsFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsOnlyGauge[]\",\"name\":\"gauges\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewardsFromGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsOnlyGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChildChainGaugeRewardHelper", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}