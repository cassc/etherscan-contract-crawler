{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Destroyable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nabstract contract Destroyable is Context {\\n  /**\\n   * @dev Emitted when the destroyed is triggered by `account`.\\n   */\\n  event Destroyed(address account);\\n\\n  bool private _destroyed;\\n\\n  /**\\n   * @dev Initializes the contract in undestroyed state.\\n   */\\n  constructor() {\\n    _destroyed = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is destroyed, and false otherwise.\\n   */\\n  function destroyed() public view virtual returns (bool) {\\n    return _destroyed;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not destroyed.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be destroyed.\\n   */\\n  modifier whenNotDestroyed() {\\n    require(!destroyed(), 'Pausable: paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be destroyed.\\n   */\\n  function _destroy() internal virtual whenNotDestroyed {\\n    _destroyed = true;\\n    emit Destroyed(_msgSender());\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ERC1155.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// openzeppelin version  4.3.3\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Destroyable.sol';\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, Pausable, Destroyable, Ownable {\\n  using Address for address;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string private _uri;\\n\\n  // Use a split bit implementation.\\n  // Store the type in the upper 128 bits..\\n  uint256 public constant MASK = type(uint128).max;\\n\\n  uint256 public constant TYPE_MASK = uint256(MASK) << 128;\\n\\n  // ..and the non-fungible index in the lower 128\\n  uint256 public constant NF_INDEX_MASK = uint128(MASK);\\n\\n  // The top bit is a flag to tell if this is a NFI.\\n  uint256 public constant TYPE_NF_BIT = 1 << 255;\\n\\n  mapping(uint256 => address) nfOwners;\\n\\n  // onReceive function signatures\\n  bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n\\n  bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  function isNonFungible(uint256 _id) public pure returns (bool) {\\n    return _id & TYPE_NF_BIT == TYPE_NF_BIT;\\n  }\\n\\n  function isFungible(uint256 _id) public pure returns (bool) {\\n    return _id & TYPE_NF_BIT == 0;\\n  }\\n\\n  function getNonFungibleIndex(uint256 _id) public pure returns (uint256) {\\n    return _id & NF_INDEX_MASK;\\n  }\\n\\n  function getNonFungibleBaseType(uint256 _id) public pure returns (uint256) {\\n    return _id & TYPE_MASK;\\n  }\\n\\n  function isNonFungibleBaseType(uint256 _id) public pure returns (bool) {\\n    // A base type has the NF bit but does not have an index.\\n    return (_id & TYPE_NF_BIT == TYPE_NF_BIT) && (_id & NF_INDEX_MASK == 0);\\n  }\\n\\n  function isNonFungibleItem(uint256 _id) public pure returns (bool) {\\n    // A base type has the NF bit but does has an index.\\n    return (_id & TYPE_NF_BIT == TYPE_NF_BIT) && (_id & NF_INDEX_MASK != 0);\\n  }\\n\\n  function ownerOf(uint256 _id) public view virtual returns (address) {\\n    return nfOwners[_id];\\n  }\\n\\n  /**\\n   * @dev See {_setURI}.\\n   */\\n  constructor(string memory uri_) {\\n    _setURI(uri_);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n    return\\n      interfaceId == type(IERC1155).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual override returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id)\\n    public\\n    view\\n    virtual\\n    override\\n    whenNotDestroyed\\n    whenNotPaused\\n    returns (uint256)\\n  {\\n    require(account != address(0), 'ERC1155: balance query for the zero address');\\n    if (isNonFungibleItem(id)) return ownerOf(id) == account ? 1 : 0;\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    virtual\\n    override\\n    whenNotDestroyed\\n    whenNotPaused\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      uint256 id = ids[i];\\n      if (isNonFungibleItem(id)) {\\n        batchBalances[i] = ownerOf(id) == accounts[i] ? 1 : 0;\\n      } else {\\n        batchBalances[i] = balanceOf(accounts[i], id);\\n      }\\n    }\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override whenNotDestroyed whenNotPaused {\\n    require(_msgSender() != operator, 'ERC1155: setting approval status for self');\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    whenNotDestroyed\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    if (operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {\\n      return true;\\n    }\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n    address operator = _msgSender();\\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n    if (isNonFungible(id)) {\\n      require(nfOwners[id] == from, 'ERC1155: insufficient balance for transfer');\\n      nfOwners[id] = to;\\n    } else {\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] = _balances[id][to] + amount;\\n    }\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n    address operator = _msgSender();\\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), '');\\n    if (isNonFungible(id)) {\\n      require(nfOwners[id] == from, 'ERC1155: insufficient balance for transfer');\\n      nfOwners[id] = to;\\n    } else {\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] = _balances[id][to] + amount;\\n    }\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n      if (isNonFungible(id)) {\\n        require(nfOwners[id] == from);\\n        nfOwners[id] = to;\\n      } else {\\n        uint256 fromBalance = _balances[id][from];\\n        uint256 toBalance = _balances[id][to];\\n        require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n        unchecked {\\n          _balances[id][from] = fromBalance - amount;\\n          _balances[id][to] = toBalance + amount;\\n        }\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, '');\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n      if (isNonFungible(id)) {\\n        require(nfOwners[id] == from);\\n        nfOwners[id] = to;\\n      } else {\\n        uint256 fromBalance = _balances[id][from];\\n        uint256 toBalance = _balances[id][to];\\n        require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n        unchecked {\\n          _balances[id][from] = fromBalance - amount;\\n          _balances[id][to] = toBalance + amount;\\n        }\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    _uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    if (isNonFungibleItem(id)) {\\n      require(amount == 1, 'non fungible items can only have 1');\\n      nfOwners[id] = account;\\n    } else {\\n      _balances[id][account] = _balances[id][account] + amount;\\n    }\\n\\n    _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n\\n    emit TransferSingle(operator, address(0), account, id, amount);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 amount = amounts[i];\\n      uint256 id = ids[i];\\n      if (isNonFungibleItem(id)) {\\n        require(amount == 1, 'non fungible items can only have 1');\\n        nfOwners[id] = to;\\n      } else {\\n        _balances[id][to] = _balances[id][to] + amount;\\n      }\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `account`\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(\\n    address account,\\n    uint256 id,\\n    uint256 amount\\n  ) internal virtual {\\n    require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), '');\\n    if (isNonFungible(id)) {\\n      require(nfOwners[id] == account, 'ERC1155: burn amount exceeds balance');\\n      require(amount == 1, 'ERC1155: burn amount exceeds balance');\\n      delete nfOwners[id];\\n    } else {\\n      uint256 accountBalance = _balances[id][account];\\n      require(accountBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n      unchecked {\\n        uint256 newBalance = accountBalance - amount;\\n        _balances[id][account] = newBalance;\\n      }\\n    }\\n\\n    emit TransferSingle(operator, account, address(0), id, amount);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(account != address(0), 'ERC1155: burn from the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, '');\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n      if (isNonFungible(id)) {\\n        require(nfOwners[id] == account, 'ERC1155: burn amount exceeds balance');\\n        require(amount == 1, 'ERC1155: burn amount exceeds balance');\\n        delete nfOwners[id];\\n      } else {\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n        unchecked {\\n          uint256 newBalance = accountBalance - amount;\\n          _balances[id][account] = newBalance;\\n        }\\n      }\\n    }\\n\\n    emit TransferBatch(operator, account, address(0), ids, amounts);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/NFTOneofExtention.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport './ERC1155.sol';\\n\\nimport './MetaTransactions.sol';\\n\\nabstract contract NFTOneofExtention is ERC1155, ContextMixin, NativeMetaTransaction, ReentrancyGuard {\\n  string public name;\\n  mapping(uint256 => string) internal _tokenURIs;\\n  mapping(uint256 => uint256) private _totalSupply;\\n  mapping(address => bool) private _creatorsApprovals;\\n  uint256 public nonce;\\n  uint256 public constant POWER_MINT_BIT = 1 << 254;\\n  mapping(uint256 => mapping(address => bool)) public minters;\\n  mapping(uint256 => PowerMintValue) public power_mints;\\n  event ApprovalForMinter(address indexed account, bool approved);\\n  event PowerMint(address account, uint256 _type, uint256 amount, string uri);\\n\\n  struct PowerMintValue {\\n    address owner;\\n    string metadata;\\n    uint256 amount;\\n  }\\n\\n  constructor(string memory name_) {\\n    name = name_;\\n    _initializeEIP712(name);\\n  }\\n\\n  modifier mintersOnly(uint256 _id) {\\n    require(\\n      minters[_id][msg.sender] == true || (_msgSender() == owner() && minters[_id][address(0x0)] == true), // only approve owner if type exist\\n      'mintersOnly: caller is not an approved minter'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyCreator() {\\n    require(isCreator(_msgSender()) || _msgSender() == owner(), 'onlyCreator: caller is not an approved creator');\\n    _;\\n  }\\n\\n  modifier nonFungibleItemOnly(uint256 _id) {\\n    require(\\n      isNonFungibleItem(_id), // only approve  NFT\\n      'nonFungibleItemOnly: id is not for Non fungible item'\\n    );\\n    _;\\n  }\\n\\n  function _msgSender() internal view override returns (address sender) {\\n    return ContextMixin.msgSender();\\n  }\\n\\n  function isPowerMinted(uint256 _id) public pure returns (bool) {\\n    return _id & POWER_MINT_BIT == POWER_MINT_BIT;\\n  }\\n\\n  function totalSupply(uint256 id) public view virtual whenNotDestroyed whenNotPaused returns (uint256) {\\n    if (isNonFungibleItem(id)) {\\n      return ownerOf(id) != address(0) ? 1 : 0;\\n    }\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev Indicates weither any token exist with a given id, or not.\\n   */\\n  function exists(uint256 id) public view virtual whenNotDestroyed whenNotPaused returns (bool) {\\n    return totalSupply(id) > 0;\\n  }\\n\\n  function typeExists(uint256 id) public view virtual whenNotDestroyed whenNotPaused returns (bool) {\\n    return minters[id][address(0x0)] == true;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n\\n  function setCreator(address operator, bool approved) public virtual onlyOwner whenNotDestroyed whenNotPaused {\\n    _creatorsApprovals[operator] = approved;\\n  }\\n\\n  function isCreator(address account) public view virtual whenNotDestroyed whenNotPaused returns (bool) {\\n    return _creatorsApprovals[account] || account == owner();\\n  }\\n\\n  function setMinter(\\n    uint256 _type,\\n    address operator,\\n    bool approved\\n  ) public virtual onlyOwner mintersOnly(_type) whenNotDestroyed whenNotPaused {\\n    // no need to check if this is a nf type, creatorOnly() will only let a nf type pass through.\\n    minters[_type][operator] = approved;\\n  }\\n\\n  function initPowerMintingEnabledType(uint256 amount, string memory _uri)\\n    public\\n    onlyCreator\\n    whenNotDestroyed\\n    whenNotPaused\\n    returns (uint256 _type)\\n  {\\n    // Store the type in the upper 128 bits\\n    _type = (++nonce << 128);\\n\\n    // Set a flag if this is an NFI.\\n    _type = _type | TYPE_NF_BIT | POWER_MINT_BIT;\\n\\n    // This will allow restricted access to creators.\\n    minters[_type][msg.sender] = true;\\n    // this will allow contract to check if the type exist at all\\n    minters[_type][address(0x0)] = true;\\n\\n    // emit a Transfer event with Create semantic to help with discovery.\\n    emit TransferSingle(msg.sender, address(0x0), address(0x0), _type, 0);\\n\\n    if (bytes(_uri).length > 0) {\\n      _setURI(_type, _uri);\\n    }\\n\\n    PowerMintValue memory value = PowerMintValue(msg.sender, _uri, amount);\\n    power_mints[_type] = value;\\n    emit PowerMint(msg.sender, _type, amount, _uri);\\n  }\\n\\n  // This function only creates the type.\\n  function createMixedFungibleType(string memory _uri, bool _isNF)\\n    public\\n    onlyCreator\\n    whenNotDestroyed\\n    whenNotPaused\\n    returns (uint256 _type)\\n  {\\n    // Store the type in the upper 128 bits\\n    _type = (++nonce << 128);\\n\\n    // Set a flag if this is an NFI.\\n    if (_isNF) _type = _type | TYPE_NF_BIT;\\n\\n    // This will allow restricted access to creators.\\n    minters[_type][msg.sender] = true;\\n    // this will allow contract to check if the type exist at all\\n    minters[_type][address(0x0)] = true;\\n\\n    // emit a Transfer event with Create semantic to help with discovery.\\n    emit TransferSingle(msg.sender, address(0x0), address(0x0), _type, 0);\\n\\n    if (bytes(_uri).length > 0) {\\n      _setURI(_type, _uri);\\n    }\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    if (isPowerMinted(id) && !exists(id) && bytes(NFTOneofExtention._tokenURIs[id]).length == 0) {\\n      uint256 _type = getNonFungibleBaseType(id);\\n      require(\\n        minters[_type][msg.sender] == true || _msgSender() == owner(),\\n        'ERC1155: caller is not owner nor approved'\\n      );\\n      require(amount == 1, 'ERC1155: insufficient balance for transfer');\\n      require(typeExists(_type), 'ERC1155: insufficient balance for transfer');\\n      PowerMintValue memory power_mint = power_mints[_type];\\n      require(getNonFungibleIndex(id) <= power_mint.amount, 'ERC1155: insufficient balance for transfer');\\n      require(\\n        !(power_mint.owner == address(0) && power_mint.amount == 0 && bytes(power_mint.metadata).length == 0),\\n        'ERC1155: insufficient balance for transfer'\\n      );\\n\\n      _mint(to, id, 1, '');\\n      NFTOneofExtention._setURI(id, power_mint.metadata);\\n      return;\\n    }\\n    require(from == _msgSender() || isApprovedForAll(from, _msgSender()), 'ERC1155: caller is not owner nor approved');\\n\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override {\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n      if (isPowerMinted(id) && !exists(id) && bytes(NFTOneofExtention._tokenURIs[id]).length == 0) {\\n        uint256 _type = getNonFungibleBaseType(id);\\n        require(\\n          minters[_type][msg.sender] == true || _msgSender() == owner(),\\n          'ERC1155: caller is not owner nor approved'\\n        );\\n        require(amount == 1, 'ERC1155: insufficient balance for transfer');\\n        require(typeExists(_type), 'ERC1155: insufficient balance for transfer');\\n        PowerMintValue memory power_mint = power_mints[_type];\\n        require(getNonFungibleIndex(id) <= power_mint.amount, 'ERC1155: insufficient balance for transfer');\\n        require(\\n          !(power_mint.owner == address(0) && power_mint.amount == 0 && bytes(power_mint.metadata).length == 0),\\n          'ERC1155: insufficient balance for transfer'\\n        );\\n\\n        _mint(from, id, 1, '');\\n        NFTOneofExtention._setURI(id, power_mint.metadata);\\n      }\\n    }\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: transfer caller is not owner nor approved'\\n    );\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual override onlyOwner whenNotDestroyed whenNotPaused {\\n    super.transferOwnership(newOwner);\\n  }\\n\\n  function renounceOwnership() public virtual override onlyOwner whenNotDestroyed whenNotPaused {\\n    super.renounceOwnership();\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n\\n  function ownerOf(uint256 _id)\\n    public\\n    view\\n    virtual\\n    override\\n    whenNotDestroyed\\n    whenNotPaused\\n    nonFungibleItemOnly(_id)\\n    returns (address)\\n  {\\n    address owner = super.ownerOf(_id);\\n    //  if a power minted token has not been selected before _tokenURIs[_id] will be empty\\n    if (owner == address(0) && isPowerMinted(_id) && bytes(_tokenURIs[_id]).length != 0) {\\n      uint256 _type = getNonFungibleBaseType(_id);\\n      PowerMintValue memory power_mint = power_mints[_type];\\n\\n      if (\\n        !(power_mint.owner == address(0) &&\\n          power_mint.amount == 0 &&\\n          bytes(power_mint.metadata).length == 0 &&\\n          getNonFungibleIndex(_id) > power_mint.amount)\\n      ) {\\n        return power_mint.owner;\\n      }\\n    }\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 value\\n  ) public virtual whenNotDestroyed whenNotPaused {\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      'ERC1155: caller is not owner nor approved'\\n    );\\n\\n    _burn(account, id, value);\\n  }\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) public virtual whenNotDestroyed whenNotPaused {\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      'ERC1155: caller is not owner nor approved'\\n    );\\n\\n    _burnBatch(account, ids, values);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override whenNotDestroyed whenNotPaused {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    if (from == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 id = ids[i];\\n        if (isFungible(id)) {\\n          _totalSupply[id] += amounts[i];\\n        }\\n      }\\n    }\\n\\n    if (to == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 id = ids[i];\\n        if (isFungible(id)) {\\n          _totalSupply[id] -= amounts[i];\\n        }\\n      }\\n    }\\n  }\\n\\n  function _setURI(uint256 tokenId, string memory _tokenURI) internal virtual whenNotDestroyed whenNotPaused {\\n    _tokenURIs[tokenId] = _tokenURI;\\n    emit URI(_tokenURI, tokenId);\\n  }\\n\\n  function uri(uint256 tokenId) public view virtual override whenNotDestroyed whenNotPaused returns (string memory) {\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n\\n    if (bytes(_tokenURI).length > 0) {\\n      return _tokenURI;\\n    }\\n\\n    if (isNonFungibleItem(tokenId)) {\\n      uint256 _type = getNonFungibleBaseType(tokenId);\\n\\n      string memory _typeURI = _tokenURIs[_type];\\n      if (bytes(_typeURI).length > 0) {\\n        return _typeURI;\\n      }\\n    }\\n\\n    return super.uri(tokenId);\\n  }\\n\\n  function pause(bool pause_) public virtual onlyOwner whenNotDestroyed {\\n    if (pause_) {\\n      _pause();\\n    } else {\\n      _unpause();\\n    }\\n  }\\n\\n  function destroy() public virtual onlyOwner whenNotPaused {\\n    _destroy();\\n  }\\n}\\n\"\r\n    },\r\n    \"src/MetaTransactions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nabstract contract ReentrancyGuard {\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\\nabstract contract ContextMixin {\\n  function msgSender() internal view returns (address payable sender) {\\n    if (msg.sender == address(this)) {\\n      bytes memory array = msg.data;\\n      uint256 index = msg.data.length;\\n      assembly {\\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n      }\\n    } else {\\n      sender = payable(msg.sender);\\n    }\\n    return sender;\\n  }\\n}\\n\\ncontract Initializable {\\n  bool inited = false;\\n\\n  modifier initializer() {\\n    require(!inited, 'already inited');\\n    _;\\n    inited = true;\\n  }\\n}\\n\\n// File: contracts/common/meta-transactions/EIP712Base.sol\\n\\ncontract EIP712Base is Initializable {\\n  struct EIP712Domain {\\n    string name;\\n    string version;\\n    address verifyingContract;\\n    bytes32 salt;\\n  }\\n\\n  string public constant ERC712_VERSION = '1';\\n\\n  bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n    keccak256(bytes('EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)'));\\n  bytes32 internal domainSeperator;\\n\\n  // supposed to be called once while initializing.\\n  // one of the contracts that inherits this contract follows proxy pattern\\n  // so it is not possible to do this in a constructor\\n  function _initializeEIP712(string memory name) internal initializer {\\n    _setDomainSeperator(name);\\n  }\\n\\n  function _setDomainSeperator(string memory name) internal {\\n    domainSeperator = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        keccak256(bytes(name)),\\n        keccak256(bytes(ERC712_VERSION)),\\n        address(this),\\n        bytes32(getChainId())\\n      )\\n    );\\n  }\\n\\n  function getDomainSeperator() public view returns (bytes32) {\\n    return domainSeperator;\\n  }\\n\\n  function getChainId() public view returns (uint256) {\\n    uint256 id;\\n    assembly {\\n      id := chainid()\\n    }\\n    return id;\\n  }\\n\\n  /**\\n   * Accept message hash and returns hash message in EIP712 compatible form\\n   * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n   * https://eips.ethereum.org/EIPS/eip-712\\n   * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n   * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n   */\\n  function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n    return keccak256(abi.encodePacked('\\\\x19\\\\x01', getDomainSeperator(), messageHash));\\n  }\\n}\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n  bytes32 private constant META_TRANSACTION_TYPEHASH =\\n    keccak256(bytes('MetaTransaction(uint256 nonce,address from,bytes functionSignature)'));\\n  event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n  mapping(address => uint256) nonces;\\n\\n  /*\\n   * Meta transaction structure.\\n   * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n   * He should call the desired function directly in that case.\\n   */\\n  struct MetaTransaction {\\n    uint256 nonce;\\n    address from;\\n    bytes functionSignature;\\n  }\\n\\n  function executeMetaTransaction(\\n    address userAddress,\\n    bytes memory functionSignature,\\n    bytes32 sigR,\\n    bytes32 sigS,\\n    uint8 sigV\\n  ) external payable returns (bytes memory) {\\n    MetaTransaction memory metaTx = MetaTransaction({\\n      nonce: nonces[userAddress],\\n      from: userAddress,\\n      functionSignature: functionSignature\\n    });\\n\\n    require(verify(userAddress, metaTx, sigR, sigS, sigV), 'Signer and signature do not match');\\n\\n    // increase nonce for user (to avoid re-use)\\n    nonces[userAddress] += 1;\\n\\n    emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n\\n    // Append userAddress and relayer address at the end to extract it from calling context\\n    (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n    require(success, 'Function call not successful');\\n\\n    return returnData;\\n  }\\n\\n  function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n    return\\n      keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\\n  }\\n\\n  function getNonce(address user) public view returns (uint256 nonce) {\\n    nonce = nonces[user];\\n  }\\n\\n  function verify(\\n    address signer,\\n    MetaTransaction memory metaTx,\\n    bytes32 sigR,\\n    bytes32 sigS,\\n    uint8 sigV\\n  ) internal view returns (bool) {\\n    require(signer != address(0), 'NativeMetaTransaction: INVALID_SIGNER');\\n    return signer == ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/NFTOneof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport './NFTOneofExtention.sol';\\n\\ncontract NFTOneof is NFTOneofExtention {\\n  mapping(uint256 => uint256) maxIndex;\\n\\n  struct Mint {\\n    bool isNft;\\n    uint256 amount;\\n    uint256 _type;\\n    string metadata;\\n  }\\n\\n  struct Tx {\\n    address to_;\\n    uint256 token_id;\\n    uint256 amount;\\n  }\\n\\n  struct Transfer {\\n    address from_;\\n    Tx[] txs;\\n  }\\n\\n  struct PowerMintSelect {\\n    uint256 token_id;\\n    address recipient;\\n  }\\n\\n  constructor(string memory _uri, string memory _name) ERC1155(_uri) NFTOneofExtention(_name) {}\\n\\n  function mintBatch(\\n    address _to,\\n    Mint[] calldata requests,\\n    bytes calldata _data\\n  ) public onlyCreator whenNotDestroyed whenNotPaused nonReentrant {\\n    uint256 count = 0;\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      Mint memory mint = requests[i];\\n      if (!mint.isNft) {\\n        ++count;\\n      } else {\\n        count = count + mint.amount;\\n      }\\n    }\\n    uint256[] memory ids = new uint256[](count);\\n    uint256[] memory amounts = new uint256[](count);\\n    uint256 index = 0;\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      Mint memory mint = requests[i];\\n      uint256 _type;\\n      if (mint._type == 0) {\\n        _type = createMixedFungibleType(mint.metadata, mint.isNft);\\n      } else {\\n        require(typeExists(mint._type), 'mintBatch: token type does not exist');\\n        require(\\n          !(isFungible(mint._type) && bytes(mint.metadata).length == 0),\\n          'mintBatch: cannot set metadata for an existing fungible token '\\n        );\\n        _type = mint._type;\\n      }\\n\\n      if (isFungible(_type)) {\\n        ids[index] = _type;\\n        amounts[index] = mint.amount;\\n        ++index;\\n      } else {\\n        uint256[] memory mintIds = getNonFungibleItems(_type, mint.amount);\\n        for (uint256 j = 0; j < mintIds.length; j++) {\\n          ids[index] = mintIds[j];\\n          amounts[index] = 1;\\n          ++index;\\n          if ((mint._type != 0 || mintIds.length == 1) && bytes(mint.metadata).length > 0) {\\n            NFTOneofExtention._setURI(mintIds[j], mint.metadata);\\n          }\\n        }\\n      }\\n    }\\n    _mintBatch(_to, ids, amounts, _data);\\n  }\\n\\n  function powerMint(uint256[] memory counts, string[] memory metadataURIs)\\n    public\\n    onlyCreator\\n    whenNotDestroyed\\n    whenNotPaused\\n    nonReentrant\\n    returns (uint256[] memory)\\n  {\\n    require(counts.length == metadataURIs.length, 'PowerMint: counts and metadataURIs length mismatch here');\\n    uint256[] memory _types = new uint256[](counts.length);\\n    for (uint256 i = 0; i < counts.length; i++) {\\n      uint256 _type = initPowerMintingEnabledType(counts[i], metadataURIs[i]);\\n      _types[i] = _type;\\n    }\\n    return _types;\\n  }\\n\\n  function select(PowerMintSelect[] memory requests) public onlyCreator whenNotDestroyed whenNotPaused nonReentrant {\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      PowerMintSelect memory request = requests[i];\\n      require(isNonFungibleItem(request.token_id), 'Select: token must be non fungible');\\n      require(isPowerMinted(request.token_id), 'Select: token must be a powerminted type');\\n      require(\\n        !exists(request.token_id) && bytes(NFTOneofExtention._tokenURIs[request.token_id]).length == 0,\\n        'Select: token already exist'\\n      );\\n      uint256 _type = getNonFungibleBaseType(request.token_id);\\n      require(typeExists(_type), 'Select: token type does not exist');\\n      PowerMintValue memory power_mint = power_mints[_type];\\n      require(getNonFungibleIndex(request.token_id) <= power_mint.amount, 'Select: Token is out of bounds');\\n      require(\\n        !(power_mint.owner == address(0) && power_mint.amount == 0 && bytes(power_mint.metadata).length == 0),\\n        'Select: token undefined'\\n      );\\n      require(\\n        minters[_type][msg.sender] == true || _msgSender() == owner(),\\n        'Select: caller is not an approved minter'\\n      );\\n      _mint(request.recipient, request.token_id, 1, '');\\n      NFTOneofExtention._setURI(request.token_id, power_mint.metadata);\\n    }\\n  }\\n\\n  function transfer(Transfer[] memory requests) public whenNotDestroyed whenNotPaused {\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      Transfer memory request = requests[i];\\n      Tx[] memory txs = request.txs;\\n      for (uint256 j = 0; j < txs.length; j++) {\\n        Tx memory tx_ = txs[j];\\n        safeTransferFrom(request.from_, tx_.to_, tx_.token_id, tx_.amount, '');\\n      }\\n    }\\n  }\\n\\n  function getNonFungibleItems(uint256 _type, uint256 amount)\\n    internal\\n    mintersOnly(_type)\\n    returns (uint256[] memory mints)\\n  {\\n    // No need to check this is a nf type rather than an id since\\n    // creatorOnly() will only let a type pass through.\\n    require(isNonFungible(_type));\\n\\n    // Index are 1-based.\\n    uint256 index = maxIndex[_type] + 1;\\n    maxIndex[_type] = amount + maxIndex[_type];\\n    mints = new uint256[](amount);\\n\\n    for (uint256 i = 0; i < amount; ++i) {\\n      uint256 id = _type | (index + i);\\n      mints[i] = id;\\n      // You could use base-type id to store NF type balances if you wish.\\n      // balances[_type][dst] = quantity.add(balances[_type][dst]);\\n    }\\n    return mints;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"PowerMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NF_INDEX_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POWER_MINT_BIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_NF_BIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isNF\",\"type\":\"bool\"}],\"name\":\"createMixedFungibleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNonFungibleBaseType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNonFungibleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initPowerMintingEnabledType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNonFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNonFungibleBaseType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNonFungibleItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPowerMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct NFTOneof.Mint[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause_\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataURIs\",\"type\":\"string[]\"}],\"name\":\"powerMint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"power_mints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct NFTOneof.PowerMintSelect[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"select\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTOneof.Tx[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct NFTOneof.Transfer[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"typeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTOneof", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002f68747470733a2f2f6170692e6f6e656f662e636f6d2f6e66742f6d657461646174612f6d617469632f30787b69647d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054f6e656f66000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8000e14852121e2093885fe8c1f0c625b0103e8121fc370a3174e4d9533bef8e"}