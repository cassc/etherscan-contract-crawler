{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Automation/PredictionOpsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\".././Interface/IBhavishPrediction.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PredictionOpsManager is Ownable {\\n    IBhavishPrediction[] public predictionMarkets;\\n\\n    constructor(IBhavishPrediction[] memory _bhavishPrediction) {\\n        for (uint256 i = 0; i < _bhavishPrediction.length; i++) {\\n            setPredicitionMarket(_bhavishPrediction[i]);\\n        }\\n    }\\n\\n    function setPredicitionMarket(IBhavishPrediction _bhavishPredicition) public onlyOwner {\\n        require(address(_bhavishPredicition) != address(0), \\\"Invalid predicitions\\\");\\n\\n        predictionMarkets.push(_bhavishPredicition);\\n    }\\n\\n    function removePredictionMarket(IBhavishPrediction _bhavishPrediction) public onlyOwner {\\n        require(address(_bhavishPrediction) != address(0), \\\"Invalid predicitions\\\");\\n\\n        for (uint256 i = 0; i < predictionMarkets.length; i++) {\\n            if (predictionMarkets[i] == _bhavishPrediction) {\\n                predictionMarkets[i] = predictionMarkets[predictionMarkets.length - 1];\\n                predictionMarkets.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * perform  task execution\\n     */\\n    function execute() public {\\n        for (uint256 i = 0; i < predictionMarkets.length; i++) {\\n            IBhavishPrediction.Round memory round = predictionMarkets[i].getCurrentRoundDetails();\\n            //We highly recommend revalidating the upkeep in the performUpkeep function\\n            if (block.timestamp > round.roundEndTimestamp && round.roundState != IBhavishPrediction.RoundState.ENDED) {\\n                predictionMarkets[i].executeRound();\\n            }\\n        }\\n    }\\n\\n    /**\\n     *checks the pre condition before executing op task\\n     */\\n    function canPerformTask(uint256 _delay) external view returns (bool canPerform) {\\n        for (uint256 i = 0; i < predictionMarkets.length; i++) {\\n            IBhavishPrediction.Round memory round = predictionMarkets[i].getCurrentRoundDetails();\\n\\n            canPerform =\\n                block.timestamp > round.roundEndTimestamp + _delay &&\\n                round.roundState != IBhavishPrediction.RoundState.ENDED;\\n\\n            if (canPerform) break;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBhavishPrediction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBhavishPrediction {\\n    enum RoundState {\\n        CREATED,\\n        STARTED,\\n        ENDED,\\n        CANCELLED\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        RoundState roundState;\\n        uint256 upPredictAmount;\\n        uint256 downPredictAmount;\\n        uint256 totalAmount;\\n        uint256 rewardBaseCalAmount;\\n        uint256 rewardAmount;\\n        uint256 startPrice;\\n        uint256 endPrice;\\n        uint256 roundStartTimestamp;\\n        uint256 roundEndTimestamp;\\n    }\\n\\n    struct BetInfo {\\n        uint256 upPredictAmount;\\n        uint256 downPredictAmount;\\n        uint256 amountDispersed;\\n    }\\n\\n    struct AssetPair {\\n        bytes32 underlying;\\n        bytes32 strike;\\n    }\\n\\n    struct PredictionMarketStatus {\\n        bool startPredictionMarketOnce;\\n        bool createPredictionMarketOnce;\\n    }\\n\\n    /**\\n     * @notice Create Round Zero round\\n     * @dev callable by Operator\\n     * @param _roundzeroStartTimestamp: round zero round start timestamp\\n     */\\n    function createPredictionMarket(uint256 _roundzeroStartTimestamp) external;\\n\\n    /**\\n     * @notice Start Zero round\\n     * @dev callable by Operator\\n     */\\n    function startPredictionMarket() external;\\n\\n    /**\\n     * @notice Execute round\\n     * @dev Callable by Operator\\n     */\\n    function executeRound() external;\\n\\n    function getCurrentRoundDetails() external view returns (IBhavishPrediction.Round memory);\\n\\n    function refundUsers(uint256 _predictRoundId, address userAddress) external;\\n\\n    function getAverageBetAmount(uint256[] calldata roundIds, address userAddress) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction[]\",\"name\":\"_bhavishPrediction\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"canPerformTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canPerform\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictionMarkets\",\"outputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"_bhavishPrediction\",\"type\":\"address\"}],\"name\":\"removePredictionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBhavishPrediction\",\"name\":\"_bhavishPredicition\",\"type\":\"address\"}],\"name\":\"setPredicitionMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PredictionOpsManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}