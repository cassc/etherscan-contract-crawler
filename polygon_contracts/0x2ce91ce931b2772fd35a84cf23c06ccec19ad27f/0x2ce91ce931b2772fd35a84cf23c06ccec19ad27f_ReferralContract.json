{"SourceCode": "// Sources flattened with hardhat v2.12.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.8.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/investmetComponents/investmentLib.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract InvestmentLib {\r\n    \r\n\r\n    function convertToDecimal6(\r\n        address _TokenAddress,\r\n        uint256 _amountInStableCoin\r\n    ) public view returns (uint256) {\r\n        uint8 stableCoinDecimal = decimal(_TokenAddress);\r\n        return _amountInStableCoin / 10 ** (stableCoinDecimal - 6);\r\n    }\r\n\r\n    function convertDecimal6ToAnyDecimal(\r\n        address _TokenAddress,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        uint8 tokenDecimal = decimal(_TokenAddress);\r\n        return _amount * 10 ** (tokenDecimal - 6);\r\n    }\r\n\r\n    function decimal(address _TokenAddress) public view returns (uint8) {\r\n        return IERC20Metadata(_TokenAddress).decimals();\r\n    }\r\n\r\n    function calculateAllocationTokenDecimal6ToDecimal6(\r\n        uint256 amount,\r\n        uint256 tokenPrice\r\n    ) internal pure returns (uint256) {\r\n        uint256 allocationToken = (100 * amount) / tokenPrice;\r\n        return allocationToken;\r\n    }\r\n\r\n    function calculateAllocationTokenAnyDecimalTo6(\r\n        address _tokenAddress,\r\n        uint256 _investmentAmount,\r\n        uint256 _tokenPrice\r\n    ) internal view returns (uint256) {\r\n        uint8 stableCoinDecimal = decimal(_tokenAddress);\r\n        uint8 WSDMDecimal = 6;\r\n\r\n        uint256 allocationToken = (100 * _investmentAmount) /\r\n            _tokenPrice /\r\n            10 ** (stableCoinDecimal - WSDMDecimal);\r\n        return allocationToken;\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::transferFrom: transferFrom failed\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/referral.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.17;\r\ncontract ReferralContract is Ownable, InvestmentLib {\r\n    address public invesmentContractAddress;\r\n    address public immutable TWSDMTokenAddress;\r\n    address public immutable USDTokenAddress;\r\n    address public immutable TWSDMTreasury;\r\n    address public immutable USDTreasury;\r\n    ReferralStatistic referralStatistic;\r\n    GeneralStatistic generalStatistic;\r\n\r\n    enum StatusType {\r\n        DONE,\r\n        PENDING,\r\n        CONFIRMED,\r\n        REJECTED,\r\n        CANCELED\r\n    }\r\n    enum Currency {\r\n        TWSDM,\r\n        USD\r\n    }\r\n    struct GeneralStatistic {\r\n        uint256 totalAmountOfReferralInTWSDM;\r\n        uint256 totalAmountOfReferralInUSD;\r\n        uint256 totalAmountOfWithdrawnTWSDM;\r\n        uint256 totalAmountOfWithdrawnUSD;\r\n        uint256 totalAmountOfReferreeInTWSDM;\r\n    }\r\n    struct ReferralStatistic {\r\n        uint256 totalNumberOfReferrer;\r\n        uint256 totalNumberOfReferree;\r\n    }\r\n    struct Person {\r\n        Referral referralBalance;\r\n        Withdraw lastWithdraw;\r\n        uint256 registredAt;\r\n        string referrerClass;\r\n    }\r\n\r\n    struct Referral {\r\n        uint256 bonusInUSD;\r\n        uint256 bonusInTWSDM;\r\n        uint256 blockInUSD;\r\n        uint256 blockInTWSDM;\r\n    }\r\n    struct Withdraw {\r\n        uint256 amountInTWSDM;\r\n        uint256 amountInUSD;\r\n        uint TWSDMWithdrawalPercentage;\r\n        StatusType status;\r\n    }\r\n    struct ReferrerClass {\r\n        uint256 shareOfReferrerToTWSDM;\r\n        uint256 shareOfReferrerToUSD;\r\n        uint256 shareOfRefereeToTWSDM;\r\n        bool canRefer;\r\n    }\r\n    modifier onlyInvestmentContract() {\r\n        require(\r\n            msg.sender == invesmentContractAddress,\r\n            \"ReferralContract: only invesment contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    mapping(address => Person) public addressPersonMap;\r\n    mapping(string => ReferrerClass) private referrerClassKeyReferrerClassMap;\r\n\r\n    event newReferralClassAdded(string key);\r\n\r\n    event newPersonAdded(address person, address referrer);\r\n    event newReferral(\r\n        address indexed referrer,\r\n        address indexed referree,\r\n        uint256 referrerBonusInTWSDM,\r\n        uint256 referrerBonusInUSD\r\n    );\r\n    event Withdrawal(\r\n        address indexed person,\r\n        uint256 amountInTWSDM,\r\n        uint256 amountInUSD,\r\n        uint TWSDMWithdrawalPercentage,\r\n        StatusType status\r\n    );\r\n\r\n    constructor(\r\n        address _TWSDMTokenAddress,\r\n        address _USDTokenAddress,\r\n        address _TWSDMTreasury,\r\n        address _USDTreasury,\r\n        ReferrerClass memory _defaultReferrerClass\r\n    ) {\r\n        _addOrUpdateReferrerClass(\"default\", _defaultReferrerClass);\r\n        TWSDMTokenAddress = _TWSDMTokenAddress;\r\n        USDTokenAddress = _USDTokenAddress;\r\n        TWSDMTreasury = _TWSDMTreasury;\r\n        USDTreasury = _USDTreasury;\r\n    }\r\n\r\n    function referral(\r\n        address _referrer,\r\n        address _referee,\r\n        uint256 _investedAmount,\r\n        uint256 _TWSDMPriceInCent\r\n    ) public onlyInvestmentContract {\r\n        if (_referrer != address(0)) {\r\n            require(\r\n                _referee != _referrer,\r\n                \"ReferralContract: You cannot refer yourself\"\r\n            );\r\n            _setReferralData(\r\n                _referrer,\r\n                _referee,\r\n                _investedAmount,\r\n                _TWSDMPriceInCent\r\n            );\r\n            _setRefereeData(\r\n                _referrer,\r\n                _referee,\r\n                _investedAmount,\r\n                _TWSDMPriceInCent\r\n            );\r\n        }\r\n        if (addressPersonMap[_referee].registredAt == 0)\r\n            _addPerson(_referee, _referrer, \"default\");\r\n    }\r\n\r\n    function setInvestmentContractAddress(\r\n        address _invesmentContractAddress\r\n    ) public onlyOwner {\r\n        invesmentContractAddress = _invesmentContractAddress;\r\n    }\r\n\r\n    function addPerson(\r\n        address _person,\r\n        string memory _referrerClassKey\r\n    ) public onlyOwner {\r\n        _addPerson(_person, msg.sender, _referrerClassKey);\r\n    }\r\n\r\n    function addOrUpdateReferrerClass(\r\n        string memory _referrerClassKey,\r\n        ReferrerClass memory _referrerClass\r\n    ) public onlyOwner {\r\n        _addOrUpdateReferrerClass(_referrerClassKey, _referrerClass);\r\n    }\r\n\r\n    function updatePersonReferrerClass(\r\n        address _person,\r\n        string memory _referrerClassKey\r\n    ) public onlyOwner {\r\n        addressPersonMap[_person].referrerClass = _referrerClassKey;\r\n    }\r\n\r\n    function requestWithdraw(uint _TWSDMWithdrawalPercentage) public {\r\n        require(\r\n            _TWSDMWithdrawalPercentage <= 100,\r\n            \"ReferralContract: The input value must be between 0 and 100\"\r\n        );\r\n        Withdraw memory _lastWithdraw = addressPersonMap[msg.sender]\r\n            .lastWithdraw;\r\n\r\n        require(\r\n            _lastWithdraw.status != StatusType.PENDING,\r\n            \"ReferralContract: You have already registered a withdrawal request\"\r\n        );\r\n\r\n        require(\r\n            addressPersonMap[msg.sender].referralBalance.bonusInUSD >0 ||\r\n            addressPersonMap[msg.sender].referralBalance.bonusInTWSDM >0 ,\r\n            \"ReferralContract: Insufficient referral balance\"\r\n        );\r\n\r\n        uint256 _amountInTWSDM = (addressPersonMap[msg.sender]\r\n            .referralBalance\r\n            .bonusInTWSDM * _TWSDMWithdrawalPercentage) / 100;\r\n        uint256 _amountInUSD = (addressPersonMap[msg.sender]\r\n            .referralBalance\r\n            .bonusInUSD * (100 - _TWSDMWithdrawalPercentage)) / 100;\r\n\r\n        Withdraw memory _withdraw = Withdraw({\r\n            amountInTWSDM: _amountInTWSDM,\r\n            amountInUSD: _amountInUSD,\r\n            status: StatusType.PENDING,\r\n            TWSDMWithdrawalPercentage: _TWSDMWithdrawalPercentage\r\n        });\r\n        addressPersonMap[msg.sender].lastWithdraw = _withdraw;\r\n        addressPersonMap[msg.sender].referralBalance.blockInTWSDM = addressPersonMap[msg.sender].referralBalance.bonusInTWSDM;\r\n        addressPersonMap[msg.sender].referralBalance.blockInUSD= addressPersonMap[msg.sender].referralBalance.bonusInUSD;\r\n\r\n        addressPersonMap[msg.sender].referralBalance.bonusInTWSDM = 0;\r\n        addressPersonMap[msg.sender].referralBalance.bonusInUSD = 0;\r\n\r\n        emit Withdrawal(\r\n            msg.sender,\r\n            _amountInTWSDM,\r\n            _amountInUSD,\r\n            _TWSDMWithdrawalPercentage,\r\n            StatusType.PENDING\r\n        );\r\n    }\r\n\r\n    function cancelRequestWithdraw() public {\r\n        Withdraw storage _lastWithdraw = addressPersonMap[msg.sender]\r\n            .lastWithdraw;\r\n        require(\r\n            _lastWithdraw.status == StatusType.PENDING,\r\n            \"ReferralContract: No requests have been registered for you\"\r\n        );\r\n        _lastWithdraw.status = StatusType.CANCELED;\r\n        _increaseBalanceAmount(\r\n            msg.sender        );\r\n        emit Withdrawal(\r\n            msg.sender,\r\n            _lastWithdraw.amountInTWSDM,\r\n            _lastWithdraw.amountInUSD,\r\n            _lastWithdraw.TWSDMWithdrawalPercentage,\r\n            _lastWithdraw.status\r\n        );\r\n    }\r\n\r\n    function withdraw(address _person, StatusType _status) public onlyOwner {\r\n        Withdraw storage _lastWithdraw = addressPersonMap[_person].lastWithdraw;\r\n\r\n        require(\r\n            _lastWithdraw.status == StatusType.PENDING,\r\n            \"ReferralContract: No withdrawal request has been registered for this person\"\r\n        );\r\n\r\n        if (_status == StatusType.REJECTED) {\r\n            _lastWithdraw.status = _status;\r\n            _increaseBalanceAmount(\r\n                _person\r\n            );\r\n        } else if (_status == StatusType.CONFIRMED) {\r\n            _lastWithdraw.status = _status;\r\n\r\n            if (_lastWithdraw.amountInUSD > 0) {\r\n                safeTransferFrom(\r\n                    USDTokenAddress,\r\n                    USDTreasury,\r\n                    _person,\r\n                    convertDecimal6ToAnyDecimal(\r\n                        USDTokenAddress,\r\n                        _lastWithdraw.amountInUSD\r\n                    )\r\n                );\r\n                generalStatistic.totalAmountOfWithdrawnUSD += _lastWithdraw\r\n                    .amountInUSD;\r\n            }\r\n            if (_lastWithdraw.amountInTWSDM > 0) {\r\n                safeTransferFrom(\r\n                    TWSDMTokenAddress,\r\n                    TWSDMTreasury,\r\n                    _person,\r\n                    _lastWithdraw.amountInTWSDM\r\n                );\r\n                generalStatistic.totalAmountOfWithdrawnTWSDM += _lastWithdraw\r\n                    .amountInTWSDM;\r\n            }\r\n            addressPersonMap[_person].referralBalance.blockInTWSDM = 0;   \r\n            addressPersonMap[_person].referralBalance.blockInUSD = 0;\r\n\r\n        } else {\r\n            revert(\"ReferralContract: Unexpected status!\");\r\n        }\r\n        emit Withdrawal(\r\n            _person,\r\n            _lastWithdraw.amountInTWSDM,\r\n            _lastWithdraw.amountInUSD,\r\n            _lastWithdraw.TWSDMWithdrawalPercentage,\r\n            _lastWithdraw.status\r\n        );\r\n    }\r\n\r\n    // getter\r\n\r\n    function getPersonData(\r\n        address _person\r\n    ) public view returns (Person memory) {\r\n        return addressPersonMap[_person];\r\n    }\r\n\r\n    function getPersonAvailableBalance(\r\n        address _person\r\n    ) public view returns (uint256 TWSDM, uint256 USD) {\r\n        TWSDM = addressPersonMap[_person].referralBalance.bonusInTWSDM;\r\n        USD = addressPersonMap[_person].referralBalance.bonusInUSD;\r\n    }\r\n\r\n    function getNumberOfTotalRefereeAndReferrer()\r\n        public\r\n        view\r\n        returns (ReferralStatistic memory)\r\n    {\r\n        return (referralStatistic);\r\n    }\r\n\r\n    function getGeneralStatisticsOfPaidTokens()\r\n        public\r\n        view\r\n        returns (GeneralStatistic memory)\r\n    {\r\n        return (generalStatistic);\r\n    }\r\n\r\n    function getReferrerClassByKey(\r\n        string memory _referrerClassKey\r\n    ) public view returns (ReferrerClass memory) {\r\n        return referrerClassKeyReferrerClassMap[_referrerClassKey];\r\n    }\r\n\r\n    // private function\r\n\r\n    function _setReferralData(\r\n        address _referrer,\r\n        address _referee,\r\n        uint256 _investedAmount,\r\n        uint256 _TWSDMPriceInCent\r\n    ) private {\r\n        ReferrerClass\r\n            memory refererClassData = referrerClassKeyReferrerClassMap[\r\n                addressPersonMap[_referrer].referrerClass\r\n            ];\r\n\r\n        require(\r\n            refererClassData.canRefer,\r\n            \"ReferralContract: Referrer not found with this address\"\r\n        );\r\n\r\n        uint256 _referrerBonusInUSD = ((refererClassData.shareOfReferrerToUSD) *\r\n            _investedAmount) / 100;\r\n        uint256 _referrerBonusInTWSDM = ((\r\n            refererClassData.shareOfReferrerToTWSDM\r\n        ) * _investedAmount) / _TWSDMPriceInCent;\r\n\r\n        addressPersonMap[_referrer]\r\n            .referralBalance\r\n            .bonusInUSD += _referrerBonusInUSD;\r\n        addressPersonMap[_referrer]\r\n            .referralBalance\r\n            .bonusInTWSDM += _referrerBonusInTWSDM;\r\n        generalStatistic.totalAmountOfReferralInTWSDM += _referrerBonusInTWSDM;\r\n        generalStatistic.totalAmountOfReferralInUSD += _referrerBonusInUSD;\r\n        emit newReferral(\r\n            _referrer,\r\n            _referee,\r\n            _referrerBonusInTWSDM,\r\n            _referrerBonusInUSD\r\n        );\r\n    }\r\n\r\n    function _setRefereeData(\r\n        address _referrer,\r\n        address _referee,\r\n        uint256 _investedAmount,\r\n        uint256 _TWSDMPriceInCent\r\n    ) private {\r\n        ReferrerClass\r\n            memory refererClassData = referrerClassKeyReferrerClassMap[\r\n                addressPersonMap[_referrer].referrerClass\r\n            ];\r\n\r\n        uint256 _refereeBonusInTWSDM = ((refererClassData.shareOfRefereeToTWSDM) *\r\n            _investedAmount) / _TWSDMPriceInCent;\r\n\r\n        referralStatistic.totalNumberOfReferree += 1;\r\n        generalStatistic.totalAmountOfReferreeInTWSDM += _refereeBonusInTWSDM;\r\n        \r\n        safeTransferFrom(\r\n            TWSDMTokenAddress,\r\n            TWSDMTreasury,\r\n            _referee,\r\n            _refereeBonusInTWSDM\r\n        );\r\n    }\r\n\r\n    function _addPerson(\r\n        address _person,\r\n        address _referrer,\r\n        string memory _referrerClassKey\r\n    ) private {\r\n        require(\r\n            addressPersonMap[_person].registredAt == 0,\r\n            \"ReferralContract: This address is in our persons list\"\r\n        );\r\n        addressPersonMap[_person].registredAt = block.timestamp;\r\n        addressPersonMap[_person].referrerClass = _referrerClassKey;\r\n        referralStatistic.totalNumberOfReferrer += 1;\r\n        emit newPersonAdded(_person, _referrer);\r\n    }\r\n\r\n    function _addOrUpdateReferrerClass(\r\n        string memory _referrerClassKey,\r\n        ReferrerClass memory _ReferrerClass\r\n    ) private {\r\n        referrerClassKeyReferrerClassMap[_referrerClassKey] = _ReferrerClass;\r\n        emit newReferralClassAdded(_referrerClassKey);\r\n    }\r\n\r\n    function _increaseBalanceAmount(\r\n        address _person\r\n    ) private {\r\n        addressPersonMap[_person].referralBalance.bonusInTWSDM +=addressPersonMap[_person].referralBalance.blockInTWSDM;\r\n        addressPersonMap[_person].referralBalance.blockInTWSDM = 0;   \r\n        addressPersonMap[_person].referralBalance.bonusInUSD +=addressPersonMap[_person].referralBalance.blockInUSD;\r\n        addressPersonMap[_person].referralBalance.blockInUSD = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TWSDMTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TWSDMTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTreasury\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shareOfReferrerToTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOfReferrerToUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOfRefereeToTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canRefer\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralContract.ReferrerClass\",\"name\":\"_defaultReferrerClass\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTWSDM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TWSDMWithdrawalPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ReferralContract.StatusType\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"newPersonAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerBonusInTWSDM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerBonusInUSD\",\"type\":\"uint256\"}],\"name\":\"newReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"newReferralClassAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TWSDMTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWSDMTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_referrerClassKey\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shareOfReferrerToTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOfReferrerToUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOfRefereeToTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canRefer\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralContract.ReferrerClass\",\"name\":\"_referrerClass\",\"type\":\"tuple\"}],\"name\":\"addOrUpdateReferrerClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_referrerClassKey\",\"type\":\"string\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressPersonMap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bonusInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusInTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockInTWSDM\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralContract.Referral\",\"name\":\"referralBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TWSDMWithdrawalPercentage\",\"type\":\"uint256\"},{\"internalType\":\"enum ReferralContract.StatusType\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ReferralContract.Withdraw\",\"name\":\"lastWithdraw\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"registredAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referrerClass\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRequestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertDecimal6ToAnyDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountInStableCoin\",\"type\":\"uint256\"}],\"name\":\"convertToDecimal6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneralStatisticsOfPaidTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOfReferralInTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfReferralInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfWithdrawnTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfWithdrawnUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfReferreeInTWSDM\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralContract.GeneralStatistic\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTotalRefereeAndReferrer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalNumberOfReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNumberOfReferree\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralContract.ReferralStatistic\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"getPersonAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"getPersonData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bonusInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusInTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockInTWSDM\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralContract.Referral\",\"name\":\"referralBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TWSDMWithdrawalPercentage\",\"type\":\"uint256\"},{\"internalType\":\"enum ReferralContract.StatusType\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ReferralContract.Withdraw\",\"name\":\"lastWithdraw\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"registredAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referrerClass\",\"type\":\"string\"}],\"internalType\":\"struct ReferralContract.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_referrerClassKey\",\"type\":\"string\"}],\"name\":\"getReferrerClassByKey\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shareOfReferrerToTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOfReferrerToUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOfRefereeToTWSDM\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canRefer\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralContract.ReferrerClass\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invesmentContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TWSDMPriceInCent\",\"type\":\"uint256\"}],\"name\":\"referral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TWSDMWithdrawalPercentage\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invesmentContractAddress\",\"type\":\"address\"}],\"name\":\"setInvestmentContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_referrerClassKey\",\"type\":\"string\"}],\"name\":\"updatePersonReferrerClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"},{\"internalType\":\"enum ReferralContract.StatusType\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReferralContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000f4e2f0b6e9f5ea97d2f959f6a3b4534d03f1404000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000047742a9b57b13dd909909e511ed2a6982af32cd2000000000000000000000000a7572ea558dc262575c36a068b88391ec65f8e950000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bccbf6e3afd95abc824439df85f6c8cebd4939e0b710a98741bc4d44ff090928"}