{"SourceCode": "/**\r\n *Submitted for verification at FtmScan.com on 2021-07-14\r\n*/\r\n\r\n// Sources flattened with hardhat v2.4.3 https://hardhat.org\r\n\r\n// File contracts/constants/Tokens.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.6;\r\n\r\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n\r\n// File contracts/interfaces/IGelatoPineCore.sol\r\n\r\ninterface IGelatoPineCore {\r\n    function vaultOfOrder(\r\n        address _module,\r\n        address _inputToken,\r\n        address payable _owner,\r\n        address _witness,\r\n        bytes calldata _data\r\n    ) external view returns (address);\r\n\r\n    function keyOf(\r\n        address _module,\r\n        address _inputToken,\r\n        address payable _owner,\r\n        address _witness,\r\n        bytes calldata _data\r\n    ) external pure returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/ERC20OrderRouter.sol\r\n\r\n\r\n\r\ncontract ERC20OrderRouter {\r\n    IGelatoPineCore public immutable gelatoPineCore;\r\n\r\n    event DepositToken(\r\n        bytes32 indexed key,\r\n        address indexed caller,\r\n        uint256 amount,\r\n        address module,\r\n        address inputToken,\r\n        address indexed owner,\r\n        address witness,\r\n        bytes data,\r\n        bytes32 secret\r\n    );\r\n\r\n    constructor(IGelatoPineCore _gelatoPineCore) {\r\n        gelatoPineCore = _gelatoPineCore;\r\n    }\r\n\r\n    // solhint-disable max-line-length\r\n    /** @dev To be backward compatible with old ERC20 Order submission\r\n    * parameters are in format expected by subgraph:\r\n    * https://github.com/gelatodigital/limit-orders-subgraph/blob/7614c138e462577475d240074000c60bad6b76cc/src/handlers/Order.ts#L58\r\n    ERC20 transfer should have an extra data we use to identify a order.\r\n    * A transfer with a order looks like:\r\n    *\r\n    * 0xa9059cbb\r\n    * 000000000000000000000000c8b6046580622eb6037d5ef2ca74faf63dc93631\r\n    * 0000000000000000000000000000000000000000000000000de0b6b3a7640000\r\n    * 0000000000000000000000000000000000000000000000000000000000000060\r\n    * 0000000000000000000000000000000000000000000000000000000000000120\r\n    * 000000000000000000000000ef6c6b0bce4d2060efab0d16736c6ce7473deddc\r\n    * 000000000000000000000000c7ad46e0b8a400bb3c915120d284aafba8fc4735\r\n    * 0000000000000000000000005523f2fc0889a6d46ae686bcd8daa9658cf56496\r\n    * 0000000000000000000000008153f16765f9124d754c432add5bd40f76f057b4\r\n    * 00000000000000000000000000000000000000000000000000000000000000c0\r\n    * 67656c61746f6e6574776f726b2020d83ddc09ea73fa863b164de440a270be31\r\n    * 0000000000000000000000000000000000000000000000000000000000000060\r\n    * 000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\r\n    * 00000000000000000000000000000000000000000000000004b1e20ebf83c000\r\n    * 000000000000000000000000842A8Dea50478814e2bFAFF9E5A27DC0D1FdD37c\r\n    *\r\n    * The important part is 67656c61746f6e6574776f726b which is gelato's secret (gelatonetwork in hex)\r\n    * We use that as the index to parse the input data:\r\n    * - module = 5 * 32 bytes before secret index\r\n    * - inputToken = ERC20 which emits the Transfer event\r\n    * - owner = `from` parameter of the Transfer event\r\n    * - witness = 2 * 32 bytes before secret index\r\n    * - secret = 32 bytes from the secret index\r\n    * - data = 2 * 32 bytes after secret index (64 or 96 bytes length). Contains:\r\n    *   - outputToken =  2 * 32 bytes after secret index\r\n    *   - minReturn =  3 * 32 bytes after secret index\r\n    *   - handler =  4 * 32 bytes after secret index (optional)\r\n    *\r\n    */\r\n    // solhint-disable function-max-lines\r\n    function depositToken(\r\n        uint256 _amount,\r\n        address _module,\r\n        address _inputToken,\r\n        address payable _owner,\r\n        address _witness,\r\n        bytes calldata _data,\r\n        bytes32 _secret\r\n    ) external {\r\n        require(\r\n            _inputToken != ETH,\r\n            \"ERC20OrderRouter.depositToken: ONLY_ERC20\"\r\n        );\r\n\r\n        bytes32 key =\r\n            gelatoPineCore.keyOf(_module, _inputToken, _owner, _witness, _data);\r\n\r\n        IERC20(_inputToken).transferFrom(\r\n            msg.sender,\r\n            gelatoPineCore.vaultOfOrder(\r\n                _module,\r\n                _inputToken,\r\n                _owner,\r\n                _witness,\r\n                _data\r\n            ),\r\n            _amount\r\n        );\r\n\r\n        emit DepositToken(\r\n            key,\r\n            msg.sender,\r\n            _amount,\r\n            _module,\r\n            _inputToken,\r\n            _owner,\r\n            _witness,\r\n            _data,\r\n            _secret\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IGelatoPineCore\",\"name\":\"_gelatoPineCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"witness\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoPineCore\",\"outputs\":[{\"internalType\":\"contract IGelatoPineCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC20OrderRouter", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000038c4092b28dab7f3d98ee6524549571c283cdfa5", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d923f03463f8e3e4aa445abb9ca100d01bcdc86f2398bf9c37ba009a348b8373"}