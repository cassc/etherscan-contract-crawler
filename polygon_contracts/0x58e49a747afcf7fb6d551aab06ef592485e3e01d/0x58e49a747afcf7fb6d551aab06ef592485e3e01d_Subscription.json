{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Subscription.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DarkMatter.sol\\\";\\nimport \\\"./GenerationManager.sol\\\";\\nimport \\\"./StableCoinAcceptor.sol\\\";\\nimport \\\"./Exchange.sol\\\";\\nimport \\\"./StackOsNFTBasic.sol\\\";\\nimport \\\"./interfaces/IDecimals.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Subscription is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    event SetOnlyFirstGeneration();\\n    event SetDripPeriod(uint256 _seconds);\\n    event SetPrice(uint256 price);\\n    event SetMaxPrice(uint256 maxPrice);\\n    event SetBonusPercent(uint256 _percent);\\n    event SetTaxReductionAmount(uint256 _amount);\\n    event SetForgivenessPeriod(uint256 _seconds);\\n    event NewPeriodStarted(uint256 newPeriodId);\\n\\n    event Subscribe(\\n        address indexed subscriberWallet,\\n        uint256 nextPayDate,\\n        uint256 generationId,\\n        uint256 tokenId,\\n        uint256 stablePayed,\\n        uint256 stackReceived,\\n        uint256 userBonus,\\n        IERC20 _stablecoin,\\n        bool _payWithStack,\\n        uint256 periodId\\n    );\\n\\n    event WithdrawRewards(\\n        address indexed subscriberWallet,\\n        uint256 amountWithdrawn,\\n        uint256 generationId, \\n        uint256[] tokenIds\\n    );\\n\\n    event PurchaseNewNft(\\n        address indexed subscriberWallet,\\n        uint256 generationId,\\n        uint256 tokenId,\\n        uint256 purchaseGenerationId,\\n        uint256 amountToMint\\n    );\\n\\n    event Withdraw(\\n        address indexed subscriberWallet,\\n        uint256 generationId,\\n        uint256 tokenId,\\n        uint256 amountWithdrawn\\n    );\\n\\n    event ClaimBonus(\\n        address indexed subscriberWallet,\\n        uint256 generationId,\\n        uint256 tokenId,\\n        uint256 amountWithdrawn\\n    );\\n\\n    IERC20 internal immutable stackToken;\\n    GenerationManager internal immutable generations;\\n    DarkMatter internal immutable darkMatter;\\n    StableCoinAcceptor internal immutable stableAcceptor;\\n    Exchange internal immutable exchange;\\n    address internal immutable taxAddress;\\n\\n    uint256 internal constant HUNDRED_PERCENT = 10000;\\n    uint256 public constant PRICE_PRECISION = 1e18; // how much decimals `price` has\\n    uint256 public constant MONTH = 30 days;\\n\\n    uint256 public totalDeposited;\\n    uint256 public totalRewards;\\n\\n    uint256 public dripPeriod;\\n    uint256 public forgivenessPeriod;\\n    uint256 public price; // price in USD\\n    uint256 public maxPrice;\\n    uint256 public bonusPercent;\\n    uint256 public taxReductionAmount;\\n    uint256 public currentPeriodId;\\n    uint256 public adminWithdrawable;\\n    bool public isOnlyFirstGeneration;\\n\\n    enum withdrawStatus {\\n        withdraw,\\n        purchase\\n    }\\n\\n    struct Period {\\n        uint256 balance; // total fees collected from mint\\n        uint256 withdrawn; // total fees withdrawn as rewards\\n        uint256 subsNum; // total subscribed tokens during this period\\n        uint256 endAt;   // when period ended, then subs can claim reward\\n        mapping(uint256 => mapping(uint256 => PeriodTokenData)) tokenData; // tokens related data, see struct \\n    }\\n\\n    struct PeriodTokenData {\\n        bool isSub;         // whether token is subscribed during period\\n        uint256 withdrawn;  // this is probably unchanged once written, and is equal to token's share in period\\n    }\\n\\n    struct Bonus {\\n        uint256 total;\\n        uint256 lastTxDate;\\n        uint256 releasePeriod;\\n        uint256 lockedAmount;\\n    }\\n\\n    struct Deposit {\\n        uint256 balance; // amount without bonus\\n        Bonus[] bonuses; // subscription bonuses\\n        uint256 tax; // tax percent on withdraw\\n        uint256 nextPayDate; // you can subscribe after this date, but before deadline to reduce tax\\n    }\\n\\n    mapping(uint256 => Period) public periods;\\n    mapping(uint256 => mapping(uint256 => Deposit)) public deposits; // generationId => tokenId => Deposit\\n    mapping(uint256 => mapping(uint256 => uint256)) public bonusDripped; // generationId => tokenId => total bonuses unlocked\\n\\n    modifier restrictGeneration(uint256 generationId) {\\n        requireCorrectGeneration(generationId);\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _stackToken,\\n        GenerationManager _generations,\\n        DarkMatter _darkMatter,\\n        StableCoinAcceptor _stableAcceptor,\\n        Exchange _exchange,\\n        address _taxAddress,\\n        uint256 _forgivenessPeriod,\\n        uint256 _price,\\n        uint256 _bonusPercent,\\n        uint256 _taxReductionAmount\\n    ) {\\n        stackToken = _stackToken;\\n        generations = _generations;\\n        darkMatter = _darkMatter;\\n        stableAcceptor = _stableAcceptor;\\n        exchange = _exchange;\\n        taxAddress = _taxAddress;\\n        forgivenessPeriod = _forgivenessPeriod;\\n        price = _price;\\n        bonusPercent = _bonusPercent;\\n        taxReductionAmount = _taxReductionAmount;\\n    }    \\n    \\n    /**\\n     * @notice If set, then only 1st generation allowed to use contract, \\n     *         otherwise only generation 2 and onward can.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setOnlyFirstGeneration() external onlyOwner {\\n        isOnlyFirstGeneration = true;\\n        emit SetOnlyFirstGeneration();\\n    }\\n\\n    /**\\n     * @notice Set bonus drip period.\\n     * @param _seconds Amount of seconds required to fully release bonus.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setDripPeriod(uint256 _seconds) external onlyOwner {\\n        require(_seconds > 0, \\\"Cant be zero\\\");\\n        dripPeriod = _seconds;\\n        emit SetDripPeriod(_seconds);\\n    }\\n\\n    /**\\n     * @notice Set subscription price.\\n     * @param _price New price in USD. Must have `PRICE_PRECISION` decimals.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setPrice(uint256 _price) external onlyOwner {\\n        require(_price > 0, \\\"Cant be zero\\\");\\n        price = _price;\\n        emit SetPrice(_price);\\n    }\\n\\n    /**\\n     * @notice Set max subscription price, usde only if contract locked to 1st generation.\\n     * @param _maxPrice Max price in USD. Must have `PRICE_PRECISION` decimals.\\n     * @dev Could only be invoked by the contract owner.\\n     * @dev Max price unused in 2nd generation and onward.\\n     */\\n    function setMaxPrice(uint256 _maxPrice) external onlyOwner {\\n        require(_maxPrice > 0, \\\"Cant be zero\\\");\\n        maxPrice = _maxPrice;\\n        emit SetMaxPrice(_maxPrice);\\n    }\\n\\n    /**\\n     * @notice Set bonus added for each subscription.\\n     * @param _percent Bonus percent.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setBonusPercent(uint256 _percent) external onlyOwner {\\n        require(_percent <= HUNDRED_PERCENT, \\\"invalid basis points\\\");\\n        bonusPercent = _percent;\\n        emit SetBonusPercent(_percent);\\n    }\\n\\n    /**\\n     * @notice Set tax reduction amount.\\n     * @param _amount Amount to subtract from tax on each subscribed month in a row.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setTaxReductionAmount(uint256 _amount) external onlyOwner {\\n        require(_amount <= HUNDRED_PERCENT, \\\"invalid basis points\\\");\\n        taxReductionAmount = _amount;\\n        emit SetTaxReductionAmount(_amount);\\n    }\\n\\n    /**\\n     * @notice Set forgiveness period for resubscribe to keep TAX reducing.\\n     * @param _seconds Amount of seconds.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setForgivenessPeriod(uint256 _seconds) external onlyOwner {\\n        require(_seconds > 0, \\\"Cant be zero\\\");\\n        forgivenessPeriod = _seconds;\\n        emit SetForgivenessPeriod(_seconds);\\n    }  \\n    \\n    /**\\n     * @dev Reverts if generationId doesn't match contract's desired generation.\\n     * @dev This is used in modifier.\\n     */\\n    function requireCorrectGeneration(uint256 generationId) internal view {\\n        if(isOnlyFirstGeneration)\\n            require(generationId == 0, \\\"Generation should be 0\\\");\\n        else\\n            require(generationId > 0, \\\"Generation shouldn't be 0\\\");\\n    }\\n\\n    /**\\n     * @notice View periods.tokenData struct\\n     */\\n    function viewPeriodTokenData(\\n        uint256 periodId, \\n        uint256 tokenId, \\n        uint256 generationId\\n    ) external view returns (PeriodTokenData memory) {\\n        return periods[periodId].tokenData[tokenId][generationId];\\n    }\\n\\n    /**\\n     *  @notice Pay subscription.\\n     *  @param generationId StackNFT generation id.\\n     *  @param tokenIds StackNFT token ids.\\n     *  @param _payAmount Amount to pay for one token. Unused if `isOnlyFirstGeneration == false`.\\n     *  @param _stablecoin Address of supported stablecoin to pay with. Unused if `_payWithStack == true`.\\n     *  @param _payWithStack Whether to pay with STACK token.\\n     *  @dev Caller must approve us to spend `price` amount of `_stablecoin`.\\n     *  @dev If paying with stack, caller must approve stack amount worth of `price` in usd.\\n     */\\n    function subscribe(\\n        uint256 generationId,\\n        uint256[] calldata tokenIds,\\n        uint256 _payAmount,\\n        IERC20 _stablecoin,\\n        bool _payWithStack\\n    ) \\n        public \\n        nonReentrant \\n        restrictGeneration(generationId)\\n    {\\n        require(tx.origin == msg.sender, \\\"Only EOW\\\");\\n        require(\\n            // don't validate stables when paying with stack\\n            _payWithStack || stableAcceptor.supportsCoin(_stablecoin), \\n            \\\"Unsupported stablecoin\\\"\\n        );\\n\\n        uint256 _price = price;\\n        if(isOnlyFirstGeneration) {\\n            _price = _payAmount;\\n            require(\\n                _payAmount >= price && _payAmount <= maxPrice, \\n                \\\"Wrong pay amount\\\"\\n            );\\n        }\\n\\n        updatePeriod();\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            if(periods[currentPeriodId].tokenData[generationId][tokenId].isSub == false) {\\n                periods[currentPeriodId].subsNum += 1;\\n                periods[currentPeriodId].tokenData[generationId][tokenId].isSub = true;\\n            }\\n\\n            _subscribe(generationId, tokenId, _price, _stablecoin, _payWithStack);\\n        }\\n    }\\n\\n    function _subscribe(\\n        uint256 generationId,\\n        uint256 tokenId,\\n        uint256 _price,\\n        IERC20 _stablecoin,\\n        bool _payWithStack\\n    ) internal {\\n        require(generationId < generations.count(), \\\"Generation doesn't exist\\\");\\n        require(\\n            generations.get(generationId).exists(tokenId), \\n            \\\"Token doesn't exists\\\"\\n        );\\n\\n        Deposit storage deposit = deposits[generationId][tokenId];\\n        require(deposit.nextPayDate < block.timestamp, \\\"Cant pay in advance\\\");\\n\\n        // Paid after deadline?\\n        if (deposit.nextPayDate + forgivenessPeriod < block.timestamp) {\\n            deposit.tax = HUNDRED_PERCENT;\\n        }\\n\\n        deposit.tax = subOrZero(deposit.tax, taxReductionAmount);\\n        deposit.nextPayDate = block.timestamp + MONTH;\\n\\n        uint256 amount;\\n        if(_payWithStack) {\\n            _stablecoin = stableAcceptor.stablecoins(0);\\n            // price has 18 decimals, convert to stablecoin decimals\\n            _price = _price * \\n                10 ** IDecimals(address(_stablecoin)).decimals() /\\n                PRICE_PRECISION;\\n            // get stack amount we need to sell to get `price` amount of usd\\n            amount = exchange.getAmountIn(\\n                _price, \\n                _stablecoin, \\n                stackToken\\n            );\\n            stackToken.transferFrom(msg.sender, address(this), amount);\\n        } else {\\n            // price has 18 decimals, convert to stablecoin decimals\\n            _price = _price * \\n                10 ** IDecimals(address(_stablecoin)).decimals() /\\n                PRICE_PRECISION;\\n            _stablecoin.safeTransferFrom(msg.sender, address(this), _price);\\n            _stablecoin.approve(address(exchange), _price);\\n            amount = exchange.swapExactTokensForTokens(\\n                _price,\\n                _stablecoin,\\n                stackToken\\n            );\\n        }\\n\\n        totalDeposited += amount;\\n        deposit.balance += amount;\\n\\n        // bonuses logic\\n        updateBonuses(generationId, tokenId);\\n        uint256 bonusAmount = amount * bonusPercent / HUNDRED_PERCENT;\\n        deposit.bonuses.push(Bonus({\\n            total: bonusAmount,\\n            lastTxDate: block.timestamp,\\n            releasePeriod: dripPeriod,\\n            lockedAmount: bonusAmount\\n        }));\\n        emit Subscribe(\\n            msg.sender,\\n            deposit.nextPayDate,\\n            generationId,\\n            tokenId,\\n            _price,\\n            amount,\\n            bonusAmount,\\n            _stablecoin,\\n            _payWithStack,\\n            currentPeriodId\\n        );\\n    }\\n\\n    /**\\n     *  @notice Start next period if its time.\\n     *  @dev Called automatically from other functions, but can be called manually.\\n     */\\n    function updatePeriod() public {\\n        if (periods[currentPeriodId].endAt < block.timestamp) {\\n            currentPeriodId += 1;\\n            periods[currentPeriodId].endAt = block.timestamp + MONTH;\\n            if(currentPeriodId > 3) {\\n                // subtract 4 because need to ignore current cycle + 3 cycles before it\\n                uint256 removeIndex = currentPeriodId - 4;\\n                uint256 leftOver = periods[removeIndex].balance - periods[removeIndex].withdrawn;\\n                adminWithdrawable += leftOver;\\n                totalRewards -= leftOver;\\n                periods[removeIndex].balance = 0;\\n                periods[removeIndex].withdrawn = 0;\\n            }\\n            emit NewPeriodStarted(currentPeriodId);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Handle fee sent from minting.\\n     *  @param _amount Amount of stack trying to receive.\\n     *  @return _isTransferred Whether fee received or not.\\n     *  @dev Called automatically from stack NFT contract, but can be called manually.\\n     *  @dev Will receive tokens if previous period has active subs.\\n     */\\n    function onReceiveStack(uint256 _amount) \\n        external \\n        returns \\n        (bool _isTransferred) \\n    {\\n        updatePeriod();\\n\\n        if(periods[currentPeriodId - 1].subsNum == 0) {\\n            return false;\\n        } else {\\n            totalRewards += _amount;\\n            periods[currentPeriodId - 1].balance += _amount;\\n            stackToken.transferFrom(msg.sender, address(this), _amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice Withdraw active subs reward which comes from minting fees.\\n     *  @param generationId StackNFT generation id.\\n     *  @param tokenIds StackNFT token ids.\\n     *  @dev Caller must own tokens.\\n     *  @dev Tokens should have subscription during periods.\\n     */\\n    function claimReward(\\n        uint256 generationId, \\n        uint256[] calldata tokenIds\\n    )\\n        external\\n        nonReentrant\\n        restrictGeneration(generationId)\\n    {\\n        updatePeriod();\\n        require(currentPeriodId > 0, \\\"Still first period\\\");\\n\\n\\n        uint256 toWithdraw;\\n        uint256 periodId = subOrZero(currentPeriodId, 3);\\n        for (; periodId < currentPeriodId; periodId++) {\\n            Period storage period = periods[periodId];\\n            if (period.subsNum == 0) continue;\\n            \\n            uint256 share = period.balance / period.subsNum;\\n\\n            for (uint256 i; i < tokenIds.length; i++) {\\n                uint256 tokenId = tokenIds[i];\\n                require(\\n                    darkMatter.isOwnStackOrDarkMatter(\\n                        msg.sender,\\n                        generationId,\\n                        tokenId\\n                    ),\\n                    \\\"Not owner\\\"\\n                );\\n                if (!period.tokenData[generationId][tokenId].isSub) continue;\\n                uint256 amountWithdraw = (share - period.tokenData[generationId][tokenId].withdrawn);\\n                toWithdraw += amountWithdraw;\\n                period.tokenData[generationId][tokenId].withdrawn = share; \\n                period.withdrawn += amountWithdraw;\\n            }\\n\\n        }\\n\\n        totalRewards -= toWithdraw;\\n        stackToken.transfer(msg.sender, toWithdraw);\\n\\n        emit WithdrawRewards(\\n            msg.sender,\\n            toWithdraw,\\n            generationId, \\n            tokenIds\\n        );\\n    }\\n\\n    /**\\n     *  @dev Calculate dripped amount and remove fully released bonuses from array.\\n     */\\n    function updateBonuses(\\n        uint256 generationId,\\n        uint256 tokenId\\n    ) private {\\n        Deposit storage deposit = deposits[generationId][tokenId];\\n        // number of fully unlocked bonuses\\n        uint256 unlockedNum; \\n        // current number of token's bonuses\\n        uint256 bonusesLength = deposit.bonuses.length;\\n        // total dripped of each bonus\\n        uint256 drippedAmount;\\n\\n        for (uint256 i; i < bonusesLength; i++) {\\n            // this should saves gas, but probably not\\n            // in case where 0 fully unlocked bonuses\\n            Bonus memory bonus = deposit.bonuses[i];\\n\\n            uint256 withdrawAmount = \\n                (bonus.total / bonus.releasePeriod) * \\n                (block.timestamp - bonus.lastTxDate);\\n\\n            if (withdrawAmount > bonus.lockedAmount)\\n                withdrawAmount = bonus.lockedAmount;\\n            \\n            drippedAmount += withdrawAmount;\\n            bonus.lockedAmount -= withdrawAmount;\\n            bonus.lastTxDate = block.timestamp;\\n\\n            // We need to remove all drained bonuses from the array.\\n            // If our array looks like this [+--+-] where - is drained bonuses,\\n            // then we move all - to be after all +, so we get [++---]\\n            // Then we can pop all - from the end of array.\\n            if(bonus.lockedAmount == 0) \\n                unlockedNum += 1;\\n            else if(unlockedNum > 0)\\n                deposit.bonuses[i - unlockedNum] = bonus;\\n            else\\n                deposit.bonuses[i] = bonus;\\n        }\\n        bonusDripped[generationId][tokenId] += drippedAmount;\\n\\n        for (uint256 i = unlockedNum; i > 0; i--) {\\n            deposit.bonuses.pop();\\n        }\\n    }\\n\\n    /**\\n     *  @notice Withdraw deposit, accounting for tax.\\n     *  @param generationId StackNFT generation id.\\n     *  @param tokenIds StackNFT token ids.\\n     *  @dev Caller must own `tokenIds`\\n     *  @dev Tax resets to maximum after withdraw.\\n     */\\n    function withdraw(\\n        uint256 generationId, \\n        uint256[] calldata tokenIds\\n    )\\n        external\\n        nonReentrant\\n        restrictGeneration(generationId)\\n    {\\n        updatePeriod();\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            _withdraw(\\n                generationId,\\n                tokenIds[i],\\n                withdrawStatus.withdraw,\\n                0,\\n                0\\n            );\\n        }\\n    }\\n\\n   /**\\n    * @notice Purchase StackNFTs using money in deposit.\\n    * @param withdrawGenerationId StackNFT generation id to withdraw fee for.\\n    * @param withdrawTokenIds StackNFT token ids to withdraw fee for.\\n    * @param purchaseGenerationId Generation id to mint.\\n    * @param amountToMint Amount to mint.\\n    * @dev Tokens must be owned by the caller.\\n    * @dev Purchase Generation should be greater than 0.\\n    * @dev Function withdraw token subscription fee, then on received stack tokens\\n    *      it mints `amountToMint`, it will do this for every token in `tokenIds`.\\n    *      So if `withdrawTokenIds` has 2 subscribed tokens, and `amountToMint == 2`\\n    *      Then you'll receive 2 + 2 = 4 new tokens.\\n    */\\n    function purchaseNewNft(\\n        uint256 withdrawGenerationId,\\n        uint256[] calldata withdrawTokenIds,\\n        uint256 purchaseGenerationId,\\n        uint256 amountToMint\\n    ) \\n        external \\n        nonReentrant\\n        restrictGeneration(withdrawGenerationId)\\n    {\\n        require(tx.origin == msg.sender, \\\"Only EOW\\\");\\n        require(purchaseGenerationId > 0, \\\"Cant purchase generation 0\\\");\\n        updatePeriod();\\n\\n        for (uint256 i; i < withdrawTokenIds.length; i++) {\\n            _withdraw(\\n                withdrawGenerationId,\\n                withdrawTokenIds[i],\\n                withdrawStatus.purchase,\\n                purchaseGenerationId,\\n                amountToMint\\n            );\\n        }\\n    }\\n\\n    function _withdraw(\\n        uint256 generationId,\\n        uint256 tokenId,\\n        withdrawStatus allocationStatus,\\n        uint256 purchaseGenerationId,\\n        uint256 amountToMint\\n    ) internal {\\n        require(generationId < generations.count(), \\\"Generation doesn't exist\\\");\\n        require(\\n            darkMatter.isOwnStackOrDarkMatter(\\n                msg.sender,\\n                generationId,\\n                tokenId\\n            ),\\n            \\\"Not owner\\\"\\n        );\\n        Deposit storage deposit = deposits[generationId][tokenId];\\n\\n        uint256 amountWithdraw = deposit.balance;\\n        require(amountWithdraw > 0, \\\"Already withdrawn\\\");\\n\\n        if (allocationStatus == withdrawStatus.purchase) {\\n\\n            require(deposit.tax == 0, \\\"Can only purchase when 0 tax\\\");\\n\\n            StackOsNFTBasic stack = StackOsNFTBasic(\\n                address(generations.get(purchaseGenerationId))\\n            );\\n\\n            // some of the following should be on stack contract side, but code size limit...\\n            amountToMint = stack.clampToMaxSupply(amountToMint);\\n\\n            // adjust decimals\\n            uint256 mintPrice = stack.mintPrice() * \\n                (10 ** IDecimals(address(stableAcceptor.stablecoins(0))).decimals()) / \\n                stack.PRICE_PRECISION();\\n\\n            // convert usd to stack\\n            uint256 stackToSpend = exchange.getAmountIn(\\n                // get total amount usd needed to mint requested amount \\n                (mintPrice * (10000 - stack.rewardDiscount()) / 10000) * amountToMint,\\n                stableAcceptor.stablecoins(0),\\n                stackToken\\n            );\\n\\n            require(amountWithdraw > stackToSpend, \\\"Not enough earnings\\\");\\n\\n            stackToken.transfer(\\n                address(stack), \\n                stackToSpend \\n            );\\n\\n            stack.mintFromSubscriptionRewards(\\n                amountToMint, \\n                stackToSpend, \\n                msg.sender\\n            );\\n\\n            // Add left over amount back to user's balance\\n            deposit.balance = amountWithdraw - stackToSpend;\\n            // decrease totals only by amount that we spend\\n            totalDeposited -= stackToSpend;\\n\\n            emit PurchaseNewNft(\\n                msg.sender,\\n                generationId,\\n                tokenId,\\n                purchaseGenerationId,\\n                amountToMint\\n            );\\n        } else {\\n\\n            // if not subscribed - max taxes\\n            if (deposit.nextPayDate + forgivenessPeriod < block.timestamp) {\\n                deposit.tax = HUNDRED_PERCENT - taxReductionAmount;\\n            }\\n\\n            // decrease totals before we transfer tax\\n            totalDeposited -= amountWithdraw;\\n\\n            // early withdraw tax\\n            if (deposit.tax > 0) {\\n                uint256 tax = amountWithdraw * deposit.tax / HUNDRED_PERCENT;\\n                amountWithdraw -= tax;\\n                stackToken.transfer(taxAddress, tax);\\n            }\\n\\n            stackToken.transfer(msg.sender, amountWithdraw);\\n            deposit.tax = HUNDRED_PERCENT;\\n            deposit.balance = 0;\\n\\n            emit Withdraw(\\n                msg.sender,\\n                generationId,\\n                tokenId,\\n                amountWithdraw\\n            );\\n        }\\n    }\\n\\n    /**\\n     *  @notice Withdraw dripped bonuses.\\n     *  @param generationId StackNFT generation id.\\n     *  @param tokenIds StackNFT token ids.\\n     *  @dev Caller must own `tokenIds`.\\n     */\\n    function claimBonus(\\n        uint256 generationId,\\n        uint256[] calldata tokenIds\\n    ) external {\\n\\n        uint256 totalWithdraw;\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            require(generationId < generations.count(), \\\"Generation doesn't exist\\\");\\n            require(\\n                darkMatter.isOwnStackOrDarkMatter(\\n                    msg.sender,\\n                    generationId,\\n                    tokenId\\n                ),\\n                \\\"Not owner\\\"\\n            );\\n\\n            updateBonuses(generationId, tokenId);\\n            uint256 unlockedBonus = bonusDripped[generationId][tokenId];\\n            totalWithdraw += unlockedBonus;\\n            bonusDripped[generationId][tokenId] = 0;\\n\\n            emit ClaimBonus(\\n                msg.sender,\\n                generationId,\\n                tokenId,\\n                unlockedBonus\\n            );\\n        }\\n\\n        uint256 contractBalance = stackToken.balanceOf(address(this));\\n        require(\\n            // make sure bonus won't withdraw balances of deposits or rewards\\n            totalWithdraw <= \\n                contractBalance - totalRewards - totalDeposited,\\n            \\\"Bonus balance is too low\\\"\\n        );\\n        stackToken.transfer(msg.sender, totalWithdraw);\\n    }\\n\\n   /**\\n     * @notice Get pending bonus amount, locked amount, and longest timeLeft.\\n     * @param _generationId StackNFT generation id.\\n     * @param _tokenId StackNFT token id.\\n     * @return unlocked Withdrawable amount of bonuses\\n     * @return locked Locked amount of bonuses\\n     * @return timeLeft Per-bonus array containing time left to fully release locked amount\\n     */\\n    function pendingBonus(uint256 _generationId, uint256 _tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 unlocked, \\n            uint256 locked,\\n            uint256 timeLeft \\n        )\\n    {\\n        Deposit memory deposit = deposits[_generationId][_tokenId];\\n\\n        uint256 bonusesLength = deposit.bonuses.length;\\n\\n        for (uint256 i; i < bonusesLength; i++) {\\n            Bonus memory bonus = deposit.bonuses[i];\\n\\n            uint256 amount = \\n                (bonus.total / bonus.releasePeriod) * \\n                (block.timestamp - bonus.lastTxDate);\\n\\n            if (amount > bonus.lockedAmount)\\n                amount = bonus.lockedAmount;\\n\\n            unlocked += amount;\\n            bonus.lockedAmount -= amount;\\n            locked += bonus.lockedAmount;\\n\\n            // find max timeleft\\n            uint256 _timeLeft = \\n                bonus.releasePeriod * bonus.lockedAmount / bonus.total;\\n\\n            if(_timeLeft > timeLeft) timeLeft = _timeLeft;\\n        }\\n        \\n        unlocked += bonusDripped[_generationId][_tokenId];\\n    }\\n\\n   /**\\n     * @notice First elemement shows total claimable amount.\\n     * @notice Next elements shows claimable amount per next months.\\n     * @param _generationId StackNFT generation id.\\n     * @param _tokenId StackNFT token id.\\n     * @param months Amount of MONTHs to get drip rate for.\\n     */\\n    function monthlyDripRateBonus(\\n        uint256 _generationId, \\n        uint256 _tokenId,\\n        uint256 months\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory dripRates\\n        )\\n    {\\n        Deposit memory deposit = deposits[_generationId][_tokenId];\\n\\n        uint256 bonusesLength = deposit.bonuses.length;\\n        uint256[] memory monthlyDrip = new uint256[](months);\\n\\n        uint256 month = MONTH;\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        // +1 because we want skip first element\\n        // as it shows us unlocked amount\\n        for (uint256 m; m < months+1; m++) {\\n\\n            uint256 unlocked; \\n\\n            for (uint256 i; i < bonusesLength; i++) {\\n                Bonus memory bonus = deposit.bonuses[i];\\n\\n                if(bonus.lockedAmount == 0) continue;\\n\\n                uint256 amount = \\n                    (bonus.total / bonus.releasePeriod) * \\n                    (blockTimestamp - bonus.lastTxDate);\\n\\n                if(m == 0)\\n                    bonus.lastTxDate = blockTimestamp;\\n                else\\n                    bonus.lastTxDate += month;\\n\\n                if (amount > bonus.lockedAmount)\\n                    amount = bonus.lockedAmount;\\n\\n                unlocked += amount;\\n                bonus.lockedAmount -= amount;\\n            }\\n            blockTimestamp += month;\\n            if(m > 0)\\n                monthlyDrip[m-1] = unlocked;\\n            unlocked = 0;\\n        }\\n        dripRates = monthlyDrip;\\n    }\\n\\n    /**\\n     *  @notice Get active subs pending reward.\\n     *  @param generationId StackNFT generation id.\\n     *  @param tokenIds StackNFT token id.\\n     *  @dev Unsubscribed tokens in period are ignored.\\n     */\\n    function pendingReward(\\n        uint256 generationId, \\n        uint256[] calldata tokenIds\\n    )\\n        external\\n        view\\n        returns(uint256 withdrawableAmount)\\n    {\\n        uint256 _currentPeriodId = currentPeriodId;\\n        if (periods[_currentPeriodId].endAt < block.timestamp) {\\n            _currentPeriodId += 1;\\n        }\\n        require(_currentPeriodId > 0, \\\"Still first period\\\");\\n\\n        uint256 toWithdraw;\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            uint256 periodId = subOrZero(_currentPeriodId, 3);\\n            for (; periodId < _currentPeriodId; periodId++) {\\n                Period storage period = periods[periodId];\\n                if(period.subsNum == 0) continue;\\n                if(!period.tokenData[generationId][tokenId].isSub) continue;\\n                        \\n                uint256 share = period.balance / period.subsNum;\\n                toWithdraw += (share - period.tokenData[generationId][tokenId].withdrawn);\\n            }\\n        }\\n        return toWithdraw;\\n    }\\n\\n    function adminWithdraw()\\n        external\\n        onlyOwner\\n    {\\n        require(adminWithdrawable > 0, \\\"Nothing to withdraw\\\");\\n        stackToken.transfer(msg.sender, adminWithdrawable);\\n        adminWithdrawable = 0;\\n    }\\n\\n    /**\\n     *  @dev Subtract function, on underflow returns zero.\\n     */\\n    function subOrZero(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DarkMatter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./interfaces/IStackOsNFT.sol\\\";\\nimport \\\"./GenerationManager.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\n\\ncontract DarkMatter is Whitelist, ERC721Enumerable, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n\\n    event Activate();\\n    event Deposit(\\n        address indexed _wallet, \\n        uint256 generationId,\\n        uint256[] tokenIds\\n    );\\n\\n    Counters.Counter private _tokenIdCounter;\\n    \\n    GenerationManager private immutable generations;\\n    \\n    // number of StackNFTs that must be deposited in order to be able to mint a DarkMatter.\\n    uint256 immutable mintPrice; \\n    bool isActive; \\n\\n    // total amount of NFT deposited from any generation\\n    mapping(address => uint256) private deposits; \\n    // owner => current incomplete DarkMatter id\\n    mapping(address => uint256) private lastUserDarkMatter; \\n    // owner => DarkMatter ids\\n    mapping(address => uint256[]) private toBeMinted; \\n\\n    // need this to distinguish from default 0\\n    struct ValidId {\\n        uint256 id;\\n        bool written;\\n    }\\n    // generation => StackNFT id => DarkMatter id\\n    mapping(uint256 => mapping(uint256 => ValidId)) private stackToDarkMatter; \\n\\n    // DarkMatter id => generation => StackNFT ids \\n    mapping(uint256 => mapping(uint256 => uint256[])) private darkMatterToStack; \\n\\n\\n    constructor(GenerationManager _generations, uint256 _mintPrice)\\n        ERC721(\\\"DarkMatter\\\", \\\"DM\\\")\\n    {\\n        generations = _generations;\\n        mintPrice = _mintPrice;\\n    }\\n\\n    function activate() external onlyOwner {\\n        isActive = true;\\n        emit Activate();\\n    }\\n\\n    /**\\n     * @notice Get stack token ids used to mint this DarkMatterNFT.\\n     * @param _darkMatterId DarkMatter token id.\\n     * @return Stack token ids owned by DarkMatterNFT.\\n     */\\n    function ID(uint256 _darkMatterId)\\n        external \\n        view\\n        returns (uint256[][] memory)\\n    {\\n        uint256[][] memory stackTokenIds = new uint256[][](generations.count());\\n        for(uint256 i; i < stackTokenIds.length; i ++) {\\n            stackTokenIds[i] = darkMatterToStack[_darkMatterId][i];\\n        }\\n        return stackTokenIds;\\n    }\\n\\n    /**\\n     * @notice Get whether wallet owns StackNFT or DarkMatter that owns this StackNFT\\n     * @param _wallet Address of wallet.\\n     * @param generationId StackNFT generation id.\\n     * @param tokenId StackNFT token id.\\n     * @return Whether `_wallet` owns either StackNFT or DarkMatterNFT that owns this StackNFT.\\n     */\\n    function isOwnStackOrDarkMatter(\\n        address _wallet,\\n        uint256 generationId,\\n        uint256 tokenId\\n    ) external view returns (bool) {\\n        if (\\n            stackToDarkMatter[generationId][tokenId].written &&\\n            _exists(stackToDarkMatter[generationId][tokenId].id) &&\\n            ownerOfStack(generationId, tokenId) == _wallet\\n        ) {\\n            return true;\\n        }\\n        return generations.get(generationId).ownerOf(tokenId) == _wallet;\\n    }\\n\\n    /**\\n     * @notice Returns owner of either StackNFT or DarkMatter that owns StackNFT. \\n     * @param _stackOsNFT StackNFT address.\\n     * @param tokenId StackNFT token id.\\n     * @return Address that owns StackNFT or DarkMatter that owns this StackNFT. \\n     */\\n    function ownerOfStackOrDarkMatter(IStackOsNFT _stackOsNFT, uint256 tokenId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        uint256 generationId = generations.getIDByAddress(address(_stackOsNFT));\\n        if (\\n            stackToDarkMatter[generationId][tokenId].written &&\\n            _exists(stackToDarkMatter[generationId][tokenId].id)\\n        ) {\\n            return ownerOfStack(generationId, tokenId);\\n        }\\n        return _stackOsNFT.ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get owner of the DarkMatterNFT that owns StackNFT.\\n     * @param generationId StackNFT generation id.\\n     * @param tokenId StackNFT token id.\\n     * @return Owner of the DarkMatterNFT that owns StackNFT.\\n     */\\n    function ownerOfStack(uint256 generationId, uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        require(stackToDarkMatter[generationId][tokenId].written);\\n        return ownerOf(stackToDarkMatter[generationId][tokenId].id);\\n    }\\n\\n    /**\\n     *  @notice Deposit enough StackNFTs in order to be able to mint DarkMatter.\\n     *  @param generationId StackNFT generation id.\\n     *  @param tokenIds Token ids.\\n     *  @dev StackNFT generation must be added in manager prior to deposit.\\n     */\\n    function deposit(uint256 generationId, uint256[] calldata tokenIds)\\n        external\\n        nonReentrant\\n    {\\n        require(isActive, \\\"Inactive\\\");\\n        require(generationId < generations.count(), \\\"Generation doesn't exist\\\");\\n        IStackOsNFT stackNFT = generations.get(generationId);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            stackNFT.transferFrom(msg.sender, address(this), tokenId);\\n\\n            if (deposits[msg.sender] == 0) {\\n                lastUserDarkMatter[msg.sender] = _tokenIdCounter.current();\\n                _tokenIdCounter.increment();\\n            }\\n            deposits[msg.sender] += 1;\\n            if (deposits[msg.sender] == mintPrice) {\\n                deposits[msg.sender] -= mintPrice;\\n                darkMatterToStack[lastUserDarkMatter[msg.sender]][generationId].push(tokenId);\\n                toBeMinted[msg.sender].push(lastUserDarkMatter[msg.sender]);\\n            } else {\\n                darkMatterToStack[lastUserDarkMatter[msg.sender]][generationId].push(tokenId);\\n            }\\n            stackToDarkMatter[generationId][tokenId].written = true;\\n            stackToDarkMatter[generationId][tokenId].id = lastUserDarkMatter[\\n                msg.sender\\n            ];\\n        }\\n\\n        emit Deposit(msg.sender, generationId, tokenIds);\\n    }\\n\\n    /**\\n     *  @notice Mints a DarkMatterNFT for the caller.\\n     *  @dev Caller must have deposited `mintPrice` number of StackNFT of any generation.\\n     */\\n    function mint() external nonReentrant {\\n        require(toBeMinted[msg.sender].length > 0, \\\"Not enough deposited\\\");\\n        while (toBeMinted[msg.sender].length > 0) {\\n            _mint(\\n                msg.sender,\\n                toBeMinted[msg.sender][toBeMinted[msg.sender].length - 1]\\n            );\\n            toBeMinted[msg.sender].pop();\\n        }\\n    }\\n\\n    /*\\n     *  @title Override to make use of whitelist.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    )\\n        internal\\n        override(ERC721)\\n        onlyWhitelisted\\n    {\\n        super._transfer(from, to, tokenId);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/GenerationManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IStackOsNFT.sol\\\";\\nimport \\\"./StackOsNFTBasic.sol\\\";\\n\\ncontract GenerationManager is Ownable, ReentrancyGuard {\\n    using Strings for uint256;\\n\\n    event NextGenerationDeploy(\\n        address StackNFT, \\n        address deployer, \\n        uint256 deployTimestamp\\n    );\\n    event AdjustAddressSettings(\\n        address _stableAcceptor,\\n        address _exchange,\\n        address _dao\\n    );\\n    event SetupDeploy(\\n        Deployment settings\\n    );\\n\\n    struct Deployment {\\n        string name;\\n        string symbol;\\n        address stackToken;\\n        address darkMatter;\\n        address subscription;\\n        address sub0;\\n        uint256 mintPrice;\\n        uint256 subsFee;\\n        uint256 daoFee;\\n        uint256 maxSupplyGrowthPercent;\\n        uint256 transferDiscount;\\n        uint256 rewardDiscount;\\n        address royaltyAddress;\\n        address market;\\n        string baseURI;\\n    }\\n\\n    address private stableAcceptor;\\n    address private exchange;\\n    address private dao;\\n\\n    uint256 private GEN2_MAX_SUPPLY = 1000;\\n\\n    Deployment private deployment;\\n    IStackOsNFT[] private generations;\\n    mapping(address => uint256) private ids;\\n\\n    constructor() {}\\n\\n    function getDeployment() \\n        external \\n        view \\n        returns \\n        (Deployment memory) \\n    {\\n        return deployment;\\n    }\\n\\n    function adjustAddressSettings(\\n        address _stableAcceptor,\\n        address _exchange,\\n        address _dao\\n    )\\n        public\\n        onlyOwner\\n    {\\n        stableAcceptor = _stableAcceptor;\\n        exchange = _exchange;\\n        dao = _dao;\\n        emit AdjustAddressSettings(\\n            _stableAcceptor,\\n            _exchange,\\n            _dao\\n        );\\n    }\\n\\n    /**\\n     * @notice Function for convinience when testing.\\n     * @param maxSupply Max supply to use in generation 2 deployment.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function SET_GEN2_MAX_SUPPLY(\\n        uint256 maxSupply\\n    ) public onlyOwner {\\n        GEN2_MAX_SUPPLY = maxSupply;\\n    }\\n\\n    /**\\n     * @notice Save settings for manual or auto deployment.\\n     * @param settings Structure of parameters to use for next generation deployment.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setupDeploy(\\n        Deployment calldata settings\\n    ) public onlyOwner {\\n        deployment = settings;\\n        emit SetupDeploy(settings);\\n    }\\n\\n    /**\\n     * @notice Called by StackNFTBasic once it reaches max supply.\\n     * @dev Could only be invoked by the last StackOsNFTBasic generation.\\n     * @dev Generation id is appended to the name. \\n     * @return Address of new StackNFT contract generation.\\n     */\\n    function autoDeployNextGeneration() \\n        public \\n        nonReentrant\\n        returns \\n        (IStackOsNFTBasic) \\n    {\\n        // Can only be called from StackNFT contracts\\n        // Cannot deploy next generation if it's already exists\\n        require(getIDByAddress(msg.sender) == generations.length - 1);\\n\\n        StackOsNFTBasic stack = StackOsNFTBasic(\\n            address(\\n                new StackOsNFTBasic()\\n            )\\n        );\\n        stack.setName(\\n            string(abi.encodePacked(\\n                deployment.name,\\n                \\\" \\\",\\n                uint256(count()).toString()\\n            ))\\n        );\\n        stack.setSymbol(deployment.symbol);\\n        stack.initialize(\\n            deployment.stackToken,\\n            deployment.darkMatter,\\n            deployment.subscription,\\n            deployment.sub0,\\n            deployment.royaltyAddress,\\n            stableAcceptor,\\n            exchange,\\n            deployment.mintPrice,\\n                // if kicking 2nd generation, use constant, otherwise apply growth % \\n                count() == 1 ? GEN2_MAX_SUPPLY : \\n                get(getIDByAddress(msg.sender)).getMaxSupply() * \\n                (deployment.maxSupplyGrowthPercent + 10000) / 10000,\\n\\n            deployment.transferDiscount\\n        );\\n        add(address(stack));\\n        stack.setFees(deployment.subsFee, deployment.daoFee);\\n        stack.setRewardDiscount(deployment.rewardDiscount);\\n        stack.adjustAddressSettings(dao);\\n        stack.whitelist(address(deployment.darkMatter));\\n        stack.whitelist(address(deployment.market));\\n        stack.setBaseURI(deployment.baseURI);\\n        stack.transferOwnership(Ownable(msg.sender).owner());\\n        emit NextGenerationDeploy(address(stack), msg.sender, block.timestamp);\\n        return IStackOsNFTBasic(address(stack));\\n    }\\n\\n    /**\\n     * @notice Add next generation of StackNFT to manager. \\n     * @notice To be called automatically, or when adding 1st generation.\\n     * @notice Royalty address has to be set with setupDeploy.\\n     * @param _stackOS IStackOsNFT address.\\n     * @dev Royalty address has to be set with setupDeploy.\\n     * @dev Could only be invoked by the contract owner to add 1st generation\\n     *      or by StackNFT contract on auto deployment.\\n     * @dev Address should be unique.\\n     */\\n    function add(address _stackOS) public {\\n        require(owner() == _msgSender() || isAdded(_msgSender()));\\n        require(address(_stackOS) != address(0)); // forbid 0 address\\n        require(isAdded(address(_stackOS)) == false); // forbid duplicates\\n        ids[address(_stackOS)] = generations.length;\\n        Royalty(payable(deployment.royaltyAddress))\\n            .onGenerationAdded(generations.length, _stackOS);\\n        generations.push(IStackOsNFT(_stackOS));\\n    }\\n\\n    /**\\n     * @notice Deploy new StackOsNFTBasic manually.\\n     * @notice Deployment structure must be filled before deploy.\\n     * @notice `adjustAddressSettings` must be called in GenerationManager before deploy. \\n     * @param _maxSupply Exact max supply for new NFT contract.\\n     */\\n    function deployNextGenerationManually(\\n        uint256 _maxSupply\\n    ) \\n        public \\n        onlyOwner \\n        nonReentrant\\n        returns \\n        (IStackOsNFTBasic) \\n    {\\n        StackOsNFTBasic stack = StackOsNFTBasic(\\n            address(\\n                new StackOsNFTBasic()\\n            )\\n        );\\n        stack.setName(\\n            string(abi.encodePacked(\\n                deployment.name,\\n                \\\" \\\",\\n                uint256(count()).toString()\\n            ))\\n        );\\n        stack.setSymbol(deployment.symbol);\\n        stack.initialize(\\n            deployment.stackToken,\\n            deployment.darkMatter,\\n            deployment.subscription,\\n            deployment.sub0,\\n            deployment.royaltyAddress,\\n            stableAcceptor,\\n            exchange,\\n            deployment.mintPrice,\\n            _maxSupply,\\n            deployment.transferDiscount\\n        );\\n        add(address(stack));\\n        stack.setFees(deployment.subsFee, deployment.daoFee);\\n        stack.setRewardDiscount(deployment.rewardDiscount);\\n        stack.adjustAddressSettings(dao);\\n        stack.whitelist(address(deployment.darkMatter));\\n        stack.whitelist(address(deployment.market));\\n        stack.setBaseURI(deployment.baseURI);\\n        stack.transferOwnership(msg.sender);\\n        emit NextGenerationDeploy(address(stack), msg.sender, block.timestamp);\\n        return IStackOsNFTBasic(address(stack));\\n    }\\n\\n    /**\\n     * @notice Get total number of generations added.\\n     */\\n    function count() public view returns (uint256) {\\n        return generations.length;\\n    }\\n\\n    /**\\n     * @notice Get address of StackNFT contract by generation id.\\n     * @param generationId Generation id to lookup.\\n     * @dev Must be valid generation id to avoid out-of-bounds error.\\n     * @return Address of StackNFT contract.\\n     */\\n    function get(uint256 generationId) public view returns (IStackOsNFT) {\\n        return generations[generationId];\\n    }\\n\\n    /**\\n     * @notice Get generation id by StackNFT contract address.\\n     * @param _nftAddress Stack NFT contract address\\n     * @return Generation id.\\n     */\\n    function getIDByAddress(address _nftAddress) public view returns (uint256) {\\n        uint256 generationID = ids[_nftAddress];\\n        if (generationID == 0) {\\n            require(address(get(0)) == _nftAddress);\\n        }\\n        return generationID;\\n    }\\n\\n    /**\\n     * @notice Returns whether StackNFT contract is added to this manager.\\n     * @param _nftAddress Stack NFT contract address.\\n     * @return Whether StackNFT contract is added to manager.\\n     */\\n    function isAdded(address _nftAddress) public view returns (bool) {\\n        uint256 generationID = ids[_nftAddress];\\n        return generations.length > generationID && address(get(generationID)) == _nftAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StableCoinAcceptor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StableCoinAcceptor {\\n\\n    IERC20[] public stablecoins;\\n\\n    constructor(\\n        IERC20[] memory _stables\\n    ) {\\n        require(_stables.length > 0, \\\"Empty data\\\");\\n        for(uint256 i; i < _stables.length; i++) {\\n            require(\\n                address(_stables[i]) != address(0), \\n                \\\"Should not be zero-address\\\"\\n            );\\n        }\\n        stablecoins = _stables;\\n    }\\n\\n    /**\\n     * @notice Returns whether provided stablecoin is supported.\\n     * @param _address Address to lookup.\\n     */\\n    function supportsCoin(IERC20 _address) public view returns (bool) {\\n        uint256 len = stablecoins.length;\\n        for(uint256 i; i < len; i++) {\\n            if(_address == stablecoins[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Exchange.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract Exchange is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event SetRouter(address newRouter);\\n\\n    IUniswapV2Router02 public router;\\n\\n    constructor (address _router) {\\n        router = IUniswapV2Router02(_router);\\n    }\\n\\n    function setRouter(address _router) external onlyOwner {\\n        require(_router != address(0));\\n        router = IUniswapV2Router02(_router);\\n        emit SetRouter(_router);\\n    }\\n\\n    /**\\n     *  @notice Swap exact ETH for tokens.\\n     *  @param token Address of token to receive.\\n     *  @return amountReceived Amount of token received.\\n     */\\n    function swapExactETHForTokens(\\n        IERC20 token\\n    ) public payable returns (uint256 amountReceived) {\\n        uint256 deadline = block.timestamp + 1200;\\n        address[] memory path = new address[](2);\\n        path[0] = address(router.WETH());\\n        path[1] = address(token);\\n        uint256[] memory amountOutMin = router.getAmountsOut(msg.value, path);\\n        uint256[] memory amounts = router.swapExactETHForTokens{value: msg.value}(\\n            amountOutMin[1],\\n            path,\\n            address(msg.sender),\\n            deadline\\n        );\\n        return amounts[1];\\n    }\\n\\n    /**\\n     *  @notice Swap exact tokens for ETH.\\n     *  @param token Address of token to swap.\\n     *  @param amount Amount of token to swap.\\n     *  @param to Receiver of eth.\\n     *  @return amountReceived Amount of eth received.\\n     */\\n    function swapExactTokensForETH(\\n        IERC20 token,\\n        uint256 amount,\\n        address to\\n    ) public payable returns (uint256 amountReceived) {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        token.approve(address(router), amount);\\n        uint256 deadline = block.timestamp + 1200;\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = address(router.WETH());\\n        uint256[] memory amountOutMin = router.getAmountsOut(amount, path);\\n        uint256[] memory amounts = router.swapExactTokensForETH(\\n            amount,\\n            amountOutMin[1],\\n            path,\\n            to,\\n            deadline\\n        );\\n        return amounts[1];\\n    }\\n\\n    /**\\n     *  @notice Swap exact tokens for tokens using path tokenA > WETH > tokenB.\\n     *  @param amountA Amount of tokenA to spend.\\n     *  @param tokenA Address of tokenA to spend.\\n     *  @param tokenB Address of tokenB to receive.\\n     *  @return amountReceivedTokenB Amount of tokenB received.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountA, \\n        IERC20 tokenA, \\n        IERC20 tokenB\\n    ) public returns (uint256 amountReceivedTokenB) {\\n\\n        tokenA.safeTransferFrom(msg.sender, address(this), amountA);\\n        tokenA.approve(address(router), amountA);\\n\\n        uint256 deadline = block.timestamp + 1200;\\n        address[] memory path = new address[](3);\\n        path[0] = address(tokenA);\\n        path[1] = address(router.WETH());\\n        path[2] = address(tokenB);\\n        uint256[] memory amountOutMin = router.getAmountsOut(amountA, path);\\n        uint256[] memory amounts = router.swapExactTokensForTokens(\\n            amountA,\\n            amountOutMin[2],\\n            path,\\n            address(msg.sender),\\n            deadline\\n        );\\n        return amounts[2];\\n    }\\n\\n    /**\\n     *  @notice Given an output amount of an asset, \\n     *          returns a required input amount of the other asset,\\n     *          using path tokenIn > WETH > tokenOut.\\n     *  @param amountOut Amount wish to receive.\\n     *  @param tokenOut Token wish to receive.\\n     *  @param tokenIn Token wish to spend.\\n     *  @return amountIn Amount of tokenIn.\\n     */\\n    function getAmountIn(\\n        uint256 amountOut, \\n        IERC20 tokenOut, \\n        IERC20 tokenIn\\n    ) public view returns (uint256 amountIn) {\\n        address[] memory path = new address[](3);\\n        path[0] = address(tokenIn);\\n        path[1] = address(router.WETH());\\n        path[2] = address(tokenOut);\\n        uint256[] memory amountsIn = router.getAmountsIn(amountOut, path);\\n        return amountsIn[0];\\n    }\\n\\n    /**\\n     *  @notice Given an input amount of an asset, \\n     *          returns the maximum output amount of the other asset,\\n     *          using path tokenIn > WETH > tokenOut.\\n     *  @param amountIn Amount wish to spend.\\n     *  @param tokenIn Token wish to spend.\\n     *  @param tokenOut Token wish to receive.\\n     *  @return amountOut Amount of tokenIn.\\n     */\\n    function getAmountOut(\\n        uint256 amountIn, \\n        IERC20 tokenIn, \\n        IERC20 tokenOut\\n    ) public view returns (uint256 amountOut) {\\n        address[] memory path = new address[](3);\\n        path[0] = address(tokenIn);\\n        path[1] = address(router.WETH());\\n        path[2] = address(tokenOut);\\n        uint256[] memory amountsIn = router.getAmountsOut(amountIn, path);\\n        return amountsIn[2];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StackOsNFTBasic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IStackOsNFT.sol\\\";\\nimport \\\"./interfaces/IDecimals.sol\\\";\\nimport \\\"./Subscription.sol\\\";\\nimport \\\"./StableCoinAcceptor.sol\\\";\\nimport \\\"./Exchange.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\nimport \\\"./Royalty.sol\\\";\\n\\n\\ncontract StackOsNFTBasic is\\n    Whitelist,\\n    ERC721Enumerable\\n{\\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    event SetPrice(uint256 _price);\\n    event SetBaseURI(string uri);\\n    event SetName(string name);\\n    event SetSymbol(string symbol);\\n    event AdjustAddressSettings(\\n        address dao \\n    );\\n    event SetRewardDiscount(uint256 _rewardDiscount);\\n    event SetFees(uint256 subs, uint256 dao);\\n    event AdminWithdraw(address admin, uint256 withdrawAmount);\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    uint256 public constant PRICE_PRECISION = 1e18;\\n\\n    Counters.Counter private _tokenIdCounter;\\n    IERC20 private stackToken;\\n    DarkMatter private darkMatter;\\n    Subscription private subscription;\\n    Subscription private sub0;\\n    Royalty private royaltyAddress;\\n    StableCoinAcceptor private stableAcceptor;\\n    GenerationManager private immutable generations;\\n    Exchange private exchange;\\n    address private daoAddress;\\n\\n    uint256 public rewardDiscount;\\n    uint256 private maxSupply;\\n    uint256 public mintPrice;\\n    uint256 public transferDiscount;\\n    uint256 private subsFee;\\n    uint256 private daoFee;\\n    // this is max amount of mints to unlock\\n    uint256 public constant maxMintRate = 50;\\n    // time required to unlock 1 mint\\n    uint256 public constant mintUnlockTime = 12 seconds;\\n\\n    mapping(address => uint256) private totalMinted;\\n    mapping(address => uint256) private lastMintAt;\\n\\n    string private baseURI;\\n\\n    bool private initialized;\\n\\n    /*\\n     * @title Must be deployed only by GenerationManager\\n     */\\n    constructor() ERC721(\\\"\\\", \\\"\\\") {\\n        \\n        require(Address.isContract(msg.sender));\\n        generations = GenerationManager(msg.sender);\\n    }\\n\\n    function initialize(\\n        address _stackToken,\\n        address _darkMatter,\\n        address _subscription,\\n        address _sub0,\\n        address _royaltyAddress,\\n        address _stableAcceptor,\\n        address _exchange,\\n        uint256 _mintPrice,\\n        uint256 _maxSupply,\\n        uint256 _transferDiscount\\n    ) external onlyOwner {\\n        require(initialized == false);\\n        initialized = true;\\n        \\n        stackToken = IERC20(_stackToken);\\n        darkMatter = DarkMatter(_darkMatter);\\n        subscription = Subscription(_subscription);\\n        sub0 = Subscription(_sub0);\\n        royaltyAddress = Royalty(payable(_royaltyAddress));\\n        stableAcceptor = StableCoinAcceptor(_stableAcceptor);\\n        exchange = Exchange(_exchange);\\n\\n        mintPrice = _mintPrice;\\n        maxSupply = _maxSupply;\\n        transferDiscount = _transferDiscount;\\n    }\\n\\n    /**\\n     *  @notice `_price` should have 18 decimals\\n     */\\n    function setPrice(uint256 _price) external onlyOwner {\\n        mintPrice = _price;\\n        emit SetPrice(_price);\\n    }\\n\\n    // Set baseURI that is used for new tokens\\n    function setBaseURI(string memory _uri) external onlyOwner {\\n        baseURI = _uri;\\n        emit SetBaseURI(_uri);\\n    }\\n\\n    /*\\n     * @title Set token name.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setName(string memory name_) external onlyOwner {\\n        _name = name_;\\n        emit SetName(name_);\\n    }\\n\\n    /*\\n     * @title Set token symbol.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setSymbol(string memory symbol_) external onlyOwner {\\n        _symbol = symbol_;\\n        emit SetSymbol(symbol_);\\n    }\\n\\n    /**\\n     * @dev Override so that it returns what we set with setName.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Override so that it returns what we set with setSybmol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /*\\n     * @title Adjust address settings\\n     * @param Dao address\\n     * @param Royalty distribution address\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n\\n    function adjustAddressSettings(\\n        address _dao \\n    )\\n        external\\n        onlyOwner\\n    {\\n        daoAddress = _dao;\\n        emit AdjustAddressSettings(_dao);\\n    }\\n\\n    /*\\n     * @title Set discont applied on mint from subscription or royalty rewards\\n     * @param percent\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n\\n    function setRewardDiscount(uint256 _rewardDiscount) external onlyOwner {\\n        require(_rewardDiscount <= 10000);\\n        rewardDiscount = _rewardDiscount;\\n        emit SetRewardDiscount(_rewardDiscount);\\n    }\\n\\n    /*\\n     * @title Set amounts taken from mint\\n     * @param % that is sended to Subscription contract \\n     * @param % that is sended to dao\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n\\n    function setFees(uint256 _subs, uint256 _dao)\\n        external\\n        onlyOwner\\n    {\\n        require(_subs + _dao <= 10000);\\n        subsFee = _subs;\\n        daoFee = _dao;\\n        emit SetFees(_subs, _dao);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /*\\n     * @title Get max supply\\n     */\\n    function getMaxSupply() external view returns (uint256) {\\n        return maxSupply;\\n    }\\n    \\n    /*\\n     * @title Called by 1st generation as part of `transferTickets`\\n     * @param Wallet to mint tokens to\\n     * @param Amount of STACK token received\\n     * @dev Could only be invoked by the StackNFT contract.\\n     * @dev It receives stack token and use it to mint NFTs at a discount\\n     */\\n    function transferFromLastGen(address _ticketOwner, uint256 _amount) external {\\n\\n        // check that caller is generation 1 contract \\n        require(address(generations.get(0)) == msg.sender);\\n\\n        stackToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        IERC20 stablecoin = stableAcceptor.stablecoins(0);\\n        // how much usd we can receive for _amount of stack tokens\\n        uint256 amountUsd = exchange.getAmountOut(\\n            _amount,\\n            stackToken,\\n            stablecoin\\n        );\\n\\n        // we need to use usd decimal places instead of uniform\\n        uint256 price = adjustDecimals(\\n            mintPrice, \\n            stablecoin\\n        );\\n        // apply discount to the price\\n        uint256 mintPriceDiscounted = price\\n            .mul(10000 - transferDiscount)\\n            .div(10000);\\n\\n        // get total amount of tickets we can mint for discounted price \\n        uint256 ticketAmount = amountUsd.div(mintPriceDiscounted);\\n\\n        // limit amount of tickets to mint rate\\n        ticketAmount = ticketAmount > maxMintRate ? maxMintRate : ticketAmount;\\n        // limit amount of tickets to max supply\\n        ticketAmount = clampToMaxSupply(ticketAmount);\\n\\n        // get amount of usd we will spend for minting\\n        uint256 usdToSpend = mintPriceDiscounted.mul(ticketAmount);\\n        // convert usdToSpend to amount of stack tokens\\n        uint256 stackToSpend = exchange.getAmountOut(\\n            usdToSpend,\\n            stablecoin,\\n            stackToken\\n        );\\n\\n        // transfer left over amount to user (total amount minus amount to spend for minting)\\n        stackToken.transfer(\\n            _ticketOwner,\\n            _amount - stackToSpend \\n        );\\n\\n        // send fees, not guaranteed that fees will take 100% of stackToSpend\\n        stackToSpend = sendFees(stackToSpend);\\n\\n        // admin gets the payment after fees\\n        stackToken.transfer(owner(), stackToSpend);\\n\\n        for (uint256 i; i < ticketAmount; i++) {\\n            _mint(_ticketOwner);\\n        }\\n    }\\n\\n    /*\\n     * @title User mint a token amount for stack tokens.\\n     * @param Number of tokens to mint.\\n     * @dev Sales should be started before mint.\\n     */\\n\\n    function mint(uint256 _nftAmount) external {\\n\\n        require(tx.origin == msg.sender, \\\"Only EOW\\\");\\n\\n        _nftAmount = clampToMaxSupply(_nftAmount);\\n\\n        IERC20 stablecoin = stableAcceptor.stablecoins(0);\\n        uint256 amountOut = adjustDecimals(\\n            mintPrice, \\n            stablecoin\\n        );\\n        amountOut = amountOut.mul(_nftAmount);\\n\\n        uint256 stackAmount = exchange.getAmountIn(\\n            amountOut, \\n            stablecoin,\\n            stackToken\\n        );\\n\\n        stackToken.transferFrom(msg.sender, address(this), stackAmount);\\n\\n        stackAmount = sendFees(stackAmount);\\n\\n        // admin gets the payment after fees\\n        stackToken.transfer(owner(), stackAmount);\\n\\n        for (uint256 i; i < _nftAmount; i++) {\\n            _mint(msg.sender);\\n        }\\n    }\\n\\n    /*\\n     * @title User mint a token amount for stablecoin.\\n     * @param Number of tokens to mint.\\n     * @param Supported stablecoin.\\n     * @dev Sales should be started before mint.\\n     */\\n\\n    function mintForUsd(uint256 _nftAmount, IERC20 _stablecoin) external {\\n        require(tx.origin == msg.sender, \\\"Only EOW\\\");\\n        require(stableAcceptor.supportsCoin(_stablecoin));\\n\\n        _nftAmount = clampToMaxSupply(_nftAmount);\\n\\n        uint256 usdToSpend = adjustDecimals(\\n            mintPrice, \\n            _stablecoin\\n        );\\n        usdToSpend = usdToSpend.mul(_nftAmount);\\n\\n        _stablecoin.transferFrom(msg.sender, address(this), usdToSpend);\\n        _stablecoin.approve(address(exchange), usdToSpend);\\n        uint256 stackAmount = exchange.swapExactTokensForTokens(\\n            usdToSpend,\\n            _stablecoin,\\n            stackToken\\n        );\\n\\n        stackAmount = sendFees(stackAmount);\\n\\n        // admin gets the payment after fees\\n        stackToken.transfer(owner(), stackAmount);\\n\\n        for (uint256 i; i < _nftAmount; i++) {\\n            _mint(msg.sender);\\n        }\\n    }\\n\\n    /*\\n     * @title Called when user want to mint and pay with bonuses from subscriptions.\\n     * @param Amount to mint\\n     * @param Stack token amount to spend\\n     * @param Address to receive minted tokens\\n     * @dev Can only be called by Subscription contract.\\n     * @dev Sales should be started before mint.\\n     */\\n\\n    function mintFromSubscriptionRewards(\\n        uint256 _nftAmount,\\n        uint256 _stackAmount,\\n        address _to\\n    ) external {\\n        require(\\n            msg.sender == address(subscription) ||\\n            msg.sender == address(sub0)\\n        );\\n\\n        _stackAmount = sendFees(_stackAmount);\\n\\n        // admin gets the payment after fees\\n        stackToken.transfer(owner(), _stackAmount);\\n\\n        for (uint256 i; i < _nftAmount; i++) {\\n            // frontrun protection is in Subscription contract\\n            _mint(_to);\\n        }\\n\\n    }\\n\\n    /*\\n     * @title Called when user want to mint and pay with bonuses from royalties.\\n     * @param Amount to mint\\n     * @param Address to mint to\\n     * @dev Can only be called by Royalty contract.\\n     * @dev Sales should be started before mint.\\n     */\\n\\n    function mintFromRoyaltyRewards(\\n        uint256 _mintNum, \\n        address _to\\n    ) \\n        external\\n        returns (uint256 amountSpend)\\n    {\\n        require(msg.sender == address(royaltyAddress));\\n\\n        _mintNum = clampToMaxSupply(_mintNum);\\n        \\n        IERC20 stablecoin = stableAcceptor.stablecoins(0);\\n        uint256 price = adjustDecimals(\\n            mintPrice, \\n            stablecoin\\n        );\\n\\n        uint256 discountPrice = price\\n            .mul(10000 - rewardDiscount)\\n            .div(10000);\\n\\n        uint256 amountUsd = discountPrice.mul(_mintNum);\\n        uint256 stackAmount = exchange.getAmountIn(\\n            amountUsd,\\n            stablecoin,\\n            stackToken\\n        );\\n        \\n        amountSpend = stackAmount;\\n        stackToken.transferFrom(msg.sender, address(this), stackAmount);\\n\\n        stackAmount = sendFees(stackAmount);\\n\\n        // admin gets the payment after fees\\n        stackToken.transfer(owner(), stackAmount);\\n\\n        for (uint256 i; i < _mintNum; i++) {\\n            _mint(_to);\\n        }\\n    }\\n\\n    /*\\n     * @returns left over amount after fees subtracted\\n     * @dev Take fees out of `_amount`\\n     */\\n\\n    function sendFees(uint256 _amount) internal returns (uint256 amountAfterFees) {\\n\\n        uint256 subsPart = _amount * subsFee / 10000;\\n        uint256 daoPart = _amount * daoFee / 10000;\\n        amountAfterFees = _amount - subsPart - daoPart;\\n\\n        uint256 subsPartHalf = subsPart / 2;\\n        uint256 subsPartHalfTwo = subsPart - subsPartHalf;\\n\\n        stackToken.approve(address(sub0), subsPartHalf);\\n        stackToken.approve(address(subscription), subsPartHalfTwo);\\n        // if subs contract don't take it, send to dao \\n        if(sub0.onReceiveStack(subsPartHalf) == false) {\\n            daoPart += (subsPartHalf);\\n        }\\n        if(subscription.onReceiveStack(subsPartHalfTwo) == false) {\\n            daoPart += (subsPartHalfTwo);\\n        }\\n        stackToken.transfer(address(daoAddress), daoPart);\\n    }\\n\\n    function _mint(address _address) internal {\\n        require(totalSupply() < maxSupply);\\n\\n        uint256 timeSinceLastMint = block.timestamp - lastMintAt[_address];\\n        uint256 unlocked = timeSinceLastMint / mintUnlockTime;\\n        if (unlocked > totalMinted[_address])\\n            unlocked = totalMinted[_address];\\n\\n        totalMinted[_address] -= unlocked;\\n\\n        lastMintAt[_address] = block.timestamp;\\n\\n        require(\\n            totalMinted[_address] < maxMintRate\\n        );\\n\\n        totalMinted[_address] += 1;\\n\\n        uint256 _current = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_address, _current);\\n\\n        if(\\n            totalSupply() == maxSupply && \\n            generations.getIDByAddress(address(this)) == generations.count() - 1\\n        ) {\\n            generations.autoDeployNextGeneration();\\n        }\\n    }\\n \\n    // frontrun protection helper function\\n    function clampToMaxSupply(uint256 value) \\n        public\\n        view\\n        returns (uint256 clamped)\\n    {\\n        // frontrun protection\\n        if (value > maxSupply - totalSupply())\\n            value = maxSupply - totalSupply();\\n        return value;\\n    }\\n\\n    // Adjusts amount's decimals to token's decimals\\n    function adjustDecimals(uint256 amount, IERC20 token) \\n        private \\n        view \\n        returns (uint256) \\n    {\\n        return amount   \\n            .mul(10 ** IDecimals(address(token)).decimals())\\n            .div(PRICE_PRECISION); \\n    }\\n\\n    // notice the onlyWhitelisted modifier\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) \\n        internal \\n        override(ERC721) \\n        onlyWhitelisted \\n    {\\n        super._transfer(from, to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns URI in a form of \\\"baseURI + generationId/tokenId\\\".\\n     * @dev BaseURI should have slash at the end.\\n     */\\n    function tokenURI(uint256 tokenId) \\n        public \\n        view \\n        virtual \\n        override(ERC721)\\n        returns (string memory) \\n    {\\n        // URI query for nonexistent token\\n        require(_exists(tokenId));\\n\\n        string memory baseURI_ = _baseURI();\\n        string memory generationId = \\n            generations.getIDByAddress(address(this)).toString();\\n\\n        return bytes(baseURI_).length > 0 ?\\n            string(abi.encodePacked(baseURI_, generationId, \\\"/\\\", tokenId.toString())) :\\n            \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDecimals.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDecimals {\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStackOsNFT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IStackOsNFT is IERC721 {\\n\\n    function whitelist(address _addr) external;\\n\\n    function getMaxSupply() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function exists(uint256 _tokenId) external returns (bool);\\n\\n    function setBaseURI(string calldata _uri) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Whitelist.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Whitelist is Ownable {\\n\\n    mapping(address => bool) public _whitelist;\\n \\n    modifier onlyWhitelisted () {\\n        require(_whitelist[_msgSender()], \\\"Not whitelisted for transfers\\\");\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Whitelist address to transfer tokens.\\n     *  @param _addres Address to whitelist.\\n     *  @dev Caller must be owner of the contract.\\n     */\\n    function whitelist(address _addres) public onlyOwner {\\n        _whitelist[_addres] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Royalty.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./GenerationManager.sol\\\";\\nimport \\\"./DarkMatter.sol\\\";\\nimport \\\"./interfaces/IStackOsNFT.sol\\\";\\nimport \\\"./interfaces/IStackOsNFTBasic.sol\\\";\\nimport \\\"./Exchange.sol\\\";\\n\\ncontract Royalty is Ownable, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n\\n    event SetFeeAddress(address payable _feeAddress);\\n    event SetWETH(IERC20 WETH);\\n    event SetFeePercent(uint256 _percent);\\n    event SetMinEthPerCycle(uint256 amount);\\n    event NewCycle(uint256 newCycleId);\\n    event SetCycleDuration(uint256 _seconds);\\n\\n    Counters.Counter public counter; // counting cycles\\n\\n    uint256 private constant HUNDRED_PERCENT = 10000;\\n    GenerationManager private immutable generations;\\n    DarkMatter private immutable darkMatter;\\n    Exchange private immutable exchange;\\n    IERC20 private WETH; // for Matic network\\n    address payable private feeAddress;\\n    IERC20 private stackToken;\\n    uint256 private feePercent;\\n\\n    uint256 public minEthPerCycle;\\n    uint256 public cycleDuration = 30 days;\\n\\n    uint256 public adminWithdrawable;\\n\\n    struct GenData {\\n        // total received by each generation in cycle\\n        uint256 balance;\\n        // whether reward for this token in this cycle for this generation is claimed\\n        mapping(uint256 => mapping(uint256 => bool)) isClaimed; \\n    }\\n\\n    struct Cycle {\\n        // cycle started timestamp\\n        uint256 startTimestamp; \\n        // this is used in admin withdrawable\\n        // and for cycle ending condition\\n        uint256 totalBalance; \\n        // per generation balance\\n        mapping(uint256 => GenData) genData; \\n    }\\n\\n    mapping(uint256 => Cycle) public cycles; \\n    // generationId => total maxSupply of generations below plus this one\\n    mapping(uint256 => uint256) public maxSupplys; \\n\\n    constructor(\\n        GenerationManager _generations,\\n        DarkMatter _darkMatter,\\n        Exchange _exchange,\\n        address payable _feeAddress,\\n        IERC20 _stackToken,\\n        uint256 _minEthPerCycle\\n    ) {\\n        generations = _generations;\\n        darkMatter = _darkMatter;\\n        exchange = _exchange;\\n        feeAddress = _feeAddress;\\n        stackToken = _stackToken;\\n        minEthPerCycle = _minEthPerCycle;\\n\\n        cycles[counter.current()].startTimestamp = block.timestamp;\\n    }\\n\\n    /** \\n     * @notice Deposit royalty so that NFT holders can claim it later.\\n     * @notice Deposits to the latest generation at this time,\\n     *         so that any generation below can claim that.\\n     */\\n    receive() external payable {\\n\\n        uint256 generationId = generations.count() - 1;\\n\\n        // take fee from deposits\\n        uint256 feePart = msg.value * feePercent / HUNDRED_PERCENT;\\n        uint256 valuePart = msg.value - feePart;\\n\\n        updateCycle();\\n\\n        cycles[counter.current()].totalBalance += valuePart;\\n        cycles[counter.current()].genData[generationId].balance += valuePart;\\n\\n        (bool success, ) = feeAddress.call{value: feePart}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Deposit royalty so that NFT holders can claim it later.\\n     * @param generationId Which generation balance receives royalty.\\n     */\\n    function onReceive(uint256 generationId) external payable nonReentrant {\\n        require(generationId < generations.count(), \\\"Wrong generationId\\\");\\n\\n        // take fee from deposits\\n        uint256 feePart = msg.value * feePercent / HUNDRED_PERCENT;\\n        uint256 valuePart = msg.value - feePart;\\n\\n        updateCycle();\\n\\n        cycles[counter.current()].totalBalance += valuePart;\\n        cycles[counter.current()].genData[generationId].balance += valuePart;\\n\\n        (bool success, ) = feeAddress.call{value: feePart}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function updateCycle() private {\\n        // is current cycle lasts enough?\\n        if (\\n            cycles[counter.current()].startTimestamp + cycleDuration <\\n            block.timestamp\\n        ) {\\n            // is current cycle got enough ether?\\n            if (cycles[counter.current()].totalBalance >= minEthPerCycle) {\\n                // start new cycle\\n                counter.increment();\\n                cycles[counter.current()].startTimestamp = block.timestamp;\\n\\n                if(counter.current() > 3) {\\n                    // subtract 4 because need to ignore current cycle + 3 cycles before it\\n                    uint256 removeIndex = counter.current() - 4;\\n                    adminWithdrawable += cycles[removeIndex].totalBalance;\\n                    cycles[removeIndex].totalBalance = 0;\\n                }\\n\\n                emit NewCycle(counter.current());\\n            }\\n        }\\n    }\\n\\n    function genDataBalance(\\n        uint256 cycleId,\\n        uint256 generationFeeBalanceId\\n    ) \\n        external \\n        view\\n        returns (uint256) \\n    {\\n        return cycles[cycleId].genData[generationFeeBalanceId].balance;\\n    }\\n\\n    function isClaimed(\\n        uint256 cycleId,\\n        uint256 generationFeeBalanceId,\\n        uint256 generationId,\\n        uint256 tokenId\\n    ) \\n        external \\n        view\\n        returns (bool) \\n    {\\n        return cycles[cycleId]\\n                .genData[generationFeeBalanceId]\\n                    .isClaimed[generationId][tokenId];\\n    }\\n\\n    /**\\n     * @dev Save total max supply of all preveious generations + added one. \\n     */\\n    function onGenerationAdded(\\n        uint256 generationId, \\n        address stack\\n    ) external {\\n        require(address(msg.sender) == address(generations));\\n        if(generationId == 0) {\\n            maxSupplys[generationId] = IStackOsNFT(stack).getMaxSupply();\\n        } else {\\n            maxSupplys[generationId] =\\n                maxSupplys[generationId - 1] + IStackOsNFT(stack).getMaxSupply();\\n        }\\n    }\\n\\n    /**\\n     * @notice Set cycle duration.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setCycleDuration(uint256 _seconds) external onlyOwner {\\n        require(_seconds > 0, \\\"Must be not zero\\\");\\n        cycleDuration = _seconds;\\n        emit SetCycleDuration(_seconds);\\n    }   \\n\\n    /**\\n     * @notice Set fee address.\\n     * @notice Fee transferred when contract receives new royalties.\\n     * @param _feeAddress Fee address.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setFeeAddress(address payable _feeAddress) external onlyOwner {\\n        require(_feeAddress != address(0), \\\"Must be not zero-address\\\");\\n        feeAddress = _feeAddress;\\n        emit SetFeeAddress(_feeAddress);\\n    }    \\n\\n    /**\\n     * @notice Set WETH address.\\n     * @notice Used to claim royalty in weth instead of matic.\\n     * @param _WETH WETH address.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setWETH(IERC20 _WETH) external onlyOwner {\\n        require(address(_WETH) != address(0), \\\"Must be not zero-address\\\");\\n        WETH = _WETH;\\n        emit SetWETH(_WETH);\\n    }\\n\\n    /**\\n     * @notice Set minimum eth needed to end cycle.\\n     * @param amount Amount of eth.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setMinEthPerCycle(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        minEthPerCycle = amount;\\n        emit SetMinEthPerCycle(amount);\\n    }\\n\\n    /**\\n     * @notice Set fee percent taken everytime royalties recieved.\\n     * @param _percent Fee basis points.\\n     * @dev Could only be invoked by the contract owner.\\n     */\\n    function setFeePercent(uint256 _percent) external onlyOwner {\\n        require(feePercent <= HUNDRED_PERCENT, \\\"invalid fee basis points\\\");\\n        feePercent = _percent;\\n        emit SetFeePercent(_percent);\\n    }\\n\\n    /**\\n     * @notice Claim royalty for tokens.\\n     * @param _generationId Generation id of tokens that will claim royalty.\\n     * @param _tokenIds Token ids who will claim royalty.\\n     * @param _genIds Ids of generation balances to claim royalties.\\n     * @dev Tokens must be owned by the caller.\\n     * @dev When generation tranded on market, fee is transferred to\\n     *      dedicated balance of this generation in royalty contract (_genIds).\\n     *      Then tokens that have lower generation id can claim part of this.\\n     *      So token of generation 1 can claim from genId 1,2,3.\\n     *      But token of generation 5 can't claim from genId 1.\\n     */\\n    function claim(\\n        uint256 _generationId, \\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _genIds\\n    )\\n        external\\n        nonReentrant\\n    {\\n        _claim(_generationId, _tokenIds, 0, false, _genIds);\\n    }\\n\\n    /**\\n     * @notice Same as `claim` but caller receives WETH.\\n     * @dev WETH address must be set in the contract.\\n     */\\n    function claimWETH(\\n        uint256 _generationId, \\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _genIds\\n    )\\n        external\\n        nonReentrant\\n    {\\n        require(address(WETH) != address(0), \\\"Wrong WETH address\\\");\\n        _claim(_generationId, _tokenIds, 0, true, _genIds);\\n    }\\n\\n    /**\\n     * @notice Purchase StackNFTs for royalties.\\n     * @notice Caller will receive the left over amount of royalties as STACK tokens.\\n     * @param _generationId Generation id to claim royalty and purchase, should be greater than 0.\\n     * @param _tokenIds Token ids that claim royalty.\\n     * @param _mintNum Amount to mint.\\n     * @param _genIds Ids of generation balances to claim royalties.\\n     * @dev Tokens must be owned by the caller.\\n     * @dev `_generationId` should be greater than 0.\\n     * @dev See `claim` function description for info on `_genIds`.\\n     */\\n    function purchaseNewNft(\\n        uint256 _generationId,\\n        uint256[] calldata _tokenIds,\\n        uint256 _mintNum,\\n        uint256[] calldata _genIds\\n    ) \\n        external \\n        nonReentrant \\n    {\\n        require(tx.origin == msg.sender, \\\"Only EOW\\\");\\n        require(_generationId > 0, \\\"Must be not first generation\\\");\\n        require(_mintNum > 0, \\\"Mint num is 0\\\");\\n        _claim(_generationId, _tokenIds, _mintNum, false, _genIds);\\n    }\\n\\n    function _claim(\\n        uint256 generationId,\\n        uint256[] calldata tokenIds,\\n        uint256 _mintNum,\\n        bool _claimWETH,\\n        uint256[] calldata _genIds\\n    ) internal {\\n        require(_genIds.length > 0, \\\"No gen ids\\\");\\n        require(address(this).balance > 0, \\\"No royalty\\\");\\n        IStackOsNFTBasic stack = \\n            IStackOsNFTBasic(address(generations.get(generationId)));\\n\\n        updateCycle();\\n\\n\\n        require(counter.current() > 0, \\\"Still first cycle\\\");\\n\\n        uint256 reward;\\n\\n        // iterate over tokens from args\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            \\n            require(\\n                darkMatter.isOwnStackOrDarkMatter(\\n                    msg.sender,\\n                    generationId,\\n                    tokenIds[i]\\n                ),\\n                \\\"Not owner\\\"\\n            );\\n\\n            reward += calcReward(generationId, tokenIds[i], _genIds);\\n        }\\n\\n        require(reward > 0, \\\"Nothing to claim\\\");\\n\\n        if (_mintNum == 0) {\\n            if(_claimWETH) {\\n                uint256 wethReceived = exchange.swapExactETHForTokens{value: reward}(WETH);\\n                WETH.safeTransfer(msg.sender, wethReceived);\\n            } else {\\n                (bool success, ) = payable(msg.sender).call{value: reward}(\\n                    \\\"\\\"\\n                );\\n                require(success, \\\"Transfer failed\\\");\\n            }\\n        } else {\\n            uint256 stackReceived = \\n                exchange.swapExactETHForTokens{value: reward}(stackToken);\\n            stackToken.approve(address(stack), stackReceived);\\n\\n\\n            uint256 spendAmount = stack.mintFromRoyaltyRewards(\\n                _mintNum,\\n                msg.sender\\n            );\\n            stackToken.transfer(msg.sender, stackReceived - spendAmount);\\n        }\\n\\n    }\\n\\n    function calcReward(\\n        uint256 generationId,\\n        uint256 tokenId,\\n        uint256[] calldata _genIds\\n    )\\n        private \\n        returns (uint256 reward) \\n    {\\n        for (uint256 o = 1; o <= 3; o++) {\\n            uint256 cycleId = counter.current() - o;\\n\\n            uint256 removeFromCycle;\\n            for (uint256 j; j < _genIds.length; j++) {\\n                require(_genIds[j] >= generationId, \\\"Bad gen id\\\");\\n                require(_genIds[j] < generations.count(), \\\"genId not exists\\\");\\n                GenData storage genData = cycles[cycleId].genData[_genIds[j]];\\n\\n                if (\\n                    genData.balance > 0 &&\\n                    genData.isClaimed[generationId][tokenId] == false\\n                ) {\\n                    uint256 claimAmount = genData.balance / maxSupplys[_genIds[j]];\\n                    reward += claimAmount;\\n                    removeFromCycle += claimAmount;\\n\\n                    genData.isClaimed[generationId][tokenId] = true;\\n                }\\n            }\\n\\n            cycles[cycleId].totalBalance -= removeFromCycle;\\n            if(cycleId == 0) break;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get pending royalty for NFT.\\n     * @param generationId StackOS generation id.\\n     * @param tokenIds Token ids.\\n     * @return withdrawableRoyalty Total withdrawable royalty from all cycles and all balances.\\n     */\\n    function pendingRoyalty(\\n        uint256 generationId,\\n        uint256[] calldata tokenIds\\n    ) external view returns (uint256 withdrawableRoyalty) {\\n        require(generationId < generations.count(), \\\"Wrong generation id\\\");\\n\\n        uint256 _counterCurrent = counter.current();\\n        if (\\n            cycles[_counterCurrent].startTimestamp + cycleDuration <\\n            block.timestamp\\n        ) {\\n            if (cycles[_counterCurrent].totalBalance >= minEthPerCycle) {\\n                _counterCurrent ++;\\n            }\\n        }\\n\\n        require(_counterCurrent > 0, \\\"Still first cycle\\\");\\n        uint256 reward;\\n\\n        // iterate over tokens from args\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            for (uint256 o = 1; o <= 3; o++) {\\n                uint256 cycleId = _counterCurrent - o;\\n                // j is pool id, should be greater or equal than token generation\\n                for (uint256 j = generationId; j < generations.count(); j++) {\\n\\n                    GenData storage genData = cycles[cycleId].genData[j];\\n                    if (\\n                        genData.balance > 0 &&\\n                        // verify reward is unclaimed\\n                        genData.isClaimed[generationId][tokenId] == false\\n                    ) {\\n                        reward += genData.balance / maxSupplys[j];\\n                    }\\n                }\\n\\n                if(cycleId == 0) break;\\n            }\\n        }\\n\\n        withdrawableRoyalty = reward;\\n    }\\n\\n    function adminWithdraw()\\n        external\\n        onlyOwner\\n    {\\n        require(adminWithdrawable > 0, \\\"Nothing to withdraw\\\");\\n        uint256 amount = adminWithdrawable;\\n        adminWithdrawable = 0;\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\n            \\\"\\\"\\n        );\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStackOsNFTBasic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IStackOsNFT.sol\\\";\\n\\ninterface IStackOsNFTBasic is IStackOsNFT {\\n\\n    function setName(\\n        string memory name_\\n    ) external;\\n\\n    function setSymbol(\\n        string memory symbol_\\n    ) external;\\n\\n    function mintFromSubscriptionRewards(\\n        uint256 _nftAmount,\\n        uint256 _stackAmount,\\n        address _to\\n    ) external;\\n\\n    function mintFromRoyaltyRewards(\\n        uint256 _mintNum,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function mintPrice()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function PRICE_PRECISION()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardDiscount()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFromLastGen(address _ticketOwner, uint256 _amount)\\n        external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stackToken\",\"type\":\"address\"},{\"internalType\":\"contract GenerationManager\",\"name\":\"_generations\",\"type\":\"address\"},{\"internalType\":\"contract DarkMatter\",\"name\":\"_darkMatter\",\"type\":\"address\"},{\"internalType\":\"contract StableCoinAcceptor\",\"name\":\"_stableAcceptor\",\"type\":\"address\"},{\"internalType\":\"contract Exchange\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_forgivenessPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxReductionAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriberWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"ClaimBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriodId\",\"type\":\"uint256\"}],\"name\":\"NewPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriberWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseGenerationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"PurchaseNewNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"SetBonusPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"SetDripPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"SetForgivenessPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"SetMaxPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetOnlyFirstGeneration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetTaxReductionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriberWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPayDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablePayed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stackReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_payWithStack\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriberWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriberWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusDripped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPayDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgivenessPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnlyFirstGeneration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"monthlyDripRateBonus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dripRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onReceiveStack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isTransferred\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawGenerationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"purchaseGenerationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"purchaseNewNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setDripPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setForgivenessPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOnlyFirstGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaxReductionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_payWithStack\",\"type\":\"bool\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxReductionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"}],\"name\":\"viewPeriodTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSub\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct Subscription.PeriodTokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Subscription", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000980111ae1b84e50222c8843e3a7a038f36fecd2b000000000000000000000000a07750dca4a6cb5835c1082df3e556b0e3c98943000000000000000000000000e1b05e76e61210f0fbe22312dd6260021546f2c800000000000000000000000019c4a53434c1524533c900ab4ce20b8595146edd0000000000000000000000009027cbbfaee5da5c2e948e617f8ae38b9b6a5ad000000000000000000000000066f35514aa3a3f4831da373318d8adc6ed36b7cb00000000000000000000000000000000000000000000000000000000000697800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000009c4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}