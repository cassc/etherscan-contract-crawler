{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/comptroller/Comptroller.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../libraries/ErrorReporter.sol\\\";\\nimport \\\"../libraries/ExponentialNoError.sol\\\";\\nimport \\\"../interfaces/IComptroller.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\ninterface I0vix {\\n    function transfer(address, uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\ninterface IUnitroller {\\n    function admin() external view returns (address);\\n\\n    function _acceptImplementation() external returns (uint256);\\n}\\n\\n/**\\n * @title Comptroller Contract\\n * @author 0VIX Protocol\\n * @notice Based on Compound's Comptroller with some changes inspired by BENQi.fi\\n */\\ncontract Comptroller is\\n    ComptrollerV7Storage,\\n    ComptrollerErrorReporter,\\n    ExponentialNoError\\n{\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(IOToken oToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(IOToken oToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(IOToken oToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(\\n        uint256 oldCloseFactorMantissa,\\n        uint256 newCloseFactorMantissa\\n    );\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(\\n        IOToken oToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(\\n        uint256 oldLiquidationIncentiveMantissa,\\n        uint256 newLiquidationIncentiveMantissa\\n    );\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(\\n        PriceOracle oldPriceOracle,\\n        PriceOracle newPriceOracle\\n    );\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPausedGlobally(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(IOToken oToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when a new borrow-side Reward speed is calculated for a market\\n    event RewardBorrowSpeedUpdated(IOToken indexed oToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new supply-side Reward speed is calculated for a market\\n    event RewardSupplySpeedUpdated(IOToken indexed oToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new Reward speed is set for a contributor\\n    event ContributorRewardSpeedUpdated(\\n        address indexed contributor,\\n        uint256 newSpeed\\n    );\\n\\n    /// @notice Emitted when VIX is distributed to a supplier\\n    event DistributedSupplierReward(\\n        IOToken indexed oToken,\\n        address indexed supplier,\\n        uint256 tokenDelta,\\n        uint256 tokenSupplyIndex\\n    );\\n\\n    /// @notice Emitted when VIX is distributed to a borrower\\n    event DistributedBorrowerReward(\\n        IOToken indexed oToken,\\n        address indexed borrower,\\n        uint256 tokenDelta,\\n        uint256 tokenBorrowIndex\\n    );\\n\\n    /// @notice Emitted when borrow cap for a oToken is changed\\n    event NewBorrowCap(IOToken indexed oToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(\\n        address oldBorrowCapGuardian,\\n        address newBorrowCapGuardian\\n    );\\n\\n    /// @notice Emitted when VIX is granted by admin\\n    event VixGranted(address recipient, uint256 amount);\\n\\n    /// @notice Emitted when VIX rewards are being claimed for a user\\n    event VixClaimed(address recipient, uint256 amount);\\n\\n    bool public constant override isComptroller = true;\\n\\n    /// @notice The initial Reward index for a market\\n    uint224 public constant marketInitialIndex = 1e36;\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    address public vixAddress;\\n    address public rewardUpdater;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n\\n    constructor() {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (IOToken[] memory)\\n    {\\n        return accountAssets[account];\\n    }\\n\\n    /**\\n     * @notice Returns whether the given token is listed market\\n     * @param oToken The oToken to check\\n     * @return True if is market, otherwise false.\\n     */\\n    function isMarket(address oToken) external view override returns (bool) {\\n        return markets[oToken].isListed;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param oToken The oToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, IOToken oToken)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return accountMembership[address(oToken)][account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param oTokens The list of addresses of the oToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory oTokens)\\n        public\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = oTokens.length;\\n\\n        uint256[] memory results = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            results[i] = uint256(\\n                addToMarketInternal(IOToken(oTokens[i]), msg.sender)\\n            );\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param oToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(IOToken oToken, address borrower)\\n        internal\\n        returns (Error)\\n    {\\n        if (!markets[address(oToken)].isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (accountMembership[address(oToken)][borrower]) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        accountMembership[address(oToken)][borrower] = true;\\n        accountAssets[borrower].push(oToken);\\n\\n        emit MarketEntered(oToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param oTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address oTokenAddress)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        IOToken oToken = IOToken(oTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the oToken */\\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = oToken\\n            .getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return\\n                fail(\\n                    Error.NONZERO_BORROW_BALANCE,\\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\\n                );\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint256 allowed = redeemAllowedInternal(\\n            oTokenAddress,\\n            msg.sender,\\n            tokensHeld\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.REJECTION,\\n                    FailureInfo.EXIT_MARKET_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Return true if the sender is not already \u2018in\u2019 the market */\\n        if (!accountMembership[address(oToken)][msg.sender]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Set oToken account membership to false */\\n        delete accountMembership[address(oToken)][msg.sender];\\n\\n        /* Delete oToken from the account\u2019s list of assets */\\n        // load into memory for faster iteration\\n        IOToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == oToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        IOToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(oToken, msg.sender);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param oToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(\\n        address oToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        mintAmount; // not used yet\\n        require(!guardianPaused[oToken].mint, \\\"mint is paused\\\");\\n\\n        if (!markets[oToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Sets an asset automatically as collateral if the user has no\\n        // oToken (on first deposit) and if the asset allows auto-collateralization\\n        if (\\n            IOToken(oToken).balanceOf(minter) == 0 &&\\n            markets[oToken].autoCollaterize\\n        ) {\\n            addToMarketInternal(IOToken(oToken), minter);\\n        }\\n\\n        updateAndDistributeSupplierRewardsForToken(oToken, minter);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param oToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of oTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(\\n        address oToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external override returns (uint256) {\\n        require(!guardianPaused[oToken].redeem, \\\"redeem is paused\\\");\\n\\n        uint256 allowed = redeemAllowedInternal(oToken, redeemer, redeemTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        updateAndDistributeSupplierRewardsForToken(oToken, redeemer);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(\\n        address oToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        if (!markets[oToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!accountMembership[oToken][redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall,\\n\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                redeemer,\\n                IOToken(oToken),\\n                redeemTokens,\\n                0\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param oToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(\\n        address oToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external pure override {\\n        // Shh - currently unused\\n        oToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        require(redeemTokens != 0 || redeemAmount == 0, \\\"redeemTokens zero\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param oToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(\\n        address oToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!guardianPaused[oToken].borrow, \\\"borrow is paused\\\");\\n        if (!markets[oToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!accountMembership[oToken][borrower]) {\\n            // only oTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == oToken, \\\"sender must be oToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error addErr = addToMarketInternal(IOToken(msg.sender), borrower);\\n            if (addErr != Error.NO_ERROR) {\\n                return uint256(addErr);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(accountMembership[oToken][borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(IOToken(oToken)) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        uint256 borrowCap = borrowCaps[oToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            require(\\n                (IOToken(oToken).totalBorrows() + borrowAmount) < borrowCap,\\n                \\\"borrow cap reached\\\"\\n            );\\n        }\\n\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall,\\n\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                borrower,\\n                IOToken(oToken),\\n                0,\\n                borrowAmount\\n            );\\n\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateAndDistributeBorrowerRewardsForToken(oToken, borrower);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param oToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address oToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external override returns (uint256) {\\n        require(!guardianPaused[oToken].repay, \\\"repay is paused\\\");\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[oToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateAndDistributeBorrowerRewardsForToken(oToken, borrower);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur and calculates dynamic liquidation incentive\\n     * @param oTokenBorrowed Asset which was borrowed by the borrower\\n     * @param oTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address oTokenBorrowed,\\n        address oTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view override returns (uint256, uint256) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (\\n            !markets[oTokenBorrowed].isListed ||\\n            !markets[oTokenCollateral].isListed\\n        ) {\\n            return (uint256(Error.MARKET_NOT_LISTED), 0);\\n        }\\n\\n        uint256 borrowBalance = IOToken(oTokenBorrowed).borrowBalanceStored(\\n            borrower\\n        );\\n\\n        uint256 dynamicLiquidationIncentiveMantissa;\\n\\n        /* allow accounts to be liquidated if the market is deprecated */\\n        if (isDeprecated(IOToken(oTokenBorrowed))) {\\n            require(\\n                borrowBalance >= repayAmount,\\n                \\\"Can not repay more than the total borrow\\\"\\n            );\\n\\n            dynamicLiquidationIncentiveMantissa = 1e18;\\n        } else {\\n            /* The borrower must have shortfall in order to be liquidatable */\\n            (\\n                Error err,\\n                ,\\n                uint256 shortfall,\\n                uint256 liquidationIncentive\\n            ) = getHypotheticalAccountLiquidityInternal(\\n                    borrower,\\n                    IOToken(address(0)),\\n                    0,\\n                    0\\n                );\\n\\n            if (err != Error.NO_ERROR) {\\n                return (uint256(err), 0);\\n            }\\n\\n            dynamicLiquidationIncentiveMantissa = liquidationIncentive;\\n\\n            if (shortfall == 0) {\\n                return (uint256(Error.INSUFFICIENT_SHORTFALL), 0);\\n            }\\n\\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\\n            Exp memory defaultCloseFactor = Exp({mantissa: closeFactorMantissa});\\n            Exp memory dynamicLiquidationIncentive = Exp({mantissa: dynamicLiquidationIncentiveMantissa});\\n\\n            /*  closeFactor = 10 * ( ( ( dynamicLiquidationIncentive - 1 ) * defaultCloseFactor ) + ( defaultLiquidationIncentive - dynamicLiquidationIncentive ) )\\n                which converts to:\\n                closeFactor = 10 * (defaultCloseFactor * liquidationIncentive + defaultLiquidationIncentive - defaultCloseFactor - liquidationIncentive) \\n            */\\n            Exp memory downscaledCloseFactor = sub_(\\n                sub_(\\n                    add_(\\n                        mul_(\\n                            defaultCloseFactor, \\n                            dynamicLiquidationIncentive), \\n                        Exp({mantissa: liquidationIncentiveMantissa})), \\n                    defaultCloseFactor), \\n                dynamicLiquidationIncentive);\\n\\n            uint256 closeFactor = mul_(downscaledCloseFactor, 10).mantissa;\\n            if (closeFactor > 1e18) {\\n                closeFactor = 1e18;\\n            } \\n\\n            uint256 maxClose = mul_ScalarTruncate(\\n                Exp({mantissa: closeFactor}),\\n                borrowBalance\\n            );\\n            if (repayAmount > maxClose) {\\n                return (uint256(Error.TOO_MUCH_REPAY), 0);\\n            }\\n        }\\n\\n        return (uint256(Error.NO_ERROR), dynamicLiquidationIncentiveMantissa);\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param oTokenCollateral Asset which was used as collateral and will be seized\\n     * @param oTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address oTokenCollateral,\\n        address oTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (\\n            !markets[oTokenCollateral].isListed ||\\n            !markets[oTokenBorrowed].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (\\n            IOToken(oTokenCollateral).comptroller() !=\\n            IOToken(oTokenBorrowed).comptroller()\\n        ) {\\n            return uint256(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        require(accountMembership[oTokenCollateral][borrower], \\\"borrower exited collateral market\\\");\\n\\n        // Keep the flywheel moving\\n        updateRewardSupplyIndex(oTokenCollateral);\\n        distributeSupplierReward(oTokenCollateral, borrower);\\n        distributeSupplierReward(oTokenCollateral, liquidator);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param oToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of oTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(\\n        address oToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint256 allowed = redeemAllowedInternal(oToken, src, transferTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateRewardSupplyIndex(oToken);\\n        distributeSupplierReward(oToken, src);\\n        distributeSupplierReward(oToken, dst);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `oTokenBalance` is the number of oTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint256 sumCollateral;\\n        uint256 totalCollateral;\\n        uint256 sumBorrowPlusEffects;\\n        uint256 dynamicLiquidationIncentive;\\n        uint256 oTokenBalance;\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n        uint256 oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall, \\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                IOToken(address(0)),\\n                0,\\n                0\\n            );\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param oTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements,\\n     *          dynamic liquidation incentive)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address oTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall,\\n            uint256 liquidationIncentive\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                IOToken(oTokenModify),\\n                redeemTokens,\\n                borrowAmount\\n            );\\n        return (uint256(err), liquidity, shortfall, liquidationIncentive);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param oTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral oToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements,\\n     *          dynamic liquidation incentive)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        IOToken oTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            Error,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint256 oErr;\\n\\n        // For each asset the account is in\\n        IOToken[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IOToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the oToken\\n            (\\n                oErr,\\n                vars.oTokenBalance,\\n                vars.borrowBalance,\\n                vars.exchangeRateMantissa\\n            ) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({\\n                mantissa: markets[address(asset)].collateralFactorMantissa\\n            });\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(\\n                mul_(vars.collateralFactor, vars.exchangeRate),\\n                vars.oraclePrice\\n            );\\n\\n            // sumCollateral += tokensToDenom * oTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                vars.oTokenBalance,\\n                vars.sumCollateral\\n            );\\n\\n            vars.totalCollateral = mul_ScalarTruncateAddUInt(\\n                mul_(vars.exchangeRate, vars.oraclePrice),\\n                vars.oTokenBalance,\\n                vars.totalCollateral\\n            );\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n\\n            // Calculate effects of interacting with oTokenModify\\n            if (asset == oTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.tokensToDenom,\\n                    redeemTokens,\\n                    vars.sumBorrowPlusEffects\\n                );\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.oraclePrice,\\n                    borrowAmount,\\n                    vars.sumBorrowPlusEffects\\n                );\\n            }\\n        }\\n       \\n        if (vars.sumBorrowPlusEffects == 0) {\\n            vars.dynamicLiquidationIncentive = liquidationIncentiveMantissa;\\n        }\\n        else {\\n            vars.dynamicLiquidationIncentive = div_(\\n                vars.totalCollateral,\\n                Exp({mantissa: vars.sumBorrowPlusEffects})\\n            );\\n        }\\n\\n        if (vars.dynamicLiquidationIncentive >= liquidationIncentiveMantissa) {\\n            vars.dynamicLiquidationIncentive = liquidationIncentiveMantissa;\\n        }\\n        else if(vars.dynamicLiquidationIncentive != 0) {\\n            unchecked { vars.dynamicLiquidationIncentive -= 1; }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        unchecked {\\n            if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n                return (\\n                    Error.NO_ERROR,\\n                    vars.sumCollateral - vars.sumBorrowPlusEffects,\\n                    0,\\n                    vars.dynamicLiquidationIncentive\\n                );\\n            } else {\\n                return (\\n                    Error.NO_ERROR,\\n                    0,\\n                    vars.sumBorrowPlusEffects - vars.sumCollateral,\\n                    vars.dynamicLiquidationIncentive\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in oToken.liquidateBorrowFresh)\\n     * @param oTokenBorrowed The address of the borrowed oToken\\n     * @param oTokenCollateral The address of the collateral oToken\\n     * @param actualRepayAmount The amount of oTokenBorrowed underlying to convert into oTokenCollateral tokens\\n     * @param dynamicLiquidationIncentive The liquidation incentive calculated based on LTV\\n     * @return (errorCode, number of oTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(\\n        address oTokenBorrowed,\\n        address oTokenCollateral,\\n        uint256 actualRepayAmount,\\n        uint256 dynamicLiquidationIncentive\\n    ) external view override returns (uint256, uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\\n            IOToken(oTokenBorrowed)\\n        );\\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\\n            IOToken(oTokenCollateral)\\n        );\\n\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint256(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint256 exchangeRateMantissa = IOToken(oTokenCollateral)\\n            .exchangeRateStored(); // Note: reverts on error\\n\\n        Exp memory numerator = mul_(\\n            Exp({mantissa: dynamicLiquidationIncentive}),\\n            Exp({mantissa: priceBorrowedMantissa})\\n        );\\n        Exp memory denominator = mul_(\\n            Exp({mantissa: priceCollateralMantissa}),\\n            Exp({mantissa: exchangeRateMantissa})\\n        );\\n        Exp memory ratio = div_(numerator, denominator);\\n\\n        uint256 seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint256(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new price oracle for the comptroller\\n     * @dev Admin function to set a new price oracle\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Track the old oracle for the comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Admin function to set closeFactor\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure\\n     */\\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\\n        external\\n        onlyAdmin\\n        returns (uint256)\\n    {\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the collateralFactor for a market\\n     * @dev Admin function to set per-market collateralFactor\\n     * @param oToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCollateralFactor(\\n        IOToken oToken,\\n        uint256 newCollateralFactorMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\\n                );\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(oToken)];\\n        if (!market.isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_LISTED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\\n                );\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({\\n            mantissa: newCollateralFactorMantissa\\n        });\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return\\n                fail(\\n                    Error.INVALID_COLLATERAL_FACTOR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\\n                );\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (\\n            newCollateralFactorMantissa != 0 &&\\n            oracle.getUnderlyingPrice(oToken) == 0\\n        ) {\\n            return\\n                fail(\\n                    Error.PRICE_ERROR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\\n                );\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(\\n            oToken,\\n            oldCollateralFactorMantissa,\\n            newCollateralFactorMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets liquidationIncentive\\n     * @dev Admin function to set liquidationIncentive\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\\n        external\\n        returns (uint256)\\n    {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for use in log\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(\\n            oldLiquidationIncentiveMantissa,\\n            newLiquidationIncentiveMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to set isListed and add support for the market\\n     * @param oToken The address of the market (token) to list\\n     * @param _autoCollaterize Boolean value representing whether the market should have auto-collateralisation enabled\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportMarket(IOToken oToken, bool _autoCollaterize)\\n        external\\n        returns (uint256)\\n    {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\n                );\\n        }\\n\\n        if (markets[address(oToken)].isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_ALREADY_LISTED,\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\n                );\\n        }\\n\\n        oToken.isOToken(); // Sanity check to make sure its really a IOToken\\n\\n        markets[address(oToken)] = Market({\\n            isListed: true,\\n            autoCollaterize: _autoCollaterize,\\n            collateralFactorMantissa: 0\\n        });\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != IOToken(oToken), \\\"market already added\\\");\\n        }\\n\\n        allMarkets.push(oToken);\\n        _initializeMarket(address(oToken));\\n\\n        emit MarketListed(oToken);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _initializeMarket(address oToken) internal {\\n        uint32 timestamp = safe32(getTimestamp());\\n\\n        MarketState storage supState = supplyState[oToken];\\n        MarketState storage borState = borrowState[oToken];\\n\\n        /*\\n         * Update market state indices\\n         */\\n        if (supState.index == 0) {\\n            // Initialize supply state index with default value\\n            supState.index = marketInitialIndex;\\n        }\\n\\n        if (borState.index == 0) {\\n            // Initialize borrow state index with default value\\n            borState.index = marketInitialIndex;\\n        }\\n\\n        /*\\n         * Update market state timestamps\\n         */\\n        supState.timestamp = borState.timestamp = timestamp;\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given oToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n     * @param oTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function _setMarketBorrowCaps(\\n        IOToken[] calldata oTokens,\\n        uint256[] calldata newBorrowCaps\\n    ) external {\\n        require(\\n            msg.sender == admin || msg.sender == borrowCapGuardian,\\n            \\\"only admin or borrowCapGuardian\\\"\\n        );\\n\\n        uint256 numMarkets = oTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(\\n            numMarkets != 0 && numMarkets == numBorrowCaps,\\n            \\\"invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(oTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(oTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian)\\n        external\\n        onlyAdmin\\n    {\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian)\\n        public\\n        returns (uint256)\\n    {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function onlyAdminOrGuardian() internal view {\\n        require(\\n            msg.sender == admin || msg.sender == pauseGuardian,\\n            \\\"only pause guardian and admin\\\"\\n        );\\n    }\\n\\n    function _setMintPaused(IOToken oToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(oToken)].isListed,\\n            \\\"cannot pause: market not listed\\\"\\n        );\\n        onlyAdminOrGuardian();\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        guardianPaused[address(oToken)].mint = state;\\n        emit ActionPaused(oToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(\\n        IOToken oToken,\\n        bool state\\n    ) public returns (bool) {\\n        require(\\n            markets[address(oToken)].isListed,\\n            \\\"cannot pause: market not listed\\\"\\n        );\\n        onlyAdminOrGuardian();\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        guardianPaused[address(oToken)].borrow = state;\\n        emit ActionPaused(oToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setRedeemPaused(\\n        IOToken oToken,\\n        bool state\\n    ) public returns (bool) {\\n        require(\\n            markets[address(oToken)].isListed,\\n            \\\"cannot pause: market not listed\\\"\\n        );\\n        onlyAdminOrGuardian();\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        guardianPaused[address(oToken)].redeem = state;\\n        emit ActionPaused(oToken, \\\"Redeem\\\", state);\\n        return state;\\n    }\\n\\n    function _setRepayPaused(\\n        IOToken oToken,\\n        bool state\\n    ) public returns (bool) {\\n        require(\\n            markets[address(oToken)].isListed,\\n            \\\"cannot pause: market not listed\\\"\\n        );\\n        onlyAdminOrGuardian();\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        guardianPaused[address(oToken)].repay = state;\\n        emit ActionPaused(oToken, \\\"Repay\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        onlyAdminOrGuardian();\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPausedGlobally(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) public returns (bool) {\\n        onlyAdminOrGuardian();\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPausedGlobally(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(IUnitroller unitroller) public {\\n        require(\\n            msg.sender == unitroller.admin(),\\n            \\\"only unitroller admin can _become\\\"\\n        );\\n        require(\\n            unitroller._acceptImplementation() == 0,\\n            \\\"change not authorized\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\n    }\\n\\n    /*** VIX Distribution ***/\\n\\n    /**\\n     * @notice Set Reward speed for a single market\\n     * @param oToken The market whose Reward speed to update\\n     * @param supplySpeed New supply-side Reward speed for market\\n     * @param borrowSpeed New borrow-side Reward speed for market\\n     */\\n    function setRewardSpeedInternal(\\n        IOToken oToken,\\n        uint256 supplySpeed,\\n        uint256 borrowSpeed\\n    ) internal {\\n        require(markets[address(oToken)].isListed, \\\"market is not listed\\\");\\n\\n        if (rewardSupplySpeeds[address(oToken)] != supplySpeed) {\\n            // Supply speed updated so let's update supply state to ensure that\\n            //  1. Reward accrued properly for the old speed, and\\n            //  2. Reward accrued at the new speed starts after this block.\\n            updateRewardSupplyIndex(address(oToken));\\n\\n            // Update speed and emit event\\n            rewardSupplySpeeds[address(oToken)] = supplySpeed;\\n            emit RewardSupplySpeedUpdated(oToken, supplySpeed);\\n        }\\n\\n        if (rewardBorrowSpeeds[address(oToken)] != borrowSpeed) {\\n            // Borrow speed updated so let's update borrow state to ensure that\\n            //  1. Reward accrued properly for the old speed, and\\n            //  2. Reward accrued at the new speed starts after this block.\\n            Exp memory borrowIndex = Exp({ mantissa: oToken.borrowIndex() });\\n            updateRewardBorrowIndex(address(oToken), borrowIndex);\\n\\n            // Update speed and emit event\\n            rewardBorrowSpeeds[address(oToken)] = borrowSpeed;\\n            emit RewardBorrowSpeedUpdated(oToken, borrowSpeed);\\n        }\\n    }\\n\\n    function updateAndDistributeSupplierRewardsForToken(\\n        address oToken,\\n        address account\\n    ) public override {\\n        updateRewardSupplyIndex(oToken);\\n        distributeSupplierReward(oToken, account);\\n    }\\n\\n    function updateAndDistributeBorrowerRewardsForToken(\\n        address oToken,\\n        address borrower\\n    ) public override {\\n        Exp memory marketBorrowIndex = Exp({\\n            mantissa: IOToken(oToken).borrowIndex()\\n        });\\n        updateRewardBorrowIndex(oToken, marketBorrowIndex);\\n        distributeBorrowerReward(oToken, borrower, marketBorrowIndex);\\n    }\\n\\n    /**\\n     * @notice Accrue Reward to the market by updating the supply index\\n     * @param oToken The market whose supply index to update\\n     * @dev Index is a cumulative sum of the Reward per oToken accrued.\\n     */\\n    function updateRewardSupplyIndex(address oToken) internal {\\n        MarketState storage supplyState = supplyState[oToken];\\n        uint256 supplySpeed = rewardSupplySpeeds[oToken];\\n        uint32 timestamp = safe32(getTimestamp());\\n        uint256 deltaTimestamps = uint256(timestamp) -\\n            uint256(supplyState.timestamp);\\n        if (deltaTimestamps > 0) {\\n            if (supplySpeed > 0) {\\n                uint256 supplyTokens = address(boostManager) == address(0)\\n                    ? IOToken(oToken).totalSupply()\\n                    : boostManager.boostedTotalSupply(oToken);\\n                uint256 rewardAccrued = deltaTimestamps * supplySpeed;\\n                Double memory ratio = supplyTokens > 0\\n                    ? fraction(rewardAccrued, supplyTokens)\\n                    : Double({mantissa: 0});\\n                supplyState.index = safe224(\\n                    add_(Double({mantissa: supplyState.index}), ratio).mantissa\\n                );\\n            }\\n            supplyState.timestamp = timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue Reward to the market by updating the borrow index\\n     * @param oToken The market whose borrow index to update\\n     * @dev Index is a cumulative sum of the Reward per oToken accrued.\\n     */\\n    function updateRewardBorrowIndex(\\n        address oToken,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        MarketState storage borrowState = borrowState[oToken];\\n        uint256 borrowSpeed = rewardBorrowSpeeds[oToken];\\n        uint32 timestamp = safe32(getTimestamp());\\n        uint256 deltaTimestamps = uint256(timestamp) -\\n            uint256(borrowState.timestamp);\\n        if (deltaTimestamps > 0) {\\n            if (borrowSpeed > 0) {\\n                uint256 borrowAmount = div_(\\n                    address(boostManager) == address(0)\\n                        ? IOToken(oToken).totalBorrows()\\n                        : boostManager.boostedTotalBorrows(oToken),\\n                    marketBorrowIndex\\n                );\\n                uint256 rewardAccrued = deltaTimestamps * borrowSpeed;\\n                Double memory ratio = borrowAmount > 0\\n                    ? fraction(rewardAccrued, borrowAmount)\\n                    : Double({mantissa: 0});\\n                borrowState.index = safe224(\\n                    add_(Double({mantissa: borrowState.index}), ratio).mantissa\\n                );\\n            }\\n            borrowState.timestamp = timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate Reward accrued by a supplier\\n     * @param oToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute Reward to\\n     */\\n    function distributeSupplierReward(address oToken, address supplier)\\n        internal\\n    {\\n        // TODO: Don't distribute supplier Reward if the user is not in the supplier market.\\n        // This check should be as gas efficient as possible as distributeSupplierReward is called in many places.\\n        // - We really don't want to call an external contract as that's quite expensive.\\n\\n        uint256 supplyIndex = supplyState[oToken].index;\\n        uint256 supplierIndex = rewardSupplierIndex[oToken][supplier];\\n\\n        // Update supplier's index to the current index since we are distributing accrued VIX\\n        rewardSupplierIndex[oToken][supplier] = supplyIndex;\\n\\n        if (supplierIndex == 0 && supplyIndex >= 0) {\\n            return;\\n        }\\n\\n        // Calculate change in the cumulative sum of the Reward per oToken accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: supplyIndex - supplierIndex\\n        });\\n\\n        uint256 supplierTokens = address(boostManager) == address(0)\\n            ? IOToken(oToken).balanceOf(supplier)\\n            : boostManager.boostedSupplyBalanceOf(oToken, supplier);\\n\\n        if (supplyIndex != supplierIndex) {\\n            // Calculate Reward accrued: oTokenAmount * accruedPerOToken\\n            uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n            uint256 supplierAccrued = rewardAccrued[supplier] + supplierDelta;\\n            rewardAccrued[supplier] = supplierAccrued;\\n\\n            emit DistributedSupplierReward(\\n                IOToken(oToken),\\n                supplier,\\n                supplierDelta,\\n                supplyIndex\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate Reward accrued by a borrower\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param oToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute Reward to\\n     */\\n    function distributeBorrowerReward(\\n        address oToken,\\n        address borrower,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        // TODO: Don't distribute supplier Reward if the user is not in the borrower market.\\n        // This check should be as gas efficient as possible as distributeBorrowerReward is called in many places.\\n        // - We really don't want to call an external contract as that's quite expensive.\\n\\n        uint256 borrowIndex = borrowState[oToken].index;\\n        uint256 borrowerIndex = rewardBorrowerIndex[oToken][borrower];\\n\\n        // Update borrowers's index to the current index since we are distributing accrued VIX\\n        rewardBorrowerIndex[oToken][borrower] = borrowIndex;\\n\\n        if (borrowerIndex == 0 && borrowIndex >= 0) {\\n            return;\\n        }\\n\\n        // Calculate change in the cumulative sum of the Reward per borrowed unit accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: borrowIndex - borrowerIndex\\n        });\\n\\n        if (borrowIndex != borrowerIndex) {\\n            uint256 borrowerAmount = div_(\\n                address(boostManager) == address(0)\\n                    ? IOToken(oToken).borrowBalanceStored(borrower)\\n                    : boostManager.boostedBorrowBalanceOf(oToken, borrower),\\n                marketBorrowIndex\\n            );\\n\\n            // Calculate Reward accrued: oTokenAmount * accruedPerBorrowedUnit\\n            uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n\\n            uint256 borrowerAccrued = rewardAccrued[borrower] + borrowerDelta;\\n            rewardAccrued[borrower] = borrowerAccrued;\\n\\n            emit DistributedBorrowerReward(\\n                IOToken(oToken),\\n                borrower,\\n                borrowerDelta,\\n                borrowIndex\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate additional accrued Reward for a contributor since last accrual\\n     * @param contributor The address to calculate contributor rewards for\\n     */\\n    function updateContributorRewards(address contributor) public {\\n        uint256 rewardSpeed = rewardContributorSpeeds[contributor];\\n        uint256 timestamp = getTimestamp();\\n        uint256 deltaTimestamps = timestamp - lastContributorTimestamp[contributor];\\n        if (deltaTimestamps > 0 && rewardSpeed > 0) {\\n            uint256 newAccrued = deltaTimestamps * rewardSpeed;\\n            uint256 contributorAccrued = rewardAccrued[contributor] +\\n                newAccrued;\\n\\n            rewardAccrued[contributor] = contributorAccrued;\\n            lastContributorTimestamp[contributor] = timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all the reward accrued by holder in all markets\\n     * @param holder The address to claim Reward for\\n     */\\n\\n    function claimReward(address holder) public returns (uint256) {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimRewards(holders, allMarkets, true, true);\\n        \\n        uint256 totalReward = rewardAccrued[holder];\\n        rewardAccrued[holder] = grantRewardInternal(holder, totalReward);\\n        return totalReward;\\n    }\\n\\n    /**\\n     * @notice Claim all the reward accrued by holder in the specified markets\\n     * @param holder The address to claim Reward for\\n     * @param oTokens The list of markets to claim Reward in\\n     */\\n    function claimRewards(address holder, IOToken[] memory oTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimRewards(holders, oTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all reward accrued by the holders\\n     * @param holders The addresses to claim Reward for\\n     * @param oTokens The list of markets to claim Reward in\\n     */\\n    function claimRewards(\\n        address[] memory holders,\\n        IOToken[] memory oTokens,\\n        bool,\\n        bool\\n    ) public {\\n        for (uint256 i = 0; i < oTokens.length; i++) {\\n            require(markets[address(oTokens[i])].isListed, \\\"market must be listed\\\");\\n            for (uint256 j = 0; j < holders.length; j++) {\\n                updateAndDistributeSupplierRewardsForToken(address(oTokens[i]), holders[j]);\\n                updateAndDistributeBorrowerRewardsForToken(address(oTokens[i]), holders[j]);\\n            }\\n        }\\n        for (uint256 j = 0; j < holders.length; j++) {\\n            rewardAccrued[holders[j]] = grantRewardInternal(\\n                holders[j],\\n                rewardAccrued[holders[j]]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer Reward to the user\\n     * @dev Note: If there is not enough VIX, we do not perform the transfer all.\\n     * @param user The address of the user to transfer Reward to\\n     * @param amount The amount of Reward to (possibly) transfer\\n     * @return The amount of Reward which was NOT transferred to the user\\n     */\\n    function grantRewardInternal(address user, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        I0vix vix = I0vix(getVixAddress());\\n        if (address(vix) != address(0)) {\\n            uint256 rewardRemaining = vix.balanceOf(address(this));\\n            if (amount > 0 && amount <= rewardRemaining) {\\n                vix.transfer(user, amount);\\n                emit VixClaimed(user, amount);\\n                return 0;\\n            }\\n        }\\n\\n        return amount;\\n    }\\n\\n    /*** VIX Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer Reward to the recipient\\n     * @dev Note: If there is not enough VIX, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer Reward to\\n     * @param amount The amount of Reward to (possibly) transfer\\n     */\\n    function _grantReward(address recipient, uint256 amount) public {\\n        require(adminOrInitializing(), \\\"only admin can grant reward\\\");\\n        uint256 amountLeft = grantRewardInternal(recipient, amount);\\n        require(amountLeft == 0, \\\"insufficient token for grant\\\");\\n        emit VixGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Set Reward borrow and supply speeds for the specified markets.\\n     * @param oTokens The markets whose Reward speed to update.\\n     * @param supplySpeeds New supply-side Reward speed for the corresponding market.\\n     * @param borrowSpeeds New borrow-side Reward speed for the corresponding market.\\n     */\\n    function _setRewardSpeeds(\\n        address[] memory oTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) public override {\\n        require(\\n            msg.sender == admin || msg.sender == rewardUpdater,\\n            \\\"only admin can set reward speed\\\"\\n        );\\n\\n        uint256 numTokens = oTokens.length;\\n        require(\\n            numTokens == supplySpeeds.length &&\\n                numTokens == borrowSpeeds.length,\\n            \\\"_setRewardSpeeds invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; ++i) {\\n            setRewardSpeedInternal(\\n                IOToken(oTokens[i]),\\n                supplySpeeds[i],\\n                borrowSpeeds[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Reward speed for a single contributor\\n     * @param contributor The contributor whose Reward speed to update\\n     * @param rewardSpeed New Reward speed for contributor\\n     */\\n    function _setContributorRewardSpeed(\\n        address contributor,\\n        uint256 rewardSpeed\\n    ) public {\\n        require(\\n            msg.sender == admin || msg.sender == rewardUpdater,\\n            \\\"only admin can set reward speed\\\"\\n        );\\n\\n        // note that Reward speed could be set to 0 to halt liquidity rewards for a contributor\\n        updateContributorRewards(contributor);\\n        if (rewardSpeed == 0) {\\n            // release storage\\n            delete lastContributorTimestamp[contributor];\\n        } else {\\n            lastContributorTimestamp[contributor] = getTimestamp();\\n        }\\n        rewardContributorSpeeds[contributor] = rewardSpeed;\\n\\n        emit ContributorRewardSpeedUpdated(contributor, rewardSpeed);\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view override returns (IOToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    /**\\n     * @notice Returns true if the given oToken market has been deprecated\\n     * @dev All borrows in a deprecated oToken market can be immediately liquidated\\n     * @param oToken The market to check if deprecated\\n     */\\n    function isDeprecated(IOToken oToken) public view returns (bool) {\\n        return\\n            markets[address(oToken)].collateralFactorMantissa == 0 &&\\n            guardianPaused[address(oToken)].borrow &&\\n            oToken.reserveFactorMantissa() == 1e18;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Return the address of the 0VIX token\\n     * @return The address of VIX\\n     */\\n    function getVixAddress() public view returns (address) {\\n        return vixAddress;\\n    }\\n\\n    /**\\n     * @notice Set the 0VIX token address\\n     */\\n    function setVixAddress(address newVixAddress) public onlyAdmin {\\n        require(newVixAddress != address(0), \\\"no zero address allowed\\\");\\n        require(vixAddress == address(0), \\\"VIX already set\\\");\\n        vixAddress = newVixAddress;\\n    }\\n\\n    /**\\n     * @notice Set the booster manager address\\n     */\\n    function setBoostManager(address newBoostManager) public onlyAdmin {\\n        require(newBoostManager != address(0), \\\"no zero address allowed\\\");\\n        require(address(boostManager) == address(0), \\\"VIX already set\\\");\\n        boostManager = IBoostManager(newBoostManager);\\n    }\\n\\n    function getBoostManager() external view override returns (address) {\\n        return address(boostManager);\\n    }\\n\\n    function setRewardUpdater(address _rewardUpdater) public onlyAdmin {\\n        require(_rewardUpdater != address(0), \\\"no zero address allowed\\\");\\n        rewardUpdater = _rewardUpdater;\\n    }\\n\\n    function setAutoCollaterize(address market, bool flag) external onlyAdmin {\\n        markets[market].autoCollaterize = flag;\\n    }\\n\\n    /**\\n     * Pause or unpause all protocol functionality\\n     * - Pause can be invoked by admin or pause guardian\\n     * - Unpause can be invoked by admin only\\n     */\\n    function setProtocolPaused(bool _paused) public {\\n\\n        for (uint i; i < allMarkets.length;) {\\n            IOToken market = allMarkets[i];\\n            _setBorrowPaused(market, _paused);\\n            _setMintPaused(market, _paused);\\n            _setRedeemPaused(market, _paused);\\n            _setRepayPaused(market, _paused);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _setSeizePaused(_paused);\\n        _setTransferPaused(_paused);\\n    }\\n\\n    /**\\n     * @notice payable function needed to receive NATIVE\\n     */\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/comptroller/ComptrollerStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../otokens/interfaces/IOToken.sol\\\";\\nimport \\\"../oracles/chainlink/PriceOracle.sol\\\";\\nimport \\\"../vote-escrow/interfaces/IBoostManager.sol\\\";\\n\\nimport \\\"../interfaces/IComptroller.sol\\\";\\nimport \\\"./UnitrollerAdminStorage.sol\\\";\\n\\nabstract contract ComptrollerV1Storage is IComptroller, UnitrollerAdminStorage  {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public override oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => IOToken[]) public accountAssets;\\n\\n    /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => mapping(address => bool)) public accountMembership;\\n\\n}\\n\\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        // markets marked with autoCollaterize are automatically set as collateral for the user at the first mint\\n        bool autoCollaterize;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n    }\\n\\n    /**\\n     * @notice Official mapping of oTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    struct PauseData {\\n        bool mint;\\n        bool borrow;\\n        bool redeem;\\n        bool repay;\\n    }\\n\\n    mapping(address => PauseData) public guardianPaused;\\n}\\n\\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct MarketState {\\n        /// @notice The market's last updated tokenBorrowIndex or tokenSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The timestamp the index was last updated at\\n        uint32 timestamp;\\n    }\\n\\n    /// @notice A list of all markets\\n    IOToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes VIX, per second\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public rewardSpeeds;\\n\\n    /// @notice The 0VIX market supply state for each market\\n    mapping(address => MarketState) public supplyState;\\n\\n    /// @notice The 0VIX market borrow state for each market\\n    mapping(address => MarketState) public borrowState;\\n\\n    /// @notice The 0VIX borrow index for each market for each supplier as of the last time they accrued VIX\\n    mapping(address => mapping(address => uint)) public rewardSupplierIndex;\\n\\n    /// @notice The 0VIX borrow index for each market for each borrower as of the last time they accrued VIX\\n    mapping(address => mapping(address => uint)) public rewardBorrowerIndex;\\n\\n    /// @notice The VIX accrued but not yet transferred to each user\\n    mapping(address => uint) public rewardAccrued;\\n\\n}\\n\\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each oToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint) public borrowCaps;\\n}\\n\\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of VIX that each contributor receives per second\\n    mapping(address => uint) public rewardContributorSpeeds;\\n\\n    /// @notice Last timestamp at which a contributor's VIX rewards have been allocated\\n    mapping(address => uint) public lastContributorTimestamp;\\n}\\n\\nabstract contract ComptrollerV6Storage is ComptrollerV5Storage {\\n    /// @notice The rate at which VIX is distributed to the corresponding borrow market (per second)\\n    mapping(address => uint) public rewardBorrowSpeeds;\\n\\n    /// @notice The rate at which VIX is distributed to the corresponding supply market (per second)\\n    mapping(address => uint) public rewardSupplySpeeds;\\n}\\n\\nabstract contract ComptrollerV7Storage is ComptrollerV6Storage {\\n    /// @notice Accounting storage mapping account addresses to how much VIX they owe the protocol.\\n    mapping(address => uint) public rewardReceivable;\\n\\n    IBoostManager public boostManager;\\n}\"\r\n    },\r\n    \"contracts/comptroller/UnitrollerAdminStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nabstract contract UnitrollerAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of Unitroller\\r\\n    */\\r\\n    address public comptrollerImplementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of Unitroller\\r\\n    */\\r\\n    address public pendingComptrollerImplementation;\\r\\n}\"\r\n    },\r\n    \"contracts/interest-rate-models/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n  * @title 0VIX's IInterestRateModel Interface\\n  * @author 0VIX\\n  */\\ninterface IInterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    function isInterestRateModel() external view returns(bool);\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per timestmp\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per timestmp (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per timestmp\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per timestmp (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IComptroller.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../otokens/interfaces/IOToken.sol\\\";\\nimport \\\"../oracles/chainlink/PriceOracle.sol\\\";\\n\\ninterface IComptroller {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    function isComptroller() external view returns(bool);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata oTokens) external returns (uint[] memory);\\n    function exitMarket(address oToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address oToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function redeemAllowed(address oToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address oToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address oToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function repayBorrowAllowed(\\n        address oToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrowAllowed(\\n        address oTokenBorrowed,\\n        address oTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint, uint);\\n\\n    function seizeAllowed(\\n        address oTokenCollateral,\\n        address oTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n\\n    function transferAllowed(address oToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address oTokenBorrowed,\\n        address oTokenCollateral,\\n        uint repayAmount,\\n        uint dynamicLiquidationIncentive) external view returns (uint, uint);\\n\\n\\n\\n    function isMarket(address market) external view returns(bool);\\n    function getBoostManager() external view returns(address);\\n    function getAllMarkets() external view returns(IOToken[] memory);\\n    function oracle() external view returns(PriceOracle);\\n\\n    function updateAndDistributeSupplierRewardsForToken(\\n        address oToken,\\n        address account\\n    ) external;\\n\\n    function updateAndDistributeBorrowerRewardsForToken(\\n        address oToken,\\n        address borrower\\n    ) external;\\n\\n    function _setRewardSpeeds(\\n        address[] memory oTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ErrorReporter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_PROTOCOL_SEIZE_SHARE_ACCRUE_INTEREST_FAILED,\\n        SET_PROTOCOL_SEIZE_SHARE_OWNER_CHECK,\\n        SET_PROTOCOL_SEIZE_SHARE_FRESH_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ExponentialNoError.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author 0VIX\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        return truncate(mul_(a, scalar));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        return truncate(mul_(a, scalar)) + addend;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n) pure internal returns (uint224) {\\n        require(n <= type(uint224).max, \\\"safe224 overflow\\\");\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n) pure internal returns (uint32) {\\n        require(n <= type(uint32).max, \\\"safe32 overflow\\\");\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: a.mantissa + b.mantissa});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: a.mantissa + b.mantissa});\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint c) {\\n        unchecked {\\n            require((c = a + b ) >= a, errorMessage);\\n        }\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: a.mantissa - b.mantissa});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: a.mantissa - b.mantissa});\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint c) {\\n        unchecked {\\n            require((c = a - b) <= a, errorMessage);\\n        }\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: (a.mantissa * b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: a.mantissa * b});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return (a * b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: (a.mantissa * b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: a.mantissa * b});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return (a * b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint c) {\\n        unchecked {\\n            require(a == 0 || (c = a * b) / a == b, errorMessage);\\n        }\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: (a.mantissa * expScale) / b.mantissa});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: a.mantissa / b});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return (a * expScale) / b.mantissa;\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: (a.mantissa * doubleScale) / b.mantissa});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: a.mantissa / b});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return (a * doubleScale) / b.mantissa;\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: (a * doubleScale) / b});\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/chainlink/PriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../otokens/interfaces/IOToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a oToken asset\\n      * @param oToken The oToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(IOToken oToken) external virtual view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/otokens/interfaces/IEIP20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IEIP20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/otokens/interfaces/IEIP20NonStandard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IEIP20NonStandard\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface IEIP20NonStandard {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/otokens/interfaces/IOToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../interfaces/IComptroller.sol\\\";\\nimport \\\"../../interest-rate-models/interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./IEIP20NonStandard.sol\\\";\\nimport \\\"./IEIP20.sol\\\";\\n\\ninterface IOToken is IEIP20{\\n    /**\\n     * @notice Indicator that this is a OToken contract (for inspection)\\n     */\\n    function isOToken() external view returns(bool);\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address oTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(IInterestRateModel oldInterestRateModel, IInterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the protocol seize share is changed\\n     */\\n    event NewProtocolSeizeShare(uint oldProtocolSeizeShareMantissa, uint newProtocolSeizeShareMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    function accrualBlockTimestamp() external returns(uint256);\\n\\n    /*** User Interface ***/\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerTimestamp() external view returns (uint);\\n    function supplyRatePerTimestamp() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() external returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens, uint dynamicLiquidationIncentive) external returns (uint);\\n\\n    function totalBorrows() external view returns(uint);\\n    function comptroller() external view returns(IComptroller);\\n    function borrowIndex() external view returns(uint);\\n    function reserveFactorMantissa() external view returns(uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(IComptroller newComptroller) external returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel) external returns (uint);\\n    function _setProtocolSeizeShare(uint newProtocolSeizeShareMantissa) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/vote-escrow/interfaces/IBoostManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBoostManager {\\n    function updateBoostBasis(address user)\\n        external\\n        returns (bool);\\n\\n    function updateBoostSupplyBalances(\\n        address market,\\n        address user,\\n        uint256 oldBalance,\\n        uint256 newBalance\\n    ) external;\\n\\n    function updateBoostBorrowBalances(\\n        address market,\\n        address user,\\n        uint256 oldBalance,\\n        uint256 newBalance\\n    ) external;\\n\\n    function boostedSupplyBalanceOf(address market, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function boostedBorrowBalanceOf(address market, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function boostedTotalSupply(address market) external view returns (uint256);\\n\\n    function boostedTotalBorrows(address market)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setAuthorized(address addr, bool flag) external;\\n\\n    function setVeOVIX(IERC20 ve) external;\\n\\n    function isAuthorized(address addr) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPausedGlobally\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ContributorRewardSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"RewardBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"RewardSupplySpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VixClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VixGranted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IUnitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardSpeed\",\"type\":\"uint256\"}],\"name\":\"_setContributorRewardSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken[]\",\"name\":\"oTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setRedeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setRepayPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setRewardSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_autoCollaterize\",\"type\":\"bool\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostManager\",\"outputs\":[{\"internalType\":\"contract IBoostManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract IOToken[]\",\"name\":\"oTokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract IOToken[]\",\"name\":\"oTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract IOToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract IOToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVixAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOToken\",\"name\":\"oToken\",\"type\":\"address\"}],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"}],\"name\":\"isMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastContributorTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicLiquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoCollaterize\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardContributorSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardReceivable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAutoCollaterize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBoostManager\",\"type\":\"address\"}],\"name\":\"setBoostManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setProtocolPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardUpdater\",\"type\":\"address\"}],\"name\":\"setRewardUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVixAddress\",\"type\":\"address\"}],\"name\":\"setVixAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"updateAndDistributeBorrowerRewardsForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateAndDistributeSupplierRewardsForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"updateContributorRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vixAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Comptroller", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}