{"SourceCode": "// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(\r\n    uint64 subId\r\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n// File: contracts/dev/goldenTicketRWAWhiteListToChainLink.sol\r\n\r\n\r\n// An example of a consumer contract that also owns and manages the subscription\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * Request testnet LINK and ETH here: https://faucets.chain.link/\r\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\r\n */\r\n\r\n/**\r\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\r\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\r\n * DO NOT USE THIS CODE IN PRODUCTION.\r\n */\r\ncontract goldenTicketRWAWhiteListToChainLink is VRFConsumerBaseV2 {\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    LinkTokenInterface LINKTOKEN;\r\n\r\n    // Sepolia coordinator. For other networks,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address vrfCoordinator = 0xAE975071Be8F8eE67addBC1A82488F1C24858067;\r\n                            \r\n    // Sepolia LINK token contract. For other networks, see\r\n    // https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address link_token_contract = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\r\n\r\n    // The gas lane to use, which specifies the maximum gas price to bump to.\r\n    // For a list of available gas lanes on each network,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    bytes32 keyHash =\r\n        0xd729dc84e21ae57ffb6be0053bf2b0668aa2aaf300a2a7b2ddf7dc0bb6e875a8;\r\n\r\n    // A reasonable default is 100000, but this value could be different\r\n    // on other networks.\r\n    uint32 callbackGasLimit = 2500000;\r\n\r\n    // The default is 3, but you can set this higher.\r\n    uint16 requestConfirmations = 3;\r\n\r\n    // For this example, retrieve 2 random values in one request.\r\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\r\n    uint32 numWords = 30;\r\n\r\n    // Storage parameters\r\n    uint256[] public s_randomWords;\r\n    uint256[] public one_randomWords_valule;\r\n    uint256[] public two_randomWords_valule;\r\n    uint256[] public three_randomWords_valule;\r\n    uint256[] public four_randomWords_valule;\r\n    uint256[] public five_randomWords_valule;\r\n    uint256 public s_requestId;\r\n    uint256 public  randomNumbers_end_scope;\r\n    uint64 public s_subscriptionId;\r\n    address s_owner;\r\n\r\n    \r\n\r\n    mapping(uint256 => bool) private oneFilterElements;\r\n    mapping(uint256 => bool) private twoFilterElements;\r\n    mapping(uint256 => bool) private threeFilterElements;\r\n    mapping(uint256 => bool) private fourFilterElements;\r\n    mapping(uint256 => bool) private fiveFilterElements;\r\n\r\n\r\n\r\n    constructor() VRFConsumerBaseV2(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        LINKTOKEN = LinkTokenInterface(link_token_contract);\r\n        s_owner = msg.sender;\r\n        //Create a new subscription when you deploy the contract.\r\n        createNewSubscription();\r\n        randomNumbers_end_scope = 1;\r\n    }\r\n\r\n    // Assumes the subscription is funded sufficiently.\r\n    function requestRandomWords() external onlyOwner {\r\n        // Will revert if subscription is not set and funded.\r\n        s_requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n\r\n\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 /* requestId */,\r\n        uint256[] memory randomWords\r\n    ) internal override {\r\n       \r\n        uint256 length = randomWords.length;\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n\r\n            uint256 index_value = (randomWords[i] % 3000 ) + randomNumbers_end_scope;\r\n           \r\n            if (randomNumbers_end_scope == 1) {\r\n                handleRandomWord(oneFilterElements, one_randomWords_valule, index_value);\r\n            } else if (randomNumbers_end_scope == 3001) {\r\n                handleRandomWord(twoFilterElements, two_randomWords_valule, index_value);\r\n            } else if (randomNumbers_end_scope == 6001) {\r\n                handleRandomWord(threeFilterElements, three_randomWords_valule, index_value);\r\n            } else if (randomNumbers_end_scope == 9001) {\r\n                handleRandomWord(fourFilterElements, four_randomWords_valule, index_value);\r\n            } else if (randomNumbers_end_scope == 12001) {\r\n                handleRandomWord(fiveFilterElements, five_randomWords_valule, index_value);\r\n            }\r\n        }\r\n       \r\n    }\r\n\r\n    function handleRandomWord(mapping(uint256 => bool) storage filterElements,uint256[] storage randomWordsValue,uint256 indexValue) private  {\r\n        if (!filterElements[indexValue]) {\r\n            randomWordsValue.push(indexValue);\r\n            filterElements[indexValue] = true;\r\n        }\r\n}\r\n\r\n    // Create a new subscription when the contract is initially deployed.\r\n    function createNewSubscription() private onlyOwner {\r\n        s_subscriptionId = COORDINATOR.createSubscription();\r\n        // Add this contract as a consumer of its own subscription.\r\n        COORDINATOR.addConsumer(s_subscriptionId, address(this));\r\n    }\r\n\r\n    // Assumes this contract owns link.\r\n    // 1000000000000000000 = 1 LINK\r\n    function topUpSubscription(uint256 amount) external onlyOwner {\r\n        LINKTOKEN.transferAndCall(\r\n            address(COORDINATOR),\r\n            amount,\r\n            abi.encode(s_subscriptionId)\r\n        );\r\n    }\r\n\r\n    function addConsumer(address consumerAddress) external onlyOwner {\r\n        // Add a consumer contract to the subscription.\r\n        COORDINATOR.addConsumer(s_subscriptionId, consumerAddress);\r\n    }\r\n\r\n    function removeConsumer(address consumerAddress) external onlyOwner {\r\n        // Remove a consumer contract from the subscription.\r\n        COORDINATOR.removeConsumer(s_subscriptionId, consumerAddress);\r\n    }\r\n\r\n    function cancelSubscription(address receivingWallet) external onlyOwner {\r\n        // Cancel the subscription and send the remaining LINK to a wallet address.\r\n        COORDINATOR.cancelSubscription(s_subscriptionId, receivingWallet);\r\n        s_subscriptionId = 0;\r\n    }\r\n\r\n    // Transfer this contract's funds to an address.\r\n    // 1000000000000000000 = 1 LINK\r\n    function withdraw(uint256 amount, address to) external onlyOwner {\r\n        LINKTOKEN.transfer(to, amount);\r\n    }\r\n\r\n        function getModRequestStatus(uint256[] storage randomWordsArray, uint256 indexStart, uint256 indexEnd) private  view returns (uint256[] memory randomWords) {\r\n        uint256 length = randomWordsArray.length;\r\n        uint256 newArraysLength = indexEnd - indexStart;\r\n        uint256[] memory randomNumbers = new uint256[](newArraysLength);\r\n        require(newArraysLength > 0, \"Illegal entry\");\r\n        require(indexStart < length, \"Illegal entry\");\r\n        require(indexEnd < length, \"Illegal entry\");\r\n        \r\n        for (uint i = indexStart; i < indexEnd; i++) {\r\n            randomNumbers[i] = randomWordsArray[i];\r\n        }\r\n        return randomNumbers; \r\n    }\r\n\r\n    function getOneModRequestStatus(uint256 indexStart, uint256 indexEnd) external view returns (uint256[] memory randomWords) {\r\n        return getModRequestStatus(one_randomWords_valule, indexStart, indexEnd);\r\n    }\r\n\r\n    function getTwoModRequestStatus(uint256 indexStart, uint256 indexEnd) external view returns (uint256[] memory randomWords) {\r\n        return getModRequestStatus(two_randomWords_valule, indexStart, indexEnd);\r\n    }\r\n\r\n    function getThreeModRequestStatus(uint256 indexStart, uint256 indexEnd) external view returns (uint256[] memory randomWords) {\r\n        return getModRequestStatus(three_randomWords_valule, indexStart, indexEnd);\r\n    }\r\n\r\n    function getFourModRequestStatus(uint256 indexStart, uint256 indexEnd) external view returns (uint256[] memory randomWords) {\r\n        return getModRequestStatus(four_randomWords_valule, indexStart, indexEnd);\r\n    }\r\n\r\n    function getFiveModRequestStatus(uint256 indexStart, uint256 indexEnd) external view returns (uint256[] memory randomWords) {\r\n        return getModRequestStatus(five_randomWords_valule, indexStart, indexEnd);\r\n    }\r\n\r\n    \r\n    function getOneRequestStatus()external view returns ( uint256[] memory randomWords) {\r\n        \r\n        return one_randomWords_valule;\r\n            \r\n    }\r\n\r\n        function getTwoRequestStatus()external view returns ( uint256[] memory randomWords) {\r\n        \r\n        return two_randomWords_valule;\r\n            \r\n    }\r\n\r\n        function getThreeRequestStatus()external view returns ( uint256[] memory randomWords) {\r\n        \r\n        return three_randomWords_valule;\r\n            \r\n    }\r\n\r\n        function getFourRequestStatus()external view returns ( uint256[] memory randomWords) {\r\n        \r\n        return four_randomWords_valule;\r\n            \r\n    }\r\n\r\n        function getFiveRequestStatus()external view returns ( uint256[] memory randomWords) {\r\n        \r\n        return five_randomWords_valule;\r\n            \r\n    }\r\n\r\n\r\n    function setCallbackGasLimit(uint32 _callbackGasLimit) public  onlyOwner{\r\n        callbackGasLimit = _callbackGasLimit;\r\n    }\r\n\r\n    function setNumWords(uint32 _numWords) public onlyOwner{\r\n        numWords = _numWords;\r\n    }\r\n\r\n    \r\n\r\n    function getOneRandomWordsLength() public  view returns (uint256){\r\n        return  one_randomWords_valule.length;\r\n    }\r\n\r\n    function getTwoRandomWordsLength() public  view returns (uint256){\r\n        return  two_randomWords_valule.length;\r\n    }\r\n\r\n    function getThreeRandomWordsLength() public  view returns (uint256){\r\n        return  three_randomWords_valule.length;\r\n    }\r\n\r\n    function getFourRandomWordsLength() public  view returns (uint256){\r\n        return  four_randomWords_valule.length;\r\n    }\r\n\r\n    function getFiveRandomWordsLength() public  view returns (uint256){\r\n        return  five_randomWords_valule.length;\r\n    }\r\n\r\n    //1\uff0c3001\uff0c6001\uff0c9001\uff0c12001\r\n    function setRandomNumbersScope(uint256 _endScope) public  onlyOwner{\r\n        \r\n        randomNumbers_end_scope = _endScope;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == s_owner);\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivingWallet\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"five_randomWords_valule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"four_randomWords_valule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexEnd\",\"type\":\"uint256\"}],\"name\":\"getFiveModRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFiveRandomWordsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFiveRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexEnd\",\"type\":\"uint256\"}],\"name\":\"getFourModRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFourRandomWordsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFourRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexEnd\",\"type\":\"uint256\"}],\"name\":\"getOneModRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOneRandomWordsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOneRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexEnd\",\"type\":\"uint256\"}],\"name\":\"getThreeModRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreeRandomWordsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreeRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexEnd\",\"type\":\"uint256\"}],\"name\":\"getTwoModRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTwoRandomWordsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTwoRequestStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"one_randomWords_valule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumbers_end_scope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"}],\"name\":\"setNumWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endScope\",\"type\":\"uint256\"}],\"name\":\"setRandomNumbersScope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"three_randomWords_valule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"two_randomWords_valule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "goldenTicketRWAWhiteListToChainLink", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e53be1ef3e91bab459719158eaabd6c9120729f3c224c68abda631d61f9f203"}