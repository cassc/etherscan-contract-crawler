{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Claimables/Crowdfunding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IManagers.sol\\\";\\nimport {TokenReward, ICrowdfunding} from \\\"../interfaces/ICrowdfunding.sol\\\";\\n\\ncontract Crowdfunding is ERC165Storage, Ownable {\\n    using SafeERC20 for IERC20;\\n    //Structs\\n    struct Investor {\\n        uint256 totalAmount;\\n        uint256 vestingCount;\\n        uint256 currentVestingIndex;\\n        uint256 blacklistDate;\\n    }\\n\\n    //State Variables\\n    IManagers private immutable managers;\\n    IERC20 public immutable soulsToken;\\n\\n    uint256 public immutable totalCap;\\n    uint256 public totalRewardAmount;\\n    uint256 public totalClaimedAmount;\\n    uint256 public freeBalance;\\n    address[] public investorList;\\n\\n    string public crowdfundingType;\\n\\n    mapping(address => TokenReward[]) public tokenRewards;\\n    mapping(address => Investor) public investors;\\n\\n    // Custom Errors\\n    error AddressIsBlacklisted(address rewardOwner);\\n    error InvestorAlreadyAdded(address rewardOwner);\\n    error VestingIndexShouldBeEqualToCurrentVestingIndex();\\n    error ReleaseDateIsBeforeAdvanceReleaseDate();\\n    error AdvanceReleaseDateIsInThePast();\\n    error TotalRewardExceedsTotalCap();\\n    error TotalCapCannotBeZero();\\n    error RewardOwnerNotFound();\\n    error InvalidVestingIndex();\\n    error RewardIsDeactivated();\\n    error AlreadyBlacklisted();\\n    error AlreadyDeactive();\\n    error AlreadyClaimed();\\n    error NotBlacklisted();\\n    error AlreadyActive();\\n    error OnlyManagers();\\n    error EarlyRequest();\\n    error ZeroAddress();\\n    error InvalidData();\\n\\n    //Events\\n    event AddRewards(\\n        address manager,\\n        address[] rewardOwners,\\n        uint256[] advanceAmountPerAddress,\\n        uint256[] totalOfVestings,\\n        uint256 vestingCount,\\n        uint256 advanceReleaseDate,\\n        uint256 vestingStartDate,\\n        address tokenHolder,\\n        bool isApproved\\n    );\\n    event DeactivateVesting(\\n        address manager,\\n        address rewardOwner,\\n        uint8[] vestingIndexes,\\n        string description,\\n        bool isApproved\\n    );\\n    event ActivateVesting(\\n        address manager,\\n        address rewardOwner,\\n        uint8[] vestingIndexes,\\n        string description,\\n        bool isApproved\\n    );\\n    event AddToBlacklist(address manager, address rewardOwner, string description, bool isApproved);\\n    event RemoveFromBlacklist(address manager, address rewardOwner, string description, bool isApproved);\\n\\n    event Claim(address rewardOwner, uint256 vestingIndex, uint256 amount);\\n\\n    constructor(\\n        string memory _CrowdfundingType,\\n        uint256 _totalCap,\\n        address _soulsTokenAddress,\\n        address _managersAddress\\n    ) {\\n        if (_totalCap == 0) {\\n            revert TotalCapCannotBeZero();\\n        }\\n        if (_soulsTokenAddress == address(0) || _managersAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        crowdfundingType = _CrowdfundingType;\\n        soulsToken = IERC20(_soulsTokenAddress);\\n        managers = IManagers(_managersAddress);\\n        totalCap = _totalCap;\\n        _registerInterface(type(ICrowdfunding).interfaceId);\\n    }\\n\\n    //Modifiers\\n    modifier ifNotBlacklisted(uint256 _time) {\\n        if (isInBlacklist(msg.sender, _time)) {\\n            revert AddressIsBlacklisted(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!managers.isManager(msg.sender)) {\\n            revert OnlyManagers();\\n        }\\n        _;\\n    }\\n\\n    //Write functions\\n\\n    //Managers function\\n    function addRewards(\\n        address[] memory _rewardOwners,\\n        uint256[] memory _advanceAmountPerAddress,\\n        uint256[] memory _totalOfVestings, //excluding advance amount\\n        uint256 _vestingCount, // excluding advance payment\\n        uint256 _advanceReleaseDate,\\n        uint256 _vestingStartDate,\\n        address _crowdfundingVault\\n    ) external onlyManager {\\n        if (_crowdfundingVault == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (\\n            _rewardOwners.length != _advanceAmountPerAddress.length || _rewardOwners.length != _totalOfVestings.length\\n        ) {\\n            revert InvalidData();\\n        }\\n\\n        if (_advanceReleaseDate < block.timestamp) {\\n            revert AdvanceReleaseDateIsInThePast();\\n        }\\n        if (_vestingCount > 0 && _vestingStartDate <= _advanceReleaseDate) {\\n            revert ReleaseDateIsBeforeAdvanceReleaseDate();\\n        }\\n\\n        uint256 _totalAmount = 0;\\n\\n        for (uint256 r = 0; r < _rewardOwners.length; r++) {\\n            address _rewardOwner = _rewardOwners[r];\\n            if (investors[_rewardOwner].totalAmount > 0) {\\n                revert InvestorAlreadyAdded(_rewardOwner);\\n            }\\n            if (isInBlacklist(_rewardOwner, block.timestamp)) {\\n                revert AddressIsBlacklisted(_rewardOwner);\\n            }\\n            uint256 _investorTotalAmount = _advanceAmountPerAddress[r] + _totalOfVestings[r];\\n            _totalAmount += _investorTotalAmount;\\n        }\\n\\n        if (totalRewardAmount + _totalAmount > totalCap) {\\n            revert TotalRewardExceedsTotalCap();\\n        }\\n\\n        string memory _title = \\\"Add New Rewards\\\";\\n        bytes memory _encodedValues = abi.encode(\\n            _rewardOwners,\\n            _advanceAmountPerAddress,\\n            _totalOfVestings,\\n            _vestingCount,\\n            _advanceReleaseDate,\\n            _vestingStartDate,\\n            _crowdfundingVault\\n        );\\n\\n        managers.approveTopic(_title, _encodedValues);\\n        bool _isApproved = managers.isApproved(_title, _encodedValues);\\n        if (_isApproved) {\\n            _addRewards(\\n                _rewardOwners,\\n                _advanceAmountPerAddress,\\n                _totalOfVestings,\\n                _vestingCount,\\n                _advanceReleaseDate,\\n                _vestingStartDate,\\n                _crowdfundingVault\\n            );\\n\\n            managers.deleteTopic(_title);\\n        }\\n        emit AddRewards(\\n            msg.sender,\\n            _rewardOwners,\\n            _advanceAmountPerAddress,\\n            _totalOfVestings,\\n            _vestingCount,\\n            _advanceReleaseDate,\\n            _vestingStartDate,\\n            _crowdfundingVault,\\n            _isApproved\\n        );\\n    }\\n\\n    function _addRewards(\\n        address[] memory _rewardOwners,\\n        uint256[] memory _advanceAmountPerAddress,\\n        uint256[] memory _totalOfVestings, //excluding advance amount\\n        uint256 _vestingCount, // excluding advance payment\\n        uint256 _advanceReleaseDate,\\n        uint256 _vestingStartDate,\\n        address _crowdfundingVault\\n    ) private {\\n        uint256 _totalAmount = 0;\\n        for (uint256 r = 0; r < _rewardOwners.length; r++) {\\n            address _rewardOwner = _rewardOwners[r];\\n            uint256 _advanceAmount = _advanceAmountPerAddress[r];\\n            uint256 _investorTotalAmount = _advanceAmount;\\n            if (investors[_rewardOwner].totalAmount > 0) {\\n                revert InvestorAlreadyAdded(_rewardOwner);\\n            }\\n            if (_advanceAmount > 0) {\\n                tokenRewards[_rewardOwner].push(\\n                    TokenReward({\\n                        amount: _advanceAmount,\\n                        releaseDate: _advanceReleaseDate,\\n                        isClaimed: false,\\n                        isActive: true\\n                    })\\n                );\\n            }\\n\\n            for (uint256 i = 0; i < _vestingCount; i++) {\\n                uint256 _vestingAmount;\\n                if (i == _vestingCount - 1) {\\n                    _vestingAmount = (_advanceAmount + _totalOfVestings[r]) - _investorTotalAmount;\\n                } else {\\n                    _vestingAmount = _totalOfVestings[r] / _vestingCount;\\n                }\\n                tokenRewards[_rewardOwner].push(\\n                    TokenReward({\\n                        amount: _vestingAmount,\\n                        releaseDate: _vestingStartDate + (30 days * i),\\n                        isClaimed: false,\\n                        isActive: true\\n                    })\\n                );\\n                _investorTotalAmount += _vestingAmount;\\n            }\\n            _totalAmount += _investorTotalAmount;\\n\\n            investors[_rewardOwner] = Investor({\\n                totalAmount: _investorTotalAmount,\\n                vestingCount: _advanceAmount > 0 ? (_vestingCount + 1) : _vestingCount,\\n                currentVestingIndex: 0,\\n                blacklistDate: 0\\n            });\\n            investorList.push(_rewardOwner);\\n        }\\n\\n        totalRewardAmount += _totalAmount;\\n        if (freeBalance < _totalAmount) {\\n            soulsToken.safeTransferFrom(_crowdfundingVault, address(this), _totalAmount - freeBalance);\\n            freeBalance = 0;\\n        } else {\\n            //No need to transfer additional tokens\\n            freeBalance -= _totalAmount;\\n        }\\n    }\\n\\n    //Managers Function\\n    function deactivateInvestorVesting(\\n        address _rewardOwner,\\n        uint8[] calldata _vestingIndexes,\\n        string calldata _description\\n    ) external onlyManager {\\n        if (_rewardOwner == address(0)) revert ZeroAddress();\\n        if (tokenRewards[_rewardOwner].length == 0) revert RewardOwnerNotFound();\\n\\n        string memory _vestingsToDeactivate;\\n        for (uint256 i = 0; i < _vestingIndexes.length; i++) {\\n            if (_vestingIndexes[i] >= investors[_rewardOwner].vestingCount) revert InvalidVestingIndex();\\n            if (tokenRewards[_rewardOwner][_vestingIndexes[i]].isClaimed) revert AlreadyClaimed();\\n            if (!tokenRewards[_rewardOwner][_vestingIndexes[i]].isActive) revert AlreadyDeactive();\\n\\n            _vestingsToDeactivate = string.concat(_vestingsToDeactivate, Strings.toString(_vestingIndexes[i]));\\n            if (i < _vestingIndexes.length - 1) {\\n                _vestingsToDeactivate = string.concat(_vestingsToDeactivate, \\\", \\\");\\n            }\\n        }\\n\\n        string memory _title = string.concat(\\n            \\\"Deactivate Investor (\\\",\\n            Strings.toHexString(_rewardOwner),\\n            \\\") Vesting (\\\",\\n            _vestingsToDeactivate,\\n            \\\")\\\"\\n        );\\n        bytes memory _encodedValues = abi.encode(_rewardOwner, _vestingIndexes, _description);\\n\\n        managers.approveTopic(_title, _encodedValues);\\n        bool _isApproved = managers.isApproved(_title, _encodedValues);\\n        if (_isApproved) {\\n            uint256 _totalAmountToDeactivate;\\n            for (uint256 i = 0; i < _vestingIndexes.length; i++) {\\n                tokenRewards[_rewardOwner][_vestingIndexes[i]].isActive = false;\\n                _totalAmountToDeactivate += tokenRewards[_rewardOwner][_vestingIndexes[i]].amount;\\n            }\\n            freeBalance += _totalAmountToDeactivate;\\n            // soulsToken.safeTransfer(crowdfundingVault, _totalAmountToDeactivate);\\n            totalRewardAmount -= _totalAmountToDeactivate;\\n\\n            managers.deleteTopic(_title);\\n        }\\n        emit DeactivateVesting(msg.sender, _rewardOwner, _vestingIndexes, _description, _isApproved);\\n    }\\n\\n    //Managers Function\\n    function activateInvestorVesting(\\n        address _rewardOwner,\\n        uint8[] calldata _vestingIndexes,\\n        address _tokenSource,\\n        string calldata _description\\n    ) external onlyManager {\\n        if (_rewardOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (tokenRewards[_rewardOwner].length == 0) {\\n            revert RewardOwnerNotFound();\\n        }\\n\\n        string memory _vestingsToActivate;\\n        for (uint256 i = 0; i < _vestingIndexes.length; i++) {\\n            if (_vestingIndexes[i] >= investors[_rewardOwner].vestingCount) {\\n                revert InvalidVestingIndex();\\n            }\\n            if (tokenRewards[_rewardOwner][_vestingIndexes[i]].isActive) {\\n                revert AlreadyActive();\\n            }\\n            _vestingsToActivate = string.concat(_vestingsToActivate, Strings.toString(_vestingIndexes[i]));\\n            if (i < _vestingIndexes.length - 1) {\\n                _vestingsToActivate = string.concat(_vestingsToActivate, \\\", \\\");\\n            }\\n        }\\n\\n        string memory _title = string.concat(\\n            \\\"Activate Investor (\\\",\\n            Strings.toHexString(_rewardOwner),\\n            \\\") Vesting (\\\",\\n            _vestingsToActivate,\\n            \\\")\\\"\\n        );\\n\\n        bytes memory _encodedValues = abi.encode(_rewardOwner, _vestingIndexes, _description);\\n\\n        managers.approveTopic(_title, _encodedValues);\\n        bool _isApproved = managers.isApproved(_title, _encodedValues);\\n        if (_isApproved) {\\n            uint256 _totalAmountToActivate;\\n            for (uint256 i = 0; i < _vestingIndexes.length; i++) {\\n                tokenRewards[_rewardOwner][_vestingIndexes[i]].isActive = true;\\n                _totalAmountToActivate += tokenRewards[_rewardOwner][_vestingIndexes[i]].amount;\\n            }\\n            if (freeBalance >= _totalAmountToActivate) {\\n                freeBalance -= _totalAmountToActivate;\\n            } else {\\n                soulsToken.safeTransferFrom(_tokenSource, address(this), _totalAmountToActivate - freeBalance);\\n            }\\n\\n            totalRewardAmount += _totalAmountToActivate;\\n\\n            managers.deleteTopic(_title);\\n        }\\n        emit ActivateVesting(msg.sender, _rewardOwner, _vestingIndexes, _description, _isApproved);\\n    }\\n\\n    //Managers Function\\n    function addToBlacklist(address _rewardOwner, string calldata _description) external onlyManager {\\n        if (_rewardOwner == address(0)) revert ZeroAddress();\\n        if (tokenRewards[_rewardOwner].length == 0) revert RewardOwnerNotFound();\\n        if (isInBlacklist(_rewardOwner, block.timestamp)) revert AlreadyBlacklisted();\\n\\n        string memory _title = string.concat(\\\"Add To Blacklist (\\\", Strings.toHexString(_rewardOwner), \\\")\\\");\\n\\n        bytes memory _encodedValues = abi.encode(_rewardOwner, _description);\\n\\n        managers.approveTopic(_title, _encodedValues);\\n        bool _isApproved = managers.isApproved(_title, _encodedValues);\\n        if (_isApproved) {\\n            uint256 _remainingAmount = 0;\\n            uint256 _totalRewardAmount = totalRewardAmount;\\n            for (uint256 i = 0; i < tokenRewards[_rewardOwner].length; i++) {\\n                if (tokenRewards[_rewardOwner][i].releaseDate > block.timestamp) {\\n                    _remainingAmount += tokenRewards[_rewardOwner][i].amount;\\n                    _totalRewardAmount -= tokenRewards[_rewardOwner][i].amount;\\n                }\\n            }\\n            totalRewardAmount = _totalRewardAmount;\\n            freeBalance += _remainingAmount;\\n            investors[_rewardOwner].blacklistDate = block.timestamp;\\n            managers.deleteTopic(_title);\\n        }\\n        emit AddToBlacklist(msg.sender, _rewardOwner, _description, _isApproved);\\n    }\\n\\n    //Managers Function\\n    function removeFromBlacklist(\\n        address _rewardOwner,\\n        address _tokenSource,\\n        string calldata _description\\n    ) external onlyManager {\\n        if (_rewardOwner == address(0)) revert ZeroAddress();\\n        if (!isInBlacklist(_rewardOwner, block.timestamp)) revert NotBlacklisted();\\n\\n        string memory _title = string.concat(\\\"Remove From Blacklist (\\\", Strings.toHexString(_rewardOwner), \\\")\\\");\\n        bytes memory _encodedValues = abi.encode(_rewardOwner, _description);\\n        managers.approveTopic(_title, _encodedValues);\\n        bool _isApproved = managers.isApproved(_title, _encodedValues);\\n        if (_isApproved) {\\n            uint256 _requiredAmount;\\n            uint256 _totalRewardAmount = totalRewardAmount;\\n            for (uint256 i = 0; i < tokenRewards[_rewardOwner].length; i++) {\\n                if (tokenRewards[_rewardOwner][i].releaseDate > investors[_rewardOwner].blacklistDate) {\\n                    _requiredAmount += tokenRewards[_rewardOwner][i].amount;\\n                    _totalRewardAmount += tokenRewards[_rewardOwner][i].amount;\\n                }\\n            }\\n            totalRewardAmount = _totalRewardAmount;\\n            if (freeBalance >= _requiredAmount) {\\n                freeBalance -= _requiredAmount;\\n            } else {\\n                soulsToken.safeTransferFrom(_tokenSource, address(this), _requiredAmount - freeBalance);\\n            }\\n            investors[_rewardOwner].blacklistDate = 0;\\n            managers.deleteTopic(_title);\\n        }\\n        emit RemoveFromBlacklist(msg.sender, _rewardOwner, _description, _isApproved);\\n    }\\n\\n    function claimTokens(\\n        uint8 _vestingIndex\\n    ) public ifNotBlacklisted(tokenRewards[msg.sender][_vestingIndex].releaseDate) {\\n        if (_vestingIndex != investors[msg.sender].currentVestingIndex) {\\n            revert VestingIndexShouldBeEqualToCurrentVestingIndex();\\n        }\\n        if (tokenRewards[msg.sender][_vestingIndex].releaseDate > block.timestamp) {\\n            revert EarlyRequest();\\n        }\\n\\n        if (tokenRewards[msg.sender][_vestingIndex].isClaimed) {\\n            revert AlreadyClaimed();\\n        }\\n        if (!tokenRewards[msg.sender][_vestingIndex].isActive) {\\n            revert RewardIsDeactivated();\\n        }\\n        tokenRewards[msg.sender][_vestingIndex].isClaimed = true;\\n        investors[msg.sender].currentVestingIndex++;\\n        totalClaimedAmount += tokenRewards[msg.sender][_vestingIndex].amount;\\n        soulsToken.safeTransfer(msg.sender, tokenRewards[msg.sender][_vestingIndex].amount);\\n        emit Claim(msg.sender, _vestingIndex, tokenRewards[msg.sender][_vestingIndex].amount);\\n    }\\n\\n    //Read Functions\\n    function getAllVestingInfoForAccount(address _rewardOwner) public view returns (TokenReward[] memory) {\\n        return tokenRewards[_rewardOwner];\\n    }\\n\\n    function getVestingInfoForAccount(\\n        address _rewardOwner,\\n        uint8 _vestingIndex\\n    ) public view returns (TokenReward memory) {\\n        return tokenRewards[_rewardOwner][_vestingIndex];\\n    }\\n\\n    function getInvestorList() public view returns (address[] memory) {\\n        return investorList;\\n    }\\n\\n    function isInBlacklist(address _address, uint256 _time) public view returns (bool) {\\n        return investors[_address].blacklistDate != 0 && investors[_address].blacklistDate < _time;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrowdfunding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nstruct TokenReward {\\n    uint256 amount;\\n    uint256 releaseDate;\\n    bool isClaimed;\\n    bool isActive;\\n}\\n\\ninterface ICrowdfunding {\\n    function addRewards(\\n        address[] memory _rewardOwners,\\n        uint256[] memory _advancePayments,\\n        uint256[] memory _amountsPerVesting,\\n        uint8[] memory _numberOfVestings,\\n        uint256 _releaseDate,\\n        address _tokenHolder\\n    ) external;\\n\\n    function claimTokens(uint8 _vestingIndex) external;\\n\\n    function deactivateInvestorVesting(\\n        address _rewardOwner,\\n        uint8 _vestingIndex,\\n        address _tokenReceiver\\n    ) external;\\n\\n    function activateInvestorVesting(\\n        address _rewardOwner,\\n        uint8 _vestingIndex,\\n        address _tokenSource\\n    ) external;\\n\\n    function addToBlacklist(address _rewardOwner, address _tokenReceiver) external;\\n\\n    function removeFromBlacklist(address _rewardOwner, address _tokenSource) external;\\n\\n    function fetchRewardsInfo(uint8 _vestingIndex) external view returns (TokenReward memory);\\n\\n    function fetchRewardsInfoForAccount(address _rewardOwner, uint8 _vestingIndex)\\n        external\\n        view\\n        returns (TokenReward memory);\\n\\n    function isInBlacklist(address _address, uint256 _time) external view returns (bool);\\n\\n    function getTotalBalance() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IManagers {\\n    function isManager(address _address) external view returns (bool);\\n\\n    function approveTopic(string memory _title, bytes memory _encodedValues) external;\\n\\n    function cancelTopicApproval(string memory _title) external;\\n\\n    function deleteTopic(string memory _title) external;\\n\\n    function isApproved(string memory _title, bytes memory _value) external view returns (bool);\\n\\n    function changeManager1(address _newAddress) external;\\n\\n    function changeManager2(address _newAddress) external;\\n\\n    function changeManager3(address _newAddress) external;\\n\\n    function changeManager4(address _newAddress) external;\\n\\n    function changeManager5(address _newAddress) external;\\n\\n    function isTrustedSource(address _address) external view returns (bool);\\n\\n    function addAddressToTrustedSources(address _address, string memory _name) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CrowdfundingType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_soulsTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managersAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"}],\"name\":\"AddressIsBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdvanceReleaseDateIsInThePast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyDeactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EarlyRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"}],\"name\":\"InvestorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleaseDateIsBeforeAdvanceReleaseDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsDeactivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardOwnerNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalCapCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalRewardExceedsTotalCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingIndexShouldBeEqualToCurrentVestingIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"vestingIndexes\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ActivateVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"advanceAmountPerAddress\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalOfVestings\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"advanceReleaseDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingStartDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"AddToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"vestingIndexes\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"DeactivateVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"RemoveFromBlacklist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_vestingIndexes\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"_tokenSource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"activateInvestorVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_advanceAmountPerAddress\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalOfVestings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_advanceReleaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_crowdfundingVault\",\"type\":\"address\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vestingIndex\",\"type\":\"uint8\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdfundingType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_vestingIndexes\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"deactivateInvestorVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"}],\"name\":\"getAllVestingInfoForAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct TokenReward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_vestingIndex\",\"type\":\"uint8\"}],\"name\":\"getVestingInfoForAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct TokenReward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentVestingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"isInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Crowdfunding", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000adb53acfa41aee12000000000000000000000000000000efcfece12a99d1dbbf6f3264ee97f8c045e97f1f0000000000000000000000006de4e34dcab7ac63453581ef9e615beac72969eb0000000000000000000000000000000000000000000000000000000000000011536565642053616c652046756e64696e67000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}