{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PredictionMarketV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\n// openzeppelin imports\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CeilDiv {\\n  // calculates ceil(x/y)\\n  function ceildiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n    if (x > 0) return ((x - 1) / y) + 1;\\n    return x / y;\\n  }\\n}\\n\\ninterface IRealityETH_ERC20 {\\n  function askQuestionERC20(\\n    uint256 template_id,\\n    string calldata question,\\n    address arbitrator,\\n    uint32 timeout,\\n    uint32 opening_ts,\\n    uint256 nonce,\\n    uint256 tokens\\n  ) external returns (bytes32);\\n\\n  function claimMultipleAndWithdrawBalance(\\n    bytes32[] calldata question_ids,\\n    uint256[] calldata lengths,\\n    bytes32[] calldata hist_hashes,\\n    address[] calldata addrs,\\n    uint256[] calldata bonds,\\n    bytes32[] calldata answers\\n  ) external;\\n\\n  function claimWinnings(\\n    bytes32 question_id,\\n    bytes32[] calldata history_hashes,\\n    address[] calldata addrs,\\n    uint256[] calldata bonds,\\n    bytes32[] calldata answers\\n  ) external;\\n\\n  function notifyOfArbitrationRequest(\\n    bytes32 question_id,\\n    address requester,\\n    uint256 max_previous\\n  ) external;\\n\\n  function submitAnswerERC20(\\n    bytes32 question_id,\\n    bytes32 answer,\\n    uint256 max_previous,\\n    uint256 tokens\\n  ) external;\\n\\n  function questions(bytes32)\\n    external\\n    view\\n    returns (\\n      bytes32 content_hash,\\n      address arbitrator,\\n      uint32 opening_ts,\\n      uint32 timeout,\\n      uint32 finalize_ts,\\n      bool is_pending_arbitration,\\n      uint256 bounty,\\n      bytes32 best_answer,\\n      bytes32 history_hash,\\n      uint256 bond,\\n      uint256 min_bond\\n    );\\n\\n  function resultFor(bytes32 question_id) external view returns (bytes32);\\n}\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\\n/// @title Market Contract Factory\\ncontract PredictionMarketV2 is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using CeilDiv for uint256;\\n\\n  // ------ Events ------\\n\\n  event MarketCreated(\\n    address indexed user,\\n    uint256 indexed marketId,\\n    uint256 outcomes,\\n    string question,\\n    string image,\\n    IERC20 token\\n  );\\n\\n  event MarketActionTx(\\n    address indexed user,\\n    MarketAction indexed action,\\n    uint256 indexed marketId,\\n    uint256 outcomeId,\\n    uint256 shares,\\n    uint256 value,\\n    uint256 timestamp\\n  );\\n\\n  event MarketOutcomeShares(uint256 indexed marketId, uint256 timestamp, uint256[] outcomeShares, uint256 liquidity);\\n\\n  event MarketOutcomePrice(uint256 indexed marketId, uint256 indexed outcomeId, uint256 value, uint256 timestamp);\\n\\n  event MarketLiquidity(\\n    uint256 indexed marketId,\\n    uint256 value, // total liquidity\\n    uint256 price, // value of one liquidity share; max: 1 (even odds situation)\\n    uint256 timestamp\\n  );\\n\\n  event MarketResolved(address indexed user, uint256 indexed marketId, uint256 outcomeId, uint256 timestamp);\\n\\n  // ------ Events End ------\\n\\n  uint256 public constant MAX_UINT_256 = type(uint256).max;\\n\\n  uint256 public constant ONE = 10**18;\\n\\n  uint256 public constant MAX_OUTCOMES = 2**5;\\n\\n  uint256 public constant MAX_FEE = 5 * 10**16; // 5%\\n\\n  enum MarketState {\\n    open,\\n    closed,\\n    resolved\\n  }\\n  enum MarketAction {\\n    buy,\\n    sell,\\n    addLiquidity,\\n    removeLiquidity,\\n    claimWinnings,\\n    claimLiquidity,\\n    claimFees,\\n    claimVoided\\n  }\\n\\n  struct Market {\\n    // market details\\n    uint256 closesAtTimestamp;\\n    uint256 balance; // total stake\\n    uint256 liquidity; // stake held\\n    uint256 sharesAvailable; // shares held (all outcomes)\\n    mapping(address => uint256) liquidityShares;\\n    mapping(address => bool) liquidityClaims; // wether user has claimed liquidity earnings\\n    MarketState state; // resolution variables\\n    MarketResolution resolution; // fees\\n    MarketFees fees;\\n    // market outcomes\\n    uint256 outcomeCount;\\n    mapping(uint256 => MarketOutcome) outcomes;\\n    IERC20 token; // ERC20 token market will use for trading\\n  }\\n\\n  struct MarketFees {\\n    uint256 fee; // fee % taken from every transaction\\n    uint256 poolWeight; // internal var used to ensure pro-rate fee distribution\\n    mapping(address => uint256) claimed;\\n    address treasury; // address to send treasury fees to\\n    uint256 treasuryFee; // fee % taken from every transaction to a treasury address\\n  }\\n\\n  struct MarketResolution {\\n    bool resolved;\\n    uint256 outcomeId;\\n    bytes32 questionId; // realitio questionId\\n  }\\n\\n  struct MarketOutcome {\\n    uint256 marketId;\\n    uint256 id;\\n    Shares shares;\\n  }\\n\\n  struct Shares {\\n    uint256 total; // number of shares\\n    uint256 available; // available shares\\n    mapping(address => uint256) holders;\\n    mapping(address => bool) claims; // wether user has claimed winnings\\n    mapping(address => bool) voidedClaims; // wether user has claimed voided market shares\\n  }\\n\\n  struct CreateMarketDescription {\\n    uint256 value;\\n    uint256 closesAt;\\n    uint256 outcomes;\\n    IERC20 token;\\n    uint256[] distribution;\\n    string question;\\n    string image;\\n    address arbitrator;\\n    uint256 fee;\\n    uint256 treasuryFee;\\n    address treasury;\\n  }\\n\\n  uint256[] marketIds;\\n  mapping(uint256 => Market) markets;\\n  uint256 public marketIndex;\\n\\n  // realitio configs\\n  address public immutable realitioAddress;\\n  uint256 public immutable realitioTimeout;\\n  // market creation\\n  IERC20 public immutable requiredBalanceToken; // token used for rewards / market creation\\n  uint256 public immutable requiredBalance; // required balance for market creation\\n  // weth configs\\n  IWETH public immutable WETH;\\n\\n  // ------ Modifiers ------\\n\\n  modifier isMarket(uint256 marketId) {\\n    require(marketId < marketIndex, \\\"Market not found\\\");\\n    _;\\n  }\\n\\n  modifier timeTransitions(uint256 marketId) {\\n    if (block.timestamp > markets[marketId].closesAtTimestamp && markets[marketId].state == MarketState.open) {\\n      nextState(marketId);\\n    }\\n    _;\\n  }\\n\\n  modifier atState(uint256 marketId, MarketState state) {\\n    require(markets[marketId].state == state, \\\"Market in incorrect state\\\");\\n    _;\\n  }\\n\\n  modifier notAtState(uint256 marketId, MarketState state) {\\n    require(markets[marketId].state != state, \\\"Market in incorrect state\\\");\\n    _;\\n  }\\n\\n  modifier transitionNext(uint256 marketId) {\\n    _;\\n    nextState(marketId);\\n  }\\n\\n  modifier mustHoldRequiredBalance() {\\n    require(\\n      requiredBalance == 0 || requiredBalanceToken.balanceOf(msg.sender) >= requiredBalance,\\n      \\\"minimum erc20 balance not held\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier isWETHMarket(uint256 marketId) {\\n    require(address(WETH) != address(0), \\\"WETH address is address 0\\\");\\n    require(address(markets[marketId].token) == address(WETH), \\\"Market token is not WETH\\\");\\n    _;\\n  }\\n\\n  // ------ Modifiers End ------\\n\\n  /// @dev protocol is immutable and has no ownership\\n  constructor(\\n    IERC20 _requiredBalanceToken,\\n    uint256 _requiredBalance,\\n    address _realitioAddress,\\n    uint256 _realitioTimeout,\\n    IWETH _WETH\\n  ) {\\n    require(_realitioAddress != address(0), \\\"_realitioAddress is address 0\\\");\\n    require(_realitioTimeout > 0, \\\"timeout must be positive\\\");\\n\\n    requiredBalanceToken = _requiredBalanceToken;\\n    requiredBalance = _requiredBalance;\\n    realitioAddress = _realitioAddress;\\n    realitioTimeout = _realitioTimeout;\\n    WETH = _WETH;\\n  }\\n\\n  receive() external payable {\\n    assert(msg.sender == address(WETH)); // only accept ETH via fallback from the WETH contract\\n  }\\n\\n  // ------ Core Functions ------\\n\\n  /// @dev Creates a market, initializes the outcome shares pool and submits a question in Realitio\\n  function _createMarket(CreateMarketDescription memory desc) private mustHoldRequiredBalance returns (uint256) {\\n    uint256 marketId = marketIndex;\\n    marketIds.push(marketId);\\n\\n    Market storage market = markets[marketId];\\n\\n    require(desc.value > 0, \\\"stake needs to be > 0\\\");\\n    require(desc.closesAt > block.timestamp, \\\"resolution before current date\\\");\\n    require(desc.arbitrator != address(0), \\\"invalid arbitrator address\\\");\\n    require(desc.outcomes > 0 && desc.outcomes <= MAX_OUTCOMES, \\\"outcome count not between 1-32\\\");\\n    require(desc.fee <= MAX_FEE, \\\"fee must be <= 5%\\\");\\n    require(desc.treasuryFee <= MAX_FEE, \\\"treasury fee must be <= 5%\\\");\\n\\n    market.token = desc.token;\\n    market.closesAtTimestamp = desc.closesAt;\\n    market.state = MarketState.open;\\n    market.fees.fee = desc.fee;\\n    market.fees.treasuryFee = desc.treasuryFee;\\n    market.fees.treasury = desc.treasury;\\n    // setting intial value to an integer that does not map to any outcomeId\\n    market.resolution.outcomeId = MAX_UINT_256;\\n    market.outcomeCount = desc.outcomes;\\n\\n    // creating question in realitio\\n    market.resolution.questionId = IRealityETH_ERC20(realitioAddress).askQuestionERC20(\\n      2,\\n      desc.question,\\n      desc.arbitrator,\\n      uint32(realitioTimeout),\\n      uint32(desc.closesAt),\\n      0,\\n      0\\n    );\\n\\n    _addLiquidity(marketId, desc.value, desc.distribution);\\n\\n    // emiting initial price events\\n    emitMarketActionEvents(marketId);\\n    emit MarketCreated(msg.sender, marketId, desc.outcomes, desc.question, desc.image, desc.token);\\n\\n    // incrementing market array index\\n    marketIndex = marketIndex + 1;\\n\\n    return marketId;\\n  }\\n\\n  function createMarket(CreateMarketDescription calldata desc) external returns (uint256) {\\n    uint256 marketId = _createMarket(\\n      CreateMarketDescription({\\n        value: desc.value,\\n        closesAt: desc.closesAt,\\n        outcomes: desc.outcomes,\\n        token: desc.token,\\n        distribution: desc.distribution,\\n        question: desc.question,\\n        image: desc.image,\\n        arbitrator: desc.arbitrator,\\n        fee: desc.fee,\\n        treasuryFee: desc.treasuryFee,\\n        treasury: desc.treasury\\n      })\\n    );\\n    // transferring funds\\n    desc.token.safeTransferFrom(msg.sender, address(this), desc.value);\\n\\n    return marketId;\\n  }\\n\\n  function createMarketWithETH(CreateMarketDescription calldata desc) external payable returns (uint256) {\\n    require(address(desc.token) == address(WETH), \\\"Market token is not WETH\\\");\\n    require(msg.value == desc.value, \\\"value does not match arguments\\\");\\n    uint256 marketId = _createMarket(\\n      CreateMarketDescription({\\n        value: desc.value,\\n        closesAt: desc.closesAt,\\n        outcomes: desc.outcomes,\\n        token: desc.token,\\n        distribution: desc.distribution,\\n        question: desc.question,\\n        image: desc.image,\\n        arbitrator: desc.arbitrator,\\n        fee: desc.fee,\\n        treasuryFee: desc.treasuryFee,\\n        treasury: desc.treasury\\n      })\\n    );\\n    // transferring funds\\n    IWETH(WETH).deposit{value: msg.value}();\\n\\n    return marketId;\\n  }\\n\\n  /// @dev Calculates the number of shares bought with \\\"amount\\\" balance\\n  function calcBuyAmount(\\n    uint256 amount,\\n    uint256 marketId,\\n    uint256 outcomeId\\n  ) public view returns (uint256) {\\n    uint256[] memory outcomesShares = getMarketOutcomesShares(marketId);\\n    uint256 fee = getMarketFee(marketId);\\n    uint256 amountMinusFees = amount - ((amount * fee) / ONE);\\n    uint256 buyTokenPoolBalance = outcomesShares[outcomeId];\\n    uint256 endingOutcomeBalance = buyTokenPoolBalance * ONE;\\n    for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n      if (i != outcomeId) {\\n        uint256 outcomeShares = outcomesShares[i];\\n        endingOutcomeBalance = (endingOutcomeBalance * outcomeShares).ceildiv(outcomeShares + amountMinusFees);\\n      }\\n    }\\n    require(endingOutcomeBalance > 0, \\\"must have non-zero balances\\\");\\n\\n    return buyTokenPoolBalance + amountMinusFees - (endingOutcomeBalance.ceildiv(ONE));\\n  }\\n\\n  /// @dev Calculates the number of shares needed to be sold in order to receive \\\"amount\\\" in balance\\n  function calcSellAmount(\\n    uint256 amount,\\n    uint256 marketId,\\n    uint256 outcomeId\\n  ) public view returns (uint256 outcomeTokenSellAmount) {\\n    uint256[] memory outcomesShares = getMarketOutcomesShares(marketId);\\n    uint256 fee = getMarketFee(marketId);\\n    uint256 amountPlusFees = (amount * ONE) / (ONE - fee);\\n    uint256 sellTokenPoolBalance = outcomesShares[outcomeId];\\n    uint256 endingOutcomeBalance = sellTokenPoolBalance * ONE;\\n    for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n      if (i != outcomeId) {\\n        uint256 outcomeShares = outcomesShares[i];\\n        endingOutcomeBalance = (endingOutcomeBalance * outcomeShares).ceildiv(outcomeShares - amountPlusFees);\\n      }\\n    }\\n    require(endingOutcomeBalance > 0, \\\"must have non-zero balances\\\");\\n\\n    return amountPlusFees + endingOutcomeBalance.ceildiv(ONE) - sellTokenPoolBalance;\\n  }\\n\\n  /// @dev Buy shares of a market outcome\\n  function _buy(\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 minOutcomeSharesToBuy,\\n    uint256 value\\n  ) private timeTransitions(marketId) atState(marketId, MarketState.open) {\\n    Market storage market = markets[marketId];\\n\\n    uint256 shares = calcBuyAmount(value, marketId, outcomeId);\\n    require(shares >= minOutcomeSharesToBuy, \\\"minimum buy amount not reached\\\");\\n    require(shares > 0, \\\"shares amount is 0\\\");\\n\\n    // subtracting fee from transaction value\\n    uint256 feeAmount = (value * market.fees.fee) / ONE;\\n    market.fees.poolWeight = market.fees.poolWeight + feeAmount;\\n    uint256 valueMinusFees = value - feeAmount;\\n\\n    uint256 treasuryFeeAmount = (value * market.fees.treasuryFee) / ONE;\\n    valueMinusFees = valueMinusFees - treasuryFeeAmount;\\n\\n    MarketOutcome storage outcome = market.outcomes[outcomeId];\\n\\n    // Funding market shares with received funds\\n    addSharesToMarket(marketId, valueMinusFees);\\n\\n    require(outcome.shares.available >= shares, \\\"shares pool balance is too low\\\");\\n\\n    transferOutcomeSharesfromPool(msg.sender, marketId, outcomeId, shares);\\n\\n    emit MarketActionTx(msg.sender, MarketAction.buy, marketId, outcomeId, shares, value, block.timestamp);\\n    emitMarketActionEvents(marketId);\\n\\n    // transfering treasury fee to treasury address\\n    if (treasuryFeeAmount > 0) {\\n      market.token.safeTransfer(market.fees.treasury, treasuryFeeAmount);\\n    }\\n  }\\n\\n  /// @dev Buy shares of a market outcome\\n  function buy(\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 minOutcomeSharesToBuy,\\n    uint256 value\\n  ) external nonReentrant {\\n    Market storage market = markets[marketId];\\n    market.token.safeTransferFrom(msg.sender, address(this), value);\\n    _buy(marketId, outcomeId, minOutcomeSharesToBuy, value);\\n  }\\n\\n  function buyWithETH(\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 minOutcomeSharesToBuy\\n  ) external payable isWETHMarket(marketId) nonReentrant {\\n    uint256 value = msg.value;\\n    // wrapping and depositing funds\\n    IWETH(WETH).deposit{value: value}();\\n    _buy(marketId, outcomeId, minOutcomeSharesToBuy, value);\\n  }\\n\\n  /// @dev Sell shares of a market outcome\\n  function _sell(\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 value,\\n    uint256 maxOutcomeSharesToSell\\n  ) private timeTransitions(marketId) atState(marketId, MarketState.open) {\\n    Market storage market = markets[marketId];\\n    MarketOutcome storage outcome = market.outcomes[outcomeId];\\n\\n    uint256 shares = calcSellAmount(value, marketId, outcomeId);\\n\\n    require(shares <= maxOutcomeSharesToSell, \\\"maximum sell amount exceeded\\\");\\n    require(shares > 0, \\\"shares amount is 0\\\");\\n    require(outcome.shares.holders[msg.sender] >= shares, \\\"insufficient shares balance\\\");\\n\\n    transferOutcomeSharesToPool(msg.sender, marketId, outcomeId, shares);\\n\\n    // adding fees to transaction value\\n    uint256 fee = getMarketFee(marketId);\\n    {\\n      uint256 feeAmount = (value * market.fees.fee) / (ONE - fee);\\n      market.fees.poolWeight = market.fees.poolWeight + feeAmount;\\n    }\\n    uint256 valuePlusFees = value + (value * fee) / (ONE - fee);\\n\\n    require(market.balance >= valuePlusFees, \\\"insufficient market balance\\\");\\n\\n    // Rebalancing market shares\\n    removeSharesFromMarket(marketId, valuePlusFees);\\n\\n    emit MarketActionTx(msg.sender, MarketAction.sell, marketId, outcomeId, shares, value, block.timestamp);\\n    emitMarketActionEvents(marketId);\\n\\n    {\\n      uint256 treasuryFeeAmount = (value * market.fees.treasuryFee) / (ONE - fee);\\n      // transfering treasury fee to treasury address\\n      if (treasuryFeeAmount > 0) {\\n        market.token.safeTransfer(market.fees.treasury, treasuryFeeAmount);\\n      }\\n    }\\n  }\\n\\n  function sell(\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 value,\\n    uint256 maxOutcomeSharesToSell\\n  ) external nonReentrant {\\n    _sell(marketId, outcomeId, value, maxOutcomeSharesToSell);\\n    // Transferring funds to user\\n    Market storage market = markets[marketId];\\n    market.token.safeTransfer(msg.sender, value);\\n  }\\n\\n  function sellToETH(\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 value,\\n    uint256 maxOutcomeSharesToSell\\n  ) external isWETHMarket(marketId) nonReentrant {\\n    Market storage market = markets[marketId];\\n    require(address(market.token) == address(WETH), \\\"market token is not WETH\\\");\\n\\n    _sell(marketId, outcomeId, value, maxOutcomeSharesToSell);\\n\\n    IWETH(WETH).withdraw(value);\\n    (bool sent, ) = payable(msg.sender).call{value: value}(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /// @dev Adds liquidity to a market - external\\n  function _addLiquidity(\\n    uint256 marketId,\\n    uint256 value,\\n    uint256[] memory distribution\\n  ) private timeTransitions(marketId) atState(marketId, MarketState.open) {\\n    Market storage market = markets[marketId];\\n\\n    require(value > 0, \\\"stake has to be greater than 0.\\\");\\n\\n    uint256 liquidityAmount;\\n\\n    uint256[] memory outcomesShares = getMarketOutcomesShares(marketId);\\n    uint256[] memory sendBackAmounts = new uint256[](outcomesShares.length);\\n    uint256 poolWeight = 0;\\n\\n    if (market.liquidity > 0) {\\n      require(distribution.length == 0, \\\"market already funded\\\");\\n\\n      // part of the liquidity is exchanged for outcome shares if market is not balanced\\n      for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n        uint256 outcomeShares = outcomesShares[i];\\n        if (poolWeight < outcomeShares) poolWeight = outcomeShares;\\n      }\\n\\n      for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n        uint256 remaining = (value * outcomesShares[i]) / poolWeight;\\n        sendBackAmounts[i] = value - remaining;\\n      }\\n\\n      liquidityAmount = (value * market.liquidity) / poolWeight;\\n\\n      // re-balancing fees pool\\n      rebalanceFeesPool(marketId, liquidityAmount, MarketAction.addLiquidity);\\n    } else {\\n      // funding market with no liquidity\\n      if (distribution.length > 0) {\\n        require(distribution.length == outcomesShares.length, \\\"distribution length not matching\\\");\\n\\n        uint256 maxHint = 0;\\n        for (uint256 i = 0; i < distribution.length; ++i) {\\n          uint256 hint = distribution[i];\\n          if (maxHint < hint) maxHint = hint;\\n        }\\n\\n        for (uint256 i = 0; i < distribution.length; ++i) {\\n          uint256 remaining = (value * distribution[i]) / maxHint;\\n          require(remaining > 0, \\\"must hint a valid distribution\\\");\\n          sendBackAmounts[i] = value - remaining;\\n        }\\n      }\\n\\n      // funding market with total liquidity amount\\n      liquidityAmount = value;\\n    }\\n\\n    // funding market\\n    market.liquidity = market.liquidity + liquidityAmount;\\n    market.liquidityShares[msg.sender] = market.liquidityShares[msg.sender] + liquidityAmount;\\n\\n    addSharesToMarket(marketId, value);\\n\\n    {\\n      // transform sendBackAmounts to array of amounts added\\n      for (uint256 i = 0; i < sendBackAmounts.length; ++i) {\\n        if (sendBackAmounts[i] > 0) {\\n          transferOutcomeSharesfromPool(msg.sender, marketId, i, sendBackAmounts[i]);\\n        }\\n      }\\n\\n      // emitting events, using outcome 0 for price reference\\n      uint256 referencePrice = getMarketOutcomePrice(marketId, 0);\\n\\n      for (uint256 i = 0; i < sendBackAmounts.length; ++i) {\\n        if (sendBackAmounts[i] > 0) {\\n          // outcome price = outcome shares / reference outcome shares * reference outcome price\\n          uint256 outcomePrice = (referencePrice * market.outcomes[0].shares.available) /\\n            market.outcomes[i].shares.available;\\n\\n          emit MarketActionTx(\\n            msg.sender,\\n            MarketAction.buy,\\n            marketId,\\n            i,\\n            sendBackAmounts[i],\\n            (sendBackAmounts[i] * outcomePrice) / ONE, // price * shares\\n            block.timestamp\\n          );\\n        }\\n      }\\n    }\\n\\n    uint256 liquidityPrice = getMarketLiquidityPrice(marketId);\\n    uint256 liquidityValue = (liquidityPrice * liquidityAmount) / ONE;\\n\\n    emit MarketActionTx(\\n      msg.sender,\\n      MarketAction.addLiquidity,\\n      marketId,\\n      0,\\n      liquidityAmount,\\n      liquidityValue,\\n      block.timestamp\\n    );\\n    emit MarketLiquidity(marketId, market.liquidity, liquidityPrice, block.timestamp);\\n  }\\n\\n  function addLiquidity(uint256 marketId, uint256 value) external {\\n    uint256[] memory distribution = new uint256[](0);\\n    _addLiquidity(marketId, value, distribution);\\n\\n    Market storage market = markets[marketId];\\n    market.token.safeTransferFrom(msg.sender, address(this), value);\\n  }\\n\\n  function addLiquidityWithETH(uint256 marketId) external payable isWETHMarket(marketId) {\\n    uint256 value = msg.value;\\n    uint256[] memory distribution = new uint256[](0);\\n    _addLiquidity(marketId, value, distribution);\\n    // wrapping and depositing funds\\n    IWETH(WETH).deposit{value: value}();\\n  }\\n\\n  /// @dev Removes liquidity to a market - external\\n  function _removeLiquidity(uint256 marketId, uint256 shares)\\n    private\\n    timeTransitions(marketId)\\n    atState(marketId, MarketState.open)\\n    returns (uint256)\\n  {\\n    Market storage market = markets[marketId];\\n\\n    require(market.liquidityShares[msg.sender] >= shares, \\\"insufficient shares balance\\\");\\n    // claiming any pending fees\\n    claimFees(marketId);\\n\\n    // re-balancing fees pool\\n    rebalanceFeesPool(marketId, shares, MarketAction.removeLiquidity);\\n\\n    uint256[] memory outcomesShares = getMarketOutcomesShares(marketId);\\n    uint256[] memory sendAmounts = new uint256[](outcomesShares.length);\\n    uint256 poolWeight = MAX_UINT_256;\\n\\n    // part of the liquidity is exchanged for outcome shares if market is not balanced\\n    for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n      uint256 outcomeShares = outcomesShares[i];\\n      if (poolWeight > outcomeShares) poolWeight = outcomeShares;\\n    }\\n\\n    uint256 liquidityAmount = (shares * poolWeight) / market.liquidity;\\n\\n    for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n      sendAmounts[i] = (outcomesShares[i] * shares) / market.liquidity;\\n      sendAmounts[i] = sendAmounts[i] - liquidityAmount;\\n    }\\n\\n    // removing liquidity from market\\n    removeSharesFromMarket(marketId, liquidityAmount);\\n    market.liquidity = market.liquidity - shares;\\n    // removing liquidity tokens from market creator\\n    market.liquidityShares[msg.sender] = market.liquidityShares[msg.sender] - shares;\\n\\n    for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n      if (sendAmounts[i] > 0) {\\n        transferOutcomeSharesfromPool(msg.sender, marketId, i, sendAmounts[i]);\\n      }\\n    }\\n\\n    // emitting events, using outcome 0 for price reference\\n    uint256 referencePrice = getMarketOutcomePrice(marketId, 0);\\n\\n    for (uint256 i = 0; i < outcomesShares.length; ++i) {\\n      if (sendAmounts[i] > 0) {\\n        // outcome price = outcome shares / reference outcome shares * reference outcome price\\n        uint256 outcomePrice = (referencePrice * market.outcomes[0].shares.available) /\\n          market.outcomes[i].shares.available;\\n\\n        emit MarketActionTx(\\n          msg.sender,\\n          MarketAction.buy,\\n          marketId,\\n          i,\\n          sendAmounts[i],\\n          (sendAmounts[i] * outcomePrice) / ONE, // price * shares\\n          block.timestamp\\n        );\\n      }\\n    }\\n\\n    emit MarketActionTx(\\n      msg.sender,\\n      MarketAction.removeLiquidity,\\n      marketId,\\n      0,\\n      shares,\\n      liquidityAmount,\\n      block.timestamp\\n    );\\n    emit MarketLiquidity(marketId, market.liquidity, getMarketLiquidityPrice(marketId), block.timestamp);\\n\\n    return liquidityAmount;\\n  }\\n\\n  function removeLiquidity(uint256 marketId, uint256 shares) external {\\n    uint256 value = _removeLiquidity(marketId, shares);\\n    // transferring user funds from liquidity removed\\n    Market storage market = markets[marketId];\\n    market.token.safeTransfer(msg.sender, value);\\n  }\\n\\n  function removeLiquidityToETH(uint256 marketId, uint256 shares) external isWETHMarket(marketId) {\\n    uint256 value = _removeLiquidity(marketId, shares);\\n    // unwrapping and transferring user funds from liquidity removed\\n    IWETH(WETH).withdraw(value);\\n    (bool sent, ) = payable(msg.sender).call{value: value}(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /// @dev Fetches winning outcome from Realitio and resolves the market\\n  function resolveMarketOutcome(uint256 marketId)\\n    external\\n    timeTransitions(marketId)\\n    atState(marketId, MarketState.closed)\\n    transitionNext(marketId)\\n    returns (uint256)\\n  {\\n    Market storage market = markets[marketId];\\n\\n    // will fail if question is not finalized\\n    uint256 outcomeId = uint256(IRealityETH_ERC20(realitioAddress).resultFor(market.resolution.questionId));\\n\\n    market.resolution.outcomeId = outcomeId;\\n\\n    emit MarketResolved(msg.sender, marketId, outcomeId, block.timestamp);\\n    emitMarketActionEvents(marketId);\\n\\n    return market.resolution.outcomeId;\\n  }\\n\\n  /// @dev Allows holders of resolved outcome shares to claim earnings.\\n  function _claimWinnings(uint256 marketId) private atState(marketId, MarketState.resolved) returns (uint256) {\\n    Market storage market = markets[marketId];\\n    MarketOutcome storage resolvedOutcome = market.outcomes[market.resolution.outcomeId];\\n\\n    require(resolvedOutcome.shares.holders[msg.sender] > 0, \\\"user doesn't hold outcome shares\\\");\\n    require(resolvedOutcome.shares.claims[msg.sender] == false, \\\"user already claimed winnings\\\");\\n\\n    // 1 share => price = 1\\n    uint256 value = resolvedOutcome.shares.holders[msg.sender];\\n\\n    // assuring market has enough funds\\n    require(market.balance >= value, \\\"insufficient market balance\\\");\\n\\n    market.balance = market.balance - value;\\n    resolvedOutcome.shares.claims[msg.sender] = true;\\n\\n    emit MarketActionTx(\\n      msg.sender,\\n      MarketAction.claimWinnings,\\n      marketId,\\n      market.resolution.outcomeId,\\n      resolvedOutcome.shares.holders[msg.sender],\\n      value,\\n      block.timestamp\\n    );\\n\\n    return value;\\n  }\\n\\n  function claimWinnings(uint256 marketId) external {\\n    uint256 value = _claimWinnings(marketId);\\n    // transferring user funds from winnings claimed\\n    Market storage market = markets[marketId];\\n    market.token.safeTransfer(msg.sender, value);\\n  }\\n\\n  function claimWinningsToETH(uint256 marketId) external isWETHMarket(marketId) {\\n    uint256 value = _claimWinnings(marketId);\\n    // unwrapping and transferring user funds from winnings claimed\\n    IWETH(WETH).withdraw(value);\\n    (bool sent, ) = payable(msg.sender).call{value: value}(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /// @dev Allows holders of voided outcome shares to claim balance back.\\n  function _claimVoidedOutcomeShares(uint256 marketId, uint256 outcomeId)\\n    private\\n    atState(marketId, MarketState.resolved)\\n    returns (uint256)\\n  {\\n    Market storage market = markets[marketId];\\n    MarketOutcome storage outcome = market.outcomes[outcomeId];\\n\\n    require(isMarketVoided(marketId), \\\"market is not voided\\\");\\n    require(outcome.shares.holders[msg.sender] > 0, \\\"user doesn't hold outcome shares\\\");\\n    require(outcome.shares.voidedClaims[msg.sender] == false, \\\"user already claimed shares\\\");\\n\\n    // voided market - shares are valued at last market price\\n    uint256 price = getMarketOutcomePrice(marketId, outcomeId);\\n    uint256 value = (price * outcome.shares.holders[msg.sender]) / ONE;\\n\\n    // assuring market has enough funds\\n    require(market.balance >= value, \\\"insufficient market balance\\\");\\n\\n    market.balance = market.balance - value;\\n    outcome.shares.voidedClaims[msg.sender] = true;\\n\\n    emit MarketActionTx(\\n      msg.sender,\\n      MarketAction.claimVoided,\\n      marketId,\\n      outcomeId,\\n      outcome.shares.holders[msg.sender],\\n      value,\\n      block.timestamp\\n    );\\n\\n    return value;\\n  }\\n\\n  function claimVoidedOutcomeShares(uint256 marketId, uint256 outcomeId) external {\\n    uint256 value = _claimVoidedOutcomeShares(marketId, outcomeId);\\n    // transferring user funds from voided outcome shares claimed\\n    Market storage market = markets[marketId];\\n    market.token.safeTransfer(msg.sender, value);\\n  }\\n\\n  function claimVoidedOutcomeSharesToETH(uint256 marketId, uint256 outcomeId) external isWETHMarket(marketId) {\\n    uint256 value = _claimVoidedOutcomeShares(marketId, outcomeId);\\n    // unwrapping and transferring user funds from voided outcome shares claimed\\n    IWETH(WETH).withdraw(value);\\n    (bool sent, ) = payable(msg.sender).call{value: value}(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /// @dev Allows liquidity providers to claim earnings from liquidity providing.\\n  function _claimLiquidity(uint256 marketId) private atState(marketId, MarketState.resolved) returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    // claiming any pending fees\\n    claimFees(marketId);\\n\\n    require(market.liquidityShares[msg.sender] > 0, \\\"user doesn't hold shares\\\");\\n    require(market.liquidityClaims[msg.sender] == false, \\\"user already claimed shares\\\");\\n\\n    // value = total resolved outcome pool shares * pool share (%)\\n    uint256 liquidityPrice = getMarketLiquidityPrice(marketId);\\n    uint256 value = (liquidityPrice * market.liquidityShares[msg.sender]) / ONE;\\n\\n    // assuring market has enough funds\\n    require(market.balance >= value, \\\"insufficient market balance\\\");\\n\\n    market.balance = market.balance - value;\\n    market.liquidityClaims[msg.sender] = true;\\n\\n    emit MarketActionTx(\\n      msg.sender,\\n      MarketAction.claimLiquidity,\\n      marketId,\\n      0,\\n      market.liquidityShares[msg.sender],\\n      value,\\n      block.timestamp\\n    );\\n\\n    return value;\\n  }\\n\\n  function claimLiquidity(uint256 marketId) external {\\n    uint256 value = _claimLiquidity(marketId);\\n    // transferring user funds from liquidity claimed\\n    Market storage market = markets[marketId];\\n    market.token.safeTransfer(msg.sender, value);\\n  }\\n\\n  function claimLiquidityToETH(uint256 marketId) external isWETHMarket(marketId) {\\n    uint256 value = _claimLiquidity(marketId);\\n    // unwrapping and transferring user funds from liquidity claimed\\n    IWETH(WETH).withdraw(value);\\n    (bool sent, ) = payable(msg.sender).call{value: value}(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /// @dev Allows liquidity providers to claim their fees share from fees pool\\n  function _claimFees(uint256 marketId) private returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    uint256 claimableFees = getUserClaimableFees(marketId, msg.sender);\\n\\n    if (claimableFees > 0) {\\n      market.fees.claimed[msg.sender] = market.fees.claimed[msg.sender] + claimableFees;\\n    }\\n\\n    emit MarketActionTx(\\n      msg.sender,\\n      MarketAction.claimFees,\\n      marketId,\\n      0,\\n      market.liquidityShares[msg.sender],\\n      claimableFees,\\n      block.timestamp\\n    );\\n\\n    return claimableFees;\\n  }\\n\\n  function claimFees(uint256 marketId) public nonReentrant {\\n    uint256 value = _claimFees(marketId);\\n    // transferring user funds from fees claimed\\n    Market storage market = markets[marketId];\\n    market.token.safeTransfer(msg.sender, value);\\n  }\\n\\n  function claimFeesToETH(uint256 marketId) public isWETHMarket(marketId) nonReentrant {\\n    uint256 value = _claimFees(marketId);\\n    // unwrapping and transferring user funds from fees claimed\\n    IWETH(WETH).withdraw(value);\\n    (bool sent, ) = payable(msg.sender).call{value: value}(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /// @dev Rebalances the fees pool. Needed in every AddLiquidity / RemoveLiquidity call\\n  function rebalanceFeesPool(\\n    uint256 marketId,\\n    uint256 liquidityShares,\\n    MarketAction action\\n  ) private {\\n    Market storage market = markets[marketId];\\n\\n    uint256 poolWeight = (liquidityShares * market.fees.poolWeight) / market.liquidity;\\n\\n    if (action == MarketAction.addLiquidity) {\\n      market.fees.poolWeight = market.fees.poolWeight + poolWeight;\\n      market.fees.claimed[msg.sender] = market.fees.claimed[msg.sender] + poolWeight;\\n    } else {\\n      market.fees.poolWeight = market.fees.poolWeight - poolWeight;\\n      market.fees.claimed[msg.sender] = market.fees.claimed[msg.sender] - poolWeight;\\n    }\\n  }\\n\\n  /// @dev Transitions market to next state\\n  function nextState(uint256 marketId) private {\\n    Market storage market = markets[marketId];\\n    market.state = MarketState(uint256(market.state) + 1);\\n  }\\n\\n  /// @dev Emits a outcome price event for every outcome\\n  function emitMarketActionEvents(uint256 marketId) private {\\n    Market storage market = markets[marketId];\\n    uint256[] memory outcomeShares = new uint256[](market.outcomeCount);\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      outcomeShares[i] = market.outcomes[i].shares.available;\\n    }\\n\\n    emit MarketOutcomeShares(marketId, block.timestamp, outcomeShares, market.liquidity);\\n  }\\n\\n  /// @dev Adds outcome shares to shares pool\\n  function addSharesToMarket(uint256 marketId, uint256 shares) private {\\n    Market storage market = markets[marketId];\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      MarketOutcome storage outcome = market.outcomes[i];\\n\\n      outcome.shares.available = outcome.shares.available + shares;\\n      outcome.shares.total = outcome.shares.total + shares;\\n\\n      // only adding to market total shares, the available remains\\n      market.sharesAvailable = market.sharesAvailable + shares;\\n    }\\n\\n    market.balance = market.balance + shares;\\n  }\\n\\n  /// @dev Removes outcome shares from shares pool\\n  function removeSharesFromMarket(uint256 marketId, uint256 shares) private {\\n    Market storage market = markets[marketId];\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      MarketOutcome storage outcome = market.outcomes[i];\\n\\n      outcome.shares.available = outcome.shares.available - shares;\\n      outcome.shares.total = outcome.shares.total - shares;\\n\\n      // only subtracting from market total shares, the available remains\\n      market.sharesAvailable = market.sharesAvailable - shares;\\n    }\\n\\n    market.balance = market.balance - shares;\\n  }\\n\\n  /// @dev Transfer outcome shares from pool to user balance\\n  function transferOutcomeSharesfromPool(\\n    address user,\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 shares\\n  ) private {\\n    Market storage market = markets[marketId];\\n    MarketOutcome storage outcome = market.outcomes[outcomeId];\\n\\n    // transfering shares from shares pool to user\\n    outcome.shares.holders[user] = outcome.shares.holders[user] + shares;\\n    outcome.shares.available = outcome.shares.available - shares;\\n    market.sharesAvailable = market.sharesAvailable - shares;\\n  }\\n\\n  /// @dev Transfer outcome shares from user balance back to pool\\n  function transferOutcomeSharesToPool(\\n    address user,\\n    uint256 marketId,\\n    uint256 outcomeId,\\n    uint256 shares\\n  ) private {\\n    Market storage market = markets[marketId];\\n    MarketOutcome storage outcome = market.outcomes[outcomeId];\\n\\n    // adding shares back to pool\\n    outcome.shares.holders[user] = outcome.shares.holders[user] - shares;\\n    outcome.shares.available = outcome.shares.available + shares;\\n    market.sharesAvailable = market.sharesAvailable + shares;\\n  }\\n\\n  // ------ Core Functions End ------\\n\\n  // ------ Getters ------\\n\\n  function getUserMarketShares(uint256 marketId, address user) external view returns (uint256, uint256[] memory) {\\n    Market storage market = markets[marketId];\\n    uint256[] memory outcomeShares = new uint256[](market.outcomeCount);\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      outcomeShares[i] = market.outcomes[i].shares.holders[user];\\n    }\\n\\n    return (market.liquidityShares[user], outcomeShares);\\n  }\\n\\n  function getUserClaimStatus(uint256 marketId, address user)\\n    external\\n    view\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      uint256\\n    )\\n  {\\n    Market storage market = markets[marketId];\\n\\n    // market still not resolved\\n    if (market.state != MarketState.resolved) {\\n      return (false, false, false, false, getUserClaimableFees(marketId, user));\\n    }\\n\\n    MarketOutcome storage outcome = market.outcomes[market.resolution.outcomeId];\\n\\n    return (\\n      outcome.shares.holders[user] > 0,\\n      outcome.shares.claims[user],\\n      market.liquidityShares[user] > 0,\\n      market.liquidityClaims[user],\\n      getUserClaimableFees(marketId, user)\\n    );\\n  }\\n\\n  function getUserLiquidityPoolShare(uint256 marketId, address user) external view returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    return (market.liquidityShares[user] * ONE) / market.liquidity;\\n  }\\n\\n  function getUserClaimableFees(uint256 marketId, address user) public view returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    uint256 rawAmount = (market.fees.poolWeight * market.liquidityShares[user]) / market.liquidity;\\n\\n    // No fees left to claim\\n    if (market.fees.claimed[user] > rawAmount) return 0;\\n\\n    return rawAmount - market.fees.claimed[user];\\n  }\\n\\n  function getMarkets() external view returns (uint256[] memory) {\\n    return marketIds;\\n  }\\n\\n  function getMarketData(uint256 marketId)\\n    external\\n    view\\n    returns (\\n      MarketState,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      int256\\n    )\\n  {\\n    Market storage market = markets[marketId];\\n\\n    return (\\n      market.state,\\n      market.closesAtTimestamp,\\n      market.liquidity,\\n      market.balance,\\n      market.sharesAvailable,\\n      getMarketResolvedOutcome(marketId)\\n    );\\n  }\\n\\n  function getMarketAltData(uint256 marketId)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      bytes32,\\n      uint256,\\n      IERC20,\\n      uint256,\\n      address\\n    )\\n  {\\n    Market storage market = markets[marketId];\\n\\n    return (\\n      market.fees.fee,\\n      market.resolution.questionId,\\n      uint256(market.resolution.questionId),\\n      market.token,\\n      market.fees.treasuryFee,\\n      market.fees.treasury\\n    );\\n  }\\n\\n  function getMarketQuestion(uint256 marketId) external view returns (bytes32) {\\n    Market storage market = markets[marketId];\\n\\n    return (market.resolution.questionId);\\n  }\\n\\n  function getMarketPrices(uint256 marketId) external view returns (uint256, uint256[] memory) {\\n    Market storage market = markets[marketId];\\n    uint256[] memory prices = new uint256[](market.outcomeCount);\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      prices[i] = getMarketOutcomePrice(marketId, i);\\n    }\\n\\n    return (getMarketLiquidityPrice(marketId), prices);\\n  }\\n\\n  function getMarketShares(uint256 marketId) external view returns (uint256, uint256[] memory) {\\n    Market storage market = markets[marketId];\\n    uint256[] memory outcomeShares = new uint256[](market.outcomeCount);\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      outcomeShares[i] = market.outcomes[i].shares.available;\\n    }\\n\\n    return (market.liquidity, outcomeShares);\\n  }\\n\\n  function getMarketLiquidityPrice(uint256 marketId) public view returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    if (market.state == MarketState.resolved && !isMarketVoided(marketId)) {\\n      // resolved market, outcome prices are either 0 or 1\\n      // final liquidity price = outcome shares / liquidity shares\\n      return (market.outcomes[market.resolution.outcomeId].shares.available * ONE) / market.liquidity;\\n    }\\n\\n    // liquidity price = # outcomes / (liquidity * sum (1 / every outcome shares)\\n    uint256 marketSharesSum = 0;\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      MarketOutcome storage outcome = market.outcomes[i];\\n\\n      marketSharesSum = marketSharesSum + (ONE * ONE) / outcome.shares.available;\\n    }\\n\\n    return (market.outcomeCount * ONE * ONE * ONE) / market.liquidity / marketSharesSum;\\n  }\\n\\n  function getMarketResolvedOutcome(uint256 marketId) public view returns (int256) {\\n    Market storage market = markets[marketId];\\n\\n    // returning -1 if market still not resolved\\n    if (market.state != MarketState.resolved) {\\n      return -1;\\n    }\\n\\n    return int256(market.resolution.outcomeId);\\n  }\\n\\n  function isMarketVoided(uint256 marketId) public view returns (bool) {\\n    Market storage market = markets[marketId];\\n\\n    // market still not resolved, still in valid state\\n    if (market.state != MarketState.resolved) {\\n      return false;\\n    }\\n\\n    // resolved market id does not match any of the market ids\\n    return market.resolution.outcomeId >= market.outcomeCount;\\n  }\\n\\n  function getMarketFee(uint256 marketId) public view returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    return market.fees.fee + market.fees.treasuryFee;\\n  }\\n\\n  // ------ Outcome Getters ------\\n\\n  function getMarketOutcomeIds(uint256 marketId) external view returns (uint256[] memory) {\\n    Market storage market = markets[marketId];\\n    uint256[] memory outcomeIds = new uint256[](market.outcomeCount);\\n\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      outcomeIds[i] = i;\\n    }\\n\\n    return outcomeIds;\\n  }\\n\\n  function getMarketOutcomePrice(uint256 marketId, uint256 outcomeId) public view returns (uint256) {\\n    Market storage market = markets[marketId];\\n\\n    if (market.state == MarketState.resolved && !isMarketVoided(marketId)) {\\n      // resolved market, price is either 0 or 1\\n      return outcomeId == market.resolution.outcomeId ? ONE : 0;\\n    }\\n\\n    // outcome price = 1 / (1 + sum(outcome shares / every outcome shares))\\n    uint256 div = ONE;\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      if (i == outcomeId) continue;\\n\\n      div = div + (market.outcomes[outcomeId].shares.available * ONE) / market.outcomes[i].shares.available;\\n    }\\n\\n    return (ONE * ONE) / div;\\n  }\\n\\n  function getMarketOutcomeData(uint256 marketId, uint256 outcomeId)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    Market storage market = markets[marketId];\\n    MarketOutcome storage outcome = market.outcomes[outcomeId];\\n\\n    return (getMarketOutcomePrice(marketId, outcomeId), outcome.shares.available, outcome.shares.total);\\n  }\\n\\n  function getMarketOutcomesShares(uint256 marketId) private view returns (uint256[] memory) {\\n    Market storage market = markets[marketId];\\n\\n    uint256[] memory shares = new uint256[](market.outcomeCount);\\n    for (uint256 i = 0; i < market.outcomeCount; ++i) {\\n      shares[i] = market.outcomes[i].shares.available;\\n    }\\n\\n    return shares;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_requiredBalanceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_realitioAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_realitioTimeout\",\"type\":\"uint256\"},{\"internalType\":\"contract IWETH\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum PredictionMarketV2.MarketAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MarketActionTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcomes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MarketLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MarketOutcomePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"outcomeShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"MarketOutcomeShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUTCOMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT_256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutcomeSharesToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutcomeSharesToBuy\",\"type\":\"uint256\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"}],\"name\":\"calcBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"}],\"name\":\"calcSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outcomeTokenSellAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"claimFeesToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"claimLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"claimLiquidityToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"}],\"name\":\"claimVoidedOutcomeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"}],\"name\":\"claimVoidedOutcomeSharesToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"claimWinningsToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closesAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomes\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"internalType\":\"struct PredictionMarketV2.CreateMarketDescription\",\"name\":\"desc\",\"type\":\"tuple\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closesAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomes\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"internalType\":\"struct PredictionMarketV2.CreateMarketDescription\",\"name\":\"desc\",\"type\":\"tuple\"}],\"name\":\"createMarketWithETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketAltData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"enum PredictionMarketV2.MarketState\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketLiquidityPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"}],\"name\":\"getMarketOutcomeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketOutcomeIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"}],\"name\":\"getMarketOutcomePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketQuestion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketResolvedOutcome\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserClaimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLiquidityPoolShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMarketShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"isMarketVoided\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitioAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitioTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBalanceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"resolveMarketOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOutcomeSharesToSell\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOutcomeSharesToSell\",\"type\":\"uint256\"}],\"name\":\"sellToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PredictionMarketV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000001192f125c3a269834a3b59775ceb37889c9dcc4d0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000001f021be85d6b4d1867c43ef98d30ccc5a44791de000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}