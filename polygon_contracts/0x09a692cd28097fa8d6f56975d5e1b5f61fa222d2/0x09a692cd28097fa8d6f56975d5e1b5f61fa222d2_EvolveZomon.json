{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mechanics/EvolveZomon/EvolveZomon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"../../tokens/ZOMON/IZomon.sol\\\";\\nimport \\\"../../tokens/ZOMON/IZomonStruct.sol\\\";\\n\\nimport \\\"../../common/FundsManagementOwnable/FundsManagementOwnable.sol\\\";\\nimport \\\"../../common/ZomonContractCallerOwnable/ZomonContractCallerOwnable.sol\\\";\\nimport \\\"../../common/RuneContractCallerOwnable/RuneContractCallerOwnable.sol\\\";\\n\\nimport \\\"../../oracles/EvolveZomonOracle/EvolveZomonOracleCaller.sol\\\";\\n\\ncontract EvolveZomon is\\n    ZomonContractCallerOwnable,\\n    RuneContractCallerOwnable,\\n    EvolveZomonOracleCaller\\n{\\n    constructor(\\n        address _zomonContractAddress,\\n        address _runeContractAddress,\\n        address _evolveZomonOracleContractAddress\\n    )\\n        ZomonContractCallerOwnable(_zomonContractAddress)\\n        RuneContractCallerOwnable(_runeContractAddress)\\n        EvolveZomonOracleCaller(_evolveZomonOracleContractAddress)\\n    {}\\n\\n    function evolve(\\n        uint256 _zomonTokenId,\\n        uint256[] calldata _copiesZomonTokenIds\\n    ) external {\\n        // Check sender is the owner of the Zomon to evolve\\n        require(\\n            zomonContract.ownerOf(_zomonTokenId) == _msgSender(),\\n            \\\"ONLY_ZOMON_OWNER_ALLOWED\\\"\\n        );\\n\\n        // Check approval on Zomon to evolve and copies\\n        if (\\n            zomonContract.isApprovedForAll(_msgSender(), address(this)) == false\\n        ) {\\n            require(\\n                zomonContract.getApproved(_zomonTokenId) == address(this),\\n                \\\"ZOMON_NOT_APPROVED\\\"\\n            );\\n\\n            for (uint256 i = 0; i < _copiesZomonTokenIds.length; i++) {\\n                require(\\n                    zomonContract.getApproved(_copiesZomonTokenIds[i]) ==\\n                        address(this),\\n                    \\\"ZOMON_NOT_APPROVED\\\"\\n                );\\n            }\\n        }\\n\\n        Zomon memory zomon = zomonContract.getZomon(_zomonTokenId);\\n\\n        // Check Zomon can evolve\\n        require(zomon.canEvolve, \\\"ZOMON_CANNOT_EVOLVE\\\");\\n\\n        // Check enough Zomon copies (N copies are required at evolution N)\\n        require(\\n            _copiesZomonTokenIds.length == zomon.evolution,\\n            \\\"NOT_ENOUGH_ZOMON_COPIES\\\"\\n        );\\n\\n        // Check sender is the owner of the Zomon copies to burn\\n        // Check all Zomon copies are of the same specifie of the Zomon to evolve\\n        // Check all Zomon copies are not shiny\\n        // Check all Zomon copies are unique\\n        for (uint256 i = 0; i < _copiesZomonTokenIds.length; i++) {\\n            uint256 zomonCopyTokenId = _copiesZomonTokenIds[i];\\n\\n            require(\\n                zomonContract.ownerOf(zomonCopyTokenId) == _msgSender(),\\n                \\\"ONLY_ZOMON_OWNER_ALLOWED\\\"\\n            );\\n\\n            Zomon memory zomonCopy = zomonContract.getZomon(zomonCopyTokenId);\\n\\n            require(\\n                zomonCopy.serverId == zomon.serverId,\\n                \\\"ZOMON_COPY_NOT_SAME_SPECIE\\\"\\n            );\\n            require(\\n                zomonCopy.isShiny == false,\\n                \\\"SHINY_ZOMONS_CANNOT_BE_USED_AS_COPIES\\\"\\n            );\\n\\n            for (uint256 j = 0; j < i; j++) {\\n                require(\\n                    zomonCopyTokenId != _copiesZomonTokenIds[j],\\n                    \\\"ZOMON_COPY_NOT_UNIQUE\\\"\\n                );\\n            }\\n        }\\n\\n        _callEvolveZomonOracle(\\n            _msgSender(),\\n            _zomonTokenId,\\n            _copiesZomonTokenIds\\n        );\\n    }\\n\\n    function evolveCallback(\\n        uint256 _requestId,\\n        address _to,\\n        uint256 _zomonTokenId,\\n        uint256[] calldata _copiesZomonTokenIds,\\n        string calldata _zomonTokenURI,\\n        Zomon calldata _zomonData\\n    ) external override nonReentrant {\\n        // Only oracle should be able to call\\n        require(\\n            _msgSender() == address(evolveZomonOracleContract),\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Ensure this is a legitimate callback request\\n        require(\\n            _pendingEvolveZomonRequests[_requestId],\\n            \\\"REQUEST_ID_IS_NOT_PENDING\\\"\\n        );\\n\\n        // Remove the request from pending requests\\n        delete _pendingEvolveZomonRequests[_requestId];\\n\\n        for (uint256 i = 0; i < _copiesZomonTokenIds.length; i++) {\\n            Zomon memory zomonCopy = zomonContract.getZomon(\\n                _copiesZomonTokenIds[i]\\n            );\\n\\n            // Return engraved runes\\n            uint8 maxRunesCount = zomonCopy.maxRunesCount;\\n\\n            uint256 startIndex = uint256(\\n                (zomonCopy.evolution - 1) * maxRunesCount\\n            );\\n            uint256 maxIndex = startIndex + uint256(maxRunesCount);\\n\\n            for (\\n                uint256 j = startIndex;\\n                j < maxIndex && j < zomonCopy.runesIds.length;\\n                j++\\n            ) {\\n                uint16 runeServerId = zomonCopy.runesIds[j];\\n                if (runeServerId != 0) {\\n                    runeContract.mint(_to, runeServerId, 1, \\\"\\\");\\n                }\\n            }\\n\\n            // Burn Zomon\\n            zomonContract.burn(_copiesZomonTokenIds[i]);\\n        }\\n\\n        // Burn Zomon\\n        zomonContract.burn(_zomonTokenId);\\n\\n        // Mint Zomon with new data\\n        zomonContract.mint(_to, _zomonTokenId, _zomonTokenURI, _zomonData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ZOMON/IZomon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./IZomonStruct.sol\\\";\\n\\ninterface IZomon is IERC721 {\\n    function IS_ZOMON_CONTRACT() external pure returns (bool);\\n\\n    function getZomon(uint256 _tokenId) external view returns (Zomon memory);\\n\\n    function getCurrentInnerTokenBalance(uint256 _tokenId)\\n        external\\n        returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        string memory _tokenURI,\\n        Zomon memory _zomonData\\n    ) external;\\n\\n    function burn(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ZOMON/IZomonStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nstruct Zomon {\\n    /* 32 bytes pack */\\n    uint16 serverId;\\n    uint16 setId;\\n    uint8 edition;\\n    uint8 rarityId;\\n    uint8 genderId;\\n    uint8 zodiacSignId;\\n    uint16 skillId;\\n    uint16 leaderSkillId;\\n    bool canLevelUp;\\n    bool canEvolve;\\n    uint16 level;\\n    uint8 evolution;\\n    uint24 hp;\\n    uint24 attack;\\n    uint24 defense;\\n    uint24 critical;\\n    uint24 evasion;\\n    /*****************/\\n    bool isShiny;\\n    uint8 shinyBoostedStat; // 0 = none, 1 = hp, 2 = attack, 3 = defense, 4 = critical, 5 = evasion\\n    uint16 maxLevel;\\n    uint8 maxRunesCount;\\n    uint16 generation;\\n    uint8 innerTokenDecimals;\\n    uint8[] typesIds;\\n    uint16[] diceFacesIds;\\n    uint16[] runesIds;\\n    string name;\\n    address innerTokenAddress;\\n    uint256 minLevelInnerTokenBalance;\\n    uint256 maxLevelInnerTokenBalance;\\n}\\n\"\r\n    },\r\n    \"contracts/common/FundsManagementOwnable/FundsManagementOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FundsManagementOwnable is Ownable {\\n    event Received(address sender, uint256 amount);\\n\\n    receive() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n\\n    function withdraw(address _to) external onlyOwner {\\n        (bool success, ) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"WITHDRAW_FAILED\\\");\\n    }\\n\\n    function recoverERC20(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _tokenAmount\\n    ) external onlyOwner {\\n        require(\\n            IERC20(_tokenAddress).transfer(_to, _tokenAmount),\\n            \\\"RECOVERY_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/ZomonContractCallerOwnable/ZomonContractCallerOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../tokens/ZOMON/IZomon.sol\\\";\\n\\ncontract ZomonContractCallerOwnable is Ownable {\\n    IZomon public zomonContract;\\n\\n    constructor(address _zomonContractAddress) {\\n        setZomonContract(_zomonContractAddress);\\n    }\\n\\n    function setZomonContract(address _address) public onlyOwner {\\n        IZomon candidateContract = IZomon(_address);\\n\\n        // Verify the contract is the one we expect\\n        require(\\n            candidateContract.IS_ZOMON_CONTRACT(),\\n            \\\"CONTRACT_ADDRES_IS_NOT_A_ZOMON_CONTRACT_INSTANCE\\\"\\n        );\\n\\n        // Set the new contract address\\n        zomonContract = candidateContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/RuneContractCallerOwnable/RuneContractCallerOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../tokens/RUNE/IRune.sol\\\";\\n\\ncontract RuneContractCallerOwnable is Ownable {\\n    IRune public runeContract;\\n\\n    constructor(address _runeContractAddress) {\\n        setRuneContract(_runeContractAddress);\\n    }\\n\\n    function setRuneContract(address _address) public onlyOwner {\\n        IRune candidateContract = IRune(_address);\\n\\n        // Verify the contract is the one we expect\\n        require(\\n            candidateContract.IS_RUNE_CONTRACT(),\\n            \\\"CONTRACT_ADDRES_IS_NOT_A_RUNE_CONTRACT_INSTANCE\\\"\\n        );\\n\\n        // Set the new contract address\\n        runeContract = candidateContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/EvolveZomonOracle/EvolveZomonOracleCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../../common/FundsManagementOwnable/FundsManagementOwnable.sol\\\";\\n\\nimport \\\"../../tokens/ZOMON/IZomonStruct.sol\\\";\\n\\nimport \\\"./IEvolveZomonOracle.sol\\\";\\n\\nabstract contract EvolveZomonOracleCaller is\\n    ReentrancyGuard,\\n    FundsManagementOwnable\\n{\\n    bool public constant IS_EVOLVE_ZOMON_ORACLE_CALLER = true;\\n\\n    IEvolveZomonOracle public evolveZomonOracleContract;\\n\\n    mapping(uint256 => bool) internal _pendingEvolveZomonRequests;\\n\\n    constructor(address _evolveZomonOracleContractAddress) {\\n        setEvolveZomonOracleContractAddress(_evolveZomonOracleContractAddress);\\n    }\\n\\n    function setEvolveZomonOracleContractAddress(address _address)\\n        public\\n        onlyOwner\\n    {\\n        IEvolveZomonOracle candidateContract = IEvolveZomonOracle(_address);\\n\\n        // Verify the contract is the one we expect\\n        require(candidateContract.IS_EVOLVE_ZOMON_ORACLE());\\n\\n        // Set the new contract address\\n        evolveZomonOracleContract = candidateContract;\\n    }\\n\\n    // Entry point\\n    function _callEvolveZomonOracle(\\n        address _to,\\n        uint256 _zomonTokenId,\\n        uint256[] calldata _copiesZomonTokenIds\\n    ) internal nonReentrant returns (uint256) {\\n        uint256 requestId = evolveZomonOracleContract.requestZomonEvolve(\\n            _to,\\n            _zomonTokenId,\\n            _copiesZomonTokenIds\\n        );\\n        _pendingEvolveZomonRequests[requestId] = true;\\n        return requestId;\\n    }\\n\\n    // Exit point, to be implemented by the use case contract\\n    function evolveCallback(\\n        uint256 _requestId,\\n        address _to,\\n        uint256 _zomonTokenId,\\n        uint256[] calldata _copiesZomonTokenIds,\\n        string calldata _zomonTokenURI,\\n        Zomon calldata _zomonData\\n    ) external virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/RUNE/IRune.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./IRuneStruct.sol\\\";\\n\\ninterface IRune is IERC1155 {\\n    function IS_RUNE_CONTRACT() external pure returns (bool);\\n\\n    function getRune(uint256 _serverId) external view returns (Rune memory);\\n\\n    function mint(\\n        address to,\\n        uint256 serverId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata serverIds,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 serverId,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/RUNE/IRuneStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nstruct Rune {\\n    uint16 serverId;\\n    uint16 setId;\\n    uint8 typeId;\\n    uint16 charmedRuneServerId;\\n    uint8 runesCountToCharm;\\n    string name;\\n}\\n\\nstruct RunesMint {\\n    uint256[] ids;\\n    uint256[] amounts;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/EvolveZomonOracle/IEvolveZomonOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"../../tokens/ZOMON/IZomonStruct.sol\\\";\\n\\ninterface IEvolveZomonOracle {\\n    function IS_EVOLVE_ZOMON_ORACLE() external returns (bool);\\n\\n    function requestZomonEvolve(\\n        address _to,\\n        uint256 _zomonTokenId,\\n        uint256[] calldata _copiesZomonTokenIds\\n    ) external returns (uint256);\\n\\n    function reportZomonEvolve(\\n        uint256 _requestId,\\n        address _callerAddress,\\n        address _to,\\n        uint256 _zomonTokenId,\\n        uint256[] calldata _copiesZomonTokenIds,\\n        string calldata _zomonTokenURI,\\n        Zomon calldata _zomonData\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zomonContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_runeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_evolveZomonOracleContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_EVOLVE_ZOMON_ORACLE_CALLER\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_zomonTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_copiesZomonTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"evolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zomonTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_copiesZomonTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_zomonTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"serverId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"setId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"edition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarityId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"genderId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zodiacSignId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"skillId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"leaderSkillId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"canLevelUp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canEvolve\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"evolution\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"hp\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"attack\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"defense\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"critical\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"evasion\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"isShiny\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"shinyBoostedStat\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"maxLevel\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"maxRunesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"generation\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"innerTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"typesIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint16[]\",\"name\":\"diceFacesIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"runesIds\",\"type\":\"uint16[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"innerTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLevelInnerTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLevelInnerTokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Zomon\",\"name\":\"_zomonData\",\"type\":\"tuple\"}],\"name\":\"evolveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evolveZomonOracleContract\",\"outputs\":[{\"internalType\":\"contract IEvolveZomonOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runeContract\",\"outputs\":[{\"internalType\":\"contract IRune\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setEvolveZomonOracleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRuneContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setZomonContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zomonContract\",\"outputs\":[{\"internalType\":\"contract IZomon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EvolveZomon", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000de34497afaae0fd6a7aa0e3b94c55c3e4f2464a1000000000000000000000000bab09c44d189c827a1b535dd862b3643e1985d6e00000000000000000000000007e4f3f6ed8ce5ce5975b2a4fa491d19fb56fb72", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}