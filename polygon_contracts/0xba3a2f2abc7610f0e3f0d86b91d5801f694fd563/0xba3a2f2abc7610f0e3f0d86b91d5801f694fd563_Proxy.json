{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interface/IProxy.sol\\\";\\nimport \\\"./interface/IRegistry.sol\\\";\\nimport \\\"./interface/IFeeRuleRegistry.sol\\\";\\nimport \\\"./Config.sol\\\";\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./lib/LibParam.sol\\\";\\nimport \\\"./lib/LibFeeStorage.sol\\\";\\n\\n/**\\n * @title The entrance of Furucombo\\n * @author Ben Huang\\n */\\ncontract Proxy is IProxy, Storage, Config {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    using LibParam for bytes32;\\n    using LibStack for bytes32[];\\n    using Strings for uint256;\\n    using LibFeeStorage for mapping(bytes32 => bytes32);\\n\\n    event ChargeFee(address indexed tokenIn, uint256 feeAmount);\\n\\n    modifier isNotBanned() {\\n        require(registry.bannedAgents(address(this)) == 0, \\\"Banned\\\");\\n        _;\\n    }\\n\\n    modifier isNotHalted() {\\n        require(registry.fHalt() == false, \\\"Halted\\\");\\n        _;\\n    }\\n\\n    address private constant NATIVE_TOKEN =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    IRegistry public immutable registry;\\n    IFeeRuleRegistry public immutable feeRuleRegistry;\\n\\n    constructor(address registry_, address feeRuleRegistry_) {\\n        registry = IRegistry(registry_);\\n        feeRuleRegistry = IFeeRuleRegistry(feeRuleRegistry_);\\n    }\\n\\n    /**\\n     * @notice Direct transfer from EOA should be reverted.\\n     * @dev Callback function will be handled here.\\n     */\\n    fallback() external payable isNotHalted isNotBanned isInitialized {\\n        // If triggered by a function call, caller should be registered in\\n        // registry.\\n        // The function call will then be forwarded to the location registered\\n        // in registry.\\n        require(_isValidCaller(msg.sender), \\\"Invalid caller\\\");\\n\\n        address target = address(bytes20(registry.callers(msg.sender)));\\n        bytes memory result = _exec(target, msg.data, type(uint256).max);\\n\\n        // return result for aave v2 flashloan()\\n        uint256 size = result.length;\\n        assembly {\\n            let loc := add(result, 0x20)\\n            return(loc, size)\\n        }\\n    }\\n\\n    /**\\n     * @notice Direct transfer from EOA should be reverted.\\n     */\\n    receive() external payable {\\n        require(Address.isContract(msg.sender), \\\"Not allowed from EOA\\\");\\n    }\\n\\n    /**\\n     * @notice Combo execution function. Including three phases: pre-process,\\n     * exection and post-process.\\n     * @param tos The handlers of combo.\\n     * @param configs The configurations of executing cubes.\\n     * @param datas The combo datas.\\n     * @param ruleIndexes The indexes of rules.\\n     */\\n    function batchExec(\\n        address[] calldata tos,\\n        bytes32[] calldata configs,\\n        bytes[] memory datas,\\n        uint256[] calldata ruleIndexes\\n    ) external payable override isNotHalted isNotBanned {\\n        _preProcess(ruleIndexes);\\n        _execs(tos, configs, datas);\\n        _postProcess();\\n    }\\n\\n    /**\\n     * @notice The execution interface for callback function to be executed.\\n     * @dev This function can only be called through the handler, which makes\\n     * the caller become proxy itself.\\n     */\\n    function execs(\\n        address[] calldata tos,\\n        bytes32[] calldata configs,\\n        bytes[] memory datas\\n    ) external payable override isNotHalted isNotBanned isInitialized {\\n        require(msg.sender == address(this), \\\"Does not allow external calls\\\");\\n        _execs(tos, configs, datas);\\n    }\\n\\n    /**\\n     * @notice The execution phase.\\n     * @param tos The handlers of combo.\\n     * @param configs The configurations of executing cubes.\\n     * @param datas The combo datas.\\n     */\\n    function _execs(\\n        address[] memory tos,\\n        bytes32[] memory configs,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes32[256] memory localStack;\\n        uint256 index;\\n        uint256 counter;\\n\\n        require(\\n            tos.length == datas.length,\\n            \\\"Tos and datas length inconsistent\\\"\\n        );\\n        require(\\n            tos.length == configs.length,\\n            \\\"Tos and configs length inconsistent\\\"\\n        );\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            address to = tos[i];\\n            bytes32 config = configs[i];\\n            bytes memory data = datas[i];\\n            // Check if the data contains dynamic parameter\\n            if (!config.isStatic()) {\\n                // If so, trim the exectution data base on the configuration and stack content\\n                _trim(data, config, localStack, index);\\n            }\\n\\n            // Check if the output will be referenced afterwards\\n            bytes memory result = _exec(to, data, counter);\\n            counter++;\\n\\n            if (config.isReferenced()) {\\n                // If so, parse the output and place it into local stack\\n                uint256 num = config.getReturnNum();\\n                uint256 newIndex = _parse(localStack, result, index);\\n                require(\\n                    newIndex == index + num,\\n                    \\\"Return num and parsed return num not matched\\\"\\n                );\\n                index = newIndex;\\n            }\\n\\n            // Setup the process to be triggered in the post-process phase\\n            _setPostProcess(to);\\n        }\\n    }\\n\\n    /**\\n     * @notice Trimming the execution data.\\n     * @param data The execution data.\\n     * @param config The configuration.\\n     * @param localStack The stack the be referenced.\\n     * @param index Current element count of localStack.\\n     */\\n    function _trim(\\n        bytes memory data,\\n        bytes32 config,\\n        bytes32[256] memory localStack,\\n        uint256 index\\n    ) internal pure {\\n        // Fetch the parameter configuration from config\\n        (uint256[] memory refs, uint256[] memory params) = config.getParams();\\n        // Trim the data with the reference and parameters\\n        for (uint256 i = 0; i < refs.length; i++) {\\n            require(refs[i] < index, \\\"Reference to out of localStack\\\");\\n            bytes32 ref = localStack[refs[i]];\\n            uint256 offset = params[i];\\n            uint256 base = PERCENTAGE_BASE;\\n            assembly {\\n                let loc := add(add(data, 0x20), offset)\\n                let m := mload(loc)\\n                // Adjust the value by multiplier if a dynamic parameter is not zero\\n                if iszero(iszero(m)) {\\n                    // Assert no overflow first\\n                    let p := mul(m, ref)\\n                    if iszero(eq(div(p, m), ref)) {\\n                        revert(0, 0)\\n                    } // require(p / m == ref)\\n                    ref := div(p, base)\\n                }\\n                mstore(loc, ref)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Parse the return data to the local stack.\\n     * @param localStack The local stack to place the return values.\\n     * @param ret The return data.\\n     * @param index The current tail.\\n     */\\n    function _parse(\\n        bytes32[256] memory localStack,\\n        bytes memory ret,\\n        uint256 index\\n    ) internal pure returns (uint256 newIndex) {\\n        uint256 len = ret.length;\\n        // The return value should be multiple of 32-bytes to be parsed.\\n        require(len % 32 == 0, \\\"illegal length for _parse\\\");\\n        // Estimate the tail after the process.\\n        newIndex = index + len / 32;\\n        require(newIndex <= 256, \\\"stack overflow\\\");\\n        assembly {\\n            let offset := shl(5, index)\\n            // Store the data into localStack\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n                i := add(i, 0x20)\\n            } {\\n                mstore(\\n                    add(localStack, add(i, offset)),\\n                    mload(add(add(ret, i), 0x20))\\n                )\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice The execution of a single cube.\\n     * @param to_ The handler of cube.\\n     * @param data_ The cube execution data.\\n     * @param counter_ The current counter of the cube.\\n     */\\n    function _exec(\\n        address to_,\\n        bytes memory data_,\\n        uint256 counter_\\n    ) internal returns (bytes memory result) {\\n        require(_isValidHandler(to_), \\\"Invalid handler\\\");\\n        bool success;\\n        assembly {\\n            success := delegatecall(\\n                sub(gas(), 5000),\\n                to_,\\n                add(data_, 0x20),\\n                mload(data_),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            result := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(result, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(result, size)\\n            returndatacopy(add(result, 0x20), 0, size)\\n        }\\n\\n        if (!success) {\\n            if (result.length < 68) revert(\\\"_exec\\\");\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n\\n            if (counter_ == type(uint256).max) {\\n                revert(abi.decode(result, (string))); // Don't prepend counter\\n            } else {\\n                revert(\\n                    string(\\n                        abi.encodePacked(\\n                            counter_.toString(),\\n                            \\\"_\\\",\\n                            abi.decode(result, (string))\\n                        )\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Setup the post-process.\\n     * @param to_ The handler of post-process.\\n     */\\n    function _setPostProcess(address to_) internal {\\n        // If the stack length equals 0, just skip\\n        // If the top is a custom post-process, replace it with the handler\\n        // address.\\n        if (stack.length == 0) {\\n            return;\\n        } else if (\\n            stack.peek() == bytes32(bytes12(uint96(HandlerType.Custom))) &&\\n            bytes4(stack.peek(1)) != 0x00000000\\n        ) {\\n            stack.pop();\\n            stack.setAddress(to_);\\n            stack.setHandlerType(HandlerType.Custom);\\n        }\\n    }\\n\\n    /// @notice The pre-process phase.\\n    function _preProcess(uint256[] memory ruleIndexes_)\\n        internal\\n        virtual\\n        isStackEmpty\\n    {\\n        // Set the sender.\\n        _setSender();\\n        // Set the fee collector\\n        cache._setFeeCollector(feeRuleRegistry.feeCollector());\\n        // Calculate fee\\n        uint256 feeRate =\\n            feeRuleRegistry.calFeeRateMulti(_getSender(), ruleIndexes_);\\n        require(feeRate <= PERCENTAGE_BASE, \\\"fee rate out of range\\\");\\n        cache._setFeeRate(feeRate);\\n        if (msg.value > 0 && feeRate > 0) {\\n            // Process ether fee\\n            uint256 feeEth = _calFee(msg.value, feeRate);\\n\\n            // It will fail if fee collector is gnosis contract, because .transfer() will only consume 2300 gas limit.\\n            // Replacing .transfer() with .call('') to avoid out of gas\\n            address collector = cache._getFeeCollector();\\n            (bool success, ) = collector.call{value: feeEth}(\\\"\\\");\\n            require(success, \\\"Send fee to collector failed\\\");\\n            emit ChargeFee(NATIVE_TOKEN, feeEth);\\n        }\\n    }\\n\\n    /// @notice The post-process phase.\\n    function _postProcess() internal {\\n        // Handler type will be parsed at the beginning. Will send the token back to\\n        // user if the handler type is \\\"Token\\\". Will get the handler address and\\n        // execute the customized post-process if handler type is \\\"Custom\\\".\\n        while (stack.length > 0) {\\n            bytes32 top = stack.get();\\n            // Get handler type\\n            HandlerType handlerType = HandlerType(uint96(bytes12(top)));\\n            if (handlerType == HandlerType.Token) {\\n                address addr = address(uint160(uint256(top)));\\n                uint256 tokenAmount = IERC20(addr).balanceOf(address(this));\\n                if (tokenAmount > 0)\\n                    IERC20(addr).safeTransfer(msg.sender, tokenAmount);\\n            } else if (handlerType == HandlerType.Custom) {\\n                address addr = stack.getAddress();\\n                _exec(\\n                    addr,\\n                    abi.encodeWithSelector(POSTPROCESS_SIG),\\n                    type(uint256).max\\n                );\\n            } else {\\n                revert(\\\"Invalid handler type\\\");\\n            }\\n        }\\n\\n        // Balance should also be returned to user\\n        uint256 amount = address(this).balance;\\n        if (amount > 0) payable(msg.sender).transfer(amount);\\n\\n        // Reset cached datas\\n        cache._resetFeeCollector();\\n        cache._resetFeeRate();\\n        _resetSender();\\n    }\\n\\n    /// @notice Check if the handler is valid in registry.\\n    function _isValidHandler(address handler) internal view returns (bool) {\\n        return registry.isValidHandler(handler);\\n    }\\n\\n    /// @notice Check if the caller is valid in registry.\\n    function _isValidCaller(address caller) internal view returns (bool) {\\n        return registry.isValidCaller(caller);\\n    }\\n\\n    function _calFee(uint256 amount, uint256 feeRate)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * feeRate) / PERCENTAGE_BASE;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IProxy {\\n    function batchExec(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas, uint256[] calldata ruleIndexes) external payable;\\n    function execs(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRegistry {\\n    function handlers(address) external view returns (bytes32);\\n    function callers(address) external view returns (bytes32);\\n    function bannedAgents(address) external view returns (uint256);\\n    function fHalt() external view returns (bool);\\n    function isValidHandler(address handler) external view returns (bool);\\n    function isValidCaller(address handler) external view returns (bool);\\n\\n    function register(address registration, bytes32 info) external;\\n    function unregister(address registration) external;\\n    function registerCaller(address registration, bytes32 info) external;\\n    function unregisterCaller(address registration) external;\\n    function ban(address agent) external;\\n    function unban(address agent) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFeeRuleRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeRuleRegistry {\\n    /* State Variables Getter */\\n    function rules(uint256) external view returns (address);\\n    function counter() external view returns (uint256);\\n    function basisFeeRate() external view returns (uint256);\\n    function feeCollector() external view returns (address);\\n    function BASE() external view returns (uint256);\\n\\n    /* Restricted Functions */\\n    function setBasisFeeRate(uint256) external;\\n    function setFeeCollector(address) external;\\n    function registerRule(address rule) external;\\n    function unregisterRule(uint256 ruleIndex) external;\\n\\n    /* View Functions */\\n    function calFeeRateMulti(address usr, uint256[] calldata ruleIndexes) external view returns (uint256 scaledRate);\\n    function calFeeRate(address usr, uint256 ruleIndex) external view returns (uint256 scaledRate);\\n    function calFeeRateMultiWithoutBasis(address usr, uint256[] calldata ruleIndexes) external view returns (uint256 scaledRate);\\n    function calFeeRateWithoutBasis(address usr, uint256 ruleIndex) external view returns (uint256 scaledRate);\\n}\\n\"\r\n    },\r\n    \"contracts/Config.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\"\r\n    },\r\n    \"contracts/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LibParam.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibParam {\\n    bytes32 private constant STATIC_MASK =\\n        0x0100000000000000000000000000000000000000000000000000000000000000;\\n    bytes32 private constant PARAMS_MASK =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    bytes32 private constant REFS_MASK =\\n        0x00000000000000000000000000000000000000000000000000000000000000FF;\\n    bytes32 private constant RETURN_NUM_MASK =\\n        0x00FF000000000000000000000000000000000000000000000000000000000000;\\n\\n    uint256 private constant REFS_LIMIT = 22;\\n    uint256 private constant PARAMS_SIZE_LIMIT = 64;\\n    uint256 private constant RETURN_NUM_OFFSET = 240;\\n\\n    function isStatic(bytes32 conf) internal pure returns (bool) {\\n        if (conf & STATIC_MASK == 0) return true;\\n        else return false;\\n    }\\n\\n    function isReferenced(bytes32 conf) internal pure returns (bool) {\\n        if (getReturnNum(conf) == 0) return false;\\n        else return true;\\n    }\\n\\n    function getReturnNum(bytes32 conf) internal pure returns (uint256 num) {\\n        bytes32 temp = (conf & RETURN_NUM_MASK) >> RETURN_NUM_OFFSET;\\n        num = uint256(temp);\\n    }\\n\\n    function getParams(bytes32 conf)\\n        internal\\n        pure\\n        returns (uint256[] memory refs, uint256[] memory params)\\n    {\\n        require(!isStatic(conf), \\\"Static params\\\");\\n        uint256 n = REFS_LIMIT;\\n        while (conf & REFS_MASK == REFS_MASK && n > 0) {\\n            n--;\\n            conf = conf >> 8;\\n        }\\n        require(n > 0, \\\"No dynamic param\\\");\\n        refs = new uint256[](n);\\n        params = new uint256[](n);\\n        for (uint256 i = 0; i < n; i++) {\\n            refs[i] = uint256(conf & REFS_MASK);\\n            conf = conf >> 8;\\n        }\\n        uint256 locCount = 0;\\n        for (uint256 k = 0; k < PARAMS_SIZE_LIMIT; k++) {\\n            if (conf & PARAMS_MASK != 0) {\\n                require(locCount < n, \\\"Location count exceeds ref count\\\");\\n                params[locCount] = k * 32 + 4;\\n                locCount++;\\n            }\\n            conf = conf >> 1;\\n        }\\n        require(locCount == n, \\\"Location count less than ref count\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LibFeeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LibCache.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nlibrary LibFeeStorage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n\\n    // keccak256 hash of \\\"furucombo.fee.rate\\\"\\n    // prettier-ignore\\n    bytes32 public constant FEE_RATE_KEY = 0x142183525227cae0e4300fd0fc77d7f3b08ceb0fd9cb2a6c5488668fa0ea5ffa;\\n\\n    // keccak256 hash of \\\"furucombo.fee.collector\\\"\\n    // prettier-ignore\\n    bytes32 public constant FEE_COLLECTOR_KEY = 0x60d7a7cc0a45d852bd613e4f527aaa2e4b81fff918a69a2aab88b6458751d614;\\n\\n    function _setFeeRate(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        uint256 _feeRate\\n    ) internal {\\n        require(_getFeeRate(_cache) == 0, \\\"Fee rate not zero\\\");\\n        _cache.setUint256(FEE_RATE_KEY, _feeRate);\\n    }\\n\\n    function _resetFeeRate(mapping(bytes32 => bytes32) storage _cache)\\n        internal\\n    {\\n        _cache.setUint256(FEE_RATE_KEY, 0);\\n    }\\n\\n    function _getFeeRate(mapping(bytes32 => bytes32) storage _cache)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _cache.getUint256(FEE_RATE_KEY);\\n    }\\n\\n    function _setFeeCollector(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        address _collector\\n    ) internal {\\n        require(\\n            _getFeeCollector(_cache) == address(0),\\n            \\\"Fee collector is initialized\\\"\\n        );\\n        _cache.setAddress(FEE_COLLECTOR_KEY, _collector);\\n    }\\n\\n    function _resetFeeCollector(mapping(bytes32 => bytes32) storage _cache)\\n        internal\\n    {\\n        _cache.setAddress(FEE_COLLECTOR_KEY, address(0));\\n    }\\n\\n    function _getFeeCollector(mapping(bytes32 => bytes32) storage _cache)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return _cache.getAddress(FEE_COLLECTOR_KEY);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LibCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LibStack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        uint256 length = _stack.length;\\n        require(length > 0, \\\"stack empty\\\");\\n        ret = _stack[length - 1];\\n    }\\n\\n    function peek(bytes32[] storage _stack, uint256 _index)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        uint256 length = _stack.length;\\n        require(length > 0, \\\"stack empty\\\");\\n        require(length > _index, \\\"not enough elements in stack\\\");\\n        ret = _stack[length - _index - 1];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRuleRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"ChargeFee\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"configs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ruleIndexes\",\"type\":\"uint256[]\"}],\"name\":\"batchExec\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"configs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRuleRegistry\",\"outputs\":[{\"internalType\":\"contract IFeeRuleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8ee5721f19b6cee4248fc4ab23ae7694c7302c0000000000000000000000000e48a91a3b36cd277205911705c4325998a790823", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xfba01178a556575a3949ed681d13272770839971", "SwarmSource": ""}