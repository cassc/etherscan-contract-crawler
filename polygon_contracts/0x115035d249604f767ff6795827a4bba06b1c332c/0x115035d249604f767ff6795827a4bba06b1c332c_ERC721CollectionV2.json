{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/managers/Rarities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/ICollectionManager.sol\\\";\\nimport \\\"../commons/OwnableInitializable.sol\\\";\\nimport \\\"../commons/NativeMetaTransaction.sol\\\";\\nimport \\\"../libs/String.sol\\\";\\n\\ncontract Rarities is OwnableInitializable, NativeMetaTransaction {\\n    using String for string;\\n\\n    struct Rarity {\\n        string name;\\n        uint256 maxSupply;\\n        uint256 price;\\n    }\\n\\n    Rarity[] public rarities;\\n\\n    /// @dev indexes will start in 1\\n    mapping(bytes32 => uint256) rarityIndex;\\n\\n    event AddRarity(Rarity _rarity);\\n    event UpdatePrice(string _name, uint256 _price);\\n\\n\\n   /**\\n    * @notice Create the contract\\n    * @param _owner - owner of the contract\\n    */\\n    constructor(address _owner,  Rarity[] memory _rarities) {\\n        // EIP712 init\\n        _initializeEIP712('Decentraland Rarities', '1');\\n        // Ownable init\\n        _initOwnable();\\n        transferOwnership(_owner);\\n\\n        for (uint256 i = 0 ; i < _rarities.length; i++) {\\n            _addRarity(_rarities[i]);\\n        }\\n    }\\n\\n    function updatePrices(string[] calldata _names, uint256[] calldata _prices) external onlyOwner {\\n        require(_names.length == _prices.length, \\\"Rarities#updatePrices: LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < _names.length; i++) {\\n            string memory name = _names[i];\\n            uint256 price = _prices[i];\\n            bytes32 rarityKey = keccak256(bytes(name.toLowerCase()));\\n            uint256 index = rarityIndex[rarityKey];\\n\\n            require(rarityIndex[rarityKey] > 0, \\\"Rarities#updatePrices: INVALID_RARITY\\\");\\n\\n            rarities[index - 1].price = price;\\n\\n            emit UpdatePrice(name, price);\\n        }\\n    }\\n\\n    function addRarities(Rarity[] memory _rarities) external onlyOwner {\\n        for (uint256 i = 0; i < _rarities.length; i++) {\\n            _addRarity(_rarities[i]);\\n        }\\n    }\\n\\n    function _addRarity(Rarity memory _rarity) internal {\\n        uint256 rarityLength = bytes(_rarity.name).length;\\n        require(rarityLength > 0 && rarityLength <= 32, \\\"Rarities#_addRarity: INVALID_LENGTH\\\");\\n\\n        bytes32 rarityKey = keccak256(bytes(_rarity.name.toLowerCase()));\\n        require(rarityIndex[rarityKey] == 0, \\\"Rarities#_addRarity: RARITY_ALREADY_ADDED\\\");\\n\\n        rarities.push(_rarity);\\n\\n        rarityIndex[rarityKey] = rarities.length;\\n\\n        emit AddRarity(_rarity);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of item in the collection\\n     * @return Amount of items in the collection\\n     */\\n    function raritiesCount() external view returns (uint256) {\\n        return rarities.length;\\n    }\\n\\n    /**\\n     * @notice Returns a rarity\\n     * @dev will revert if the rarity is out of bounds\\n     * @return rarity for the given index\\n     */\\n    function getRarityByName(string memory _rarity) public view returns (Rarity memory) {\\n        bytes32 rarityKey = keccak256(bytes(_rarity.toLowerCase()));\\n\\n        uint256 index = rarityIndex[rarityKey];\\n\\n        require(rarityIndex[rarityKey] > 0, \\\"Rarities#getRarityByName: INVALID_RARITY\\\");\\n\\n        return rarities[index - 1];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollectionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ICollectionManager {\\n   function manageCollection(address _forwarder, address _collection, bytes calldata _data) external;\\n}\"\r\n    },\r\n    \"contracts/commons/OwnableInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./ContextMixin.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableInitializable is ContextMixin {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _initOwnable () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/commons/NativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { EIP712Base } from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"NMT#executeMetaTransaction: SIGNER_AND_SIGNATURE_DO_NOT_MATCH\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            msg.sender,\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call{value: msg.value}(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"NMT#executeMetaTransaction: CALL_FAILED\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NMT#verify: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\"\r\n    },\r\n    \"contracts/libs/String.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nlibrary String {\\n\\n    /**\\n     * @dev Convert bytes32 to string.\\n     * @param _x - to be converted to string.\\n     * @return string\\n     */\\n    function bytes32ToString(bytes32 _x) internal pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint charCount = 0;\\n        for (uint j = 0; j < 32; j++) {\\n            bytes1 currentChar = bytes1(bytes32(uint(_x) * 2 ** (8 * j)));\\n            if (currentChar != 0) {\\n                bytesString[charCount] = currentChar;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    /**\\n     * @dev Convert uint to string.\\n     * @param _i - uint256 to be converted to string.\\n     * @return _uintAsString uint in string\\n     */\\n    function uintToString(uint _i) internal pure returns (string memory _uintAsString) {\\n        uint i = _i;\\n\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + i % 10));\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @dev Convert an address to string.\\n     * @param _x - address to be converted to string.\\n     * @return string representation of the address\\n     */\\n    function addressToString(address _x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint160(_x) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    /**\\n     * @dev Lowercase a string.\\n     * @param _str - to be converted to string.\\n     * @return string\\n     */\\n    function toLowerCase(string memory _str) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\"\r\n    },\r\n    \"contracts/commons/ContextMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\nabstract contract ContextMixin {\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/EIP712Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 public domainSeparator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name,\\n        string memory version\\n    )\\n        internal\\n    {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getChainId() public pure returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, messageHash)\\n            );\\n    }\\n}\"\r\n    },\r\n    \"contracts/markets/v2/CollectionStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IERC721CollectionV2.sol\\\";\\nimport \\\"../../commons/OwnableInitializable.sol\\\";\\nimport \\\"../../commons/NativeMetaTransaction.sol\\\";\\n\\ncontract CollectionStore is OwnableInitializable, NativeMetaTransaction {\\n    using SafeMath for uint256;\\n\\n\\n    struct ItemToBuy {\\n        IERC721CollectionV2 collection;\\n        uint256[] ids;\\n        uint256[] prices;\\n        address[] beneficiaries;\\n    }\\n\\n    uint256 constant public BASE_FEE = 1000000;\\n    IERC20 public acceptedToken;\\n    uint256 public fee;\\n    address public feeOwner;\\n\\n    event Bought(ItemToBuy[] _itemsToBuy);\\n    event SetFee(uint256 _oldFee, uint256 _newFee);\\n    event SetFeeOwner(address indexed _oldFeeOwner, address indexed _newFeeOwner);\\n\\n    /**\\n    * @notice Constructor of the contract.\\n    * @param _acceptedToken - Address of the ERC20 token accepted\\n    * @param _feeOwner - address where fees will be transferred\\n    * @param _fee - fee to charge for each sale\\n    */\\n    constructor(address _owner, IERC20 _acceptedToken, address _feeOwner, uint256 _fee) {\\n        // EIP712 init\\n        _initializeEIP712('Decentraland Collection Store', '1');\\n        // Ownable init\\n        _initOwnable();\\n\\n        acceptedToken = _acceptedToken;\\n        feeOwner = _feeOwner;\\n        setFee(_fee);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @notice Buy collection's items.\\n    * @dev There is a maximum amount of NFTs that can be issued per call by the block's limit.\\n    * @param _itemsToBuy - items to buy\\n    */\\n    function buy(ItemToBuy[] memory _itemsToBuy) external {\\n        uint256 totalFee = 0;\\n        address sender = _msgSender();\\n\\n        for (uint256 i = 0; i < _itemsToBuy.length; i++) {\\n            ItemToBuy memory itemToBuy = _itemsToBuy[i];\\n            IERC721CollectionV2 collection = itemToBuy.collection;\\n            uint256 amountOfItems = itemToBuy.ids.length;\\n\\n            require(amountOfItems == itemToBuy.prices.length, \\\"CollectionStore#buy: LENGTH_MISMATCH\\\");\\n\\n            for (uint256 j = 0; j < amountOfItems; j++) {\\n                uint256 itemId = itemToBuy.ids[j];\\n                uint256 price = itemToBuy.prices[j];\\n\\n                (uint256 itemPrice, address itemBeneficiary) = getItemBuyData(collection, itemId);\\n                require(price == itemPrice, \\\"CollectionStore#buy: ITEM_PRICE_MISMATCH\\\");\\n\\n                if (itemPrice > 0) {\\n                    // Calculate sale share\\n                    uint256 saleShareAmount = itemPrice.mul(fee).div(BASE_FEE);\\n                    totalFee = totalFee.add(saleShareAmount);\\n\\n                    // Transfer sale amount to the item beneficiary\\n                    require(\\n                        acceptedToken.transferFrom(sender, itemBeneficiary, itemPrice.sub(saleShareAmount)),\\n                        \\\"CollectionStore#buy: TRANSFER_PRICE_FAILED\\\"\\n                    );\\n                }\\n            }\\n\\n            // Mint Token\\n            collection.issueTokens(itemToBuy.beneficiaries, itemToBuy.ids);\\n        }\\n\\n        if (totalFee > 0) {\\n            // Transfer share amount for fees owner\\n            require(\\n                acceptedToken.transferFrom(sender, feeOwner, totalFee),\\n                \\\"CollectionStore#buy: TRANSFER_FEES_FAILED\\\"\\n            );\\n        }\\n        emit Bought(_itemsToBuy);\\n    }\\n\\n    /**\\n     * @notice Get item's price and beneficiary\\n     * @param _collection - collection address\\n     * @param _itemId - item id\\n     * @return uint256 of the item's price\\n     * @return address of the item's beneficiary\\n     */\\n    function getItemBuyData(IERC721CollectionV2 _collection, uint256 _itemId) public view returns (uint256, address) {\\n      (,,,uint256 price, address beneficiary,,) = _collection.items(_itemId);\\n       return (price, beneficiary);\\n    }\\n\\n    // Owner functions\\n\\n    /**\\n     * @notice Sets the fee of the contract that's charged to the seller on each sale\\n     * @param _newFee - Fee from 0 to 999,999\\n     */\\n    function setFee(uint256 _newFee) public onlyOwner {\\n        require(_newFee < BASE_FEE, \\\"CollectionStore#setFee: FEE_SHOULD_BE_LOWER_THAN_BASE_FEE\\\");\\n        require(_newFee != fee, \\\"CollectionStore#setFee: SAME_FEE\\\");\\n\\n        emit SetFee(fee, _newFee);\\n        fee = _newFee;\\n    }\\n\\n    /**\\n     * @notice Set a new fee owner.\\n    * @param _newFeeOwner - Address of the new fee owner\\n     */\\n    function setFeeOwner(address _newFeeOwner) external onlyOwner {\\n        require(_newFeeOwner != address(0), \\\"CollectionStore#setFeeOwner: INVALID_ADDRESS\\\");\\n        require(_newFeeOwner != feeOwner, \\\"CollectionStore#setFeeOwner: SAME_FEE_OWNER\\\");\\n\\n        emit SetFeeOwner(feeOwner, _newFeeOwner);\\n        feeOwner = _newFeeOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\n\\ninterface IERC20 {\\n    function balanceOf(address from) external view returns (uint256);\\n    function transferFrom(address from, address to, uint tokens) external returns (bool);\\n    function transfer(address to, uint tokens) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721CollectionV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IERC721CollectionV2 {\\n    function COLLECTION_HASH() external view returns (bytes32);\\n\\n    struct ItemParam {\\n        string rarity;\\n        uint256 price;\\n        address beneficiary;\\n        string metadata;\\n    }\\n\\n    function issueTokens(address[] calldata _beneficiaries, uint256[] calldata _itemIds) external;\\n    function setApproved(bool _value) external;\\n    /// @dev For some reason using the Struct Item as an output parameter fails, but works as an input parameter\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseURI,\\n        address _creator,\\n        bool _shouldComplete,\\n        bool _isApproved,\\n        address _rarities,\\n        ItemParam[] memory _items\\n    ) external;\\n    function items(uint256 _itemId) external view returns (string memory, uint256, uint256, uint256, address, string memory, string memory);\\n}\"\r\n    },\r\n    \"contracts/mocks/DummyCollectionStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../markets/v2/CollectionStore.sol\\\";\\n\\ninterface EventsInterface {\\n    event Issue(address indexed _beneficiary, uint256 indexed _tokenId, uint256 indexed _itemId, uint256 _issuedId, address _caller);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n}\\n\\ncontract DummyCollectionStore is EventsInterface, CollectionStore {\\n    constructor (\\n        address _owner,\\n        IERC20 _acceptedToken,\\n        address _feeOwner,\\n        uint256 _fee\\n    ) CollectionStore(_owner, _acceptedToken, _feeOwner, _fee) {}\\n}\"\r\n    },\r\n    \"contracts/managers/Committee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\nimport \\\"../interfaces/ICollectionManager.sol\\\";\\nimport \\\"../commons/OwnableInitializable.sol\\\";\\nimport \\\"../commons/NativeMetaTransaction.sol\\\";\\n\\n\\ncontract Committee is OwnableInitializable, NativeMetaTransaction {\\n\\n    mapping(address => bool) public members;\\n\\n    event MemberSet(address indexed _member, bool _value);\\n\\n    /**\\n    * @notice Create the contract\\n    * @param _owner - owner of the contract\\n    * @param _members - members to be added at contract creation\\n    */\\n    constructor(address _owner, address[] memory _members) {\\n        // EIP712 init\\n        _initializeEIP712('Decentraland Collection Committee', '1');\\n        // Ownable init\\n        _initOwnable();\\n        transferOwnership(_owner);\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            _setMember(_members[i], true);\\n        }\\n    }\\n\\n    /**\\n    * @notice Set members\\n    * @param _members - members to be added\\n    * @param _values - whether the members should be added or removed\\n    */\\n    function setMembers(address[] calldata _members, bool[] calldata _values) external onlyOwner {\\n        require(_members.length == _values.length, \\\"Committee#setMembers: LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            _setMember(_members[i], _values[i]);\\n        }\\n    }\\n\\n    /**\\n    * @notice Set members\\n    * @param _member - member to be added\\n    * @param _value - whether the member should be added or removed\\n    */\\n    function _setMember(address _member, bool _value) internal {\\n        members[_member] = _value;\\n\\n        emit MemberSet(_member, _value);\\n    }\\n\\n    /**\\n    * @notice Manage collection\\n    * @param _collectionManager - collection manager\\n    * @param _forwarder - forwarder contract owner of the collection\\n    * @param _collection - collection to be managed\\n    * @param _data - call data to be used\\n    */\\n    function manageCollection(ICollectionManager _collectionManager, address _forwarder, address _collection, bytes memory _data) external {\\n       require(members[_msgSender()], \\\"Committee#manageCollection: UNAUTHORIZED_SENDER\\\");\\n\\n        _collectionManager.manageCollection(_forwarder, _collection, _data);\\n    }\\n}\"\r\n    },\r\n    \"contracts/managers/CollectionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IForwarder.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC721CollectionV2.sol\\\";\\nimport \\\"../interfaces/IERC721CollectionFactoryV2.sol\\\";\\nimport \\\"../interfaces/IRarities.sol\\\";\\nimport \\\"../commons/OwnableInitializable.sol\\\";\\nimport \\\"../commons/NativeMetaTransaction.sol\\\";\\n\\n\\ncontract CollectionManager is OwnableInitializable, NativeMetaTransaction {\\n\\n    using SafeMath for uint256;\\n\\n    IERC20  public acceptedToken;\\n    IRarities public rarities;\\n    address public committee;\\n    address public feesCollector;\\n    uint256 public pricePerItem;\\n\\n    mapping(bytes4 => bool) public allowedCommitteeMethods;\\n\\n\\n    event AcceptedTokenSet(IERC20 indexed _oldAcceptedToken, IERC20 indexed _newAcceptedToken);\\n    event CommitteeSet(address indexed _oldCommittee, address indexed _newCommittee);\\n    event CommitteeMethodSet(bytes4 indexed _method, bool _isAllowed);\\n    event FeesCollectorSet(address indexed _oldFeesCollector, address indexed _newFeesCollector);\\n    event RaritiesSet(IRarities indexed _oldRarities, IRarities indexed _newRarities);\\n\\n    /**\\n    * @notice Create the contract\\n    * @param _owner - owner of the contract\\n    * @param _acceptedToken - accepted ERC20 token for collection deployment\\n    * @param _committee - committee contract\\n    * @param _feesCollector - fees collector\\n    * @param _rarities - rarities contract\\n    * @param _committeeMethods - method selectors\\n    * @param _committeeValues - whether the method is allowed or not\\n    */\\n    constructor(\\n        address _owner,\\n        IERC20 _acceptedToken,\\n        address _committee,\\n        address _feesCollector,\\n        IRarities _rarities,\\n        bytes4[] memory _committeeMethods,\\n        bool[] memory _committeeValues\\n    ) {\\n        // EIP712 init\\n        _initializeEIP712('Decentraland Collection Manager', '1');\\n        // Ownable init\\n        _initOwnable();\\n\\n        setAcceptedToken(_acceptedToken);\\n\\n        // Committee\\n        setCommittee(_committee);\\n        setCommitteeMethods(_committeeMethods, _committeeValues);\\n\\n        setFeesCollector(_feesCollector);\\n        setRarities(_rarities);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @notice Set the accepted token\\n    * @param _newAcceptedToken - accepted ERC20 token for collection deployment\\n    */\\n    function setAcceptedToken(IERC20 _newAcceptedToken) onlyOwner public {\\n        require(address(_newAcceptedToken) != address(0), \\\"CollectionManager#setAcceptedToken: INVALID_ACCEPTED_TOKEN\\\");\\n\\n        emit AcceptedTokenSet(acceptedToken, _newAcceptedToken);\\n        acceptedToken = _newAcceptedToken;\\n    }\\n\\n    /**\\n    * @notice Set the committee\\n    * @param _newCommittee - committee contract\\n    */\\n    function setCommittee(address _newCommittee) onlyOwner public {\\n        require(_newCommittee != address(0), \\\"CollectionManager#setCommittee: INVALID_COMMITTEE\\\");\\n\\n        emit CommitteeSet(committee, _newCommittee);\\n        committee = _newCommittee;\\n    }\\n\\n    /**\\n    * @notice Set methods to be allowed by the committee\\n    * @param _methods - method selectors\\n    * @param _values - whether the method is allowed or not\\n    */\\n    function setCommitteeMethods(bytes4[] memory _methods, bool[] memory _values) onlyOwner public {\\n        uint256 length = _methods.length;\\n        require(length > 0 && length == _values.length, \\\"CollectionManager#setCommitteeMethods: EMPTY_METHODS\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes4 method = _methods[i];\\n            bool value = _values[i];\\n\\n            allowedCommitteeMethods[method] = value;\\n\\n            emit CommitteeMethodSet(method, value);\\n        }\\n    }\\n\\n    /**\\n    * @notice Set the fees collector\\n    * @param _newFeesCollector - fees collector\\n    */\\n    function setFeesCollector(address _newFeesCollector) onlyOwner public {\\n        require(_newFeesCollector != address(0), \\\"CollectionManager#setFeesCollector: INVALID_FEES_COLLECTOR\\\");\\n\\n        emit FeesCollectorSet(feesCollector, _newFeesCollector);\\n        feesCollector = _newFeesCollector;\\n    }\\n\\n    /**\\n    * @notice Set the rarities\\n    * @param _newRarities - price per item\\n    */\\n    function setRarities(IRarities _newRarities) onlyOwner public {\\n        require(address(_newRarities) != address(0), \\\"CollectionManager#setRarities: INVALID_RARITIES\\\");\\n\\n        emit RaritiesSet(rarities, _newRarities);\\n        rarities = _newRarities;\\n    }\\n\\n    /**\\n    * @notice Create a collection\\n    * @param _forwarder - forwarder contract owner of the collection factory\\n    * @param _factory - collection factory\\n    * @param _salt - arbitrary 32 bytes hexa\\n    * @param _name - name of the contract\\n    * @param _symbol - symbol of the contract\\n    * @param _baseURI - base URI for token URIs\\n    * @param _creator - creator address\\n    * @param _items - items to be added\\n    */\\n    function createCollection(\\n        IForwarder _forwarder,\\n        IERC721CollectionFactoryV2 _factory,\\n        bytes32 _salt,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseURI,\\n        address _creator,\\n        IERC721CollectionV2.ItemParam[] memory _items\\n     ) external {\\n        require(address(_forwarder) != address(this), \\\"CollectionManager#createCollection: FORWARDER_CANT_BE_THIS\\\");\\n        uint256 amount = 0;\\n\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            IERC721CollectionV2.ItemParam memory item = _items[i];\\n\\n            IRarities.Rarity memory rarity = rarities.getRarityByName(item.rarity);\\n\\n            amount = amount.add(rarity.price);\\n        }\\n\\n        // Transfer fees to collector\\n        if (amount > 0) {\\n            require(\\n                acceptedToken.transferFrom(_msgSender(), feesCollector, amount),\\n                \\\"CollectionManager#createCollection: TRANSFER_FEES_FAILED\\\"\\n            );\\n        }\\n\\n        bytes memory data = abi.encodeWithSelector(\\n            IERC721CollectionV2.initialize.selector,\\n            _name,\\n            _symbol,\\n            _baseURI,\\n            _creator,\\n            true, // Collection should be completed\\n            false, // Collection should start disapproved\\n            rarities,\\n            _items\\n        );\\n\\n        (bool success,) = _forwarder.forwardCall(address(_factory), abi.encodeWithSelector(_factory.createCollection.selector, _salt, data));\\n        require(\\n            success,\\n             \\\"CollectionManager#createCollection: FORWARD_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n    * @notice Manage a collection\\n    * @param _forwarder - forwarder contract owner of the collection factory\\n    * @param _collection - collection to be managed\\n    * @param _data - call data to be used\\n    */\\n    function manageCollection(IForwarder _forwarder, IERC721CollectionV2 _collection, bytes calldata _data) external {\\n        require(address(_forwarder) != address(this), \\\"CollectionManager#manageCollection: FORWARDER_CANT_BE_THIS\\\");\\n        require(\\n            _msgSender() == committee,\\n            \\\"CollectionManager#manageCollection: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        (bytes4 method) = abi.decode(_data, (bytes4));\\n        require(allowedCommitteeMethods[method], \\\"CollectionManager#manageCollection: COMMITTEE_METHOD_NOT_ALLOWED\\\");\\n\\n        bool success;\\n        bytes memory res;\\n\\n        (success, res) = address(_collection).staticcall(abi.encodeWithSelector(_collection.COLLECTION_HASH.selector));\\n        require(\\n            success && abi.decode(res, (bytes32)) == keccak256(\\\"Decentraland Collection\\\"),\\n            \\\"CollectionManager#manageCollection: INVALID_COLLECTION\\\"\\n        );\\n\\n        (success,) = _forwarder.forwardCall(address(_collection), _data);\\n        require(\\n            success,\\n            \\\"CollectionManager#manageCollection: FORWARD_FAILED\\\"\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\ninterface IForwarder {\\n   function forwardCall(address _address, bytes calldata _data) external returns (bool, bytes memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721CollectionFactoryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IERC721CollectionFactoryV2 {\\n   function createCollection(bytes32 _salt, bytes memory _data) external returns (address addr);\\n    function transferOwnership(address newOwner) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRarities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IRarities {\\n\\n    struct Rarity {\\n        string name;\\n        uint256 maxSupply;\\n        uint256 price;\\n    }\\n\\n    function getRarityByName(string calldata rarity) external view returns (Rarity memory);\\n}\"\r\n    },\r\n    \"contracts/collections/v2/ERC721BaseCollectionV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/IRarities.sol\\\";\\nimport \\\"../../commons//OwnableInitializable.sol\\\";\\nimport \\\"../../commons//NativeMetaTransaction.sol\\\";\\nimport \\\"../../tokens/ERC721Initializable.sol\\\";\\nimport \\\"../../libs/String.sol\\\";\\n\\nabstract contract ERC721BaseCollectionV2 is OwnableInitializable, ERC721Initializable, NativeMetaTransaction {\\n    using String for bytes32;\\n    using String for uint256;\\n    using String for address;\\n    using SafeMath for uint256;\\n\\n    bytes32 constant public COLLECTION_HASH = keccak256(\\\"Decentraland Collection\\\");\\n    uint8 constant public ITEM_ID_BITS = 40;\\n    uint8 constant public ISSUED_ID_BITS = 216;\\n    uint40 constant public MAX_ITEM_ID = type(uint40).max;\\n    uint216 constant public MAX_ISSUED_ID = type(uint216).max;\\n    bytes32 constant internal EMPTY_CONTENT = bytes32(0);\\n\\n    struct ItemParam {\\n        string rarity;\\n        uint256 price;\\n        address beneficiary;\\n        string metadata;\\n    }\\n\\n    struct Item {\\n        string rarity;\\n        uint256 maxSupply; // max supply\\n        uint256 totalSupply; // current supply\\n        uint256 price;\\n        address beneficiary;\\n        string metadata;\\n        string contentHash; // used for safe purposes\\n    }\\n\\n    IRarities public rarities;\\n\\n    // Roles\\n    address public creator;\\n    mapping(address => bool) public globalMinters;\\n    mapping(address => bool) public globalManagers;\\n    mapping(uint256 => mapping (address => uint256)) public itemMinters;\\n    mapping(uint256 => mapping (address => bool)) public itemManagers;\\n\\n    Item[] public items;\\n\\n    // Status\\n    uint256 public createdAt;\\n    bool public isInitialized;\\n    bool public isCompleted;\\n    bool public isEditable;\\n    bool public isApproved;\\n\\n    event BaseURI(string _oldBaseURI, string _newBaseURI);\\n    event SetGlobalMinter(address indexed _minter, bool _value);\\n    event SetGlobalManager(address indexed _manager, bool _value);\\n    event SetItemMinter(uint256 indexed _itemId, address indexed _minter, uint256 _value);\\n    event SetItemManager(uint256 indexed _itemId, address indexed _manager, bool _value);\\n\\n    event AddItem(uint256 indexed _itemId, Item _item);\\n    event RescueItem(uint256 indexed _itemId, string _contentHash, string _metadata);\\n    event Issue(address indexed _beneficiary, uint256 indexed _tokenId, uint256 indexed _itemId, uint256 _issuedId, address _caller);\\n    event UpdateItemData(uint256 indexed _itemId, uint256 _price, address _beneficiary, string _metadata);\\n    event CreatorshipTransferred(address indexed _previousCreator, address indexed _newCreator);\\n    event SetApproved(bool _previousValue, bool _newValue);\\n    event SetEditable(bool _previousValue, bool _newValue);\\n    event Complete();\\n\\n   /*\\n    * Init functions\\n    */\\n\\n    /**\\n     * @notice Init the contract\\n     */\\n    function initImplementation() public {\\n        require(!isInitialized, \\\"initialize: ALREADY_INITIALIZED\\\");\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * @notice Create the contract\\n     * @param _name - name of the contract\\n     * @param _symbol - symbol of the contract\\n     * @param _baseURI - base URI for token URIs\\n     * @param _creator - creator address\\n     * @param _shouldComplete - Whether the collection should be completed by the end of this call\\n     * @param _isApproved - Whether the collection should be approved by the end of this call\\n     * @param _rarities - rarities address\\n     * @param _items - items to be added\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseURI,\\n        address _creator,\\n        bool _shouldComplete,\\n        bool _isApproved,\\n        IRarities _rarities,\\n        ItemParam[] memory _items\\n    ) external virtual {\\n        initImplementation();\\n\\n        require(_creator != address(0), \\\"initialize: INVALID_CREATOR\\\");\\n        require(address(_rarities) != address(0), \\\"initialize: INVALID_RARITIES\\\");\\n\\n        // Ownable init\\n        _initOwnable();\\n        // EIP712 init\\n        _initializeEIP712('Decentraland Collection', '2');\\n        // ERC721 init\\n        _initERC721(_name, _symbol);\\n        // Base URI init\\n        setBaseURI(_baseURI);\\n        // Creator init\\n        creator = _creator;\\n        // Rarities init\\n        rarities = _rarities;\\n        // Items init\\n        _addItems(_items);\\n\\n        if (_shouldComplete) {\\n            _completeCollection();\\n        }\\n\\n        isApproved = _isApproved;\\n\\n        isEditable = true;\\n        createdAt = block.timestamp;\\n    }\\n\\n    /*\\n    * Roles checkers\\n    */\\n\\n    function _isCreator() internal view returns (bool) {\\n        return creator == _msgSender();\\n    }\\n\\n    function _isManager(uint256 _itemId) internal view returns (bool) {\\n        address sender = _msgSender();\\n        return globalManagers[sender] || itemManagers[_itemId][sender];\\n    }\\n\\n    modifier onlyCreator() {\\n        require(\\n            _isCreator(),\\n            \\\"onlyCreator: CALLER_IS_NOT_CREATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n    * Role functions\\n    */\\n\\n    /**\\n     * @notice Set allowed account to manage items.\\n     * @param _minters - minter addresses\\n     * @param _values - values array\\n     */\\n    function setMinters(address[] calldata _minters, bool[] calldata _values) external onlyCreator {\\n        require(\\n            _minters.length == _values.length,\\n            \\\"setMinters: LENGTH_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _minters.length; i++) {\\n            address minter = _minters[i];\\n            bool value = _values[i];\\n            require(minter != address(0), \\\"setMinters: INVALID_MINTER_ADDRESS\\\");\\n            require(globalMinters[minter] != value, \\\"setMinters: VALUE_IS_THE_SAME\\\");\\n\\n            globalMinters[minter] = value;\\n            emit SetGlobalMinter(minter, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set allowed account to mint items.\\n     * @param _itemIds - item ids\\n     * @param _minters - minter addresses\\n     * @param _values - values array\\n     */\\n    function setItemsMinters(\\n        uint256[] calldata _itemIds,\\n        address[] calldata _minters,\\n        uint256[] calldata _values\\n    ) external onlyCreator {\\n        require(\\n            _itemIds.length == _minters.length  && _minters.length == _values.length,\\n            \\\"setItemsMinters: LENGTH_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _minters.length; i++) {\\n            address minter = _minters[i];\\n            uint256 itemId = _itemIds[i];\\n            uint256 value = _values[i];\\n            require(minter != address(0), \\\"setItemsMinters: INVALID_MINTER_ADDRESS\\\");\\n            require(itemId < items.length, \\\"setItemsMinters: ITEM_DOES_NOT_EXIST\\\");\\n            require(itemMinters[itemId][minter] != value, \\\"setItemsMinters: VALUE_IS_THE_SAME\\\");\\n\\n            itemMinters[itemId][minter] = value;\\n            emit SetItemMinter(itemId, minter, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set allowed account to manage items.\\n     * @param _managers - Address allowed to manage items\\n     * @param _values - Whether is allowed or not\\n     */\\n    function setManagers(address[] calldata _managers, bool[] calldata _values) external onlyCreator {\\n        require(\\n            _managers.length == _values.length,\\n            \\\"setManagers: LENGTH_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _managers.length; i++) {\\n            address manager = _managers[i];\\n            bool value = _values[i];\\n            require(manager != address(0), \\\"setManagers: INVALID_MANAGER_ADDRESS\\\");\\n            require(globalManagers[manager] != value, \\\"setManagers: VALUE_IS_THE_SAME\\\");\\n\\n            globalManagers[manager] = value;\\n            emit SetGlobalManager(manager, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set allowed account to manage items.\\n     * @param _itemIds - item ids to set managers\\n     * @param _managers - Addresses allowed to manage items\\n     * @param _values - Whether is allowed or not\\n     */\\n    function setItemsManagers(\\n        uint256[] calldata _itemIds,\\n        address[] calldata _managers,\\n        bool[] calldata _values\\n    ) external onlyCreator {\\n        require(\\n            _itemIds.length == _managers.length && _managers.length == _values.length,\\n            \\\"setItemsManagers: LENGTH_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _managers.length; i++) {\\n            address manager = _managers[i];\\n            uint256 itemId = _itemIds[i];\\n            bool value = _values[i];\\n            require(manager != address(0), \\\"setItemsManagers: INVALID_MANAGER_ADDRESS\\\");\\n            require(itemId < items.length, \\\"setItemsManagers: ITEM_DOES_NOT_EXIST\\\");\\n            require(itemManagers[itemId][manager] != value, \\\"setItemsManagers: VALUE_IS_THE_SAME\\\");\\n\\n            itemManagers[itemId][manager] = value;\\n            emit SetItemManager(itemId, manager, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev Forced owner to check against msg.sender always\\n     */\\n    function transferCreatorship(address _newCreator) external virtual {\\n        address sender = _msgSender();\\n        require(sender == owner() || sender == creator, \\\"transferCreatorship: CALLER_IS_NOT_OWNER_OR_CREATOR\\\");\\n        require(_newCreator != address(0), \\\"transferCreatorship: INVALID_CREATOR_ADDRESS\\\");\\n\\n        emit CreatorshipTransferred(creator, _newCreator);\\n        creator = _newCreator;\\n    }\\n\\n    /*\\n    * Items functions\\n    */\\n\\n    /**\\n     * @notice Add items to the collection.\\n     * @param _items - items to add\\n     */\\n    function addItems(ItemParam[] memory _items) external virtual onlyOwner {\\n        require(!isCompleted, \\\"_addItem: COLLECTION_COMPLETED\\\");\\n\\n        _addItems(_items);\\n    }\\n\\n    /**\\n     * @notice Edit items\\n     * @param _itemIds - items ids to edit\\n     * @param _prices - new prices\\n     * @param _beneficiaries - new beneficiaries\\n     */\\n    function editItemsData(\\n        uint256[] calldata _itemIds,\\n        uint256[] calldata _prices,\\n        address[] calldata _beneficiaries,\\n        string[] calldata _metadatas\\n    ) external virtual {\\n        // Check lengths\\n        require(\\n            _itemIds.length == _prices.length &&\\n            _prices.length == _beneficiaries.length &&\\n            _beneficiaries.length == _metadatas.length,\\n            \\\"editItemsData: LENGTH_MISMATCH\\\"\\n        );\\n\\n        require(\\n            isEditable,\\n            \\\"editItemsData: COLLECTION_NOT_EDITABLE\\\"\\n        );\\n\\n        // Check item id\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            uint256 itemId = _itemIds[i];\\n            uint256 price = _prices[i];\\n            address beneficiary = _beneficiaries[i];\\n            string memory metadata = _metadatas[i];\\n\\n            require(_isCreator() || _isManager(itemId), \\\"editItemsData: CALLER_IS_NOT_CREATOR_OR_MANAGER\\\");\\n            require(itemId < items.length, \\\"editItemsData: ITEM_DOES_NOT_EXIST\\\");\\n            require(\\n                price > 0 && beneficiary != address(0) || price == 0 && beneficiary == address(0),\\n                \\\"editItemsData: INVALID_PRICE_AND_BENEFICIARY\\\"\\n            );\\n            require(bytes(metadata).length > 0, \\\"editItemsData: EMPTY_METADATA\\\");\\n\\n            Item storage item = items[itemId];\\n\\n            require(\\n                !isApproved || keccak256(abi.encode(item.metadata)) == keccak256(abi.encode(metadata)),\\n                \\\"editItemsData: CAN_NOT_EDIT_METADATA\\\"\\n            );\\n\\n            item.price = price;\\n            item.beneficiary = beneficiary;\\n            item.metadata = metadata;\\n\\n            emit UpdateItemData(itemId, price, beneficiary, metadata);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add new items to the collection.\\n     * @dev The item should follow:\\n     * rarity: should be one of the RARITY enum\\n     * totalSupply: starts in 0\\n     * metadata: shouldn't be empty\\n     * price & beneficiary: is the price is > 0, a beneficiary should be passed. If not, price and\\n     *   beneficiary should be empty.\\n     * contentHash: starts empty\\n     * @param _items - items to add\\n     */\\n    function _addItems(ItemParam[] memory _items) internal {\\n        require(_items.length > 0, \\\"_addItems: EMPTY_ITEMS\\\");\\n\\n        IRarities.Rarity memory rarity;\\n        bytes32 lastRarityKey;\\n\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            ItemParam memory _item = _items[i];\\n            bytes32 rarityKey = keccak256(bytes(_item.rarity));\\n\\n            if (lastRarityKey != rarityKey) {\\n                rarity = rarities.getRarityByName(_item.rarity);\\n                lastRarityKey = rarityKey;\\n\\n                require(\\n                    rarity.maxSupply > 0 && rarity.maxSupply <= MAX_ISSUED_ID,\\n                    \\\"_addItem: INVALID_RARITY\\\"\\n                );\\n            }\\n\\n            require(bytes(_item.metadata).length > 0, \\\"_addItem: EMPTY_METADATA\\\");\\n            require(\\n                _item.price > 0 && _item.beneficiary != address(0) || _item.price == 0 && _item.beneficiary == address(0),\\n                \\\"_addItem: INVALID_PRICE_AND_BENEFICIARY\\\"\\n            );\\n\\n            uint256 newItemId = items.length;\\n            require(newItemId < MAX_ITEM_ID, \\\"_addItem: MAX_ITEM_ID_REACHED\\\");\\n\\n            Item memory item = Item({\\n                rarity: rarity.name,\\n                maxSupply: rarity.maxSupply,\\n                totalSupply: 0,\\n                price: _item.price,\\n                beneficiary: _item.beneficiary,\\n                metadata: _item.metadata,\\n                contentHash: ''\\n            });\\n\\n            items.push(item);\\n\\n            emit AddItem(newItemId, item);\\n        }\\n    }\\n\\n    /**\\n     * @notice Issue tokens by item ids.\\n     * @dev Will throw if the items have reached its maximum or is invalid\\n     * @param _beneficiaries - owner of the tokens\\n     * @param _itemIds - item ids\\n     */\\n    function issueTokens(address[] calldata _beneficiaries, uint256[] calldata _itemIds) external virtual {\\n        require(isMintingAllowed(), \\\"issueTokens: MINT_NOT_ALLOWED\\\");\\n        require(_beneficiaries.length == _itemIds.length, \\\"issueTokens: LENGTH_MISMATCH\\\");\\n\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            _issueToken(_beneficiaries[i], _itemIds[i], sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Issue a new token of the specified item.\\n     * @dev Will throw if the item has reached its maximum or is invalid\\n     * @param _beneficiary - owner of the token\\n     * @param _itemId - item id\\n     * @param _sender - transaction sender\\n     */\\n    function _issueToken(address _beneficiary, uint256 _itemId, address _sender) internal virtual {\\n        if (!(_isCreator() || globalMinters[_sender]))  {\\n            uint256 allowance = itemMinters[_itemId][_sender];\\n\\n            require(allowance > 0, \\\"_issueToken: CALLER_CAN_NOT_MINT\\\");\\n\\n            if (allowance != type(uint256).max) {\\n                itemMinters[_itemId][_sender]--;\\n            }\\n        }\\n\\n        // Check item id\\n        require(_itemId < items.length, \\\"_issueToken: ITEM_DOES_NOT_EXIST\\\");\\n\\n        Item storage item = items[_itemId];\\n        uint256 currentIssuance = item.totalSupply.add(1);\\n\\n        // Check issuance\\n        require(currentIssuance <= item.maxSupply, \\\"_issueToken: ITEM_EXHAUSTED\\\");\\n\\n        // Encode token id\\n        uint256 tokenId = encodeTokenId(_itemId, currentIssuance);\\n\\n        // Increase issuance\\n        item.totalSupply = currentIssuance;\\n\\n        // Mint token to beneficiary\\n        super._mint(_beneficiary, tokenId);\\n\\n        // Log\\n        emit Issue(_beneficiary, tokenId, _itemId, currentIssuance, _sender);\\n    }\\n\\n    /**\\n     * @notice Rescue an item by providing new metadata and/or content hash\\n     * @dev Only the owner can rescue an item. This function should be used\\n     * to resolve a dispute or fix a broken metadata or hashContent item\\n     * @param _itemIds - Item ids to be fixed\\n     * @param _contentHashes - New items content hash\\n     * @param _metadatas - New items metadata\\n     */\\n    function rescueItems(\\n        uint256[] calldata _itemIds,\\n        string[] calldata _contentHashes,\\n        string[] calldata _metadatas\\n    ) external onlyOwner {\\n        // Check lengths\\n        require(\\n            _itemIds.length == _contentHashes.length && _contentHashes.length == _metadatas.length,\\n            \\\"rescueItems: LENGTH_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            uint256 itemId = _itemIds[i];\\n            require(itemId < items.length, \\\"rescueItems: ITEM_DOES_NOT_EXIST\\\");\\n\\n            Item storage item = items[itemId];\\n\\n            string memory contentHash = _contentHashes[i];\\n            string memory metadata = _metadatas[i];\\n\\n            item.contentHash = contentHash;\\n\\n            if (bytes(metadata).length > 0) {\\n                item.metadata = metadata;\\n            }\\n\\n            emit RescueItem(itemId, contentHash, item.metadata);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the amount of item in the collection\\n     * @return Amount of items in the collection\\n     */\\n    function itemsCount() external view returns (uint256) {\\n        return items.length;\\n    }\\n\\n    /*\\n    * Status functions\\n    */\\n\\n    /**\\n     * @notice Get whether minting is allowed\\n     * @return boolean whether minting is allowed or not\\n     */\\n    function isMintingAllowed() public view returns (bool) {\\n        return isCompleted && isApproved;\\n    }\\n\\n    /**\\n     * @notice Complete the collection.\\n     * @dev Disable forever the possibility of adding new items in the collection.\\n     * The issuance is still allowed.\\n     */\\n    function completeCollection() external onlyCreator {\\n        require(!isCompleted, \\\"completeCollection: COLLECTION_ALREADY_COMPLETED\\\");\\n\\n        _completeCollection();\\n    }\\n\\n    /**\\n     * @notice Complete the collection.\\n     * @dev Internal. Disable forever the possibility of adding new items in the collection.\\n     * The issuance is still allowed.\\n     */\\n    function _completeCollection() internal {\\n        isCompleted = true;\\n        emit Complete();\\n    }\\n\\n    /**\\n     * @notice Approve a collection\\n     */\\n    function setApproved(bool _value) external virtual onlyOwner {\\n        require(isApproved != _value, \\\"setApproved: VALUE_IS_THE_SAME\\\");\\n\\n        emit SetApproved(isApproved, _value);\\n\\n        isApproved = _value;\\n    }\\n\\n    /**\\n     * @notice Set whether the collection can be editable or not.\\n     * @dev This property is used off-chain to check whether the items of the collection\\n     * can be updated or not\\n     * @param _value - Value to set\\n     */\\n    function setEditable(bool _value) external onlyOwner {\\n        require(isEditable != _value, \\\"setEditable: VALUE_IS_THE_SAME\\\");\\n\\n        emit SetEditable(isEditable, _value);\\n\\n        isEditable = _value;\\n    }\\n\\n    /*\\n    * URI functions\\n    */\\n\\n    /**\\n     * @notice Set Base URI\\n     * @param _baseURI - base URI for token URIs\\n     */\\n    function setBaseURI(string memory _baseURI) public onlyOwner {\\n        emit BaseURI(baseURI(), _baseURI);\\n        _setBaseURI(_baseURI);\\n    }\\n\\n    /**\\n     * @notice Returns an URI for a given token ID.\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param _tokenId - uint256 ID of the token queried\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        require(_exists(_tokenId), \\\"tokenURI: INVALID_TOKEN_ID\\\");\\n\\n        (uint256 itemId, uint256 issuedId) = decodeTokenId(_tokenId);\\n\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n\\n        return string(\\n            abi.encodePacked(\\n                baseURI(),\\n                id.uintToString(),\\n                \\\"/\\\",\\n                \\\"0x\\\",\\n                address(this).addressToString(),\\n                \\\"/\\\",\\n                itemId.uintToString(),\\n                \\\"/\\\",\\n                issuedId.uintToString()\\n            )\\n        );\\n    }\\n\\n    /*\\n    * Batch Transfer functions\\n    */\\n\\n    /**\\n     * @notice Transfers the ownership of given tokens ID to another address.\\n     * Usage of this method is discouraged, use {safeBatchTransferFrom} whenever possible.\\n     * Requires the msg.sender to be the owner, approved, or operator.\\n     * @param _from current owner of the token\\n     * @param _to address to receive the ownership of the given token ID\\n     * @param _tokenIds uint256 ID of the token to be transferred\\n     */\\n    function batchTransferFrom(address _from, address _to, uint256[] calldata _tokenIds) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            transferFrom(_from, _to, _tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely transfers the ownership of given token IDs to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param _from - current owner of the token\\n     * @param _to - address to receive the ownership of the given token ID\\n     * @param _tokenIds - uint256 ID of the tokens to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _tokenIds, bytes memory _data) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            safeTransferFrom(_from, _to, _tokenIds[i], _data);\\n        }\\n    }\\n\\n    /*\\n    * Token Utils functions\\n    */\\n\\n    /**\\n     * @notice Encode token id\\n     * @dev itemId (`itemIdBits` bits) + issuedId (`issuedIdBits` bits)\\n     * @param _itemId - item id\\n     * @param _issuedId - issued id\\n     * @return id uint256 of the encoded id\\n     */\\n    function encodeTokenId(uint256 _itemId, uint256 _issuedId) public pure returns (uint256 id) {\\n        require(_itemId <= MAX_ITEM_ID, \\\"encodeTokenId: INVALID_ITEM_ID\\\");\\n        require(_issuedId <= MAX_ISSUED_ID, \\\"encodeTokenId: INVALID_ISSUED_ID\\\");\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            id := or(shl(ISSUED_ID_BITS, _itemId), _issuedId)\\n        }\\n    }\\n\\n    /**\\n     * @notice Decode token id\\n     * @dev itemId (`itemIdBits` bits) + issuedId (`issuedIdBits` bits)\\n     * @param _id - token id\\n     * @return itemId uint256 of the item id\\n     * @return issuedId uint256 of the issued id\\n     */\\n    function decodeTokenId(uint256 _id) public pure returns (uint256 itemId, uint256 issuedId) {\\n        uint256 mask = MAX_ISSUED_ID;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            itemId := shr(ISSUED_ID_BITS, _id)\\n            issuedId := and(mask, _id)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../commons/ContextMixin.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * This is the same contract at `openzeppelin/contracts 3.1.0` but `tokenURI` was changed to virtual override\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\nabstract contract ERC721Initializable is ContextMixin, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function _initERC721(string memory __name, string memory __symbol) internal {\\n        _name = __name;\\n        _symbol = __symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mecanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/collections/v2/ERC721CollectionV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC721BaseCollectionV2.sol\\\";\\n\\n\\ncontract ERC721CollectionV2 is ERC721BaseCollectionV2 {\\n    constructor() {}\\n}\\n\"\r\n    },\r\n    \"contracts/commons/MinimalProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract MinimalProxyFactory {\\n    using Address for address;\\n\\n    address public implementation;\\n    bytes public code;\\n    bytes32 public codeHash;\\n\\n    event ProxyCreated(address indexed _address, bytes32 _salt);\\n    event ImplementationSet(address indexed _implementation, bytes32 _codeHash, bytes _code);\\n\\n    /**\\n    * @notice Create the contract\\n    * @param _implementation - contract implementation\\n    */\\n    constructor(address _implementation) {\\n        _setImplementation(_implementation);\\n    }\\n\\n    /**\\n    * @notice Create a contract\\n    * @param _salt - arbitrary 32 bytes hexa\\n    * @param _data - call data used to call the contract already created if passed\\n    * @return addr - address of the contract created\\n    */\\n    function _createProxy(bytes32 _salt, bytes memory _data) internal virtual returns (address addr) {\\n        bytes memory slotcode = code;\\n        bytes32 salt = keccak256(abi.encodePacked(_salt, msg.sender, _data));\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            addr := create2(0, add(slotcode, 0x20), mload(slotcode), salt)\\n        }\\n        require(addr != address(0), \\\"MinimalProxyFactory#createProxy: CREATION_FAILED\\\");\\n\\n        emit ProxyCreated(addr, _salt);\\n\\n        if (_data.length > 0) {\\n            (bool success,) = addr.call(_data);\\n            require(success, \\\"MinimalProxyFactory#createProxy: CALL_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n    * @notice Get a deterministics contract address\\n    * @param _salt - arbitrary 32 bytes hexa\\n    * @param _address - supposed sender of the transaction\\n    * @return address of the deterministic contract\\n    */\\n    function getAddress(bytes32 _salt, address _address, bytes calldata _data) external view returns (address) {\\n        return address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        byte(0xff),\\n                        address(this),\\n                        keccak256(abi.encodePacked(_salt, _address, _data)),\\n                        codeHash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n    * @notice Set the contract implementation\\n    * @param _implementation - contract implementation\\n    */\\n    function _setImplementation(address _implementation) internal {\\n        require(\\n            _implementation != address(0) && _implementation.isContract(),\\n            \\\"MinimalProxyFactoryV2#_setImplementation: INVALID_IMPLEMENTATION\\\"\\n        );\\n        // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n        code = abi.encodePacked(\\n            hex\\\"3d602d80600a3d3981f3363d3d373d3d3d363d73\\\",\\n            _implementation,\\n            hex\\\"5af43d82803e903d91602b57fd5bf3\\\"\\n        );\\n        codeHash = keccak256(code);\\n        implementation = _implementation;\\n\\n        emit ImplementationSet(implementation, codeHash, code);\\n    }\\n}\"\r\n    },\r\n    \"contracts/factories/v2/ERC721CollectionFactoryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../commons/MinimalProxyFactory.sol\\\";\\n\\ncontract ERC721CollectionFactoryV2 is Ownable, MinimalProxyFactory {\\n\\n    address[] public collections;\\n    mapping(address => bool) public isCollectionFromFactory;\\n\\n    /**\\n    * @notice Create the contract\\n    * @param _owner - contract owner\\n    * @param _implementation - contract implementation\\n    */\\n    constructor(address _owner, address _implementation) MinimalProxyFactory(_implementation) {\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @notice Create a collection\\n    * @param _salt - arbitrary 32 bytes hexa\\n    * @param _data - call data used to call the contract already created if passed\\n    * @return addr - address of the contract created\\n    */\\n    function createCollection(bytes32 _salt, bytes memory _data) external onlyOwner returns (address addr) {\\n        // Deploy a new collection\\n        addr = _createProxy(_salt, _data);\\n\\n        // Transfer ownership to the owner after deployment\\n        Ownable(addr).transferOwnership(owner());\\n\\n        // Set variables for handle data faster\\n        // This use storage and therefore make deployments expensive.\\n        collections.push(addr);\\n        isCollectionFromFactory[addr] = true;\\n    }\\n\\n    /**\\n    * @notice Get the amount of collections deployed\\n    * @return amount of collections deployed\\n    */\\n    function collectionsSize() external view returns (uint256) {\\n        return collections.length;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/Forwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract Forwarder is Ownable {\\n\\n    address public caller;\\n\\n    event CallerSet(address indexed _oldCaller, address indexed _newCaller);\\n\\n    /**\\n    * @notice Create the contract\\n    * @param _owner - contract owner\\n    * @param _caller - target address to call\\n    */\\n    constructor(address _owner, address _caller) {\\n        setCaller(_caller);\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @notice Set the caller allowed to forward calls\\n    * @param _newCaller - target address to call\\n    */\\n    function setCaller(address _newCaller) public onlyOwner {\\n        emit CallerSet(caller, _newCaller);\\n\\n        caller = _newCaller;\\n    }\\n\\n    /**\\n    * @notice Forward a call\\n    * @param _target - target address to call\\n    * @param _data - call data to be used\\n    * @return whether the call was a success or not\\n    * @return response in bytes if any\\n    */\\n    function forwardCall(address _target, bytes calldata _data) external payable returns (bool, bytes memory) {\\n        require(\\n            msg.sender == caller || msg.sender == owner(),\\n            \\\"Owner#forwardCall: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n       return _target.call{value: msg.value}(_data);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct ERC721BaseCollectionV2.Item\",\"name\":\"_item\",\"type\":\"tuple\"}],\"name\":\"AddItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Complete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newCreator\",\"type\":\"address\"}],\"name\":\"CreatorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_issuedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"RescueItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_previousValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"SetApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_previousValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"SetEditable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"SetGlobalManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"SetGlobalMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"SetItemManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetItemMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"UpdateItemData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLECTION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUED_ID_BITS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ITEM_ID_BITS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ISSUED_ID\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ITEM_ID\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ERC721BaseCollectionV2.ItemParam[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"addItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"decodeTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuedId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_metadatas\",\"type\":\"string[]\"}],\"name\":\"editItemsData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuedId\",\"type\":\"uint256\"}],\"name\":\"encodeTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_shouldComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"},{\"internalType\":\"contract IRarities\",\"name\":\"_rarities\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ERC721BaseCollectionV2.ItemParam[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEditable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"}],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"itemManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"itemMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"contract IRarities\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_contentHashes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_metadatas\",\"type\":\"string[]\"}],\"name\":\"rescueItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setEditable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"setItemsManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setItemsMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"setManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"setMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721CollectionV2", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d745464168210e71c3fdff50a2eaa16478dfce18d2f4490912866698f8e65a9d"}