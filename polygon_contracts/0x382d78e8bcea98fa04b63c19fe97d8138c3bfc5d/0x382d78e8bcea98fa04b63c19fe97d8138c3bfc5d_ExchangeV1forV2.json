{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ExchangeV1forV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//ERC20\u898f\u683c\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u6e96\u5099\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract  ExchangeV1forV2 is Ownable {\\n\\n    IERC20 public jpyc_v1; // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\\n    IERC20 public jpyc_v2; // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\\n\\tuint8 public incentive; // \u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u7387\\n\\tuint8 constant inecentive_max = 20; // \u6700\u5927\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u7387\\n\\n    // _incentive\u306f\u767e\u5206\u7387\u3067\u8868\u793a\\n\\tconstructor(address _jpyc_v1, address _jpyc_v2, uint8 _incentive) {\\n\\t\\tjpyc_v1 = IERC20(_jpyc_v1);\\n\\t\\tjpyc_v2 = IERC20(_jpyc_v2);\\n\\t\\tsetIncentive(_incentive);\\n\\t}\\n\\n    // JPYCv1\u3068\u4ea4\u63db\\n\\tfunction swap() external {\\n\\t\\tuint256 jpyc_v1_amount = jpyc_v1.balanceOf(msg.sender);\\n\\t\\tuint256 jpyc_v2_amount = jpyc_v1_amount * (100 + incentive) / 100;\\n\\t\\tjpyc_v1.transferFrom(msg.sender, owner(), jpyc_v1_amount);\\n\\t\\tjpyc_v2.transferFrom(owner(), msg.sender, jpyc_v2_amount);\\n\\t}\\n\\n\\t// \u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u306e\u8a2d\u5b9a\\n\\tfunction setIncentive(uint8 _incentive) onlyOwner public {\\n\\t\\trequire(_incentive <= inecentive_max, \\\"_incentive is greater than max incentive\\\");\\n\\t\\tincentive = _incentive;\\n\\t}\\n\\n    // ERC20\u3092\u5f15\u304d\u51fa\u3059\\n\\t// JPYCv1\u3068JPYCv2\u306f\u3053\u306e\u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u3067\u306f\u6240\u6709\u3057\u306a\u3044\u304c\u5ff5\u306e\u70ba\\n\\tfunction withdrawERC20(address _tokenAddress, address to) onlyOwner external {\\n\\t\\tuint256 ERC20_amount = IERC20(_tokenAddress).balanceOf(address(this));\\n\\t\\tIERC20(_tokenAddress).transfer(to, ERC20_amount);\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 3000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jpyc_v1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jpyc_v2\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_incentive\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"incentive\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jpyc_v1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jpyc_v2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_incentive\",\"type\":\"uint8\"}],\"name\":\"setIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangeV1forV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "3000", "ConstructorArguments": "0000000000000000000000006ae7dfc73e0dde2aa99ac063dcf7e8a63265108c000000000000000000000000431d5dff03120afa4bdf332c61a6e1766ef37bdb0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}