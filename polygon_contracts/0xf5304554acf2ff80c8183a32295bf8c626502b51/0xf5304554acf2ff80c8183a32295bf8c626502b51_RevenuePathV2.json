{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@opengsn/contracts/src/ERC2771Recipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/core/RevenuePathV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SPWPL\\npragma solidity 0.8.15;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\n\\n/*******************************\\n * @title Revenue Path V2\\n * @notice The revenue path clone instance contract.\\n */\\n\\ninterface IReveelMainV2 {\\n    function getPlatformWallet() external view returns (address);\\n}\\n\\ncontract RevenuePathV2 is ERC2771Recipient, Ownable, Initializable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint32 public constant BASE = 1e7;\\n    uint8 public constant VERSION = 2;\\n\\n    //@notice Status to flag if fee is applicable to the revenue paths\\n    bool private feeRequired;\\n\\n    //@notice Status to flag if revenue path is immutable. True if immutable\\n    bool private isImmutable;\\n\\n    //@notice Fee percentage that will be applicable for additional tiers\\n    uint32 private platformFee;\\n\\n    //@notice address of origin factory\\n    address private mainFactory;\\n\\n    /** @notice For a given tier & address, the token revenue distribution proportion is returned\\n     *  @dev Index for tiers starts from 0. i.e, the first tier is marked 0 in the list.\\n     */\\n    mapping(uint256 => mapping(address => uint256)) private revenueProportion;\\n\\n    // @notice Amount of token released for a given wallet [token][wallet]=>[amount]\\n    mapping(address => mapping(address => uint256)) private released;\\n\\n    //@notice token tier limits for given token address and tier\\n    mapping(address => mapping(uint256 => uint256)) private tokenTierLimits;\\n\\n    mapping(address => uint256) private currentTokenTier;\\n\\n    // @notice Total token released from the revenue path for a given token address\\n    mapping(address => uint256) private totalTokenReleased;\\n\\n    // @notice Total token accounted for the revenue path for a given token address\\n    mapping(address => uint256) private totalTokenAccounted;\\n\\n    /**  @notice For a given token & wallet address, the amount of the token that can been withdrawn by the wallet\\n    [token][wallet]*/\\n    mapping(address => mapping(address => uint256)) private tokenWithdrawable;\\n\\n    // @notice Total amount of token distributed for a given tier at that time.\\n    //[token][tier]-> [distributed amount]\\n    mapping(address => mapping(uint256 => uint256)) private totalDistributed;\\n\\n    //@noitce Total fee accumulated by the revenue path and waiting to be collected.\\n    mapping(address => uint256) private feeAccumulated;\\n\\n    struct RevenuePath {\\n        address[] walletList;\\n    }\\n\\n    struct PathInfo {\\n        uint32 platformFee;\\n        bool isImmutable;\\n        address factory;\\n        address forwarder;\\n    }\\n\\n    RevenuePath[] private revenueTiers;\\n\\n    /********************************\\n     *           EVENTS              *\\n     ********************************/\\n\\n    /** @notice Emits when token payment is withdrawn/claimed by a member\\n     * @param account The wallet for which ETH has been claimed for\\n     * @param payment The amount of ETH that has been paid out to the wallet\\n     */\\n    event PaymentReleased(address indexed account, address indexed token, uint256 indexed payment);\\n\\n    /** @notice Emits when ERC20 payment is withdrawn/claimed by a member\\n     * @param token The token address for which withdrawal is made\\n     * @param account The wallet address to which withdrawal is made\\n     * @param payment The amount of the given token the wallet has claimed\\n     */\\n    event ERC20PaymentReleased(address indexed token, address indexed account, uint256 indexed payment);\\n\\n    /** @notice Emits when tokens are distributed during withdraw or external distribution call\\n     *  @param token Address of token for distribution. Zero address for native token like ETH\\n     *  @param amount The amount of token distributed in wei\\n     *  @param tier The tier for which the distribution occured\\n     */\\n    event TokenDistributed(address indexed token, uint256 indexed amount, uint256 indexed tier);\\n\\n    /** @notice Emits on receive; mimics ERC20 Transfer\\n     *  @param from Address that deposited the eth\\n     *  @param value Amount of ETH deposited\\n     */\\n    event DepositETH(address indexed from, uint256 value);\\n\\n    /**\\n     *  @notice Emits when fee is distributed\\n     *  @param token The token address. Address 0 for native gas token like ETH\\n     *  @param amount The amount of fee deducted\\n     */\\n    event FeeDistributed(address indexed token, uint256 indexed amount);\\n\\n    /**\\n     *  @notice Emits when fee is released\\n     *  @param token The token address. Address 0 for native gas token like ETH\\n     *  @param amount The amount of fee released\\n     */\\n    event FeeReleased(address indexed token, uint256 indexed amount);\\n\\n    /**\\n     * emits when one or more revenue tiers are added\\n     *  @param wallets Array of arrays of wallet lists (each array is a tier)\\n     *  @param distributions Array of arrays of distr %s (each array is a tier)\\n     */\\n    event RevenueTierAdded(address[][] wallets, uint256[][] distributions);\\n\\n    /**\\n     * emits when one or more revenue tiers wallets/distributions are updated\\n     *  @param tierNumbers Array tier numbers being updated\\n     *  @param wallets Array of arrays of wallet lists (each array is a tier)\\n     *  @param distributions Array of arrays of distr %s (each array is a tier)\\n     */\\n    event RevenueTierUpdated(uint256[] tierNumbers, address[][] wallets, uint256[][] distributions);\\n\\n    /**\\n     * emits when one revenue tier's limit is updated\\n     *  @param tier tier number being updated\\n     *  @param tokenList Array of tokens in that tier\\n     *  @param newLimits Array of limits for those tokens\\n     */\\n    event TierLimitUpdated(uint256 tier, address[] tokenList, uint256[] newLimits);\\n\\n    /********************************\\n     *           MODIFIERS          *\\n     ********************************/\\n    /** @notice Entrant guard for mutable contract methods\\n     */\\n    modifier isMutable() {\\n        if (isImmutable) {\\n            revert RevenuePathNotMutable();\\n        }\\n        _;\\n    }\\n\\n    /********************************\\n     *           ERRORS          *\\n     ********************************/\\n\\n    /** @dev Reverts when passed wallet list and distribution list length is not equal\\n     * @param walletCount Length of wallet list\\n     * @param distributionCount Length of distribution list\\n     */\\n    error WalletAndDistrbutionCtMismatch(uint256 walletCount, uint256 distributionCount);\\n\\n    /** @dev Reverts when the member has zero  withdrawal balance available\\n     */\\n    error NoDuePayment();\\n\\n    /** @dev Reverts when immutable path attempts to use mutable methods\\n     */\\n    error RevenuePathNotMutable();\\n\\n    /** @dev Reverts when contract has insufficient token for withdrawal\\n     * @param contractBalance  The total balance of token available in the contract\\n     * @param requiredAmount The total amount of token requested for withdrawal\\n     */\\n    error InsufficentBalance(uint256 contractBalance, uint256 requiredAmount);\\n\\n    /**\\n     *  @dev Reverts when duplicate wallet entry is present during initialize, addition or updates\\n     */\\n    error DuplicateWalletEntry();\\n\\n    /**\\n     * @dev In case invalid zero address is provided for wallet address\\n     */\\n    error ZeroAddressProvided();\\n\\n    /**\\n     * @dev Reverts when zero distribution percentage is provided\\n     */\\n    error ZeroDistributionProvided();\\n\\n    /**\\n     * @dev Reverts when summation of distirbution is not equal to BASE\\n     */\\n    error TotalShareNot100();\\n\\n    /**\\n     * @dev Reverts when a tier not in existence or added is attempted for update\\n     */\\n    error OnlyExistingTiersCanBeUpdated();\\n\\n    /**\\n     * @dev Reverts when token already released is greater than the new limit that's being set for the tier.\\n     */\\n    error TokenLimitNotValid();\\n\\n    /**\\n     *  @dev Reverts when tier limit given is zero in certain cases\\n     */\\n    error TierLimitGivenZero();\\n\\n    /**\\n     * @dev Reverts when tier limit of a non-existant tier is attempted\\n     */\\n    error OnlyExistingTierLimitsCanBeUpdated();\\n\\n    /**\\n     * @dev The total numb of tokens and equivalent token limit list count mismatch\\n     */\\n    error TokensAndTierLimitMismatch(uint256 tokenCount, uint256 limitListCount);\\n\\n    /**\\n     * @dev The total tiers list and limits list length mismatch\\n     */\\n    error TotalTierLimitsMismatch(uint256 tiers, uint256 limits);\\n\\n    /**\\n     * @dev Reverts when final tier is attempted for updates\\n     */\\n    error FinalTierLimitNotUpdatable();\\n\\n    /********************************\\n     *           FUNCTIONS           *\\n     ********************************/\\n\\n    /**\\n     * @notice Receive ETH\\n     */\\n    receive() external payable {\\n        emit DepositETH(_msgSender(), msg.value);\\n    }\\n\\n    /** @notice Called for a given token to distribute, unallocated tokens to the respective tiers and wallet members\\n     *  @param token The address of the token\\n     */\\n    function distributePendingTokens(address token) public {\\n        uint256 pendingAmount = getPendingDistributionAmount(token);\\n        uint256 presentTier;\\n        uint256 currentTierDistribution;\\n        uint256 tokenLimit;\\n        uint256 tokenTotalDistributed;\\n        uint256 nextTierDistribution;\\n        while (pendingAmount > 0) {\\n            presentTier = currentTokenTier[token];\\n            tokenLimit = tokenTierLimits[token][presentTier];\\n            tokenTotalDistributed = totalDistributed[token][presentTier];\\n            if (tokenLimit > 0 && (tokenTotalDistributed + pendingAmount) > tokenLimit) {\\n                currentTierDistribution = tokenLimit - tokenTotalDistributed;\\n                nextTierDistribution = pendingAmount - currentTierDistribution;\\n            } else {\\n                currentTierDistribution = pendingAmount;\\n                nextTierDistribution = 0;\\n            }\\n\\n            if (currentTierDistribution > 0) {\\n                address[] memory walletMembers = revenueTiers[presentTier].walletList;\\n                uint256 totalWallets = walletMembers.length;\\n                uint256 feeDeduction;\\n                if (feeRequired && platformFee > 0) {\\n                    feeDeduction = ((currentTierDistribution * platformFee) / BASE);\\n                    feeAccumulated[token] += feeDeduction;\\n                    currentTierDistribution -= feeDeduction;\\n                    emit FeeDistributed(token, feeDeduction);\\n                }\\n\\n                for (uint256 i; i < totalWallets; ) {\\n                    tokenWithdrawable[token][walletMembers[i]] += ((currentTierDistribution *\\n                        revenueProportion[presentTier][walletMembers[i]]) / BASE);\\n                    unchecked {\\n                        i++;\\n                    }\\n                }\\n\\n                totalTokenAccounted[token] += (currentTierDistribution + feeDeduction);\\n                totalDistributed[token][presentTier] += (currentTierDistribution + feeDeduction);\\n                emit TokenDistributed(token, currentTierDistribution, presentTier);\\n            }\\n            pendingAmount = nextTierDistribution;\\n            if (nextTierDistribution > 0) {\\n                currentTokenTier[token] += 1;\\n            }\\n        }\\n    }\\n\\n    /** @notice Get the token amount that has not been allocated for in the revenue path\\n     *  @param token The token address\\n     */\\n    function getPendingDistributionAmount(address token) public view returns (uint256) {\\n        uint256 pathTokenBalance;\\n        if (token == address(0)) {\\n            pathTokenBalance = address(this).balance;\\n        } else {\\n            pathTokenBalance = IERC20(token).balanceOf(address(this));\\n        }\\n        uint256 pendingAmount = (pathTokenBalance + totalTokenReleased[token]) - totalTokenAccounted[token];\\n        return pendingAmount;\\n    }\\n\\n    /** @notice Initializes revenue path\\n     *  @param _walletList Nested array for wallet list across different tiers\\n     *  @param _distribution Nested array for distribution percentage across different tiers\\n     *  @param _tokenList A list of tokens for which limits will be set\\n     *  @param _limitSequence A nested array of limits for each token\\n     *  @param pathInfo A property object for the path details\\n     *  @param _owner Address of path owner\\n     */\\n    function initialize(\\n        address[][] memory _walletList,\\n        uint256[][] memory _distribution,\\n        address[] memory _tokenList,\\n        uint256[][] memory _limitSequence,\\n        PathInfo memory pathInfo,\\n        address _owner\\n    ) external initializer {\\n        uint256 totalTiers = _walletList.length;\\n        uint256 totalTokens = _tokenList.length;\\n        if (totalTiers != _distribution.length) {\\n            revert WalletAndDistrbutionCtMismatch({\\n                walletCount: _walletList.length,\\n                distributionCount: _distribution.length\\n            });\\n        }\\n\\n        if (totalTokens != _limitSequence.length) {\\n            revert TokensAndTierLimitMismatch({ tokenCount: totalTokens, limitListCount: _limitSequence.length });\\n        }\\n        for (uint256 i; i < totalTiers; ) {\\n            RevenuePath memory tier;\\n\\n            uint256 walletMembers = _walletList[i].length;\\n\\n            if (walletMembers != _distribution[i].length) {\\n                revert WalletAndDistrbutionCtMismatch({\\n                    walletCount: walletMembers,\\n                    distributionCount: _distribution[i].length\\n                });\\n            }\\n\\n            tier.walletList = _walletList[i];\\n\\n            uint256 totalShare;\\n            for (uint256 j; j < walletMembers; ) {\\n                address wallet = (_walletList[i])[j];\\n                if (revenueProportion[i][wallet] > 0) {\\n                    revert DuplicateWalletEntry();\\n                }\\n                if (wallet == address(0)) {\\n                    revert ZeroAddressProvided();\\n                }\\n                if ((_distribution[i])[j] == 0) {\\n                    revert ZeroDistributionProvided();\\n                }\\n                revenueProportion[i][wallet] = (_distribution[i])[j];\\n                totalShare += (_distribution[i])[j];\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n            if (totalShare != BASE) {\\n                revert TotalShareNot100();\\n            }\\n            revenueTiers.push(tier);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        for (uint256 k; k < totalTokens; ) {\\n            address token = _tokenList[k];\\n            for (uint256 m; m < totalTiers; ) {\\n                if ((totalTiers - 1) != _limitSequence[k].length) {\\n                    revert TotalTierLimitsMismatch({ tiers: totalTiers, limits: _limitSequence[k].length });\\n                }\\n                // set tier limits, except for final tier which has no limit\\n                if (m != totalTiers - 1) {\\n                    if (_limitSequence[k][m] == 0) {\\n                        revert TierLimitGivenZero();\\n                    }\\n                    tokenTierLimits[token][m] = _limitSequence[k][m];\\n                }\\n\\n                unchecked {\\n                    m++;\\n                }\\n            }\\n\\n            unchecked {\\n                k++;\\n            }\\n        }\\n\\n        if (revenueTiers.length > 1) {\\n            feeRequired = true;\\n        }\\n        mainFactory = pathInfo.factory;\\n        platformFee = pathInfo.platformFee;\\n        isImmutable = pathInfo.isImmutable;\\n        _transferOwnership(_owner);\\n        _setTrustedForwarder(pathInfo.forwarder);\\n    }\\n\\n    /** @notice Adding new revenue tiers\\n     *  @param _walletList a nested list of new wallets\\n     *  @param _distribution a nested list of corresponding distribution\\n     */\\n    function addRevenueTiers(address[][] calldata _walletList, uint256[][] calldata _distribution)\\n        external\\n        isMutable\\n        onlyOwner\\n    {\\n        if (_walletList.length != _distribution.length) {\\n            revert WalletAndDistrbutionCtMismatch({\\n                walletCount: _walletList.length,\\n                distributionCount: _distribution.length\\n            });\\n        }\\n\\n        uint256 listLength = _walletList.length;\\n        uint256 nextRevenueTier = revenueTiers.length;\\n\\n        for (uint256 i; i < listLength; ) {\\n            uint256 walletMembers = _walletList[i].length;\\n\\n            if (walletMembers != _distribution[i].length) {\\n                revert WalletAndDistrbutionCtMismatch({\\n                    walletCount: walletMembers,\\n                    distributionCount: _distribution[i].length\\n                });\\n            }\\n            RevenuePath memory tier;\\n            tier.walletList = _walletList[i];\\n            uint256 totalShares;\\n            for (uint256 j; j < walletMembers; ) {\\n                if (revenueProportion[nextRevenueTier][(_walletList[i])[j]] > 0) {\\n                    revert DuplicateWalletEntry();\\n                }\\n\\n                if ((_walletList[i])[j] == address(0)) {\\n                    revert ZeroAddressProvided();\\n                }\\n                if ((_distribution[i])[j] == 0) {\\n                    revert ZeroDistributionProvided();\\n                }\\n\\n                revenueProportion[nextRevenueTier][(_walletList[i])[j]] = (_distribution[i])[j];\\n                totalShares += (_distribution[i])[j];\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (totalShares != BASE) {\\n                revert TotalShareNot100();\\n            }\\n            revenueTiers.push(tier);\\n            nextRevenueTier += 1;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        if (!feeRequired) {\\n            feeRequired = true;\\n        }\\n        emit RevenueTierAdded(_walletList, _distribution);\\n    }\\n\\n    /** @notice Updating distribution for existing revenue tiers\\n     *  @param _walletList A nested list of wallet address\\n     *  @param _distribution A nested list of distribution percentage\\n     *  @param _tierNumbers A list of tier numbers to be updated\\n     */\\n    function updateRevenueTiers(\\n        address[][] calldata _walletList,\\n        uint256[][] calldata _distribution,\\n        uint256[] calldata _tierNumbers\\n    ) external isMutable onlyOwner {\\n        uint256 totalUpdates = _tierNumbers.length;\\n        if (_walletList.length != _distribution.length || _walletList.length != totalUpdates) {\\n            revert WalletAndDistrbutionCtMismatch({\\n                walletCount: _walletList.length,\\n                distributionCount: _distribution.length\\n            });\\n        }\\n\\n        uint256 totalTiers = revenueTiers.length;\\n\\n        for (uint256 i; i < totalUpdates; ) {\\n            uint256 totalWallets = _walletList[i].length;\\n            if (totalWallets != _distribution[i].length) {\\n                revert WalletAndDistrbutionCtMismatch({\\n                    walletCount: _walletList[i].length,\\n                    distributionCount: _distribution[i].length\\n                });\\n            }\\n            uint256 tier = _tierNumbers[i];\\n            if (tier >= totalTiers) {\\n                revert OnlyExistingTiersCanBeUpdated();\\n            }\\n\\n            address[] memory previousWalletList = revenueTiers[tier].walletList;\\n\\n            for (uint256 k; k < previousWalletList.length; ) {\\n                revenueProportion[tier][previousWalletList[k]] = 0;\\n                unchecked {\\n                    k++;\\n                }\\n            }\\n\\n            uint256 totalShares;\\n            address[] memory newWalletList = new address[](totalWallets);\\n            for (uint256 j; j < totalWallets; ) {\\n                address wallet = (_walletList[i])[j];\\n                if (revenueProportion[tier][wallet] > 0) {\\n                    revert DuplicateWalletEntry();\\n                }\\n\\n                if (wallet == address(0)) {\\n                    revert ZeroAddressProvided();\\n                }\\n                if ((_distribution[i])[j] == 0) {\\n                    revert ZeroDistributionProvided();\\n                }\\n                revenueProportion[tier][wallet] = (_distribution[i])[j];\\n                totalShares += (_distribution[i])[j];\\n                newWalletList[j] = wallet;\\n\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n            revenueTiers[tier].walletList = newWalletList;\\n            if (totalShares != BASE) {\\n                revert TotalShareNot100();\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        emit RevenueTierUpdated(_tierNumbers, _walletList, _distribution);\\n    }\\n\\n    /** @notice Update tier limits for given tokens for an existing tier\\n     * @param tokenList A list of tokens for which limits will be updated\\n     * @param newLimits A list of corresponding limits for the tokens\\n     * @param tier The tier for which limits are being updated\\n     */\\n    function updateLimits(\\n        address[] calldata tokenList,\\n        uint256[] calldata newLimits,\\n        uint256 tier\\n    ) external isMutable onlyOwner {\\n        uint256 listCount = tokenList.length;\\n        uint256 totalTiers = revenueTiers.length;\\n\\n        if (listCount != newLimits.length) {\\n            revert TokensAndTierLimitMismatch({ tokenCount: listCount, limitListCount: newLimits.length });\\n        }\\n        if (tier >= totalTiers) {\\n            revert OnlyExistingTierLimitsCanBeUpdated();\\n        }\\n\\n        if (tier == totalTiers - 1) {\\n            revert FinalTierLimitNotUpdatable();\\n        }\\n\\n        for (uint256 i; i < listCount; ) {\\n            if (totalDistributed[tokenList[i]][tier] > newLimits[i]) {\\n                revert TokenLimitNotValid();\\n            }\\n            tokenTierLimits[tokenList[i]][tier] = newLimits[i];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        emit TierLimitUpdated(tier, tokenList, newLimits);\\n    }\\n\\n    /** @notice Releases distribute token\\n     * @param token The token address\\n     * @param account The address of the receiver\\n     */\\n    function release(address token, address payable account) external nonReentrant {\\n        distributePendingTokens(token);\\n        uint256 payment = tokenWithdrawable[token][account];\\n        if (payment == 0) {\\n            revert NoDuePayment();\\n        }\\n\\n        released[token][account] += payment;\\n        totalTokenReleased[token] += payment;\\n        tokenWithdrawable[token][account] = 0;\\n\\n        if (token == address(0)) {\\n            if (feeAccumulated[token] > 0) {\\n                uint256 value = feeAccumulated[token];\\n                feeAccumulated[token] = 0;\\n                totalTokenReleased[token] += value;\\n                address platformFeeWallet = IReveelMainV2(mainFactory).getPlatformWallet();\\n                sendValue(payable(platformFeeWallet), value);\\n                emit FeeReleased(token, value);\\n            }\\n\\n            sendValue(account, payment);\\n            emit PaymentReleased(account, token, payment);\\n        } else {\\n            if (feeAccumulated[token] > 0) {\\n                uint256 value = feeAccumulated[token];\\n                feeAccumulated[token] = 0;\\n                totalTokenReleased[token] += value;\\n                address platformFeeWallet = IReveelMainV2(mainFactory).getPlatformWallet();\\n                IERC20(token).safeTransfer(platformFeeWallet, value);\\n                emit FeeReleased(token, value);\\n            }\\n\\n            IERC20(token).safeTransfer(account, payment);\\n\\n            emit ERC20PaymentReleased(token, account, payment);\\n        }\\n    }\\n\\n    /** @notice Get the wallet list for a given revenue tier\\n     * @param tierNumber the index of the tier for which list needs to be provided.\\n     */\\n    function getRevenueTier(uint256 tierNumber) external view returns (address[] memory _walletList) {\\n        require(tierNumber < revenueTiers.length, \\\"TIER_DOES_NOT_EXIST\\\");\\n        address[] memory listWallet = revenueTiers[tierNumber].walletList;\\n        return (listWallet);\\n    }\\n\\n    /** @notice Get the totalNumber of revenue tiers in the revenue path\\n     */\\n    function getTotalRevenueTiers() external view returns (uint256 total) {\\n        return revenueTiers.length;\\n    }\\n\\n    /** @notice Get the current ongoing tier of revenue path\\n     * For eth: token address(0) is reserved\\n     */\\n    function getCurrentTier(address token) external view returns (uint256 tierNumber) {\\n        return currentTokenTier[token];\\n    }\\n\\n    /** @notice Get the current ongoing tier of revenue path\\n     */\\n    function getFeeRequirementStatus() external view returns (bool required) {\\n        return feeRequired;\\n    }\\n\\n    /** @notice Get the token revenue proportion for a given account at a given tier\\n     *  @param tier The tier to fetch revenue proportions for\\n     *  @param account The wallet address for which revenue proportion is requested\\n     */\\n    function getRevenueProportion(uint256 tier, address account) external view returns (uint256 proportion) {\\n        return revenueProportion[tier][account];\\n    }\\n\\n    /** @notice Get the amount of token distrbuted for a given tier\\n     *  @param token The token address for which distributed amount is fetched\\n     *  @param tier The tier for which distributed amount is fetched\\n     */\\n\\n    function getTierDistributedAmount(address token, uint256 tier) external view returns (uint256 amount) {\\n        return totalDistributed[token][tier];\\n    }\\n\\n    /** @notice Get the amount of ETH accumulated for fee collection\\n     */\\n\\n    function getTotalFeeAccumulated(address token) external view returns (uint256 amount) {\\n        return feeAccumulated[token];\\n    }\\n\\n    /** @notice Get the amount of token released for a given account\\n     *  @param token the token address for which token released is fetched\\n     *  @param account the wallet address for whih the token released is fetched\\n     */\\n\\n    function getTokenReleased(address token, address account) external view returns (uint256 amount) {\\n        return released[token][account];\\n    }\\n\\n    /** @notice Get the platform fee percentage\\n     */\\n    function getPlatformFee() external view returns (uint256) {\\n        return platformFee;\\n    }\\n\\n    /** @notice Get the revenue path Immutability status\\n     */\\n    function getImmutabilityStatus() external view returns (bool) {\\n        return isImmutable;\\n    }\\n\\n    /** @notice Get the amount of total eth withdrawn by the account\\n     */\\n    function getTokenWithdrawn(address token, address account) external view returns (uint256) {\\n        return released[token][account];\\n    }\\n\\n    function getTokenTierLimits(address token, uint256 tier) external view returns (uint256) {\\n        return tokenTierLimits[token][tier];\\n    }\\n\\n    /** @notice Update the trusted forwarder address\\n     *  @param forwarder The address of the new forwarder\\n     *\\n     */\\n    function setTrustedForwarder(address forwarder) external onlyOwner {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /**\\n     *  @notice Total wallets available in a tier\\n     *  @param tier The tier for which wallet counts will be fetched\\n     */\\n    function getTierWalletCount(uint256 tier) external view returns (uint256) {\\n        return revenueTiers[tier].walletList.length;\\n    }\\n\\n    /**\\n     * @notice Returns total token released\\n     * @param token The token for which total released amount is fetched\\n     */\\n    function getTotalTokenReleased(address token) external view returns (uint256) {\\n        return totalTokenReleased[token];\\n    }\\n\\n    /**\\n     * @notice Returns total token accounted for a given token address\\n     * @param token The token for which total accountd amount is fetched\\n     */\\n    function getTotalTokenAccounted(address token) external view returns (uint256) {\\n        return totalTokenAccounted[token];\\n    }\\n\\n    /**\\n     * @notice Returns withdrawable or claimable token amount for a given wallet in the revenue path\\n     */\\n    function getWithdrawableToken(address token, address wallet) external view returns (uint256) {\\n        return tokenWithdrawable[token][wallet];\\n    }\\n\\n    /**\\n     * @notice Returns the ReveelMainV2 contract address\\n     */\\n    function getMainFactory() external view returns (address) {\\n        return mainFactory;\\n    }\\n\\n    /** @notice Transfer handler for ETH\\n     * @param recipient The address of the receiver\\n     * @param amount The amount of ETH to be received\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert InsufficentBalance({ contractBalance: address(this).balance, requiredAmount: amount });\\n        }\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _msgSender() internal view virtual override(Context, ERC2771Recipient) returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771Recipient) returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DuplicateWalletEntry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FinalTierLimitNotUpdatable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficentBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDuePayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyExistingTierLimitsCanBeUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyExistingTiersCanBeUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevenuePathNotMutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierLimitGivenZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenLimitNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitListCount\",\"type\":\"uint256\"}],\"name\":\"TokensAndTierLimitMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalShareNot100\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tiers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limits\",\"type\":\"uint256\"}],\"name\":\"TotalTierLimitsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionCount\",\"type\":\"uint256\"}],\"name\":\"WalletAndDistrbutionCtMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDistributionProvided\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[][]\",\"name\":\"wallets\",\"type\":\"address[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"distributions\",\"type\":\"uint256[][]\"}],\"name\":\"RevenueTierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierNumbers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[][]\",\"name\":\"wallets\",\"type\":\"address[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"distributions\",\"type\":\"uint256[][]\"}],\"name\":\"RevenueTierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newLimits\",\"type\":\"uint256[]\"}],\"name\":\"TierLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"TokenDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"_walletList\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_distribution\",\"type\":\"uint256[][]\"}],\"name\":\"addRevenueTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributePendingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCurrentTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tierNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRequirementStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImmutabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPendingDistributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRevenueProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierNumber\",\"type\":\"uint256\"}],\"name\":\"getRevenueTier\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"getTierDistributedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"getTierWalletCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"getTokenTierLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalFeeAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRevenueTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalTokenAccounted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalTokenReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWithdrawableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"_walletList\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_distribution\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_limitSequence\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"platformFee\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isImmutable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"internalType\":\"struct RevenuePathV2.PathInfo\",\"name\":\"pathInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newLimits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"_walletList\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_distribution\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierNumbers\",\"type\":\"uint256[]\"}],\"name\":\"updateRevenueTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevenuePathV2", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}