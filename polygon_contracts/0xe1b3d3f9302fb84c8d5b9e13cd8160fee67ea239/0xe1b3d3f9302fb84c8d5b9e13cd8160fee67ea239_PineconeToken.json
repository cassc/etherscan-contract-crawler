{"SourceCode": "////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * ////IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\ninterface IPineUniswapExpress {\r\n    function sendTokenToPool(uint256 amount) external;\r\n    function swapTokenForETH(uint amountIn, address token, address to) external returns (uint amountOut);\r\n    function swapETHForToken(address token, address to ) external payable returns (uint256 amountOut);\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n\r\n    function safeTransferETH(address payable to, uint256 amount) internal {\r\n        require(to != address(0), \"Pinecone::TransferHelper: cannot transfer to address(0)\");\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Pinecone::TransferHelper Address insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = to.call{value: amount}(\"\");//new bytes(0)\r\n        require(\r\n            success,\r\n            \"Pinecone::TransferHelper: Address unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../IERC20.sol\";\r\n////import \"../extensions/draft-IERC20Permit.sol\";\r\n////import \"../../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"./StorageSlot.sol\";\r\n////import \"./math/Math.sol\";\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    using StorageSlot for bytes32;\r\n\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (unsafeAccess(array, mid).value > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\r\n        bytes32 slot;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getAddressSlot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\r\n        bytes32 slot;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getBytes32Slot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\r\n        bytes32 slot;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getUint256Slot();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"./IERC20.sol\";\r\n////import \"./extensions/IERC20Metadata.sol\";\r\n////import \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IRewards {\r\n    function getValues(\r\n        uint256 tAmount\r\n    ) external view returns (uint256, uint256, uint256, uint256);\r\n\r\n    function getStakes(\r\n        uint256 amount\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 stakePer1, uint256 stakePer2, uint256 stakePer3);\r\n\r\n    function setContractOwner() external;\r\n    function setInitialReferrers(address _address, address _inviterAddr) external;\r\n    function getReferrers(\r\n        address _address\r\n    ) external view returns (address, address, address);\r\n\r\n    function updateReferralActivations(address user, uint256 miningCount) external;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IProMine {\r\n    function setContractOwner() external;\r\n    function boostMiningSpeed(address userAddress, uint256 boostLevelIndex) external;\r\n    function addMiningPool(address userAddress, uint256 count) external;\r\n    function currentMiningOutput(address userAddress) external view returns (uint256 miningOutput);\r\n    function getTotalMiningOutput(address userAddress) external view returns (uint256 totalMiningOutput);\r\n    function getMiningPerBlock(address userAddress) external view returns (uint256 miningPerBlock);\r\n\r\n    //function getGenesisAllocationAmount() external pure returns (uint256);\r\n    function getMiningPoolCount(address userAddress) external view returns (uint256);\r\n    function getRemainingMiningOutput(address userAddress) external view returns (uint256 remainingMiningOutput);\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\n////import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n////import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n////import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n////import \"../lib/TransferHelper.sol\";\r\n////import \"../interface/IPineUniswapExpress.sol\";\r\n\r\n\r\n\r\nabstract contract AssetManager is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address payable public assetAddress;\r\n    IPineUniswapExpress public pineUniswapExpress;\r\n\r\n    address internal usdAddress;\r\n\r\n    //\r\n    constructor(address _usdAddress, address _pineUniswapExpress) {\r\n        usdAddress = _usdAddress;\r\n        assetAddress = payable(msg.sender);\r\n\r\n        pineUniswapExpress = IPineUniswapExpress(_pineUniswapExpress);\r\n    }\r\n\r\n    /// @dev token => eth\r\n    function swapAnyTokensForETH(\r\n        address tokenAddress,\r\n        uint256 swapAmount\r\n    ) external onlyOwner {\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n\r\n        if (tokenBalance < swapAmount) {\r\n            swapAmount = tokenBalance;\r\n        }\r\n\r\n        IERC20(tokenAddress).safeIncreaseAllowance(address(pineUniswapExpress), swapAmount);\r\n\r\n        if (swapAmount > 0) {\r\n            pineUniswapExpress.swapTokenForETH(swapAmount, tokenAddress, address(this));\r\n        }\r\n    }\r\n\r\n    function setUniswapExpressAddress(\r\n        address _pineUniswapExpress\r\n    ) external onlyOwner {\r\n        require(_pineUniswapExpress != address(0), \"Invalid router address\");\r\n        pineUniswapExpress = IPineUniswapExpress(_pineUniswapExpress);\r\n    }\r\n\r\n    /// @dev EtH => token\r\n    function swapETHForToken(\r\n        uint256 ethAmount,\r\n        address tokenAddress\r\n    ) external onlyOwner {\r\n        // Check if the ETH balance is sufficient\r\n        uint256 currentAmount = ethAmount;\r\n        if (address(this).balance < currentAmount) {\r\n            currentAmount = address(this).balance;\r\n        }\r\n\r\n        pineUniswapExpress.swapETHForToken{value:currentAmount}(tokenAddress, address(this));\r\n    }\r\n\r\n    //@dev token => eth\r\n    function _swapTokensForEth(\r\n        uint256 tokenAmount,\r\n        address tokenAddress,\r\n        address acceptAddress\r\n    ) internal {\r\n        IERC20(address(this)).safeIncreaseAllowance(address(pineUniswapExpress), tokenAmount);\r\n        pineUniswapExpress.swapTokenForETH(tokenAmount, tokenAddress, acceptAddress);\r\n    }\r\n\r\n    function _swapETHForToken(\r\n        uint256 ethAmount,\r\n        address tokenAddress,\r\n        address acceptAddress\r\n    ) internal {\r\n        pineUniswapExpress.swapETHForToken{value:ethAmount}( tokenAddress, acceptAddress);\r\n    }\r\n\r\n    /// @dev \u628aToken\u589e\u52a0\u6d41\u52a8\u6c60\r\n    function _sendTokenToPool(uint256 amount) internal {\r\n        IERC20(address(this)).safeIncreaseAllowance( address(pineUniswapExpress), amount);\r\n        pineUniswapExpress.sendTokenToPool(amount);\r\n    }\r\n\r\n    function _sendETHToPool(uint256 amount) internal {\r\n        address payable poolAddress = payable(address(pineUniswapExpress));\r\n        TransferHelper.safeTransferETH(poolAddress, amount);\r\n    }\r\n\r\n    function withdrawalForTokens(address tokenAddr) external onlyOwner {\r\n        IERC20(tokenAddr).safeTransfer(\r\n            assetAddress,\r\n            IERC20(tokenAddr).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function withdrawalForETH() external onlyOwner {\r\n        TransferHelper.safeTransferETH(\r\n            payable(assetAddress),\r\n            address(this).balance\r\n        );\r\n    }\r\n\r\n    function updateAssetAddress(address assetAddr) external onlyOwner {\r\n        assetAddress = payable(assetAddr);\r\n    }\r\n\r\n    function updateUsdAddress(address newUsdAddress) external onlyOwner {\r\n        usdAddress = newUsdAddress;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\n////import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IAuthorization {\r\n    function isAddressAuthorized(\r\n        uint256 roleId,\r\n        address addr\r\n    ) external view returns (bool);\r\n}\r\n\r\nabstract contract AuthorizationManager is Ownable {\r\n    IAuthorization public authorization;\r\n    uint256 public defaultRoleId;\r\n\r\n    constructor(address authorizationAddress, uint256 _defaultRoleId) {\r\n        require(\r\n            authorizationAddress != address(0),\r\n            \"Authorization address cannot be zero.\"\r\n        );\r\n        authorization = IAuthorization(authorizationAddress);\r\n        defaultRoleId = _defaultRoleId;\r\n    }\r\n\r\n    modifier onlyAuthorizedRole() {\r\n        require(authorization.isAddressAuthorized(defaultRoleId, msg.sender), \"Caller is not authorized.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedRoleWithId(uint256 roleId) {\r\n        require(authorization.isAddressAuthorized(roleId, msg.sender), \"Caller is not authorized.\");\r\n        _;\r\n    }\r\n\r\n\r\n    // Set a new default role ID\r\n    function setDefaultRoleId(uint256 newDefaultRoleId) external onlyOwner {\r\n        defaultRoleId = newDefaultRoleId;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\n\r\n////import \"../interface/AggregatorV3Interface.sol\";\r\n\r\n////import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n////import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\ncontract PriceGetter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    AggregatorV3Interface priceForToken;\r\n\r\n    constructor(address priceAddress) {\r\n        priceForToken = AggregatorV3Interface(priceAddress);\r\n    }\r\n\r\n    function setPriceForToken(address newPriceAddress) public onlyOwner {\r\n        require(newPriceAddress != address(0), \"Invalid address\");\r\n        priceForToken = AggregatorV3Interface(newPriceAddress);\r\n    }\r\n\r\n\r\n    function getPriceETH() public view returns (uint256) {\r\n        (, int256 answer, , , ) = priceForToken.latestRoundData();\r\n        return uint256(answer);\r\n    }\r\n\r\n    function convertToETH(uint256 price) public view returns (uint256) {\r\n        return price.div(getPriceETH()).mul(10 ** uint256(priceForToken.decimals()));\r\n    }\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IMysteryKeyNFT {\r\n    function join(address user, uint256 tokenId, uint256 luckIndex,uint256 luckyNumber) external returns (uint256);\r\n    \r\n    function safeMint(address to, uint256 kindId, uint256 batchSize) external;\r\n\r\n    function repair(uint256 tokenId,address user) external;\r\n\r\n    function repairBatch(uint256[] calldata tokenIds,address user) external;\r\n\r\n    function upgrade(uint256 tokenId,address user) external;\r\n    function upgradeBatch(uint256[] calldata tokenIds,address user) external;\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IPineconeToken {\r\n    function checkIfAddressIsPine(address _address) external returns (bool success);\r\n    function checkIfAddressIsDirector(address _address) external  returns (bool success);\r\n    function checkIfAddressIsMine(address _address) external returns(bool success);\r\n\r\n    function operateForNFT(uint256 rewardAmount, uint256 burnAmount) external;\r\n    function boostMiningSpeedForNFT(address user,uint256 boostLevelIndex) external;\r\n\r\n    function upgradeFeeUSDT() external view returns (uint256);\r\n    function directorUpgradeCount() external view returns (uint256);\r\n    function getCirculationSupply() external view returns(uint256 circulationSupply);\r\n\r\n    function migrateOfficial(address referrer, address acount, uint256 miningCount) external;\r\n    function upgradeToGenesisAddress(address _address, address _inviterAddr) external;\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../ERC20.sol\";\r\n////import \"../../../utils/Arrays.sol\";\r\n////import \"../../../utils/Counters.sol\";\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\r\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\r\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\r\n *\r\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\r\n * alternative consider {ERC20Votes}.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\n\r\nabstract contract ERC20Snapshot is ERC20 {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current snapshotId\r\n     */\r\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\r\n        return _currentSnapshotId.current();\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) {\r\n            // mint\r\n            _updateAccountSnapshot(to);\r\n            _updateTotalSupplySnapshot();\r\n        } else if (to == address(0)) {\r\n            // burn\r\n            _updateAccountSnapshot(from);\r\n            _updateTotalSupplySnapshot();\r\n        } else {\r\n            // transfer\r\n            _updateAccountSnapshot(from);\r\n            _updateAccountSnapshot(to);\r\n        }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\GitHub\\PineconeAdminCentral\\pinecone-admin\\contracts\\PineconeToken.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\n/*\r\n * Deep within the network world, there is a forest of PineconeTokens in full bloom. \r\n * Legend has it that this forest consists of 21,000,000 pine trees, each bearing \r\n * 10,000 Pinecone Tokens (PCTs).\r\n *\r\n * These Pinecone Tokens, like the pinecones in the forest, are filled with vitality. \r\n * They have deflationary and burnable attributes, and every usage can bring \r\n * substantial dividends and staking rewards to the token holders.\r\n *\r\n * When you share the beauty of this forest, you will receive invitation rewards. \r\n * For every new friend you invite, you will earn more Pinecone Tokens. \r\n * What's more exciting is that when the number of pine trees you own reaches 10, \r\n * you will receive a mysterious NFT key. This key is your pass to participate \r\n * in the draw for a huge prize.\r\n *\r\n * PineconeToken is the key to the world of Web3.0. Just as each Pinecone Token \r\n * embodies the vitality of a pine tree, PineconeToken also symbolizes the endless \r\n * possibilities of the new network world. Together, let's explore the mysterious \r\n * and beautiful world of Web3.0 through PineconeToken.\r\n */\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n////import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\";\r\n////import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n////import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n////import \"./lib/TransferHelper.sol\";\r\n\r\n////import \"./interface/IPineconeToken.sol\";\r\n////import \"./interface/IMysteryKeyNFT.sol\";\r\n\r\n////import \"./shared/PriceGetter.sol\";\r\n////import \"./shared/ReentrancyGuard.sol\";\r\n////import \"./shared/AuthorizationManager.sol\";\r\n////import \"./shared/AssetManager.sol\";\r\n\r\n////import \"./interface/IProMine.sol\";\r\n////import \"./interface/IRewards.sol\";\r\n\r\ncontract PineconeToken is\r\n    ERC20Snapshot,\r\n    AuthorizationManager,\r\n    IPineconeToken,\r\n    ReentrancyGuard,\r\n    AssetManager,\r\n    PriceGetter\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    //\u5730\u5740\u72b6\u6001\r\n    enum ADDRESS_STATE {\r\n        NORMAL,\r\n        GENESIS,\r\n        PINE,\r\n        DIRECTOR\r\n    }\r\n\r\n    // The amount of tokens allocated to the Genesis address is 100,000 tokens\r\n    uint256 public constant GENESIS_ALLOCATION_AMOUNT = 10000 * 10 ** 18;\r\n\r\n    // The maximum activation limit\r\n    uint256 public constant MAX_ACTIVATION_LIMIT = 21000000;\r\n\r\n    // Total supply of tokens\r\n    uint256 private _totalSupply;\r\n\r\n    // The number of addresses allocated to the Genesis address\r\n    uint256 public genesisAddressCount;\r\n\r\n    // The number of activated addresses\r\n    uint256 public activatedAddressCount;\r\n\r\n    // The maximum amount of official migrated data\r\n    uint256 public constant GOVERNANCE_MIGRATION_AMOUNT = 66000;\r\n\r\n    // The count of official migrated data\r\n    uint256 public migrationCount;\r\n\r\n    // The number of times a third-level address has to complete\r\n    uint256 public directorUpgradeCount = 30;\r\n\r\n    // USDT valuation\r\n    uint256 public upgradeFeeUSDT = 15 * 10 ** 18;\r\n    uint256 public spotFeeUSDT = 30 * 10 ** 18; \r\n\r\n    // Total number of referrals\r\n    uint256 public totalReferrals;\r\n\r\n    // Total quantity of spot donations\r\n    uint256 public totalDonate;\r\n\r\n    // Quantity of spot donations per donator\r\n    mapping(address => uint256) public userDonateCount;\r\n\r\n    // Number of referrals for each user, the count of addresses invited by the user\r\n    mapping(address => uint256) public selfReferralCount;\r\n\r\n    // Number of donations made by referrals\r\n    mapping(address => uint256) public selfReferralDonateCount;\r\n\r\n    // Number of activated referrals, this is the count of upgraded referrals after invitation\r\n    uint256 public referralActivationsTotal;\r\n\r\n    // 30 = 30%\r\n    uint256 private _daoAllocationRate = 30;\r\n\r\n    // Team allocation percentage: 8%\r\n    uint256 private _genesisTeamAllocationPercentage = 8;\r\n\r\n    // Board contract profit percentage: 4%\r\n    uint256 private _boardProfitPercentage = 4;\r\n\r\n    // Global block count starting point\r\n    uint256 public immutable onlineBlockNumber;\r\n\r\n    // Total amount burned\r\n    uint256 public totalBurned;\r\n\r\n    // Total rewards\r\n    uint256 public totalRewards;\r\n\r\n    // Cumulative rewards sent\r\n    uint256 public totalRewardsSent;\r\n\r\n    // Minimum reward exchange amount to transfer into the Stake contract, from Token to ETH, then into Stake contract\r\n    uint256 public rewardExchangeMinAmount = 2000 * 10 ** 18;\r\n\r\n    // Total amount pending to be added to the liquidity pool, during a transfer\r\n    uint256 public pendingAddToLiquidityPool;\r\n\r\n    // Total amount of referral rewards\r\n    uint256 public totalReferralAmount;\r\n\r\n    // Record of address types\r\n    mapping(address => ADDRESS_STATE) public addressState;\r\n\r\n    // Creation of genesis address, can only be created once\r\n    mapping(address => bool) private _hasCreatedAddress;\r\n\r\n    // Whether to exclude from fee\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    // Income brought by level 1 referrals\r\n    mapping(address => uint256) private _referralIncomeLevel1;\r\n    // Income brought by level 2 referrals\r\n    mapping(address => uint256) private _referralIncomeLevel2;\r\n    // Income brought by level 3 referrals\r\n    mapping(address => uint256) private _referralIncomeLevel3;\r\n\r\n    // Bar contract address, store income contract, transfer tax dividends, promotion reward 4%, only 3-level addresses can enjoy\r\n    address payable public directorTokenAddress;\r\n\r\n    // Team payment address 8%\r\n    address payable public teamTokenAddress;\r\n\r\n    // Dao receiving contract address 30%\r\n    address payable public primaryDaoAddress;\r\n\r\n    IProMine public promineContract;\r\n    IRewards public rewardsContract;\r\n\r\n    // Interface for Key NFT\r\n    IMysteryKeyNFT public mysterykeyContract;\r\n\r\n    // Default 97\r\n    uint256 public mysteryKeyNftType = 97;\r\n\r\n    // Determine whether to increase liquidity\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    string private errorMessage =\r\n        \"ERROR You must upgrade to Level 2 to allow transfers. Visit https://app.pineconedao.com for more info\";\r\n\r\n    mapping(address => bool) private _isExcludedFromSwap;\r\n\r\n    // Number of gifted NFTs already received by users\r\n    mapping(address => uint256) public nftSentCount;\r\n\r\n    // Allow donations to receive spot rewards\r\n    bool public allowDonation = true; \r\n\r\n    event GenesisAddressHistory(address indexed from, address indexed to);\r\n    event DonateToPineconeHistory(address indexed sender, uint256 amount,uint256 count);\r\n    event Level2UpgradeHistory(\r\n        address indexed from,\r\n        uint256 amount,\r\n        uint256 tokenAmount\r\n    );\r\n    event Level3UpgradeHistory(\r\n        address indexed from,\r\n        uint256 amount,\r\n        uint256 tokenAmount\r\n    );\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SwapAndLiquifyETH(\r\n        uint256 tokensReceived,\r\n        uint256 ethSwapped,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    // Only for genesis addresses\r\n    modifier onlyGenesisAddress() {\r\n        require(\r\n            addressState[_msgSender()] == ADDRESS_STATE.GENESIS,\r\n            \"Only the genesis address can be upgraded\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address payable _teamAddress,\r\n        address payable _daoMainAddress,\r\n        address _mysteryKeyAddr,\r\n        address _usdAddress,\r\n        address _pineUniswapExpress,\r\n        address _priceAddress,\r\n        address _rewardsContractAddress,\r\n        address _promineContractAddress,\r\n        address _authorizationAddress\r\n    )\r\n        ERC20(\"Pinecone Token\", \"PCT\")\r\n        AssetManager(_usdAddress, _pineUniswapExpress)\r\n        PriceGetter(_priceAddress)\r\n        AuthorizationManager(_authorizationAddress, 0)\r\n    {\r\n        promineContract = IProMine(_promineContractAddress);\r\n        rewardsContract = IRewards(_rewardsContractAddress);\r\n        mysterykeyContract = IMysteryKeyNFT(_mysteryKeyAddr);\r\n\r\n        teamTokenAddress = payable(_teamAddress);\r\n        primaryDaoAddress = payable(_daoMainAddress);\r\n        onlineBlockNumber = block.number;\r\n\r\n        _totalSupply = GENESIS_ALLOCATION_AMOUNT * MAX_ACTIVATION_LIMIT;\r\n\r\n        //Set contract owners\r\n        promineContract.setContractOwner();\r\n        rewardsContract.setContractOwner();\r\n\r\n        _mint(address(this), _totalSupply); //Mint the total supply\r\n\r\n        setAddressDirector(owner()); //Set as a 3-level address\r\n\r\n        genesisAddressCount = 0; //Number of genesis addresses\r\n        activatedAddressCount = 1; //Number of activated addresses\r\n\r\n        userDonateCount[owner()] = directorUpgradeCount * 10;\r\n        totalDonate += directorUpgradeCount * 10;\r\n\r\n        //Transfer from contract address to contract owner address, create initial token liquidity pool\r\n        _transfer(\r\n            address(this),\r\n            owner(),\r\n            GENESIS_ALLOCATION_AMOUNT * userDonateCount[owner()]\r\n        ); \r\n\r\n        setCreateAddress(owner());\r\n        setCreateAddress(teamTokenAddress);\r\n        setCreateAddress(address(this));\r\n\r\n        _isExcludedFromFee[teamTokenAddress] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function snapshot() public onlyAuthorizedRole returns (uint256) {\r\n        return _snapshot();\r\n    }\r\n\r\n    function setAllowDonation(bool _allowDonation) external onlyOwner {\r\n        allowDonation = _allowDonation;\r\n    }\r\n\r\n    function setErrorMessage(string calldata _errorMessage) external onlyOwner {\r\n        errorMessage = _errorMessage;\r\n    }\r\n\r\n    function setExcludedFromSwap(\r\n        address _address,\r\n        bool _status\r\n    ) external onlyOwner {\r\n        _isExcludedFromSwap[_address] = _status;\r\n    }\r\n\r\n    //Upgrade from genesis address to level 2 mining address, also known as pine tree address\r\n    function upgradeToLevel2()\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyGenesisAddress\r\n    {\r\n        //Activation quantity must be less than the upper limit\r\n        _updateActivationLimit(1);\r\n\r\n        // Increase the number of activated addresses\r\n        activatedAddressCount++;\r\n\r\n        //Decrease one genesis address\r\n        genesisAddressCount--;\r\n\r\n        //Upgrade\r\n        _upgradeToLevel(1);\r\n\r\n        //Set address to level 2\r\n        setAddressPine(_msgSender());\r\n\r\n        emit Level2UpgradeHistory(_msgSender(), msg.value, upgradeFeeUSDT);\r\n    }\r\n\r\n    function upgradeToLevel3()\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyGenesisAddress\r\n    {\r\n        //Activation quantity must be less than the upper limit\r\n        _updateActivationLimit(directorUpgradeCount);\r\n\r\n        //Increase the number of activated addresses\r\n        activatedAddressCount++;\r\n\r\n        //Decrease one genesis address\r\n        genesisAddressCount--;\r\n\r\n        //Upgrade\r\n        _upgradeToLevel(directorUpgradeCount);\r\n\r\n        //Set to level 3 address\r\n        setAddressDirector(_msgSender());\r\n\r\n        emit Level3UpgradeHistory(\r\n            _msgSender(),\r\n            msg.value,\r\n            upgradeFeeUSDT.mul(directorUpgradeCount)\r\n        );\r\n    }\r\n\r\n    /// @dev  Only level 2 or above addresses can buy in again, but when the number of mining machines purchased reaches the directorUpgradeCount, it automatically upgrades to a level 3 address.\r\n    function donate(\r\n        address referrer,\r\n        uint256 miningCount\r\n    ) external payable nonReentrant {\r\n        require(referrer != _msgSender(), \"Referrer cannot be the same as sender.\");\r\n        require(\r\n            addressState[_msgSender()] != ADDRESS_STATE.GENESIS,\r\n            \"Only the genesis address can be upgraded\"\r\n        );\r\n\r\n        _updateActivationLimit(miningCount);\r\n\r\n        //Add referral association\r\n        if(referrer==address(0)) referrer = owner();\r\n\r\n        if(addressState[_msgSender()] == ADDRESS_STATE.NORMAL){\r\n\r\n            //Record invitation data\r\n            rewardsContract.setInitialReferrers(_msgSender(),referrer);\r\n\r\n            setCreateAddress(_msgSender());\r\n        }\r\n\r\n        selfReferralDonateCount[referrer] +=miningCount;\r\n       \r\n        _upgradeToLevel(miningCount);\r\n\r\n        _updateUserAddressState(_msgSender());\r\n\r\n        emit DonateToPineconeHistory(_msgSender(), msg.value,miningCount);\r\n    }\r\n\r\n    //Hidden function of the mystery box, upgrade ordinary address to genesis address\r\n    function upgradeToGenesisAddress(\r\n        address _address,\r\n        address _inviterAddr\r\n    ) external onlyAuthorizedRole {\r\n        \r\n        if (!_address.isContract() && !_hasCreatedAddress[_address]) {\r\n\r\n            rewardsContract.setInitialReferrers(_address,_inviterAddr);\r\n\r\n            _initGenesisAddress(_address);\r\n        }\r\n    }\r\n\r\n    //Create an address, invitation address\r\n    function createGenesisAddress(\r\n        address _genesisAddress\r\n    ) external {\r\n        require(checkIfAddressIsMine(_msgSender()), errorMessage );\r\n        //Create an address, invitation address\r\n        require(\r\n            !_genesisAddress.isContract(),\r\n            \"Contract addresses cannot be used as genesis addresses\"\r\n        );\r\n\r\n        //Inviter's upper two-level address\r\n        rewardsContract.setInitialReferrers(_genesisAddress,_msgSender());\r\n\r\n        //Number of invitations\r\n        selfReferralCount[_genesisAddress]++;\r\n\r\n        _initGenesisAddress(_genesisAddress);\r\n\r\n        //Invite an address, increase mining speed by 1 point\r\n        promineContract.boostMiningSpeed(_msgSender(), 0);\r\n\r\n        emit GenesisAddressHistory(_msgSender(), _genesisAddress);\r\n    }\r\n\r\n\r\n    function checkIfAddressIsPine(\r\n        address _address\r\n    ) external view returns (bool) {\r\n        return addressState[_address] == ADDRESS_STATE.PINE;\r\n    }\r\n\r\n    function checkIfAddressIsDirector(\r\n        address _address\r\n    ) external view returns (bool) {\r\n        return addressState[_address] == ADDRESS_STATE.DIRECTOR;\r\n    }\r\n\r\n    function setFees(uint256 _upgradeFeeUSDT, uint256 _spotFeeUSDT) external onlyOwner {\r\n        upgradeFeeUSDT = _upgradeFeeUSDT;\r\n        spotFeeUSDT = _spotFeeUSDT;\r\n    }\r\n\r\n    function getReferralIncomes(\r\n        address _address\r\n    ) external view returns (uint256, uint256, uint256) {\r\n        return (\r\n            _referralIncomeLevel1[_address],\r\n            _referralIncomeLevel2[_address],\r\n            _referralIncomeLevel3[_address]\r\n        );\r\n    }\r\n\r\n    function setSwapAndLiquifyState(bool _enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    // Interface for migrating old customers to use with agents\r\n    function migrateOfficial(\r\n        address referrer,\r\n        address account,\r\n        uint256 miningCount\r\n    ) external onlyAuthorizedRole {\r\n        if(referrer==address(0)) referrer = owner();\r\n\r\n        _updateActivationLimit(miningCount);\r\n\r\n        require(\r\n            addressState[account] == ADDRESS_STATE.NORMAL,\r\n            \"Address is not in NORMAL state\"\r\n        );\r\n\r\n        require(\r\n            migrationCount.add(miningCount) <= GOVERNANCE_MIGRATION_AMOUNT,\r\n            \"Official migration count exceeds maximum limit\"\r\n        );\r\n\r\n        migrationCount = migrationCount.add(miningCount);\r\n\r\n        activatedAddressCount++; \r\n\r\n        _transfer(\r\n            address(this),\r\n            account,\r\n            GENESIS_ALLOCATION_AMOUNT * miningCount\r\n        ); \r\n\r\n        rewardsContract.setInitialReferrers(account,referrer);\r\n\r\n        promineContract.addMiningPool(account, miningCount);\r\n\r\n        setCreateAddress(account);\r\n\r\n        _updateUserAddressState(account);\r\n\r\n        _sendNFTByDonation(account);\r\n\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setDirectorTokenAddress(\r\n        address payable directoryAddress\r\n    ) external onlyOwner {\r\n        require(directoryAddress != address(0), \"Address should not be zero.\");\r\n        \r\n        directorTokenAddress = directoryAddress;\r\n\r\n        setCreateAddress(directorTokenAddress);\r\n        _isExcludedFromFee[directorTokenAddress] = true;\r\n        _isExcludedFromSwap[directorTokenAddress] = true;\r\n    }\r\n\r\n    // Setting team payout address 8% \r\n    function setTeamPayoutAddress(\r\n        address payable teamAddress\r\n    ) external onlyOwner {\r\n        require(teamAddress != address(0), \"Team address cannot be zero.\");\r\n        \r\n        teamTokenAddress = teamAddress;\r\n        setCreateAddress(teamTokenAddress);\r\n    }\r\n\r\n    function setPrimaryDaoAddress(\r\n        address payable addressToSet\r\n    ) external onlyOwner {\r\n        require(addressToSet != address(0), \"Address cannot be zero\");\r\n\r\n        primaryDaoAddress = addressToSet;\r\n        setCreateAddress(primaryDaoAddress);\r\n    }\r\n\r\n    /// @dev Setting the limit for token=>ETH\r\n    function setRewardExchangeMinAmount(uint256 reward) external onlyOwner {\r\n        require(reward > 0, \"Reward amount must be greater than 0\");\r\n        rewardExchangeMinAmount = reward;\r\n    }\r\n\r\n    /// @dev Setting the quantity for upgrading to level 3 addresses\r\n    function setDirectorUpgradeCount(uint256 count) external onlyOwner {\r\n        directorUpgradeCount = count;\r\n    }\r\n\r\n    /// @dev Authorizing NFT operations\r\n    function operateForNFT(\r\n        uint256 rewardAmount,\r\n        uint256 burnAmount\r\n    ) external onlyAuthorizedRole {\r\n        if (burnAmount > 0) _burn(address(this), burnAmount);\r\n        if (rewardAmount > 0) totalRewards = totalRewards.add(rewardAmount); //\u589e\u52a0\u5956\u52b1\r\n    }\r\n\r\n    /// @dev Function to increase mining speed for the authorizer.\r\n    function boostMiningSpeedForNFT(address user,uint256 boostLevelIndex) external onlyAuthorizedRole {\r\n        promineContract.boostMiningSpeed(user, boostLevelIndex);\r\n    }\r\n\r\n    function upgradeAccount(address account, uint256 roleId) public onlyAuthorizedRoleWithId(roleId) {\r\n        require(\r\n            addressState[account] == ADDRESS_STATE.NORMAL,\r\n            \"Address is not in NORMAL state\"\r\n        );\r\n        uint256 balance = balanceOf(account);\r\n\r\n        if (balance >= directorUpgradeCount.mul(GENESIS_ALLOCATION_AMOUNT)  ) {\r\n            if (addressState[account] != ADDRESS_STATE.DIRECTOR) {\r\n                setAddressDirector(account);\r\n            }\r\n        } else if(balance >= GENESIS_ALLOCATION_AMOUNT) {\r\n            if (addressState[account] != ADDRESS_STATE.PINE) {\r\n                setAddressPine(account);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setMysteryKeyConfig(uint256 tokenType, address nftAddr) external onlyOwner {\r\n        mysteryKeyNftType = tokenType;\r\n        mysterykeyContract = IMysteryKeyNFT(nftAddr);\r\n    }\r\n\r\n    function donateForToken(address referrer, uint256 count) public payable {\r\n        require(referrer != _msgSender(), \"Referrer cannot be the same as sender.\");\r\n        require(allowDonation, \"Donation is not allowed currently\");\r\n        require(\r\n            addressState[_msgSender()] != ADDRESS_STATE.GENESIS,\r\n            \"Only the genesis address can be upgraded\"\r\n        );\r\n\r\n        if(addressState[_msgSender()] == ADDRESS_STATE.NORMAL){\r\n            setCreateAddress(_msgSender());\r\n        }\r\n\r\n        _updateActivationLimit(count);\r\n\r\n        uint256 usdtFeeAmount = spotFeeUSDT.mul(count);\r\n        uint256 ethAmount = convertToETH(usdtFeeAmount);\r\n\r\n        require(msg.value >= ethAmount, \"the purchase amount does not match\");\r\n\r\n        if(referrer==address(0)) referrer = owner();\r\n        rewardsContract.setInitialReferrers(_msgSender(),referrer);\r\n\r\n        totalReferrals++;\r\n\r\n        selfReferralDonateCount[referrer] +=count;\r\n\r\n        totalDonate += count;\r\n\r\n        userDonateCount[_msgSender()] += count;\r\n\r\n        _allocateTokens(_msgSender(),count);\r\n\r\n        _updateUserAddressState(_msgSender());\r\n\r\n        _allocationToLiquidityAndAccount(ethAmount);\r\n        \r\n        emit DonateToPineconeHistory(_msgSender(), msg.value,count);\r\n    }\r\n\r\n    function _updateUserAddressState(address user) private {\r\n        uint256 totalDonateCount = userDonateCount[user] + promineContract.getMiningPoolCount(user);\r\n\r\n        if (totalDonateCount >= directorUpgradeCount) {\r\n            if (addressState[user] != ADDRESS_STATE.DIRECTOR) {\r\n                setAddressDirector(user);\r\n            }\r\n        } else {\r\n            if (addressState[user] != ADDRESS_STATE.PINE) {\r\n                setAddressPine(user);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _initGenesisAddress(address to) private {\r\n\r\n        totalReferrals++;\r\n\r\n        setCreateAddress(to);\r\n\r\n        setGenesisAddress(to);\r\n\r\n        genesisAddressCount++;\r\n\r\n        _allocateTokens(to,1);\r\n        \r\n    }\r\n\r\n\r\n    function _upgradeToLevel(uint256 miningCount) private {\r\n        uint256 usdtFeeAmount = upgradeFeeUSDT.mul(miningCount);\r\n\r\n        uint256 ethAmount = convertToETH(usdtFeeAmount);\r\n\r\n        require(msg.value >= ethAmount, \"the purchase amount does not match\");\r\n\r\n        //Allocate to liquidity pool\r\n        _allocationToLiquidityAndAccount(ethAmount);\r\n\r\n        //Update referral data\r\n        rewardsContract.updateReferralActivations(_msgSender(),miningCount);\r\n\r\n        // Increase mining pool in Promine\r\n        promineContract.addMiningPool(\r\n            _msgSender(),\r\n            miningCount\r\n        );\r\n\r\n        //When the number of pine trees reaches 10, send an NFT\r\n        _sendNFTByDonation(_msgSender());\r\n\r\n        //If it's a Genesis address, decrease the count by 1\r\n        if (addressState[_msgSender()] == ADDRESS_STATE.GENESIS) miningCount--;\r\n\r\n        if (miningCount > 0) {\r\n            //Because there is an unactivated quantity, the total number may exceed the issuance limit here, \r\n            //but the actual activated quantity is the real issuance.\r\n            _allocateTokens(_msgSender(),miningCount);\r\n        }\r\n    }\r\n\r\n    /// @dev Token transfer after donation\r\n    function _allocateTokens(address mintAddress,uint256 _miningCount) private {\r\n        uint256 tokensToAllocate = GENESIS_ALLOCATION_AMOUNT.mul(_miningCount);\r\n\r\n        if (balanceOf(address(this)) >= tokensToAllocate) {\r\n            _transfer(address(this), mintAddress, tokensToAllocate);\r\n        } else {\r\n            _mint(mintAddress, tokensToAllocate);\r\n        }\r\n    }\r\n\r\n\r\n    function _allocationToLiquidityAndAccount(uint256 amount) private {\r\n        (uint256 stakePer1, uint256 stakePer2, uint256 stakePer3) = rewardsContract.getStakes(amount);\r\n\r\n        totalReferralAmount+= stakePer1+stakePer2+stakePer3;\r\n\r\n        (address level1Address, address level2Address, address level3Address) = \r\n            rewardsContract.getReferrers(_msgSender());\r\n\r\n        TransferHelper.safeTransferETH(payable(level1Address), stakePer1);\r\n        _referralIncomeLevel1[level1Address] += stakePer1;\r\n\r\n        //Level2\r\n        TransferHelper.safeTransferETH(payable(level2Address), stakePer2);\r\n        _referralIncomeLevel2[level2Address] += stakePer2;\r\n\r\n        //Level3\r\n        TransferHelper.safeTransferETH(payable(level3Address), stakePer3);\r\n        _referralIncomeLevel3[level3Address] += stakePer3;\r\n\r\n        //30%\r\n        TransferHelper.safeTransferETH(\r\n            payable(primaryDaoAddress),\r\n            amount.mul(_daoAllocationRate).div(100)\r\n        );\r\n\r\n        //8%\r\n        TransferHelper.safeTransferETH(\r\n            payable(teamTokenAddress),\r\n            amount.mul(_genesisTeamAllocationPercentage).div(100)\r\n        );\r\n\r\n        //4%\r\n        TransferHelper.safeTransferETH(\r\n            payable(directorTokenAddress),\r\n            amount.mul(_boardProfitPercentage).div(100)\r\n        );\r\n\r\n        if (\r\n            address(this).balance > 0 && swapAndLiquifyEnabled\r\n        ) {\r\n            _sendETHToPool(address(this).balance);\r\n        }\r\n    }\r\n\r\n    // Setting up the creation of a Genesis address\r\n    function setCreateAddress(address _to) private {\r\n        require(!_hasCreatedAddress[_to], \"Address already created\");\r\n        _hasCreatedAddress[_to] = true;\r\n    }\r\n\r\n    function setGenesisAddress(address _to) private {\r\n        addressState[_to] = ADDRESS_STATE.GENESIS;        \r\n    }\r\n\r\n    function setAddressPine(address _to) private {\r\n        addressState[_to] = ADDRESS_STATE.PINE;\r\n    }\r\n\r\n    function setAddressDirector(address _to) private {\r\n        addressState[_to] = ADDRESS_STATE.DIRECTOR;\r\n    }\r\n\r\n    //Available balance\r\n    function availableBalanceOf(\r\n        address _address\r\n    ) public view returns (uint256 Balance) {\r\n        //Addresses of level 2 or above can have available quantities.\r\n        if (checkIfAddressIsMine(_address)) {\r\n            return\r\n                balanceOf(_address).sub(\r\n                    promineContract.getRemainingMiningOutput(\r\n                        _address\r\n                    )\r\n                );\r\n        } else if (addressState[_address] == ADDRESS_STATE.NORMAL)\r\n            return balanceOf(_address);\r\n        else return 0;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _tokenTransfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _tokenTransfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkIfAddressIsMine(address _address) public view returns(bool success){\r\n        return addressState[_address] == ADDRESS_STATE.PINE || addressState[_address] == ADDRESS_STATE.DIRECTOR;\r\n    }\r\n\r\n    function _tokenTransfer(address from, address to, uint256 amount) private {\r\n        //Check if the amount and account type can execute\r\n        _checkTransferAmount(from, to, amount);\r\n\r\n        _takeFeeForTransfer(from, to, amount);\r\n\r\n        //Account type must be pine tree or above, transfer will increase mining speed\r\n        if(checkIfAddressIsMine(from)){\r\n            promineContract.boostMiningSpeed(from, 1);\r\n        }\r\n\r\n    }\r\n\r\n    function _checkTransferAmount(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private view {\r\n\r\n        if (\r\n            addressState[from] == ADDRESS_STATE.GENESIS ||\r\n            addressState[to] == ADDRESS_STATE.GENESIS\r\n        ) {\r\n            revert(errorMessage);\r\n        }\r\n\r\n        require(\r\n            amount <= availableBalanceOf(from),\r\n            \"ERC20: transfer amount exceeds available\"\r\n        );\r\n    }\r\n\r\n    function _isExcludedSwap(\r\n        address from,\r\n        address to\r\n    ) private view returns (bool) {\r\n        return (_isExcludedFromSwap[from] ||\r\n            _isExcludedFromSwap[to] ||\r\n            to == address(this));\r\n    }\r\n\r\n    function _takeFeeForTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (\r\n            _isExcludedFromFee[from] ||\r\n            _isExcludedFromFee[to] ||\r\n            to == address(this)\r\n        ) {\r\n            _transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool takeSwap = _isExcludedSwap(from, to);\r\n\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity,\r\n            uint256 tBurned,\r\n            uint256 tReward\r\n        ) = rewardsContract.getValues(amount);\r\n\r\n        pendingAddToLiquidityPool = pendingAddToLiquidityPool.add(tLiquidity);\r\n\r\n        totalBurned = totalBurned.add(tBurned);\r\n        totalRewards = totalRewards.add(tReward);\r\n\r\n        uint256 unspentRewards = totalRewards - totalRewardsSent;\r\n\r\n        if (\r\n            !takeSwap &&\r\n            unspentRewards >= rewardExchangeMinAmount\r\n        ) {\r\n\r\n            totalRewardsSent = totalRewardsSent.add(rewardExchangeMinAmount);\r\n\r\n            //After exchanging to ETH, transfer to the board of directors\r\n            _swapTokensForEth(\r\n                rewardExchangeMinAmount,\r\n                address(this),                \r\n                directorTokenAddress\r\n            );\r\n        }\r\n\r\n        \r\n        if (tBurned > 0) _burn(from, tBurned); //Burn amount\r\n        if (tLiquidity > 0) _transfer(from, address(this), tLiquidity); //Record for pending liquidity pool\r\n        if (tReward > 0) _transfer(from, address(this), tReward); //Reward amount is first transferred to the contract address\r\n\r\n        if(swapAndLiquifyEnabled && !takeSwap){\r\n            _sendTokenToPool(pendingAddToLiquidityPool);\r\n            pendingAddToLiquidityPool=0;\r\n        }\r\n\r\n        _transfer(from, to, tTransferAmount); //Transfer to the recipient's address\r\n    }\r\n\r\n    function _sendNFTByDonation(address account) private {\r\n        // Calculate mining count\r\n        uint256 miningCount = promineContract.getMiningPoolCount(account);\r\n        // Calculate the number of NFTs to be sent to the user\r\n        uint256 nftCountToSend = miningCount / 10 - nftSentCount[account];\r\n\r\n        // Send NFTs to users\r\n        if (nftCountToSend > 0) {\r\n            // Update mapping that records the number of NFTs sent\r\n            nftSentCount[account] += nftCountToSend;\r\n\r\n            mysterykeyContract.safeMint(\r\n                account,\r\n                mysteryKeyNftType,\r\n                nftCountToSend\r\n            );\r\n        }\r\n    }\r\n\r\n    function _updateActivationLimit(uint256 count) private {\r\n        require(\r\n            (referralActivationsTotal.add(count)) <= MAX_ACTIVATION_LIMIT,\r\n            \"the upper limit has been reached\"\r\n        );\r\n\r\n        referralActivationsTotal = referralActivationsTotal.add(count);\r\n    }\r\n\r\n    function getCirculationSupply() external view returns(uint256 circulationSupply){\r\n        return referralActivationsTotal * GENESIS_ALLOCATION_AMOUNT;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_daoMainAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mysteryKeyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pineUniswapExpress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_promineContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"DonateToPineconeHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GenesisAddressHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Level2UpgradeHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Level3UpgradeHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GENESIS_ALLOCATION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE_MIGRATION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ACTIVATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activatedAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressState\",\"outputs\":[{\"internalType\":\"enum PineconeToken.ADDRESS_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowDonation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorization\",\"outputs\":[{\"internalType\":\"contract IAuthorization\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boostLevelIndex\",\"type\":\"uint256\"}],\"name\":\"boostMiningSpeedForNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfAddressIsDirector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfAddressIsMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfAddressIsPine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"convertToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesisAddress\",\"type\":\"address\"}],\"name\":\"createGenesisAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directorTokenAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directorUpgradeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miningCount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"donateForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculationSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"circulationSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferralIncomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miningCount\",\"type\":\"uint256\"}],\"name\":\"migrateOfficial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mysteryKeyNftType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mysterykeyContract\",\"outputs\":[{\"internalType\":\"contract IMysteryKeyNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftSentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlineBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"operateForNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAddToLiquidityPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pineUniswapExpress\",\"outputs\":[{\"internalType\":\"contract IPineUniswapExpress\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryDaoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promineContract\",\"outputs\":[{\"internalType\":\"contract IProMine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralActivationsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardExchangeMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfReferralDonateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowDonation\",\"type\":\"bool\"}],\"name\":\"setAllowDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDefaultRoleId\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"directoryAddress\",\"type\":\"address\"}],\"name\":\"setDirectorTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setDirectorUpgradeCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_errorMessage\",\"type\":\"string\"}],\"name\":\"setErrorMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upgradeFeeUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spotFeeUSDT\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"}],\"name\":\"setMysteryKeyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceAddress\",\"type\":\"address\"}],\"name\":\"setPriceForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addressToSet\",\"type\":\"address\"}],\"name\":\"setPrimaryDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setRewardExchangeMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pineUniswapExpress\",\"type\":\"address\"}],\"name\":\"setUniswapExpressAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotFeeUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"swapAnyTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"swapETHForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTokenAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddr\",\"type\":\"address\"}],\"name\":\"updateAssetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUsdAddress\",\"type\":\"address\"}],\"name\":\"updateUsdAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"upgradeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFeeUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inviterAddr\",\"type\":\"address\"}],\"name\":\"upgradeToGenesisAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeToLevel2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeToLevel3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDonateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawalForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PineconeToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000019fa7dedcd1667fb12b04b22b3cc4ea3344074e20000000000000000000000008bea23a0a5fced66d04644429378b54ac4e573f6000000000000000000000000bf5d0864f0beb607c91e0777f137e23de398d8cb000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000850920202c5463234e07d4cb66d3be27a54bcaf1000000000000000000000000ab594600376ec9fd91f8e885dadf0ce036862de0000000000000000000000000371a6055d50d3fbcbf9d5662144340c9e30fc2d0000000000000000000000000d03d964d4c93fc5d0c0bec9e7bdf3693070793b70000000000000000000000006d7cabcd5b469611ed7964faddf3892f1d62f23a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea556ed7923a8198b10ca868d2d8e182b303d25de9f7b1fe2038f7cfcacb0a7d"}