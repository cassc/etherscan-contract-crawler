{"SourceCode": "pragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint8);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  \r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    _owner = _msgSender();\r\n    emit OwnershipTransferred(address(0), _msgSender());\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"-_-\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Energy8 is Context, Ownable, IERC20 {\r\n  using SafeMath for uint256;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => uint256) private _startPeriodBalances;\r\n  mapping (address => uint256) private _spentDuringPeriod;\r\n  mapping (address => uint256) private _periodStartTime;\r\n  mapping (address => bool) private _whitelist;\r\n  mapping (address => bool) private _feeWhitelist;\r\n  mapping (address => bool) private _blacklist;\r\n  mapping (address => string) private _blacklistReasons;\r\n  mapping (address => bool) private _sellers;\r\n  mapping (address => bool) public admins;\r\n\r\n  string private _name = \"Energy8\";\r\n  string private _symbol = \"E8\";\r\n\r\n  uint8 private _decimals = 9;\r\n  uint256 private _totalSupply = 100000000000000 * 10**_decimals; // 100 000 000 000 000\r\n  uint256 public periodDuration = 1 days;\r\n  uint256 public minTokensForLiquidityGeneration = _totalSupply / 1000000; // 0.001% of total supply\r\n  \r\n  /*\r\n    10000 - 100%\r\n    1000 - 10%\r\n    100 - 1%\r\n    10 - 0.1%\r\n    1 - 0.01%\r\n  */\r\n  // fees\r\n  uint16 public fee = 0; // transfer fee 0%\r\n  uint16 public buyFee = 0;  // buy fee 0%\r\n  uint16 public sellFee = 0; // sell fee 0%\r\n  uint16 public liquidityFee = 0; // transfer liquidity fee 0%\r\n  uint16 public sellLiquidityFee = 600; // sell liquidity fee 6%\r\n  uint16 public buyLiquidityFee = 500; // buy liquidity fee 5%\r\n  uint16 public marketingFee = 200; // marketing fee 2%\r\n  \r\n  address public marketingWallet;\r\n  address public feeWallet;\r\n  \r\n  uint16 public maxTransferPercent = 3000; // 30%\r\n  uint16 public maxHodlPercent = 100; // 1%\r\n  \r\n  // AMM addresses\r\n  IRouter public router;\r\n  address public pair;\r\n  address private mainTokenInPair;\r\n  \r\n  address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n  \r\n  modifier onlyAdmin() {\r\n    require(admins[_msgSender()], \"Who are you?\");\r\n    _;\r\n  }\r\n  \r\n  bool private isLocked;\r\n\r\n  modifier lock {\r\n    isLocked = true;\r\n    _;\r\n    isLocked = false;\r\n  }\r\n\r\n  constructor(IRouter _router) {\r\n    _balances[_msgSender()] = _totalSupply;\r\n    \r\n    mainTokenInPair = _router.WETH();\r\n    \r\n    pair = IFactory(_router.factory()).createPair(address(this), mainTokenInPair);\r\n    \r\n    // add owner and this contract to the whitelist for disable transfer limitations and fees\r\n    _whitelist[_msgSender()] = true;\r\n    _whitelist[address(this)] = true;\r\n    _feeWhitelist[_msgSender()] = true;\r\n    _feeWhitelist[address(this)] = true;\r\n\r\n    _sellers[pair] = true;\r\n    _sellers[address(_router)] = true;\r\n    \r\n    router = _router;\r\n    \r\n    marketingWallet = _msgSender();\r\n    feeWallet = DEAD;\r\n\r\n    admins[_msgSender()] = true;\r\n    \r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n  }\r\n\r\n  function getOwner() external view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  function decimals() external view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function name() external view override returns (string memory)  {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  \r\n  function balanceOf(address account) external view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom (address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance'));\r\n    return true;\r\n  }\r\n  \r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n  \r\n  receive() external payable {}\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    require(sender != recipient, \"ERC20: The sender cannot be the recipient\");\r\n    require(amount != 0, \"ERC20: Transfer amount must be greater than zero\");\r\n    require(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    \r\n    uint256 amountWithFee = amount;\r\n\r\n    uint256 liquidityFeeInTokens;\r\n    uint256 marketingFeeInTokens;\r\n    uint256 feeInTokens;\r\n\r\n    // buy tokens\r\n    if (_sellers[sender]) {\r\n      if (!_feeWhitelist[recipient]) {\r\n        liquidityFeeInTokens = _getPercentage(amount, buyLiquidityFee);\r\n        marketingFeeInTokens = _getPercentage(amount, marketingFee);\r\n        feeInTokens = _getPercentage(amount, buyFee);\r\n        amountWithFee = amountWithFee.sub(marketingFeeInTokens).sub(feeInTokens).sub(liquidityFeeInTokens);\r\n      }\r\n      \r\n      if (!_whitelist[recipient]) {\r\n        _checkHodlPercent(recipient, amountWithFee, \"You cannot hold this amount of tokens. Looks like you are already a whale!\");\r\n      }\r\n    // sell tokens\r\n    } else if (_sellers[recipient]) {\r\n      require(!_blacklist[sender], _blacklistReasons[sender]);\r\n\r\n      if (!_feeWhitelist[sender]) {\r\n        liquidityFeeInTokens = _getPercentage(amount, sellLiquidityFee);\r\n        marketingFeeInTokens = _getPercentage(amount, marketingFee);\r\n        feeInTokens = _getPercentage(amount, sellFee);\r\n        amountWithFee = amountWithFee.sub(marketingFeeInTokens).sub(feeInTokens).sub(liquidityFeeInTokens);\r\n      }\r\n      \r\n      if (!_whitelist[sender]) {\r\n        _checkAndUpdatePeriod(sender, amount, \"You can not sell this amount of tokens for the current period. Just relax and wait\");\r\n      }\r\n    // transfer tokens between addresses\r\n    } else {\r\n      require(!_blacklist[sender] && !_blacklist[_msgSender()], _blacklistReasons[sender]);\r\n\r\n      if (!_feeWhitelist[sender] && !_feeWhitelist[_msgSender()]) {\r\n        liquidityFeeInTokens = _getPercentage(amount, liquidityFee);\r\n        marketingFeeInTokens = _getPercentage(amount, marketingFee);\r\n        feeInTokens = _getPercentage(amount, fee);\r\n        amountWithFee = amountWithFee.sub(marketingFeeInTokens).sub(feeInTokens).sub(liquidityFeeInTokens);\r\n      }\r\n      \r\n      if (!_whitelist[recipient] && !_whitelist[_msgSender()]) {\r\n        _checkHodlPercent(recipient, amountWithFee, \"Recipient cannot hold this amount of tokens. Looks like he's already a whale!\");\r\n      }\r\n      \r\n      if (!_whitelist[sender] && !_whitelist[_msgSender()]) {\r\n        _checkAndUpdatePeriod(sender, amount, \"You can not transfer this amount of tokens for the current period. Just relax and wait\");\r\n      }\r\n    }\r\n    \r\n    if (marketingFeeInTokens > 0) {\r\n        _balances[marketingWallet] = _balances[marketingWallet].add(marketingFeeInTokens);\r\n        emit Transfer(sender, marketingWallet, marketingFeeInTokens);\r\n    }\r\n    \r\n    if (feeInTokens > 0) {\r\n        _balances[feeWallet] = _balances[feeWallet].add(feeInTokens);\r\n        emit Transfer(sender, feeWallet, feeInTokens);\r\n    }\r\n\r\n    if (liquidityFeeInTokens > 0) {\r\n        uint256 contractTokenBalance = _balances[address(this)].add(liquidityFeeInTokens);\r\n\r\n        _balances[address(this)] = contractTokenBalance;\r\n        emit Transfer(sender, address(this), liquidityFeeInTokens);\r\n        \r\n        if (\r\n          !isLocked &&\r\n          sender != pair &&\r\n          contractTokenBalance >= minTokensForLiquidityGeneration\r\n        ) {\r\n            generateLiquidity(contractTokenBalance);\r\n        }\r\n    }\r\n    \r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amountWithFee);\r\n\r\n    emit Transfer(sender, recipient, amountWithFee);\r\n  }\r\n  \r\n  function generateLiquidity() external {\r\n      generateLiquidity(_balances[address(this)]);\r\n  }\r\n  \r\n  function generateLiquidity(uint256 amount) internal lock {\r\n    uint256 tokensForSell = amount.div(2);\r\n    uint256 tokensForLiquidity = amount.sub(tokensForSell);\r\n\r\n    uint256 initialBalance = address(this).balance;\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = mainTokenInPair;\r\n    \r\n    _approve(address(this), address(router), amount);\r\n\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokensForSell,\r\n        0, // accept any amount\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n\r\n    uint256 balance = address(this).balance.sub(initialBalance);\r\n\r\n    router.addLiquidityETH{value: balance}(\r\n        address(this),\r\n        tokensForLiquidity,\r\n        0, // slippage is unavoidable\r\n        0, // slippage is unavoidable\r\n        DEAD,\r\n        block.timestamp\r\n    );\r\n  }\r\n  \r\n  function _checkAndUpdatePeriod(address account, uint256 amount, string memory errorMessage) internal {\r\n    bool _isPeriodEnd = block.timestamp > (_periodStartTime[account] + periodDuration);\r\n\r\n    if (_isPeriodEnd) {\r\n        _periodStartTime[account] = block.timestamp;\r\n        _startPeriodBalances[account] = _balances[account];\r\n        _spentDuringPeriod[account] = 0;\r\n    }\r\n\r\n    uint256 newSpentDuringPeriod = _spentDuringPeriod[account] + amount;\r\n    uint256 accountCanSpent = _getPercentage(_startPeriodBalances[account], maxTransferPercent);\r\n    \r\n    require(newSpentDuringPeriod <= accountCanSpent, errorMessage);\r\n    \r\n    _spentDuringPeriod[account] = newSpentDuringPeriod;\r\n  }\r\n  \r\n  function _checkHodlPercent(address account, uint256 amount, string memory erorrMessage) internal view {\r\n    uint256 oneAccountCanHodl = _getPercentage(_totalSupply, maxHodlPercent);\r\n\r\n    require((_balances[account] + amount) <= oneAccountCanHodl, erorrMessage);\r\n  }\r\n  \r\n  function setSeller(address account, bool value) external onlyAdmin {\r\n    _sellers[account] = value;\r\n  }\r\n  \r\n  function setWhitelist(address account, bool value) external onlyAdmin {\r\n    _whitelist[account] = value;\r\n  }\r\n  \r\n  function setFeeWhitelist(address account, bool value) external onlyAdmin {\r\n    _feeWhitelist[account] = value;\r\n  }\r\n  \r\n  function setBlacklist(address account, bool value, string memory reason) external onlyAdmin {\r\n    _blacklist[account] = value;\r\n    _blacklistReasons[account] = reason;\r\n  }\r\n  \r\n  function setAdmin(address account, bool value) external onlyOwner {\r\n    admins[account] = value;\r\n  }\r\n  \r\n  function setMaxHodlPercent(uint16 percent) external onlyAdmin {\r\n    require(percent > 0 && percent <= 10000); // >0% - 100%\r\n    maxHodlPercent = percent;\r\n  }\r\n  \r\n  function setMaxTransferPercent(uint16 percent) external onlyAdmin {\r\n    require(percent >= 100 && percent <= 10000); // 1% - 100%\r\n    maxTransferPercent = percent;\r\n  }\r\n  \r\n  function setPeriodDuration(uint time) external onlyAdmin {\r\n    require(time <= 14 days);\r\n    periodDuration = time;\r\n  }\r\n  \r\n  function setRouter(IRouter _router) external onlyOwner {\r\n      router = _router;\r\n  }\r\n  \r\n  function setPair(address _pair) external onlyOwner {\r\n      pair = _pair;\r\n  }\r\n  \r\n  function setMainTokenInPair(address token) external onlyOwner {\r\n      mainTokenInPair = token;\r\n  }\r\n  \r\n  function setMinTokensForLiquidityGeneration(uint256 amount) external onlyOwner {\r\n      minTokensForLiquidityGeneration = amount;\r\n  }\r\n  \r\n  function setTaxFees(uint16 _fee, uint16 _buyFee, uint16 _sellFee) external onlyOwner {\r\n    require(\r\n        _fee <= 1000 && // 0% - 10%\r\n        _buyFee <= 1000 && // 0% - 10%\r\n        _sellFee <= 1000 // 0% - 10%\r\n    );\r\n    fee = _fee;\r\n    buyFee = _buyFee;\r\n    sellFee = _sellFee;\r\n  }\r\n  \r\n  function setLiquidityFees(uint16 _liquidityFee, uint16 _buyLiquidityFee, uint16 _sellLiquidityFee) public onlyOwner {\r\n    require(\r\n        _liquidityFee <= 1000 && // 0% - 10%\r\n        _buyLiquidityFee <= 1000 && // 0% - 10%\r\n        _sellLiquidityFee <= 1000 // 0% - 10%\r\n    );\r\n    liquidityFee = _liquidityFee;\r\n    buyLiquidityFee = _buyLiquidityFee;\r\n    sellLiquidityFee = _sellLiquidityFee;\r\n  }\r\n  \r\n  function setMarketingFee(uint16 _marketingFee) external onlyOwner {\r\n    require(_marketingFee <= 250); // 0% - 2.5%\r\n    marketingFee = _marketingFee;\r\n  }\r\n  \r\n  function setMarketingWallet(address _marketingWallet) external onlyOwner {\r\n    require(_marketingWallet != feeWallet);\r\n    marketingWallet = _marketingWallet;\r\n  }\r\n\r\n  function setFeeWallet(address _feeWallet) external onlyOwner {\r\n    require(_feeWallet != owner() && _feeWallet != marketingWallet);\r\n    feeWallet = _feeWallet;\r\n  }\r\n  \r\n  function disableLiquidityGeneration() external onlyOwner {\r\n    setLiquidityFees(0, 0, 0);\r\n  }\r\n  \r\n  function isSeller(address account) external view returns (bool) {\r\n      return _sellers[account];\r\n  }\r\n  \r\n  function isWhitelisted(address account) external view returns (bool) {\r\n      return _whitelist[account];\r\n  }\r\n  \r\n  function isExcludedFromFee(address account) external view returns (bool) {\r\n      return _feeWhitelist[account];\r\n  }\r\n  \r\n  function isBlacklisted(address account) external view returns (bool) {\r\n      return _blacklist[account];\r\n  }\r\n  \r\n  function blacklistReason(address account) external view returns (string memory) {\r\n      return _blacklistReasons[account];\r\n  }\r\n  \r\n  function getAccountPeriodInfo(address account) external view returns (uint256 startBalance, uint256 startTime, uint256 spent) {\r\n      startBalance = _startPeriodBalances[account];\r\n      startTime = _periodStartTime[account];\r\n      spent = _spentDuringPeriod[account];\r\n  }\r\n  \r\n  function _getPercentage(uint256 number, uint16 percent) internal pure returns (uint256) {\r\n    return (number * percent) / 10000;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistReason\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLiquidityGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountPeriodInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHodlPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensForLiquidityGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_liquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"setLiquidityFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setMainTokenInPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_marketingFee\",\"type\":\"uint16\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"name\":\"setMaxHodlPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"name\":\"setMaxTransferPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensForLiquidityGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_sellFee\",\"type\":\"uint16\"}],\"name\":\"setTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Energy8", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1337", "ConstructorArguments": "000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f73e56fb53b08ed877f5621a3d7b6da65516a8ddd5247b886aed00688a87a2c"}