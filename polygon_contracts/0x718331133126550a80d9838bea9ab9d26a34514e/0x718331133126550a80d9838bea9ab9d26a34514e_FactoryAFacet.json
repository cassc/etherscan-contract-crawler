{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Diamond/facets/FactoryA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {LibReentrancyGuard} from \\\"contracts/Diamond/libraries/LibReentrancyGuard.sol\\\";\\nimport {LibDiamond} from \\\"contracts/Diamond/libraries/LibDiamond.sol\\\";\\nimport {LibBusinessId} from \\\"contracts/Diamond/libraries/LibBusinessId.sol\\\";\\nimport {LibFactory} from \\\"contracts/Diamond/libraries/LibFactory.sol\\\";\\n\\nimport {NFTBaseInfo, IAsset} from \\\"contracts/Diamond/interfaces/IAsset.sol\\\";\\nimport {Composition} from \\\"contracts/Diamond/interfaces/IPortfolio.sol\\\";\\nimport {Module} from \\\"contracts/Diamond/interfaces/IController.sol\\\";\\nimport {IAutoCoffer} from \\\"contracts/Diamond/interfaces/IAutomationCoffer.sol\\\";\\nimport {IRecord} from \\\"contracts/Diamond/interfaces/IRecord.sol\\\";\\nimport {IReserve} from \\\"contracts/Diamond/interfaces/IReserve.sol\\\";\\nimport {IFactoryA} from \\\"contracts/Diamond/interfaces/IFactoryA.sol\\\";\\n\\ncontract FactoryAFacet is IFactoryA {\\n    using Address for address;\\n\\n    address private immutable original;\\n\\n    /* ----------------------------- modifier ----------------------------- */\\n\\n    modifier onlyDelegateCall() {\\n        require(address(this) != original);\\n        _;\\n    }\\n\\n    modifier onlyNFTOwner(address _NFTAddr, uint256 _tokenId) {\\n        require(msg.sender == IERC721Upgradeable(_NFTAddr).ownerOf(_tokenId), \\\"Factory: NOT_NFT_OWNER\\\");\\n        _;\\n    }\\n\\n    modifier AutoMate(address _NFTAddr, uint256 _tokenId) {\\n        require(\\n            msg.sender == LibFactory.getStorage().autoMeta\\n                || msg.sender == IERC721Upgradeable(_NFTAddr).ownerOf(_tokenId),\\n            \\\"Factory: NOT_AUTO_META\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ---------------------------- constructor ---------------------------- */\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /* ----------------------------- onlyOwner ----------------------------- */\\n    function setCreateFees(address _createFeeToken, uint256 _createFees) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        fs.createFees = _createFees;\\n        fs.createFeeToken = _createFeeToken;\\n        emit CreateFeesChanged(_createFeeToken, _createFees);\\n    }\\n\\n    function setReplicateFees(uint256 _replicateFeeRatio) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        // require(_replicateFees != 0, \\\"SCF: ZERO_FEES\\\");\\n        require(_replicateFeeRatio <= 10000, \\\"SCF: FEES_OVERFLOW\\\");\\n        fs.replicateFeeRatio = _replicateFeeRatio;\\n        emit ReplicateFeeRatioChanged(_replicateFeeRatio);\\n    }\\n\\n    function setEntryFees(uint256 _entryFeeRatio) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        // require(_entryFees != 0, \\\"SCF: ZERO_FEES\\\");\\n        require(_entryFeeRatio <= 10000, \\\"SCF: FEES_OVERFLOW\\\");\\n        fs.entryFeeRatio = _entryFeeRatio;\\n        emit EntryFeeRatioChanged(_entryFeeRatio);\\n    }\\n\\n    function setExitFees(uint256 _exitFeeRatio) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        // require(_exitFees != 0, \\\"SCF: ZERO_FEES\\\");\\n        require(_exitFeeRatio <= 10000, \\\"SCF: FEES_OVERFLOW\\\");\\n        fs.exitFeeRatio = _exitFeeRatio;\\n        emit ExitFeeRatioChanged(_exitFeeRatio);\\n    }\\n\\n    function setInvestmentFeeRatio(uint256 _investmentFeeRatio) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        // require(_investmentFeeRatio != 0, \\\"SCF: ZERO_FEES\\\");\\n        require(_investmentFeeRatio <= 10000, \\\"SCF: FEES_OVERFLOW\\\");\\n        fs.investmentFeeRatio = _investmentFeeRatio;\\n        emit InvestmentFeeRatioChanged(_investmentFeeRatio);\\n    }\\n\\n    function setMaxRoyaltyRatio(uint256 _maxRoyaltyRatio) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        emit MaxRoyaltyRatioChanged(fs.maxRoyaltyRatio, _maxRoyaltyRatio);\\n        fs.maxRoyaltyRatio = _maxRoyaltyRatio;\\n    }\\n\\n    function setRoyaltyFeeRatio(uint256 _royaltyFeeRatio) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        fs.royaltyFeeRatio = _royaltyFeeRatio;\\n        emit RoyaltyFeeRatioChanged(_royaltyFeeRatio);\\n    }\\n\\n    function addBudgetToken(address token) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        fs.record.addBudgetToken(token);\\n        emit BudgetTokenAdded(token);\\n    }\\n\\n    function removeBudgetToken(address token) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        fs.record.removeBudgetToken(token);\\n        emit BudgetTokenRemoved(token);\\n    }\\n\\n    function setAutoCoffer(address _autoCoffer) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        emit AutoCofferChanged(address(fs.autoCoffer), _autoCoffer);\\n        fs.autoCoffer = IAutoCoffer(_autoCoffer);\\n    }\\n\\n    function setFeeSplitter(address _feeSplitter) external onlyDelegateCall {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n        emit FeeSplitterChanged(fs.feeSplitter, _feeSplitter);\\n        fs.feeSplitter = _feeSplitter;\\n    }\\n\\n    /* ------------------------------- user -------------------------------- */\\n\\n    // 0x253f02ac = create(bytes32,address,uint256,(uint96,address,uint256),(address[],uint256[]),(address,bytes))\\n    function create(\\n        bytes32 _businessId,\\n        address _NFTAddr,\\n        uint256 _replicatedTokenId,\\n        NFTBaseInfo calldata _nftBaseInfo,\\n        Composition calldata _composition,\\n        Module calldata _module\\n    ) external payable onlyDelegateCall returns (uint256 tokenId) {\\n        LibBusinessId.checkIn(_businessId);\\n\\n        LibReentrancyGuard.nonReentrantBefore();\\n        {\\n            LibFactory.FactoryStorage storage fs = LibFactory.getStorage();\\n\\n            tokenId = IAsset(_NFTAddr).mint(msg.sender, _replicatedTokenId, _composition, _nftBaseInfo);\\n\\n            if (_replicatedTokenId != 0) {\\n                // \u590d\u5236\\n                if (!IAsset(_NFTAddr).exists(_replicatedTokenId)) {\\n                    revert NFTNotExists(_NFTAddr, _replicatedTokenId);\\n                }\\n                address replicatedNFTOwner = IAsset(_NFTAddr).ownerOf(_replicatedTokenId);\\n                NFTBaseInfo memory replicatedNFTBaseInfo = IAsset(_NFTAddr).getNFTBaseInfo(_replicatedTokenId);\\n                address replicatedFeeToken = replicatedNFTBaseInfo.budgetToken;\\n                uint256 replicatedFeeAmount = (fs.replicateFeeRatio * replicatedNFTBaseInfo.sellPrice) / 10000;\\n\\n                {\\n                    LibFactory.charge(msg.sender, fs.feeSplitter, replicatedFeeToken, replicatedFeeAmount);\\n                    LibFactory.charge(\\n                        msg.sender,\\n                        replicatedNFTOwner,\\n                        replicatedFeeToken,\\n                        replicatedNFTBaseInfo.sellPrice - replicatedFeeAmount\\n                    );\\n                }\\n                fs.record.setNFTBudget(_NFTAddr, tokenId, replicatedNFTBaseInfo.budgetToken);\\n                emit Create(_businessId, tokenId, _replicatedTokenId, replicatedFeeToken, replicatedFeeAmount);\\n            } else {\\n                // \u539f\u521b\\n                LibFactory.charge(msg.sender, fs.feeSplitter, fs.createFeeToken, fs.createFees);\\n\\n                IAsset(_NFTAddr).addModule(tokenId, _module);\\n\\n                if (uint256(_nftBaseInfo.royalties) > fs.maxRoyaltyRatio) {\\n                    revert RoyaltyRatioOverflow(uint256(_nftBaseInfo.royalties));\\n                }\\n\\n                require(fs.record.isBudget(_nftBaseInfo.budgetToken));\\n\\n                fs.record.setNFTBudget(_NFTAddr, tokenId, _nftBaseInfo.budgetToken);\\n\\n                emit Create(_businessId, tokenId, _replicatedTokenId, fs.createFeeToken, fs.createFees);\\n            }\\n        }\\n        LibReentrancyGuard.nonReentrantAfter();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibReentrancyGuard {\\n    bytes32 internal constant REENTRANCY_GUARD_SLOT =\\n        keccak256(\\\"diamond.standard.reentrancyguard.reentrancyguard\\\");\\n\\n    uint256 internal constant _NOT_ENTERED = 1;\\n    uint256 internal constant _ENTERED = 2;\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function getStorage()\\n        internal\\n        pure\\n        returns (ReentrancyGuardStorage storage rs)\\n    {\\n        bytes32 position = REENTRANCY_GUARD_SLOT;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n\\n    function setInitStatus() internal {\\n        ReentrancyGuardStorage storage rs = getStorage();\\n        rs._status = _NOT_ENTERED;\\n    }\\n\\n    function nonReentrantBefore() internal {\\n        LibReentrancyGuard.ReentrancyGuardStorage\\n            storage rs = LibReentrancyGuard.getStorage();\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(\\n            rs._status != LibReentrancyGuard._ENTERED,\\n            \\\"ReentrancyGuard: reentrant call\\\"\\n        );\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rs._status = LibReentrancyGuard._ENTERED;\\n    }\\n\\n    function nonReentrantAfter() internal {\\n        LibReentrancyGuard.ReentrancyGuardStorage\\n            storage rs = LibReentrancyGuard.getStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rs._status = LibReentrancyGuard._NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\nimport {IDiamond} from \\\"contracts/Diamond/interfaces/IDiamond.sol\\\";\\nimport {IDiamondCut} from \\\"contracts/Diamond/interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror NoSelectorsGivenToAdd();\\nerror NotContractOwner(address _user, address _contractOwner);\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror NoBytecodeAtAddress(address _contractAddress, string _message);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    uint256 internal constant _NOT_ENTERED = 1;\\n    uint256 internal constant _ENTERED = 2;\\n\\n    struct FacetAddressAndSelectorPosition {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n    }\\n\\n    struct DiamondStorage {\\n        // function selector => facet address and selector position in selectors array\\n        mapping(bytes4 => FacetAddressAndSelectorPosition) facetAddressAndSelectorPosition;\\n        bytes4[] selectors;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        if (msg.sender != diamondStorage().contractOwner) {\\n            revert NotContractOwner(msg.sender, diamondStorage().contractOwner);\\n        }\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n            address facetAddress = _diamondCut[facetIndex].facetAddress;\\n            if (functionSelectors.length == 0) {\\n                revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n            }\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamond.FacetCutAction.Add) {\\n                addFunctions(facetAddress, functionSelectors);\\n            } else if (action == IDiamond.FacetCutAction.Replace) {\\n                replaceFunctions(facetAddress, functionSelectors);\\n            } else if (action == IDiamond.FacetCutAction.Remove) {\\n                removeFunctions(facetAddress, functionSelectors);\\n            } else {\\n                revert IncorrectFacetCutAction(uint8(action));\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_facetAddress == address(0)) {\\n            revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n        }\\n        DiamondStorage storage ds = diamondStorage();\\n        uint16 selectorCount = uint16(ds.selectors.length);\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n            if (oldFacetAddress != address(0)) {\\n                revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n            }\\n            // solhint-disable-next-line\\n            ds.facetAddressAndSelectorPosition[selector] = FacetAddressAndSelectorPosition(_facetAddress, selectorCount);\\n            ds.selectors.push(selector);\\n            selectorCount++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        if (_facetAddress == address(0)) {\\n            revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n        }\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n            // can't replace immutable functions -- functions defined directly in the diamond in this case\\n            if (oldFacetAddress == address(this)) {\\n                revert CannotReplaceImmutableFunction(selector);\\n            }\\n            if (oldFacetAddress == _facetAddress) {\\n                revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n            }\\n            if (oldFacetAddress == address(0)) {\\n                revert CannotReplaceFunctionThatDoesNotExists(selector);\\n            }\\n            // replace old facet address\\n            ds.facetAddressAndSelectorPosition[selector].facetAddress = _facetAddress;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 selectorCount = ds.selectors.length;\\n        if (_facetAddress != address(0)) {\\n            revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            FacetAddressAndSelectorPosition memory oldFacetAddressAndSelectorPosition =\\n                ds.facetAddressAndSelectorPosition[selector];\\n            if (oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n                revert CannotRemoveFunctionThatDoesNotExist(selector);\\n            }\\n\\n            // can't remove immutable functions -- functions defined directly in the diamond\\n            if (oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n                revert CannotRemoveImmutableFunction(selector);\\n            }\\n            // replace selector with last selector\\n            selectorCount--;\\n            if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n                bytes4 lastSelector = ds.selectors[selectorCount];\\n                ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n                ds.facetAddressAndSelectorPosition[lastSelector].selectorPosition =\\n                    oldFacetAddressAndSelectorPosition.selectorPosition;\\n            }\\n            // delete last selector\\n            ds.selectors.pop();\\n            delete ds.facetAddressAndSelectorPosition[selector];\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        if (contractSize == 0) {\\n            revert NoBytecodeAtAddress(_contract, _errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibBusinessId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibBusinessId {\\n    bytes32 internal constant BUSINESS_ID_SLOT = keccak256(\\\"diamond.standard.businessid.businessid\\\");\\n\\n    struct BusinessIdStorage {\\n        mapping(bytes32 => bool) businessIdSBook;\\n    }\\n\\n    function getStorage() internal pure returns (BusinessIdStorage storage rs) {\\n        bytes32 position = BUSINESS_ID_SLOT;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n\\n    function checkIn(bytes32 businessId) internal {\\n        BusinessIdStorage storage rs = getStorage();\\n        if (rs.businessIdSBook[businessId]) {\\n            revert(\\\"businessId already exists\\\");\\n        } else {\\n            rs.businessIdSBook[businessId] = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/libraries/LibFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IController} from \\\"contracts/Diamond/interfaces/IController.sol\\\";\\nimport {IOperatorResolver} from \\\"contracts/Diamond/interfaces/IOperatorResolver.sol\\\";\\nimport {IRecord} from \\\"contracts/Diamond/interfaces/IRecord.sol\\\";\\nimport {IReserve} from \\\"contracts/Diamond/interfaces/IReserve.sol\\\";\\nimport {IAutoCoffer} from \\\"contracts/Diamond/interfaces/IAutomationCoffer.sol\\\";\\n\\nlibrary LibFactory {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 constant FACTORY_POSITION = keccak256(\\\"factory.storage\\\");\\n\\n    struct FactoryStorage {\\n        IController controller;\\n        IOperatorResolver operatorResolver;\\n        address feeSplitter;\\n        IRecord record;\\n        IReserve reserve;\\n        IAutoCoffer autoCoffer;\\n        address autoMeta;\\n        /// @dev Address of the contract that when create a NFT, it will charge a fee\\n        address createFeeToken;\\n        /// @dev Fees when NFT are created\\n        /// createFees is a fixed amount\\n        uint256 createFees;\\n        /// @dev Fees when NFT are replicated\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 replicateFeeRatio;\\n        /// @dev Fees when funds stay in portfolios\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 entryFeeRatio;\\n        /// @dev Fees when funds are withdrawed\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 exitFeeRatio;\\n        /// @dev Max royalty ratio\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 maxRoyaltyRatio;\\n        /// @dev The ratio of the royalty fee\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 royaltyFeeRatio;\\n        /// @dev The ratio of the investment fee\\n        ///      From 1 to 10,000 (0.01% to 100%)\\n        uint256 investmentFeeRatio;\\n    }\\n\\n    function getStorage() internal pure returns (FactoryStorage storage fs) {\\n        bytes32 position = FACTORY_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * _controller = someAddresses[0] The address of the controller\\n     * _operatorResolver = someAddresses[1] The address of the operator resolver\\n     * _feeSplitter = someAddresses[2] The address of the fee splitter\\n     * _record = someAddresses[3] The address of the record\\n     * _reserve = someAddresses[4] The address of the reserve\\n     * _autoMeta = someAddresses[5] The address of the auto meta\\n     * _autoCoffer = someAddresses[6] The address of the auto coffer\\n     * _createFeeToken = someAddresses[7]\uff0cThe address of the create fee token\\n     * _createFees = someUint256s[0], The fees when NFT are created\\n     * _replicateFees = someUint256s[1], The fees when NFT are replicated\\n     * _entryFees = someUint256s[2], The fees when funds stay in budgets\\n     * _exitFees = someUint256s[3], The fees when funds are withdrawed from budgets\\n     * _maxRoyaltyRatio = someUint256s[4], The max royalty ratio\\n     * _royaltyFeeRatio = someUint256s[5], The ratio of the royalty fee\\n     * _investmentFeeRatio = someUint256s[6], The ratio of the investment fee\\n     */\\n    function setInitStatus(address[] calldata someAddresses, uint256[] calldata someUint256s) internal {\\n        require(someAddresses.length == 8, \\\"SCF: INVALID_ADDRESSES_LENGTH\\\");\\n\\n        FactoryStorage storage fs = getStorage();\\n        fs.controller = IController(someAddresses[0]);\\n        fs.operatorResolver = IOperatorResolver(someAddresses[1]);\\n        fs.feeSplitter = someAddresses[2];\\n        fs.record = IRecord(someAddresses[3]);\\n        fs.reserve = IReserve(payable(someAddresses[4]));\\n        fs.autoMeta = someAddresses[5];\\n        fs.autoCoffer = IAutoCoffer(someAddresses[6]);\\n        fs.createFeeToken = someAddresses[7];\\n        fs.createFees = someUint256s[0];\\n        fs.replicateFeeRatio = someUint256s[1];\\n        fs.entryFeeRatio = someUint256s[2];\\n        fs.exitFeeRatio = someUint256s[3];\\n        fs.maxRoyaltyRatio = someUint256s[4];\\n        fs.royaltyFeeRatio = someUint256s[5];\\n        fs.investmentFeeRatio = someUint256s[6];\\n    }\\n\\n    function charge(address _from, address _recipient, address _tokenAddr, uint256 _tokenAmount) internal {\\n        if (_tokenAmount > 0) {\\n            if (_tokenAddr == address(0)) {\\n                // never happen\\n                require(msg.value == _tokenAmount, \\\"SCF: INVALID_ETH_VALUE\\\");\\n                (bool success,) = payable(_recipient).call{value: _tokenAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert(\\\"SCF: FEE_SPLITTER_CALL_FAILED\\\");\\n                }\\n            } else {\\n                uint256 balanceBefore = IERC20(_tokenAddr).balanceOf(address(_recipient));\\n                if (_from == address(this)) {\\n                    IERC20(_tokenAddr).safeTransfer(_recipient, _tokenAmount);\\n                } else {\\n                    IERC20(_tokenAddr).safeTransferFrom(_from, address(_recipient), _tokenAmount);\\n                }\\n\\n                uint256 balanceAfter = IERC20(_tokenAddr).balanceOf(address(_recipient));\\n                if (balanceAfter != balanceBefore + _tokenAmount) {\\n                    revert(\\\"SCF: SAFE_TRANSFERFROM_Failed\\\");\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {Composition} from \\\"contracts/Diamond/interfaces/IPortfolio.sol\\\";\\nimport {Module} from \\\"contracts/Diamond/interfaces/IController.sol\\\";\\n\\nstruct NFTBaseInfo {\\n    uint96 royalties; // 10000 = 100%\\n    address budgetToken;\\n    uint256 sellPrice;\\n}\\n\\ninterface IAsset is IERC721Upgradeable {\\n    function changeModuleDefaultParams(uint256 _tokenId, Module calldata _module) external returns (bool);\\n\\n    function getStrategyModuleDefaultParams(uint256 _tokenId) external view returns (bytes memory);\\n\\n    function isTokenIncluded(uint256 _tokenId, address _token) external view returns (bool);\\n\\n    function mint(\\n        address _owner,\\n        uint256 _replicatedTokenId,\\n        Composition calldata _composition,\\n        NFTBaseInfo calldata _NFTBaseInfo\\n    ) external returns (uint256);\\n\\n    function originalAsset(uint256 _tokenId) external view returns (uint256);\\n\\n    function exists(uint256 _tokenId) external view returns (bool);\\n\\n    function addModule(uint256 _tokenId, Module calldata _module) external returns (bool);\\n\\n    function getModule(uint256 _tokenId) external view returns (Module memory);\\n\\n    function getModuleAddress(uint256 _tokenId) external view returns (address);\\n\\n    function removeModule(uint256 _tokenId, Module calldata _module) external returns (bool);\\n\\n    function changePortfolio(uint256 _NFTId, Composition calldata _composition) external returns (bool);\\n\\n    function getPortfolio(uint256 _tokenId) external view returns (Composition memory);\\n\\n    function getNFTBaseInfo(uint256 _tokenId) external view returns (NFTBaseInfo memory);\\n\\n    function chargeNFTRoyalties(uint256 _tokenId, uint96 _royalties) external returns (bool);\\n\\n    function chargeNFTSellPrice(uint256 _tokenId, uint256 _sellPrice) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IPortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nstruct AssetInfo {\\n    address token; // 40 bytes\\n    bool inPortfolio; // (true = in portfolio, false = not in portfolio), 1 byte\\n    uint256 costRatio; // (10000 = 100%, 1 = 0.01%), 16 bytes\\n}\\n\\nstruct PORTFOLIO {\\n    address[] assets;\\n    mapping(address => AssetInfo) assetState;\\n}\\n\\nstruct Composition {\\n    address[] FTs;\\n    uint256[] FTCostRatios;\\n}\\n\\ninterface IPortfolio {\\n    function initPortfolio(address _NFTAddr, uint256 _NFTId, Composition calldata _composition)\\n        external\\n        returns (bool);\\n\\n    function changePortfolio(address _NFTAddr, uint256 _NFTId, Composition calldata _composition)\\n        external\\n        returns (bool);\\n\\n    function getPortfolio(address NFTAddr, uint256 NFTId) external view returns (Composition memory composition);\\n\\n    function IsInPortfolio(address NFTAddr, uint256 NFTId, address FT) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nstruct Module {\\n    address addr;\\n    bytes defaultParams;\\n}\\n\\ninterface IController {\\n    function isModule(address _module) external view returns (bool);\\n\\n    function addModule(address[] memory _modules) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IAutomationCoffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IAutoCoffer {\\n    event Deposit(bytes32 indexed businessId, address indexed NFTAddr, uint256 indexed NFTId, uint256 amount);\\n\\n    event Withdraw(\\n        bytes32 indexed businessId,\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        address feeSplitter,\\n        uint256 feeAmount,\\n        address receiver,\\n        uint256 amount\\n    );\\n\\n    event FeeRatioUpdated(uint256 oldFeeRatio, uint256 newFeeRatio);\\n\\n    event FeeSplitterUpdated(address oldFeeSplitter, address newFeeSplitter);\\n\\n    error NotEnoughFunds(uint256 value);\\n\\n    error WithdrawFailed(bytes err);\\n\\n    function setFeeRatio(uint256 _feeRatio) external;\\n\\n    function setFeeSplitter(address _feeSplitter) external;\\n\\n    function feeRatio() external view returns (uint256);\\n\\n    function feeSplitter() external view returns (address);\\n\\n    function balanceOf(address NFTAddr, uint256 NFTId) external view returns (uint256);\\n\\n    function deposit(bytes32 businessId, address NFTAddr, uint256 NFTId) external payable;\\n\\n    function withdraw(bytes32 businessId, address NFTAddr, uint256 NFTId, uint256 amount, address payable receiver)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IRecord.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\ninterface IRecord {\\n    function initialize() external;\\n    function getTokenAmount(address _nftAddr, uint256 _nftId, address _token, bool _isBudget)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function myBudget(address _nftAddr, uint256 _nftId) external view returns (address, uint256);\\n\\n    function getPortfolio(address _nftAddr, uint256 _nftId)\\n        external\\n        view\\n        returns (address[] memory portfolios, uint256[] memory amounts);\\n\\n    function getRecord(address _nftAddr, uint256 _nftId) external view returns (address[] memory);\\n\\n    function getBudget() external view returns (address[] memory);\\n\\n    function addBudgetToken(address _token) external;\\n\\n    function removeBudgetToken(address _token) external;\\n\\n    function myBudgetToken(address _nftAddr, uint256 _nftId) external view returns (address);\\n\\n    function setNFTBudget(address _nftAddr, uint256 _nftId, address _BudgetToken) external;\\n\\n    function isBudget(address token) external view returns (bool);\\n\\n    function add(bool _isBudget, address _nftAddr, uint256 _nftId, address _token, uint256 _amount, address _reserve)\\n        external;\\n\\n    function sub(bool _isBudget, address _nftAddr, uint256 _nftId, address _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve {\\n    receive() external payable;\\n\\n    function transfer(address _recipient, IERC20 _token, uint256 _amount) external;\\n\\n    function withdraw(IERC20 _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IFactoryA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {Module} from \\\"contracts/Diamond/interfaces/IController.sol\\\";\\nimport {Composition} from \\\"contracts/Diamond/interfaces/IPortfolio.sol\\\";\\nimport {NFTBaseInfo} from \\\"contracts/Diamond/interfaces/IAsset.sol\\\";\\nimport {IFactory} from \\\"contracts/Diamond/interfaces/IFactory.sol\\\";\\n\\ninterface IFactoryA is IFactory {\\n    /* ----------------------------- onlyOwner ----------------------------- */\\n    function setCreateFees(address _createFeeToken, uint256 _createFees) external;\\n\\n    function setReplicateFees(uint256 _replicateFeeRatio) external;\\n\\n    function setEntryFees(uint256 _entryFeeRatio) external;\\n\\n    function setExitFees(uint256 _exitFeeRatio) external;\\n\\n    function setInvestmentFeeRatio(uint256 _investmentFeeRatio) external;\\n\\n    function setMaxRoyaltyRatio(uint256 _maxRoyaltyRatio) external;\\n\\n    function addBudgetToken(address token) external;\\n\\n    function removeBudgetToken(address token) external;\\n\\n    function setAutoCoffer(address _autoCoffer) external;\\n\\n    function setFeeSplitter(address _feeSplitter) external;\\n\\n    /* ------------------------------- user -------------------------------- */\\n\\n    // create(address,uint256,(uint96,address,uint256),(address[],uint256[]),(address,bytes))\\n    function create(\\n        bytes32 _businessId,\\n        address _NFTAddr,\\n        uint256 _replicatedTokenId,\\n        NFTBaseInfo calldata _nftBaseInfo,\\n        Composition calldata _composition,\\n        Module calldata _module\\n    ) external payable returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IDiamond {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\nimport {IDiamond} from \\\"contracts/Diamond/interfaces/IDiamond.sol\\\";\\n\\ninterface IDiamondCut is IDiamond {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IOperatorResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IOperatorResolver {\\n    function initialize() external;\\n    function addOperator(address _operator) external;\\n\\n    function removeOperator(address _operator) external;\\n\\n    function isOperator(address _operator) external view returns (bool);\\n\\n    function getOperators() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\n/* -----------------------------    STRUCT   ----------------------------- */\\n\\nstruct Token {\\n    bool isBudget;\\n    address token;\\n    uint256 amount;\\n}\\n\\nstruct Operator {\\n    address addr;\\n    bytes callData;\\n}\\n\\nstruct Order {\\n    Token input;\\n    Token output;\\n    Operator operator;\\n}\\n\\ninterface IFactory {\\n    /* -----------------------------    EVENT    ----------------------------- */\\n    /// @param createFees The new createFees amount\\n    event CreateFeesChanged(address createFeeToken, uint256 createFees);\\n\\n    /// @param entryFeeRatio The new entryFeeRatio amount\\n    event EntryFeeRatioChanged(uint256 entryFeeRatio);\\n\\n    /// @dev Emitted when the exitFeeRatio is Changed\\n    /// @param exitFeeRatio The new exitFeeRatio amount\\n    event ExitFeeRatioChanged(uint256 exitFeeRatio);\\n\\n    event InvestmentFeeRatioChanged(uint256 investmentFeeRatio);\\n\\n    event ReplicateFeeRatioChanged(uint256 replicateFeeRatio);\\n\\n    event Create(\\n        bytes32 indexed businessId,\\n        uint256 indexed tokenId,\\n        uint256 indexed replicatedTokenId,\\n        address feeToken,\\n        uint256 feeAmount\\n    );\\n\\n    event Deposit(\\n        bytes32 indexed businessId,\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        address token,\\n        uint256 budgetAmount,\\n        uint256 authorAmount,\\n        uint256 royaltyFeeAmount,\\n        uint256 feeAmount\\n    );\\n\\n    event Withdraw(\\n        bytes32 indexed businessId,\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        address token,\\n        uint256 amount,\\n        address txOrigin\\n    );\\n    event OrderSwap(\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        bool InputIsBudget,\\n        address InputToken,\\n        uint256 InputAmount,\\n        bool OutputIsBudget,\\n        address OutputToken,\\n        uint256 OutputAmount\\n    );\\n\\n    event BudgetTokenAdded(address token);\\n\\n    event BudgetTokenRemoved(address token);\\n\\n    event RoyaltyFeeRatioChanged(uint256 royaltyFeeRatio);\\n\\n    event MaxRoyaltyRatioChanged(uint256 oldMaxRoyaltyRatio, uint256 newMaxRoyaltyRatio);\\n\\n    event NFTRoyaltiesChanged(address NFTAddr, uint256 NFTId, uint96 royalties);\\n\\n    event NFTSellPriceChanged(address NFTAddr, uint256 NFTId, uint256 sellPrice);\\n\\n    event ModuleChanged(address NFTAddr, uint256 NFTId);\\n\\n    event PortfolioChanged(address NFTAddr, uint256 NFTId);\\n\\n    event AutoCofferChanged(address oldAutoCoffer, address newAutoCoffer);\\n\\n    event FeeSplitterChanged(address oldFeeSplitter, address newFeeSplitter);\\n\\n    event RecordChanged(address oldRecord, address newRecord);\\n\\n    event ReserveChanged(address oldReserve, address newReserve);\\n\\n    /* -----------------------------    ERROR    ----------------------------- */\\n\\n    error LengthNotEqual(uint256 length1, uint256 length2);\\n\\n    error ModuleNotExists(address module);\\n\\n    error ModuleExcluded(address module);\\n\\n    error ModuleCheckFailed();\\n\\n    error DisableChangeReplicatedToken(uint256 originID);\\n\\n    error RoyaltyRatioOverflow(uint256 royaltyRatio);\\n\\n    error NFTNotExists(address NFTAddr, uint256 NFTId);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/src/=lib/prb-math/src/\",\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"@uniswap/lib/=lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/v2-core/\",\r\n      \"@uniswap/v2-periphery/=lib/v2-periphery/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/src/=lib/prb-math/src/\",\r\n      \"solidity-lib/=lib/solidity-lib/contracts/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originID\",\"type\":\"uint256\"}],\"name\":\"DisableChangeReplicatedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length2\",\"type\":\"uint256\"}],\"name\":\"LengthNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ModuleCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleExcluded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"NFTNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyRatio\",\"type\":\"uint256\"}],\"name\":\"RoyaltyRatioOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAutoCoffer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAutoCoffer\",\"type\":\"address\"}],\"name\":\"AutoCofferChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BudgetTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BudgetTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"businessId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"replicatedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"createFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createFees\",\"type\":\"uint256\"}],\"name\":\"CreateFeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"businessId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budgetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"authorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFeeRatio\",\"type\":\"uint256\"}],\"name\":\"EntryFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"}],\"name\":\"ExitFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeSplitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeSplitter\",\"type\":\"address\"}],\"name\":\"FeeSplitterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentFeeRatio\",\"type\":\"uint256\"}],\"name\":\"InvestmentFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxRoyaltyRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxRoyaltyRatio\",\"type\":\"uint256\"}],\"name\":\"MaxRoyaltyRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"ModuleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"royalties\",\"type\":\"uint96\"}],\"name\":\"NFTRoyaltiesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"NFTSellPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"InputIsBudget\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"InputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"InputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"OutputIsBudget\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OutputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OutputAmount\",\"type\":\"uint256\"}],\"name\":\"OrderSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"PortfolioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRecord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecord\",\"type\":\"address\"}],\"name\":\"RecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"replicateFeeRatio\",\"type\":\"uint256\"}],\"name\":\"ReplicateFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReserve\",\"type\":\"address\"}],\"name\":\"ReserveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFeeRatio\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"businessId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addBudgetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_businessId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFTAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_replicatedTokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"royalties\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"budgetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTBaseInfo\",\"name\":\"_nftBaseInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"FTs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"FTCostRatios\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Composition\",\"name\":\"_composition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"defaultParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Module\",\"name\":\"_module\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeBudgetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoCoffer\",\"type\":\"address\"}],\"name\":\"setAutoCoffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_createFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_createFees\",\"type\":\"uint256\"}],\"name\":\"setCreateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setEntryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setExitFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeSplitter\",\"type\":\"address\"}],\"name\":\"setFeeSplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setInvestmentFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRoyaltyRatio\",\"type\":\"uint256\"}],\"name\":\"setMaxRoyaltyRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_replicateFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setReplicateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FactoryAFacet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}