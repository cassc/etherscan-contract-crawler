{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetaTxCollectionFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./CollectionFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title MetaTxCollectionFactory\\r\\n* @dev This contract takes the logic of the Factory and implements the meta transaction functionality\\r\\n*/\\r\\ncontract MetaTxCollectionFactory is CollectionFactory, ContextMixin, NativeMetaTransaction {\\r\\n\\r\\n    string public constant name = \\\"BeasyCollectionFactory\\\"; \\r\\n    constructor (address collectibleLogic, address ethereumClaimRegistry, address collectibleClaimRegistry, address authClaimIssuer, address royaltyDistributorFactory, address chargeMaster) \\r\\n        CollectionFactory(collectibleLogic, ethereumClaimRegistry, collectibleClaimRegistry, authClaimIssuer, royaltyDistributorFactory, chargeMaster) {\\r\\n        _initializeEIP712(name);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\r\\n     */\\r\\n    function _msgSender()\\r\\n        internal\\r\\n        override\\r\\n        view\\r\\n        returns (address sender)\\r\\n    {\\r\\n        return ContextMixin.msgSender();\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/CollectionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./MetaTxCollection.sol\\\";\\r\\nimport \\\"./ChargeMaster.sol\\\";\\r\\nimport \\\"./RoyaltyDistributorFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title CollectionFactory\\r\\n* @dev This contract is a factory for Collectible contracts. It is used to create new Collectible contracts.\\r\\n* It allows for custom logic to be used for each Collectible contract, and deploys contracts deterministically\\r\\n* with minimal proxies drastically increasing gas efficiency vs. traditional factory patterns or manual deployments.\\r\\n*/\\r\\ncontract CollectionFactory is Ownable {\\r\\n    // ======== Immutable storage ========\\r\\n    // address for the logic contract\\r\\n    address private _defaultLogic;\\r\\n\\r\\n    // ethereumClaim Registry contract address\\r\\n    address private _ethereumClaimRegistry;\\r\\n\\r\\n    // collectibleClaim Registry contract address\\r\\n    address private _collectibleClaimRegistry;\\r\\n\\r\\n    // collectibleClaim Registry contract address\\r\\n    address private _authClaimIssuer;\\r\\n        \\r\\n    // Royalty distribution Factory contract address\\r\\n    address private _royaltyDistributorFactory;\\r\\n\\r\\n    // ChargeMaster contract address\\r\\n    address private _chargeMaster;\\r\\n    \\r\\n    mapping(uint32 => address) private collections;\\r\\n\\r\\n    mapping(string => bool) public collectionNameExists;\\r\\n\\r\\n    uint32 private _collectionID;\\r\\n\\r\\n    string private _baseURI;\\r\\n\\r\\n    /** \\r\\n     * Emitted when an Collection is created reserving the corresponding token name.\\r\\n     * @param collectionID of newly created Collecton\\r\\n     * @param tokenAddress of newly created \\r\\n     */\\r\\n    event CollectionBuilt(uint32 indexed collectionID,address tokenAddress, address tokenCreator);\\r\\n    \\r\\n    /** \\r\\n     * Emitted when Factory is deployed.\\r\\n     * @param beaconAddress of factory\\r\\n     */\\r\\n    event CollectionFactoryCreated(address beaconAddress);\\r\\n\\r\\n    /// Initializes implementation contract\\r\\n    constructor(address collectibleLogic, address ethereumClaimRegistry, address collectibleClaimRegistry, address authClaimIssuer, address royaltyDistributorFactory, address chargeMaster) {\\r\\n        _collectionID = 0;\\r\\n        _defaultLogic = collectibleLogic;\\r\\n        _ethereumClaimRegistry = ethereumClaimRegistry;\\r\\n        _collectibleClaimRegistry = collectibleClaimRegistry;\\r\\n        _authClaimIssuer = authClaimIssuer;\\r\\n        _royaltyDistributorFactory = royaltyDistributorFactory;\\r\\n        _chargeMaster = chargeMaster;\\r\\n        emit CollectionFactoryCreated(_defaultLogic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the referenced contracts on the main library\\r\\n     */\\r\\n    function updateReferencedContracts(\\r\\n        address collectibleLogic, address ethereumClaimRegistry, address collectibleClaimRegistry, address authClaimIssuer, address royaltyDistributorFactory, address chargeMaster\\r\\n        ) public onlyOwner {\\r\\n        _defaultLogic = collectibleLogic;\\r\\n        _ethereumClaimRegistry = ethereumClaimRegistry;\\r\\n        _collectibleClaimRegistry = collectibleClaimRegistry;\\r\\n        _authClaimIssuer = authClaimIssuer;\\r\\n        _royaltyDistributorFactory = royaltyDistributorFactory;\\r\\n        _chargeMaster = chargeMaster;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys a new collection\\r\\n     * @param name_ collection name\\r\\n     * @param symbol_ collection symbol as per standard ERC721\\r\\n     * @param baseURI_ Base URI used to query tokens\\r\\n     * @param contractURI_ IPFS CID of contract level metadata\\r\\n     * @param operator address of the operator\\r\\n     * @param salt bytes32 Salt to generate RoyaltyDistributor address\\r\\n     * @return returns proxy address\\r\\n     */\\r\\n    function buildCollection(\\r\\n        string memory name_, \\r\\n        string memory symbol_,\\r\\n        string memory baseURI_,\\r\\n        string memory contractURI_,\\r\\n        address[] memory royaltyHolders,\\r\\n        uint32[] memory royaltyHoldersPercentages,\\r\\n        address operator,\\r\\n        bytes32 salt\\r\\n    ) external payable returns (address) {\\r\\n        require(collectionNameExists[name_]==false, \\\"CollectionFactory: There is already a registered collection with that name\\\"); // This check avoids the edge for meta tx to ensure re-broadcast across collections when a user owns the same token at the same collection 712 nonce is not a problem\\r\\n        collectionNameExists[name_]=true;\\r\\n        ChargeMaster(_chargeMaster).processFee(_msgSender(), msg.value);\\r\\n        ++_collectionID;\\r\\n        address collectibleAddress = Clones.cloneDeterministic(_defaultLogic, salt);\\r\\n        MetaTxCollection(payable(collectibleAddress)).initialize(name_, symbol_, baseURI_, contractURI_, _chargeMaster, operator, _msgSender());\\r\\n\\r\\n        collections[_collectionID] = collectibleAddress;\\r\\n        emit CollectionBuilt(_collectionID, collectibleAddress, _msgSender());\\r\\n\\r\\n        createRoyaltyDistributor(\\r\\n            collectibleAddress,\\r\\n            royaltyHolders,\\r\\n            royaltyHoldersPercentages,\\r\\n            salt\\r\\n        );\\r\\n        return collectibleAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys a new custom collection with custom logic\\r\\n     * @param name_ collection name\\r\\n     * @param symbol_ collection symbol as per standard ERC721\\r\\n     * @param baseURI_ Base URI used to query tokens\\r\\n     * @param contractCID_ IPFS CID of contract level metadata\\r\\n     * @param operator address of the operator\\r\\n     * @param salt bytes32 Salt to generate RoyaltyDistributor address\\r\\n     * @return returns proxy address\\r\\n     */\\r\\n    function buildCustomCollection(\\r\\n        address customLogicAddress, \\r\\n        string memory name_, \\r\\n        string memory symbol_,\\r\\n        string memory baseURI_,\\r\\n        string memory contractCID_,\\r\\n        address[] memory royaltyHolders,\\r\\n        uint32[] memory royaltyHoldersPercentages,\\r\\n        address operator,\\r\\n        bytes32 salt\\r\\n    ) external payable returns (address) {\\r\\n        require(collectionNameExists[name_]==false, \\\"CollectionFactory: There is already a registered collection with that name\\\");\\r\\n        collectionNameExists[name_]=true;\\r\\n        ChargeMaster(_chargeMaster).processFee(_msgSender(), msg.value);\\r\\n        ++_collectionID;\\r\\n        address collectibleAddress = Clones.cloneDeterministic(customLogicAddress, salt);\\r\\n        Collectible(collectibleAddress).initialize(name_, symbol_, baseURI_, contractCID_, _chargeMaster, operator);\\r\\n\\r\\n        collections[_collectionID] = collectibleAddress;\\r\\n        emit CollectionBuilt(_collectionID, collectibleAddress, _msgSender());\\r\\n\\r\\n        createRoyaltyDistributor(\\r\\n            collectibleAddress,\\r\\n            royaltyHolders,\\r\\n            royaltyHoldersPercentages,\\r\\n            salt\\r\\n        );\\r\\n        return collectibleAddress;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev get collection address by its ID\\r\\n     * @param collectionID_ Collection id\\r\\n     * @return returns collection address\\r\\n     */\\r\\n    function getTokenAddress(uint32 collectionID_) external view returns (address) {\\r\\n        return collections[collectionID_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns _defaultLogic address\\r\\n     * @return returns _defaultLogic address\\r\\n     */\\r\\n    function getLogic() public view returns (address){\\r\\n        return _defaultLogic;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev updates defaultLogic\\r\\n     * @param newLogicAddress address Address of the new logic\\r\\n     * @return returns true if address was updated\\r\\n     */\\r\\n    function setLogic(address newLogicAddress) public onlyOwner returns (bool){\\r\\n        _defaultLogic = newLogicAddress;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a RoyaltyDistributor\\r\\n     * @param percentages uint64 Total percentage of royalties\\r\\n     * @param holders bytes32[] Address list and percentages of royalty holders\\r\\n     * @param salt bytes32 Salt to generate RoyaltyDistributor address\\r\\n     */\\r\\n    function createRoyaltyDistributor(\\r\\n        address collectionAddress, address[] memory holders, uint32[] memory percentages, bytes32 salt\\r\\n        ) internal returns(address) {\\r\\n        RoyaltyDistributorFactory rdf = RoyaltyDistributorFactory(_royaltyDistributorFactory);\\r\\n        address royaltiesDistributorAddr = rdf.createRoyaltiesContract(collectionAddress, holders, percentages, salt);\\r\\n        return royaltiesDistributorAddr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets base URI\\r\\n     * @param URI string Base URI for contract metadata\\r\\n     */\\r\\n    function setBaseURI(string memory URI) external onlyOwner {\\r\\n        _baseURI = URI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns computed deterministic address based on given salt\\r\\n     * @param salt used for address generation \\r\\n     * @return returns predicted address\\r\\n     */\\r\\n    function computeAddress(bytes32 salt) public view returns (address) {\\r\\n        return Clones.predictDeterministicAddress(_defaultLogic, salt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets authorization claim issuer address\\r\\n     * @param address_ address Authorization claim issuer address\\r\\n     */\\r\\n    function setAuthClaimIssuer(address address_) external virtual onlyOwner {\\r\\n        _authClaimIssuer = address_;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/MetaTxCollection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./Collectible.sol\\\";\\r\\n\\r\\n/**\\r\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/ContextMixin.sol\\r\\n */\\r\\n\\r\\n/**\\r\\n * @title ContextMixin\\r\\n * @dev This contract provides methods to access the msg.sender and msg.data in a static context, it's used to recognized the original sender of a meta transaction\\r\\n */\\r\\nabstract contract ContextMixin {\\r\\n\\r\\n    /**\\r\\n     * @dev This function is to be used instead of the msg.sender, it returns the original sender of the transaction, follows the context contract format\\r\\n     */\\r\\n    function msgSender()\\r\\n        internal\\r\\n        view\\r\\n        returns (address payable sender)\\r\\n    {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = payable(msg.sender);\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/EIP712Base.sol\\r\\n */\\r\\n\\r\\n/**\\r\\n* @title EIP712Base\\r\\n* @dev Helper methods for signatures following the EIP712 standard.\\r\\n*/\\r\\ncontract EIP712Base is Initializable {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    string constant public ERC712_VERSION = \\\"1\\\";\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\r\\n        )\\r\\n    );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev supposed to be called once while initializing.\\r\\n    * one of the contractsa that inherits this contract follows proxy pattern\\r\\n    * so it is not possible to do this in a constructor\\r\\n    */\\r\\n    function _initializeEIP712(\\r\\n        string memory name\\r\\n    )\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        _setDomainSeperator(name);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev set domain seperator for EIP712, used to avoid replay attacks across contracts in the same network\\r\\n    */\\r\\n    function _setDomainSeperator(string memory name) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(ERC712_VERSION)),\\r\\n                address(this),\\r\\n                bytes32(getChainId())\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev get domain seperator for EIP712\\r\\n    */\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev get chainID for EIP712, used to avoid replay attacks across different networks\\r\\n    */\\r\\n    function getChainId() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(bytes32 messageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/NativeMetaTransaction.sol\\r\\n */\\r\\n/**\\r\\n* @title NativeMetaTransaction\\r\\n* @dev This contract holds the implementation of Native meta transactions to abstract complexity from the user\\r\\n*/\\r\\ncontract NativeMetaTransaction is EIP712Base {\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n        )\\r\\n    );\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(address => uint256) nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Main function to be called by the gas payer to execute the meta transaction\\r\\n    */\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonces[userAddress],\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n        require(\\r\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n\\r\\n        // increase nonce for user (to avoid re-use)\\r\\n        nonces[userAddress] = nonces[userAddress] + 1;\\r\\n\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            payable(msg.sender),\\r\\n            functionSignature\\r\\n        );\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call{value: msg.value}(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    metaTx.nonce,\\r\\n                    metaTx.from,\\r\\n                    keccak256(metaTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Function to simplify nonce extraction for a specific user in a specific contract instance\\r\\n    */\\r\\n    function getNonce(address user) public view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n        return\\r\\n            signer ==\\r\\n            ecrecover(\\r\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n                sigV,\\r\\n                sigR,\\r\\n                sigS\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n* @title MetaTxCollection\\r\\n* @dev This contract takes the logic of the collection and implements the meta transaction functionality\\r\\n*/\\r\\ncontract MetaTxCollection is Collectible, ContextMixin, NativeMetaTransaction {\\r\\n\\r\\n    constructor () {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\r\\n     */\\r\\n    function _msgSender()\\r\\n        internal\\r\\n        override\\r\\n        view\\r\\n        returns (address sender)\\r\\n    {\\r\\n        return ContextMixin.msgSender();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor replacement\\r\\n     * @param name_ string Token name\\r\\n     * @param symbol_ string Token symbol\\r\\n     * @param baseURI_ string Token base URI\\r\\n     * @param contractURI_ string Token contract level metadata URI\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory baseURI_,\\r\\n        string memory contractURI_,\\r\\n        address chargeMasterAddress_, \\r\\n        address operator_,\\r\\n        address owner\\r\\n    ) public {\\r\\n        _initializeEIP712(name_);\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _baseTokenURI = baseURI_;\\r\\n        _contractURI = contractURI_;\\r\\n        _transferOwnership(owner);\\r\\n        _chargeMasterAddress = chargeMasterAddress_;\\r\\n        _operator = operator_;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChargeMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./EthereumClaimRegistry.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ChargeMaster\\r\\n * @dev This contract is deployed as a single instance and controls all payments to be received by the operator, \\r\\n * it manages the creation of accounts which can have a number of addresses and belong to tiers which store the information\\r\\n * Other contracts can query this contract to determine if a payment is required and if so, automate the payment process\\r\\n */\\r\\ncontract ChargeMaster is Ownable {\\r\\n\\r\\n    /**\\r\\n    * @title Tier\\r\\n    * @dev Definition of a tier, including prices for different cuts, how many transactions need to be triggered \\r\\n    * to jump to the next tier and the number of addresses that can be registered to that account\\r\\n    */\\r\\n    struct Tier {\\r\\n        uint256 price0; //Price to be paid before reaching a cut\\r\\n        uint256 price1; //Price to be paid while in cut1\\r\\n        uint256 price2;\\r\\n        uint256 price3;\\r\\n\\r\\n        uint256 cut1; //Number of tx to reach t1\\r\\n        uint256 cut2;\\r\\n        uint256 cut3;\\r\\n\\r\\n        uint256 addrNumber; //Number of addresses allowed in account\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @title Tier\\r\\n    * @dev Definition of an account, n of addresses asociated to it, tx done, and tier it belongs to\\r\\n    */\\r\\n    struct Account {\\r\\n        uint256 nRegisteredAddresses; \\r\\n        uint256 tierID; \\r\\n        uint256 txNumber;\\r\\n    }\\r\\n\\r\\n    // Account to receive payments\\r\\n    address public receiver; \\r\\n\\r\\n    // Operator address\\r\\n    address private _operator;\\r\\n\\r\\n    // Map of addresses pointing to their accountID\\r\\n    mapping (address => bytes32) public accountIDs;\\r\\n\\r\\n    // Map of accountIDs pointing to their accounts\\r\\n    mapping (bytes32 => Account) public account; // to establish a many to one relationship\\r\\n\\r\\n    // Map of Tiers pointing to the tier information\\r\\n    mapping (uint256 => Tier) public tier; // to establish a many to one relationship\\r\\n\\r\\n    // Total accounts registered on the platform\\r\\n    uint256 public accountsNumber;\\r\\n\\r\\n    // Price an unregistered user pays for tx\\r\\n    uint256 public unregisteredFee = 0;\\r\\n\\r\\n    // Ethereum Claim Registry contract\\r\\n    EthereumClaimRegistry private _ethereumClaims;\\r\\n\\r\\n\\r\\n    //Error thrown when processing fees don't match\\r\\n    //error FeeAndMsgValueDontMatch(uint256 fee, uint256 sent);\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents method from being called from anyone except operator\\r\\n     */\\r\\n    modifier onlyOperator() {\\r\\n        require(tx.origin == _operator, \\\"Beasy: You are not an operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 p0, uint256 p1, uint256 p2, uint256 p3, uint256 c1, uint256 c2, uint256 c3, uint256 accsN, address rcv, address ethereumClaims_, address operator_\\r\\n        ) Ownable(){\\r\\n        // Gotta reserve tier 0 for no tier\\r\\n        tier[1] = Tier(p0, p1, p2, p3, c1, c2, c3, accsN);\\r\\n        accountsNumber=0;\\r\\n        receiver = rcv;\\r\\n        _ethereumClaims = EthereumClaimRegistry(ethereumClaims_);\\r\\n        _operator = operator_;\\r\\n        _operator = operator_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev updates the receiver of tx\\r\\n     * @param newReceiver to receive tx\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function updateReceiver(address newReceiver) public onlyOperator returns (bool){\\r\\n        receiver = newReceiver;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev updates the operator\\r\\n     * @param newOperator new operator address\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function updateOperator(address newOperator) public onlyOperator returns (bool){\\r\\n        _operator = newOperator;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev updates the fees unregistered users are asked to pay\\r\\n     * @param newFee new fee to be used\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function updateUnregisteredFee(uint256 newFee) public onlyOperator returns (bool){\\r\\n        unregisteredFee = newFee;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new tier\\r\\n     * @param p0 ... p3 prices for the new tier\\r\\n     * @param c1 ... c3 cuts for the tiers\\r\\n     * @param addrN number of addresses allowed in new tier\\r\\n     * @param tierID ID for the new tier\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function createTier(\\r\\n        uint256 p0, uint256 p1, uint256 p2, uint256 p3, uint256 c1, uint256 c2, uint256 c3, uint256 addrN, uint256 tierID\\r\\n        ) public onlyOperator returns (bool){\\r\\n        require(tierID!=0, \\\"ChargeMaster: Cant's create tier 0\\\");\\r\\n        require(tier[tierID].addrNumber==0, \\\"ChargeMaster: Tier already exists\\\");\\r\\n        tier[tierID] = Tier(p0, p1, p2, p3, c1, c2, c3, addrN);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates a tier\\r\\n     * @param p0 ... p3 prices for tier\\r\\n     * @param c1 ... c3 cuts for tiers\\r\\n     * @param addrN number of addresses allowed in tier\\r\\n     * @param tierID ID for the tier\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function updateTier(\\r\\n        uint256 p0, uint256 p1, uint256 p2, uint256 p3, uint256 c1, uint256 c2, uint256 c3, uint256 addrN, uint256 tierID\\r\\n        ) public onlyOperator returns (bool){\\r\\n        require(tier[tierID].addrNumber!=0, \\\"ChargeMaster: Tier doesn't exist\\\");\\r\\n        tier[tierID] = Tier(p0, p1, p2, p3, c1, c2, c3, addrN);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers an address to a new account\\r\\n     * @param user address of the user to be added as the first in account\\r\\n     * @param tierID TierID of the user\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function registerUser(address user, uint256 tierID, bytes32 role, bytes32 accountID) public onlyOperator returns (bool){ \\r\\n    //Can be built into the tx where we assign users a role\\r\\n        require(accountIDs[user]==0, \\\"ChargeMaster: User is already in an account\\\");\\r\\n\\r\\n        accountsNumber++;\\r\\n        accountIDs[user] = accountID;\\r\\n        account[accountID] = Account(1, tierID, 0);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the tier of an account\\r\\n     * @param accountID AccountID to be updated\\r\\n     * @param tierID new tier for the account\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function changeAccountTier(bytes32 accountID, uint256 tierID) public onlyOperator returns (bool){ \\r\\n        account[accountID].tierID =tierID;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a new user to the msg.sender's account\\r\\n     * @param user address of the user to be added to the existing account\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function addUserToAccountAdmin(address user, bytes32 accountID) public onlyOperator returns (bool){ //Could have a version for owner\\r\\n        require(accountIDs[user]==0, \\\"ChargeMaster: User is already in an account\\\");\\r\\n\\r\\n        Account storage msgSenderAccount = account[accountID];\\r\\n        uint256 maxAddr = tier[msgSenderAccount.tierID].addrNumber;\\r\\n        \\r\\n        msgSenderAccount.nRegisteredAddresses++;\\r\\n        require(msgSenderAccount.nRegisteredAddresses <= maxAddr, \\\"ChargeMaster: Maximum number of addresses registered to your account, updgrade your tier to have more accounts\\\");\\r\\n\\r\\n        accountIDs[user] = accountID;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Deletes a user to the msg.sender's account\\r\\n     * @param user address of the user to be deleted to the existing account\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function deleteUserToMyAccount(address user) public returns (bool){ //Any address can delete any other address, maybe want to restrict this?\\r\\n\\r\\n        bytes32 msgSenderAccID = accountIDs[msg.sender];\\r\\n        bytes32 userAccID = accountIDs[user];\\r\\n        require(msgSenderAccID==userAccID, \\\"ChargeMaster: Can't delete users outside of your account\\\");\\r\\n\\r\\n        Account storage msgSenderAccount = account[msgSenderAccID];\\r\\n\\r\\n        accountIDs[user] = 0;\\r\\n        msgSenderAccount.nRegisteredAddresses--;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Adds a new user to the msg.sender's account\\r\\n     * @param user address of the user to be added to the existing account\\r\\n     * @return returns ok if tx is successful\\r\\n     */\\r\\n    function addUserToMyAccount(address user) public returns (bool){ //Could have a version for owner\\r\\n        require(accountIDs[user]==0, \\\"ChargeMaster: User is already in an account\\\");\\r\\n\\r\\n        bytes32 msgSenderAccID = accountIDs[msg.sender];\\r\\n        Account storage msgSenderAccount = account[msgSenderAccID];\\r\\n        uint256 maxAddr = tier[msgSenderAccount.tierID].addrNumber;\\r\\n        \\r\\n        msgSenderAccount.nRegisteredAddresses++;\\r\\n        require(msgSenderAccount.nRegisteredAddresses <= maxAddr, \\\"ChargeMaster: Maximum number of addresses registered to your account, updgrade your tier to have more accounts\\\");\\r\\n\\r\\n        accountIDs[user] = msgSenderAccID;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Return number of tx done by user \\r\\n     * @return number of tx done by user \\r\\n     */\\r\\n    function getTxNumber(address user) public view returns (uint256){\\r\\n        return account[accountIDs[user]].txNumber;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return Fees to be paid by user\\r\\n     * @return Fees to be paid by user\\r\\n     */\\r\\n    function getFee(address user) public view returns (uint256){\\r\\n        if(accountIDs[user]==0){\\r\\n            return unregisteredFee;\\r\\n        }\\r\\n        Account memory userAccount= account[accountIDs[user]];\\r\\n        uint256 userTxN= userAccount.txNumber;\\r\\n        Tier memory userTier= tier[userAccount.tierID];\\r\\n        if(userTxN<userTier.cut1){\\r\\n            return userTier.price0;\\r\\n        }\\r\\n        else if (userTxN>=userTier.cut1&&userTxN<userTier.cut2){\\r\\n            return userTier.price1;\\r\\n        }\\r\\n        else if (userTxN>=userTier.cut2&&userTxN<userTier.cut3){\\r\\n            return userTier.price2;\\r\\n        }\\r\\n        return userTier.price3;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the fee in the tx matches the fee to be paid by user and increases the tx counter for the user\\r\\n     * @return true if correct\\r\\n     */\\r\\n    function processFee(address user, uint256 msgValue) payable public returns (bool){\\r\\n        uint256 txF = getFee(user);\\r\\n        require(txF==msgValue, \\\"ChargeMaster: msg.value doesn't match the required fee\\\");\\r\\n        /*if(txF!=msg.value){\\r\\n            revert FeeAndMsgValueDontMatch({\\r\\n                fee: txF,\\r\\n                sent: msg.value\\r\\n            });\\r\\n        }*/\\r\\n        (bool sent, bytes memory data) = receiver.call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"ChargeMaster: Failed to send Ether\\\");\\r\\n        account[accountIDs[user]].txNumber++;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of the operator\\r\\n     * @return address of the operator\\r\\n     */\\r\\n    function getOperator() public view returns (address){\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of the claims contract\\r\\n     * @return address of the claims contract\\r\\n     */\\r\\n    function getClaimsContract() public view returns (address){\\r\\n        return address(_ethereumClaims);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the address of the claims contract\\r\\n     * @param claimsAddress address to be updated to\\r\\n     * @return bool true if success\\r\\n     */\\r\\n    function setClaimsContract(address claimsAddress) public onlyOwner returns (bool){\\r\\n        _ethereumClaims = EthereumClaimRegistry(claimsAddress);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/RoyaltyDistributorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./RoyaltyDistributor.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title RoyaltyDistributorFactory\\r\\n* @dev This contract is used to deploy RoyaltyDistributor contracts\\r\\n*/\\r\\ncontract RoyaltyDistributorFactory is Ownable {\\r\\n    // ======== Immutable storage ========\\r\\n    // address for the logic contract\\r\\n    address private _royaltyDistributorLogic;\\r\\n\\r\\n    mapping(address => address) private _collectionToRoyaltyDistributor;\\r\\n\\r\\n    /** \\r\\n     * Emitted when an a new royalty contract is created.\\r\\n     * @param collectionAddress of newly created Collecton\\r\\n     * @param tokenAddress of newly created \\r\\n     */\\r\\n    event RoyaltyDistributorCreated(address collectionAddress, address tokenAddress);\\r\\n    \\r\\n    /** \\r\\n     * Emitted when Factory is deployed.\\r\\n     * @param logic of RoyaltyDistributor\\r\\n     */\\r\\n    event RoyaltyDistributorFactoryCreated(address logic);\\r\\n\\r\\n    /// Initializes implementation contract\\r\\n    constructor(address royaltyDistributorLogic) {\\r\\n        _royaltyDistributorLogic = royaltyDistributorLogic;\\r\\n        emit RoyaltyDistributorFactoryCreated(_royaltyDistributorLogic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new royalty contract asociated to a collection\\r\\n     * @param collectionAddress address collection address\\r\\n     * @param holders address[] of the royalty holders\\r\\n     * @param percentages uint32[] of each royalty holder\\r\\n     * @param salt bytes32 for deterministic address creation\\r\\n     * @return returns proxy address\\r\\n     */\\r\\n    function createRoyaltiesContract(address collectionAddress, address[] memory holders, uint32[] memory percentages, bytes32 salt) external returns (address) {\\r\\n        if (holders.length > 0) {\\r\\n            address royaltyDistributorAddress = Clones.cloneDeterministic(_royaltyDistributorLogic, salt);\\r\\n            RoyaltyDistributor(payable(royaltyDistributorAddress)).initialize(collectionAddress, holders, percentages);\\r\\n            _collectionToRoyaltyDistributor[collectionAddress] = royaltyDistributorAddress;\\r\\n            emit RoyaltyDistributorCreated(collectionAddress, royaltyDistributorAddress);\\r\\n            return royaltyDistributorAddress;\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev get collection address by its ID\\r\\n     * @param collectionAddress address of collection \\r\\n     * @return returns RoyaltyContractAddress\\r\\n     */\\r\\n    function getRoyaltyContractAddress(address collectionAddress) external view returns (address) {\\r\\n        return _collectionToRoyaltyDistributor[collectionAddress];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns beacon address\\r\\n     * @return returns beacon address\\r\\n     */\\r\\n    function getImplementation() public view returns (address){\\r\\n        return address(_royaltyDistributorLogic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns computed deterministic address based on given salt\\r\\n     * @param salt used for address generation \\r\\n     * @return returns predicted address\\r\\n     */\\r\\n    function computeAddress(bytes32 salt) public view returns (address) {\\r\\n        return Clones.predictDeterministicAddress(_royaltyDistributorLogic, salt);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Collectible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./ChargeMaster.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Collectible\\r\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation and offers additional functionality\\r\\n * like minting, burning, creation, enumeration and token URI management.\\r\\n */\\r\\ncontract Collectible is Ownable, Initializable, IERC165, IERC721, IERC721Metadata {\\r\\n    using Strings for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n/******************************************************************************\\r\\n * \\r\\n *                            !!! ATTENTION!!!!\\r\\n * \\r\\n *               NEVER EVER ADD NEW FIELDS ABOVE EXISTING ONE\\r\\n *           THIS WILL RUINE DEPLOYED PROXY CONTRACTS BEYOND REPAIR\\r\\n *\\r\\n *     See documentation on how proxy contract works to figure out why\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    // *** ERC721 ***\\r\\n    // Token name\\r\\n    string internal _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string internal _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // Base token URI\\r\\n    string internal _baseTokenURI;\\r\\n\\r\\n\\r\\n    // *** ERC721Enumerable ***\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n\\r\\n    // *** Business logic ***\\r\\n    // Maping from collectible ID to IPFS CID\\r\\n    mapping(uint256 => string) private _collectibleCID;\\r\\n\\r\\n    // Mapping from collectible ID to list of minted token IDs\\r\\n    mapping(uint256 => uint256[]) private _collectibleTokens;\\r\\n    \\r\\n    // Mapping from token ID to index of the collectible tokens list\\r\\n    mapping(uint256 => uint256) private _collectibleTokensIndex;\\r\\n\\r\\n    // Claim name for user role\\r\\n    bytes32 private constant CL_COLLECTIBLE_CREATOR = keccak256(\\\"X-Beasy-Collectible-Creator\\\");\\r\\n\\r\\n    // Operator address\\r\\n    address internal _operator;\\r\\n\\r\\n    // Contract level metadata URI\\r\\n    string internal _contractURI;\\r\\n\\r\\n    // ChargeMaster contract address\\r\\n    address internal _chargeMasterAddress;\\r\\n\\r\\n// ================ ADD NEW FIELDS STRICTLY BELOW THIS LINE ===================\\r\\n\\r\\n\\r\\n/******************************************************************************\\r\\n *\\r\\n * Implementation of ERC165\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC721).interfaceId\\r\\n            || interfaceId == type(IERC721Metadata).interfaceId\\r\\n            || interfaceId == type(IERC721Enumerable).interfaceId\\r\\n            || interfaceId == type(IERC165).interfaceId\\r\\n        ;\\r\\n    }\\r\\n\\r\\n/******************************************************************************\\r\\n *\\r\\n * Implementation of Initializable\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor replacement\\r\\n     * @param name_ string Token name\\r\\n     * @param symbol_ string Token symbol\\r\\n     * @param baseURI_ string Token base URI\\r\\n     * @param contractURI_ string Token contract level metadata URI\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory baseURI_,\\r\\n        string memory contractURI_,\\r\\n        address chargeMasterAddress_, \\r\\n        address operator_ \\r\\n    ) public virtual {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _baseTokenURI = baseURI_;\\r\\n        _contractURI = contractURI_;\\r\\n        _transferOwnership(_msgSender());\\r\\n        _chargeMasterAddress = chargeMasterAddress_;\\r\\n        _operator = operator_;\\r\\n    }\\r\\n/* \\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory URI_,\\r\\n        address ethereumClaimRegistry_,\\r\\n        address collectibleClaimRegistry_,\\r\\n        address authClaimIssuer_\\r\\n    ) {\\r\\n        initialize(name_, symbol_, URI_, ethereumClaimRegistry_, collectibleClaimRegistry_, authClaimIssuer_);\\r\\n    }\\r\\n*/\\r\\n\\r\\n/******************************************************************************\\r\\n *\\r\\n * Implementation of ERC721\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n/******************************************************************************\\r\\n *\\r\\n * Implementation of ERC721Metadata\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return collectibleURI(tokenId & ~uint256(0xffffffff));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Opensea collection metadata.\\r\\n     */\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return _contractURI;\\r\\n    }\\r\\n\\r\\n/******************************************************************************\\r\\n *\\r\\n * Various configuration methods\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Sets base token URI\\r\\n     * @param URI string base URI\\r\\n     */\\r\\n    function setBaseURI(string memory URI) external virtual onlyOperatorOrOwner {\\r\\n        _baseTokenURI = URI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets contract URI for contract level metadata\\r\\n     * @param URI string contract URI\\r\\n     */\\r\\n    function setContractURI(string memory URI) external virtual onlyOperatorOrOwner {\\r\\n        _contractURI = URI;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Sets default operator address\\r\\n     * @param address_ address Operator address\\r\\n     */\\r\\n    function setOperator(address address_) external virtual onlyOperatorOrOwner {\\r\\n        _operator = address_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets default operator address\\r\\n     * @param address_ address Operator address\\r\\n     */\\r\\n    function setOwner(address address_) external virtual onlyOperatorOrOwner {\\r\\n        _transferOwnership(address_);\\r\\n    }\\r\\n\\r\\n/******************************************************************************\\r\\n *\\r\\n * Business logic\\r\\n *\\r\\n *****************************************************************************/\\r\\n\\r\\n    event collectible(uint256 indexed collectibleId, string CID, address creator);\\r\\n    event collectibleDeleted(uint256 indexed collectibleId, string CID);\\r\\n    event ContributorSet(uint256 indexed collectibleId, bytes32 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents method from being called from anyone except operator\\r\\n     */\\r\\n    modifier onlyOperatorOrOwner() {\\r\\n        require(_msgSender() == _operator || _msgSender() == owner(), \\\"Beasy: You are not an operator or the collection owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints a token within specified collectible\\r\\n     * @param to address Initial owner of all them items of the collectible\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     * @param data bytes\\r\\n     * @return uint256 token ID\\r\\n     */\\r\\n    function safeMint (\\r\\n        address to,\\r\\n        uint256 collectibleId,\\r\\n        bytes memory data\\r\\n    ) virtual onlyOperatorOrOwner public returns(uint256) {\\r\\n        require((collectibleId & 0xffffffff) == 0, \\\"Beasy: Malformed collectible ID\\\");\\r\\n        require(bytes(_collectibleCID[collectibleId]).length != 0, \\\"Beasy: Minting token of nonexistent collectible\\\");\\r\\n\\r\\n        uint256 tokenId = collectibleId + _collectibleTokens[collectibleId].length;\\r\\n\\r\\n        _collectibleTokens[collectibleId].push(tokenId);\\r\\n        \\r\\n        _safeMint(to, tokenId, data);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints a token within specified collectible\\r\\n     * @param to address Initial owner of all them items of the collectible\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     * @return uint256 token ID\\r\\n     */\\r\\n    function safeMint (address to, uint256 collectibleId) virtual public returns(uint256) {\\r\\n         return safeMint(to, collectibleId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns existing token\\r\\n     * @param tokenId uint256 token ID to burn\\r\\n     */\\r\\n    function burn(uint256 tokenId) virtual public {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a collectible with specified attributes\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     * @param CID string IPFS CID for collectible metadata\\r\\n     * @param contributors bytes32[] List of contributor records\\r\\n     */\\r\\n    function createCollectible(uint256 collectibleId, string memory CID, bytes32[] memory contributors) virtual onlyOperatorOrOwner public payable returns(uint256) { // FIXME https://blog.soliditylang.org/2021/04/21/custom-errors/  ALSO THIS IS INHERITED FROM DEFAULT COLLECTION\\r\\n        ChargeMaster(_chargeMasterAddress).processFee(_msgSender(), msg.value);\\r\\n        require((collectibleId & 0xffffffff) == 0, \\\"Beasy: Malformed collectible ID\\\");\\r\\n        require(bytes(_collectibleCID[collectibleId]).length == 0, \\\"Beasy: Collectible already exist\\\");\\r\\n\\r\\n        _collectibleCID[collectibleId] = CID;\\r\\n        emit collectible(collectibleId, CID, _msgSender());\\r\\n        if(_operator != _msgSender()) {\\r\\n            setApprovalForAll(_operator, true); \\r\\n        }\\r\\n        return collectibleId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deletes a collectible with specified attributes\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     */\\r\\n    function deleteCollectible(uint256 collectibleId, string memory CID) virtual onlyOperatorOrOwner public returns(uint256) {\\r\\n        require((collectibleId & 0xffffffff) == 0, \\\"Beasy: Malformed collectible ID\\\");\\r\\n        require(bytes(_collectibleCID[collectibleId]).length != 0, \\\"Beasy: Collectible does not exist\\\");\\r\\n        require(_collectibleTokens[collectibleId].length == 0, \\\"Beasy: Cant delete collectibles which have been minted to users\\\");\\r\\n\\r\\n        _collectibleCID[collectibleId] = \\\"\\\";\\r\\n        emit collectibleDeleted(collectibleId, CID);\\r\\n        return collectibleId;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Returns total number of tokens of particular collecible\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     * @return uint256 number of tokens\\r\\n     */\\r\\n    function tokensOfCollectible(uint256 collectibleId) virtual public view returns(uint256) {\\r\\n        return _collectibleTokens[collectibleId].length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns ID of a token by index\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     * @param index uint256 token index\\r\\n     * @return uint256 token ID\\r\\n     */\\r\\n    function tokenOfCollectibleByIndex(uint256 collectibleId, uint256 index) virtual public view returns(uint256) {\\r\\n        return _collectibleTokens[collectibleId][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function collectibleURI(uint256 collectibleId) public view virtual returns (string memory) {\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, _collectibleCID[collectibleId])) : \\\"\\\";\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Changes CID of an existing collectible\\r\\n     * @param collectibleId uint256 ID of the collectible (only 224 most significat bits are used)\\r\\n     * @param CID string IPFS CID for collectible metadata\\r\\n     */\\r\\n    function updateCID(uint256 collectibleId, string memory CID) public virtual onlyOperatorOrOwner {\\r\\n        require((collectibleId & 0xffffffff) == 0, \\\"Beasy: Malformed collectible ID\\\");\\r\\n        require(bytes(_collectibleCID[collectibleId]).length != 0, \\\"Beasy: Collectible not yet exist\\\");\\r\\n        require(bytes(CID).length != 0, \\\"Beasy: Empty CID is not allowed\\\");\\r\\n        _collectibleCID[collectibleId] = CID;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/EthereumClaimRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./lib/ERC780.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EthereumClaimRegistry\\r\\n * @dev This contract implements a generic registry for claims on Ethereum addresses.\\r\\n */\\r\\ncontract EthereumClaimRegistry is ERC780 {}\\r\\n\"\r\n    },\r\n    \"contracts/lib/ERC780.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract ERC780 {\\r\\n\\r\\n    mapping(address => mapping(address => mapping(bytes32 => bytes32))) public registry;\\r\\n\\r\\n    event ClaimSet(\\r\\n        address indexed issuer,\\r\\n        address indexed subject,\\r\\n        bytes32 indexed key,\\r\\n        bytes32 value,\\r\\n        uint updatedAt);\\r\\n\\r\\n    event ClaimRemoved(\\r\\n        address indexed issuer,\\r\\n        address indexed subject,\\r\\n        bytes32 indexed key,\\r\\n        uint removedAt);\\r\\n\\r\\n    // create or update clams\\r\\n    function setClaim(address subject, bytes32 key, bytes32 value) public {\\r\\n        registry[msg.sender][subject][key] = value;\\r\\n        emit ClaimSet(msg.sender, subject, key, value, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setSelfClaim(bytes32 key, bytes32 value) public {\\r\\n        setClaim(msg.sender, key, value);\\r\\n    }\\r\\n\\r\\n    function getClaim(address issuer, address subject, bytes32 key) public view returns(bytes32) {\\r\\n        return registry[issuer][subject][key];\\r\\n    }\\r\\n\\r\\n    function removeClaim(address issuer, address subject, bytes32 key) public {\\r\\n        require(msg.sender == issuer);\\r\\n        delete registry[issuer][subject][key];\\r\\n        emit ClaimRemoved(msg.sender, subject, key, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RoyaltyDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title RoyaltyDistributor\\r\\n* @dev This contract is used to distribute royalties to the creators of the NFTs.\\r\\n* It allows the owner to set the royalties and the beneficiaries, this contract receives all the payments and distributes them to the beneficiaries\\r\\n*/\\r\\ncontract RoyaltyDistributor is Initializable {\\r\\n    \\r\\n    struct Holder {\\r\\n        address holderAddr;\\r\\n        uint32 percentage;\\r\\n    }\\r\\n    \\r\\n    // Royalty holders with percent\\r\\n    Holder[] private _holders;\\r\\n\\r\\n    // Collectible ID\\r\\n    address private _collectionAddress;\\r\\n\\r\\n    // Total percentage of royalties\\r\\n    uint32 private _totalPercent;\\r\\n\\r\\n    event RoyaltyDistributorInit(address indexed collectionAddress);\\r\\n    event RoyaltyDistributorWithdraw(address indexed collectionAddress, address indexed holder, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor replacement\\r\\n     * @param collectionAddress address address of the collection\\r\\n     * @param holders address[] array of holder addresses\\r\\n     * @param percentages uint32[] array of percentages for each address\\r\\n     */\\r\\n    function initialize(address collectionAddress, address[] memory holders, uint32[] memory percentages) public initializer {\\r\\n        require(holders.length==percentages.length, \\\"RoyaltyDistributor: number of holders must match the number of percentages\\\");\\r\\n        _collectionAddress = collectionAddress;\\r\\n        for (uint i = 0; i < holders.length; i++) {\\r\\n            _holders.push(Holder(holders[i], percentages[i]));\\r\\n            _totalPercent = _totalPercent + percentages[i];\\r\\n        }\\r\\n        emit RoyaltyDistributorInit(collectionAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Distribute and withdraw all funds of native crypto to the holders\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint256 balance = address(this).balance;\\r\\n        uint256 totalAmount = balance * (100 / _totalPercent);\\r\\n        for (uint i = 0; i < _holders.length; i++) {\\r\\n            address holder = _holders[i].holderAddr;\\r\\n            uint32 percent = _holders[i].percentage;\\r\\n            uint256 amount = (totalAmount / 100) * percent;\\r\\n            payable (holder).transfer(amount);\\r\\n            emit RoyaltyDistributorWithdraw(_collectionAddress, holder, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Distribute and withdraw all funds of provided token to the holders\\r\\n     * @param tokenAddress address address of the token to be withdrawn\\r\\n     */\\r\\n    function withdrawToken(address tokenAddress) public {\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        uint256 totalAmount = balance * (100 / _totalPercent);\\r\\n        for (uint i = 0; i < _holders.length; i++) {\\r\\n            address holder = _holders[i].holderAddr;\\r\\n            uint32 percent = _holders[i].percentage;\\r\\n            uint256 amount = (totalAmount / 100) * percent;\\r\\n            token.transfer(holder, amount);\\r\\n            emit RoyaltyDistributorWithdraw(_collectionAddress, holder, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev gets funds of native crypto in this contract\\r\\n     */\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n        \\r\\n    /**\\r\\n     * @dev gets funds of native crypto in this contract\\r\\n     * @param tokenAddress address address of the token to be withdrawn\\r\\n     */\\r\\n    function getBalanceToken(address tokenAddress) public view returns (uint256) {\\r\\n        return IERC20(tokenAddress).balanceOf(address(this));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev gets contract where royalties are from\\r\\n     */\\r\\n    function getCollectionAddress() public view returns (address) {\\r\\n        return _collectionAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets total royalties of contract\\r\\n     */\\r\\n    function getTotalRoyalties() public view returns (uint32) {\\r\\n        return _totalPercent;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev gets total royalties of contract\\r\\n     * @param index uint256 index in the structure containing a holder's data\\r\\n     */\\r\\n    function getHolderData(uint256 index) public view returns (Holder memory) {\\r\\n        return _holders[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Received funds and made withdraw to holders\\r\\n     */\\r\\n    receive() external payable {\\r\\n        //withdraw(); This doesn't work gas limit check out at https://docs.soliditylang.org/en/v0.8.12/contracts.html#receive-ether-function\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectibleLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethereumClaimRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectibleClaimRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authClaimIssuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyDistributorFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chargeMaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"collectionID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCreator\",\"type\":\"address\"}],\"name\":\"CollectionBuilt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beaconAddress\",\"type\":\"address\"}],\"name\":\"CollectionFactoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"royaltyHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"royaltyHoldersPercentages\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"buildCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customLogicAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractCID_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"royaltyHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"royaltyHoldersPercentages\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"buildCustomCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"collectionNameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionID_\",\"type\":\"uint32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setAuthClaimIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLogicAddress\",\"type\":\"address\"}],\"name\":\"setLogic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectibleLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethereumClaimRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectibleClaimRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authClaimIssuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyDistributorFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chargeMaster\",\"type\":\"address\"}],\"name\":\"updateReferencedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaTxCollectionFactory", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b0ac97842e9b996754fae8bb24470263b8e36d4b00000000000000000000000083075d212223baa9fb0de123f2e8b49ee2b8696700000000000000000000000036be11f9320b1bf359ce1f82b8ed2824426270880000000000000000000000004494deb56718fd2a19c2f865c0b5686b6804e66a000000000000000000000000acdabbfc1cdd777444b889c4dfd36d2d872e36ef0000000000000000000000007d9c16911aa0e805033eac152788103c522bc711", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}