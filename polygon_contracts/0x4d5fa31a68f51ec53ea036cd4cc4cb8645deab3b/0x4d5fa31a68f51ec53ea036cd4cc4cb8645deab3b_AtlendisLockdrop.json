{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/lockdrop/AtlendisLockdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./BaseLockdrop.sol\\\";\\nimport \\\"../external/IPoolsController.sol\\\";\\nimport \\\"../external/IPositionManager.sol\\\";\\n\\n/**\\n * @title AtlendisLockdrop\\n * @notice Lockdrop contract designed to rewards users that lock their Atlendis\\n * positions for a given duration with a corresponding amount of tokens\\n **/\\ncontract AtlendisLockdrop is BaseLockdrop {\\n    using SafeERC20 for ERC20;\\n\\n    ////////////\\n    // EVENTS //\\n    ////////////\\n\\n    event LockdropCreated(\\n        address poolsContract,\\n        address positionsContract,\\n        bytes32 poolHash,\\n        uint256 maxMultiplier,\\n        uint256 minLockingPeriod,\\n        uint256 maxLockingPeriod,\\n        uint256 minPositionAmount\\n    );\\n    event RateUpdated(uint256 tokenId, address from, uint256 newRate);\\n\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    bytes32 private immutable poolHash; // a lockdrop is specific to an Atlendis pool\\n    uint256 private immutable minPositionAmount; // positions must have a minimum underlying token value\\n    address private immutable poolsController; // address of Atlendis' pools contract\\n\\n    /////////////////\\n    // CONSTRUCTOR //\\n    /////////////////\\n\\n    constructor(\\n        address _poolsController,\\n        address _positionManager,\\n        bytes32 _poolHash,\\n        uint256 _maxMultiplier,\\n        uint256 _minLockingPeriod,\\n        uint256 _maxLockingPeriod,\\n        uint256 _minPositionAmount\\n    )\\n        BaseLockdrop(\\n            _positionManager,\\n            _maxMultiplier,\\n            _minLockingPeriod,\\n            _maxLockingPeriod\\n        )\\n    {\\n        require(_poolHash != \\\"\\\", \\\"Wrong pool input\\\");\\n\\n        poolHash = _poolHash;\\n        minPositionAmount = _minPositionAmount;\\n        poolsController = _poolsController;\\n\\n        (address underlyingToken, , , , , , , , , , ) = IPoolsController(\\n            poolsController\\n        ).getPoolParameters(poolHash);\\n        require(underlyingToken != address(0), \\\"Target pool does not exist\\\");\\n\\n        emit LockdropCreated(\\n            _poolsController,\\n            _positionManager,\\n            _poolHash,\\n            _maxMultiplier,\\n            _minLockingPeriod,\\n            _maxLockingPeriod,\\n            _minPositionAmount\\n        );\\n    }\\n\\n    /////////////////////////\\n    // POSITION MANAGEMENT //\\n    /////////////////////////\\n\\n    /**\\n     * @notice Update the rate of the underlying Atlendis position\\n     **/\\n    function updateRate(uint256 tokenId, uint256 newRate)\\n        external\\n        isLockOwner(tokenId)\\n    {\\n        IPositionManager(nft).updateRate(uint128(tokenId), uint128(newRate));\\n\\n        emit RateUpdated(tokenId, _msgSender(), newRate);\\n    }\\n\\n    ///////////////\\n    // OVERRIDES //\\n    ///////////////\\n\\n    /**\\n     * @notice Get back remaining rewards\\n     * Owner can get back remaining rewards\\n     * Rescueing rewards lets users claim their pending rewards\\n     * Users won't be able to use lock positions anymore\\n     **/\\n    function rescueRewards(address to) external override onlyOwner {\\n        uint256[] memory toRescue = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            toRescue[i] =\\n                ERC20(tokens[i]).balanceOf(address(this)) -\\n                pendingRewards[tokens[i]];\\n            ERC20(tokens[i]).safeTransfer(_msgSender(), toRescue[i]);\\n        }\\n\\n        emit RewardsRescued(to, toRescue);\\n    }\\n\\n    /**\\n     * @notice Locking logic\\n     * Implementation of _lock function to take into account Atlendis' specific use case\\n     * Verifies that the position complies with the lockdrop conditions\\n     * Computes the rewards and transfers the nft to the lockdrop contract\\n     **/\\n    function _lock(\\n        uint256 tokenId,\\n        uint256[] memory baseAllocations,\\n        uint256 lockingDuration\\n    ) internal override {\\n        (\\n            uint128 bondsQuantity,\\n            uint128 normalizedDepositedAmount\\n        ) = IPositionManager(nft).getPositionRepartition(uint128(tokenId));\\n        require(\\n            (bondsQuantity + normalizedDepositedAmount) > minPositionAmount,\\n            \\\"Unsufficient position size\\\"\\n        );\\n        (bytes32 _poolHash, , , , , , ) = IPositionManager(nft).position(\\n            uint128(tokenId)\\n        );\\n        require(_poolHash == poolHash, \\\"Wrong pool hash\\\");\\n        currentLocks[tokenId].owner = _msgSender();\\n        currentLocks[tokenId].endDate = block.timestamp + lockingDuration;\\n        uint256[] memory rewards = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 reward = _getRewardsAmount(\\n                baseAllocations[i],\\n                lockingDuration,\\n                tokenId,\\n                tokens[i]\\n            );\\n            require(\\n                ERC20(tokens[i]).balanceOf(address(this)) >=\\n                    (pendingRewards[tokens[i]] + reward),\\n                \\\"Not enough rewards left to distribute\\\"\\n            );\\n            pendingRewards[tokens[i]] += reward;\\n            currentLocks[tokenId].rewards[tokens[i]] = reward;\\n            rewards[i] = reward;\\n        }\\n        ERC721(nft).transferFrom(_msgSender(), address(this), tokenId);\\n        emit Locked(\\n            tokenId,\\n            bondsQuantity + normalizedDepositedAmount,\\n            lockingDuration,\\n            _msgSender(),\\n            baseAllocations,\\n            rewards\\n        );\\n    }\\n\\n    /**\\n     * @notice Computes token rewards amount\\n     * Implementation to comply with Atlendis' specific use case\\n     **/\\n    function _getRewardsAmount(\\n        uint256 baseAmount,\\n        uint256 lockingDuration,\\n        uint256 tokenId,\\n        address token\\n    ) internal view override returns (uint256) {\\n        (\\n            uint128 bondsQuantity,\\n            uint128 normalizedDepositedAmount\\n        ) = IPositionManager(nft).getPositionRepartition(uint128(tokenId));\\n        uint256 positionAmount = uint256(\\n            bondsQuantity + normalizedDepositedAmount\\n        );\\n        uint256 multiplier = _getMultiplier(lockingDuration, tokenId);\\n        uint256 baseAllocation = (baseAmount * multiplier) / baseMultiplier;\\n        uint256 rewardsAmount = (positionAmount *\\n            tokenParameters[token].rate * // rate is in token per second and inherits its precision\\n            lockingDuration *\\n            multiplier) /\\n            baseMultiplier /\\n            1e18; // getPositionRepartition always returns wad precision\\n        return baseAllocation + rewardsAmount;\\n    }\\n\\n    /**\\n     * @notice Computes token rewards multiplier\\n     * Implementation to comply with Atlendis' specific use case\\n     * the longer the lock, the bigger the reward\\n     **/\\n    function _getMultiplier(uint256 lockingDuration, uint256)\\n        internal\\n        view\\n        override\\n        returns (uint256 multiplier)\\n    {\\n        return\\n            baseMultiplier +\\n            ((maxMultiplier - baseMultiplier) *\\n                (lockingDuration - minLockingPeriod)) /\\n            (maxLockingPeriod - minLockingPeriod);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lockdrop/BaseLockdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title BaseLockdrop\\n * @notice Lockdrop contract designed to rewards users that lock their NFTs\\n * for a given time with a corresponding amount of tokens\\n **/\\nabstract contract BaseLockdrop is Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    ////////////\\n    // EVENTS //\\n    ////////////\\n\\n    event Locked(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 lockDuration,\\n        address from,\\n        uint256[] baseAllocations,\\n        uint256[] rewards\\n    );\\n    event Quit(uint256 tokenId, uint256 lockEnd, address from);\\n    event Claimed(\\n        uint256 tokenId,\\n        uint256 lockEnd,\\n        address from,\\n        uint256[] rewards\\n    );\\n    event Withdrawn(\\n        uint256 tokenId,\\n        uint256 lockEnd,\\n        address from,\\n        uint256[] rewards\\n    );\\n    event TokenAdded(address token, uint256 rate, bytes32 root);\\n    event RootSet(address token, bytes32 root);\\n    event RewardsRescued(address to, uint256[] amounts);\\n\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    // lock parameters\\n    address public immutable nft; // address of the nft to lock\\n    uint256 public immutable baseMultiplier = 1e18; // 1\\n    uint256 public immutable maxMultiplier;\\n    uint256 public immutable minLockingPeriod;\\n    uint256 public immutable maxLockingPeriod;\\n\\n    // tokens\\n    address[] public tokens; // token rewards addresses\\n    struct TokenParameters {\\n        uint256 rate; // base tokens per nft value unit per second of locking\\n        bytes32 root; // merkle tree root used for base token allocations\\n    }\\n    mapping(address => TokenParameters) public tokenParameters;\\n\\n    // contract state\\n    mapping(address => uint256) public pendingRewards; // rewards attributed to currently locked positions\\n    struct LockDrop {\\n        address owner;\\n        mapping(address => uint256) rewards;\\n        uint256 endDate;\\n        bool claimed;\\n        bool withdrawn;\\n    }\\n    mapping(uint256 => LockDrop) internal currentLocks;\\n    mapping(bytes32 => bool) public claimedAllocations; // base allocations can only be claimed once\\n\\n    /////////////////\\n    // CONSTRUCTOR //\\n    /////////////////\\n\\n    constructor(\\n        address _nft,\\n        uint256 _maxMultiplier,\\n        uint256 _minLockingPeriod,\\n        uint256 _maxLockingPeriod\\n    ) {\\n        require(\\n            _minLockingPeriod < _maxLockingPeriod,\\n            \\\"Wrong locking periods input\\\"\\n        );\\n        require(\\n            _maxMultiplier >= baseMultiplier,\\n            \\\"Max multiplier must be greater or equal than base multiplier\\\"\\n        );\\n        require(_nft != address(0), \\\"Wrong nft address\\\");\\n        nft = _nft;\\n        maxMultiplier = _maxMultiplier;\\n        minLockingPeriod = _minLockingPeriod;\\n        maxLockingPeriod = _maxLockingPeriod;\\n    }\\n\\n    ///////////////\\n    // MODIFIERS //\\n    ///////////////\\n\\n    /**\\n     * @notice Position lock ownership verification logic\\n     **/\\n    modifier isLockOwner(uint256 tokenId) {\\n        require(\\n            _msgSender() == currentLocks[tokenId].owner,\\n            \\\"Caller is not the owner of the lock\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Lock validity verification logic\\n     **/\\n    modifier validLock(uint256 lockingDuration) {\\n        require(\\n            (lockingDuration <= maxLockingPeriod) &&\\n                (lockingDuration >= minLockingPeriod),\\n            \\\"Wrong locking duration\\\"\\n        );\\n        require(tokens.length > 0, \\\"No token is registered\\\");\\n        _;\\n    }\\n\\n    ///////////\\n    // VIEWS //\\n    ///////////\\n\\n    /**\\n     * @notice Get lock for target tokenId\\n     **/\\n    function getLockParameters(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            currentLocks[tokenId].owner,\\n            currentLocks[tokenId].endDate,\\n            currentLocks[tokenId].claimed\\n        );\\n    }\\n\\n    /**\\n     * @notice Get lock rewards for target tokenId and reward token address\\n     **/\\n    function getLockRewards(uint256 tokenId, address _token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return currentLocks[tokenId].rewards[_token];\\n    }\\n\\n    /**\\n     * @notice Preview rewards for upcoming lock\\n     **/\\n    function previewRewards(\\n        uint256 baseAmount,\\n        uint256 tokenId,\\n        uint256 lockingDuration,\\n        address token\\n    ) external view returns (uint256 rewards) {\\n        require(\\n            (lockingDuration <= maxLockingPeriod) &&\\n                (lockingDuration >= minLockingPeriod),\\n            \\\"Wrong locking duration\\\"\\n        );\\n        require(tokens.length > 0, \\\"No token is registered\\\");\\n        require(tokenParameters[token].rate > 0, \\\"Token not registered\\\");\\n        rewards = _getRewardsAmount(\\n            baseAmount,\\n            lockingDuration,\\n            tokenId,\\n            token\\n        );\\n        require(\\n            ERC20(token).balanceOf(address(this)) >\\n                (pendingRewards[token] + rewards),\\n            \\\"Not enough rewards left to distribute\\\"\\n        );\\n    }\\n\\n    ////////////\\n    // OWNER  //\\n    ////////////\\n\\n    /**\\n     * @notice Add new token reward\\n     * Owner can add new types of token rewards\\n     * Distribution can begin after the lockdrop contract is sent tokens to distribute\\n     **/\\n    function addToken(\\n        address token,\\n        uint256 rate,\\n        bytes32 root\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(tokens[i] != token, \\\"Token already supported\\\");\\n        }\\n        tokens.push(token);\\n        tokenParameters[token] = TokenParameters({rate: rate, root: root});\\n\\n        emit TokenAdded(token, rate, root);\\n    }\\n\\n    /**\\n     * @notice Set token base allocation merkle root\\n     * Owner can set base allocation merkle root for a token\\n     * Can only be done if root was set to 0 beforehand\\n     **/\\n    function setRoot(address token, bytes32 root) external onlyOwner {\\n        require(\\n            tokenParameters[token].root == bytes32(0),\\n            \\\"Root has already been set\\\"\\n        );\\n\\n        tokenParameters[token].root = root;\\n\\n        emit RootSet(token, root);\\n    }\\n\\n    /**\\n     * @notice Get back remaining rewards\\n     * Owner can get back remaining rewards in some circumstances\\n     * This function must be overidden to specify conditions for the target use case\\n     **/\\n    function rescueRewards(address to) external virtual;\\n\\n    /////////////\\n    // LOCKING //\\n    /////////////\\n\\n    /**\\n     * @notice Lock without base allocation\\n     * A user locks its nft in exchange for future rewards\\n     * The longer the user locks its position, the bigger the rewards\\n     **/\\n    function lock(uint256 tokenId, uint256 lockingDuration)\\n        external\\n        validLock(lockingDuration)\\n    {\\n        uint256[] memory noAllocations = new uint256[](tokens.length);\\n        _lock(tokenId, noAllocations, lockingDuration);\\n    }\\n\\n    /**\\n     * @notice Lock with base allocation\\n     * A merkle tree root is specified at deployment time including base token allocations\\n     * These allocations serve as a base amount to compute future rewards\\n     * Base allocations benefit from multipliers\\n     **/\\n    function lock(\\n        bytes32[][] calldata proofs,\\n        uint256[] memory baseAllocations,\\n        uint256 tokenId,\\n        uint256 lockingDuration\\n    ) external validLock(lockingDuration) {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (baseAllocations[i] > 0) {\\n                bytes32 leaf = keccak256(\\n                    abi.encode(_msgSender(), baseAllocations[i])\\n                );\\n                require(\\n                    !claimedAllocations[leaf],\\n                    \\\"Base allocation already claimed\\\"\\n                );\\n                require(\\n                    MerkleProof.verify(\\n                        proofs[i],\\n                        tokenParameters[tokens[i]].root,\\n                        leaf\\n                    ),\\n                    \\\"Proof is not valid\\\"\\n                );\\n                claimedAllocations[leaf] = true; // claimed allocations that are quitted cannot be claimed again\\n            }\\n        }\\n        _lock(tokenId, baseAllocations, lockingDuration);\\n    }\\n\\n    ///////////////\\n    // RELEASING //\\n    ///////////////\\n\\n    /**\\n     * @notice Stops lock before maturity, renouncing to rewards\\n     **/\\n    function quit(uint256 tokenId) external virtual isLockOwner(tokenId) {\\n        require(\\n            block.timestamp < currentLocks[tokenId].endDate,\\n            \\\"Quit too late\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            pendingRewards[tokens[i]] -= currentLocks[tokenId].rewards[\\n                tokens[i]\\n            ];\\n            currentLocks[tokenId].rewards[tokens[i]] = 0;\\n        }\\n        uint256 endDate = currentLocks[tokenId].endDate;\\n        delete currentLocks[tokenId];\\n\\n        ERC721(nft).transferFrom(address(this), _msgSender(), tokenId);\\n\\n        emit Quit(tokenId, endDate, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Withdraw locked nft\\n     * Sends back nft after the lock is successfully completed\\n     * A lock is considered final when both token is withdrawn and rewards are claimed\\n     * Logic can be modified by inheriting contracts\\n     **/\\n    function withdraw(uint256 tokenId) public virtual isLockOwner(tokenId) {\\n        require(\\n            block.timestamp >= currentLocks[tokenId].endDate,\\n            \\\"Withdraw too early\\\"\\n        );\\n\\n        uint256[] memory rewards = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            rewards[i] = currentLocks[tokenId].rewards[tokens[i]];\\n            if (currentLocks[tokenId].claimed)\\n                currentLocks[tokenId].rewards[tokens[i]] = 0;\\n        }\\n        uint256 endDate = currentLocks[tokenId].endDate;\\n        // lock rewards were already claimed\\n        if (currentLocks[tokenId].claimed) {\\n            delete currentLocks[tokenId];\\n        } else {\\n            currentLocks[tokenId].withdrawn = true;\\n        }\\n\\n        ERC721(nft).transferFrom(address(this), _msgSender(), tokenId);\\n\\n        emit Withdrawn(tokenId, endDate, _msgSender(), rewards);\\n    }\\n\\n    /**\\n     * @notice Claim lock rewards\\n     * Send token rewards after a lock is successfully completed\\n     * A lock is considered final when both token is withdrawn and rewards are claimed\\n     * Logic can be modified by inheriting contracts\\n     **/\\n    function claim(uint256 tokenId) public virtual isLockOwner(tokenId) {\\n        require(\\n            block.timestamp >= currentLocks[tokenId].endDate,\\n            \\\"Claim too early\\\"\\n        );\\n        require(!currentLocks[tokenId].claimed, \\\"Lock already claimed\\\");\\n\\n        bool toDelete = currentLocks[tokenId].withdrawn;\\n        uint256[] memory rewards = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            pendingRewards[tokens[i]] -= currentLocks[tokenId].rewards[\\n                tokens[i]\\n            ];\\n            rewards[i] = currentLocks[tokenId].rewards[tokens[i]];\\n            if (toDelete) currentLocks[tokenId].rewards[tokens[i]] = 0;\\n        }\\n        uint256 endDate = currentLocks[tokenId].endDate;\\n        // locked token was already withdrawn\\n        if (toDelete) {\\n            delete currentLocks[tokenId];\\n        } else {\\n            currentLocks[tokenId].claimed = true;\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            ERC20(tokens[i]).safeTransfer(_msgSender(), rewards[i]);\\n        }\\n        emit Claimed(tokenId, endDate, _msgSender(), rewards);\\n    }\\n\\n    /**\\n     * @notice Claim lock rewards and withdraw position\\n     * Helper method to do both actions in the same transaction\\n     **/\\n    function claimAndWithdraw(uint256 tokenId) external {\\n        claim(tokenId);\\n        withdraw(tokenId);\\n    }\\n\\n    //////////////////////////////\\n    // INTERNAL VIRTUAL METHODS //\\n    //////////////////////////////\\n\\n    /**\\n     * @notice Internal lock logic\\n     * Computes rewards, gets target position and saves data for future position releasing\\n     **/\\n    function _lock(\\n        uint256 tokenId,\\n        uint256[] memory baseAllocations,\\n        uint256 lockingDuration\\n    ) internal virtual;\\n\\n    /**\\n     * @notice Computes token rewards amount\\n     **/\\n    function _getRewardsAmount(\\n        uint256 baseAmount,\\n        uint256 lockingDuration,\\n        uint256 tokenId,\\n        address token\\n    ) internal view virtual returns (uint256 rewardsAmount);\\n\\n    /**\\n     * @notice Computes token rewards multiplier\\n     * the longer the lock, the bigger the reward\\n     **/\\n    function _getMultiplier(uint256 lockingDuration, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 multiplier);\\n}\\n\"\r\n    },\r\n    \"src/external/IPoolsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/////////////////////////////////////////////////////////////\\n// PASTED FROM https://github.com/Atlendis/priv-contracts/ //\\n/////////////////////////////////////////////////////////////\\n\\n/**\\n * @title IPoolsController\\n * @notice Management of the pools\\n **/\\ninterface IPoolsController {\\n    // EVENTS\\n\\n    /**\\n     * @notice Emitted after a pool was creted\\n     **/\\n    event PoolCreated(PoolCreationParams params);\\n\\n    /**\\n     * @notice Emitted after a borrower address was allowed to borrow from a pool\\n     * @param borrowerAddress The address to allow\\n     * @param poolHash The identifier of the pool\\n     **/\\n    event BorrowerAllowed(address borrowerAddress, bytes32 poolHash);\\n\\n    /**\\n     * @notice Emitted after a borrower address was disallowed to borrow from a pool\\n     * @param borrowerAddress The address to disallow\\n     * @param poolHash The identifier of the pool\\n     **/\\n    event BorrowerDisallowed(address borrowerAddress, bytes32 poolHash);\\n\\n    /**\\n     * @notice Emitted when a pool is active, i.e. after the borrower deposits enough tokens\\n     * in its pool liquidity rewards reserve as agreed before the pool creation\\n     * @param poolHash The identifier of the pool\\n     **/\\n    event PoolActivated(bytes32 poolHash);\\n\\n    /**\\n     * @notice Emitted after pool is closed\\n     * @param poolHash The identifier of the pool\\n     * @param collectedLiquidityRewards The amount of liquidity rewards to have been collected at closing time\\n     **/\\n    event PoolClosed(bytes32 poolHash, uint128 collectedLiquidityRewards);\\n\\n    /**\\n     * @notice Emitted when a pool defaults on its loan repayment\\n     * @param poolHash The identifier of the pool\\n     * @param distributedLiquidityRewards The remaining liquidity rewards distributed to\\n     * bond holders\\n     **/\\n    event Default(bytes32 poolHash, uint128 distributedLiquidityRewards);\\n\\n    /**\\n     * @notice Emitted after governance sets the maximum borrowable amount for a pool\\n     **/\\n    event SetMaxBorrowableAmount(uint128 maxTokenDeposit, bytes32 poolHash);\\n\\n    /**\\n     * @notice Emitted after governance sets the liquidity rewards distribution rate for a pool\\n     **/\\n    event SetLiquidityRewardsDistributionRate(\\n        uint128 distributionRate,\\n        bytes32 poolHash\\n    );\\n\\n    /**\\n     * @notice Emitted after governance sets the establishment fee for a pool\\n     **/\\n    event SetEstablishmentFeeRate(uint128 establishmentRate, bytes32 poolHash);\\n\\n    /**\\n     * @notice Emitted after governance sets the repayment fee for a pool\\n     **/\\n    event SetRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash);\\n\\n    /**\\n     * @notice Set the pool early repay option\\n     **/\\n    event SetEarlyRepay(bool earlyRepay, bytes32 poolHash);\\n\\n    /**\\n     * @notice Emitted after governance claims the fees associated with a pool\\n     * @param poolHash The identifier of the pool\\n     * @param normalizedAmount The amount of tokens claimed\\n     * @param to The address receiving the fees\\n     **/\\n    event ClaimProtocolFees(\\n        bytes32 poolHash,\\n        uint128 normalizedAmount,\\n        address to\\n    );\\n\\n    // VIEW METHODS\\n\\n    /**\\n     * @notice Returns the parameters of a pool\\n     * @param poolHash The identifier of the pool\\n     * @return underlyingToken Address of the underlying token of the pool\\n     * @return minRate Minimum rate of deposits accepted in the pool\\n     * @return maxRate Maximum rate of deposits accepted in the pool\\n     * @return rateSpacing Difference between two rates in the pool\\n     * @return maxBorrowableAmount Maximum amount of tokens that can be borrowed from the pool\\n     * @return loanDuration Duration of a loan in the pool\\n     * @return liquidityRewardsDistributionRate Rate at which liquidity rewards are distributed to lenders\\n     * @return cooldownPeriod Period after a loan during which a borrower cannot take another loan\\n     * @return repaymentPeriod Period after a loan end during which a borrower can repay without penalty\\n     * @return lateRepayFeePerBondRate Penalty a borrower has to pay when it repays late\\n     * @return liquidityRewardsActivationThreshold Minimum amount of liqudity rewards a borrower has to\\n     * deposit to active the pool\\n     **/\\n    function getPoolParameters(bytes32 poolHash)\\n        external\\n        view\\n        returns (\\n            address underlyingToken,\\n            uint128 minRate,\\n            uint128 maxRate,\\n            uint128 rateSpacing,\\n            uint128 maxBorrowableAmount,\\n            uint128 loanDuration,\\n            uint128 liquidityRewardsDistributionRate,\\n            uint128 cooldownPeriod,\\n            uint128 repaymentPeriod,\\n            uint128 lateRepayFeePerBondRate,\\n            uint128 liquidityRewardsActivationThreshold\\n        );\\n\\n    /**\\n     * @notice Returns the fee rates of a pool\\n     * @return establishmentFeeRate Amount of fees paid to the protocol at borrow time\\n     * @return repaymentFeeRate Amount of fees paid to the protocol at repay time\\n     **/\\n    function getPoolFeeRates(bytes32 poolHash)\\n        external\\n        view\\n        returns (uint128 establishmentFeeRate, uint128 repaymentFeeRate);\\n\\n    /**\\n     * @notice Returns the state of a pool\\n     * @param poolHash The identifier of the pool\\n     * @return active Signals if a pool is active and ready to accept deposits\\n     * @return defaulted Signals if a pool was defaulted\\n     * @return closed Signals if a pool was closed\\n     * @return currentMaturity End timestamp of current loan\\n     * @return bondsIssuedQuantity Amount of bonds issued, to be repaid at maturity\\n     * @return normalizedBorrowedAmount Actual amount of tokens that were borrowed\\n     * @return normalizedAvailableDeposits Actual amount of tokens available to be borrowed\\n     * @return lowerInterestRate Minimum rate at which a deposit was made\\n     * @return nextLoanMinStart Cool down period, minimum timestamp after which a new loan can be taken\\n     * @return remainingAdjustedLiquidityRewardsReserve Remaining liquidity rewards to be distributed to lenders\\n     * @return yieldProviderLiquidityRatio Last recorded yield provider liquidity ratio\\n     * @return currentBondsIssuanceIndex Current borrow period identifier of the pool\\n     **/\\n    function getPoolState(bytes32 poolHash)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            bool defaulted,\\n            bool closed,\\n            uint128 currentMaturity,\\n            uint128 bondsIssuedQuantity,\\n            uint128 normalizedBorrowedAmount,\\n            uint128 normalizedAvailableDeposits,\\n            uint128 lowerInterestRate,\\n            uint128 nextLoanMinStart,\\n            uint128 remainingAdjustedLiquidityRewardsReserve,\\n            uint128 yieldProviderLiquidityRatio,\\n            uint128 currentBondsIssuanceIndex\\n        );\\n\\n    /**\\n     * @notice Signals whether the early repay feature is activated or not\\n     * @return earlyRepay Flag that signifies whether the early repay feature is activated or not\\n     **/\\n    function isEarlyRepay(bytes32 poolHash)\\n        external\\n        view\\n        returns (bool earlyRepay);\\n\\n    /**\\n     * @notice Returns the state of a pool\\n     * @return defaultTimestamp The timestamp at which the pool was defaulted\\n     **/\\n    function getDefaultTimestamp(bytes32 poolHash)\\n        external\\n        view\\n        returns (uint128 defaultTimestamp);\\n\\n    // GOVERNANCE METHODS\\n\\n    /**\\n     * @notice Parameters used for a pool creation\\n     * @param poolHash The identifier of the pool\\n     * @param underlyingToken Address of the pool underlying token\\n     * @param yieldProvider Yield provider of the pool\\n     * @param minRate Minimum bidding rate for the pool\\n     * @param maxRate Maximum bidding rate for the pool\\n     * @param rateSpacing Difference between two tick rates in the pool\\n     * @param maxBorrowableAmount Maximum amount of tokens a borrower can get from a pool\\n     * @param loanDuration Duration of a loan i.e. maturity of the issued bonds\\n     * @param distributionRate Rate at which the liquidity rewards are distributed to unmatched positions\\n     * @param cooldownPeriod Period of time after a repay during which the borrow cannot take a loan\\n     * @param repaymentPeriod Period after the end of a loan during which the borrower can repay without penalty\\n     * @param lateRepayFeePerBondRate Additional fees applied when a borrower repays its loan after the repayment period ends\\n     * @param establishmentFeeRate Fees paid to Atlendis at borrow time\\n     * @param repaymentFeeRate Fees paid to Atlendis at repay time\\n     * @param liquidityRewardsActivationThreshold Amount of tokens the borrower has to lock into the liquidity\\n     * @param earlyRepay Is early repay activated\\n     * rewards reserve to activate the pool\\n     **/\\n    struct PoolCreationParams {\\n        bytes32 poolHash;\\n        address underlyingToken;\\n        address yieldProvider;\\n        uint128 minRate;\\n        uint128 maxRate;\\n        uint128 rateSpacing;\\n        uint128 maxBorrowableAmount;\\n        uint128 loanDuration;\\n        uint128 distributionRate;\\n        uint128 cooldownPeriod;\\n        uint128 repaymentPeriod;\\n        uint128 lateRepayFeePerBondRate;\\n        uint128 establishmentFeeRate;\\n        uint128 repaymentFeeRate;\\n        uint128 liquidityRewardsActivationThreshold;\\n        bool earlyRepay;\\n    }\\n\\n    /**\\n     * @notice Creates a new pool\\n     * @param params A struct defining the pool creation parameters\\n     **/\\n    function createNewPool(PoolCreationParams calldata params) external;\\n\\n    /**\\n     * @notice Allow an address to interact with a borrower pool\\n     * @param borrowerAddress The address to allow\\n     * @param poolHash The identifier of the pool\\n     **/\\n    function allow(address borrowerAddress, bytes32 poolHash) external;\\n\\n    /**\\n     * @notice Remove pool interaction rights from an address\\n     * @param borrowerAddress The address to disallow\\n     * @param poolHash The identifier of the borrower pool\\n     **/\\n    function disallow(address borrowerAddress, bytes32 poolHash) external;\\n\\n    /**\\n     * @notice Flags the pool as closed\\n     * @param poolHash The identifier of the pool to be closed\\n     * @param to An address to which the remaining liquidity rewards will be sent\\n     **/\\n    function closePool(bytes32 poolHash, address to) external;\\n\\n    /**\\n     * @notice Flags the pool as defaulted\\n     * @param poolHash The identifier of the pool to default\\n     **/\\n    function setDefault(bytes32 poolHash) external;\\n\\n    /**\\n     * @notice Set the maximum amount of tokens that can be borrowed in the target pool\\n     **/\\n    function setMaxBorrowableAmount(uint128 maxTokenDeposit, bytes32 poolHash)\\n        external;\\n\\n    /**\\n     * @notice Set the pool liquidity rewards distribution rate\\n     **/\\n    function setLiquidityRewardsDistributionRate(\\n        uint128 distributionRate,\\n        bytes32 poolHash\\n    ) external;\\n\\n    /**\\n     * @notice Set the pool establishment protocol fee rate\\n     **/\\n    function setEstablishmentFeeRate(\\n        uint128 establishmentFeeRate,\\n        bytes32 poolHash\\n    ) external;\\n\\n    /**\\n     * @notice Set the pool repayment protocol fee rate\\n     **/\\n    function setRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash)\\n        external;\\n\\n    /**\\n     * @notice Set the pool early repay option\\n     **/\\n    function setEarlyRepay(bool earlyRepay, bytes32 poolHash) external;\\n\\n    /**\\n     * @notice Withdraws protocol fees to a target address\\n     * @param poolHash The identifier of the pool\\n     * @param normalizedAmount The amount of tokens claimed\\n     * @param to The address receiving the fees\\n     **/\\n    function claimProtocolFees(\\n        bytes32 poolHash,\\n        uint128 normalizedAmount,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @notice Stops all actions on all pools\\n     **/\\n    function freezePool() external;\\n\\n    /**\\n     * @notice Cancel a freeze, makes actions available again on all pools\\n     **/\\n    function unfreezePool() external;\\n}\\n\"\r\n    },\r\n    \"src/external/IPositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/////////////////////////////////////////////////////////////\\n// PASTED FROM https://github.com/Atlendis/priv-contracts/ //\\n/////////////////////////////////////////////////////////////\\n\\n/**\\n * @title IPositionManager\\n * @notice Contains methods that can be called by lenders to create and manage their position\\n **/\\ninterface IPositionManager {\\n    /**\\n     * @notice Emitted when #deposit is called and is a success\\n     * @param lender The address of the lender depositing token on the protocol\\n     * @param tokenId The tokenId of the position\\n     * @param amount The amount of deposited token\\n     * @param rate The position bidding rate\\n     * @param poolHash The identifier of the pool\\n     * @param bondsIssuanceIndex The borrow period assigned to the position\\n     **/\\n    event Deposit(\\n        address indexed lender,\\n        uint128 tokenId,\\n        uint128 amount,\\n        uint128 rate,\\n        bytes32 poolHash,\\n        uint128 bondsIssuanceIndex\\n    );\\n\\n    /**\\n     * @notice Emitted when #updateRate is called and is a success\\n     * @param lender The address of the lender updating their position\\n     * @param tokenId The tokenId of the position\\n     * @param amount The amount of deposited token plus their accrued interests\\n     * @param rate The new rate required by lender to lend their deposited token\\n     * @param poolHash The identifier of the pool\\n     **/\\n    event UpdateRate(\\n        address indexed lender,\\n        uint128 tokenId,\\n        uint128 amount,\\n        uint128 rate,\\n        bytes32 poolHash\\n    );\\n\\n    /**\\n     * @notice Emitted when #withdraw is called and is a success\\n     * @param lender The address of the withdrawing lender\\n     * @param tokenId The tokenId of the position\\n     * @param amount The amount of tokens withdrawn\\n     * @param rate The position bidding rate\\n     * @param poolHash The identifier of the pool\\n     **/\\n    event Withdraw(\\n        address indexed lender,\\n        uint128 tokenId,\\n        uint128 amount,\\n        uint128 remainingBonds,\\n        uint128 rate,\\n        bytes32 poolHash\\n    );\\n\\n    /**\\n     * @notice Set the position descriptor address\\n     * @param positionDescriptor The address of the new position descriptor\\n     **/\\n    event SetPositionDescriptor(address positionDescriptor);\\n\\n    /**\\n     * @notice Emitted when #withdraw is called and is a success\\n     * @param tokenId The tokenId of the position\\n     * @return poolHash The identifier of the pool\\n     * @return adjustedBalance Adjusted balance of the position original deposit\\n     * @return rate Position bidding rate\\n     * @return underlyingToken Address of the tokens the position contains\\n     * @return remainingBonds Quantity of bonds remaining in the position after a partial withdraw\\n     * @return bondsMaturity Maturity of the position's remaining bonds\\n     * @return bondsIssuanceIndex Borrow period the deposit was made in\\n     **/\\n    function position(uint128 tokenId)\\n        external\\n        view\\n        returns (\\n            bytes32 poolHash,\\n            uint128 adjustedBalance,\\n            uint128 rate,\\n            address underlyingToken,\\n            uint128 remainingBonds,\\n            uint128 bondsMaturity,\\n            uint128 bondsIssuanceIndex\\n        );\\n\\n    /**\\n     * @notice Returns the balance on yield provider and the quantity of bond held\\n     * @param tokenId The tokenId of the position\\n     * @return bondsQuantity Quantity of bond held, represents funds borrowed\\n     * @return normalizedDepositedAmount Amount of deposit placed on yield provider\\n     **/\\n    function getPositionRepartition(uint128 tokenId)\\n        external\\n        view\\n        returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount);\\n\\n    /**\\n     * @notice Deposits tokens into the yield provider and places a bid at the indicated rate within the\\n     * respective borrower's order book. A new position is created within the positions map that keeps\\n     * track of this position's composition. An ERC721 NFT is minted for the user as a representation\\n     * of the position.\\n     * @param to The address for which the position is created\\n     * @param amount The amount of tokens to be deposited\\n     * @param rate The rate at which to bid for a bonds\\n     * @param poolHash The identifier of the pool\\n     * @param underlyingToken The contract address of the token to be deposited\\n     **/\\n    function deposit(\\n        address to,\\n        uint128 amount,\\n        uint128 rate,\\n        bytes32 poolHash,\\n        address underlyingToken\\n    ) external returns (uint128 tokenId);\\n\\n    /**\\n     * @notice Allows a user to update the rate at which to bid for bonds. A rate is only\\n     * upgradable as long as the full amount of deposits are currently allocated with the\\n     * yield provider i.e the position does not hold any bonds.\\n     * @param tokenId The tokenId of the position\\n     * @param newRate The new rate at which to bid for bonds\\n     **/\\n    function updateRate(uint128 tokenId, uint128 newRate) external;\\n\\n    /**\\n     * @notice Withdraws the amount of tokens that are deposited with the yield provider.\\n     * The bonds portion of the position is not affected.\\n     * @param tokenId The tokenId of the position\\n     **/\\n    function withdraw(uint128 tokenId) external;\\n\\n    /**\\n     * @notice Set the address of the position descriptor.\\n     * Only accessible to governance.\\n     * @param positionDescriptor The address of the position descriptor\\n     **/\\n    function setPositionDescriptor(address positionDescriptor) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolsController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPositionAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolsContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"positionsContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLockingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLockingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPositionAmount\",\"type\":\"uint256\"}],\"name\":\"LockdropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"baseAllocations\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Quit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimedAllocations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLockParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLockRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"baseAllocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingDuration\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingDuration\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"previewRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AtlendisLockdrop", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc13e1b5da083b10622ff5b52c9cfa1912f10b1f00000000000000000000000055e4e70a725c1439dac6b9412b71fc8372bd73e9cc8205597c46655e974dc8962e08946779f73491ded5504e8ace905f3427844f00000000000000000000000000000000000000000000000010a741a462780000000000000000000000000000000000000000000000000000000000000013c680000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000008ac7230489e80000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}