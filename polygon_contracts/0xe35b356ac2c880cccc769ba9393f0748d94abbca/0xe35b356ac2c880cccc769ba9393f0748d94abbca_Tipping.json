{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/Tipping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport { ITipping } from \\\"./interfaces/ITipping.sol\\\";\\nimport { MultiAssetSender } from \\\"./libs/MultiAssetSender.sol\\\";\\nimport { FeeCalculator } from \\\"./libs/FeeCalculator.sol\\\";\\nimport { Batchable } from \\\"./libs/Batchable.sol\\\";\\n\\nimport { AssetType, FeeType } from \\\"./enums/IDrissEnums.sol\\\";\\n\\nerror tipping__withdraw__OnlyAdminCanWithdraw();\\n\\n/**\\n * @title Tipping\\n * @author Lennard (lennardevertz)\\n * @custom:contributor Rafa\u0142 Kalinowski <deliriusz.eth@gmail.com>\\n * @notice Tipping is a helper smart contract used for IDriss social media tipping functionality\\n */\\ncontract Tipping is Ownable, ITipping, MultiAssetSender, FeeCalculator, Batchable, IERC165 {\\n    address public contractOwner;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => bool) public admins;\\n\\n    event TipMessage(\\n        address indexed recipientAddress,\\n        string message,\\n        address indexed sender,\\n        address indexed tokenAddress\\n    );\\n\\n    constructor(address _maticUsdAggregator) FeeCalculator(_maticUsdAggregator) {\\n        admins[msg.sender] = true;\\n\\n        FEE_TYPE_MAPPING[AssetType.Coin] = FeeType.Percentage;\\n        FEE_TYPE_MAPPING[AssetType.Token] = FeeType.Percentage;\\n        FEE_TYPE_MAPPING[AssetType.NFT] = FeeType.Constant;\\n        FEE_TYPE_MAPPING[AssetType.ERC1155] = FeeType.Constant;\\n    }\\n\\n    /**\\n     * @notice Send native currency tip, charging a small fee\\n     */\\n    function sendTo(\\n        address _recipient,\\n        uint256, // amount is used only for multicall\\n        string memory _message\\n    ) external payable override {\\n        uint256 msgValue = _MSG_VALUE > 0 ? _MSG_VALUE : msg.value;\\n        (, uint256 paymentValue) = _splitPayment(msgValue, AssetType.Coin);\\n        _sendCoin(_recipient, paymentValue);\\n\\n        emit TipMessage(_recipient, _message, msg.sender, address(0));\\n    }\\n\\n    /**\\n     * @notice Send a tip in ERC20 token, charging a small fee\\n     */\\n    function sendTokenTo(\\n        address _recipient,\\n        uint256 _amount,\\n        address _tokenContractAddr,\\n        string memory _message\\n    ) external payable override {\\n        (, uint256 paymentValue) = _splitPayment(_amount, AssetType.Token);\\n\\n        _sendTokenAssetFrom(_amount, msg.sender, address(this), _tokenContractAddr);\\n        _sendTokenAsset(paymentValue, _recipient, _tokenContractAddr);\\n\\n        emit TipMessage(_recipient, _message, msg.sender, _tokenContractAddr);\\n    }\\n\\n    /**\\n     * @notice Send a tip in ERC721 token, charging a small $ fee\\n     */\\n    function sendERC721To(\\n        address _recipient,\\n        uint256 _tokenId,\\n        address _nftContractAddress,\\n        string memory _message\\n    ) external payable override {\\n        // we use it just to revert when value is too small\\n        uint256 msgValue = _MSG_VALUE > 0 ? _MSG_VALUE : msg.value;\\n        _splitPayment(msgValue, AssetType.NFT);\\n\\n        _sendNFTAsset(_tokenId, msg.sender, _recipient, _nftContractAddress);\\n\\n        emit TipMessage(_recipient, _message, msg.sender, _nftContractAddress);\\n    }\\n\\n    /**\\n     * @notice Send a tip in ERC721 token, charging a small $ fee\\n     */\\n    function sendERC1155To(\\n        address _recipient,\\n        uint256 _assetId,\\n        uint256 _amount,\\n        address _assetContractAddress,\\n        string memory _message\\n    ) external payable override {\\n        // we use it just to revert when value is too small\\n        uint256 msgValue = _MSG_VALUE > 0 ? _MSG_VALUE : msg.value;\\n        _splitPayment(msgValue, AssetType.ERC1155);\\n\\n        _sendERC1155Asset(_assetId, _amount, msg.sender, _recipient, _assetContractAddress);\\n\\n        emit TipMessage(_recipient, _message, msg.sender, _assetContractAddress);\\n    }\\n\\n    /**\\n     * @notice Withdraw native currency transfer fees\\n     */\\n    function withdraw() external override onlyAdminCanWithdraw {\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Failed to withdraw.\\\");\\n    }\\n\\n    modifier onlyAdminCanWithdraw() {\\n        if (admins[msg.sender] != true) {\\n            revert tipping__withdraw__OnlyAdminCanWithdraw();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Withdraw ERC20 transfer fees\\n     */\\n    function withdrawToken(address _tokenContract)\\n        external\\n        override\\n        onlyAdminCanWithdraw\\n    {\\n        IERC20 withdrawTC = IERC20(_tokenContract);\\n        withdrawTC.transfer(msg.sender, withdrawTC.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Add admin with priviledged access\\n     */\\n    function addAdmin(address _adminAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        admins[_adminAddress] = true;\\n    }\\n\\n    /**\\n     * @notice Remove admin\\n     */\\n    function deleteAdmin(address _adminAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        admins[_adminAddress] = false;\\n    }\\n\\n    /**\\n    * @notice This is a function that allows for multicall\\n    * @param _calls An array of inputs for each call.\\n    * @dev calls Batchable::callBatch\\n    */\\n    function batch(bytes[] calldata _calls) external payable {\\n        batchCall(_calls);\\n    }\\n\\n    function isMsgValueOverride(bytes4 _selector) override pure internal returns (bool) {\\n        return\\n            _selector == this.sendTo.selector ||\\n            _selector == this.sendTokenTo.selector ||\\n            _selector == this.sendERC721To.selector ||\\n            _selector == this.sendERC1155To.selector\\n        ;\\n    }\\n\\n    function calculateMsgValueForACall(bytes4 _selector, bytes memory _calldata) override view internal returns (uint256) {\\n        uint256 currentCallPriceAmount;\\n\\n        if (_selector == this.sendTo.selector) {\\n            assembly {\\n                currentCallPriceAmount := mload(add(_calldata, 68))\\n            }\\n        } else if (_selector == this.sendTokenTo.selector) {\\n            currentCallPriceAmount = getPaymentFee(0, AssetType.Token);\\n        } else if (_selector == this.sendTokenTo.selector) {\\n            currentCallPriceAmount = getPaymentFee(0, AssetType.NFT);\\n        } else {\\n            currentCallPriceAmount = getPaymentFee(0, AssetType.ERC1155);\\n        }\\n\\n        return currentCallPriceAmount;\\n    }\\n\\n    /*\\n    * @notice Always reverts. By default Ownable supports renouncing ownership, that is setting owner to address 0.\\n    *         However in this case it would disallow receiving payment fees by anyone.\\n    */\\n    function renounceOwnership() public override view onlyOwner {\\n        revert(\\\"Operation not supported\\\");\\n    }\\n\\n    /**\\n     * @notice ERC165 interface function implementation, listing all supported interfaces\\n     */\\n    function supportsInterface (bytes4 interfaceId) public pure override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId\\n         || interfaceId == type(ITipping).interfaceId;\\n    }\\n}\"\r\n    },\r\n    \"src/contracts/interfaces/ITipping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { AssetType } from \\\"../enums/IDrissEnums.sol\\\";\\n\\ninterface ITipping {\\n    function sendTo(\\n        address _recipient,\\n        uint256 _amount,\\n        string memory _message\\n    ) external payable;\\n\\n    function sendTokenTo(\\n        address _recipient,\\n        uint256 _amount,\\n        address _tokenContractAddr,\\n        string memory _message\\n    ) external payable;\\n\\n    function sendERC721To(\\n        address _recipient,\\n        uint256 _assetId,\\n        address _nftContractAddress,\\n        string memory _message\\n    ) external payable;\\n\\n    function sendERC1155To(\\n        address _recipient,\\n        uint256 _assetId,\\n        uint256 _amount,\\n        address _nftContractAddress,\\n        string memory _message\\n    ) external payable;\\n\\n    function withdraw() external;\\n\\n    function withdrawToken(address _tokenContract) external;\\n\\n    function addAdmin(address _adminAddress) external;\\n\\n    function deleteAdmin(address _adminAddress) external;\\n}\"\r\n    },\r\n    \"src/contracts/libs/MultiAssetSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @title MultiAssetSender\\n * @author Rafa\u0142 Kalinowski <deliriusz.eth@gmail.com>\\n * @notice This is an utility contract for sending different kind of assets\\n * @dev Please note that you should make reentrancy check yourself\\n */\\ncontract MultiAssetSender {\\n\\n    constructor() { }\\n\\n    /**\\n    * @notice Wrapper for sending native Coin via call function\\n    * @dev When using this function please make sure to not send it to anyone, verify the\\n    *      address in IDriss registry\\n    */\\n    function _sendCoin (address _to, uint256 _amount) internal {\\n        (bool sent, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send\\\");\\n    }\\n\\n    /**\\n     * @notice Wrapper for sending single ERC1155 asset \\n     * @dev due to how approval in ERC1155 standard is handled, the smart contract has to ask for permissions to manage\\n     *      ALL tokens \\\"for simplicity\\\"... Hence, it has to be done before calling function that transfers the token\\n     *      to smart contract, and revoked afterwards\\n     */\\n    function _sendERC1155AssetBatch (\\n        uint256[] memory _assetIds,\\n        uint256[] memory _amounts,\\n        address _from,\\n        address _to,\\n        address _contractAddress\\n    ) internal {\\n        IERC1155 nft = IERC1155(_contractAddress);\\n        nft.safeBatchTransferFrom(_from, _to, _assetIds, _amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Wrapper for sending multiple ERC1155 assets\\n     * @dev due to how approval in ERC1155 standard is handled, the smart contract has to ask for permissions to manage\\n     *      ALL tokens \\\"for simplicity\\\"... Hence, it has to be done before calling function that transfers the token\\n     *      to smart contract, and revoked afterwards\\n     */\\n    function _sendERC1155Asset (\\n        uint256 _assetId,\\n        uint256 _amount,\\n        address _from,\\n        address _to,\\n        address _contractAddress\\n    ) internal {\\n        IERC1155 nft = IERC1155(_contractAddress);\\n        nft.safeTransferFrom(_from, _to, _assetId, _amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Wrapper for sending NFT asset\\n     */\\n    function _sendNFTAsset (\\n        uint256 _assetIds,\\n        address _from,\\n        address _to,\\n        address _contractAddress\\n    ) internal {\\n        IERC721 nft = IERC721(_contractAddress);\\n        nft.safeTransferFrom(_from, _to, _assetIds, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Wrapper for sending NFT asset with additional checks and iteraton over an array\\n     */\\n    function _sendNFTAssetBatch (\\n        uint256[] memory _assetIds,\\n        address _from,\\n        address _to,\\n        address _contractAddress\\n    ) internal {\\n        require(_assetIds.length > 0, \\\"Nothing to send\\\");\\n\\n        IERC721 nft = IERC721(_contractAddress);\\n        for (uint256 i = 0; i < _assetIds.length; ++i) {\\n            nft.safeTransferFrom(_from, _to, _assetIds[i], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrapper for sending ERC20 Token asset with additional checks\\n     */\\n    function _sendTokenAsset (\\n        uint256 _amount,\\n        address _to,\\n        address _contractAddress\\n    ) internal {\\n        IERC20 token = IERC20(_contractAddress);\\n\\n        bool sent = token.transfer(_to, _amount);\\n        require(sent, \\\"Failed to transfer token\\\");\\n    }\\n\\n    /**\\n     * @notice Wrapper for sending ERC20 token from specific account with additional checks and iteraton over an array\\n     */\\n    function _sendTokenAssetFrom (\\n        uint256 _amount,\\n        address _from,\\n        address _to,\\n        address _contractAddress\\n    ) internal {\\n        IERC20 token = IERC20(_contractAddress);\\n\\n        bool sent = token.transferFrom(_from, _to, _amount);\\n        require(sent, \\\"Failed to transfer token\\\");\\n    }\\n}\"\r\n    },\r\n    \"src/contracts/enums/IDrissEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nenum AssetType {\\n    Coin,\\n    Token,\\n    NFT,\\n    ERC1155\\n}\\n\\n/**\\n* Percentage - constant percentage, e.g. 1% of the msg.value\\n* PercentageOrConstantMaximum - get msg.value percentage, or constant dollar value, depending on what is bigger\\n* Constant - constant dollar value, e.g. $1 - uses price Oracle\\n*/\\nenum FeeType {\\n    Percentage,\\n    PercentageOrConstantMaximum,\\n    Constant\\n}\"\r\n    },\r\n    \"src/contracts/libs/Batchable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Batchable\\n * @author Rafa\u0142 Kalinowski <deliriusz.eth@gmail.com>\\n * @dev This is BoringBatchable based function with a small twist: because delgatecall passes msg.value\\n *      on each call, it may introduce double spending issue. To avoid that, we handle cases when msg.value matters separately.\\n *      Please note that you'll have to pass msg.value in amount field for native currency per each call\\n *      Additionally, please keep in mind that currently you cannot put payable and nonpayable calls in the same batch -\\n *      - nonpayable functions will revert when receiving money\\n */\\nabstract contract Batchable {\\n    uint256 internal _MSG_VALUE;\\n    uint256 internal constant _BATCH_NOT_ENTERED = 1;\\n    uint256 internal constant _BATCH_ENTERED = 2;\\n    uint256 internal _batchStatus;\\n\\n    error BatchError(bytes innerError);\\n\\n    constructor() {\\n        _batchStatus = _BATCH_NOT_ENTERED;\\n    }\\n\\n    /**\\n    * @notice This function allows batched call to self (this contract).\\n    * @param _calls An array of inputs for each call.\\n    * @dev - it sets _MSG_VALUE variable for a call, if function is payable\\n     *       check if the function is payable is done in your implementation of function `isMsgValueOverride()`\\n     *       and _MSG_VALUE is set based on your `calculateMsgValueForACall()` implementation\\n    */\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is used on the same contract, and there is reentrancy guard in place\\n    function batchCall(bytes[] calldata _calls) internal {\\n        // bacause we already have reentrancy guard for functions, we set second kind of reentrancy guard\\n        require(_batchStatus != _BATCH_ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        uint256 msgValueSentAcc;\\n\\n        _batchStatus = _BATCH_ENTERED;\\n\\n        for (uint256 i = 0; i < _calls.length; i++) {\\n            bool success;\\n            bytes memory result;\\n            bytes memory data = _calls[i];\\n            bytes4 sig;\\n\\n            assembly {\\n                sig := mload(add(data, add(0x20, 0)))\\n            }\\n\\n            // set proper msg.value for payable function, as delegatecall can introduce double spending\\n            if (isMsgValueOverride(sig)) {\\n                uint256 currentCallPriceAmount = calculateMsgValueForACall(sig, data);\\n\\n                _MSG_VALUE = currentCallPriceAmount;\\n                msgValueSentAcc += currentCallPriceAmount;\\n\\n                require (msgValueSentAcc <= msg.value, \\\"Can't send more than msg.value\\\");\\n\\n                (success, result) = address(this).delegatecall(data);\\n\\n                _MSG_VALUE = 0;\\n            } else {\\n                (success, result) = address(this).delegatecall(data);\\n            }\\n\\n            if (!success) {\\n                _getRevertMsg(result);\\n            }\\n        }\\n\\n        _batchStatus = _BATCH_NOT_ENTERED;\\n    }\\n\\n    /**\\n    * @notice This is part of BoringBatchable contract\\n    *         https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol\\n    * @dev Helper function to extract a useful revert message from a failed call.\\n    * If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    */\\n    function _getRevertMsg(bytes memory _returnData) internal pure {\\n        // If the _res length is less than 68, then\\n        // the transaction failed with custom error or silently (without a revert message)\\n        if (_returnData.length < 68) revert BatchError(_returnData);\\n\\n        assembly {\\n        // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        revert(abi.decode(_returnData, (string))); // All that remains is the revert string\\n    }\\n\\n    /**\\n    * @notice Checks if a function is payable, i.e. should _MSG_VALUE be set\\n    * @param _selector function selector\\n    * @dev Write your logic checking if a function is payable, e.g. this.<function-name>.selector == _selector\\n    *      WARNING - if you, or someone else if able to construct the same selector for a malicious function (which is not that hard),\\n    *      the logic may break and the msg.value may be exploited\\n    */\\n    function isMsgValueOverride(bytes4 _selector) virtual pure internal returns (bool);\\n\\n    /**\\n    * @notice Calculates msg.value that should be sent with a call\\n    * @param _selector function selector\\n    * @param _calldata single call encoded data\\n    * @dev You should probably decode function parameters and check what value should be passed\\n    */\\n    function calculateMsgValueForACall(bytes4 _selector, bytes memory _calldata) virtual view internal returns (uint256);\\n}\"\r\n    },\r\n    \"src/contracts/libs/FeeCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { AssetType, FeeType } from \\\"../enums/IDrissEnums.sol\\\";\\n\\n/**\\n * @title FeeCalculator\\n * @author Rafa\u0142 Kalinowski <deliriusz.eth@gmail.com>\\n * @notice This is an utility contract for calculating a fee\\n */\\ncontract FeeCalculator is Ownable {\\n    AggregatorV3Interface internal immutable MATIC_USD_PRICE_FEED;\\n    uint256 public constant PAYMENT_FEE_SLIPPAGE_PERCENT = 5;\\n    uint256 public PAYMENT_FEE_PERCENTAGE = 10;\\n    uint256 public PAYMENT_FEE_PERCENTAGE_DENOMINATOR = 1000;\\n    uint256 public MINIMAL_PAYMENT_FEE = 1;\\n    uint256 public MINIMAL_PAYMENT_FEE_DENOMINATOR = 1;\\n    // you have to pass your desired fee types in a constructor deriving this contract\\n    mapping (AssetType => FeeType) FEE_TYPE_MAPPING;\\n\\n    constructor(address _maticUsdAggregator) {\\n        require(_maticUsdAggregator != address(0), \\\"Address cannot be 0\\\");\\n\\n        MATIC_USD_PRICE_FEED = AggregatorV3Interface(_maticUsdAggregator);\\n    }\\n\\n    /*\\n    * @notice Get current amount of wei in a dollar\\n    * @dev ChainLink officially supports only USD -> MATIC,\\n    *      so we have to convert it back to get current amount of wei in a dollar\\n    */\\n    function _dollarToWei() internal view returns (uint256) {\\n        (,int256 maticPrice,,,) = MATIC_USD_PRICE_FEED.latestRoundData();\\n        require (maticPrice > 0, \\\"Unable to retrieve MATIC price.\\\");\\n\\n        uint256 maticPriceMultiplier = 10**MATIC_USD_PRICE_FEED.decimals();\\n\\n        return(10**18 * maticPriceMultiplier) / uint256(maticPrice);\\n    }\\n\\n    /**\\n     * @notice Calculates payment fee\\n     * @param _value - payment value\\n     * @param _assetType - asset type, required as ERC20 & ERC721 only take minimal fee\\n     * @return fee - processing fee, few percent of slippage is allowed\\n     */\\n    function getPaymentFee(uint256 _value, AssetType _assetType) public view returns (uint256) {\\n        uint256 minimumPaymentFee = _getMinimumFee();\\n        uint256 percentageFee = _getPercentageFee(_value);\\n        FeeType feeType = FEE_TYPE_MAPPING[_assetType];\\n        if (feeType == FeeType.Constant) {\\n            return minimumPaymentFee;\\n        } else if (feeType == FeeType.Percentage) {\\n            return percentageFee;\\n        }\\n\\n        // default case - PercentageOrConstantMaximum\\n        if (percentageFee > minimumPaymentFee) return percentageFee; else return minimumPaymentFee;\\n    }\\n\\n    function _getMinimumFee() internal view returns (uint256) {\\n        return (_dollarToWei() * MINIMAL_PAYMENT_FEE) / MINIMAL_PAYMENT_FEE_DENOMINATOR;\\n    }\\n\\n    function _getPercentageFee(uint256 _value) internal view returns (uint256) {\\n        return (_value * PAYMENT_FEE_PERCENTAGE) / PAYMENT_FEE_PERCENTAGE_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @notice Calculates value of a fee from sent msg.value\\n     * @param _valueToSplit - payment value, taken from msg.value\\n     * @param _assetType - asset type, as there may be different calculation logic for each type\\n     * @return fee - processing fee, few percent of slippage is allowed\\n     * @return value - payment value after substracting fee\\n     */\\n    function _splitPayment(uint256 _valueToSplit, AssetType _assetType) internal view returns (uint256 fee, uint256 value) {\\n        uint256 minimalPaymentFee = _getMinimumFee();\\n        uint256 paymentFee = getPaymentFee(_valueToSplit, _assetType);\\n\\n        // we accept slippage of matic price if fee type is not percentage - it this case we always get % no matter dollar price\\n        if (FEE_TYPE_MAPPING[_assetType] != FeeType.Percentage\\n            && _valueToSplit >= minimalPaymentFee * (100 - PAYMENT_FEE_SLIPPAGE_PERCENT) / 100\\n            && _valueToSplit <= minimalPaymentFee) {\\n            fee = _valueToSplit;\\n        } else {\\n            fee = paymentFee;\\n        }\\n\\n        require (_valueToSplit >= fee, \\\"Value sent is smaller than minimal fee.\\\");\\n\\n        value = _valueToSplit - fee;\\n    }\\n\\n\\n    /**\\n    * @notice adjust payment fee percentage for big native currenct transfers\\n    * @dev Solidity is not good when it comes to handling floats. We use denominator then,\\n    *      e.g. to set payment fee to 1.5% , just pass paymentFee = 15 & denominator = 1000 => 15 / 1000 = 0.015 = 1.5%\\n    */\\n    function changePaymentFeePercentage (uint256 _paymentFeePercentage, uint256 _paymentFeeDenominator) external onlyOwner {\\n        require(_paymentFeePercentage > 0, \\\"Payment fee has to be bigger than 0\\\");\\n        require(_paymentFeeDenominator > 0, \\\"Payment fee denominator has to be bigger than 0\\\");\\n\\n        PAYMENT_FEE_PERCENTAGE = _paymentFeePercentage;\\n        PAYMENT_FEE_PERCENTAGE_DENOMINATOR = _paymentFeeDenominator;\\n    }\\n\\n    /**\\n    * @notice adjust minimal payment fee for all asset transfers\\n    * @dev Solidity is not good when it comes to handling floats. We use denominator then,\\n    *      e.g. to set minimal payment fee to 2.2$ , just pass paymentFee = 22 & denominator = 10 => 22 / 10 = 2.2\\n    */\\n    function changeMinimalPaymentFee (uint256 _minimalPaymentFee, uint256 _paymentFeeDenominator) external onlyOwner {\\n        require(_minimalPaymentFee > 0, \\\"Payment fee has to be bigger than 0\\\");\\n        require(_paymentFeeDenominator > 0, \\\"Payment fee denominator has to be bigger than 0\\\");\\n\\n        MINIMAL_PAYMENT_FEE = _minimalPaymentFee;\\n        MINIMAL_PAYMENT_FEE_DENOMINATOR = _paymentFeeDenominator;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maticUsdAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"innerError\",\"type\":\"bytes\"}],\"name\":\"BatchError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"tipping__withdraw__OnlyAdminCanWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TipMessage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMAL_PAYMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMAL_PAYMENT_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENT_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENT_FEE_PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENT_FEE_SLIPPAGE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_calls\",\"type\":\"bytes[]\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimalPaymentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"changeMinimalPaymentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"changePaymentFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"_assetType\",\"type\":\"uint8\"}],\"name\":\"getPaymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendERC1155To\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendERC721To\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendTokenTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tipping", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab594600376ec9fd91f8e885dadf0ce036862de0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}