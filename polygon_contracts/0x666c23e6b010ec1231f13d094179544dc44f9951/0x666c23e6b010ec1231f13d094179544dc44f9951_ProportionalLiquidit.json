{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Assimilators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IAssimilator.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary Assimilators {\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing Address for address;\\n\\n\\tIAssimilator public constant iAsmltr = IAssimilator(address(0));\\n\\n\\tfunction delegate(\\n\\t\\taddress _callee,\\n\\t\\tbytes memory _data\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(_callee.isContract(), \\\"Assimilators/callee-is-not-a-contract\\\");\\n\\n\\t\\t// solhint-disable-next-line\\n\\t\\t(bool _success, bytes memory returnData_) = _callee.delegatecall(_data);\\n\\n\\t\\t// solhint-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tif eq(_success, 0) {\\n\\t\\t\\t\\trevert(add(returnData_, 0x20), returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn returnData_;\\n\\t}\\n\\n\\tfunction getRate(address _assim) internal view returns (uint256 amount_) {\\n\\t\\tamount_ = IAssimilator(_assim).getRate();\\n\\t}\\n\\n\\tfunction viewRawAmount(\\n\\t\\taddress _assim,\\n\\t\\tint128 _amt\\n\\t) internal view returns (uint256 amount_) {\\n\\t\\tamount_ = IAssimilator(_assim).viewRawAmount(_amt);\\n\\t}\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\tint128 _amount\\n\\t) internal view returns (uint256 amount_) {\\n\\t\\tamount_ = IAssimilator(_assim).viewRawAmountLPRatio(\\n\\t\\t\\t_baseWeight,\\n\\t\\t\\t_quoteWeight,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\t}\\n\\n\\tfunction viewNumeraireAmount(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal view returns (int128 amt_) {\\n\\t\\tamt_ = IAssimilator(_assim).viewNumeraireAmount(_amt);\\n\\t}\\n\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal view returns (int128 amt_, int128 bal_) {\\n\\t\\t(amt_, bal_) = IAssimilator(_assim).viewNumeraireAmountAndBalance(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\t}\\n\\n\\tfunction viewNumeraireBalance(\\n\\t\\taddress _assim\\n\\t) internal view returns (int128 bal_) {\\n\\t\\tbal_ = IAssimilator(_assim).viewNumeraireBalance(address(this));\\n\\t}\\n\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _assim\\n\\t) internal view returns (int128 bal_) {\\n\\t\\tbal_ = IAssimilator(_assim).viewNumeraireBalanceLPRatio(\\n\\t\\t\\t_baseWeight,\\n\\t\\t\\t_quoteWeight,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction intakeRaw(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeRaw.selector,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (int128));\\n\\t}\\n\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_, int128 bal_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeRawAndGetBalance.selector,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\t(amt_, bal_) = abi.decode(delegate(_assim, data), (int128, int128));\\n\\t}\\n\\n\\tfunction intakeNumeraire(\\n\\t\\taddress _assim,\\n\\t\\tint128 _amt\\n\\t) internal returns (uint256 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeNumeraire.selector,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (uint256));\\n\\t}\\n\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\taddress _assim,\\n\\t\\tIntakeNumLpRatioInfo memory info\\n\\t) internal returns (uint256 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeNumeraireLPRatio.selector,\\n\\t\\t\\tinfo.baseWeight,\\n\\t\\t\\tinfo.minBase,\\n\\t\\t\\tinfo.maxBase,\\n\\t\\t\\tinfo.quoteWeight,\\n\\t\\t\\tinfo.minQuote,\\n\\t\\t\\tinfo.maxQuote,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t// _amount\\n\\t\\t\\tinfo.amount\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (uint256));\\n\\t}\\n\\n\\tfunction outputRaw(\\n\\t\\taddress _assim,\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.outputRaw.selector,\\n\\t\\t\\t_dst,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (int128));\\n\\n\\t\\tamt_ = amt_.neg();\\n\\t}\\n\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress _assim,\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_, int128 bal_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.outputRawAndGetBalance.selector,\\n\\t\\t\\t_dst,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\t(amt_, bal_) = abi.decode(delegate(_assim, data), (int128, int128));\\n\\n\\t\\tamt_ = amt_.neg();\\n\\t}\\n\\n\\tfunction outputNumeraire(\\n\\t\\taddress _assim,\\n\\t\\taddress _dst,\\n\\t\\tint128 _amt\\n\\t) internal returns (uint256 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.outputNumeraire.selector,\\n\\t\\t\\t_dst,\\n\\t\\t\\t_amt.abs()\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (uint256));\\n\\t}\\n\\n\\tfunction transferFee(\\n\\t\\taddress _assim,\\n\\t\\tint128 _amt,\\n\\t\\taddress _treasury\\n\\t) internal {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.transferFee.selector,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_treasury\\n\\t\\t);\\n\\t\\tdelegate(_assim, data);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/CurveMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./lib/UnsafeMath64x64.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\n\\nlibrary CurveMath {\\n\\tint128 private constant ONE = 0x10000000000000000;\\n\\tint128 private constant MAX = 0x4000000000000000; // .25 in layman's terms\\n\\tint128 private constant MAX_DIFF = -0x10C6F7A0B5EE;\\n\\tint128 private constant ONE_WEI = 0x12;\\n\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing UnsafeMath64x64 for int128;\\n\\tusing ABDKMath64x64 for uint256;\\n\\n\\t// This is used to prevent stack too deep errors\\n\\tfunction calculateFee(\\n\\t\\tint128 _gLiq,\\n\\t\\tint128[] memory _bals,\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128[] memory _weights\\n\\t) internal view returns (int128 psi_) {\\n\\t\\tint128 _beta = curve.beta;\\n\\t\\tint128 _delta = curve.delta;\\n\\n\\t\\tpsi_ = calculateFee(_gLiq, _bals, _beta, _delta, _weights);\\n\\t}\\n\\n\\tfunction calculateFee(\\n\\t\\tint128 _gLiq,\\n\\t\\tint128[] memory _bals,\\n\\t\\tint128 _beta,\\n\\t\\tint128 _delta,\\n\\t\\tint128[] memory _weights\\n\\t) internal pure returns (int128 psi_) {\\n\\t\\tuint256 _length = _bals.length;\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _ideal = _gLiq.mul(_weights[i]);\\n\\t\\t\\tpsi_ += calculateMicroFee(_bals[i], _ideal, _beta, _delta);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculateMicroFee(\\n\\t\\tint128 _bal,\\n\\t\\tint128 _ideal,\\n\\t\\tint128 _beta,\\n\\t\\tint128 _delta\\n\\t) private pure returns (int128 fee_) {\\n\\t\\tif (_bal < _ideal) {\\n\\t\\t\\tint128 _threshold = _ideal.mul(ONE - _beta);\\n\\n\\t\\t\\tif (_bal < _threshold) {\\n\\t\\t\\t\\tint128 _feeMargin = _threshold - _bal;\\n\\n\\t\\t\\t\\tfee_ = _feeMargin.mul(_delta);\\n\\t\\t\\t\\tfee_ = fee_.div(_ideal);\\n\\n\\t\\t\\t\\tif (fee_ > MAX) fee_ = MAX;\\n\\n\\t\\t\\t\\tfee_ = fee_.mul(_feeMargin);\\n\\t\\t\\t} else fee_ = 0;\\n\\t\\t} else {\\n\\t\\t\\tint128 _threshold = _ideal.mul(ONE + _beta);\\n\\n\\t\\t\\tif (_bal > _threshold) {\\n\\t\\t\\t\\tint128 _feeMargin = _bal - _threshold;\\n\\n\\t\\t\\t\\tfee_ = _feeMargin.mul(_delta);\\n\\t\\t\\t\\tfee_ = fee_.div(_ideal);\\n\\n\\t\\t\\t\\tif (fee_ > MAX) fee_ = MAX;\\n\\n\\t\\t\\t\\tfee_ = fee_.mul(_feeMargin);\\n\\t\\t\\t} else fee_ = 0;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculateTrade(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128[] memory _oBals,\\n\\t\\tint128[] memory _nBals,\\n\\t\\tint128 _inputAmt,\\n\\t\\tuint256 _outputIndex\\n\\t) internal view returns (int128 outputAmt_) {\\n\\t\\toutputAmt_ = -_inputAmt;\\n\\n\\t\\tint128 _lambda = curve.lambda;\\n\\t\\tint128[] memory _weights = curve.weights;\\n\\n\\t\\tint128 _omega = calculateFee(_oGLiq, _oBals, curve, _weights);\\n\\t\\tint128 _psi;\\n\\n\\t\\tfor (uint256 i = 0; i < 32; i++) {\\n\\t\\t\\t_psi = calculateFee(_nGLiq, _nBals, curve, _weights);\\n\\n\\t\\t\\tint128 prevAmount;\\n\\t\\t\\t{\\n\\t\\t\\t\\tprevAmount = outputAmt_;\\n\\t\\t\\t\\toutputAmt_ = _omega < _psi\\n\\t\\t\\t\\t\\t? -(_inputAmt + _omega - _psi)\\n\\t\\t\\t\\t\\t: -(_inputAmt + _lambda.mul(_omega - _psi));\\n\\t\\t\\t\\t// outputAmt_ = _omega < _psi ? -(_inputAmt + _omega - _psi) : -(_inputAmt +_omega - _psi);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (outputAmt_ / 1e13 == prevAmount / 1e13) {\\n\\t\\t\\t\\t_nGLiq = _oGLiq + _inputAmt + outputAmt_;\\n\\n\\t\\t\\t\\t_nBals[_outputIndex] = _oBals[_outputIndex] + outputAmt_;\\n\\n\\t\\t\\t\\tenforceHalts(curve, _oGLiq, _nGLiq, _oBals, _nBals, _weights);\\n\\n\\t\\t\\t\\tenforceSwapInvariant(_oGLiq, _omega, _nGLiq, _psi);\\n\\t\\t\\t\\treturn outputAmt_;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_nGLiq = _oGLiq + _inputAmt + outputAmt_;\\n\\n\\t\\t\\t\\t_nBals[_outputIndex] = _oBals[_outputIndex].add(outputAmt_);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trevert(\\\"Curve/swap-convergence-failed\\\");\\n\\t}\\n\\n\\tfunction calculateLiquidityMembrane(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128[] memory _oBals,\\n\\t\\tint128[] memory _nBals\\n\\t) internal view returns (int128 curves_) {\\n\\t\\tenforceHalts(curve, _oGLiq, _nGLiq, _oBals, _nBals, curve.weights);\\n\\n\\t\\tint128 _omega;\\n\\t\\tint128 _psi;\\n\\n\\t\\t{\\n\\t\\t\\tint128 _beta = curve.beta;\\n\\t\\t\\tint128 _delta = curve.delta;\\n\\t\\t\\tint128[] memory _weights = curve.weights;\\n\\n\\t\\t\\t_omega = calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\\n\\t\\t\\t_psi = calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\\n\\t\\t}\\n\\n\\t\\tint128 _feeDiff = _psi.sub(_omega);\\n\\t\\tint128 _liqDiff = _nGLiq.sub(_oGLiq);\\n\\t\\tint128 _oUtil = _oGLiq.sub(_omega);\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\t\\tint128 _curveMultiplier;\\n\\n\\t\\tif (_totalShells == 0) {\\n\\t\\t\\tcurves_ = _nGLiq.sub(_psi);\\n\\t\\t} else if (_feeDiff >= 0) {\\n\\t\\t\\t_curveMultiplier = _liqDiff.sub(_feeDiff).div(_oUtil);\\n\\t\\t} else {\\n\\t\\t\\t_curveMultiplier = _liqDiff.sub(curve.lambda.mul(_feeDiff));\\n\\n\\t\\t\\t_curveMultiplier = _curveMultiplier.div(_oUtil);\\n\\t\\t}\\n\\n\\t\\tif (_totalShells != 0) {\\n\\t\\t\\tcurves_ = _totalShells.mul(_curveMultiplier);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceSwapInvariant(\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _omega,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128 _psi\\n\\t) private pure {\\n\\t\\tint128 _nextUtil = _nGLiq - _psi;\\n\\n\\t\\tint128 _prevUtil = _oGLiq - _omega;\\n\\n\\t\\tint128 _diff = _nextUtil - _prevUtil;\\n\\n\\t\\trequire(\\n\\t\\t\\t0 < _diff || _diff >= MAX_DIFF,\\n\\t\\t\\t\\\"Curve/swap-invariant-violation\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction enforceHalts(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128[] memory _oBals,\\n\\t\\tint128[] memory _nBals,\\n\\t\\tint128[] memory _weights\\n\\t) private view {\\n\\t\\tuint256 _length = _nBals.length;\\n\\t\\tint128 _alpha = curve.alpha;\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _nIdeal = _nGLiq.mul(_weights[i]);\\n\\n\\t\\t\\tif (_nBals[i] > _nIdeal) {\\n\\t\\t\\t\\tint128 _upperAlpha = ONE + _alpha;\\n\\n\\t\\t\\t\\tint128 _nHalt = _nIdeal.mul(_upperAlpha);\\n\\n\\t\\t\\t\\tif (_nBals[i] > _nHalt) {\\n\\t\\t\\t\\t\\tint128 _oHalt = _oGLiq.mul(_weights[i]).mul(_upperAlpha);\\n\\n\\t\\t\\t\\t\\tif (_oBals[i] < _oHalt) revert(\\\"Curve/upper-halt\\\");\\n\\t\\t\\t\\t\\tif (_nBals[i] - _nHalt > _oBals[i] - _oHalt)\\n\\t\\t\\t\\t\\t\\trevert(\\\"Curve/upper-halt\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint128 _lowerAlpha = ONE - _alpha;\\n\\n\\t\\t\\t\\tint128 _nHalt = _nIdeal.mul(_lowerAlpha);\\n\\n\\t\\t\\t\\tif (_nBals[i] < _nHalt) {\\n\\t\\t\\t\\t\\tint128 _oHalt = _oGLiq.mul(_weights[i]);\\n\\t\\t\\t\\t\\t_oHalt = _oHalt.mul(_lowerAlpha);\\n\\n\\t\\t\\t\\t\\tif (_oBals[i] > _oHalt) revert(\\\"Curve/lower-halt\\\");\\n\\t\\t\\t\\t\\tif (_nHalt - _nBals[i] > _oHalt - _oBals[i])\\n\\t\\t\\t\\t\\t\\trevert(\\\"Curve/lower-halt\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssimilator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IAssimilator {\\n\\tfunction oracleDecimals() external view returns (uint256);\\n\\n\\tfunction tokenDecimals() external view returns (uint256);\\n\\n\\tfunction getRate() external view returns (uint256);\\n\\n\\tfunction intakeRaw(uint256 amount) external returns (int128);\\n\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\tuint256 amount\\n\\t) external returns (int128, int128);\\n\\n\\tfunction intakeNumeraire(int128 amount) external returns (uint256);\\n\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tint128\\n\\t) external returns (uint256);\\n\\n\\tfunction outputRaw(address dst, uint256 amount) external returns (int128);\\n\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (int128, int128);\\n\\n\\tfunction outputNumeraire(\\n\\t\\taddress dst,\\n\\t\\tint128 amount\\n\\t) external returns (uint256);\\n\\n\\tfunction viewRawAmount(int128) external view returns (uint256);\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tint128\\n\\t) external view returns (uint256);\\n\\n\\tfunction viewNumeraireAmount(uint256) external view returns (int128);\\n\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress\\n\\t) external view returns (int128);\\n\\n\\tfunction viewNumeraireBalance(address) external view returns (int128);\\n\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress,\\n\\t\\tuint256\\n\\t) external view returns (int128, int128);\\n\\n\\tfunction transferFee(int128, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICurveFactory {\\n\\tfunction getProtocolFee() external view returns (int128);\\n\\n\\tfunction getProtocolTreasury() external view returns (address);\\n\\n\\tfunction getGlobalFrozenState() external view returns (bool);\\n\\n\\tfunction getFlashableState() external view returns (bool);\\n\\n\\tfunction isPoolGuarded(address pool) external view returns (bool);\\n\\n\\tfunction getPoolGuardAmount(address pool) external view returns (uint256);\\n\\n\\tfunction getPoolCap(address pool) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IOracle {\\n\\tfunction acceptOwnership() external;\\n\\n\\tfunction accessController() external view returns (address);\\n\\n\\tfunction aggregator() external view returns (address);\\n\\n\\tfunction confirmAggregator(address _aggregator) external;\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction getAnswer(uint256 _roundId) external view returns (int256);\\n\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction getTimestamp(uint256 _roundId) external view returns (uint256);\\n\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction phaseAggregators(uint16) external view returns (address);\\n\\n\\tfunction phaseId() external view returns (uint16);\\n\\n\\tfunction proposeAggregator(address _aggregator) external;\\n\\n\\tfunction proposedAggregator() external view returns (address);\\n\\n\\tfunction proposedGetRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction proposedLatestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction setController(address _accessController) external;\\n\\n\\tfunction transferOwnership(address _to) external;\\n\\n\\tfunction version() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n\\t/*\\n\\t * Minimum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n\\t/*\\n\\t * Maximum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromInt(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(x << 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n\\t * rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64-bit integer number\\n\\t */\\n\\tfunction toInt(int128 x) internal pure returns (int64) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int64(x >> 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromUInt(uint256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(int256(x << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n\\t * number rounding down.  Revert on underflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return unsigned 64-bit integer number\\n\\t */\\n\\tfunction toUInt(int128 x) internal pure returns (uint64) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn uint64(uint128(x >> 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n\\t * number rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 128.128-bin fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction from128x128(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = x >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n\\t * number.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 128.128 fixed point number\\n\\t */\\n\\tfunction to128x128(int128 x) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int256(x) << 64;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x + y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction add(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) + y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x - y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sub(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) - y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction mul(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = (int256(x) * y) >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n\\t * number and y is signed 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 256-bit integer number\\n\\t */\\n\\tfunction muli(int128 x, int256 y) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == MIN_64x64) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\ty >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n\\t\\t\\t\\t\\t\\ty <= 0x1000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\treturn -y << 63;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\t\\tx = -x;\\n\\t\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tuint256 absoluteResult = mulu(x, uint256(y));\\n\\t\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x8000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn -int256(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn int256(absoluteResult);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 256-bit integer number\\n\\t */\\n\\tfunction mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (y == 0) return 0;\\n\\n\\t\\t\\trequire(x >= 0);\\n\\n\\t\\t\\tuint256 lo = (uint256(int256(x)) *\\n\\t\\t\\t\\t(y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n\\t\\t\\tuint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n\\t\\t\\trequire(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\thi <<= 64;\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\thi <=\\n\\t\\t\\t\\t\\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n\\t\\t\\t\\t\\t\\tlo\\n\\t\\t\\t);\\n\\t\\t\\treturn hi + lo;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction div(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tint256 result = (int256(x) << 64) / y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divi(int256 x, int256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\tx = -x; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t}\\n\\t\\t\\tuint128 absoluteResult = divuu(uint256(x), uint256(y));\\n\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x80000000000000000000000000000000);\\n\\t\\t\\t\\treturn -int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\t\\treturn int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divu(uint256 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tuint128 result = divuu(x, y);\\n\\t\\t\\trequire(result <= uint128(MAX_64x64));\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate -x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction neg(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn -x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate |x|.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction abs(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn x < 0 ? -x : x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction inv(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != 0);\\n\\t\\t\\tint256 result = int256(0x100000000000000000000000000000000) / x;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction avg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int128((int256(x) + int256(y)) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n\\t * Revert on overflow or in case x * y is negative.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction gavg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 m = int256(x) * int256(y);\\n\\t\\t\\trequire(m >= 0);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tm <\\n\\t\\t\\t\\t\\t0x4000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t);\\n\\t\\t\\treturn int128(sqrtu(uint256(m)));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y uint256 value\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction pow(int128 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tbool negative = x < 0 && y & 1 == 1;\\n\\n\\t\\t\\tuint256 absX = uint128(x < 0 ? -x : x);\\n\\t\\t\\tuint256 absResult;\\n\\t\\t\\tabsResult = 0x100000000000000000000000000000000;\\n\\n\\t\\t\\tif (absX <= 0x10000000000000000) {\\n\\t\\t\\t\\tabsX <<= 63;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x2 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x4 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x8 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\ty >>= 4;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tabsResult >>= 64;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256 absXShift = 63;\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 32;\\n\\t\\t\\t\\t\\tabsXShift -= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 16;\\n\\t\\t\\t\\t\\tabsXShift -= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 8;\\n\\t\\t\\t\\t\\tabsXShift -= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 4;\\n\\t\\t\\t\\t\\tabsXShift -= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x40000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 2;\\n\\t\\t\\t\\t\\tabsXShift -= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x80000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 1;\\n\\t\\t\\t\\t\\tabsXShift -= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuint256 resultShift = 0;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\trequire(absXShift < 64);\\n\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t\\tresultShift += absXShift;\\n\\t\\t\\t\\t\\t\\tif (absResult > 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\t\\tabsResult >>= 1;\\n\\t\\t\\t\\t\\t\\t\\tresultShift += 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\t\\t\\t\\t\\tabsXShift <<= 1;\\n\\t\\t\\t\\t\\tif (absX >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\tabsX >>= 1;\\n\\t\\t\\t\\t\\t\\tabsXShift += 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ty >>= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\trequire(resultShift < 64);\\n\\t\\t\\t\\tabsResult >>= 64 - resultShift;\\n\\t\\t\\t}\\n\\t\\t\\tint256 result = negative ? -int256(absResult) : int256(absResult);\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sqrt(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn int128(sqrtu(uint256(int256(x)) << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction log_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\tint256 msb = 0;\\n\\t\\t\\tint256 xc = x;\\n\\t\\t\\tif (xc >= 0x10000000000000000) {\\n\\t\\t\\t\\txc >>= 64;\\n\\t\\t\\t\\tmsb += 64;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\tint256 result = (msb - 64) << 64;\\n\\t\\t\\tuint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n\\t\\t\\tfor (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n\\t\\t\\t\\tux *= ux;\\n\\t\\t\\t\\tuint256 b = ux >> 255;\\n\\t\\t\\t\\tux >>= 127 + b;\\n\\t\\t\\t\\tresult += bit * int256(b);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction ln(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\tint256(\\n\\t\\t\\t\\t\\t\\t(uint256(int256(log_2(x))) *\\n\\t\\t\\t\\t\\t\\t\\t0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\tuint256 result = 0x80000000000000000000000000000000;\\n\\n\\t\\t\\tif (x & 0x8000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n\\t\\t\\tif (x & 0x800000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n\\t\\t\\tif (x & 0x400000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n\\t\\t\\tif (x & 0x200000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n\\t\\t\\tif (x & 0x100000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n\\t\\t\\tif (x & 0x80000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n\\t\\t\\tif (x & 0x40000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n\\t\\t\\tif (x & 0x20000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n\\t\\t\\tif (x & 0x10000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n\\t\\t\\tif (x & 0x8000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n\\t\\t\\tif (x & 0x800000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n\\t\\t\\tif (x & 0x400000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n\\t\\t\\tif (x & 0x200000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n\\t\\t\\tif (x & 0x100000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n\\t\\t\\tif (x & 0x80000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n\\t\\t\\tif (x & 0x40000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n\\t\\t\\tif (x & 0x20000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n\\t\\t\\tif (x & 0x10000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n\\t\\t\\tif (x & 0x8000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n\\t\\t\\tif (x & 0x4000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n\\t\\t\\tif (x & 0x2000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n\\t\\t\\tif (x & 0x1000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n\\t\\t\\tif (x & 0x800000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n\\t\\t\\tif (x & 0x400000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n\\t\\t\\tif (x & 0x200000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n\\t\\t\\tif (x & 0x100000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n\\t\\t\\tif (x & 0x80000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n\\t\\t\\tif (x & 0x40000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n\\t\\t\\tif (x & 0x20000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n\\t\\t\\tif (x & 0x10000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n\\t\\t\\tif (x & 0x8000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n\\t\\t\\tif (x & 0x4000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n\\t\\t\\tif (x & 0x2000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n\\t\\t\\tif (x & 0x1000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n\\t\\t\\tif (x & 0x800000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n\\t\\t\\tif (x & 0x400000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n\\t\\t\\tif (x & 0x200000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n\\t\\t\\tif (x & 0x100000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n\\t\\t\\tif (x & 0x80000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n\\t\\t\\tif (x & 0x40000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n\\t\\t\\tif (x & 0x20000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n\\t\\t\\tif (x & 0x10000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n\\t\\t\\tif (x & 0x8000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n\\t\\t\\tif (x & 0x4000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n\\t\\t\\tif (x & 0x2000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n\\t\\t\\tif (x & 0x1000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n\\t\\t\\tif (x & 0x800 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n\\t\\t\\tif (x & 0x400 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n\\t\\t\\tif (x & 0x200 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n\\t\\t\\tif (x & 0x100 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n\\t\\t\\tif (x & 0x80 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n\\t\\t\\tif (x & 0x40 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n\\t\\t\\tif (x & 0x20 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n\\t\\t\\tif (x & 0x10 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n\\t\\t\\tif (x & 0x8 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n\\t\\t\\tif (x & 0x4 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n\\t\\t\\tif (x & 0x2 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n\\t\\t\\tif (x & 0x1 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n\\t\\t\\tresult >>= uint256(int256(63 - (x >> 64)));\\n\\t\\t\\trequire(result <= uint256(int256(MAX_64x64)));\\n\\n\\t\\t\\treturn int128(int256(result));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\texp_2(\\n\\t\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\t\\t(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 64.64-bit fixed point number\\n\\t */\\n\\tfunction divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tuint256 result;\\n\\n\\t\\t\\tif (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n\\t\\t\\t\\tresult = (x << 64) / y;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 msb = 192;\\n\\t\\t\\t\\tuint256 xc = x >> 192;\\n\\t\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\t\\tresult = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n\\t\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 hi = result * (y >> 128);\\n\\t\\t\\t\\tuint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 xh = x >> 192;\\n\\t\\t\\t\\tuint256 xl = x << 64;\\n\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\t\\t\\t\\tlo = hi << 128;\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\n\\t\\t\\t\\tassert(xh == hi >> 128);\\n\\n\\t\\t\\t\\tresult += xl / y;\\n\\t\\t\\t}\\n\\n\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\treturn uint128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n\\t * number.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return unsigned 128-bit integer number\\n\\t */\\n\\tfunction sqrtu(uint256 x) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == 0) return 0;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 xx = x;\\n\\t\\t\\t\\tuint256 r = 1;\\n\\t\\t\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 128;\\n\\t\\t\\t\\t\\tr <<= 64;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 64;\\n\\t\\t\\t\\t\\tr <<= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\t\\t\\txx >>= 32;\\n\\t\\t\\t\\t\\tr <<= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\t\\t\\txx >>= 16;\\n\\t\\t\\t\\t\\tr <<= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100) {\\n\\t\\t\\t\\t\\txx >>= 8;\\n\\t\\t\\t\\t\\tr <<= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10) {\\n\\t\\t\\t\\t\\txx >>= 4;\\n\\t\\t\\t\\t\\tr <<= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x8) {\\n\\t\\t\\t\\t\\tr <<= 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\t\\t\\tuint256 r1 = x / r;\\n\\t\\t\\t\\treturn uint128(r < r1 ? r : r1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UnsafeMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary UnsafeMath64x64 {\\n\\t/**\\n\\t * Calculate x * y rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\n\\tfunction us_mul(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tint256 result = (int256(x) * y) >> 64;\\n\\t\\treturn int128(result);\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\n\\tfunction us_div(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tint256 result = (int256(x) << 64) / y;\\n\\t\\treturn int128(result);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/ProportionalLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./Assimilators.sol\\\";\\n\\nimport \\\"./Storage.sol\\\";\\n\\nimport \\\"./lib/UnsafeMath64x64.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\n\\nimport \\\"./CurveMath.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary ProportionalLiquidity {\\n\\tusing ABDKMath64x64 for uint256;\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing UnsafeMath64x64 for int128;\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tint128 public constant ONE = 0x10000000000000000;\\n\\tint128 public constant ONE_WEI = 0x12;\\n\\n\\tfunction proportionalDeposit(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tDepositData memory depositData\\n\\t) external returns (uint256 curves_, uint256[] memory) {\\n\\t\\tint128 __deposit = depositData.deposits.divu(1e18);\\n\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tuint256[] memory deposits_ = new uint256[](_length);\\n\\n\\t\\t(\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128[] memory _oBals\\n\\t\\t) = getGrossLiquidityAndBalancesForDeposit(curve);\\n\\n\\t\\t// Needed to calculate liquidity invariant\\n\\t\\t// (int128 _oGLiqProp, int128[] memory _oBalsProp) = getGrossLiquidityAndBalances(curve);\\n\\n\\t\\t// No liquidity, oracle sets the ratio\\n\\t\\tif (_oGLiq == 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\t// Variable here to avoid stack-too-deep errors\\n\\t\\t\\t\\tint128 _d = __deposit.mul(curve.weights[i]);\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.intakeNumeraire(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\t_d.add(ONE_WEI)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We already have an existing pool ratio\\n\\t\\t\\t// which must be respected\\n\\t\\t\\tint128 _multiplier = __deposit.div(_oGLiq);\\n\\n\\t\\t\\tuint256 _baseWeight = curve.weights[0].mulu(1e18);\\n\\t\\t\\tuint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\tIntakeNumLpRatioInfo memory info;\\n\\t\\t\\t\\tinfo.baseWeight = _baseWeight;\\n\\t\\t\\t\\tinfo.minBase = depositData.minBase;\\n\\t\\t\\t\\tinfo.maxBase = depositData.maxBase;\\n\\t\\t\\t\\tinfo.quoteWeight = _quoteWeight;\\n\\t\\t\\t\\tinfo.minQuote = depositData.minQuote;\\n\\t\\t\\t\\tinfo.maxQuote = depositData.maxQuote;\\n\\t\\t\\t\\tinfo.amount = _oBals[i].mul(_multiplier).add(ONE_WEI);\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.intakeNumeraireLPRatio(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\tinfo\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\n\\t\\tint128 _newShells = __deposit;\\n\\n\\t\\tif (_totalShells > 0) {\\n\\t\\t\\t_newShells = __deposit.mul(_totalShells);\\n\\t\\t\\t_newShells = _newShells.div(_oGLiq);\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\t_newShells > 0,\\n\\t\\t\\t\\\"Proportional Liquidity/can't mint negative amount\\\"\\n\\t\\t);\\n\\t\\tmint(curve, msg.sender, curves_ = _newShells.mulu(1e18));\\n\\n\\t\\treturn (curves_, deposits_);\\n\\t}\\n\\n\\tfunction viewProportionalDeposit(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _deposit\\n\\t) external view returns (uint256 curves_, uint256[] memory) {\\n\\t\\tint128 __deposit = _deposit.divu(1e18);\\n\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\t(\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128[] memory _oBals\\n\\t\\t) = getGrossLiquidityAndBalancesForDeposit(curve);\\n\\n\\t\\tuint256[] memory deposits_ = new uint256[](_length);\\n\\n\\t\\t// No liquidity\\n\\t\\tif (_oGLiq == 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.viewRawAmount(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\t__deposit.mul(curve.weights[i]).add(ONE_WEI)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We already have an existing pool ratio\\n\\t\\t\\t// this must be respected\\n\\t\\t\\tint128 _multiplier = __deposit.div(_oGLiq);\\n\\n\\t\\t\\tuint256 _baseWeight = curve.weights[0].mulu(1e18);\\n\\t\\t\\tuint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n\\t\\t\\t// Deposits into the pool is determined by existing LP ratio\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.viewRawAmountLPRatio(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\t_baseWeight,\\n\\t\\t\\t\\t\\t_quoteWeight,\\n\\t\\t\\t\\t\\t_oBals[i].mul(_multiplier).add(ONE_WEI)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\n\\t\\tint128 _newShells = __deposit;\\n\\n\\t\\tif (_totalShells > 0) {\\n\\t\\t\\t_newShells = __deposit.mul(_totalShells);\\n\\t\\t\\t_newShells = _newShells.div(_oGLiq);\\n\\t\\t}\\n\\n\\t\\tcurves_ = _newShells.mulu(1e18);\\n\\n\\t\\treturn (curves_, deposits_);\\n\\t}\\n\\n\\tfunction proportionalWithdraw(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _withdrawal\\n\\t) external returns (uint256[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\t(, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n\\t\\tuint256[] memory withdrawals_ = new uint256[](_length);\\n\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\t\\tint128 __withdrawal = _withdrawal.divu(1e18);\\n\\n\\t\\tint128 _multiplier = __withdrawal.div(_totalShells);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\twithdrawals_[i] = Assimilators.outputNumeraire(\\n\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t_oBals[i].mul(_multiplier)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tburn(curve, msg.sender, _withdrawal);\\n\\n\\t\\treturn withdrawals_;\\n\\t}\\n\\n\\tfunction viewProportionalWithdraw(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _withdrawal\\n\\t) external view returns (uint256[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\t(, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n\\t\\tuint256[] memory withdrawals_ = new uint256[](_length);\\n\\n\\t\\tint128 _multiplier = _withdrawal.divu(1e18).div(\\n\\t\\t\\tcurve.totalSupply.divu(1e18)\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\twithdrawals_[i] = Assimilators.viewRawAmount(\\n\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t_oBals[i].mul(_multiplier)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn withdrawals_;\\n\\t}\\n\\n\\tfunction getGrossLiquidityAndBalancesForDeposit(\\n\\t\\tStorage.Curve storage curve\\n\\t) internal view returns (int128 grossLiquidity_, int128[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tint128[] memory balances_ = new int128[](_length);\\n\\t\\tuint256 _baseWeight = curve.weights[0].mulu(1e18);\\n\\t\\tuint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _bal = Assimilators.viewNumeraireBalanceLPRatio(\\n\\t\\t\\t\\t_baseWeight,\\n\\t\\t\\t\\t_quoteWeight,\\n\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t);\\n\\n\\t\\t\\tbalances_[i] = _bal;\\n\\t\\t\\tgrossLiquidity_ += _bal;\\n\\t\\t}\\n\\n\\t\\treturn (grossLiquidity_, balances_);\\n\\t}\\n\\n\\tfunction getGrossLiquidityAndBalances(\\n\\t\\tStorage.Curve storage curve\\n\\t) internal view returns (int128 grossLiquidity_, int128[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tint128[] memory balances_ = new int128[](_length);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _bal = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t);\\n\\n\\t\\t\\tbalances_[i] = _bal;\\n\\t\\t\\tgrossLiquidity_ += _bal;\\n\\t\\t}\\n\\n\\t\\treturn (grossLiquidity_, balances_);\\n\\t}\\n\\n\\tfunction burn(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress account,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\tcurve.balances[account] = burnSub(curve.balances[account], amount);\\n\\n\\t\\tcurve.totalSupply = burnSub(curve.totalSupply, amount);\\n\\n\\t\\temit Transfer(msg.sender, address(0), amount);\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress account,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\tuint256 minLock = 1e6;\\n\\t\\tif (curve.totalSupply == 0) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tamount > minLock,\\n\\t\\t\\t\\t\\\"Proportional Liquidity/amount too small!\\\"\\n\\t\\t\\t);\\n\\t\\t\\tuint256 toMintAmt = amount - minLock;\\n\\t\\t\\t// mint to lp provider\\n\\t\\t\\tcurve.totalSupply = mintAdd(curve.totalSupply, toMintAmt);\\n\\t\\t\\tcurve.balances[account] = mintAdd(\\n\\t\\t\\t\\tcurve.balances[account],\\n\\t\\t\\t\\ttoMintAmt\\n\\t\\t\\t);\\n\\t\\t\\temit Transfer(address(0), msg.sender, toMintAmt);\\n\\t\\t\\t// mint to 0 address\\n\\t\\t\\tcurve.totalSupply = mintAdd(curve.totalSupply, minLock);\\n\\t\\t\\tcurve.balances[address(0)] = mintAdd(\\n\\t\\t\\t\\tcurve.balances[address(0)],\\n\\t\\t\\t\\tminLock\\n\\t\\t\\t);\\n\\t\\t\\temit Transfer(address(this), address(0), minLock);\\n\\t\\t} else {\\n\\t\\t\\tcurve.totalSupply = mintAdd(curve.totalSupply, amount);\\n\\t\\t\\tcurve.balances[account] = mintAdd(curve.balances[account], amount);\\n\\t\\t\\temit Transfer(address(0), msg.sender, amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mintAdd(uint256 x, uint256 y) private pure returns (uint256 z) {\\n\\t\\trequire((z = x + y) >= x, \\\"Curve/mint-overflow\\\");\\n\\t}\\n\\n\\tfunction burnSub(uint256 x, uint256 y) private pure returns (uint256 z) {\\n\\t\\trequire((z = x - y) <= x, \\\"Curve/burn-underflow\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./Assimilators.sol\\\";\\n\\ncontract Storage {\\n\\tstruct Curve {\\n\\t\\t// Curve parameters\\n\\t\\tint128 alpha;\\n\\t\\tint128 beta;\\n\\t\\tint128 delta;\\n\\t\\tint128 epsilon;\\n\\t\\tint128 lambda;\\n\\t\\tint128[] weights;\\n\\t\\t// Assets and their assimilators\\n\\t\\tAssimilator[] assets;\\n\\t\\tmapping(address => Assimilator) assimilators;\\n\\t\\t// Oracles to determine the price\\n\\t\\t// Note that 0'th index should always be USDC 1e18\\n\\t\\t// Oracle's pricing should be denominated in Currency/USDC\\n\\t\\tmapping(address => IOracle) oracles;\\n\\t\\t// ERC20 Interface\\n\\t\\tuint256 totalSupply;\\n\\t\\tmapping(address => uint256) balances;\\n\\t\\tmapping(address => mapping(address => uint256)) allowances;\\n\\t}\\n\\n\\tstruct Assimilator {\\n\\t\\taddress addr;\\n\\t\\tuint8 ix;\\n\\t}\\n\\n\\t// Curve parameters\\n\\tCurve public curve;\\n\\n\\t// Ownable\\n\\taddress public owner;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\tuint8 public constant decimals = 18;\\n\\n\\taddress[] public derivatives;\\n\\taddress[] public numeraires;\\n\\taddress[] public reserves;\\n\\n\\t// Curve operational state\\n\\tbool public frozen = false;\\n\\tbool public emergency = false;\\n\\tbool internal notEntered = true;\\n}\\n\"\r\n    },\r\n    \"contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\nstruct OriginSwapData {\\n\\taddress _origin;\\n\\taddress _target;\\n\\tuint256 _originAmount;\\n\\taddress _recipient;\\n\\taddress _curveFactory;\\n}\\n\\nstruct TargetSwapData {\\n\\taddress _origin;\\n\\taddress _target;\\n\\tuint256 _targetAmount;\\n\\taddress _recipient;\\n\\taddress _curveFactory;\\n}\\n\\nstruct SwapInfo {\\n\\tint128 totalAmount;\\n\\tint128 totalFee;\\n\\tint128 amountToUser;\\n\\tint128 amountToTreasury;\\n\\tint128 protocolFeePercentage;\\n\\taddress treasury;\\n\\tICurveFactory curveFactory;\\n}\\n\\nstruct CurveInfo {\\n\\tstring _name;\\n\\tstring _symbol;\\n\\taddress _baseCurrency;\\n\\taddress _quoteCurrency;\\n\\tuint256 _baseWeight;\\n\\tuint256 _quoteWeight;\\n\\tIOracle _baseOracle;\\n\\tIOracle _quoteOracle;\\n\\tuint256 _alpha;\\n\\tuint256 _beta;\\n\\tuint256 _feeAtHalt;\\n\\tuint256 _epsilon;\\n\\tuint256 _lambda;\\n}\\n\\nstruct DepositData {\\n\\tuint256 deposits;\\n\\tuint256 minQuote;\\n\\tuint256 minBase;\\n\\tuint256 maxQuote;\\n\\tuint256 maxBase;\\n}\\n\\nstruct IntakeNumLpRatioInfo {\\n\\tuint256 baseWeight;\\n\\tuint256 minBase;\\n\\tuint256 maxBase;\\n\\tuint256 quoteWeight;\\n\\tuint256 minQuote;\\n\\tuint256 maxQuote;\\n\\tint128 amount;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEI\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProportionalLiquidity", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}