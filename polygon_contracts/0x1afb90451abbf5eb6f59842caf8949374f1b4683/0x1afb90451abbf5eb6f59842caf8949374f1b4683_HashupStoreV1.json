{"SourceCode": "// Sources flattened with hardhat v2.12.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.0\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/LicenseMetadata.sol\r\n// HashUp Contracts V1\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev HashUp implementation of ERC20 Metadata that suits Hashuplicense.\r\n */\r\ncontract LicenseMetadata is Ownable {\r\n\t// License name\r\n\tstring private _name;\r\n\r\n\t// License symbol\r\n\tstring private _symbol;\r\n\r\n\t// License color\r\n\tstring private _color;\r\n\r\n\t// Other Metadata URL\r\n\tstring private _metadataUrl;\r\n\r\n\t/**\r\n\t * @dev Initializes the License Contract and sets\r\n\t * correct color for provided supply and metadata.\r\n\t */\r\n\tconstructor(\r\n\t\tstring memory name_,\r\n\t\tstring memory symbol_,\r\n\t\tstring memory metadataUrl_,\r\n\t\tuint256 totalSupply_\r\n\t) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t\t_metadataUrl = metadataUrl_;\r\n\t\t_color = _getColorForSupply(totalSupply_);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Updates current URL to metadata object that stores configuration of visuals,\r\n\t * descriptions etc. that will appear while browsing on HashUp ecosystem.\r\n\t *\r\n\t * NOTE: We use IPFS by default in HashUp.\r\n\t *\r\n\t * Requirements:\r\n\t * - the caller must be creator\r\n\t */\r\n\tfunction setMetadata(string memory newMetadata) public onlyOwner {\r\n\t\t_metadataUrl = newMetadata;\r\n\t}\r\n\r\n\t/**\r\n\t * NOTE: ERC20 Tokens usually use 18 decimal places but our\r\n\t * CEO said it's stupid and we should use 2 decimals\r\n\t */\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn 2;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the color of license. See {_getColorForSupply}\r\n\t * function for details\r\n\t */\r\n\tfunction color() public view returns (string memory) {\r\n\t\treturn _color;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the license.\r\n\t */\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the license.\r\n\t */\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the URL of other license metadata\r\n\t */\r\n\tfunction metadataUrl() public view returns (string memory) {\r\n\t\treturn _metadataUrl;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns License color for specified supply. There are three types\r\n\t * of licenses based on a totalSupply (numbers without including decimals)\r\n\t * 0 - 133.700 => Gold License\r\n\t * 133.701 - 100 000 000 => Gray License\r\n\t * 100 000 001+ => Custom License\r\n\t *\r\n\t * NOTE: Color doesn't affect License Token logic, it's used for display\r\n\t * purposes so we can simplify token economics visually.\r\n\t */\r\n\tfunction _getColorForSupply(uint256 supply)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (string memory color)\r\n\t{\r\n\t\tif (supply <= 133_700 * 10**decimals()) {\r\n\t\t\treturn \"gold\";\r\n\t\t} else if (supply <= 100_000_000 * 10**decimals()) {\r\n\t\t\treturn \"gray\";\r\n\t\t}\r\n\t\treturn \"custom\";\r\n\t}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/HashupLicense.sol\r\n\r\n// HashUp Contracts V1\r\npragma solidity ^0.8.17;\r\n\r\n\r\n/**\r\n * @dev HashUp profile Contract, used for managing profiles,\r\n * in future we want to use it to sending ERC20 Licenses\r\n * providing only friend name and more\r\n */\r\ncontract HashupLicense is IERC20, LicenseMetadata {\r\n    // Fee to creator on transfer\r\n    uint256 public _creatorFee;\r\n\r\n    // Amount of Licenses gathered from fees\r\n    uint256 private _feeCounter;\r\n\r\n    // HashUp Store contract address\r\n    address private _store;\r\n\r\n    // Mapping address to License balance\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping address to mapping of allowances\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n\r\n    // Total amount of Licenses\r\n    uint256 private _totalSupply;\r\n\r\n    // Whether {transferFrom} is available for users\r\n    bool private _isOpen;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        string memory metadataUrl_,\r\n        uint256 totalSupply_,\r\n        uint256 creatorFee_,\r\n        address store_\r\n    ) LicenseMetadata(name_, symbol_, metadataUrl_, totalSupply_) {\r\n        require(\r\n            creatorFee_ < 100 * 10**feeDecimals(),\r\n            \"HashupLicense: Incorrect fee\"\r\n        );\r\n        _balances[msg.sender] = totalSupply_;\r\n        _totalSupply = totalSupply_;\r\n        _creatorFee = creatorFee_;\r\n        _store = store_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 balance)\r\n    {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns percentage of amount that goes to the\r\n     * creator when transferring Licenses\r\n     */\r\n    function creatorFee() public view returns (uint256) {\r\n        return _creatorFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns sum of of Licenses gathered\r\n     * by creator via transfer fees\r\n     */\r\n    function feeCounter() public view returns (uint256) {\r\n        return _feeCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev Amount of decimals in fee number, its 1 so\r\n     * for example 5 is 0.5%  and 50 is 5%\r\n     */\r\n    function feeDecimals() public pure returns (uint8) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Address of HashUp store that license will\r\n     * be listed on. We save it here so interaction with\r\n     * store (for example sending games to it) doesn't\r\n     * take any fees\r\n     */\r\n    function store() public view returns (address) {\r\n        return _store;\r\n    }\r\n\r\n    /**\r\n     * @dev Address of HashUp store that license will\r\n     * be listed on. We save it here so interaction with\r\n     * store (for example sending games to it) doesn't\r\n     * take any fees\r\n     */\r\n    function setStore(address newStore) public onlyOwner {\r\n        _store = newStore;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores whether transferFrom is blocked,\r\n     * it can be unlocked by admin to enable it for\r\n     * usage in other smart contracts for example DEX\r\n     */\r\n    function isOpen() public view returns (bool) {\r\n        return _isOpen;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 remaining)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_isOpen` to true and enables transferFrom\r\n     *\r\n     * Requirements:\r\n     * - sender must be admin\r\n     */\r\n    function switchSale() public {\r\n        require(\r\n            msg.sender == owner(),\r\n            \"HashupLicense: only admin can enable transferFrom\"\r\n        );\r\n        _isOpen = true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        override\r\n        returns (bool success)\r\n    {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            owner != address(0),\r\n            \"HashupLicense: approve from the zero address\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"HashupLicense: approve to the zero address\"\r\n        );\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Splits value between recipient and License creator\r\n     *\r\n     * NOTE: If sender is store or owner it doesn't count\r\n     * creator fee and gives everything to recipient\r\n     **/\r\n    function calculateFee(uint256 value, address sender)\r\n        public\r\n        view\r\n        returns (uint256 recipientPart, uint256 creatorPart)\r\n    {\r\n        if (sender == _store || sender == owner()) {\r\n            return (value, 0);\r\n        }\r\n        uint256 fee = (value * _creatorFee) / 1000;\r\n        uint256 remaining = value - fee;\r\n\r\n        return (remaining, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev It calls _transferFrom that calculates and sends fee to License creator\r\n     **/\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool success)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev It calls _transferFrom that calculates and sends fee to License creator\r\n     * @inheritdoc IERC20\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public virtual override returns (bool success) {\r\n        require(\r\n            from != address(0),\r\n            \"HashupLicense: transfer from the zero address\"\r\n        );\r\n\r\n        if (!_isOpen) {\r\n            require(\r\n                from == owner() || from == _store,\r\n                \"HashupLicense: transferFrom is closed\"\r\n            );\r\n        }\r\n\r\n        _spendAllowance(from, msg.sender, value);\r\n        _transferFrom(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal transfer from to remove redundance on transfer\r\n     * and transferFrom\r\n     */\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        require(\r\n            _to != address(0),\r\n            \"HashupLicense: transfer to the zero address\"\r\n        );\r\n\r\n        require(\r\n            _balances[_from] >= _value,\r\n            \"HashupLicense: insufficient token balance\"\r\n        );\r\n\r\n        (uint256 recipientPart, uint256 creatorPart) = calculateFee(\r\n            _value,\r\n            _from\r\n        );\r\n\r\n        _balances[_from] -= _value;\r\n        _balances[_to] += recipientPart;\r\n\r\n        _balances[owner()] += creatorPart;\r\n        _feeCounter += creatorPart;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"HashupLicense: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/HashupStoreV1.sol\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n/// @title Hashup Multimarketplace Store\r\n/// @author The name of the author\r\n/// @notice Explain to an end user what this does\r\n/// @dev Explain to a developer any extra details\r\ncontract HashupStoreV1 is\r\n    Initializable,\r\n    PausableUpgradeable,\r\n    OwnableUpgradeable\r\n{\r\n    // Sale consists of price in ERC20 token and percent of sale that goes to marketplace\r\n    struct SaleInformation {\r\n        uint256 price;\r\n        uint256 marketplaceFee;\r\n        bool sale;\r\n    }\r\n\r\n    event Bought(\r\n        address license,\r\n        address marketplace,\r\n        uint256 price,\r\n        uint256 amount,\r\n        address referrer\r\n    );\r\n\r\n    event NewSale(\r\n        address creator,\r\n        address license,\r\n        string symbol,\r\n        string name,\r\n        string color,\r\n        uint256 price,\r\n        string metadata,\r\n        uint256 totalSupply,\r\n        uint256 transferFee,\r\n        uint256 marketplaceFee\r\n    );\r\n\r\n    event PriceChanged(address license, uint256 newPrice);\r\n    \r\n    event Withdrawal(address license, uint256 amount);\r\n\r\n    // Whitelist of addresses that are elgible to take marketplace fee\r\n    mapping(address => bool) private _marketWhitelist;\r\n\r\n    mapping(address => SaleInformation) private _licenseSales;\r\n\r\n    uint256 constant MAX_HASHUP_FEE = 10;\r\n    uint256 constant MAX_MARKETPLACE_FEE = 90;\r\n\r\n    uint256 private _hashupFee;\r\n    address private _paymentToken;\r\n\r\n    function initialize() public initializer {\r\n        _transferOwnership(msg.sender);\r\n        _setHashupFee(10);\r\n        _setPaymentToken(address(0));\r\n    }\r\n\r\n    function setHashupFee(uint256 newHashupFee) public onlyOwner {\r\n        _setHashupFee(newHashupFee);\r\n    }\r\n\r\n    function _setHashupFee(uint256 newHashupFee) internal {\r\n        require(\r\n            newHashupFee <= MAX_HASHUP_FEE,\r\n            \"HashupStore: HashupFee exceeded max limit\"\r\n        );\r\n        _hashupFee = newHashupFee;\r\n    }\r\n\r\n    function getHashupFee() external view returns (uint256) {\r\n        return _hashupFee;\r\n    }\r\n\r\n    function getPaymentToken() external view returns (address) {\r\n        return _paymentToken;\r\n    }\r\n\r\n    function setPaymentToken(address newPaymentToken) public onlyOwner {\r\n        _setPaymentToken(newPaymentToken);\r\n    }\r\n\r\n    function _setPaymentToken(address newPaymentToken) internal {\r\n        _paymentToken = newPaymentToken;\r\n    }\r\n\r\n    // Used to toggle state of Pausable contract\r\n    function togglePause() public onlyOwner {\r\n        if (paused()) {\r\n            _unpause();\r\n        } else {\r\n            _pause();\r\n        }\r\n    }\r\n\r\n    // NOTE: We need to discuss whether we have right to disable whitelist\r\n    function toggleWhitelisted(address marketplace) public onlyOwner {\r\n        _marketWhitelist[marketplace] = !_marketWhitelist[marketplace];\r\n    }\r\n\r\n    modifier onlyWhitelisted(address marketplace) {\r\n        _checkWhitelisted(marketplace);\r\n        _;\r\n    }\r\n\r\n    // Returns whether address is whitelisted marketplace\r\n    function _checkWhitelisted(address marketplace) internal {\r\n        require(\r\n            _marketWhitelist[marketplace] == true,\r\n            \"HashupStore: marketplace must be whitelisted.\"\r\n        );\r\n    }\r\n\r\n    function isWhitelisted(address marketplace) public view returns (bool) {\r\n        return _marketWhitelist[marketplace];\r\n    }\r\n\r\n    modifier onlyLicenseCreator(address License) {\r\n        _checkLicenseCreator(License);\r\n        _;\r\n    }\r\n\r\n    function _checkLicenseCreator(address license) internal view {\r\n        require(\r\n            msg.sender == HashupLicense(license).owner(),\r\n            \"HashupStore: must be License creator\"\r\n        );\r\n    }\r\n\r\n\r\n\r\n    function sendLicenseToStore(\r\n        address license,\r\n        uint256 price,\r\n        uint256 amount,\r\n        uint256 marketplaceFee\r\n    ) public onlyLicenseCreator(license) whenNotPaused {\r\n        require(\r\n            _licenseSales[license].sale == false,\r\n            \"HashupStore: Can't set for sale second time\"\r\n        );\r\n        require(\r\n            marketplaceFee <= MAX_MARKETPLACE_FEE,\r\n            \"HashupStore: Marketplace fee is too high\"\r\n        );\r\n\r\n        HashupLicense licenseToken = HashupLicense(license);\r\n        licenseToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        _licenseSales[license] = SaleInformation(price, marketplaceFee, true);\r\n\r\n        emit NewSale(\r\n            msg.sender,\r\n            license,\r\n            licenseToken.symbol(),\r\n            licenseToken.name(),\r\n            licenseToken.color(),\r\n            price,\r\n            licenseToken.metadataUrl(),\r\n            licenseToken.totalSupply(),\r\n            licenseToken.creatorFee(),\r\n            marketplaceFee\r\n        );\r\n    }\r\n\r\n    function withdrawLicenses(address license, uint256 amount)\r\n        external\r\n        onlyLicenseCreator(license)\r\n        returns (uint256)\r\n    {\r\n        HashupLicense licenseToken = HashupLicense(license);\r\n        uint256 availableAmount = licenseToken.balanceOf(address(this));\r\n\r\n        if (availableAmount >= amount) {\r\n            // Return all licenses\r\n            licenseToken.transfer(msg.sender, amount);\r\n            emit Withdrawal(license, amount);\r\n            return amount;\r\n        } else {\r\n            // Return as much as possible\r\n            licenseToken.transfer(msg.sender, availableAmount);\r\n            emit Withdrawal(license, availableAmount);\r\n            return availableAmount;\r\n        }\r\n    }\r\n\r\n    function getLicensePrice(address license) public view returns (uint256) {\r\n        return _licenseSales[license].price;\r\n    }\r\n\r\n    function getLicenseMarketplaceFee(address license)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _licenseSales[license].marketplaceFee;\r\n    }\r\n\r\n    function changeLicensePrice(address license, uint256 newPrice)\r\n        public\r\n        onlyLicenseCreator(license)\r\n    {\r\n        require(\r\n            _licenseSales[license].sale == true,\r\n            \"HashupStore: License isn't listed in store\"\r\n        );\r\n        _licenseSales[license].price = newPrice;\r\n        emit PriceChanged(license, newPrice);\r\n    }\r\n\r\n    function distributePayment(\r\n        uint256 totalValue,\r\n        uint256 hashupFee,\r\n        uint256 marketplaceFee\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 toCreator,\r\n            uint256 toMarketplace,\r\n            uint256 toHashup\r\n        )\r\n    {\r\n        // Split provided price between HashUp, marketplace and License creator\r\n        uint256 hashupPart = (totalValue * hashupFee) / 100;\r\n        uint256 marketplacePart = (totalValue * marketplaceFee) / 100;\r\n        uint256 creatorPart = totalValue - hashupPart - marketplacePart;\r\n\r\n        return (creatorPart, marketplacePart, hashupPart);\r\n    }\r\n\r\n    function buyLicense(\r\n        address license,\r\n        uint256 amount,\r\n        address marketplace,\r\n        address referrer\r\n    ) public whenNotPaused onlyWhitelisted(marketplace) {\r\n        IERC20 paymentToken = IERC20(_paymentToken);\r\n        HashupLicense licenseToken = HashupLicense(license);\r\n\r\n        require(_licenseSales[license].sale == true, \"HashupStore: License must be listed\");\r\n\r\n        uint256 totalPrice = getLicensePrice(license) * amount;\r\n\r\n        (\r\n            uint256 toCreator,\r\n            uint256 toMarketplace,\r\n            uint256 toHashup\r\n        ) = distributePayment(\r\n                totalPrice,\r\n                _hashupFee,\r\n                getLicenseMarketplaceFee(license)\r\n            );\r\n\r\n        // Send licenses from HashupStore to buyer\r\n        licenseToken.transfer(msg.sender, amount);\r\n\r\n        // Send payment token to creator\r\n        paymentToken.transferFrom(msg.sender, licenseToken.owner(), toCreator);\r\n\r\n        // Send payment token to marketplace\r\n        paymentToken.transferFrom(msg.sender, marketplace, toMarketplace);\r\n\r\n        // Send tokens to HashUp\r\n        paymentToken.transferFrom(msg.sender, owner(), toHashup);\r\n\r\n        emit Bought(license, marketplace, totalPrice, amount, referrer);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeLicensePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHashupFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"}],\"name\":\"getLicenseMarketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"}],\"name\":\"getLicensePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"}],\"name\":\"sendLicenseToStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHashupFee\",\"type\":\"uint256\"}],\"name\":\"setHashupFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPaymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"}],\"name\":\"toggleWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"license\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLicenses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HashupStoreV1", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de16bf275499554c889b81bb3299544a288f05d62c256d0651e78bbcd324aab0"}