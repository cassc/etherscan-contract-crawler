{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PostConstruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @notice Simple contract exposing a modifier used on setup functions\\n/// to prevent them from being called more than once\\n/// @author Solid World DAO\\nabstract contract PostConstruct {\\n    error AlreadyInitialized();\\n\\n    bool private _initialized;\\n\\n    modifier postConstruct() {\\n        if (_initialized) {\\n            revert AlreadyInitialized();\\n        }\\n        _initialized = true;\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SolidStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISolidStaking.sol\\\";\\nimport \\\"./interfaces/rewards/IRewardsController.sol\\\";\\nimport \\\"./PostConstruct.sol\\\";\\nimport \\\"./libraries/GPv2SafeERC20.sol\\\";\\nimport \\\"./compliance/RegulatoryCompliant.sol\\\";\\n\\n/// @author Solid World\\ncontract SolidStaking is ISolidStaking, ReentrancyGuard, Ownable, PostConstruct, RegulatoryCompliant {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /// @dev All stakable lp tokens.\\n    address[] public tokens;\\n\\n    mapping(address => bool) public tokenAdded;\\n\\n    /// @dev Mapping with the staked amount of each account for each token.\\n    /// @dev token => user => amount\\n    mapping(address => mapping(address => uint)) public userStake;\\n\\n    /// @dev token => requires KYC\\n    mapping(address => bool) private kycRequired;\\n\\n    /// @dev Main contract used for interacting with rewards mechanism.\\n    IRewardsController public rewardsController;\\n\\n    /// @dev Address controlling timelocked functions (e.g. KYC requirement changes)\\n    address internal immutable timelockController;\\n\\n    modifier onlyTimelockController() {\\n        if (msg.sender != timelockController) {\\n            revert NotTimelockController(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier validToken(address token) {\\n        if (!tokenAdded[token]) {\\n            revert InvalidTokenAddress(token);\\n        }\\n        _;\\n    }\\n\\n    modifier regulatoryCompliant(address token, address subject) {\\n        if (!isValidCounterparty(subject, kycRequired[token])) {\\n            revert NotRegulatoryCompliant(token, subject);\\n        }\\n        _;\\n    }\\n\\n    modifier notBlacklisted(address subject) {\\n        if (!isValidCounterparty(subject, false)) {\\n            revert Blacklisted(subject);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _verificationRegistry, address _timelockController)\\n        RegulatoryCompliant(_verificationRegistry)\\n    {\\n        timelockController = _timelockController;\\n    }\\n\\n    function setup(IRewardsController _rewardsController, address owner) external postConstruct {\\n        rewardsController = _rewardsController;\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc ISolidStakingOwnerActions\\n    function addToken(address token) external onlyOwner {\\n        if (tokenAdded[token]) {\\n            revert TokenAlreadyAdded(token);\\n        }\\n\\n        tokens.push(token);\\n        tokenAdded[token] = true;\\n\\n        emit TokenAdded(token);\\n    }\\n\\n    /// @inheritdoc ISolidStakingOwnerActions\\n    function setKYCRequired(address token, bool _kycRequired) external onlyTimelockController {\\n        kycRequired[token] = _kycRequired;\\n\\n        emit KYCRequiredSet(token, _kycRequired);\\n    }\\n\\n    function setVerificationRegistry(address _verificationRegistry) public override onlyOwner {\\n        super.setVerificationRegistry(_verificationRegistry);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function stake(address token, uint amount)\\n        external\\n        nonReentrant\\n        validToken(token)\\n        regulatoryCompliant(token, msg.sender)\\n    {\\n        _stake(token, amount, msg.sender);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function stake(\\n        address token,\\n        uint amount,\\n        address recipient\\n    )\\n        external\\n        nonReentrant\\n        validToken(token)\\n        notBlacklisted(msg.sender)\\n        regulatoryCompliant(token, recipient)\\n    {\\n        _stake(token, amount, recipient);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function withdraw(address token, uint amount) external nonReentrant validToken(token) {\\n        _withdraw(token, amount);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function withdrawStakeAndClaimRewards(address token, uint amount)\\n        external\\n        nonReentrant\\n        validToken(token)\\n        regulatoryCompliant(token, msg.sender)\\n    {\\n        _withdraw(token, amount);\\n        _claimRewards(token);\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function getTimelockController() external view returns (address) {\\n        return timelockController;\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function balanceOf(address token, address account) external view validToken(token) returns (uint) {\\n        return _balanceOf(token, account);\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function totalStaked(address token) external view validToken(token) returns (uint) {\\n        return _totalStaked(token);\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function getTokens() external view returns (address[] memory _tokens) {\\n        _tokens = tokens;\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function isKYCRequired(address token) external view returns (bool) {\\n        return kycRequired[token];\\n    }\\n\\n    function _balanceOf(address token, address account) internal view returns (uint) {\\n        return userStake[token][account];\\n    }\\n\\n    function _totalStaked(address token) internal view returns (uint) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _stake(\\n        address token,\\n        uint amount,\\n        address recipient\\n    ) internal {\\n        uint oldUserStake = _balanceOf(token, recipient);\\n        uint oldTotalStake = _totalStaked(token);\\n\\n        userStake[token][recipient] = oldUserStake + amount;\\n\\n        rewardsController.handleUserStakeChanged(token, recipient, oldUserStake, oldTotalStake);\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Stake(recipient, token, amount);\\n    }\\n\\n    function _withdraw(address token, uint amount) internal {\\n        uint oldUserStake = _balanceOf(token, msg.sender);\\n        uint oldTotalStake = _totalStaked(token);\\n\\n        userStake[token][msg.sender] = oldUserStake - amount;\\n\\n        rewardsController.handleUserStakeChanged(token, msg.sender, oldUserStake, oldTotalStake);\\n\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, token, amount);\\n    }\\n\\n    function _claimRewards(address token) internal {\\n        address[] memory assets = new address[](1);\\n        assets[0] = token;\\n        rewardsController.claimAllRewardsOnBehalf(assets, msg.sender, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compliance/RegulatoryCompliant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/compliance/IRegulatoryCompliant.sol\\\";\\nimport \\\"../interfaces/compliance/IVerificationRegistry.sol\\\";\\n\\n/// @author Solid World\\n/// @notice A contract that can integrate a verification registry, and offer a uniform way to\\n/// validate counterparties against the current registry.\\n/// @dev Function restrictions should be implemented by derived contracts.\\nabstract contract RegulatoryCompliant is IRegulatoryCompliant {\\n    address private verificationRegistry;\\n\\n    modifier validVerificationRegistry(address _verificationRegistry) {\\n        if (_verificationRegistry == address(0)) {\\n            revert InvalidVerificationRegistry();\\n        }\\n\\n        _;\\n    }\\n\\n    constructor(address _verificationRegistry) validVerificationRegistry(_verificationRegistry) {\\n        _setVerificationRegistry(_verificationRegistry);\\n    }\\n\\n    function setVerificationRegistry(address _verificationRegistry)\\n        public\\n        virtual\\n        validVerificationRegistry(_verificationRegistry)\\n    {\\n        _setVerificationRegistry(_verificationRegistry);\\n    }\\n\\n    function getVerificationRegistry() public view returns (address) {\\n        return verificationRegistry;\\n    }\\n\\n    /// @inheritdoc IRegulatoryCompliant\\n    function isValidCounterparty(address counterparty, bool _kycRequired) public view returns (bool) {\\n        IVerificationRegistry registry = IVerificationRegistry(verificationRegistry);\\n        if (_kycRequired) {\\n            return registry.isVerifiedAndNotBlacklisted(counterparty);\\n        }\\n\\n        return !registry.isBlacklisted(counterparty);\\n    }\\n\\n    function _setVerificationRegistry(address _verificationRegistry) internal {\\n        verificationRegistry = _verificationRegistry;\\n\\n        emit VerificationRegistryUpdated(_verificationRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISolidStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"./staking/ISolidStakingOwnerActions.sol\\\";\\nimport \\\"./staking/ISolidStakingEvents.sol\\\";\\nimport \\\"./staking/ISolidStakingActions.sol\\\";\\nimport \\\"./staking/ISolidStakingViewActions.sol\\\";\\nimport \\\"./staking/ISolidStakingErrors.sol\\\";\\n\\n/// @title The interface for the Solid World staking contract\\n/// @notice The staking contract facilitates (un)staking of ERC20 tokens\\n/// @author Solid World DAO\\n/// @dev The interface is broken up into smaller pieces\\ninterface ISolidStaking is\\n    ISolidStakingActions,\\n    ISolidStakingEvents,\\n    ISolidStakingOwnerActions,\\n    ISolidStakingViewActions,\\n    ISolidStakingErrors\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/compliance/IBlacklist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface IBlacklist {\\n    error InvalidBlacklister();\\n    error BlacklistingNotAuthorized(address caller);\\n\\n    event BlacklisterUpdated(address indexed oldBlacklister, address indexed newBlacklister);\\n    event Blacklisted(address indexed subject);\\n    event UnBlacklisted(address indexed subject);\\n\\n    function setBlacklister(address newBlacklister) external;\\n\\n    function blacklist(address subject) external;\\n\\n    function unBlacklist(address subject) external;\\n\\n    function getBlacklister() external view returns (address);\\n\\n    function isBlacklisted(address subject) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/compliance/IKYCRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface IKYCRegistry {\\n    error InvalidVerifier();\\n    error VerificationNotAuthorized(address caller);\\n\\n    event VerifierUpdated(address indexed oldVerifier, address indexed newVerifier);\\n    event Verified(address indexed subject);\\n    event VerificationRevoked(address indexed subject);\\n\\n    function setVerifier(address newVerifier) external;\\n\\n    function registerVerification(address subject) external;\\n\\n    function revokeVerification(address subject) external;\\n\\n    function getVerifier() external view returns (address);\\n\\n    function isVerified(address subject) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/compliance/IRegulatoryCompliant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface IRegulatoryCompliant {\\n    error InvalidVerificationRegistry();\\n\\n    event VerificationRegistryUpdated(address indexed verificationRegistry);\\n\\n    function setVerificationRegistry(address _verificationRegistry) external;\\n\\n    function getVerificationRegistry() external view returns (address);\\n\\n    /// @return true if the counterparty is compliant according to the current verification registry,\\n    /// taking into account the KYC requirement.\\n    function isValidCounterparty(address counterparty, bool _kycRequired) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/compliance/IVerificationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IBlacklist.sol\\\";\\nimport \\\"./IKYCRegistry.sol\\\";\\n\\n/// @author Solid World\\ninterface IVerificationRegistry is IBlacklist, IKYCRegistry {\\n    function isVerifiedAndNotBlacklisted(address subject) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/rewards/IEACAggregatorProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\ninterface IEACAggregatorProxy {\\n    function decimals() external view returns (uint8);\\n\\n    function latestAnswer() external view returns (int);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/rewards/IRewardsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"../../libraries/RewardsDataTypes.sol\\\";\\n\\n/// @title IRewardsController\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Controller.\\ninterface IRewardsController is IRewardsDistributor {\\n    error UnauthorizedClaimer(address claimer, address user);\\n    error NotSolidStaking(address sender);\\n    error InvalidRewardOracle(address reward, address rewardOracle);\\n\\n    /// @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /// @dev Emitted when rewards are claimed\\n    /// @param user The address of the user rewards has been claimed on behalf of\\n    /// @param reward The address of the token reward is claimed\\n    /// @param to The address of the receiver of the rewards\\n    /// @param claimer The address of the claimer\\n    /// @param amount The amount of rewards claimed\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint amount\\n    );\\n\\n    /// @dev Emitted when the reward oracle is updated\\n    /// @param reward The address of the token reward\\n    /// @param rewardOracle The address of oracle\\n    event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    event RewardsVaultUpdated(address indexed rewardsVault);\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    event SolidStakingUpdated(address indexed solidStaking);\\n\\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    function setClaimer(address user, address claimer) external;\\n\\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n    /// This check is enforced for integrators to be able to show incentives at\\n    /// the current Aave UI without the need to setup an external price registry\\n    /// @param reward The address of the reward to set the price aggregator\\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    function setRewardsVault(address rewardsVault) external;\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    function setSolidStaking(address solidStaking) external;\\n\\n    /// @dev Get the price aggregator oracle address\\n    /// @param reward The address of the reward\\n    /// @return The price oracle of the reward\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /// @return Account that secures ERC20 rewards.\\n    function getRewardsVault() external view returns (address);\\n\\n    /// @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n    /// @param user The address of the user\\n    /// @return The claimer address\\n    function getClaimer(address user) external view returns (address);\\n\\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n    /// @param config The assets configuration input, the list of structs contains the following fields:\\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n    ///   uint256 totalStaked: The total amount staked of the asset\\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n    ///   address asset: The asset address to incentivize\\n    ///   address reward: The reward token address\\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\\n\\n    /// @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n    /// @param asset The incentivized asset address\\n    /// @param user The address of the user whose asset balance has changed\\n    /// @param oldUserStake The amount of assets staked by the user, prior to stake change\\n    /// @param oldTotalStaked The total amount staked of the asset, prior to stake change\\n    function handleUserStakeChanged(\\n        address asset,\\n        address user,\\n        uint oldUserStake,\\n        uint oldTotalStaked\\n    ) external;\\n\\n    /// @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n    /// be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param user The address to check and claim rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsToSelf(address[] calldata assets)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/rewards/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title IRewardsDistributor\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Distributor.\\ninterface IRewardsDistributor {\\n    error NotEmissionManager(address sender);\\n    error InvalidInput();\\n    error InvalidAssetDecimals(address asset);\\n    error IndexOverflow(uint newIndex);\\n    error DistributionNonExistent(address asset, address reward);\\n\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    error UpdateDistributionNotApplicable(address asset, address reward);\\n\\n    /// @dev Emitted when the configuration of the rewards of an asset is updated.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param oldEmission The old emissions per second value of the reward distribution\\n    /// @param newEmission The new emissions per second value of the reward distribution\\n    /// @param oldDistributionEnd The old end timestamp of the reward distribution\\n    /// @param newDistributionEnd The new end timestamp of the reward distribution\\n    /// @param assetIndex The index of the asset distribution\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint oldEmission,\\n        uint newEmission,\\n        uint oldDistributionEnd,\\n        uint newDistributionEnd,\\n        uint assetIndex\\n    );\\n\\n    /// @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param user The address of the user that rewards are accrued on behalf of\\n    /// @param assetIndex The index of the asset distribution\\n    /// @param userIndex The index of the asset distribution on behalf of the user\\n    /// @param rewardsAccrued The amount of rewards accrued\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint assetIndex,\\n        uint userIndex,\\n        uint rewardsAccrued\\n    );\\n\\n    /// @dev Emitted when the emission manager address is updated.\\n    /// @param oldEmissionManager The address of the old emission manager\\n    /// @param newEmissionManager The address of the new emission manager\\n    event EmissionManagerUpdated(address indexed oldEmissionManager, address indexed newEmissionManager);\\n\\n    /// @dev Sets the end date for the distribution\\n    /// @param asset The asset to incentivize\\n    /// @param reward The reward token that incentives the asset\\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /// @dev Sets the emission per second of a set of reward distributions\\n    /// @param asset The asset is being incentivized\\n    /// @param rewards List of reward addresses are being distributed\\n    /// @param newEmissionsPerSecond List of new reward emissions per second\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /// @dev Updates weekly reward distributions\\n    /// @param assets List of incentivized assets getting updated\\n    /// @param rewards List of reward tokens getting updated\\n    /// @param rewardAmounts List of carbon reward amounts getting distributed\\n    function updateCarbonRewardDistribution(\\n        address[] calldata assets,\\n        address[] calldata rewards,\\n        uint[] calldata rewardAmounts\\n    ) external;\\n\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return true, if distribution can be updated for the asset - reward pair\\n    function canUpdateCarbonRewardDistribution(address asset, address reward) external view returns (bool);\\n\\n    /// @dev Gets the end date for the distribution\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The timestamp with the end of the distribution, in unix time format\\n    function getDistributionEnd(address asset, address reward) external view returns (uint);\\n\\n    /// @dev Returns the index of a user on a reward distribution\\n    /// @param user Address of the user\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The current user asset index, not including new distributions\\n    function getUserIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns the configuration of the distribution reward for a certain asset\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The index of the asset distribution\\n    /// @return The emission per second of the reward distribution\\n    /// @return The timestamp of the last update of the index\\n    /// @return The timestamp of the distribution end\\n    function getRewardDistribution(address asset, address reward)\\n        external\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        );\\n\\n    /// @dev Returns the list of available reward token addresses of an incentivized asset\\n    /// @param asset The incentivized asset\\n    /// @return List of rewards addresses of the input asset\\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n    /// @dev Returns the list of available reward addresses\\n    /// @return List of rewards supported in this contract\\n    function getAllRewards() external view returns (address[] memory);\\n\\n    /// @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return Unclaimed rewards, not including new distributions\\n    function getAccruedRewardAmountForUser(address user, address reward) external view returns (uint);\\n\\n    /// @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return The rewards amount\\n    function getUnclaimedRewardAmountForUserAndAssets(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @return The list of reward addresses\\n    /// @return The list of unclaimed amount of rewards\\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (address[] memory, uint[] memory);\\n\\n    /// @dev Returns the decimals of an asset to calculate the distribution delta\\n    /// @param asset The address to retrieve decimals\\n    /// @return The decimals of an underlying asset\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /// @dev Returns the address of the emission manager\\n    /// @return The address of the EmissionManager\\n    function getEmissionManager() external view returns (address);\\n\\n    /// @dev Updates the address of the emission manager\\n    /// @param emissionManager The address of the new EmissionManager\\n    function setEmissionManager(address emissionManager) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/ISolidStakingActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissionless state-mutating actions\\n/// @notice Contains state-mutating functions that can be called by anyone\\n/// @author Solid World DAO\\ninterface ISolidStakingActions {\\n    /// @dev Stakes tokens for the caller into the staking contract\\n    /// @param token the token to stake\\n    /// @param amount the amount to stake\\n    function stake(address token, uint amount) external;\\n\\n    /// @notice msg.sender stakes tokens for the recipient into the staking contract\\n    /// @dev funds are subtracted from msg.sender, stake is credited to recipient\\n    /// @param token the token to stake\\n    /// @param amount the amount to stake\\n    /// @param recipient the recipient of the stake\\n    function stake(\\n        address token,\\n        uint amount,\\n        address recipient\\n    ) external;\\n\\n    /// @dev Withdraws tokens for the caller from the staking contract\\n    /// @param token the token to withdraw\\n    /// @param amount the amount to withdraw\\n    function withdraw(address token, uint amount) external;\\n\\n    /// @dev Withdraws tokens for the caller from the staking contract\\n    /// @dev Claims all rewards of the incentivized `token` for the caller\\n    /// @param token the token to withdraw\\n    /// @param amount the amount to withdraw\\n    function withdrawStakeAndClaimRewards(address token, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/ISolidStakingErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Errors thrown by the staking contract\\n/// @author Solid World DAO\\ninterface ISolidStakingErrors {\\n    error InvalidTokenAddress(address token);\\n    error TokenAlreadyAdded(address token);\\n    error NotRegulatoryCompliant(address token, address subject);\\n    error Blacklisted(address subject);\\n    error NotTimelockController(address caller);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/ISolidStakingEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Events emitted by the staking contract\\n/// @notice Contains all events emitted by the staking contract\\n/// @author Solid World DAO\\ninterface ISolidStakingEvents {\\n    /// @dev Emitted when an account stakes tokens\\n    /// @param account the account that staked tokens\\n    /// @param token the token that was staked\\n    /// @param amount the amount of tokens that were staked\\n    event Stake(address indexed account, address indexed token, uint indexed amount);\\n\\n    /// @dev Emitted when an account un-stakes tokens\\n    /// @param account the account that withdrew tokens\\n    /// @param token the token that was withdrawn\\n    /// @param amount the amount of tokens that were withdrawn\\n    event Withdraw(address indexed account, address indexed token, uint indexed amount);\\n\\n    /// @dev Emitted when a new token is added to the staking contract\\n    /// @param token the token that was added\\n    event TokenAdded(address indexed token);\\n\\n    event KYCRequiredSet(address indexed token, bool indexed kycRequired);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/ISolidStakingOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissioned staking actions\\n/// @notice Contains staking methods may only be called by the owner\\n/// @author Solid World DAO\\ninterface ISolidStakingOwnerActions {\\n    /// @dev Adds a new token to the staking contract\\n    /// @param token the token to add\\n    function addToken(address token) external;\\n\\n    /// @param token to set KYC requirement for\\n    /// @param kycRequired whether the specified token requires msg.sender to be KYCed before staking\\n    function setKYCRequired(address token, bool kycRequired) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/ISolidStakingViewActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissionless view actions\\n/// @notice Contains view functions that can be called by anyone\\n/// @author Solid World DAO\\ninterface ISolidStakingViewActions {\\n    /// @dev Computes the amount of tokens that the `account` has staked\\n    /// @param token the token to check\\n    /// @param account the account to check\\n    /// @return the amount of `token` tokens that the `account` has staked\\n    function balanceOf(address token, address account) external view returns (uint);\\n\\n    /// @dev Computes the total amount of tokens that have been staked\\n    /// @param token the token to check\\n    /// @return the total amount of `token` tokens that have been staked\\n    function totalStaked(address token) external view returns (uint);\\n\\n    /// @dev Returns the list of tokens that can be staked\\n    /// @return the list of tokens that can be staked\\n    function getTokens() external view returns (address[] memory);\\n\\n    /// @return whether the specified token requires msg.sender to be KYCed before staking\\n    function isKYCRequired(address token) external view returns (bool);\\n\\n    /// @return The address controlling timelocked functions (e.g. KYC requirement changes)\\n    function getTimelockController() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GPv2SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/RewardsDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/rewards/IEACAggregatorProxy.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct DistributionConfig {\\n        uint88 emissionPerSecond;\\n        uint totalStaked;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        IEACAggregatorProxy rewardOracle;\\n    }\\n\\n    struct AssetStakedAmounts {\\n        address asset;\\n        uint userStake;\\n        uint totalStaked;\\n    }\\n\\n    struct AssetData {\\n        mapping(address => RewardDistribution) rewardDistribution;\\n        mapping(uint128 => address) availableRewards;\\n        uint128 availableRewardsCount;\\n        uint8 decimals;\\n    }\\n\\n    struct RewardDistribution {\\n        uint104 index;\\n        uint88 emissionPerSecond;\\n        uint32 lastUpdateTimestamp;\\n        uint32 distributionEnd;\\n        mapping(address => UserReward) userReward;\\n    }\\n\\n    struct UserReward {\\n        uint104 index;\\n        uint128 accrued;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelockController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerificationRegistry\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"NotRegulatoryCompliant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotTimelockController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyAdded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"kycRequired\",\"type\":\"bool\"}],\"name\":\"KYCRequiredSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verificationRegistry\",\"type\":\"address\"}],\"name\":\"VerificationRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelockController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerificationRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isKYCRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_kycRequired\",\"type\":\"bool\"}],\"name\":\"isValidCounterparty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsController\",\"outputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_kycRequired\",\"type\":\"bool\"}],\"name\":\"setKYCRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRegistry\",\"type\":\"address\"}],\"name\":\"setVerificationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"_rewardsController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakeAndClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SolidStaking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000db823fb6bd6eaf6d08373b3b8b7884b2761e987b000000000000000000000000665c5429c2a1a965e69c372b1baed76d2edb377f", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": ""}