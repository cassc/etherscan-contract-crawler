{"SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \nlibrary ArrayUtils {\n    function guardedArrayReplace(bytes memory array, bytes memory desired, bytes memory mask)\n        internal\n        pure\n    {\n        require(array.length == desired.length);\n        require(array.length == mask.length);\n\n        uint words = array.length / 0x20;\n        uint index = words * 0x20;\n        assert(index / 0x20 == words);\n        uint i;\n\n        for (i = 0; i < words; i++) {\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\n            assembly {\n                let commonIndex := mul(0x20, add(1, i))\n                let maskValue := mload(add(mask, commonIndex))\n                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\n            }\n        }\n\n        /* Deal with the last section of the byte array. */\n        if (words > 0) {\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\n            i = words;\n            assembly {\n                let commonIndex := mul(0x20, add(1, i))\n                let maskValue := mload(add(mask, commonIndex))\n                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\n            }\n        } else {\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\n            for (i = index; i < array.length; i++) {\n                array[i] = ((mask[i] ^ 0xff) & array[i]) | (mask[i] & desired[i]);\n            }\n        }\n    }\n\n    /**\n     * Test if two arrays are equal\n     * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\n     * \n     * @dev Arrays must be of equal length, otherwise will return false\n     * @param a First array\n     * @param b Second array\n     * @return Whether or not all bytes in the arrays are equal\n     */\n    function arrayEq(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            let length := mload(a)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(b))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(a, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(b, 0x20)\n                // the next line is the loop condition:\n                // while(uint(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    /**\n     * Unsafe write byte array into a memory location\n     *\n     * @param index Memory location\n     * @param source Byte array to write\n     * @return End memory index\n     */\n    function unsafeWriteBytes(uint index, bytes memory source)\n        internal\n        pure\n        returns (uint)\n    {\n        if (source.length > 0) {\n            assembly {\n                let length := mload(source)\n                let end := add(source, add(0x20, length))\n                let arrIndex := add(source, 0x20)\n                let tempIndex := index\n                for { } eq(lt(arrIndex, end), 1) {\n                    arrIndex := add(arrIndex, 0x20)\n                    tempIndex := add(tempIndex, 0x20)\n                } {\n                    mstore(tempIndex, mload(arrIndex))\n                }\n                index := add(index, length)\n            }\n        }\n        return index;\n    }\n\n    /**\n     * Unsafe write address into a memory location\n     *\n     * @param index Memory location\n     * @param source Address to write\n     * @return End memory index\n     */\n    function unsafeWriteAddress(uint index, address source)\n        internal\n        pure\n        returns (uint)\n    {\n        uint conv = uint(uint160(source)) << 0x60;\n        assembly {\n            mstore(index, conv)\n            index := add(index, 0x14)\n        }\n        return index;\n    }\n\n    /**\n     * Unsafe write uint into a memory location\n     *\n     * @param index Memory location\n     * @param source uint to write\n     * @return End memory index\n     */\n    function unsafeWriteUint(uint index, uint source)\n        internal\n        pure\n        returns (uint)\n    {\n        assembly {\n            mstore(index, source)\n            index := add(index, 0x20)\n        }\n        return index;\n    }\n\n    /**\n     * Unsafe write uint8 into a memory location\n     *\n     * @param index Memory location\n     * @param source uint8 to write\n     * @return End memory index\n     */\n    function unsafeWriteUint8(uint index, uint8 source)\n        internal\n        pure\n        returns (uint)\n    {\n        assembly {\n            mstore8(index, source)\n            index := add(index, 0x1)\n        }\n        return index;\n    }\n\n}\n\n// \ncontract OrderManager is Ownable {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    mapping(bytes32 => Order) public orders;\n\n    mapping(bytes32 => bool) public cancelledOrFinalized;\n    mapping(bytes32 => bool) public existOrder;\n\n    mapping(bytes32 => mapping(bytes32 => Offer)) public offers;\n    mapping(bytes32 => mapping(bytes32 => bool)) public existOffer;\n\n    address[] public marketplaceRoyaltyAddress = [address(0), address(0)];\n    uint256[] public marketplaceRoyaltyFee = [0, 0];\n\n    address public verifyWallet;\n\n    uint256 constant BASE_BIPS = 10_000; // 100: 1% \n\n    enum OrderState {\n        OPEN,\n        FINISHED,\n        NOT_STARTED\n    }\n\n    struct Order {\n        uint256 _contractType;\n        address _creator;\n        address _nftAddress;\n        uint256 _tokenId;\n        uint256 _amount;\n        uint256 _price;\n        address _currencyTokenAddress;\n        uint256 _startTime;\n        uint256 _endTime;\n        uint256 _orderType;\n        address _buyer;\n        uint256 _buyPrice;\n    }\n\n    struct Offer {\n        address _offerAddress;\n        uint256 _offerPrice;\n        uint256 _offerAmount;\n        address _offerCurrencyTokenAddress;\n        uint256 _offerTime;\n    }\n\n    struct Token {\n        uint256 _contractType;\n        address _address;\n        uint256 _tokenId;\n    }\n\n    event NFTY_OrderCreated(Order);\n    event NFTY_OrderNewBid(Order);\n    event NFTY_OrderFinalized(Order, uint256);\n    event NFTY_OrderCancelled(Order);\n\n    event NFTY_OfferMade(Token, Offer);\n    event NFTY_OfferAccepted(Token, Offer);\n    event NFTY_OfferCancelled(Token, Offer);\n\n    constructor(address _signer) {\n        require(_signer != address(0), \"Invalid address\");\n        verifyWallet = _signer;\n    }\n\n    /**\n    * @dev Set marketplace fee\n    * @param _royaltyAddress fee receiver\n    * @param _royaltyFee fee bips\n    * @param _role 0 or 1.\n    */\n    function setRoyaltyFee(\n        address _royaltyAddress,\n        uint256 _royaltyFee,\n        uint256 _role\n    ) external onlyOwner returns (bool) {\n        require(_role == 0 || _role == 1, \"Role must be admin or superadmin\");\n        require(\n            _royaltyAddress != address(0),\n            \"Address couldn't be zero address\"\n        );\n\n        require(_royaltyFee < BASE_BIPS, \"Invalid bips\");\n\n        marketplaceRoyaltyAddress[_role] = _royaltyAddress;\n        marketplaceRoyaltyFee[_role] = _royaltyFee;\n\n        return true;\n    }\n\n    /**\n    * @dev Create new order\n    * @param order Order details\n    */    \n    function createOrder(Order memory order) external returns (bool) {\n        require(\n            order._contractType == 0 || order._contractType == 1,\n            \"Contract Type must be 0 or 1\"\n        );\n        require(\n            order._orderType == 0 || order._orderType == 1,\n            \"Order Type must be 0 or 1\"\n        );\n\n        if (order._contractType == 0) {\n            require(\n                msg.sender == IERC721(order._nftAddress).ownerOf(order._tokenId)\n            );\n        } else if (order._contractType == 1) {\n            require(\n                IERC1155(order._nftAddress).balanceOf(\n                    msg.sender,\n                    order._tokenId\n                ) >= order._amount\n            );\n        }\n\n        Order memory newOrder = order;\n        newOrder._creator = msg.sender;\n        newOrder._buyer = msg.sender;\n        newOrder._buyPrice = order._price;\n\n        bytes32 hash = hashOrder(newOrder);\n        orders[hash] = newOrder;\n        existOrder[hash] = true;\n\n        emit NFTY_OrderCreated(newOrder);\n\n        return true;\n    }\n\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        /* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\n        uint256 size = (0x14 * 3) + (0x20 * 7);\n        bytes memory array = new bytes(size);\n        uint256 index;\n        assembly {\n            index := add(array, 0x20)\n        }\n\n        index = ArrayUtils.unsafeWriteUint(index, order._contractType);\n        index = ArrayUtils.unsafeWriteAddress(index, order._creator);\n        index = ArrayUtils.unsafeWriteAddress(index, order._nftAddress);\n        index = ArrayUtils.unsafeWriteUint(index, order._tokenId);\n        index = ArrayUtils.unsafeWriteUint(index, order._amount);\n        index = ArrayUtils.unsafeWriteUint(index, order._price);\n        index = ArrayUtils.unsafeWriteAddress(\n            index,\n            order._currencyTokenAddress\n        );\n        index = ArrayUtils.unsafeWriteUint(index, order._startTime);\n        index = ArrayUtils.unsafeWriteUint(index, order._endTime);\n        index = ArrayUtils.unsafeWriteUint(index, order._orderType);\n\n        assembly {\n            hash := keccak256(add(array, 0x20), size)\n        }\n        return hash;\n    }\n\n    function hashToken(Token memory token)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        uint256 size = 0x14 + (0x20 * 2);\n        bytes memory array = new bytes(size);\n        uint256 index;\n        assembly {\n            index := add(array, 0x20)\n        }\n\n        index = ArrayUtils.unsafeWriteUint(index, token._contractType);\n        index = ArrayUtils.unsafeWriteAddress(index, token._address);\n        index = ArrayUtils.unsafeWriteUint(index, token._tokenId);\n\n        assembly {\n            hash := keccak256(add(array, 0x20), size)\n        }\n\n        return hash;\n    }\n\n    function hashOffer(Offer memory offer)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        uint256 size = (0x14 * 2) + (0x20 * 3);\n        bytes memory array = new bytes(size);\n        uint256 index;\n        assembly {\n            index := add(array, 0x20)\n        }\n\n        index = ArrayUtils.unsafeWriteAddress(index, offer._offerAddress);\n        index = ArrayUtils.unsafeWriteUint(index, offer._offerPrice);\n        index = ArrayUtils.unsafeWriteUint(index, offer._offerAmount);\n        index = ArrayUtils.unsafeWriteAddress(\n            index,\n            offer._offerCurrencyTokenAddress\n        );\n        index = ArrayUtils.unsafeWriteUint(index, offer._offerTime);\n\n        assembly {\n            hash := keccak256(add(array, 0x20), size)\n        }\n\n        return hash;\n    }\n\n    /**\n    * @dev Cancel existing order from order creator\n    * @param order Order detail\n    */\n    function cancelOrder(Order memory order) external returns (bool) {\n        bytes32 hash = hashOrder(order);\n\n        require(existOrder[hash] == true, \"Order does not exist\");\n        require(\n            msg.sender == orders[hash]._creator,\n            \"Sender must be equal to creator\"\n        );\n        require(\n            getOrderState(order) == OrderState.OPEN,\n            \"Order must be opened\"\n        );\n        require(\n            order._buyPrice == orders[hash]._buyPrice,\n            \"Order param is invalid\"\n        );\n        require(order._buyer == orders[hash]._buyer, \"Order param is invalid\");\n\n        if (order._orderType == 1) {\n            require(\n                order._buyer == order._creator,\n                \"Cannot cancel auction while the acution is on\"\n            );\n        }\n\n        cancelledOrFinalized[hash] = true;\n\n        emit NFTY_OrderCancelled(order);\n\n        return true;\n    }\n\n    /**\n    * @dev Buy nft from existing order\n    * @param order Order detail from where buy nft\n    * @param amount quantity\n    */\n    function buyAsset(Order memory order, uint256 amount, address[] memory royalty_addresses, uint256[] memory royalty_bips, bytes memory signature)\n        external\n        payable\n        returns (bool)\n    {\n        bytes32 hash = hashOrder(order);\n\n        require(existOrder[hash] == true, \"Order does not exist\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(order._amount >= amount, \"Insufficient Order NFT amount\");\n\n        require(\n            msg.sender != orders[hash]._creator,\n            \"Creator must not buy assets\"\n        );\n        require(\n            getOrderState(order) == OrderState.OPEN,\n            \"Order must be opened\"\n        );\n        require(\n            order._buyPrice == orders[hash]._buyPrice,\n            \"Order param is invalid\"\n        );\n        require(order._buyer == orders[hash]._buyer, \"Order param is invalid\");\n\n        if (orders[hash]._currencyTokenAddress == address(0)) {\n            require(\n                msg.value >= orders[hash]._price * amount,\n                \"Price must be bigger\"\n            );\n        } else {\n            // Native token\n            require(\n                IERC20(orders[hash]._currencyTokenAddress).allowance(\n                    msg.sender,\n                    address(this)\n                ) >= order._price * amount,\n                \"Invalid Allow\"\n            );\n\n            IERC20(orders[hash]._currencyTokenAddress).safeTransferFrom(\n                msg.sender,\n                address(this),\n                order._price * amount\n            );\n        }\n\n        orders[hash]._buyer = msg.sender;\n        orders[hash]._buyPrice = orders[hash]._price;\n\n        cancelledOrFinalized[hash] = true;\n\n        finalizeOrder(orders[hash], amount, royalty_addresses, royalty_bips, signature);\n\n        return true;\n    }\n\n\n    /**\n    * @dev Refund auction bid member\n    * @param order Order detail\n    */\n    function refundBid(Order memory order) external onlyOwner {\n        bytes32 hash = hashOrder(order);\n        \n        require(existOrder[hash] == true, \"Order does not exist\");\n\n        if (order._currencyTokenAddress == address(0)) {\n            payable(orders[hash]._buyer).transfer(orders[hash]._buyPrice * orders[hash]._amount);\n        } else {\n            IERC20(orders[hash]._currencyTokenAddress).safeTransfer(\n                orders[hash]._buyer,\n                orders[hash]._buyPrice * orders[hash]._amount\n            );\n        }\n\n        cancelledOrFinalized[hash] = true;\n        existOrder[hash] = false;\n\n        emit NFTY_OrderFinalized(order, 0);\n    }\n\n    /**\n    * @dev Place bid in existing order\n    * @param order Order detail\n    */\n    function placeBid(Order memory order) external payable returns (bool) {\n        bytes32 hash = hashOrder(order);\n        require(existOrder[hash] == true, \"Order does not exist\");\n        require(\n            msg.sender != orders[hash]._creator,\n            \"Creator must not place bid\"\n        );\n        require(\n            getOrderState(order) == OrderState.OPEN,\n            \"Order must be opened\"\n        );\n\n        if (order._currencyTokenAddress == address(0)) {\n            require(\n                orders[hash]._buyPrice * orders[hash]._amount < msg.value,\n                \"Bid price must be bigger\"\n            );\n        } else {\n            require(\n                orders[hash]._buyPrice < order._buyPrice,\n                \"Bid price must be bigger\"\n            );\n        }\n\n        if (orders[hash]._buyPrice != orders[hash]._price) {\n            if (order._currencyTokenAddress == address(0)) {\n                payable(address(uint160(order._buyer))).transfer(\n                    orders[hash]._buyPrice * orders[hash]._amount\n                );\n            } else {\n                IERC20(order._currencyTokenAddress).safeTransfer(\n                    order._buyer,\n                    orders[hash]._buyPrice * orders[hash]._amount\n                );\n            }\n        }\n\n        if (order._currencyTokenAddress == address(0)) {\n            orders[hash]._buyer = msg.sender;\n            orders[hash]._buyPrice = msg.value / orders[hash]._amount;\n        } else {\n            orders[hash]._buyer = msg.sender;\n            orders[hash]._buyPrice = order._buyPrice;\n\n            IERC20(orders[hash]._currencyTokenAddress).safeTransferFrom(\n                msg.sender,\n                address(this),\n                order._buyPrice * order._amount\n            );\n        }\n\n        emit NFTY_OrderNewBid(orders[hash]);\n\n        return true;\n    }\n\n    /**\n    * @dev Make offer to certain nft\n    * @param token nft data to where sending offer\n    * @param _price quote price\n    * @param _amount quantity\n    * @param _offerCurrencyTokenAddress payment token address. 0 when native token\n    */\n    function makeOffer(\n        Token memory token,\n        uint256 _price,\n        uint256 _amount,\n        address _offerCurrencyTokenAddress\n    ) external payable returns (bool) {\n        Offer memory newOffer;\n        if (_offerCurrencyTokenAddress == address(0)) {\n            require(msg.value >= _price * _amount, \"Price must be bigger\");\n            newOffer = Offer(\n                msg.sender,\n                msg.value / _amount,\n                _amount,\n                _offerCurrencyTokenAddress,\n                block.timestamp\n            );\n        } else {\n            require(\n                IERC20(_offerCurrencyTokenAddress).allowance(\n                    msg.sender,\n                    address(this)\n                ) >= _price * _amount,\n                \"Invalid Allow\"\n            );\n\n            IERC20(_offerCurrencyTokenAddress).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _price * _amount\n            );\n            newOffer = Offer(\n                msg.sender,\n                _price,\n                _amount,\n                _offerCurrencyTokenAddress,\n                block.timestamp\n            );\n        }\n\n        bytes32 _tokenHash = hashToken(token);\n        bytes32 _offerHash = hashOffer(newOffer);\n\n        offers[_tokenHash][_offerHash] = newOffer;\n        existOffer[_tokenHash][_offerHash] = true;\n\n        emit NFTY_OfferMade(token, newOffer);\n\n        return true;\n    }\n\n    \n    function verifySignature(bytes memory signature, address nftContractAddress, address[] memory royalty_addresses, uint256[] memory royalty_bips) internal view {\n        bytes memory bytesEncoded = abi.encodePacked(msg.sender, nftContractAddress);\n        bytesEncoded = abi.encodePacked(bytesEncoded, royalty_addresses, royalty_bips);\n        bytes32 msgHash = keccak256(bytesEncoded);\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n        require(verifyWallet == prefixedHash.recover(signature), \"Invalid signature\");\n    }\n\n    /**\n    * @dev accept incoming offer\n    * @param token nft data\n    * @param offer incoming offer\n    */\n    function acceptOffer(Token memory token, Offer memory offer, address[] memory royalty_addresses, uint256[] memory royalty_bips, bytes memory signature)\n        external\n        payable\n        returns (bool)\n    {\n        bytes32 _tokenHash = hashToken(token);\n        bytes32 _offerHash = hashOffer(offer);\n\n        require(\n            existOffer[_tokenHash][_offerHash] == true,\n            \"Offer does not exist\"\n        );\n\n        if (token._contractType == 0) {\n            require(\n                msg.sender == IERC721(token._address).ownerOf(token._tokenId), \"You are not nft owner\"\n            );\n        } else if (token._contractType == 1) {\n            require(\n                IERC1155(token._address).balanceOf(msg.sender, token._tokenId) >=\n                    offer._offerAmount, \"Insufficient NFT balance\"\n            );\n        } else {\n            return false;\n        }\n\n        // verify signature\n        verifySignature(signature, token._address, royalty_addresses, royalty_bips);\n\n        withdrawToken(\n            token,\n            msg.sender,\n            offer._offerAddress,\n            offer._offerAmount\n        );\n        _withdrawFunds(\n            token._address,\n            token._tokenId,\n            msg.sender,\n            offer._offerPrice * offer._offerAmount,\n            offer._offerCurrencyTokenAddress,\n            royalty_addresses,\n            royalty_bips\n        );\n\n        existOffer[_tokenHash][_offerHash] = false;\n\n        emit NFTY_OfferAccepted(token, offer);\n\n        return true;\n    }\n\n    /**\n    * @dev Cancel existing offer\n    * @param token NFT data\n    * @param offer existing offer\n    */\n    function cancelOffer(Token memory token, Offer memory offer)\n        external\n        payable\n        returns (bool)\n    {\n        bytes32 _tokenHash = hashToken(token);\n        bytes32 _offerHash = hashOffer(offer);\n\n        require(\n            existOffer[_tokenHash][_offerHash] == true,\n            \"Offer does not exist\"\n        );\n        require(\n            msg.sender == offer._offerAddress,\n            \"Offer creator must cancel offer\"\n        );\n\n        if (offer._offerCurrencyTokenAddress == address(0)) {\n            payable(offer._offerAddress).transfer(\n                offer._offerPrice * offer._offerAmount\n            );\n        } else {\n            IERC20(offer._offerCurrencyTokenAddress).safeTransfer(\n                offer._offerAddress,\n                offer._offerPrice * offer._offerAmount\n            );\n        }\n\n        existOffer[_tokenHash][_offerHash] = false;\n\n        emit NFTY_OfferCancelled(token, offer);\n\n        return true;\n    }\n\n    function finalizeOrder(Order memory order, uint256 amount, address[] memory royalty_addresses, uint256[] memory royalty_bips, bytes memory signature)\n        public\n        returns (bool)\n    {\n        bytes32 hash = hashOrder(order);\n\n        require(existOrder[hash] == true, \"Order does not exist\");\n        require(order._amount >= amount, \"Insufficient NFT Order Balance\");\n        require(\n            getOrderState(order) == OrderState.FINISHED,\n            \"Order must be finished\"\n        );\n        verifySignature(signature, order._nftAddress, royalty_addresses, royalty_bips);\n\n        cancelledOrFinalized[hash] = true;\n        existOrder[hash] = false;\n\n        if (order._creator == order._buyer) {\n            emit NFTY_OrderFinalized(order, amount);\n            return true;\n        }\n\n        uint256 price = order._buyPrice * amount;\n\n        withdrawToken(\n            Token(order._contractType, order._nftAddress, order._tokenId),\n            order._creator,\n            order._buyer,\n            amount\n        );\n\n        _withdrawFunds(\n            order._nftAddress,\n            order._tokenId,\n            order._creator,\n            price,\n            order._currencyTokenAddress,\n            royalty_addresses,\n            royalty_bips\n        );\n\n        order._amount -= amount;\n        bytes32 newHash = hashOrder(order);\n        orders[newHash] = order;\n        existOrder[newHash] = true;\n\n        emit NFTY_OrderFinalized(order, amount);\n        return true;\n    }\n\n    function withdrawToken(\n        Token memory _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal returns (bool) {\n        if (_token._contractType == 0) {\n            IERC721(_token._address).transferFrom(_from, _to, _token._tokenId);\n        } else if (_token._contractType == 1) {\n            IERC1155(_token._address).safeTransferFrom(\n                _from,\n                _to,\n                _token._tokenId,\n                _amount,\n                \"\"\n            );\n        } else {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _withdrawFunds(\n        address _nftAddress,\n        uint256 _tokenId,\n        address _to,\n        uint256 _price,\n        address _currencyTokenAddress,\n        address[] memory royalty_addresses,\n        uint256[] memory royalty_bips\n    ) internal returns (bool) {\n        uint256 royalty_fee;\n        address royalty_address;\n        uint256 total_royalty_fee;\n\n        uint256 royalty_length = royalty_addresses.length;\n        \n        if (royalty_length > 0) {\n            total_royalty_fee = _takeMarketplaceFee(_currencyTokenAddress, _price);\n\n            // transfer ETH\n            if (_currencyTokenAddress == address(0)) {\n                for (uint8 i = 0; i < royalty_length; i++) {\n                    \n                    royalty_fee = royalty_bips[i];\n                    royalty_address = royalty_addresses[i];\n\n                    if (royalty_address != address(0)) {\n                        payable(address(uint160(royalty_address))).transfer(\n                            (_price * royalty_fee) / BASE_BIPS\n                        );\n\n                        total_royalty_fee += (_price * royalty_fee) / BASE_BIPS;\n                    }\n                }\n\n                payable(address(uint160(_to))).transfer(\n                    _price - total_royalty_fee\n                );\n            }\n            //transfer Token\n            else {\n                for (uint8 i = 0; i < royalty_length; i++) {\n                    \n                    royalty_fee = royalty_bips[i];\n                    royalty_address = royalty_addresses[i];\n\n\n                    if (royalty_address != address(0)) {\n                        IERC20(_currencyTokenAddress).safeTransfer(\n                            royalty_address,\n                            (_price * royalty_fee) / BASE_BIPS\n                        );\n                        total_royalty_fee += (_price * royalty_fee) / BASE_BIPS;\n                    }\n                }\n\n                IERC20(_currencyTokenAddress).safeTransfer(\n                    _to,\n                    _price - total_royalty_fee\n                );\n            }\n        } else if (IERC165(_nftAddress).supportsInterface(type(IERC2981).interfaceId)) {\n            (address receiver, uint256 royalty_amount) = IERC2981(_nftAddress).royaltyInfo(_tokenId, _price);\n            total_royalty_fee = _takeMarketplaceFee(_currencyTokenAddress, _price);\n            // Transfer eth\n            if (_currencyTokenAddress == address(0)) {\n                if (receiver != address(0)) {\n                    payable(address(uint160(receiver))).transfer(\n                        royalty_amount\n                    );\n\n                    total_royalty_fee += royalty_amount;\n                }\n\n                payable(address(uint160(_to))).transfer(\n                    _price - total_royalty_fee\n                );\n            } else {\n                if (receiver != address(0)) {\n                    IERC20(_currencyTokenAddress).safeTransfer(\n                        receiver,\n                        royalty_amount\n                    );\n\n                    total_royalty_fee += royalty_amount;\n                }\n\n                IERC20(_currencyTokenAddress).safeTransfer(\n                    _to,\n                    _price - total_royalty_fee\n                );\n            }\n        } else {\n            // No royalty\n            total_royalty_fee = _takeMarketplaceFee(_currencyTokenAddress, _price);\n            if (_currencyTokenAddress == address(0)) {\n                payable(address(uint160(_to))).transfer(\n                    _price - total_royalty_fee\n                );\n            } else {\n                IERC20(_currencyTokenAddress).safeTransfer(\n                    _to,\n                    _price - total_royalty_fee\n                );\n            }\n        }\n\n        return true;\n    }\n\n    function _takeMarketplaceFee(address _currency, uint256 _price) private returns(uint256 total_royalty_fee) {\n        // ETH\n        if (_currency == address(0)) {\n            for (uint8 i = 0; i < 2; i++) {\n                if (marketplaceRoyaltyAddress[i] != address(0)) {\n                    uint256 fee = (_price * marketplaceRoyaltyFee[i]) / BASE_BIPS;\n                    payable(address(uint160(marketplaceRoyaltyAddress[i])))\n                        .transfer(fee);\n                    total_royalty_fee += fee;\n                }\n            }\n        } else {\n        // token\n            for (uint8 i = 0; i < 2; i++) {\n                if (marketplaceRoyaltyAddress[i] != address(0)) {\n                    uint256 fee = (_price * marketplaceRoyaltyFee[i]) / BASE_BIPS;\n                    IERC20(_currency).safeTransfer(\n                        marketplaceRoyaltyAddress[i],\n                        fee\n                    );\n                    total_royalty_fee += fee;\n                }\n            }\n        }\n    }\n\n    function getOrderState(Order memory order)\n        public\n        view\n        returns (OrderState)\n    {\n        bytes32 hash = hashOrder(order);\n\n        if (orders[hash]._orderType == 1) {\n            if (cancelledOrFinalized[hash] == true) return OrderState.FINISHED;\n            if (block.timestamp >= orders[hash]._endTime)\n                return OrderState.FINISHED;\n            if (block.timestamp < orders[hash]._startTime)\n                return OrderState.NOT_STARTED;\n            return OrderState.OPEN;\n        }\n\n        if (cancelledOrFinalized[hash] == true) return OrderState.FINISHED;\n        return OrderState.OPEN;\n    }\n\n    /**\n    * @dev Set signer\n     */\n     function setSigner(address _signer) external onlyOwner {\n        require(_signer != address(0), \"Invalid address\");\n        verifyWallet = _signer;\n     }\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Token\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_offerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NFTY_OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Token\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_offerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NFTY_OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Token\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_offerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NFTY_OfferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NFTY_OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NFTY_OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Order\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTY_OrderFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrderManager.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NFTY_OrderNewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Token\",\"name\":\"token\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_offerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerTime\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"royalty_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royalty_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"acceptOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"royalty_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royalty_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Token\",\"name\":\"token\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_offerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerTime\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"cancelOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelledOrFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"existOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"existOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"royalty_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royalty_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"finalizeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getOrderState\",\"outputs\":[{\"internalType\":\"enum OrderManager.OrderState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Token\",\"name\":\"token\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"}],\"name\":\"makeOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketplaceRoyaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketplaceRoyaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_offerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerCurrencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"placeBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_contractType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderManager.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"refundBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OrderManager", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002C238209AE09BBDD3A0BB513CE980F77E0B47948", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}