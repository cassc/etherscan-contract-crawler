{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2021-11-22\r\n*/\r\n\r\n/**\r\n * \r\n _______  __                   __      _______                      __                                __ \r\n|       \\|  \\                 |  \\    |       \\                    |  \\                              |  \\\r\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593 ______   ______ | \u2593\u2593    | \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\ ______   ______  _| \u2593\u2593_    ______   _______  ______ | \u2593\u2593\r\n| \u2593\u2593__| \u2593\u2593  \\/      \\ /      \\| \u2593\u2593    | \u2593\u2593__/ \u2593\u2593/      \\ /      \\|   \u2593\u2593 \\  /      \\ /       \\/      \\| \u2593\u2593\r\n| \u2593\u2593    \u2593\u2593 \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\  \u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593    | \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593\u2593\u2593 |  \u2593\u2593\u2593\u2593\u2593\u2593\\  \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593\r\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\ \u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593 \u2593\u2593    | \u2593\u2593\u2593\u2593\u2593\u2593\u2593| \u2593\u2593   \\\u2593\u2593 \u2593\u2593  | \u2593\u2593 | \u2593\u2593 __| \u2593\u2593  | \u2593\u2593 \u2593\u2593     | \u2593\u2593  | \u2593\u2593 \u2593\u2593\r\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593 \u2593\u2593__| \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593    | \u2593\u2593     | \u2593\u2593     | \u2593\u2593__/ \u2593\u2593 | \u2593\u2593|  \\ \u2593\u2593__/ \u2593\u2593 \u2593\u2593_____| \u2593\u2593__/ \u2593\u2593 \u2593\u2593\r\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593\\\u2593\u2593    \u2593\u2593\\\u2593\u2593     \\ \u2593\u2593    | \u2593\u2593     | \u2593\u2593      \\\u2593\u2593    \u2593\u2593  \\\u2593\u2593  \u2593\u2593\\\u2593\u2593    \u2593\u2593\\\u2593\u2593     \\\\\u2593\u2593    \u2593\u2593 \u2593\u2593\r\n \\\u2593\u2593   \\\u2593\u2593\\\u2593\u2593_\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\u2593\u2593     \\\u2593\u2593      \\\u2593\u2593       \\\u2593\u2593\u2593\u2593\u2593\u2593    \\\u2593\u2593\u2593\u2593  \\\u2593\u2593\u2593\u2593\u2593\u2593  \\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\u2593\u2593\u2593\u2593\u2593\u2593 \\\u2593\u2593\r\n            |  \\__| \u2593\u2593                                                                                   \r\n             \\\u2593\u2593    \u2593\u2593                                                                                   \r\n              \\\u2593\u2593\u2593\u2593\u2593\u2593                                                                                    \r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// File: @openzeppelin/contracts/token/BEP20/IBEP20.sol\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /**\r\n     *@dev Emitted when the value of locked transfer is called. \r\n     */\r\n    event TransferLock(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/RigelToken.sol\r\n\r\n/**\r\n * @dev Implementation of the Owned Contract.\r\n *\r\n */\r\ncontract Owned is Context {\r\n\r\n    address public _owner;\r\n    address public _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(_msgSender() == _owner, \"RigelToken: Only Owner can perform this task\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(_msgSender() == _newOwner, \"RigelToken: Token Contract Ownership has not been set for the address\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n        _newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n */\r\ncontract RigelToken is IBEP20, Owned {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _balances; // Total balance per address (locked + unlocked)\r\n\r\n    mapping (address => uint256) private _unlockedTokens; // Unlocked Tokens, available for transfer\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    struct LockRecord {\r\n        uint256 lockingPeriod;\r\n        uint256 tokens;\r\n        bool isUnlocked;\r\n    }\r\n\r\n    mapping(address => LockRecord[]) private records; // Record of Locking periods and tokens per address\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor( address owner ) public {\r\n        _name = \"RigelToken\";\r\n        _symbol = \"RGP\";\r\n        _decimals = 18;\r\n        _totalSupply = 5000000 * (10 ** 18);\r\n        _owner = owner;\r\n        _balances[_owner] = _totalSupply;\r\n        _unlockedTokens[_owner] = _totalSupply;\r\n        emit Transfer(address(0), _owner, _totalSupply );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-balanceOf}.\r\n     */\r\n    function unLockedBalanceOf(address account) public view returns (uint256) {\r\n        return _unlockedTokens[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(),recipient,amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        \r\n        require(spender != address(0), \"RigelToken: approve to the zero address\");\r\n\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender,recipient,amount);\r\n\r\n        require(amount <= _allowances[sender][_msgSender()],\"RigelToken: Check for approved token count failed\");\r\n        \r\n        _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()].sub(amount);\r\n\r\n        emit Approval(sender, _msgSender(), _allowances[sender][_msgSender()]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        \r\n        require(recipient != address(0),\"RigelToken: Cannot have recipient as zero address\");\r\n        require(sender != address(0),\"RigelToken: Cannot have sender as zero address\");\r\n        require(_balances[sender] >= amount,\"RigelToken: Insufficient Balance\" );\r\n        require(_balances[recipient] +amount >= _balances[recipient],\"RigelToken: Balance check failed\");\r\n        \r\n        // update the unlocked tokens based on time if required\r\n        _updateUnLockedTokens(sender, amount);\r\n        _unlockedTokens[sender] = _unlockedTokens[sender].sub(amount);\r\n        _unlockedTokens[recipient] = _unlockedTokens[recipient].add(amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        \r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n    function _transferLock(address sender, address recipient, uint256 amount) private {\r\n        \r\n        require(recipient != address(0),\"RigelToken: Cannot have recipient as zero address\");\r\n        require(sender != address(0),\"RigelToken: Cannot have sender as zero address\");\r\n        require(_balances[sender] >= amount,\"RigelToken: Insufficient Balance\" );\r\n        require(_balances[recipient] + amount >= _balances[recipient],\"RigelToken: Balance check failed\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        _unlockedTokens[sender] = _unlockedTokens[sender].sub(amount);\r\n\r\n        emit TransferLock(sender,recipient,amount);\r\n    }\r\n    \r\n    function transferOtherCurrencies(address token, address recipient) public onlyOwner {\r\n        IBEP20(token).transfer(recipient, IBEP20(token).balanceOf(address(this)));\r\n    }\r\n    \r\n     /**\r\n     * @dev Destroys `amount` tokens from the `account`.\r\n     *\r\n     * See {BEP20-_burn}.\r\n     */\r\n     \r\n    function burn(address account, uint256 amount) public onlyOwner {\r\n\r\n        require(account != address(0), \"RigelToken: burn from the zero address\");\r\n\r\n        if( _balances[account] == _unlockedTokens[account]){\r\n            _unlockedTokens[account] = _unlockedTokens[account].sub(amount, \"RigelToken: burn amount exceeds balance\");\r\n        }\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"RigelToken: burn amount exceeds balance\");\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        if(account != _msgSender()){\r\n            \r\n            require(amount <= _allowances[account][_msgSender()],\"RigelToken: Check for approved token count failed\");\r\n\r\n            _allowances[account][_msgSender()] = _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\");\r\n            emit Approval(account, _msgSender(), _allowances[account][_msgSender()]);\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's _msgSender() to `to` _msgSender()\r\n    // - Owner's _msgSender() must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // - takes in locking Period to lock the tokens to be used\r\n    // - if want to transfer without locking enter 0 in lockingPeriod argument \r\n    // ------------------------------------------------------------------------\r\n    function distributeTokens(address to, uint256 tokens, uint256 lockingPeriod) onlyOwner public returns (bool success) {\r\n        // if there is no lockingPeriod, add tokens to _unlockedTokens per address\r\n        if(lockingPeriod == 0)\r\n            _transfer(_msgSender(),to, tokens);\r\n        // if there is a lockingPeriod, add tokens to record mapping\r\n        else {\r\n            _transferLock(_msgSender(),to, tokens);\r\n            _addRecord(to, tokens, lockingPeriod);\r\n        }\r\n        return true;\r\n    }\r\n        \r\n    // ------------------------------------------------------------------------\r\n    // Adds record of addresses with locking period and tokens to lock\r\n    // ------------------------------------------------------------------------\r\n    function _addRecord(address to, uint256 tokens, uint256 lockingPeriod) private {\r\n        records[to].push(LockRecord(lockingPeriod,tokens, false));\r\n    }\r\n        \r\n    // ------------------------------------------------------------------------\r\n    // Checks if there is required amount of unLockedTokens available\r\n    // ------------------------------------------------------------------------\r\n    function _updateUnLockedTokens(address _from, uint256 tokens) private returns (bool success) {\r\n        // if _unlockedTokens are greater than \"tokens\" of \"to\", initiate transfer\r\n        if(_unlockedTokens[_from] >= tokens){\r\n            return true;\r\n        }\r\n        // if _unlockedTokens are less than \"tokens\" of \"to\", update _unlockedTokens by checking record with \"now\" time\r\n        else{\r\n            _updateRecord(_from);\r\n            // check if _unlockedTokens are greater than \"token\" of \"to\", initiate transfer\r\n            if(_unlockedTokens[_from] >= tokens){\r\n                return true;\r\n            }\r\n            // otherwise revert\r\n            else{\r\n                revert(\"RigelToken: Insufficient unlocked tokens\");\r\n            }\r\n        }\r\n    }\r\n        \r\n    // ------------------------------------------------------------------------\r\n    // Unlocks the coins if lockingPeriod is expired\r\n    // ------------------------------------------------------------------------\r\n     function _updateRecord(address account) private returns (bool success){\r\n        LockRecord[] memory tempRecords = records[account];\r\n        uint256 unlockedTokenCount = 0;\r\n        for(uint256 i=0; i < tempRecords.length; i++){\r\n            if(tempRecords[i].lockingPeriod < now && tempRecords[i].isUnlocked == false){\r\n                unlockedTokenCount = unlockedTokenCount.add(tempRecords[i].tokens);\r\n                tempRecords[i].isUnlocked = true;\r\n                records[account][i].isUnlocked = true;\r\n            }\r\n        }\r\n        _unlockedTokens[account] = _unlockedTokens[account].add(unlockedTokenCount);\r\n        return true;\r\n    }        \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferLock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOtherCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unLockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RigelToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f86c4388ce9d7dbfaac5114e27f63903586841c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://563f4b462d65f64fa96c144d66f2c264ce7831dd6bcded843eb5cd3bb3628215"}