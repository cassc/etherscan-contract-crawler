{"SourceCode": "/*\r\n  _            _   _        __           \r\n | |_ _  _ _ _| |_| |___   / _|__ _ _ _  \r\n |  _| || | '_|  _| / -_)_|  _/ _` | ' \\ \r\n  \\__|\\_,_|_|  \\__|_\\___(_)_| \\__,_|_||_|\r\n                                    \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\ncontract TurtleFanV1 is Ownable {\r\n    address public protocolFeeDestination;\r\n    uint256 public protocolFeePercent;\r\n    uint256 public subjectFeePercent;\r\n    uint256 public holderFeePercent;\r\n\r\n    event Trade(address trader, address subject, bool isBuy, uint256 shareAmount, uint256 ethAmount, uint256 protocolEthAmount, uint256 subjectEthAmount, uint256 holderEthAmount, uint256 supply, uint256 timestamp);\r\n\r\n    mapping(address => mapping(address => uint256)) public sharesBalance;\r\n\r\n    mapping(address => uint256) public sharesSupply;\r\n\r\n    mapping(address => address[]) public sharesSubjectToBuyers;\r\n\r\n    mapping(address => address[]) public BuyerTosharesSubjects;\r\n\r\n\r\n    function setFeeDestination(address _feeDestination) public onlyOwner {\r\n        protocolFeeDestination = _feeDestination;\r\n    }\r\n\r\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\r\n        protocolFeePercent = _feePercent;\r\n    }\r\n\r\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\r\n        subjectFeePercent = _feePercent;\r\n    }\r\n\r\n    function setHolderFeePercent(uint256 _feePercent) public onlyOwner {\r\n        holderFeePercent = _feePercent;\r\n    }\r\n\r\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\r\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1 )* (supply) * (2 * (supply - 1) + 1) / 6;\r\n        uint256 sum2 = supply == 0 && amount == 1 ? 0 : (supply - 1 + amount) * (supply + amount) * (2 * (supply - 1 + amount) + 1) / 6;\r\n        uint256 summation = sum2 - sum1;\r\n        return summation * 1000000000000000000 / 12;\r\n    }\r\n\r\n\r\n    function getBuyPrice(address sharesSubject, uint256 amount) public view returns (uint256) {\r\n        return getPrice(sharesSupply[sharesSubject], amount);\r\n    }\r\n\r\n    function getSellPrice(address sharesSubject, uint256 amount) public view returns (uint256) {\r\n        return getPrice(sharesSupply[sharesSubject] - amount, amount);\r\n    }\r\n\r\n    function getBuyPriceAfterFee(address sharesSubject, uint256 amount) public view returns (uint256) {\r\n        uint256 price = getBuyPrice(sharesSubject, amount);\r\n        uint256 protocolFee = (price * protocolFeePercent) / 1 ether;\r\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\r\n        uint256 holderFee = (price * holderFeePercent) / 1 ether;\r\n        return price + protocolFee + subjectFee + holderFee;\r\n    }\r\n\r\n    function getSellPriceAfterFee(address sharesSubject, uint256 amount) public view returns (uint256) {\r\n        uint256 price = getSellPrice(sharesSubject, amount);\r\n        uint256 protocolFee = (price * protocolFeePercent) / 1 ether;\r\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\r\n        uint256 holderFee = (price * holderFeePercent) / 1 ether;\r\n        return price - protocolFee - subjectFee - holderFee;\r\n    }\r\n\r\n    function getSubjectsForBuyer(address buyer) public view returns (address[] memory) {\r\n        return BuyerTosharesSubjects[buyer];\r\n    }\r\n\r\n    function getBuyersForSubject(address subject) public view returns (address[] memory) {\r\n        return sharesSubjectToBuyers[subject];\r\n    }\r\n\r\n    function AddtoArray(address sharesSubject, uint256 amount) private {\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            BuyerTosharesSubjects[msg.sender].push(sharesSubject);\r\n        }\r\n    }\r\n\r\n    function RemovefromArray(address sharesSubject, uint256 amount) private {\r\n     address[] storage holdings = BuyerTosharesSubjects[msg.sender];\r\n        uint256 removals = 0;\r\n        for (uint256 i = 0; i < holdings.length && removals < amount;) {\r\n            if (holdings[i] == sharesSubject) {\r\n                holdings[i] = holdings[holdings.length - 1];\r\n                holdings.pop();\r\n                removals++;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function buyShell(address sharesSubject, uint256 amount) public payable {\r\n        uint256 supply = sharesSupply[sharesSubject];\r\n        require(supply > 0 || sharesSubject == msg.sender, \"Only the shares' subject can buy the first share\");\r\n        uint256 price = getPrice(supply, amount);\r\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\r\n        uint256 holderFee = price * holderFeePercent / 1 ether;\r\n        require(msg.value >= price + protocolFee + subjectFee + holderFee, \"Insufficient payment\");\r\n        sharesBalance[sharesSubject][msg.sender] = sharesBalance[sharesSubject][msg.sender] + amount;\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            sharesSubjectToBuyers[sharesSubject].push(msg.sender);\r\n        }\r\n        sharesSupply[sharesSubject] = supply + amount;\r\n        AddtoArray(sharesSubject, amount);\r\n        emit Trade(msg.sender, sharesSubject, true, amount, price, protocolFee, subjectFee, holderFee, supply + amount, block.timestamp);\r\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success2, ) = sharesSubject.call{value: subjectFee}(\"\");\r\n        address[] memory shareHolders = sharesSubjectToBuyers[sharesSubject];\r\n        uint256 individualHolderFee = holderFee / shareHolders.length;\r\n        for (uint256 i = 0; i < shareHolders.length; i++) {\r\n            (bool successLoop, ) = shareHolders[i].call{value: individualHolderFee}(\"\");\r\n            require(successLoop, \"Unable to send funds to a holder\");\r\n        }\r\n        require(success1 && success2, \"Unable to send funds\");\r\n    }\r\n\r\n\r\n    function sellShell(address sharesSubject, uint256 amount) public payable {\r\n        uint256 supply = sharesSupply[sharesSubject];\r\n        require(supply > amount, \"Cannot sell the last share\");\r\n        require(sharesBalance[sharesSubject][msg.sender] >= amount, \"Insufficient shares\");\r\n        sharesBalance[sharesSubject][msg.sender] = sharesBalance[sharesSubject][msg.sender] - amount;\r\n        address[] storage buyers = sharesSubjectToBuyers[sharesSubject];\r\n        uint256 removals = 0;\r\n        for (uint256 i = 0; i < buyers.length && removals < amount;) {\r\n            if (buyers[i] == msg.sender) {\r\n                buyers[i] = buyers[buyers.length - 1];\r\n                buyers.pop();\r\n                removals++;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        sharesSupply[sharesSubject] = supply - amount;\r\n        RemovefromArray(sharesSubject, amount);\r\n        uint256 price = getPrice(supply - amount, amount);\r\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\r\n        uint256 holderFee = price * holderFeePercent / 1 ether;\r\n        uint256 forEvent = supply - amount;\r\n        emit Trade(msg.sender, sharesSubject, false, amount, price, protocolFee, subjectFee, holderFee, forEvent, block.timestamp);\r\n        (bool success1, ) = msg.sender.call{value: price - protocolFee - subjectFee - holderFee}(\"\");\r\n        (bool success2, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success3, ) = sharesSubject.call{value: subjectFee}(\"\");\r\n        address[] memory shareHolders = sharesSubjectToBuyers[sharesSubject];\r\n        uint256 individualHolderFee = holderFee / shareHolders.length;\r\n        for (uint256 i = 0; i < shareHolders.length; i++) {\r\n            (bool successLoop, ) = shareHolders[i].call{value: individualHolderFee}(\"\");\r\n            require(successLoop, \"Unable to send funds to a holder\");\r\n        }\r\n        require(success1 && success2 && success3, \"Unable to send funds\");\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holderEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BuyerTosharesSubjects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyShell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getBuyersForSubject\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getSubjectsForBuyer\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellShell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setHolderFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sharesSubjectToBuyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TurtleFanV1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://468b3198cf6728f1b524b0e049207d55cc6020d834d978470af389f0eeea3e1d"}